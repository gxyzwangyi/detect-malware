


import os
import sys
import re
from bs4 import BeautifulSoup

from androwarn.analysis.analysis import *


small_letters = map(chr, range(ord('a'), ord('z')+1))
RegexpType = type(re.compile(''))





privacy_problem=[]

# 获取手机信息-获取手机基础信息
pp1 = ["getDeviceId()", "getPhoneType()", "getCellLocation()", "getCallState()", "getLine1Number()", "getSimSerialNumber()", "getNetworkOperatorName()",r'getSystemService("phone"',"getSubscriberId()",r'.getSystemService("phone"']
# 获取位置
pp2 = ["getCid()","getLac()","getNetworkId()","getBaseStationId()",r'getSystemService("location"']


# .getSystemService("phone")
# .getSubscriberId()

#录制视频
pp3=[r"new MediaRecorder()", r"setVideoSource"]

#获取wifi
pp4=[r'getSystemService("wifi"',]

#通讯录



#获取应用信息





# 存储类问题
pp1 = re.compile(r'[\s\S]*?getSharedPreferences\S*?, [1,2][\s\S]*?')
# 读取通讯录
pp2 = r"android.provider.ContactsContract.Contacts.CONTENT_URI"
# 拨打电话权限
pp3 = r"android.intent.action.SENDTO"
# 发短信权限
pp4 = r"android.intent.action.CALL"
# 获取地理位置
pp5 = r'getSystemService("location"'
# 获取手机信息
pp6 = r'getSystemService("phone"'

# 获取应用信息
pp7 = r'getPackageManager().getInstalledPackages'
# 获取wifi信息
pp8 = r'getSystemService("wifi"'
# 拍照
pp9 = r"android.media.action.IMAGE_CAPTURE"
#录音或者视频
pp10 = r"new MediaRecorder()"
#视频
pp11 = r"setVideoSource"







# SmsManager.getDefault().sendDataMessage
# .getDisplayMessageBody()
# (Uri.parse("content://sms/inbox")

# 位置信息
# .getCid()
# .getLac()
# .getNetworkId();
# .getBaseStationId();

# 设备id
# .getSystemService("phone")
# .getSubscriberId()
# 本机号码
# .getSystemService("phone").getLine1Number();
# 安装应用
# PackageManager.getInstalledApplications(128).iterator();
# getSystemService("phone").getSimSerialNumber();
# 动态加载
# .loadClass
# 删
# .delete(Uri.parse("content://sms/")

# query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI
# query(ContactsContract.CommonDataKinds.Email.CONTENT_UR
# .query(ContactsContract.Contacts.CONTENT_URI
# .query(ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_URI
# .query(Uri.parse("content://icc/adn")
# WebView.loadUrl(String.format(Locale.US


# PendingIntent安全检测
# lnotificationManager_NotificationManager.notify

# 剪贴板检测
# ((ClipboardManager) getSystemService("clipboard")).setText(p1_ix.f_f);





























api_problem = [ p1,p2,p3,p4,p5,p6,p7,p8,p9]

result = [0 for i in range(len(api_problem))]






class function_class:
    def __int__(self,_source_apk_path,_apk_resource_folder,_apk_basename_without_ext,_apk_source_code_folder,java_code_file):
        

        self._source_apk_path=_source_apk_path
        self._apk_resource_folder=_apk_resource_folder
        self._apk_basename_without_ext=_apk_basename_without_ext
        self._apk_source_code_folder=_apk_source_code_folder
        self.java_code_file=java_code_file
        self.pack_list_mani=[]


    #获取全部包名以及第三方库处理
    def androwarn_find_thrid(self):
        a, d, x = AnalyzeAPK(self._source_apk_path)
        origin = sys.stdout
        os.system('pwd')
        f = open("output/"+self._apk_basename_without_ext+'/permission.txt', 'w')
        sys.stdout = f
        show_Permissions(x)
        sys.stdout = origin
        f.close()
        data = perform_analysis(self._source_apk_path, a, d, x, False)
        package_list = data[4]["apis_used"][4][1]
        third_package_list = []
        for n,package in enumerate(package_list):
            t1 = package.startswith(apk_package)
            t2 = package.startswith("com.android") 
            t3 = package.startswith("android.support")
            t4 = package.split(".")[1] in small_letters if len(package.split("."))>1 else False
            if not ( t1 or t2 or t3 or t4) :
                third_package = package.split(".")[0:3] if len(package.split("."))>2 else package.split(".")[0::]
                if third_package[-1] in small_letters:
                    third_package = third_package[0:-1]
                third_package = ".".join(third_package)
                third_package_list.append(third_package)
        third_package_list = set(third_package_list)
        return third_package_list

    

    


        # 是否加壳或者混淆
    def is_defend(self,all_classes_file ,pack_list,pack_list_mani):
        pn = open( all_classes_file, "r" )
        for line in pn.readlines( ):
            line = line.strip( '\n' )
            pack_list.append( line )
        print pack_list_mani
        for i in pack_list_mani:
            if i not in pack_list:
                return False
        return True





    # read manifest
    def read_manifest(self ):
        try:
            f = open( "%s/AndroidManifest.xml" % self._apk_resource_folder, "r" )
            ff = f.read( )
            f.close( )
            soup = BeautifulSoup( ff, "xml" )
            
            new_mani = file( self._apk_basename_without_ext + "_mani.txt", "a+" )

            for pa in soup.find_all( 'manifest' ):
                global apk_package
                apk_package = pa.get( 'package' )

            for up in soup.find_all( 'uses-permission' ):
                new_mani.write( up.get( 'android:name' ) + "\r" )
            new_mani.write( "--------------------------" + "\r" )

            for r in soup.find_all( 'receiver' ):
                new_mani.write( r.get( 'android:name' ) + "\r" )
            new_mani.write( "--------------------------" + "\r" )

            for s in soup.find_all( 'service' ):
                new_mani.write( s.get( 'android:name' ) + "\r" )
            new_mani.write( "--------------------------" + "\r" )

            for a in soup.find_all( 'activity' ):
                self.pack_list_mani.append( a.get( 'android:name' ) )
                new_mani.write( a.get( 'android:name' ) + "\r" )
            f.close( )
            
        except Exception:
            pass



    #java代码处理
    def java_match_api(self):
            for java_file in self.java_code_file:
                f = open( java_file, "r" )
            for line in f.readlines( ):
                for i in range( len( api_problem ) ):
                    if type( api_problem[i] ) == RegexpType:
                        is_match = re.match( api_problem[ i ], line )
                    else:
                        is_match = api_problem[i] in line
                    if is_match:
                        result[ i ] = 1

            f.close( )


            