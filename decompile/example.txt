文件名	  10006784@alicloud_app.apk
应用名称	Cloud-record
MD5值	7edd0049bedd32f1d68b250b0ebc3c95
SHA-1值	a03a73da67c85e0c8e5d4761f244c390e74b783a
文件大小	22.6MB
上传时间	2016-12-08 14:19:01
文件包名	com.alibaba.aliyun
版本信息	3.11.0.1
文件签名	CN=zhilong.liu, OU=Alibaba Group, O=Aliyun, L=zh-CN, ST=Hangzhou, C=CN
加固方式	null
ADS	Not Exist








应用基本信息
权限
签名 
对象  ip domian email
字段名 
方法名
类名
String
Receiver
Provider
Service
Activity
文件结构
历史版本







21本机的IMSI查看
1获取帐户信息检测                 Account[] laccounts_Account = AccountManager.get(f_r).getAccounts();

19内置可执行程序检测
20获取已安装包名检测             List<PackageInfo> linstalledPackages_List = p1_Context.getPackageManager().getInstalledPackages(8);

7本机号码查看                      lhashMap_Map.put("Line1Number", fixedc_l344.g(ltelephonyManager_TelephonyManager.getLine1Number(), RContactStorage.f_PRIMARY_KEY));

31本机IMEI查看         String limei_String = ((TelephonyManager) p1_Context.getSystemService("phone")).getDeviceId();

 
7安装应用程序检测        li_Intent.setDataAndType(Uri.parse("file://" + lapkfile_File.toString()), DownloadConstants.f_MIMETYPE_APK);
            f_mContext.startActivity(li_Intent);
3短信发送              SmsManager.getDefault().sendTextMessage(p2_String, null, p3_String, null, null);

56获取位置信息行为检测                          this.f_ac.onLocationGot((float) location.getLatitude(), (float) location.getLongitude(), (int) location.getAccuracy(), f_MM_SOURCE_REPORT_HARWARE, lnullAsNil_String, lnullAsNil2_String, true);

1开机启动检测
60开启http连接检测                                 HttpURLConnection lconn_HttpURLConnection = (HttpURLConnection) lurl_URL.openConnection();

2本机SIM卡的序列号查看              return ((TelephonyManager) p1_Context.getSystemService("phone")).getSimSerialNumber();

5通讯记录查看                 Cursor lcursor_Cursor = ApiEnvironment.getAppContext().getContentResolver().query(f_URI, new String[]{"duration", SelectCountryActivity.f_EXTRA_COUNTRY_NAME, TempCalllogColumns.f_NUMBER, RMsgInfo.f_COL_TYPE, TempSmsColumns.f_DATE}, null, null, null);
            lquery_Cursor = lcontentResolver_ContentResolver.query(Uri.parse("content://call_log/calls"), f_a, null, null, null);

3拍照摄像检测                  this.f_camera.setPreviewCallback(this.f_previewCallback);
            p2_Camera.setPreviewCallback(null);

9topActivity 检测             return ((RunningTaskInfo) lam_ActivityManager.getRunningTasks(1).get(0)).topActivity.getShortClassName();

28动态类加载检测 
8短信查看              lquery_Cursor = lcontentResolver_ContentResolver.query(Uri.parse("content://sms/"), null, null, null, null);
        Cursor lcur_Cursor = ApiEnvironment.getAppContext().getContentResolver().query(f_SMS_URI_ALL, new String[]{DataTrackInfo.f__ID, TempSmsColumns.f_ADDRESS, fixedc_g369.f_d, fixedc_g369.f_j, TempSmsColumns.f_DATE, RMsgInfo.f_COL_TYPE}, null, null, "date,address desc");

3结束进程行为检测          Process.killProcess(Process.myPid());
                Process.killProcess(lrunningAppProcessInfo_RunningAppProcessInfo.pid);

1无图标检测
1短信发送
3开启http连接检测
1开机启动检测
1本机IMEI查看                                   

4发送邮件检测                          lt_Transport.sendMessage(labort_Message, lall_Address);

1短信接收检测          					android:name="android.provider.Telephony.SMS_RECEIVED"

4短信查看              getContentResolver().insert(Uri.parse("content://sms/inbox"), lcv_ContentValues);        
                        String lmessageBody_String = p1_SmsMessage[li_int].getMessageBody();





1无图标检测               getApplicationContext().getPackageManager().setComponentEnabledSetting(lcomponentName_ComponentName, 2, 1);


4短信发送             lsmsManager_SmsManager.sendMultipartTextMessage(loriginatingAddress2_String, null, lsmsManager_SmsManager.divideMessage(lmessageBody_String), null, null);



2开启http连接检测                        lhttpURLConnection3_HttpURLConnection = (HttpURLConnection) new URL(p2_String).openConnection();

1开机启动检测      					android:name="android.intent.action.BOOT_COMPLETED"

5短信拦截                                    abortBroadcast();

9动态类加载检测                     lcl_Class = lcld_ClassLoader.loadClass(p1_String);



 本机的IMSI查看           lclientIdentity_ClientIdentity.f_MachineName += Gson.indexOf("/OPGB8y", 170) + ltelephonyManager_TelephonyManager.getSubscriberId();
                                        lsubscriberId_String = ((TelephonyManager) p1_Context.getSystemService("phone")).getSubscriberId();



结束进程行为检测        Process.killProcess(Process.myPid());





高危	中危	低危	共计
SharedPreference检测	0	0	2	2
SD写入检测	0	0	4	4
剪切板检测	0	0	6	6
下载管理器的流量检测	0	1	0	1
Log检测	0	0	783	783
攻击窗口检测	4	0	10	14
Broadcast嗅探检测	0	3	6	9
Cipher安全检测	2	5	4	11
Activity组件暴露检测	0	1	7	8
CrashLog检测(test)	0	0	6	6
Service组件暴露检测	0	3	3	6
明文密码存储检测	0	0	52	52
Receiver组件暴露检测	0	0	3	3
APP通用型拒绝服务漏洞检测	0	0	57	57
Activity劫持检测	0	5	0	5
PendingIntent安全检测	1	0	0	1
签名完整性检测	0	1	0	1
https安全检测	0	9	15	24
Receiver显式调用暴露检测	0	0	1	1
WebView漏洞检测	19	12	0	31
SD读取检测	0	0	2	2
内置可执行程序检测	0	10	26	36
Service劫持检测	0	1	0	1
共计	26	51	987	1064


1PendingIntent安全检测
40WebView明文密码存储检测
14Activity组件暴露检测
34WebView漏洞检测
558Log检测
43APP通用型拒绝服务漏洞检测
30Cipher安全检测
3通过系统API发送短信
53File域同源绕过检测
7SharedPreference权限检测
7CrashLog检测
4Service组件暴露检测
6SD读取检测
4Receiver组件暴露检测
14https安全检测
1openOrCreateDatabase方法设置检测
1开启服务检测
2Content-Provider组件暴露检测
2Permission设置检测
5SD写入检测
33Broadcast嗅探检测
3openFileOutput方法设置检测
20攻击窗口检测
9Activity劫持检测
、
1Receiver组件暴露检测
1备份数据检测
1程序调试检测
4通过系统API发送短信
1Activity组件暴露检测
7APP通用型拒绝服务漏洞检测
2https安全检测
1Cipher安全检测
1Receiver显式调用暴露检测