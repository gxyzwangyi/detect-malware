

import os
import sys
from pretake import pretake_class
from wash import wash_class
from function import function_class




class main:
    def __int__(self,_apk_path):
        self._apk_path=_apk_path
        
        #基础位置
        self._running_path = os.path.split( os.path.realpath(self._apk_path ) )[ 0 ]
        self._tools_path = os.path.split( os.path.realpath(self._apk_path ) )[ 0 ]+"/tools"
        self._source_apk_path =self._apk_path
        self._output_path =self._running_path+"/output"
        self._output_folder = self.get_output_folder(self._source_apk_path )

        #
        self._apk_basename = os.path.basename(self._source_apk_path ).strip( )
        self._apk_basename_without_ext = os.path.splitext(self._apk_basename )[ 0 ]


        self._apk_jar = '%s-dex2jar.jar' % (self._output_folder +self._apk_basename_without_ext)
        self._apk_classes_folder = '%s_classes' % (self._output_folder +self._apk_basename_without_ext)
        self._apk_source_code_folder = '%s_source_code' % (self._output_folder +self._apk_basename_without_ext)
        self._apk_resource_folder = '%s_resource' % (self._output_folder +self._apk_basename_without_ext)
        self._apk_content_folder = '%s_content' % (self._output_folder +self._apk_basename_without_ext)
        self._apk_folder = '%s' % (self._output_folder +self._apk_basename_without_ext)
        

    # 确定反编译的输出目录，默认是当前apk所属目录
    def get_output_folder(self ):
            if not len( os.path.dirname(self._source_apk_path ) ) == 0:
                print os.path.dirname(self._source_apk_path ) + '/'
                return os.path.dirname(self._source_apk_path ) + '/'
            else:
                return os.path.dirname(self._source_apk_path )

    # 集中文件
    def move_file(self):
        print ('**** move file to a dir...')
        os.chdir(self._output_path )
        print (self._apk_basename_without_ext)
        os.system('pwd')
        os.system( 'mkdir %s' % self._apk_basename_without_ext )
        os.system( 'mv %s %s' % ("../method_counts.txt",self._apk_basename_without_ext) )
        os.system( 'mv %s %s' % ("../all_classes.txt",self._apk_basename_without_ext) )
        os.system( 'mv %s %s' % ("../"+self._apk_basename_without_ext + "_mani.txt",self._apk_basename_without_ext) )
        os.system( 'mv %s %s' % ("../"+self._apk_source_code_folder,self._apk_basename_without_ext) )
        os.system( 'mv %s %s' % ("../"+self._apk_resource_folder,self._apk_basename_without_ext) )
        os.system( 'mv %s %s' % ("../"+self._apk_content_folder,self._apk_basename_without_ext) )



    # 运行
    def process_all(self):
        report=open(self._apk_basename_without_ext+"report.txt","r")

        pretake=pretake_class(self._running_path,self._tools_path,self._source_apk_path,self._output_path,self._output_folder,self._apk_resource_folder,self._apk_classes_folder,self._apk_source_code_folder,self._apk_content_folder,self._apk_jar)
        pretake.get_all()

        wash=wash_class(self._apk_source_code_folder)


        java_code_file=wash.walk_source(self._apk_source_code_folder)
        

        function=function_class(report,self._source_apk_path,self._apk_resource_folder,self._apk_basename_without_ext,self._apk_source_code_folder,java_code_file)

        report.write("is_defend:"+str(function.is_defend()))
        
        report.write("java_match_api:"+str(function.java_match_api()))
        
        report.write("third-part-libiary:"+str(function.androwarn_find_thrid()))

        report.close()


        self.move_file()
        #print result



if __name__ == '__main__':
    main= main()
    main.process_all( )
