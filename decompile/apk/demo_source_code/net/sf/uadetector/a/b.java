// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.sf.uadetector.a;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.nio.charset.Charset;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import net.sf.qualitycheck.a;
import net.sf.uadetector.exception.CanNotOpenStreamException;
import net.sf.uadetector.internal.data.Data;
import net.sf.uadetector.internal.data.XmlDataHandler;
import org.slf4j.c;
import org.xml.sax.SAXException;

// Referenced classes of package net.sf.uadetector.a:
//            a

public final class b
    implements net.sf.uadetector.a.a {
    protected static final class a {

        public static void a(InputStream inputstream, net.sf.uadetector.internal.data.a a1) {
            SAXParser saxparser = SAXParserFactory.newInstance().newSAXParser();
            a1 = new XmlDataHandler(a1);
            saxparser.parse(inputstream, a1);
            a(((XmlDataHandler) (a1)));
        }

        protected static void a(XmlDataHandler xmldatahandler) {
            if (xmldatahandler.a())
                throw new IllegalStateException("The UAS data has not been parsed as expected.");
            else
                return;
        }
    }


    private static final Charset a = Charset.forName("UTF-8");
    private static final org.slf4j.b b = c.a(net/sf/uadetector/a/b);

    public b() {
    }

    protected static Data a(InputStream inputstream, Charset charset) {
        boolean flag;
        net.sf.qualitycheck.a.a(inputstream, "inputStream");
        net.sf.qualitycheck.a.a(charset, "charset");
        charset = new net.sf.uadetector.internal.data.a();
        flag = false;
        net.sf.uadetector.a.a.a(inputstream, charset);
        net.sf.uadetector.internal.util.a.a(inputstream, true);
_L1:
        Object obj;
        if (flag)
            inputstream = Data.a;
        else
            inputstream = charset.a();
        return inputstream;
        obj;
        b.c(((ParserConfigurationException) (obj)).getLocalizedMessage());
        net.sf.uadetector.internal.util.a.a(inputstream, true);
        flag = true;
          goto _L1
        obj;
        b.c(((SAXException) (obj)).getLocalizedMessage());
        net.sf.uadetector.internal.util.a.a(inputstream, true);
        flag = true;
          goto _L1
        obj;
        b.c(((IOException) (obj)).getLocalizedMessage());
        net.sf.uadetector.internal.util.a.a(inputstream, true);
        flag = true;
          goto _L1
        obj;
        b.c(((IllegalStateException) (obj)).getLocalizedMessage());
        net.sf.uadetector.internal.util.a.a(inputstream, true);
        flag = true;
          goto _L1
        obj;
        b.c(((Exception) (obj)).getLocalizedMessage(), ((Throwable) (obj)));
        net.sf.uadetector.internal.util.a.a(inputstream, true);
        flag = true;
          goto _L1
        charset;
        net.sf.uadetector.internal.util.a.a(inputstream, true);
        throw charset;
    }

    public Data a(URL url, Charset charset) {
        net.sf.qualitycheck.a.a(url, "url");
        net.sf.qualitycheck.a.a(charset, "charset");
        Data data = Data.a;
        try {
            url = a(net.sf.uadetector.internal.util.b.a(url), charset);
        }
        // Misplaced declaration of an exception variable
        catch (URL url) {
            b.c(url.getLocalizedMessage());
            url = data;
        }
        return url;
    }

}
