// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.sf.uadetector.internal.util;

import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import net.sf.qualitycheck.a;

// Referenced classes of package net.sf.uadetector.internal.util:
//            CompareNullSafe

public final class RegularExpressionConverter {
    public static final class Flag extends Enum {

        public static final Flag a;
        public static final Flag b;
        public static final Flag c;
        public static final Flag d;
        public static final Flag e;
        public static final Flag f;
        public static final Flag g;
        public static final Flag h;
        private static final FlagByCharacterComparator i = new FlagByCharacterComparator();
        private static final Flag l[];
        private final char j;
        private final int k;

        public static int a(Collection collection) {
            net.sf.qualitycheck.a.a(collection, "flags");
            collection = collection.iterator();
            int i1;
            for (i1 = 0; collection.hasNext(); i1 = ((Flag)collection.next()).b() | i1);
            return i1;
        }

        public static Set a(String s) {
            net.sf.qualitycheck.a.a(s, "modifiers");
            HashSet hashset = new HashSet();
            for (int i1 = 0; i1 < s.length(); i1++) {
                Flag flag = a(s.charAt(i1));
                if (flag != null)
                    hashset.add(flag);
            }

            return hashset;
        }

        public static Flag a(char c1) {
            int i1;
            int j1;
            Flag aflag[];
            net.sf.qualitycheck.a.a(c1, "flag");
            aflag = values();
            j1 = aflag.length;
            i1 = 0;
_L3:
            Flag flag;
            if (i1 >= j1)
                break MISSING_BLOCK_LABEL_44;
            flag = aflag[i1];
            if (flag.a() != c1) goto _L2; else goto _L1
_L1:
            return flag;
_L2:
            i1++;
              goto _L3
            flag = null;
              goto _L1
        }

        public static Flag valueOf(String s) {
            return (Flag)Enum.valueOf(net/sf/uadetector/internal/util/RegularExpressionConverter$Flag, s);
        }

        public static Flag[] values() {
            return (Flag[])l.clone();
        }

        public char a() {
            return j;
        }

        public int b() {
            return k;
        }

        static  {
            a = new Flag("CANON_EQ", 0, 128, 'c');
            b = new Flag("CASE_INSENSITIVE", 1, 2, 'i');
            c = new Flag("COMMENTS", 2, 4, 'x');
            d = new Flag("DOTALL", 3, 32, 's');
            e = new Flag("LITERAL", 4, 16, 'l');
            f = new Flag("MULTILINE", 5, 8, 'm');
            g = new Flag("UNICODE_CASE", 6, 64, 'u');
            h = new Flag("UNIX_LINES", 7, 1, 'e');
            l = (new Flag[] {
                a, b, c, d, e, f, g, h
            });
        }

        private Flag(String s, int i1, int j1, char c1) {
            super(s, i1);
            k = j1;
            j = c1;
        }
    }

    private static class Flag.FlagByCharacterComparator extends CompareNullSafe {

        public volatile int a(Object obj, Object obj1) {
            return a((Flag)obj, (Flag)obj1);
        }

        public int a(Flag flag, Flag flag1) {
            return Character.valueOf(flag.a()).compareTo(Character.valueOf(flag1.a()));
        }

        private Flag.FlagByCharacterComparator() {
        }

    }


    private static final Pattern a = Pattern.compile("^/.*/((i|m|s|x)*)?$");
    private static final Pattern b = Pattern.compile("^/.*/(([A-z])*)?$");

    public static Pattern a(String s) {
        return a(s, false);
    }

    public static Pattern a(String s, boolean flag) {
        net.sf.qualitycheck.a.a(s, "regex");
        String s1 = s.trim();
        if (flag)
            s = b.matcher(s1);
        else
            s = a.matcher(s1);
        if (!s.matches()) {
            throw new IllegalArgumentException((new StringBuilder()).append("The given regular expression '").append(s1).append("' seems to be not in PERL style or has unsupported modifiers.").toString());
        } else {
            s1 = s1.substring(1);
            return Pattern.compile(s1.substring(0, s1.lastIndexOf('/')), net.sf.uadetector.internal.util.Flag.a(net.sf.uadetector.internal.util.Flag.a(s.group(1))));
        }
    }

}
