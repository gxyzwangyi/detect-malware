// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.sf.uadetector.internal.data.domain;

import java.io.Serializable;
import java.util.regex.Pattern;
import net.sf.qualitycheck.a;
import net.sf.uadetector.internal.util.RegularExpressionConverter;

// Referenced classes of package net.sf.uadetector.internal.data.domain:
//            a

public final class DevicePattern
    implements Serializable, net.sf.uadetector.internal.data.domain.a {
    public static final class a {

        private int a;
        private Pattern b;
        private int c;

        public a a(int i) {
            net.sf.qualitycheck.a.a(i, "id");
            a = i;
            return this;
        }

        public a a(String s) {
            net.sf.qualitycheck.a.a(s, "id");
            a(Integer.parseInt(s.trim()));
            return this;
        }

        public a a(Pattern pattern) {
            net.sf.qualitycheck.a.a(pattern, "pattern");
            b = pattern;
            return this;
        }

        public DevicePattern a() {
            return new DevicePattern(a, b, c);
        }

        public a b(int i) {
            net.sf.qualitycheck.a.a(i, "position");
            c = i;
            return this;
        }

        public a b(String s) {
            net.sf.qualitycheck.a.a(s, "regex");
            a(RegularExpressionConverter.a(s));
            return this;
        }

        public a c(String s) {
            net.sf.qualitycheck.a.a(s, "position");
            b(Integer.parseInt(s.trim()));
            return this;
        }

        public a() {
            a = 0x80000000;
            c = 0x80000000;
        }
    }


    private final int a;
    private final Pattern b;
    private final int c;

    public DevicePattern(int i, Pattern pattern, int j) {
        net.sf.qualitycheck.a.a(i, "id");
        net.sf.qualitycheck.a.a(pattern, "pattern");
        net.sf.qualitycheck.a.a(j, "position");
        a = i;
        b = pattern;
        c = j;
    }

    private static int a(int i, int j) {
        int k = 0;
        if (i <= j) goto _L2; else goto _L1
_L1:
        k = 1;
_L4:
        return k;
_L2:
        if (i < j)
            k = -1;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public int a() {
        return a;
    }

    public int a(DevicePattern devicepattern) {
        int i;
        int j;
        if (devicepattern == null)
            i = -1;
        else
            i = 0;
        j = i;
        if (i == 0) {
            i = a(c(), devicepattern.c());
            j = i;
            if (i == 0)
                j = a(a(), devicepattern.a());
            i = j;
            if (j == 0)
                i = b().pattern().compareTo(devicepattern.b().pattern());
            j = i;
            if (i == 0)
                j = a(b().flags(), devicepattern.b().flags());
        }
        return j;
    }

    public Pattern b() {
        return b;
    }

    public int c() {
        return c;
    }

    public int compareTo(Object obj) {
        return a((DevicePattern)obj);
    }

    public boolean equals(Object obj) {
        boolean flag = true;
        if (this != obj) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        if (obj == null)
            flag = false;
        else
        if (getClass() != obj.getClass()) {
            flag = false;
        } else {
            obj = (DevicePattern)obj;
            if (a != ((DevicePattern) (obj)).a)
                flag = false;
            else
            if (c != ((DevicePattern) (obj)).c)
                flag = false;
            else
            if (!b.pattern().equals(((DevicePattern) (obj)).b.pattern()))
                flag = false;
            else
            if (b.flags() != ((DevicePattern) (obj)).b.flags())
                flag = false;
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    public int hashCode() {
        return (((a + 31) * 31 + c) * 31 + b.pattern().hashCode()) * 31 + b.flags();
    }

    public String toString() {
        StringBuilder stringbuilder = new StringBuilder();
        stringbuilder.append("DevicePattern [id=");
        stringbuilder.append(a);
        stringbuilder.append(", pattern=");
        stringbuilder.append(b);
        stringbuilder.append(", position=");
        stringbuilder.append(c);
        stringbuilder.append("]");
        return stringbuilder.toString();
    }
}
