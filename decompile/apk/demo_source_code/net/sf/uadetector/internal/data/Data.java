// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.sf.uadetector.internal.data;

import java.io.Serializable;
import java.util.*;
import net.sf.qualitycheck.a;

public class Data
    implements Serializable {

    public static final Data a = new Data(new HashSet(0), new HashMap(0), new HashMap(0), new TreeMap(), new HashSet(0), new HashSet(0), new HashMap(0), new TreeMap(), new ArrayList(0), new HashSet(0), new HashMap(0), new TreeMap(), "");
    private final Map b;
    private final Set c;
    private final Map d;
    private final Set e;
    private final SortedMap f;
    private final Set g;
    private final Map h;
    private final Map i;
    private final Set j;
    private final SortedMap k;
    private final SortedMap l;
    private final List m;
    private final String n;

    public Data(Set set, Map map, Map map1, SortedMap sortedmap, Set set1, Set set2, Map map2, 
            SortedMap sortedmap1, List list, Set set3, Map map3, SortedMap sortedmap2, String s) {
        net.sf.qualitycheck.a.a(set, "browsers");
        net.sf.qualitycheck.a.a(map, "browserPatterns");
        net.sf.qualitycheck.a.a(map1, "browserTypes");
        net.sf.qualitycheck.a.a(sortedmap, "patternToBrowserMap");
        net.sf.qualitycheck.a.a(set1, "browserToOperatingSystemMap");
        net.sf.qualitycheck.a.a(set2, "operatingSystems");
        net.sf.qualitycheck.a.a(map2, "operatingSystemPatterns");
        net.sf.qualitycheck.a.a(sortedmap1, "patternToOperatingSystemMap");
        net.sf.qualitycheck.a.a(list, "robots");
        net.sf.qualitycheck.a.a(set3, "devices");
        net.sf.qualitycheck.a.a(map3, "devicePatterns");
        net.sf.qualitycheck.a.a(sortedmap2, "patternToDeviceMap");
        net.sf.qualitycheck.a.a(s, "version");
        c = Collections.unmodifiableSet(new HashSet(set));
        b = Collections.unmodifiableMap(new HashMap(map));
        h = Collections.unmodifiableMap(new HashMap((Map)net.sf.qualitycheck.a.a(map1, "browserTypes")));
        k = Collections.unmodifiableSortedMap(new TreeMap(sortedmap));
        g = Collections.unmodifiableSet(new HashSet(set1));
        j = Collections.unmodifiableSet(new HashSet(set2));
        i = Collections.unmodifiableMap(new HashMap(map2));
        l = Collections.unmodifiableSortedMap(new TreeMap(sortedmap1));
        m = Collections.unmodifiableList(new ArrayList(list));
        e = Collections.unmodifiableSet(new HashSet(set3));
        d = Collections.unmodifiableMap(new HashMap(map3));
        f = Collections.unmodifiableSortedMap(new TreeMap(sortedmap2));
        n = (String)net.sf.qualitycheck.a.a(s, "version");
    }

    public boolean equals(Object obj) {
        boolean flag = true;
        if (this != obj) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        if (obj == null)
            flag = false;
        else
        if (getClass() != obj.getClass()) {
            flag = false;
        } else {
            obj = (Data)obj;
            if (!c.equals(((Data) (obj)).c))
                flag = false;
            else
            if (!b.equals(((Data) (obj)).b))
                flag = false;
            else
            if (!h.equals(((Data) (obj)).h))
                flag = false;
            else
            if (!k.equals(((Data) (obj)).k))
                flag = false;
            else
            if (!g.equals(((Data) (obj)).g))
                flag = false;
            else
            if (!j.equals(((Data) (obj)).j))
                flag = false;
            else
            if (!i.equals(((Data) (obj)).i))
                flag = false;
            else
            if (!l.equals(((Data) (obj)).l))
                flag = false;
            else
            if (!m.equals(((Data) (obj)).m))
                flag = false;
            else
            if (!e.equals(((Data) (obj)).e))
                flag = false;
            else
            if (!d.equals(((Data) (obj)).d))
                flag = false;
            else
            if (!f.equals(((Data) (obj)).f))
                flag = false;
            else
            if (!n.equals(((Data) (obj)).n))
                flag = false;
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    public int hashCode() {
        return ((((((((((((c.hashCode() + 31) * 31 + b.hashCode()) * 31 + h.hashCode()) * 31 + k.hashCode()) * 31 + g.hashCode()) * 31 + j.hashCode()) * 31 + i.hashCode()) * 31 + l.hashCode()) * 31 + m.hashCode()) * 31 + e.hashCode()) * 31 + d.hashCode()) * 31 + f.hashCode()) * 31 + n.hashCode();
    }

    public String toString() {
        StringBuilder stringbuilder = new StringBuilder();
        stringbuilder.append("Data [browsers=");
        stringbuilder.append(c);
        stringbuilder.append(", browserPatterns=");
        stringbuilder.append(b);
        stringbuilder.append(", browserTypes=");
        stringbuilder.append(h);
        stringbuilder.append(", patternToBrowserMap=");
        stringbuilder.append(k);
        stringbuilder.append(", browserToOperatingSystemMap=");
        stringbuilder.append(g);
        stringbuilder.append(", operatingSystems=");
        stringbuilder.append(j);
        stringbuilder.append(", operatingSystemPatterns=");
        stringbuilder.append(i);
        stringbuilder.append(", patternToOperatingSystemMap=");
        stringbuilder.append(l);
        stringbuilder.append(", robots=");
        stringbuilder.append(m);
        stringbuilder.append(", devices=");
        stringbuilder.append(e);
        stringbuilder.append(", devicePatterns=");
        stringbuilder.append(d);
        stringbuilder.append(", patternToDeviceMap=");
        stringbuilder.append(f);
        stringbuilder.append(", version=");
        stringbuilder.append(n);
        stringbuilder.append("]");
        return stringbuilder.toString();
    }

}
