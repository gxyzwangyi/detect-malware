// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.sf.uadetector.internal.data;

import java.io.InputStreamReader;
import net.sf.qualitycheck.a;
import org.slf4j.b;
import org.slf4j.c;
import org.xml.sax.*;
import org.xml.sax.helpers.DefaultHandler;

// Referenced classes of package net.sf.uadetector.internal.data:
//            a

public final class XmlDataHandler extends DefaultHandler {
    public static final class Tag extends Enum {

        public static final Tag A;
        public static final Tag B;
        public static final Tag C;
        public static final Tag D;
        private static final Tag F[];
        public static final Tag a;
        public static final Tag b;
        public static final Tag c;
        public static final Tag d;
        public static final Tag e;
        public static final Tag f;
        public static final Tag g;
        public static final Tag h;
        public static final Tag i;
        public static final Tag j;
        public static final Tag k;
        public static final Tag l;
        public static final Tag m;
        public static final Tag n;
        public static final Tag o;
        public static final Tag p;
        public static final Tag q;
        public static final Tag r;
        public static final Tag s;
        public static final Tag t;
        public static final Tag u;
        public static final Tag v;
        public static final Tag w;
        public static final Tag x;
        public static final Tag y;
        public static final Tag z;
        private String E;

        public static Tag a(String s1) {
            int i1;
            int j1;
            Tag atag[];
            net.sf.qualitycheck.a.a(s1, "tagName");
            atag = values();
            j1 = atag.length;
            i1 = 0;
_L3:
            Tag tag;
            if (i1 >= j1)
                break MISSING_BLOCK_LABEL_49;
            tag = atag[i1];
            if (!tag.a().equalsIgnoreCase(s1)) goto _L2; else goto _L1
_L1:
            s1 = tag;
_L4:
            return s1;
_L2:
            i1++;
              goto _L3
            s1 = null;
              goto _L4
        }

        public static boolean b(String s1) {
            return d.a().equalsIgnoreCase(s1);
        }

        public static boolean c(String s1) {
            return e.a().equalsIgnoreCase(s1);
        }

        public static boolean d(String s1) {
            return a.a().equalsIgnoreCase(s1);
        }

        public static boolean e(String s1) {
            return f.a().equalsIgnoreCase(s1);
        }

        public static boolean f(String s1) {
            return m.a().equalsIgnoreCase(s1);
        }

        public static boolean g(String s1) {
            return j.a().equalsIgnoreCase(s1);
        }

        public static boolean h(String s1) {
            return w.a().equalsIgnoreCase(s1);
        }

        public static boolean i(String s1) {
            return t.a().equalsIgnoreCase(s1);
        }

        public static boolean j(String s1) {
            return z.a().equalsIgnoreCase(s1);
        }

        public static Tag valueOf(String s1) {
            return (Tag)Enum.valueOf(net/sf/uadetector/internal/data/XmlDataHandler$Tag, s1);
        }

        public static Tag[] values() {
            return (Tag[])F.clone();
        }

        public String a() {
            return E;
        }

        static  {
            a = new Tag("BROWSER", 0, "browser");
            b = new Tag("BROWSER_ID", 1, "browser_id");
            c = new Tag("BROWSER_INFO_URL", 2, "browser_info_url");
            d = new Tag("BROWSER_OS_MAPPING", 3, "browser_os");
            e = new Tag("BROWSER_PATTERN", 4, "browser_reg");
            f = new Tag("BROWSER_TYPE", 5, "browser_type");
            g = new Tag("BROWSER_TYPE_ID", 6, "type");
            h = new Tag("COMPANY", 7, "company");
            i = new Tag("COMPANY_URL", 8, "url_company");
            j = new Tag("DEVICE", 9, "device");
            k = new Tag("DEVICE_ID", 10, "device_id");
            l = new Tag("DEVICE_INFO_URL", 11, "device_info_url");
            m = new Tag("DEVICE_PATTERN", 12, "device_reg");
            n = new Tag("DEVICES", 13, "devices");
            o = new Tag("DEVICES_PATTERN", 14, "devices_reg");
            p = new Tag("FAMILY", 15, "family");
            q = new Tag("ICON", 16, "icon");
            r = new Tag("ID", 17, "id");
            s = new Tag("NAME", 18, "name");
            t = new Tag("OPERATING_SYSTEM", 19, "os");
            u = new Tag("OPERATING_SYSTEM_ID", 20, "os_id");
            v = new Tag("OPERATING_SYSTEM_INFO_URL", 21, "os_info_url");
            w = new Tag("OPERATING_SYSTEM_PATTERN", 22, "operating_system_reg");
            x = new Tag("PATTERN_ORDER", 23, "order");
            y = new Tag("PATTERN_REGEX", 24, "regstring");
            z = new Tag("ROBOT", 25, "robot");
            A = new Tag("ROBOT_INFO_URL", 26, "bot_info_url");
            B = new Tag("URL", 27, "url");
            C = new Tag("USERAGENT", 28, "useragent");
            D = new Tag("VERSION", 29, "version");
            F = (new Tag[] {
                a, b, c, d, e, f, g, h, i, j, 
                k, l, m, n, o, p, q, r, s, t, 
                u, v, w, x, y, z, A, B, C, D
            });
        }

        private Tag(String s1, int i1, String s2) {
            super(s1, i1);
            E = s2;
        }
    }


    private static final b a = org.slf4j.c.a(net/sf/uadetector/internal/data/XmlDataHandler);
    private net.sf.uadetector.internal.data.domain.Browser.a b;
    private net.sf.uadetector.internal.data.domain.Device.a c;
    private net.sf.uadetector.internal.data.domain.BrowserOperatingSystemMapping.a d;
    private net.sf.uadetector.internal.data.domain.BrowserPattern.a e;
    private net.sf.uadetector.internal.data.domain.DevicePattern.a f;
    private net.sf.uadetector.internal.data.domain.BrowserType.a g;
    private StringBuilder h;
    private Tag i;
    private final net.sf.uadetector.internal.data.a j;
    private boolean k;
    private boolean l;
    private boolean m;
    private boolean n;
    private boolean o;
    private boolean p;
    private boolean q;
    private boolean r;
    private boolean s;
    private boolean t;
    private net.sf.uadetector.internal.data.domain.OperatingSystem.a u;
    private net.sf.uadetector.internal.data.domain.OperatingSystemPattern.a v;
    private net.sf.uadetector.internal.data.domain.Robot.a w;
    private boolean x;

    public XmlDataHandler(net.sf.uadetector.internal.data.a a1) {
        b = new net.sf.uadetector.internal.data.domain.Browser.a();
        c = new net.sf.uadetector.internal.data.domain.Device.a();
        d = new net.sf.uadetector.internal.data.domain.BrowserOperatingSystemMapping.a();
        e = new net.sf.uadetector.internal.data.domain.BrowserPattern.a();
        f = new net.sf.uadetector.internal.data.domain.DevicePattern.a();
        g = new net.sf.uadetector.internal.data.domain.BrowserType.a();
        h = new StringBuilder();
        i = null;
        k = false;
        l = false;
        m = false;
        n = false;
        o = false;
        p = false;
        q = false;
        r = false;
        s = false;
        t = false;
        u = new net.sf.uadetector.internal.data.domain.OperatingSystem.a();
        v = new net.sf.uadetector.internal.data.domain.OperatingSystemPattern.a();
        w = new net.sf.uadetector.internal.data.domain.Robot.a();
        x = false;
        net.sf.qualitycheck.a.a(a1, "builder");
        j = a1;
    }

    protected static void a(String s1, SAXParseException saxparseexception) {
        StringBuilder stringbuilder = new StringBuilder();
        stringbuilder.append(s1);
        stringbuilder.append(" while reading UAS data: ");
        stringbuilder.append(saxparseexception.getMessage());
        stringbuilder.append(" (line: ");
        stringbuilder.append(saxparseexception.getLineNumber());
        if (saxparseexception.getSystemId() != null) {
            stringbuilder.append(" uri: ");
            stringbuilder.append(saxparseexception.getSystemId());
        }
        stringbuilder.append(")");
        a.c(stringbuilder.toString());
    }

    private void b() {
        if (!l) goto _L2; else goto _L1
_L1:
        if (i != Tag.r) goto _L4; else goto _L3
_L3:
        b.c(h.toString());
_L2:
        return;
_L4:
        if (i == Tag.g)
            b.g(h.toString());
        else
        if (i == Tag.s)
            b.a(h.toString());
        else
        if (i == Tag.B)
            b.h(h.toString());
        else
        if (i == Tag.h)
            b.e(h.toString());
        else
        if (i == Tag.i)
            b.f(h.toString());
        else
        if (i == Tag.q)
            b.b(h.toString());
        else
        if (i == net.sf.uadetector.internal.data.Tag.c)
            b.d(h.toString());
        if (true) goto _L2; else goto _L5
_L5:
    }

    private void c() {
        if (!m || i != net.sf.uadetector.internal.data.Tag.b) goto _L2; else goto _L1
_L1:
        d.a(h.toString());
_L4:
        return;
_L2:
        if (m && i == Tag.u)
            d.b(h.toString());
        if (true) goto _L4; else goto _L3
_L3:
    }

    private void d() {
        if (!n || i != Tag.x) goto _L2; else goto _L1
_L1:
        e.c(h.toString());
_L4:
        return;
_L2:
        if (n && i == net.sf.uadetector.internal.data.Tag.b)
            e.a(h.toString());
        else
        if (n && i == Tag.y)
            e.b(h.toString());
        if (true) goto _L4; else goto _L3
_L3:
    }

    private void e() {
        if (!o || i != Tag.r) goto _L2; else goto _L1
_L1:
        g.a(h.toString());
_L4:
        return;
_L2:
        if (o && i == Tag.g)
            g.b(h.toString());
        if (true) goto _L4; else goto _L3
_L3:
    }

    private void f() {
        if (!p) goto _L2; else goto _L1
_L1:
        if (i != Tag.r) goto _L4; else goto _L3
_L3:
        c.b(h.toString());
_L2:
        return;
_L4:
        if (i == Tag.s)
            c.d(h.toString());
        else
        if (i == Tag.q)
            c.a(h.toString());
        else
        if (i == Tag.l)
            c.c(h.toString());
        if (true) goto _L2; else goto _L5
_L5:
    }

    private void g() {
        if (!q || i != Tag.x) goto _L2; else goto _L1
_L1:
        f.c(h.toString());
_L4:
        return;
_L2:
        if (q && i == Tag.k)
            f.a(h.toString());
        else
        if (q && i == Tag.y)
            f.b(h.toString());
        if (true) goto _L4; else goto _L3
_L3:
    }

    private void h() {
        if (!r) goto _L2; else goto _L1
_L1:
        if (i != Tag.r) goto _L4; else goto _L3
_L3:
        u.c(h.toString());
_L2:
        return;
_L4:
        if (i == Tag.p)
            u.a(h.toString());
        else
        if (i == Tag.s)
            u.e(h.toString());
        else
        if (i == Tag.B)
            u.h(h.toString());
        else
        if (i == Tag.h)
            u.f(h.toString());
        else
        if (i == Tag.i)
            u.g(h.toString());
        else
        if (i == Tag.q)
            u.b(h.toString());
        else
        if (i == Tag.v)
            u.d(h.toString());
        if (true) goto _L2; else goto _L5
_L5:
    }

    private void i() {
        if (!s) goto _L2; else goto _L1
_L1:
        if (i != Tag.x) goto _L4; else goto _L3
_L3:
        v.c(h.toString());
_L2:
        return;
_L4:
        if (i == Tag.u)
            v.a(h.toString());
        else
        if (i == Tag.y)
            v.b(h.toString());
        if (true) goto _L2; else goto _L5
_L5:
    }

    private void j() {
        if (!t) goto _L2; else goto _L1
_L1:
        if (i != Tag.r) goto _L4; else goto _L3
_L3:
        w.c(h.toString());
_L2:
        return;
_L4:
        if (i == Tag.C)
            w.h(h.toString());
        else
        if (i == Tag.p)
            w.a(h.toString());
        else
        if (i == Tag.s)
            w.e(h.toString());
        else
        if (i == Tag.h)
            w.f(h.toString());
        else
        if (i == Tag.i)
            w.g(h.toString());
        else
        if (i == Tag.q)
            w.b(h.toString());
        else
        if (i == Tag.A)
            w.d(h.toString());
        if (true) goto _L2; else goto _L5
_L5:
    }

    private void k() {
        j.a(b);
        b = new net.sf.uadetector.internal.data.domain.Browser.a();
    }

    private void l() {
        j.a(d.a());
        d = new net.sf.uadetector.internal.data.domain.BrowserOperatingSystemMapping.a();
    }

    private void m() {
        try {
            j.a(e.a());
        }
        catch (IllegalArgumentException illegalargumentexception) {
            a.c((new StringBuilder()).append("Can not append browser pattern: ").append(illegalargumentexception.getLocalizedMessage()).toString());
        }
        e = new net.sf.uadetector.internal.data.domain.BrowserPattern.a();
    }

    private void n() {
        j.a(g.a());
        g = new net.sf.uadetector.internal.data.domain.BrowserType.a();
    }

    private void o() {
        j.a(c);
        c = new net.sf.uadetector.internal.data.domain.Device.a();
    }

    private void p() {
        try {
            j.a(f.a());
        }
        catch (IllegalArgumentException illegalargumentexception) {
            a.c((new StringBuilder()).append("Can not append device pattern: ").append(illegalargumentexception.getLocalizedMessage()).toString());
        }
        f = new net.sf.uadetector.internal.data.domain.DevicePattern.a();
    }

    private void q() {
        j.a(u);
        u = new net.sf.uadetector.internal.data.domain.OperatingSystem.a();
    }

    private void r() {
        try {
            j.a(v.a());
        }
        catch (IllegalArgumentException illegalargumentexception) {
            a.c((new StringBuilder()).append("Can not append OS pattern: ").append(illegalargumentexception.getLocalizedMessage()).toString());
        }
        v = new net.sf.uadetector.internal.data.domain.OperatingSystemPattern.a();
    }

    private void s() {
        j.a(w.a());
        w = new net.sf.uadetector.internal.data.domain.Robot.a();
    }

    private void t() {
        if (i == Tag.D)
            j.a(h.toString());
        j();
        b();
        h();
        d();
        e();
        c();
        i();
        f();
        g();
        h = new StringBuilder();
    }

    public boolean a() {
        return k;
    }

    public void characters(char ac[], int i1, int j1) {
        h.append(new String(ac, i1, j1));
    }

    public void endElement(String s1, String s2, String s3) {
        t();
        if (!Tag.j(s3)) goto _L2; else goto _L1
_L1:
        s();
        t = false;
_L4:
        i = null;
        return;
_L2:
        if (Tag.d(s3)) {
            k();
            l = false;
        } else
        if (Tag.i(s3)) {
            q();
            r = false;
        } else
        if (Tag.e(s3)) {
            n();
            o = false;
        } else
        if (net.sf.uadetector.internal.data.Tag.c(s3)) {
            m();
            n = false;
        } else
        if (net.sf.uadetector.internal.data.Tag.b(s3)) {
            l();
            m = false;
        } else
        if (Tag.h(s3)) {
            r();
            s = false;
        } else
        if (Tag.g(s3)) {
            o();
            p = false;
        } else
        if (Tag.f(s3)) {
            p();
            q = false;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void error(SAXParseException saxparseexception) {
        k = true;
        a("Error", saxparseexception);
        super.fatalError(saxparseexception);
    }

    public void fatalError(SAXParseException saxparseexception) {
        a("Fatal error", saxparseexception);
        super.fatalError(saxparseexception);
    }

    public InputSource resolveEntity(String s1, String s2) {
        if ("http://data.udger.com/uasxmldata_old.dtd".equals(s2))
            return new InputSource(new InputStreamReader(getClass().getClassLoader().getResourceAsStream("uadetector/uasxmldata.dtd"), "UTF-8"));
        else
            throw new SAXException((new StringBuilder()).append("unable to resolve remote entity, systemId = ").append(s2).toString());
    }

    public void startElement(String s1, String s2, String s3, Attributes attributes) {
        if (!Tag.j(s3)) goto _L2; else goto _L1
_L1:
        t = true;
_L4:
        i = net.sf.uadetector.internal.data.Tag.a(s3);
        return;
_L2:
        if (Tag.d(s3))
            l = true;
        else
        if (Tag.i(s3))
            r = true;
        else
        if (Tag.e(s3))
            o = true;
        else
        if (net.sf.uadetector.internal.data.Tag.c(s3))
            n = true;
        else
        if (net.sf.uadetector.internal.data.Tag.b(s3))
            m = true;
        else
        if (Tag.h(s3))
            s = true;
        else
        if (Tag.g(s3))
            p = true;
        else
        if (Tag.f(s3))
            q = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void warning(SAXParseException saxparseexception) {
        x = true;
        a("Warning", saxparseexception);
        super.warning(saxparseexception);
    }

}
