// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.sf.uadetector.internal.data;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.SortedMap;
import java.util.SortedSet;
import java.util.TreeMap;
import java.util.TreeSet;
import net.sf.qualitycheck.exception.IllegalStateOfArgumentException;
import net.sf.uadetector.internal.data.domain.Browser;
import net.sf.uadetector.internal.data.domain.BrowserOperatingSystemMapping;
import net.sf.uadetector.internal.data.domain.BrowserPattern;
import net.sf.uadetector.internal.data.domain.BrowserType;
import net.sf.uadetector.internal.data.domain.Device;
import net.sf.uadetector.internal.data.domain.DevicePattern;
import net.sf.uadetector.internal.data.domain.OperatingSystem;
import net.sf.uadetector.internal.data.domain.OperatingSystemPattern;
import net.sf.uadetector.internal.data.domain.Robot;
import org.slf4j.b;
import org.slf4j.c;

// Referenced classes of package net.sf.uadetector.internal.data:
//            OrderedPatternComparator, Data

public class a {

    private static final b a = org.slf4j.c.a(net/sf/uadetector/internal/data/a);
    private static final OrderedPatternComparator o = new OrderedPatternComparator();
    private static final OrderedPatternComparator p = new OrderedPatternComparator();
    private static final OrderedPatternComparator q = new OrderedPatternComparator();
    private final Map b = new HashMap();
    private final Map c = new HashMap();
    private final Map d = new HashMap();
    private final Map e = new HashMap();
    private final Set f = new HashSet();
    private final Set g = new HashSet();
    private final Map h = new HashMap();
    private final Map i = new HashMap();
    private final Map j = new HashMap();
    private final Set k = new HashSet();
    private final List l = new ArrayList();
    private String m;
    private final Set n = new HashSet();

    public a() {
    }

    private static Set a(Map map) {
        HashSet hashset = new HashSet();
        for (map = map.entrySet().iterator(); map.hasNext();) {
            java.util.Map.Entry entry = (java.util.Map.Entry)map.next();
            try {
                hashset.add(((net.sf.uadetector.internal.data.domain.Browser.a)entry.getValue()).a());
            }
            catch (Exception exception) {
                a.c((new StringBuilder()).append("Can not build browser: ").append(exception.getLocalizedMessage()).toString());
            }
        }

        return hashset;
    }

    private static SortedMap a(Set set) {
        TreeMap treemap = new TreeMap(o);
        for (Iterator iterator = set.iterator(); iterator.hasNext();) {
            Browser browser = (Browser)iterator.next();
            set = browser.a().iterator();
            while (set.hasNext()) 
                treemap.put((BrowserPattern)set.next(), browser);
        }

        return treemap;
    }

    private static void a(Map map, Map map1) {
        for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext();) {
            map = (java.util.Map.Entry)iterator.next();
            if (map1.containsKey(map.getKey()))
                ((net.sf.uadetector.internal.data.domain.Browser.a)map.getValue()).a((SortedSet)map1.get(map.getKey()));
            else
                a.c((new StringBuilder()).append("No pattern available for '").append(((net.sf.uadetector.internal.data.domain.Browser.a)map.getValue()).e()).append(" ").append(((net.sf.uadetector.internal.data.domain.Browser.a)map.getValue()).c()).append("'.").toString());
        }

    }

    private static void a(Map map, Map map1, Map map2) {
        for (Iterator iterator = map2.entrySet().iterator(); iterator.hasNext();) {
            map2 = (java.util.Map.Entry)iterator.next();
            if (map.containsKey(map2.getKey())) {
                net.sf.uadetector.internal.data.domain.Browser.a a1 = (net.sf.uadetector.internal.data.domain.Browser.a)map.get(map2.getKey());
                if (map1.containsKey(map2.getValue()))
                    a1.a((OperatingSystem)map1.get(map2.getValue()));
                else
                    a.c((new StringBuilder()).append("Can not find an operating system with ID '").append(map2.getValue()).append("' for browser '").append(a1.e()).append(" ").append(a1.c()).append("'.").toString());
            } else {
                a.c((new StringBuilder()).append("Can not find a browser with ID '").append(map2.getKey()).append("'.").toString());
            }
        }

    }

    private static Set b(Map map) {
        HashSet hashset = new HashSet();
        for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext();) {
            map = (java.util.Map.Entry)iterator.next();
            try {
                hashset.add(((net.sf.uadetector.internal.data.domain.Device.a)map.getValue()).a());
            }
            catch (Exception exception) {
                a.c((new StringBuilder()).append("Can not build device '").append(((net.sf.uadetector.internal.data.domain.Device.a)map.getValue()).d()).append("': ").append(exception.getLocalizedMessage()).toString());
            }
        }

        return hashset;
    }

    private static SortedMap b(Set set) {
        TreeMap treemap = new TreeMap(p);
        for (Iterator iterator = set.iterator(); iterator.hasNext();) {
            Device device = (Device)iterator.next();
            set = device.a().iterator();
            while (set.hasNext()) 
                treemap.put((DevicePattern)set.next(), device);
        }

        return treemap;
    }

    private static void b(Map map, Map map1) {
        for (map = map.entrySet().iterator(); map.hasNext();) {
            java.util.Map.Entry entry = (java.util.Map.Entry)map.next();
            if (map1.containsKey(entry.getKey()))
                ((net.sf.uadetector.internal.data.domain.Device.a)entry.getValue()).a((SortedSet)map1.get(entry.getKey()));
            else
                a.a((new StringBuilder()).append("No pattern available for '").append(((net.sf.uadetector.internal.data.domain.Device.a)entry.getValue()).d()).append("'.").toString());
        }

    }

    private static Map c(Map map) {
        HashMap hashmap = new HashMap();
        for (map = map.entrySet().iterator(); map.hasNext();) {
            java.util.Map.Entry entry = (java.util.Map.Entry)map.next();
            try {
                hashmap.put(entry.getKey(), ((net.sf.uadetector.internal.data.domain.OperatingSystem.a)entry.getValue()).a());
            }
            catch (Exception exception) {
                a.c((new StringBuilder()).append("Can not build operating system: ").append(exception.getLocalizedMessage()).toString());
            }
        }

        return hashmap;
    }

    private static SortedMap c(Set set) {
        TreeMap treemap = new TreeMap(q);
        for (Iterator iterator = set.iterator(); iterator.hasNext();) {
            set = (OperatingSystem)iterator.next();
            Iterator iterator1 = set.a().iterator();
            while (iterator1.hasNext()) 
                treemap.put((OperatingSystemPattern)iterator1.next(), set);
        }

        return treemap;
    }

    private static void c(Map map, Map map1) {
        for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext();) {
            java.util.Map.Entry entry = (java.util.Map.Entry)iterator.next();
            map = (SortedSet)map1.get(entry.getKey());
            if (map != null)
                ((net.sf.uadetector.internal.data.domain.OperatingSystem.a)entry.getValue()).a(map);
            else
                a.a((new StringBuilder()).append("No patterns for operating system entry (with id '").append(entry.getKey()).append("') available.").toString());
        }

    }

    private static Map d(Set set) {
        HashMap hashmap = new HashMap();
        BrowserOperatingSystemMapping browseroperatingsystemmapping;
        for (set = set.iterator(); set.hasNext(); hashmap.put(Integer.valueOf(browseroperatingsystemmapping.a()), Integer.valueOf(browseroperatingsystemmapping.b())))
            browseroperatingsystemmapping = (BrowserOperatingSystemMapping)set.next();

        return hashmap;
    }

    private static Set d(Map map) {
        HashSet hashset = new HashSet();
        for (map = map.entrySet().iterator(); map.hasNext(); hashset.add(((java.util.Map.Entry)map.next()).getValue()));
        return hashset;
    }

    private static void d(Map map, Map map1) {
        for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext();) {
            map = (java.util.Map.Entry)iterator.next();
            int i1 = ((net.sf.uadetector.internal.data.domain.Browser.a)map.getValue()).g();
            if (map1.containsKey(Integer.valueOf(i1)))
                ((net.sf.uadetector.internal.data.domain.Browser.a)map.getValue()).a((BrowserType)map1.get(Integer.valueOf(i1)));
            else
                a.c((new StringBuilder()).append("No type available for '").append(((net.sf.uadetector.internal.data.domain.Browser.a)map.getValue()).e()).append(" ").append(((net.sf.uadetector.internal.data.domain.Browser.a)map.getValue()).c()).append("'.").toString());
        }

    }

    public Data a() {
        d(e, b);
        a(e, c);
        c(j, d);
        b(h, i);
        Object obj = c(j);
        a(e, ((Map) (obj)), d(n));
        Set set = d(((Map) (obj)));
        set.addAll(k);
        obj = a(e);
        ((Set) (obj)).addAll(f);
        Set set1 = b(h);
        set1.addAll(g);
        SortedMap sortedmap = a(((Set) (obj)));
        SortedMap sortedmap1 = c(set);
        SortedMap sortedmap2 = b(set1);
        return new Data(((Set) (obj)), c, b, sortedmap, n, set, d, sortedmap1, l, set1, i, sortedmap2, m);
    }

    public a a(String s) {
        net.sf.qualitycheck.a.a(s, "version");
        m = s;
        return this;
    }

    public a a(net.sf.uadetector.internal.data.domain.Browser.a a1) {
        net.sf.qualitycheck.a.a(a1, "browserBuilder");
        net.sf.qualitycheck.a.a(a1.d(), "browserBuilder.getId()");
        if (a1.f() == null && a1.g() < 0)
            throw new IllegalStateOfArgumentException("A Type or Type-ID of argument 'browserBuilder' must be set.");
        if (e.containsKey(Integer.valueOf(a1.d()))) {
            throw new IllegalStateOfArgumentException((new StringBuilder()).append("The browser builder '").append(a1.e()).append(" ").append(a1.c()).append("' is already in the map.").toString());
        } else {
            a1 = a1.b();
            e.put(Integer.valueOf(a1.d()), a1);
            return this;
        }
    }

    public a a(BrowserOperatingSystemMapping browseroperatingsystemmapping) {
        net.sf.qualitycheck.a.a(browseroperatingsystemmapping, "browserOsMapping");
        n.add(browseroperatingsystemmapping);
        return this;
    }

    public a a(BrowserPattern browserpattern) {
        net.sf.qualitycheck.a.a(browserpattern, "pattern");
        if (!c.containsKey(Integer.valueOf(browserpattern.a())))
            c.put(Integer.valueOf(browserpattern.a()), new TreeSet(o));
        ((SortedSet)c.get(Integer.valueOf(browserpattern.a()))).add(browserpattern);
        return this;
    }

    public a a(BrowserType browsertype) {
        net.sf.qualitycheck.a.a(browsertype, "type");
        b.put(Integer.valueOf(browsertype.a()), browsertype);
        return this;
    }

    public a a(net.sf.uadetector.internal.data.domain.Device.a a1) {
        net.sf.qualitycheck.a.a(a1, "deviceBuilder");
        net.sf.qualitycheck.a.a(a1.c(), "deviceBuilder.getId()");
        if (h.containsKey(Integer.valueOf(a1.c()))) {
            throw new IllegalStateOfArgumentException((new StringBuilder()).append("The device builder '").append(a1.d()).append("' is already in the map.").toString());
        } else {
            a1 = a1.b();
            h.put(Integer.valueOf(a1.c()), a1);
            return this;
        }
    }

    public a a(DevicePattern devicepattern) {
        net.sf.qualitycheck.a.a(devicepattern, "pattern");
        if (!i.containsKey(Integer.valueOf(devicepattern.a())))
            i.put(Integer.valueOf(devicepattern.a()), new TreeSet(p));
        ((SortedSet)i.get(Integer.valueOf(devicepattern.a()))).add(devicepattern);
        return this;
    }

    public a a(net.sf.uadetector.internal.data.domain.OperatingSystem.a a1) {
        net.sf.qualitycheck.a.a(a1, "operatingSystemBuilder");
        net.sf.qualitycheck.a.a(a1.c(), "operatingSystemBuilder.getId()");
        boolean flag;
        if (!j.containsKey(Integer.valueOf(a1.c())))
            flag = true;
        else
            flag = false;
        net.sf.qualitycheck.a.a(flag, "Operating system builder with ID '%s' already exists.", new Object[] {
            Integer.valueOf(a1.c())
        });
        a1 = a1.b();
        j.put(Integer.valueOf(a1.c()), a1);
        return this;
    }

    public a a(OperatingSystemPattern operatingsystempattern) {
        net.sf.qualitycheck.a.a(operatingsystempattern, "pattern");
        if (!d.containsKey(Integer.valueOf(operatingsystempattern.a())))
            d.put(Integer.valueOf(operatingsystempattern.a()), new TreeSet(q));
        ((SortedSet)d.get(Integer.valueOf(operatingsystempattern.a()))).add(operatingsystempattern);
        return this;
    }

    public a a(Robot robot) {
        net.sf.qualitycheck.a.a(robot, "robot");
        l.add(robot);
        return this;
    }

}
