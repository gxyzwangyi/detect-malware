// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.gotev.uploadservice;

import android.content.Intent;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.List;
import net.gotev.uploadservice.a.a;

// Referenced classes of package net.gotev.uploadservice:
//            d, UploadFile, HttpUploadTaskParameters, NameValue, 
//            UploadTaskParameters, UploadService

public class f extends d {

    private static final Charset h = Charset.forName("US-ASCII");
    private static final Charset i = Charset.forName("UTF-8");
    private String j;
    private byte k[];
    private byte l[];
    private boolean m;

    public f() {
    }

    private byte[] a(UploadFile uploadfile, boolean flag) {
        String s = (new StringBuilder()).append("Content-Disposition: form-data; name=\"").append(uploadfile.a("httpParamName")).append("\"; filename=\"").append(uploadfile.a("httpRemoteFileName")).append("\"").append("\r\n").append("Content-Type: ").append(uploadfile.a("httpContentType")).append("\r\n").append("\r\n").toString();
        if (flag)
            uploadfile = i;
        else
            uploadfile = h;
        return s.getBytes(uploadfile);
    }

    private long b(UploadFile uploadfile, boolean flag) {
        return (long)(k.length + a(uploadfile, flag).length) + uploadfile.a();
    }

    private void b(a a1) {
        if (!a.b().isEmpty()) {
            for (Iterator iterator = a.b().iterator(); iterator.hasNext(); a(g, f)) {
                NameValue namevalue = (NameValue)iterator.next();
                a1.a(k);
                byte abyte0[] = namevalue.a(m);
                a1.a(abyte0);
                long l1 = g;
                int i1 = k.length;
                g = l1 + (long)(abyte0.length + i1);
            }

        }
    }

    private void c(a a1) {
        Iterator iterator = d.a().iterator();
        do {
            UploadFile uploadfile;
label0:
            {
                if (iterator.hasNext()) {
                    uploadfile = (UploadFile)iterator.next();
                    if (e)
                        break label0;
                }
                return;
            }
            a1.a(k);
            byte abyte0[] = a(uploadfile, m);
            a1.a(abyte0);
            long l1 = g;
            int i1 = k.length;
            g = (long)(abyte0.length + i1) + l1;
            a(g, f);
            a(uploadfile.b());
        } while (true);
    }

    private String g() {
        return (new StringBuilder()).append("-------AndroidUploadService").append(System.currentTimeMillis()).toString();
    }

    private byte[] h() {
        return (new StringBuilder()).append("\r\n--").append(j).append("\r\n").toString().getBytes(h);
    }

    private byte[] i() {
        return (new StringBuilder()).append("\r\n--").append(j).append("--").append("\r\n").toString().getBytes(h);
    }

    private long j() {
        Iterator iterator = d.a().iterator();
        long l1;
        for (l1 = 0L; iterator.hasNext(); l1 = b((UploadFile)iterator.next(), m) + l1);
        return l1;
    }

    private long k() {
        long l2;
        if (!a.b().isEmpty()) {
            Iterator iterator = a.b().iterator();
            long l1 = 0L;
            do {
                l2 = l1;
                if (!iterator.hasNext())
                    break;
                NameValue namevalue = (NameValue)iterator.next();
                int i1 = k.length;
                l1 = (long)(namevalue.a(m).length + i1) + l1;
            } while (true);
        } else {
            l2 = 0L;
        }
        return l2;
    }

    protected void a(UploadService uploadservice, Intent intent) {
        super.a(uploadservice, intent);
        j = g();
        k = h();
        l = i();
        m = intent.getBooleanExtra("multipartUtf8Charset", false);
        if (d.a().size() <= 1)
            a.a("Connection", "close");
        else
            a.a("Connection", "Keep-Alive");
        a.a("Content-Type", (new StringBuilder()).append("multipart/form-data; boundary=").append(j).toString());
    }

    protected void a(a a1) {
        b(a1);
        c(a1);
        a1.a(l);
    }

    protected long b() {
        return k() + j() + (long)l.length;
    }

    protected void c() {
        for (Iterator iterator = d.a().iterator(); iterator.hasNext(); a(((UploadFile)iterator.next()).c()));
    }

}
