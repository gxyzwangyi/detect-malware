// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.gotev.uploadservice;

import android.app.Notification;
import android.app.Service;
import android.content.Intent;
import android.os.IBinder;
import android.os.PowerManager;
import java.util.*;
import java.util.concurrent.*;
import net.gotev.uploadservice.a.a.a;
import net.gotev.uploadservice.a.b;

// Referenced classes of package net.gotev.uploadservice:
//            h, i, Logger, UploadTaskParameters

public final class UploadService extends Service {

    public static int a = Runtime.getRuntime().availableProcessors();
    public static int b = 1;
    public static boolean c = true;
    public static String d = "net.gotev";
    public static b e = new a();
    public static int f = 4096;
    public static int g = 1000;
    public static int h = 10;
    public static int i = 0x927c0;
    private static final String j = net/gotev/uploadservice/UploadService.getSimpleName();
    private static final Map m = new ConcurrentHashMap();
    private static final Map n = new ConcurrentHashMap();
    private static volatile String p = null;
    private android.os.PowerManager.WakeLock k;
    private int l;
    private final BlockingQueue o = new LinkedBlockingQueue();
    private ThreadPoolExecutor q;

    public UploadService() {
        l = 0;
    }

    protected static String a() {
        return (new StringBuilder()).append(d).append(".uploadservice.action.upload").toString();
    }

    protected static void a(String s, h h1) {
        if (h1 != null)
            n.put(s, h1);
    }

    protected static String b() {
        return (new StringBuilder()).append(d).append(".uploadservice.broadcast.status").toString();
    }

    protected static h b(String s) {
        return (h)n.get(s);
    }

    public static void c() {
        net/gotev/uploadservice/UploadService;
        JVM INSTR monitorenter ;
        boolean flag = m.isEmpty();
        if (!flag) goto _L2; else goto _L1
_L1:
        net/gotev/uploadservice/UploadService;
        JVM INSTR monitorexit ;
        return;
_L2:
        Iterator iterator = m.keySet().iterator();
        while (iterator.hasNext()) 
            ((i)m.get(iterator.next())).f();
        if (true) goto _L1; else goto _L3
_L3:
        Exception exception;
        exception;
        throw exception;
    }

    private int d() {
        byte byte0;
        if (m.isEmpty()) {
            stopSelf();
            byte0 = 2;
        } else {
            byte0 = 1;
        }
        return byte0;
    }

    i a(Intent intent) {
        String s = intent.getStringExtra("taskClass");
        if (s != null) goto _L2; else goto _L1
_L1:
        intent = null;
_L5:
        return intent;
_L2:
        Object obj = Class.forName(s);
        if (!net/gotev/uploadservice/i.isAssignableFrom(((Class) (obj)))) goto _L4; else goto _L3
_L3:
        Object obj1 = (i)net/gotev/uploadservice/i.cast(((Class) (obj)).newInstance());
        obj = obj1;
        ((i) (obj1)).a(this, intent);
        intent = ((Intent) (obj1));
_L6:
        obj = intent;
        obj1 = j;
        obj = intent;
        StringBuilder stringbuilder = JVM INSTR new #98  <Class StringBuilder>;
        obj = intent;
        stringbuilder.StringBuilder();
        obj = intent;
        Logger.c(((String) (obj1)), stringbuilder.append("Successfully created new task with class: ").append(s).toString());
          goto _L5
        intent;
_L7:
        net.gotev.uploadservice.Logger.a(j, "Error while instantiating new task", intent);
        intent = ((Intent) (obj));
          goto _L5
_L4:
        obj = j;
        intent = JVM INSTR new #98  <Class StringBuilder>;
        intent.StringBuilder();
        net.gotev.uploadservice.Logger.a(((String) (obj)), intent.append(s).append(" does not extend UploadTask!").toString());
        intent = null;
          goto _L6
        intent;
        obj = null;
          goto _L7
    }

    protected void a(String s) {
        this;
        JVM INSTR monitorenter ;
        i i1;
        i1 = (i)m.remove(s);
        n.remove(s);
        if (!c || i1 == null)
            break MISSING_BLOCK_LABEL_84;
        if (i1.d.c().equals(p)) {
            String s1 = j;
            StringBuilder stringbuilder = JVM INSTR new #98  <Class StringBuilder>;
            stringbuilder.StringBuilder();
            Logger.c(s1, stringbuilder.append(s).append(" now un-holded the foreground notification").toString());
            p = null;
        }
        if (m.isEmpty()) {
            Logger.c(j, "All tasks finished. UploadService is about to shutdown...");
            if (k != null && k.isHeld())
                k.release();
            stopSelf();
        }
        this;
        JVM INSTR monitorexit ;
        return;
        s;
        throw s;
    }

    protected boolean a(String s, Notification notification) {
        boolean flag = false;
        this;
        JVM INSTR monitorenter ;
        boolean flag1 = c;
        if (flag1) goto _L2; else goto _L1
_L1:
        this;
        JVM INSTR monitorexit ;
        return flag;
_L2:
        if (p == null) {
            p = s;
            String s1 = j;
            StringBuilder stringbuilder = JVM INSTR new #98  <Class StringBuilder>;
            stringbuilder.StringBuilder();
            Logger.c(s1, stringbuilder.append(s).append(" now holds the foreground notification").toString());
        }
        if (!s.equals(p))
            continue; /* Loop/switch isn't completed */
        startForeground(1234, notification);
        flag = true;
        if (true) goto _L1; else goto _L3
_L3:
        s;
        throw s;
    }

    public IBinder onBind(Intent intent) {
        return null;
    }

    public void onCreate() {
        super.onCreate();
        k = ((PowerManager)getSystemService("power")).newWakeLock(1, j);
        if (a <= 0)
            a = Runtime.getRuntime().availableProcessors();
        q = new ThreadPoolExecutor(a, a, b, TimeUnit.SECONDS, o);
    }

    public void onDestroy() {
        super.onDestroy();
        c();
        q.shutdown();
        if (c) {
            Logger.c(j, "Stopping foreground execution");
            stopForeground(true);
        }
        if (k != null && k.isHeld())
            k.release();
        m.clear();
        n.clear();
        Logger.c(j, "UploadService destroyed");
    }

    public int onStartCommand(Intent intent, int i1, int j1) {
        if (intent == null || !a().equals(intent.getAction())) {
            i1 = d();
        } else {
            String s1 = j;
            Locale locale = Locale.getDefault();
            String s2 = d;
            i1 = a;
            j1 = b;
            String s;
            if (c)
                s = "enabled";
            else
                s = "disabled";
            net.gotev.uploadservice.Logger.b(s1, String.format(locale, "Starting service with namespace: %s, upload pool size: %d, %ds idle thread keep alive time. Foreground execution is %s", new Object[] {
                s2, Integer.valueOf(i1), Integer.valueOf(j1), s
            }));
            intent = a(intent);
            if (intent == null) {
                i1 = d();
            } else {
                l = l + 2;
                intent.a(0L).a(l + 1234);
                if (k != null && !k.isHeld())
                    k.acquire();
                m.put(((i) (intent)).d.c(), intent);
                q.execute(intent);
                i1 = 1;
            }
        }
        return i1;
    }

}
