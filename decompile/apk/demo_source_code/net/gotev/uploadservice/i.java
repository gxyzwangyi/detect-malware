// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.gotev.uploadservice;

import android.app.NotificationManager;
import android.content.Intent;
import android.media.RingtoneManager;
import android.os.Handler;
import android.os.SystemClock;
import java.io.File;
import java.nio.charset.Charset;
import java.util.*;

// Referenced classes of package net.gotev.uploadservice:
//            UploadInfo, UploadTaskParameters, Logger, BroadcastData, 
//            UploadService, UploadNotificationConfig, ServerResponse, h

public abstract class i
    implements Runnable {

    private static final String a = net/gotev/uploadservice/i.getSimpleName();
    protected static final byte b[] = "".getBytes(Charset.forName("UTF-8"));
    protected UploadService c;
    protected UploadTaskParameters d;
    protected boolean e;
    protected long f;
    protected long g;
    private final List h = new ArrayList();
    private int i;
    private long j;
    private NotificationManager k;
    private android.support.v4.app.NotificationCompat.Builder l;
    private Handler m;
    private final long n = (new Date()).getTime();
    private int o;

    public i() {
        d = null;
        e = true;
    }

    private String a(String s, UploadInfo uploadinfo) {
        return s.replace("[[ELAPSED_TIME]]", uploadinfo.b()).replace("[[PROGRESS]]", (new StringBuilder()).append(uploadinfo.h()).append("%").toString()).replace("[[UPLOAD_RATE]]", uploadinfo.d()).replace("[[UPLOADED_FILES]]", Integer.toString(uploadinfo.e().size())).replace("[[TOTAL_FILES]]", Integer.toString(uploadinfo.i()));
    }

    private void a(Exception exception) {
        Logger.b(a, (new StringBuilder()).append("Broadcasting error for upload with ID: ").append(d.c()).append(". ").append(exception.getMessage()).toString());
        UploadInfo uploadinfo = new UploadInfo(d.c(), n, g, f, o - 1, h, d.a().size());
        BroadcastData broadcastdata = (new BroadcastData()).a(BroadcastData.Status.b).a(uploadinfo).a(exception);
        h h1 = UploadService.b(d.c());
        if (h1 != null)
            m.post(new Runnable(h1, uploadinfo, exception) {

                final h a;
                final UploadInfo b;
                final Exception c;
                final i d;

                public void run() {
                    a.a(b, c);
                }

             {
                d = i.this;
                a = h1;
                b = uploadinfo;
                c = exception;
                super();
            }
            }
);
        else
            c.sendBroadcast(broadcastdata.a());
        d(uploadinfo);
        c.a(d.c());
    }

    private void a(UploadInfo uploadinfo) {
        if (d.b() != null && d.b().e() != null) {
            l.setContentTitle(a(d.b().d(), uploadinfo)).setContentText(a(d.b().e(), uploadinfo)).setContentIntent(d.b().a(c)).setSmallIcon(d.b().a()).setGroup(UploadService.d).setProgress(100, 0, true).setOngoing(true);
            uploadinfo = l.build();
            if (c.a(d.c(), uploadinfo))
                k.cancel(i);
            else
                k.notify(i, uploadinfo);
        }
    }

    private boolean a(File file) {
        boolean flag = file.delete();
        if (flag) goto _L2; else goto _L1
_L1:
        String s = a;
        StringBuilder stringbuilder = JVM INSTR new #106 <Class StringBuilder>;
        stringbuilder.StringBuilder();
        Logger.a(s, stringbuilder.append("Unable to delete: ").append(file.getAbsolutePath()).toString());
_L4:
        return flag;
_L2:
        String s1 = a;
        StringBuilder stringbuilder1 = JVM INSTR new #106 <Class StringBuilder>;
        stringbuilder1.StringBuilder();
        Logger.b(s1, stringbuilder1.append("Successfully deleted: ").append(file.getAbsolutePath()).toString());
        continue; /* Loop/switch isn't completed */
        Exception exception;
        exception;
_L5:
        Logger.a(a, (new StringBuilder()).append("Error while deleting: ").append(file.getAbsolutePath()).append(" Check if you granted: android.permission.WRITE_EXTERNAL_STORAGE").toString(), exception);
        if (true) goto _L4; else goto _L3
_L3:
        exception;
        flag = false;
          goto _L5
    }

    private void b() {
        if (d.b().k()) {
            l.setSound(RingtoneManager.getActualDefaultRingtoneUri(c, 2));
            l.setOnlyAlertOnce(false);
        }
    }

    private void b(UploadInfo uploadinfo) {
        if (d.b() != null && d.b().e() != null) {
            l.setContentTitle(a(d.b().d(), uploadinfo)).setContentText(a(d.b().e(), uploadinfo)).setContentIntent(d.b().a(c)).setSmallIcon(d.b().a()).setGroup(UploadService.d).setProgress((int)uploadinfo.g(), (int)uploadinfo.f(), false).setOngoing(true);
            uploadinfo = l.build();
            if (c.a(d.c(), uploadinfo))
                k.cancel(i);
            else
                k.notify(i, uploadinfo);
        }
    }

    private void c(UploadInfo uploadinfo) {
        if (d.b() != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        k.cancel(i);
        if (d.b().f() != null && !d.b().h()) {
            l.setContentTitle(a(d.b().d(), uploadinfo)).setContentText(a(d.b().f(), uploadinfo)).setContentIntent(d.b().a(c)).setAutoCancel(d.b().j()).setSmallIcon(d.b().b()).setGroup(UploadService.d).setProgress(0, 0, false).setOngoing(false);
            b();
            k.notify(i + 1, l.build());
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    private void d(UploadInfo uploadinfo) {
        if (d.b() != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        k.cancel(i);
        if (d.b().g() != null && !d.b().i()) {
            l.setContentTitle(a(d.b().d(), uploadinfo)).setContentText(a(d.b().g(), uploadinfo)).setContentIntent(d.b().a(c)).setAutoCancel(d.b().j()).setSmallIcon(d.b().c()).setGroup(UploadService.d).setProgress(0, 0, false).setOngoing(false);
            b();
            k.notify(i + 1, l.build());
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    protected final i a(int i1) {
        i = i1;
        return this;
    }

    protected final i a(long l1) {
        j = l1;
        return this;
    }

    protected abstract void a();

    protected final void a(int i1, byte abyte0[], LinkedHashMap linkedhashmap) {
        boolean flag;
        if (i1 / 100 == 2)
            flag = true;
        else
            flag = false;
        if (flag) {
            c();
            if (d.f() && !h.isEmpty()) {
                for (Iterator iterator = h.iterator(); iterator.hasNext(); a(new File((String)iterator.next())));
            }
        }
        Logger.c(a, (new StringBuilder()).append("Broadcasting upload completed for ").append(d.c()).toString());
        UploadInfo uploadinfo = new UploadInfo(d.c(), n, g, f, o - 1, h, d.a().size());
        ServerResponse serverresponse = new ServerResponse(i1, abyte0, linkedhashmap);
        abyte0 = (new BroadcastData()).a(BroadcastData.Status.c).a(uploadinfo).a(serverresponse);
        linkedhashmap = UploadService.b(d.c());
        if (linkedhashmap != null)
            m.post(new Runnable(linkedhashmap, uploadinfo, serverresponse) {

                final h a;
                final UploadInfo b;
                final ServerResponse c;
                final i d;

                public void run() {
                    a.a(b, c);
                }

             {
                d = i.this;
                a = h1;
                b = uploadinfo;
                c = serverresponse;
                super();
            }
            }
);
        else
            c.sendBroadcast(abyte0.a());
        if (flag)
            c(uploadinfo);
        else
            d(uploadinfo);
        c.a(d.c());
    }

    protected final void a(long l1, long l2) {
        long l3 = System.currentTimeMillis();
        if (l3 >= j + 166L) {
            a(l3);
            Logger.c(a, (new StringBuilder()).append("Broadcasting upload progress for ").append(d.c()).append(": ").append(l1).append(" bytes of ").append(l2).toString());
            UploadInfo uploadinfo = new UploadInfo(d.c(), n, l1, l2, o - 1, h, d.a().size());
            BroadcastData broadcastdata = (new BroadcastData()).a(BroadcastData.Status.a).a(uploadinfo);
            h h1 = UploadService.b(d.c());
            if (h1 != null)
                m.post(new Runnable(h1, uploadinfo) {

                    final h a;
                    final UploadInfo b;
                    final i c;

                    public void run() {
                        a.a(b);
                    }

             {
                c = i.this;
                a = h1;
                b = uploadinfo;
                super();
            }
                }
);
            else
                c.sendBroadcast(broadcastdata.a());
            b(uploadinfo);
        }
    }

    protected final void a(String s) {
        if (!h.contains(s))
            h.add(s);
    }

    protected void a(UploadService uploadservice, Intent intent) {
        k = (NotificationManager)uploadservice.getSystemService("notification");
        l = new android.support.v4.app.NotificationCompat.Builder(uploadservice);
        c = uploadservice;
        m = new Handler(uploadservice.getMainLooper());
        d = (UploadTaskParameters)intent.getParcelableExtra("taskParameters");
    }

    protected void c() {
    }

    protected final void d() {
        Logger.c(a, (new StringBuilder()).append("Broadcasting cancellation for upload with ID: ").append(d.c()).toString());
        UploadInfo uploadinfo = new UploadInfo(d.c(), n, g, f, o - 1, h, d.a().size());
        BroadcastData broadcastdata = (new BroadcastData()).a(BroadcastData.Status.d).a(uploadinfo);
        h h1 = UploadService.b(d.c());
        if (h1 != null)
            m.post(new Runnable(h1, uploadinfo) {

                final h a;
                final UploadInfo b;
                final i c;

                public void run() {
                    a.b(b);
                }

             {
                c = i.this;
                a = h1;
                b = uploadinfo;
                super();
            }
            }
);
        else
            c.sendBroadcast(broadcastdata.a());
        d(uploadinfo);
        c.a(d.c());
    }

    protected final List e() {
        return h;
    }

    public final void f() {
        e = false;
    }

    public final void run() {
        int i1;
        a(new UploadInfo(d.c()));
        o = 0;
        i1 = UploadService.g;
_L4:
        if (o > d.e() || !e)
            break MISSING_BLOCK_LABEL_62;
        o = o + 1;
        a();
_L2:
        if (!e)
            d();
        return;
        Exception exception;
        exception;
        if (!e) goto _L2; else goto _L1
_L1:
        if (o > d.e()) {
            a(exception);
        } else {
            Logger.b(a, (new StringBuilder()).append("Error in uploadId ").append(d.c()).append(" on attempt ").append(o).append(". Waiting ").append(i1 / 1000).append("s before next attempt. ").append(exception.getMessage()).toString());
            SystemClock.sleep(i1);
            int j1 = i1 * UploadService.h;
            i1 = j1;
            if (j1 > UploadService.i)
                i1 = UploadService.i;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

}
