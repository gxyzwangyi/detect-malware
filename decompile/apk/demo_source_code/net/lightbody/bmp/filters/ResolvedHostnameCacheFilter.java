// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.filters;

import com.google.common.cache.CacheBuilder;
import com.google.common.cache.b;
import com.google.common.net.HostAndPort;
import io.netty.channel.k;
import io.netty.handler.codec.http.z;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.util.concurrent.TimeUnit;
import org.littleshoot.proxy.j;

public class ResolvedHostnameCacheFilter extends j {

    private static final int RESOLVED_ADDRESSES_CONCURRENCY_LEVEL = 50;
    private static final int RESOLVED_ADDRESSES_EVICTION_SECONDS = 600;
    private static final b resolvedAddresses;

    public ResolvedHostnameCacheFilter(z z, k k) {
        super(z, k);
    }

    public static String getPreviouslyResolvedAddressForHost(String s) {
        return (String)resolvedAddresses.a(s);
    }

    public void proxyToServerResolutionSucceeded(String s, InetSocketAddress inetsocketaddress) {
        inetsocketaddress = inetsocketaddress.getAddress();
        if (inetsocketaddress != null) {
            s = HostAndPort.b(s).a();
            if (s != null && !s.isEmpty())
                resolvedAddresses.a(s, inetsocketaddress.getHostAddress());
        }
    }

    static  {
        resolvedAddresses = CacheBuilder.a().b(600L, TimeUnit.SECONDS).a(50).o();
    }
}
