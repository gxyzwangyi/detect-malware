// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.filters;

import io.netty.handler.codec.http.ac;
import io.netty.handler.codec.http.af;
import io.netty.handler.codec.http.s;
import io.netty.handler.codec.http.w;
import io.netty.handler.codec.http.z;
import java.net.InetSocketAddress;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import net.lightbody.bmp.BrowserMobProxyServer;
import org.littleshoot.proxy.i;
import org.littleshoot.proxy.j;
import org.littleshoot.proxy.k;
import org.slf4j.b;
import org.slf4j.c;

// Referenced classes of package net.lightbody.bmp.filters:
//            ModifiedRequestAwareFilter

public class BrowserMobHttpFilterChain extends j {

    private static final b log = c.a(net/lightbody/bmp/filters/BrowserMobHttpFilterChain);
    private final List filters;
    private final BrowserMobProxyServer proxyServer;

    public BrowserMobHttpFilterChain(BrowserMobProxyServer browsermobproxyserver, z z1, io.netty.channel.k k1) {
        super(z1, k1);
        proxyServer = browsermobproxyserver;
        if (browsermobproxyserver.getFilterFactories() != null) {
            filters = new ArrayList(browsermobproxyserver.getFilterFactories().size());
            Iterator iterator = browsermobproxyserver.getFilterFactories().iterator();
            do {
                if (!iterator.hasNext())
                    break;
                browsermobproxyserver = ((k)iterator.next()).filterRequest(z1, k1);
                if (browsermobproxyserver != null)
                    filters.add(browsermobproxyserver);
            } while (true);
        } else {
            filters = Collections.emptyList();
        }
    }

    private void updateFiltersWithModifiedResponse(z z1) {
        Iterator iterator = filters.iterator();
        do {
            if (!iterator.hasNext())
                break;
            Object obj = (i)iterator.next();
            if (obj instanceof ModifiedRequestAwareFilter) {
                obj = (ModifiedRequestAwareFilter)obj;
                try {
                    ((ModifiedRequestAwareFilter) (obj)).setModifiedHttpRequest(z1);
                }
                catch (RuntimeException runtimeexception) {
                    log.c("ModifiedRequestAwareFilter in filter chain threw exception while setting modified HTTP request.", runtimeexception);
                }
            }
        } while (true);
    }

    public ac clientToProxyRequest(w w) {
        if (!proxyServer.isStopped()) goto _L2; else goto _L1
_L1:
        log.d("Aborting request to {} because proxy is stopped", originalRequest.m());
        w = new io.netty.handler.codec.http.c(originalRequest.k(), af.V);
        s.b(w, 0L);
_L6:
        return w;
_L2:
        Iterator iterator = filters.iterator();
_L4:
        Object obj;
        if (!iterator.hasNext())
            break; /* Loop/switch isn't completed */
        obj = (i)iterator.next();
        obj = ((i) (obj)).clientToProxyRequest(w);
        if (obj == null)
            continue; /* Loop/switch isn't completed */
        if (w instanceof z)
            updateFiltersWithModifiedResponse((z)w);
        w = ((w) (obj));
        continue; /* Loop/switch isn't completed */
        RuntimeException runtimeexception;
        runtimeexception;
        log.c("Filter in filter chain threw exception. Filter method may have been aborted.", runtimeexception);
        if (true) goto _L4; else goto _L3
_L3:
        if (w instanceof z)
            updateFiltersWithModifiedResponse((z)w);
        w = null;
        if (true) goto _L6; else goto _L5
_L5:
    }

    public w proxyToClientResponse(w w) {
        Iterator iterator = filters.iterator();
_L2:
        Object obj;
        obj = w;
        if (!iterator.hasNext())
            break MISSING_BLOCK_LABEL_47;
        obj = (i)iterator.next();
        obj = ((i) (obj)).proxyToClientResponse(w);
        w = ((w) (obj));
        if (obj != null)
            continue; /* Loop/switch isn't completed */
        obj = null;
        return ((w) (obj));
        RuntimeException runtimeexception;
        runtimeexception;
        log.c("Filter in filter chain threw exception. Filter method may have been aborted.", runtimeexception);
        if (true) goto _L2; else goto _L1
_L1:
    }

    public void proxyToServerConnectionFailed() {
        for (Iterator iterator = filters.iterator(); iterator.hasNext();) {
            i l = (i)iterator.next();
            try {
                l.proxyToServerConnectionFailed();
            }
            catch (RuntimeException runtimeexception) {
                log.c("Filter in filter chain threw exception. Filter method may have been aborted.", runtimeexception);
            }
        }

    }

    public void proxyToServerConnectionQueued() {
        for (Iterator iterator = filters.iterator(); iterator.hasNext();) {
            i l = (i)iterator.next();
            try {
                l.proxyToServerConnectionQueued();
            }
            catch (RuntimeException runtimeexception) {
                log.c("Filter in filter chain threw exception. Filter method may have been aborted.", runtimeexception);
            }
        }

    }

    public void proxyToServerConnectionSSLHandshakeStarted() {
        for (Iterator iterator = filters.iterator(); iterator.hasNext();) {
            i l = (i)iterator.next();
            try {
                l.proxyToServerConnectionSSLHandshakeStarted();
            }
            catch (RuntimeException runtimeexception) {
                log.c("Filter in filter chain threw exception. Filter method may have been aborted.", runtimeexception);
            }
        }

    }

    public void proxyToServerConnectionStarted() {
        for (Iterator iterator = filters.iterator(); iterator.hasNext();) {
            i l = (i)iterator.next();
            try {
                l.proxyToServerConnectionStarted();
            }
            catch (RuntimeException runtimeexception) {
                log.c("Filter in filter chain threw exception. Filter method may have been aborted.", runtimeexception);
            }
        }

    }

    public void proxyToServerConnectionSucceeded(io.netty.channel.k k1) {
        for (Iterator iterator = filters.iterator(); iterator.hasNext();) {
            i l = (i)iterator.next();
            try {
                l.proxyToServerConnectionSucceeded(k1);
            }
            catch (RuntimeException runtimeexception) {
                log.c("Filter in filter chain threw exception. Filter method may have been aborted.", runtimeexception);
            }
        }

    }

    public ac proxyToServerRequest(w w) {
        Iterator iterator = filters.iterator();
_L2:
        Object obj;
        if (!iterator.hasNext())
            break MISSING_BLOCK_LABEL_58;
        obj = (i)iterator.next();
        obj = ((i) (obj)).proxyToServerRequest(w);
        if (obj == null) goto _L2; else goto _L1
_L1:
        return ((ac) (obj));
        obj;
        log.c("Filter in filter chain threw exception. Filter method may have been aborted.", ((Throwable) (obj)));
          goto _L2
        obj = null;
          goto _L1
    }

    public void proxyToServerRequestSending() {
        for (Iterator iterator = filters.iterator(); iterator.hasNext();) {
            i l = (i)iterator.next();
            try {
                l.proxyToServerRequestSending();
            }
            catch (RuntimeException runtimeexception) {
                log.c("Filter in filter chain threw exception. Filter method may have been aborted.", runtimeexception);
            }
        }

    }

    public void proxyToServerRequestSent() {
        for (Iterator iterator = filters.iterator(); iterator.hasNext();) {
            i l = (i)iterator.next();
            try {
                l.proxyToServerRequestSent();
            }
            catch (RuntimeException runtimeexception) {
                log.c("Filter in filter chain threw exception. Filter method may have been aborted.", runtimeexception);
            }
        }

    }

    public void proxyToServerResolutionFailed(String s1) {
        for (Iterator iterator = filters.iterator(); iterator.hasNext();) {
            i l = (i)iterator.next();
            try {
                l.proxyToServerResolutionFailed(s1);
            }
            catch (RuntimeException runtimeexception) {
                log.c("Filter in filter chain threw exception. Filter method may have been aborted.", runtimeexception);
            }
        }

    }

    public InetSocketAddress proxyToServerResolutionStarted(String s1) {
        Object obj;
        Iterator iterator;
        obj = null;
        iterator = filters.iterator();
_L2:
        Object obj1;
        if (!iterator.hasNext())
            break; /* Loop/switch isn't completed */
        obj1 = (i)iterator.next();
        obj1 = ((i) (obj1)).proxyToServerResolutionStarted(s1);
        if (obj1 == null)
            continue; /* Loop/switch isn't completed */
        obj = JVM INSTR new #183 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        obj = ((StringBuilder) (obj)).append(((InetSocketAddress) (obj1)).getHostString()).append(":").append(((InetSocketAddress) (obj1)).getPort()).toString();
        s1 = ((String) (obj));
        obj = obj1;
        continue; /* Loop/switch isn't completed */
        RuntimeException runtimeexception1;
        runtimeexception1;
        RuntimeException runtimeexception;
        obj = obj1;
        runtimeexception = runtimeexception1;
_L3:
        log.c("Filter in filter chain threw exception. Filter method may have been aborted.", runtimeexception);
        if (true) goto _L2; else goto _L1
_L1:
        return ((InetSocketAddress) (obj));
        runtimeexception;
          goto _L3
    }

    public void proxyToServerResolutionSucceeded(String s1, InetSocketAddress inetsocketaddress) {
        for (Iterator iterator = filters.iterator(); iterator.hasNext();) {
            i l = (i)iterator.next();
            try {
                l.proxyToServerResolutionSucceeded(s1, inetsocketaddress);
            }
            catch (RuntimeException runtimeexception) {
                log.c("Filter in filter chain threw exception. Filter method may have been aborted.", runtimeexception);
            }
        }

        super.proxyToServerResolutionSucceeded(s1, inetsocketaddress);
    }

    public w serverToProxyResponse(w w) {
        Iterator iterator = filters.iterator();
_L2:
        Object obj;
        obj = w;
        if (!iterator.hasNext())
            break MISSING_BLOCK_LABEL_47;
        obj = (i)iterator.next();
        obj = ((i) (obj)).serverToProxyResponse(w);
        w = ((w) (obj));
        if (obj != null)
            continue; /* Loop/switch isn't completed */
        obj = null;
        return ((w) (obj));
        RuntimeException runtimeexception;
        runtimeexception;
        log.c("Filter in filter chain threw exception. Filter method may have been aborted.", runtimeexception);
        if (true) goto _L2; else goto _L1
_L1:
    }

    public void serverToProxyResponseReceived() {
        for (Iterator iterator = filters.iterator(); iterator.hasNext();) {
            i l = (i)iterator.next();
            try {
                l.serverToProxyResponseReceived();
            }
            catch (RuntimeException runtimeexception) {
                log.c("Filter in filter chain threw exception. Filter method may have been aborted.", runtimeexception);
            }
        }

    }

    public void serverToProxyResponseReceiving() {
        for (Iterator iterator = filters.iterator(); iterator.hasNext();) {
            i l = (i)iterator.next();
            try {
                l.serverToProxyResponseReceiving();
            }
            catch (RuntimeException runtimeexception) {
                log.c("Filter in filter chain threw exception. Filter method may have been aborted.", runtimeexception);
            }
        }

    }

    public void serverToProxyResponseTimedOut() {
        for (Iterator iterator = filters.iterator(); iterator.hasNext();) {
            i l = (i)iterator.next();
            try {
                l.serverToProxyResponseTimedOut();
            }
            catch (RuntimeException runtimeexception) {
                log.c("Filter in filter chain threw exception. Filter method may have been aborted.", runtimeexception);
            }
        }

    }

}
