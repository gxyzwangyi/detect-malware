// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.filters;

import io.netty.channel.k;
import io.netty.handler.codec.http.*;
import java.net.URISyntaxException;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import net.lightbody.bmp.proxy.RewriteRule;
import net.lightbody.bmp.util.BrowserMobHttpUtil;
import net.lightbody.bmp.util.HttpUtil;
import org.littleshoot.proxy.impl.j;
import org.slf4j.b;
import org.slf4j.c;

// Referenced classes of package net.lightbody.bmp.filters:
//            HttpsAwareFiltersAdapter

public class RewriteUrlFilter extends HttpsAwareFiltersAdapter {

    private static final b log = c.a(net/lightbody/bmp/filters/RewriteUrlFilter);
    private final Collection rewriteRules;

    public RewriteUrlFilter(z z1, k k, Collection collection) {
        super(z1, k);
        if (collection != null)
            rewriteRules = collection;
        else
            rewriteRules = Collections.emptyList();
    }

    public ac clientToProxyRequest(w w) {
        if (!(w instanceof z)) goto _L2; else goto _L1
_L1:
        z z1 = (z)w;
        if (!j.c(z1)) goto _L3; else goto _L2
_L2:
        return null;
_L3:
        String s1;
        s1 = getFullUrl(z1);
        Object obj = rewriteRules.iterator();
        boolean flag = false;
        w = s1;
        do {
            if (!((Iterator) (obj)).hasNext())
                break;
            RewriteRule rewriterule = (RewriteRule)((Iterator) (obj)).next();
            Matcher matcher = rewriterule.getPattern().matcher(w);
            if (matcher.matches()) {
                w = matcher.replaceAll(rewriterule.getReplace());
                flag = true;
            }
        } while (true);
        if (!flag)
            continue; /* Loop/switch isn't completed */
        String s2;
        if (HttpUtil.startsWithHttpOrHttps(z1.m()))
            z1.b(w);
        else
            try {
                z1.b(BrowserMobHttpUtil.getRawPathAndParamsFromUri(w));
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) {
                log.d("Unable to determine path from rewritten URL. Request URL will be set to the full rewritten URL instead of the resource's path.\n\tOriginal URL: {}\n\tRewritten URL: {}", new Object[] {
                    s1, w, obj
                });
                z1.b(w);
            }
        try {
            obj = HttpUtil.getHostAndPortFromUri(s1);
        }
        catch (URISyntaxException urisyntaxexception) {
            log.d("Unable to determine host and port from original URL. Host header will be set to rewritten URL's host and port.\n\tOriginal URL: {}\n\tRewritten URL: {}", new Object[] {
                s1, w, urisyntaxexception
            });
            urisyntaxexception = null;
        }
        s2 = HttpUtil.getHostAndPortFromUri(w);
        w = s2;
_L4:
        URISyntaxException urisyntaxexception1;
        if (w != null && !w.equals(obj))
            if (isHttps())
                log.d("Cannot rewrite the host or port of an HTTPS connection.\n\tHost and port from original request: {}\n\tRewritten host and port: {}", obj, w);
            else
            if (z1.j().d("Host"))
                s.b(z1, w);
        continue; /* Loop/switch isn't completed */
        urisyntaxexception1;
        log.d("Unable to determine host and port from rewritten URL. Host header will not be updated.\n\tOriginal URL: {}\n\tRewritten URL: {}", new Object[] {
            s1, w, urisyntaxexception1
        });
        w = null;
          goto _L4
        if (true) goto _L2; else goto _L5
_L5:
    }

}
