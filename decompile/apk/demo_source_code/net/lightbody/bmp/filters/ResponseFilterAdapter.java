// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.filters;

import io.netty.handler.codec.http.ac;
import io.netty.handler.codec.http.k;
import io.netty.handler.codec.http.w;
import io.netty.handler.codec.http.z;
import net.lightbody.bmp.util.HttpMessageContents;
import net.lightbody.bmp.util.HttpMessageInfo;
import org.littleshoot.proxy.i;
import org.littleshoot.proxy.l;

// Referenced classes of package net.lightbody.bmp.filters:
//            HttpsAwareFiltersAdapter, ModifiedRequestAwareFilter, ResponseFilter

public class ResponseFilterAdapter extends HttpsAwareFiltersAdapter
    implements ModifiedRequestAwareFilter {
    public static class FilterSource extends l {

        private static final int DEFAULT_MAXIMUM_RESPONSE_BUFFER_SIZE = 0x200000;
        private final ResponseFilter filter;
        private final int maximumResponseBufferSizeInBytes;

        public i filterRequest(z z, io.netty.channel.k k1) {
            return new ResponseFilterAdapter(z, k1, filter);
        }

        public int getMaximumResponseBufferSizeInBytes() {
            return maximumResponseBufferSizeInBytes;
        }

        public FilterSource(ResponseFilter responsefilter) {
            filter = responsefilter;
            maximumResponseBufferSizeInBytes = 0x200000;
        }

        public FilterSource(ResponseFilter responsefilter, int i) {
            filter = responsefilter;
            maximumResponseBufferSizeInBytes = i;
        }
    }


    private z modifiedHttpRequest;
    private final ResponseFilter responseFilter;

    public ResponseFilterAdapter(z z, io.netty.channel.k k1, ResponseFilter responsefilter) {
        super(z, k1);
        responseFilter = responsefilter;
    }

    public w serverToProxyResponse(w w) {
        if (w instanceof ac) {
            ac ac1 = (ac)w;
            HttpMessageContents httpmessagecontents;
            HttpMessageInfo httpmessageinfo;
            if (w instanceof k)
                httpmessagecontents = new HttpMessageContents((k)w);
            else
                httpmessagecontents = null;
            httpmessageinfo = new HttpMessageInfo(originalRequest, ctx, isHttps(), getFullUrl(modifiedHttpRequest), getOriginalUrl());
            responseFilter.filterResponse(ac1, httpmessagecontents, httpmessageinfo);
        }
        return super.serverToProxyResponse(w);
    }

    public void setModifiedHttpRequest(z z) {
        modifiedHttpRequest = z;
    }
}
