// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.filters;

import com.google.common.net.HostAndPort;
import io.netty.channel.k;
import io.netty.handler.codec.http.z;
import io.netty.util.b;
import io.netty.util.c;
import net.lightbody.bmp.util.BrowserMobHttpUtil;
import net.lightbody.bmp.util.HttpUtil;
import org.littleshoot.proxy.j;

public class HttpsAwareFiltersAdapter extends j {

    public static final String HOST_ATTRIBUTE_NAME = "host";
    public static final String IS_HTTPS_ATTRIBUTE_NAME = "isHttps";
    public static final String ORIGINAL_HOST_ATTRIBUTE_NAME = "originalHost";

    public HttpsAwareFiltersAdapter(z z1, k k1) {
        super(z1, k1);
    }

    private String getHttpsOriginalRequestHostAndPort() {
        if (!isHttps())
            throw new IllegalStateException("Request is not HTTPS. Cannot get original host and port on non-HTTPS request using this method.");
        else
            return (String)ctx.a(c.a("originalHost")).get();
    }

    private String getHttpsRequestHostAndPort() {
        if (!isHttps())
            throw new IllegalStateException("Request is not HTTPS. Cannot get host and port on non-HTTPS request using this method.");
        else
            return (String)ctx.a(c.a("host")).get();
    }

    public String getFullUrl(z z1) {
        if (org.littleshoot.proxy.impl.j.c(z1)) {
            z1 = BrowserMobHttpUtil.removeMatchingPort(z1.m(), 443);
            z1 = (new StringBuilder()).append("https://").append(z1).toString();
        } else
        if (HttpUtil.startsWithHttpOrHttps(z1.m())) {
            z1 = z1.m();
        } else {
            String s = getHostAndPort(z1);
            z1 = z1.m();
            if (isHttps())
                z1 = (new StringBuilder()).append("https://").append(s).append(z1).toString();
            else
                z1 = (new StringBuilder()).append("http://").append(s).append(z1).toString();
        }
        return z1;
    }

    public String getHost(z z1) {
        if (isHttps())
            z1 = HostAndPort.b(getHttpsRequestHostAndPort()).a();
        else
            z1 = HttpUtil.getHostFromRequest(z1);
        return z1;
    }

    public String getHostAndPort(z z1) {
        if (isHttps())
            z1 = getHttpsRequestHostAndPort();
        else
            z1 = HttpUtil.getHostAndPortFromRequest(z1);
        return z1;
    }

    public String getOriginalUrl() {
        return getFullUrl(originalRequest);
    }

    public boolean isHttps() {
        Boolean boolean1 = (Boolean)ctx.a(c.a("isHttps")).get();
        boolean flag;
        if (boolean1 == null)
            flag = false;
        else
            flag = boolean1.booleanValue();
        return flag;
    }
}
