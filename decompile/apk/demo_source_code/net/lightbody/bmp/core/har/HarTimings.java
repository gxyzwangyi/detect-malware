// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.core.har;

import java.util.concurrent.TimeUnit;

public class HarTimings {

    private volatile long blockedNanos;
    private volatile String comment;
    private volatile long connectNanos;
    private volatile long dnsNanos;
    private volatile long receiveNanos;
    private volatile long sendNanos;
    private volatile long sslNanos;
    private volatile long waitNanos;

    public HarTimings() {
        blockedNanos = -1L;
        dnsNanos = -1L;
        connectNanos = -1L;
        sslNanos = -1L;
        comment = "";
    }

    public long getBlocked(TimeUnit timeunit) {
        long l = -1L;
        if (blockedNanos != -1L)
            l = timeunit.convert(blockedNanos, TimeUnit.NANOSECONDS);
        return l;
    }

    public Long getBlocked() {
        return Long.valueOf(getBlocked(TimeUnit.MILLISECONDS));
    }

    public String getComment() {
        return comment;
    }

    public long getConnect(TimeUnit timeunit) {
        long l = -1L;
        if (connectNanos != -1L)
            l = timeunit.convert(connectNanos, TimeUnit.NANOSECONDS);
        return l;
    }

    public Long getConnect() {
        return Long.valueOf(getConnect(TimeUnit.MILLISECONDS));
    }

    public long getDns(TimeUnit timeunit) {
        long l = -1L;
        if (dnsNanos != -1L)
            l = timeunit.convert(dnsNanos, TimeUnit.NANOSECONDS);
        return l;
    }

    public Long getDns() {
        return Long.valueOf(getDns(TimeUnit.MILLISECONDS));
    }

    public long getReceive() {
        return getReceive(TimeUnit.MILLISECONDS);
    }

    public long getReceive(TimeUnit timeunit) {
        return timeunit.convert(receiveNanos, TimeUnit.NANOSECONDS);
    }

    public long getSend() {
        return getSend(TimeUnit.MILLISECONDS);
    }

    public long getSend(TimeUnit timeunit) {
        return timeunit.convert(sendNanos, TimeUnit.NANOSECONDS);
    }

    public long getSsl(TimeUnit timeunit) {
        long l = -1L;
        if (sslNanos != -1L)
            l = timeunit.convert(sslNanos, TimeUnit.NANOSECONDS);
        return l;
    }

    public Long getSsl() {
        return Long.valueOf(getSsl(TimeUnit.MILLISECONDS));
    }

    public long getWait() {
        return getWait(TimeUnit.MILLISECONDS);
    }

    public long getWait(TimeUnit timeunit) {
        return timeunit.convert(waitNanos, TimeUnit.NANOSECONDS);
    }

    public void setBlocked(long l) {
        setBlocked(l, TimeUnit.MILLISECONDS);
    }

    public void setBlocked(long l, TimeUnit timeunit) {
        if (l == -1L)
            blockedNanos = -1L;
        else
            blockedNanos = TimeUnit.NANOSECONDS.convert(l, timeunit);
    }

    public void setComment(String s) {
        comment = s;
    }

    public void setConnect(long l) {
        setConnect(l, TimeUnit.MILLISECONDS);
    }

    public void setConnect(long l, TimeUnit timeunit) {
        if (l == -1L)
            connectNanos = -1L;
        else
            connectNanos = TimeUnit.NANOSECONDS.convert(l, timeunit);
    }

    public void setDns(long l) {
        setDns(l, TimeUnit.MILLISECONDS);
    }

    public void setDns(long l, TimeUnit timeunit) {
        if (l == -1L)
            dnsNanos = -1L;
        else
            dnsNanos = TimeUnit.NANOSECONDS.convert(l, timeunit);
    }

    public void setReceive(long l) {
        setReceive(l, TimeUnit.MILLISECONDS);
    }

    public void setReceive(long l, TimeUnit timeunit) {
        receiveNanos = TimeUnit.NANOSECONDS.convert(l, timeunit);
    }

    public void setSend(long l) {
        setSend(l, TimeUnit.MILLISECONDS);
    }

    public void setSend(long l, TimeUnit timeunit) {
        sendNanos = TimeUnit.NANOSECONDS.convert(l, timeunit);
    }

    public void setSsl(long l) {
        setSsl(l, TimeUnit.MILLISECONDS);
    }

    public void setSsl(long l, TimeUnit timeunit) {
        if (l == -1L)
            sslNanos = -1L;
        else
            sslNanos = TimeUnit.NANOSECONDS.convert(l, timeunit);
    }

    public void setWait(long l) {
        setWait(l, TimeUnit.MILLISECONDS);
    }

    public void setWait(long l, TimeUnit timeunit) {
        waitNanos = TimeUnit.NANOSECONDS.convert(l, timeunit);
    }
}
