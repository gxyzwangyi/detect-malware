// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.core.har;

import java.util.Date;
import java.util.concurrent.TimeUnit;

// Referenced classes of package net.lightbody.bmp.core.har:
//            HarCache, HarTimings, HarRequest, HarResponse

public class HarEntry {

    private volatile HarCache cache;
    private volatile String comment;
    private volatile String connection;
    private volatile String pageref;
    private volatile HarRequest request;
    private volatile HarResponse response;
    private volatile String serverIPAddress;
    private volatile Date startedDateTime;
    private volatile HarTimings timings;

    public HarEntry() {
        cache = new HarCache();
        timings = new HarTimings();
        comment = "";
    }

    public HarEntry(String s) {
        cache = new HarCache();
        timings = new HarTimings();
        comment = "";
        pageref = s;
    }

    public HarCache getCache() {
        return cache;
    }

    public String getComment() {
        return comment;
    }

    public String getConnection() {
        return connection;
    }

    public String getPageref() {
        return pageref;
    }

    public HarRequest getRequest() {
        return request;
    }

    public HarResponse getResponse() {
        return response;
    }

    public String getServerIPAddress() {
        return serverIPAddress;
    }

    public Date getStartedDateTime() {
        return startedDateTime;
    }

    public long getTime() {
        return getTime(TimeUnit.MILLISECONDS);
    }

    public long getTime(TimeUnit timeunit) {
        HarTimings hartimings = getTimings();
        long l;
        if (hartimings == null) {
            l = -1L;
        } else {
            long l1;
            if (hartimings.getBlocked(TimeUnit.NANOSECONDS) > 0L)
                l = hartimings.getBlocked(TimeUnit.NANOSECONDS) + 0L;
            else
                l = 0L;
            l1 = l;
            if (hartimings.getDns(TimeUnit.NANOSECONDS) > 0L)
                l1 = l + hartimings.getDns(TimeUnit.NANOSECONDS);
            l = l1;
            if (hartimings.getConnect(TimeUnit.NANOSECONDS) > 0L)
                l = l1 + hartimings.getConnect(TimeUnit.NANOSECONDS);
            l1 = l;
            if (hartimings.getSend(TimeUnit.NANOSECONDS) > 0L)
                l1 = l + hartimings.getSend(TimeUnit.NANOSECONDS);
            l = l1;
            if (hartimings.getWait(TimeUnit.NANOSECONDS) > 0L)
                l = l1 + hartimings.getWait(TimeUnit.NANOSECONDS);
            l1 = l;
            if (hartimings.getReceive(TimeUnit.NANOSECONDS) > 0L)
                l1 = l + hartimings.getReceive(TimeUnit.NANOSECONDS);
            l = timeunit.convert(l1, TimeUnit.NANOSECONDS);
        }
        return l;
    }

    public HarTimings getTimings() {
        return timings;
    }

    public void setCache(HarCache harcache) {
        cache = harcache;
    }

    public void setComment(String s) {
        comment = s;
    }

    public void setConnection(String s) {
        connection = s;
    }

    public void setPageref(String s) {
        pageref = s;
    }

    public void setRequest(HarRequest harrequest) {
        request = harrequest;
    }

    public void setResponse(HarResponse harresponse) {
        response = harresponse;
    }

    public void setServerIPAddress(String s) {
        serverIPAddress = s;
    }

    public void setStartedDateTime(Date date) {
        startedDateTime = date;
    }

    public void setTimings(HarTimings hartimings) {
        timings = hartimings;
    }
}
