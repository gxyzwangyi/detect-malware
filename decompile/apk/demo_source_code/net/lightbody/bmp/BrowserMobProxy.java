// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp;

import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.util.*;
import java.util.concurrent.TimeUnit;
import net.lightbody.bmp.core.har.Har;
import net.lightbody.bmp.core.har.HarPage;
import net.lightbody.bmp.filters.RequestFilter;
import net.lightbody.bmp.filters.ResponseFilter;
import net.lightbody.bmp.mitm.TrustSource;
import net.lightbody.bmp.proxy.CaptureType;
import net.lightbody.bmp.proxy.auth.AuthType;
import net.lightbody.bmp.proxy.dns.AdvancedHostResolver;
import org.littleshoot.proxy.k;
import org.littleshoot.proxy.o;

public interface BrowserMobProxy {

    public abstract void abort();

    public abstract void addFirstHttpFilterFactory(k k);

    public abstract void addHeader(String s, String s1);

    public abstract void addHeaders(Map map);

    public abstract void addLastHttpFilterFactory(k k);

    public abstract void addRequestFilter(RequestFilter requestfilter);

    public abstract void addResponseFilter(ResponseFilter responsefilter);

    public abstract void addWhitelistPattern(String s);

    public abstract void autoAuthorization(String s, String s1, String s2, AuthType authtype);

    public abstract void blacklistRequests(String s, int i);

    public abstract void blacklistRequests(String s, int i, String s1);

    public abstract void chainedProxyAuthorization(String s, String s1, AuthType authtype);

    public abstract void clearBlacklist();

    public abstract void clearRewriteRules();

    public abstract Boolean deletePage(HarPage harpage);

    public abstract void disableHarCaptureTypes(Set set);

    public transient abstract void disableHarCaptureTypes(CaptureType acapturetype[]);

    public abstract void disableWhitelist();

    public abstract void enableEmptyWhitelist(int i);

    public abstract void enableHarCaptureTypes(Set set);

    public transient abstract void enableHarCaptureTypes(CaptureType acapturetype[]);

    public abstract Har endHar();

    public abstract Map getAllHeaders();

    public abstract Collection getBlacklist();

    public abstract InetSocketAddress getChainedProxy();

    public abstract InetAddress getClientBindAddress();

    public abstract Har getHar();

    public abstract Har getHar(String s);

    public abstract Har getHar(Set set);

    public abstract EnumSet getHarCaptureTypes();

    public abstract AdvancedHostResolver getHostNameResolver();

    public abstract int getPort();

    public abstract long getReadBandwidthLimit();

    public abstract Map getRewriteRules();

    public abstract InetAddress getServerBindAddress();

    public abstract int getWhitelistStatusCode();

    public abstract Collection getWhitelistUrls();

    public abstract long getWriteBandwidthLimit();

    public abstract boolean isStarted();

    public abstract boolean isWhitelistEnabled();

    public abstract Har newHar();

    public abstract Har newHar(String s);

    public abstract Har newHar(String s, String s1);

    public abstract Har newPage();

    public abstract Har newPage(String s);

    public abstract Har newPage(String s, String s1);

    public abstract void removeAllHeaders();

    public abstract void removeHeader(String s);

    public abstract void removeRewriteRule(String s);

    public abstract void rewriteUrl(String s, String s1);

    public abstract void rewriteUrls(Map map);

    public abstract void setBlacklist(Collection collection);

    public abstract void setChainedProxy(InetSocketAddress inetsocketaddress);

    public abstract void setConnectTimeout(int i, TimeUnit timeunit);

    public abstract void setHarCaptureTypes(Set set);

    public transient abstract void setHarCaptureTypes(CaptureType acapturetype[]);

    public abstract void setHostNameResolver(AdvancedHostResolver advancedhostresolver);

    public abstract void setIdleConnectionTimeout(int i, TimeUnit timeunit);

    public abstract void setLatency(long l, TimeUnit timeunit);

    public abstract void setMitmDisabled(boolean flag);

    public abstract void setMitmManager(o o);

    public abstract void setReadBandwidthLimit(long l);

    public abstract void setRequestTimeout(int i, TimeUnit timeunit);

    public abstract void setTrustAllServers(boolean flag);

    public abstract void setTrustSource(TrustSource trustsource);

    public abstract void setWriteBandwidthLimit(long l);

    public abstract void start();

    public abstract void start(int i);

    public abstract void start(int i, InetAddress inetaddress);

    public abstract void start(int i, InetAddress inetaddress, InetAddress inetaddress1);

    public abstract void stop();

    public abstract void stopAutoAuthorization(String s);

    public abstract boolean waitForQuiescence(long l, long l1, TimeUnit timeunit);

    public abstract void whitelistRequests(Collection collection, int i);
}
