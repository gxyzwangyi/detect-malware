// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.proxy;

import com.google.common.collect.ImmutableList;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Whitelist {

    public static final Whitelist WHITELIST_DISABLED = new Whitelist();
    private final boolean enabled;
    private final List patterns;
    private final int statusCode;

    public Whitelist() {
        patterns = Collections.emptyList();
        statusCode = -1;
        enabled = false;
    }

    public Whitelist(int i) {
        patterns = Collections.emptyList();
        statusCode = i;
        enabled = true;
    }

    public Whitelist(Collection collection, int i) {
        if (collection == null || collection.isEmpty()) {
            patterns = Collections.emptyList();
        } else {
            com.google.common.collect.ImmutableList.a a = ImmutableList.i();
            for (collection = collection.iterator(); collection.hasNext(); a.c(Pattern.compile((String)collection.next())));
            patterns = a.a();
        }
        statusCode = i;
        enabled = true;
    }

    public Whitelist(String as[], int i) {
        if (as == null)
            as = null;
        else
            as = Arrays.asList(as);
        this(((Collection) (as)), i);
    }

    public Collection getPatterns() {
        return patterns;
    }

    public int getResponseCode() {
        return getStatusCode();
    }

    public int getStatusCode() {
        return statusCode;
    }

    public boolean isEnabled() {
        return enabled;
    }

    public boolean matches(String s) {
        if (enabled) goto _L2; else goto _L1
_L1:
        boolean flag = false;
_L4:
        return flag;
_L2:
        for (Iterator iterator = getPatterns().iterator(); iterator.hasNext();)
            if (((Pattern)iterator.next()).matcher(s).matches()) {
                flag = true;
                continue; /* Loop/switch isn't completed */
            }

        flag = false;
        if (true) goto _L4; else goto _L3
_L3:
    }

}
