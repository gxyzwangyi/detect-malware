// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.proxy.dns;

import com.google.common.net.a;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.*;
import java.util.concurrent.TimeUnit;
import org.slf4j.b;
import org.slf4j.c;
import org.xbill.DNS.*;

// Referenced classes of package net.lightbody.bmp.proxy.dns:
//            AbstractHostNameRemapper, AdvancedHostResolver

public class DnsJavaResolver extends AbstractHostNameRemapper
    implements AdvancedHostResolver {

    private static final int DNS_NETWORK_FAILURE_RETRY_COUNT = 5;
    private static final b log = c.a(net/lightbody/bmp/proxy/dns/DnsJavaResolver);
    private final Cache cache = new Cache();

    public DnsJavaResolver() {
    }

    public void clearDNSCache() {
        cache.a();
    }

    protected Collection resolveHostByType(String s, int i) {
        org.xbill.DNS.Record arecord[];
        int j;
        n n1;
        try {
            n1 = JVM INSTR new #43  <Class n>;
            n1.n(s, i, 1);
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            s = Collections.emptyList();
            continue; /* Loop/switch isn't completed */
        }
        n1.a(cache);
        i = -1;
        do {
            arecord = n1.d();
            j = i + 1;
            if (n1.e() != 2)
                break;
            i = j;
        } while (j < 5);
        if (arecord != null) goto _L2; else goto _L1
_L1:
        s = Collections.emptyList();
_L4:
        return s;
_L2:
        ArrayList arraylist = new ArrayList(arecord.length);
        int k = arecord.length;
        i = 0;
        while (i < k)  {
            Object obj = arecord[i];
            if (obj instanceof ARecord) {
                obj = (ARecord)obj;
                try {
                    arraylist.add(InetAddress.getByAddress(s, ((ARecord) (obj)).j_().getAddress()));
                }
                // Misplaced declaration of an exception variable
                catch (Object obj) {
                    log.c((new StringBuilder()).append("dnsjava resolver returned an invalid InetAddress for host: ").append(s).toString(), ((Throwable) (obj)));
                }
            } else
            if (obj instanceof AAAARecord) {
                obj = (AAAARecord)obj;
                try {
                    arraylist.add(InetAddress.getByAddress(s, ((AAAARecord) (obj)).i_().getAddress()));
                }
                catch (UnknownHostException unknownhostexception) {
                    log.c((new StringBuilder()).append("dnsjava resolver returned an invalid InetAddress for host: ").append(s).toString(), unknownhostexception);
                }
            }
            i++;
        }
        s = arraylist;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public Collection resolveRemapped(String s) {
        if (!a.b(s)) goto _L2; else goto _L1
_L1:
        Object obj = Collections.singletonList(a.a(s));
_L4:
        return ((Collection) (obj));
_L2:
        Collection collection = resolveHostByType(s, 1);
        obj = collection;
        if (collection.isEmpty())
            obj = resolveHostByType(s, 28);
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void setNegativeDNSCacheTimeout(int i, TimeUnit timeunit) {
        cache.a((int)TimeUnit.SECONDS.convert(i, timeunit));
    }

    public void setPositiveDNSCacheTimeout(int i, TimeUnit timeunit) {
        cache.b((int)TimeUnit.SECONDS.convert(i, timeunit));
    }

}
