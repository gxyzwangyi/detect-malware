// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.proxy.dns;

import java.lang.reflect.Field;
import java.net.InetAddress;
import java.security.Security;
import java.util.LinkedHashMap;
import java.util.concurrent.TimeUnit;
import org.slf4j.b;
import org.slf4j.c;

// Referenced classes of package net.lightbody.bmp.proxy.dns:
//            NativeResolver

public class NativeCacheManipulatingResolver extends NativeResolver {

    private static final b log = c.a(net/lightbody/bmp/proxy/dns/NativeCacheManipulatingResolver);

    public NativeCacheManipulatingResolver() {
    }

    public void clearDNSCache() {
        Field field = java/net/InetAddress.getDeclaredField("addressCache");
        field.setAccessible(true);
        Object obj = field.get(null);
        java/net/InetAddress.getDeclaredField("negativeCache").setAccessible(true);
        Object obj2 = field.get(null);
        field = Class.forName("java.net.InetAddress$Cache").getDeclaredField("cache");
        field.setAccessible(true);
        LinkedHashMap linkedhashmap = JVM INSTR new #59  <Class LinkedHashMap>;
        linkedhashmap.LinkedHashMap();
        field.set(obj, linkedhashmap);
        obj = JVM INSTR new #59  <Class LinkedHashMap>;
        ((LinkedHashMap) (obj)).LinkedHashMap();
        field.set(obj2, obj);
_L1:
        return;
        Object obj1;
        obj1;
_L2:
        log.c("Unable to clear native JVM DNS cache", ((Throwable) (obj1)));
          goto _L1
        obj1;
          goto _L2
        obj1;
          goto _L2
    }

    public void setNegativeDNSCacheTimeout(int i, TimeUnit timeunit) {
        Field field;
        field = Class.forName("sun.net.InetAddressCachePolicy").getDeclaredField("negativeCachePolicy");
        field.setAccessible(true);
        if (i >= 0) goto _L2; else goto _L1
_L1:
        field.setInt(null, -1);
        Security.setProperty("networkaddress.cache.negative.ttl", "-1");
_L3:
        return;
_L2:
        field.setInt(null, (int)TimeUnit.SECONDS.convert(i, timeunit));
        Security.setProperty("networkaddress.cache.negative.ttl", Long.toString(TimeUnit.SECONDS.convert(i, timeunit)));
          goto _L3
        timeunit;
_L4:
        log.c("Unable to modify native JVM DNS cache timeouts", timeunit);
          goto _L3
        timeunit;
          goto _L4
        timeunit;
          goto _L4
    }

    public void setPositiveDNSCacheTimeout(int i, TimeUnit timeunit) {
        Field field;
        field = Class.forName("sun.net.InetAddressCachePolicy").getDeclaredField("cachePolicy");
        field.setAccessible(true);
        if (i >= 0) goto _L2; else goto _L1
_L1:
        field.setInt(null, -1);
        Security.setProperty("networkaddress.cache.ttl", "-1");
_L3:
        return;
_L2:
        field.setInt(null, (int)TimeUnit.SECONDS.convert(i, timeunit));
        Security.setProperty("networkaddress.cache.ttl", Long.toString(TimeUnit.SECONDS.convert(i, timeunit)));
          goto _L3
        timeunit;
_L4:
        log.c("Unable to modify native JVM DNS cache timeouts", timeunit);
          goto _L3
        timeunit;
          goto _L4
        timeunit;
          goto _L4
    }

}
