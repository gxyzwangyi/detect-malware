// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.proxy.dns;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;
import java.util.*;
import java.util.concurrent.atomic.AtomicReference;

// Referenced classes of package net.lightbody.bmp.proxy.dns:
//            AdvancedHostResolver

public abstract class AbstractHostNameRemapper
    implements AdvancedHostResolver {

    private final AtomicReference remappedHostNames = new AtomicReference(ImmutableMap.e());

    public AbstractHostNameRemapper() {
    }

    public String applyRemapping(String s) {
        String s1 = (String)((ImmutableMap)remappedHostNames.get()).get(s);
        if (s1 != null)
            s = s1;
        return s;
    }

    public void clearHostRemappings() {
        synchronized (remappedHostNames) {
            remappedHostNames.set(ImmutableMap.e());
        }
        return;
        exception;
        atomicreference;
        JVM INSTR monitorexit ;
        throw exception;
    }

    public Map getHostRemappings() {
        return (Map)remappedHostNames.get();
    }

    public Collection getOriginalHostnames(String s) {
        ArrayList arraylist = new ArrayList();
        Iterator iterator = ((Map)remappedHostNames.get()).entrySet().iterator();
        do {
            if (!iterator.hasNext())
                break;
            java.util.Map.Entry entry = (java.util.Map.Entry)iterator.next();
            if (((String)entry.getValue()).equals(s))
                arraylist.add(entry.getKey());
        } while (true);
        return arraylist;
    }

    public void remapHost(String s, String s1) {
        synchronized (remappedHostNames) {
            java.util.LinkedHashMap linkedhashmap = Maps.a((Map)remappedHostNames.get());
            linkedhashmap.remove(s);
            linkedhashmap.put(s, s1);
            s = ImmutableMap.a(linkedhashmap);
            remappedHostNames.set(s);
        }
        return;
        s;
        atomicreference;
        JVM INSTR monitorexit ;
        throw s;
    }

    public void remapHosts(Map map) {
        synchronized (remappedHostNames) {
            map = ImmutableMap.a(map);
            remappedHostNames.set(map);
        }
        return;
        map;
        atomicreference;
        JVM INSTR monitorexit ;
        throw map;
    }

    public void removeHostRemapping(String s) {
        synchronized (remappedHostNames) {
            Object obj = (Map)remappedHostNames.get();
            if (((Map) (obj)).containsKey(s)) {
                obj = Maps.a(((Map) (obj)));
                ((Map) (obj)).remove(s);
                s = ImmutableMap.a(((Map) (obj)));
                remappedHostNames.set(s);
            }
        }
        return;
        s;
        atomicreference;
        JVM INSTR monitorexit ;
        throw s;
    }

    public Collection resolve(String s) {
        return resolveRemapped(applyRemapping(s));
    }

    public abstract Collection resolveRemapped(String s);
}
