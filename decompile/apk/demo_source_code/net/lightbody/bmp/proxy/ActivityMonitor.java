// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.proxy;

import com.google.common.util.concurrent.f;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

public class ActivityMonitor {

    private final AtomicInteger activeRequests = new AtomicInteger(0);
    private final AtomicLong lastRequestFinishedNanos = new AtomicLong(System.nanoTime());
    private final f monitor = new f();
    private final com.google.common.util.concurrent.f.a requestActive;
    private final com.google.common.util.concurrent.f.a requestNotActive;
    private final AtomicInteger totalRequests = new AtomicInteger(0);

    public ActivityMonitor() {
        requestNotActive = new com.google.common.util.concurrent.f.a(monitor) {

            final ActivityMonitor this$0;

            public boolean isSatisfied() {
                boolean flag;
                if (activeRequests.get() == 0)
                    flag = true;
                else
                    flag = false;
                return flag;
            }

             {
                this$0 = ActivityMonitor.this;
                super(f1);
            }
        }
;
        requestActive = new com.google.common.util.concurrent.f.a(monitor) {

            final ActivityMonitor this$0;

            public boolean isSatisfied() {
                boolean flag;
                if (activeRequests.get() > 0)
                    flag = true;
                else
                    flag = false;
                return flag;
            }

             {
                this$0 = ActivityMonitor.this;
                super(f1);
            }
        }
;
    }

    public int getActiveRequests() {
        return activeRequests.get();
    }

    public int getTotalRequests() {
        return totalRequests.get();
    }

    public void requestFinished() {
        int i = activeRequests.decrementAndGet();
        lastRequestFinishedNanos.set(System.nanoTime());
        if (i == 0) {
            monitor.a();
            monitor.b();
        }
    }

    public void requestStarted() {
        int i = activeRequests.getAndIncrement();
        totalRequests.incrementAndGet();
        if (i == 0) {
            monitor.a();
            monitor.b();
        }
    }

    public boolean waitForQuiescence(long l, long l1, TimeUnit timeunit) {
        if (activeRequests.get() != 0) goto _L2; else goto _L1
_L1:
        if (timeunit.convert(System.nanoTime() - lastRequestFinishedNanos.get(), TimeUnit.NANOSECONDS) < l) goto _L4; else goto _L3
_L3:
        boolean flag = true;
_L6:
        return flag;
_L4:
        long l2;
        l2 = lastRequestFinishedNanos.get();
        break MISSING_BLOCK_LABEL_49;
_L2:
        l2 = System.nanoTime();
        for (l1 = System.nanoTime() + TimeUnit.NANOSECONDS.convert(l1, timeunit); TimeUnit.NANOSECONDS.convert(l, timeunit) + l2 <= l1;) {
            long l4 = System.nanoTime();
            long l3 = TimeUnit.NANOSECONDS.convert(l, timeunit);
            if (!monitor.a(requestNotActive, l1 - l4 - l3, TimeUnit.NANOSECONDS)) {
                flag = false;
                continue; /* Loop/switch isn't completed */
            }
            monitor.b();
            l3 = (lastRequestFinishedNanos.get() - System.nanoTime()) + TimeUnit.NANOSECONDS.convert(l, timeunit);
            if (l3 < 0L) {
                flag = true;
                continue; /* Loop/switch isn't completed */
            }
            if (monitor.a(requestActive, l3, TimeUnit.NANOSECONDS)) {
                monitor.b();
            } else {
                flag = true;
                continue; /* Loop/switch isn't completed */
            }
        }

        flag = false;
        if (true) goto _L6; else goto _L5
_L5:
    }

}
