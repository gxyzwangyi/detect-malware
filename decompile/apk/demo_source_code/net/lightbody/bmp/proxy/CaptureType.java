// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.proxy;

import java.util.EnumSet;

public final class CaptureType extends Enum {

    private static final CaptureType $VALUES[];
    private static final EnumSet ALL_CONTENT_CAPTURE_TYPES;
    private static final EnumSet BINARY_CONTENT_CAPTURE_TYPES;
    private static final EnumSet COOKIE_CAPTURE_TYPES;
    private static final EnumSet HEADER_CAPTURE_TYPES;
    private static final EnumSet NON_BINARY_CONTENT_CAPTURE_TYPES;
    public static final CaptureType REQUEST_BINARY_CONTENT;
    private static final EnumSet REQUEST_CAPTURE_TYPES;
    public static final CaptureType REQUEST_CONTENT;
    public static final CaptureType REQUEST_COOKIES;
    public static final CaptureType REQUEST_HEADERS;
    public static final CaptureType RESPONSE_BINARY_CONTENT;
    private static final EnumSet RESPONSE_CAPTURE_TYPES;
    public static final CaptureType RESPONSE_CONTENT;
    public static final CaptureType RESPONSE_COOKIES;
    public static final CaptureType RESPONSE_HEADERS;

    private CaptureType(String s, int i) {
        super(s, i);
    }

    public static EnumSet getAllContentCaptureTypes() {
        return EnumSet.copyOf(ALL_CONTENT_CAPTURE_TYPES);
    }

    public static EnumSet getBinaryContentCaptureTypes() {
        return EnumSet.copyOf(BINARY_CONTENT_CAPTURE_TYPES);
    }

    public static EnumSet getCookieCaptureTypes() {
        return EnumSet.copyOf(COOKIE_CAPTURE_TYPES);
    }

    public static EnumSet getHeaderCaptureTypes() {
        return EnumSet.copyOf(HEADER_CAPTURE_TYPES);
    }

    public static EnumSet getNonBinaryContentCaptureTypes() {
        return EnumSet.copyOf(NON_BINARY_CONTENT_CAPTURE_TYPES);
    }

    public static EnumSet getRequestCaptureTypes() {
        return EnumSet.copyOf(REQUEST_CAPTURE_TYPES);
    }

    public static EnumSet getResponseCaptureTypes() {
        return EnumSet.copyOf(RESPONSE_CAPTURE_TYPES);
    }

    public static CaptureType valueOf(String s) {
        return (CaptureType)Enum.valueOf(net/lightbody/bmp/proxy/CaptureType, s);
    }

    public static CaptureType[] values() {
        return (CaptureType[])$VALUES.clone();
    }

    static  {
        REQUEST_HEADERS = new CaptureType("REQUEST_HEADERS", 0);
        REQUEST_COOKIES = new CaptureType("REQUEST_COOKIES", 1);
        REQUEST_CONTENT = new CaptureType("REQUEST_CONTENT", 2);
        REQUEST_BINARY_CONTENT = new CaptureType("REQUEST_BINARY_CONTENT", 3);
        RESPONSE_HEADERS = new CaptureType("RESPONSE_HEADERS", 4);
        RESPONSE_COOKIES = new CaptureType("RESPONSE_COOKIES", 5);
        RESPONSE_CONTENT = new CaptureType("RESPONSE_CONTENT", 6);
        RESPONSE_BINARY_CONTENT = new CaptureType("RESPONSE_BINARY_CONTENT", 7);
        $VALUES = (new CaptureType[] {
            REQUEST_HEADERS, REQUEST_COOKIES, REQUEST_CONTENT, REQUEST_BINARY_CONTENT, RESPONSE_HEADERS, RESPONSE_COOKIES, RESPONSE_CONTENT, RESPONSE_BINARY_CONTENT
        });
        REQUEST_CAPTURE_TYPES = EnumSet.of(REQUEST_HEADERS, REQUEST_CONTENT, REQUEST_BINARY_CONTENT, REQUEST_COOKIES);
        RESPONSE_CAPTURE_TYPES = EnumSet.of(RESPONSE_HEADERS, RESPONSE_CONTENT, RESPONSE_BINARY_CONTENT, RESPONSE_COOKIES);
        HEADER_CAPTURE_TYPES = EnumSet.of(REQUEST_HEADERS, RESPONSE_HEADERS);
        NON_BINARY_CONTENT_CAPTURE_TYPES = EnumSet.of(REQUEST_CONTENT, RESPONSE_CONTENT);
        BINARY_CONTENT_CAPTURE_TYPES = EnumSet.of(REQUEST_BINARY_CONTENT, RESPONSE_BINARY_CONTENT);
        ALL_CONTENT_CAPTURE_TYPES = EnumSet.of(REQUEST_CONTENT, RESPONSE_CONTENT, REQUEST_BINARY_CONTENT, RESPONSE_BINARY_CONTENT);
        COOKIE_CAPTURE_TYPES = EnumSet.of(REQUEST_COOKIES, RESPONSE_COOKIES);
    }
}
