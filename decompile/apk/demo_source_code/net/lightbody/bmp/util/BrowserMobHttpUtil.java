// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.util;

import cn.darkal.networkdiagnosis.d.a;
import com.google.common.base.Optional;
import com.google.common.net.HostAndPort;
import io.netty.buffer.h;
import io.netty.handler.codec.http.ac;
import io.netty.handler.codec.http.af;
import io.netty.handler.codec.http.s;
import io.netty.handler.codec.http.z;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.URI;
import java.nio.charset.Charset;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Iterator;
import java.util.List;
import java.util.zip.GZIPInputStream;
import java.util.zip.InflaterInputStream;
import net.lightbody.bmp.exception.DecompressionException;
import org.slf4j.b;
import org.slf4j.c;

// Referenced classes of package net.lightbody.bmp.util:
//            HttpUtil

public class BrowserMobHttpUtil {

    public static final int DECOMPRESS_BUFFER_SIZE = 16192;
    public static final Charset DEFAULT_HTTP_CHARSET = Charset.forName("ISO-8859-1");
    public static final String UNKNOWN_CONTENT_TYPE = "application/octet-stream";
    private static final b log = c.a(net/lightbody/bmp/util/BrowserMobHttpUtil);

    public BrowserMobHttpUtil() {
    }

    public static String base64EncodeBasicCredentials(String s1, String s2) {
        return new String(a.a(new String((new StringBuilder()).append(s1).append(':').append(s2).toString().getBytes(Charset.forName("UTF-8")))));
    }

    public static byte[] decompressContents(byte abyte0[]) {
        Object obj1;
        obj1 = JVM INSTR new #77  <Class GZIPInputStream>;
        ByteArrayInputStream bytearrayinputstream = JVM INSTR new #79  <Class ByteArrayInputStream>;
        bytearrayinputstream.ByteArrayInputStream(abyte0);
        ((GZIPInputStream) (obj1)).GZIPInputStream(bytearrayinputstream);
        Object obj = obj1;
        Object obj2 = JVM INSTR new #85  <Class ByteArrayOutputStream>;
        obj = obj1;
        ((ByteArrayOutputStream) (obj2)).ByteArrayOutputStream(abyte0.length);
        obj = obj1;
        abyte0 = new byte[16192];
_L2:
        obj = obj1;
        int i = ((InflaterInputStream) (obj1)).read(abyte0);
        if (i <= -1)
            break; /* Loop/switch isn't completed */
        obj = obj1;
        ((ByteArrayOutputStream) (obj2)).write(abyte0, 0, i);
        if (true) goto _L2; else goto _L1
        obj;
        abyte0 = ((byte []) (obj1));
        obj1 = obj;
_L6:
        obj = abyte0;
        obj2 = JVM INSTR new #100 <Class DecompressionException>;
        obj = abyte0;
        ((DecompressionException) (obj2)).DecompressionException("Unable to decompress response", ((Throwable) (obj1)));
        obj = abyte0;
        throw obj2;
        abyte0;
_L4:
        if (obj != null)
            try {
                ((InflaterInputStream) (obj)).close();
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) {
                log.c("Unable to close gzip stream", ((Throwable) (obj)));
            }
        throw abyte0;
_L1:
        obj = obj1;
        abyte0 = ((ByteArrayOutputStream) (obj2)).toByteArray();
        if (obj1 != null)
            try {
                ((InflaterInputStream) (obj1)).close();
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) {
                log.c("Unable to close gzip stream", ((Throwable) (obj)));
            }
        return abyte0;
        abyte0;
        obj = null;
        if (true) goto _L4; else goto _L3
_L3:
        obj1;
        abyte0 = null;
        if (true) goto _L6; else goto _L5
_L5:
    }

    public static byte[] extractReadableBytes(h h1) {
        byte abyte0[] = new byte[h1.f()];
        h1.h();
        h1.a(abyte0);
        h1.i();
        return abyte0;
    }

    public static String getContentAsString(byte abyte0[], Charset charset) {
        if (charset == null)
            throw new IllegalArgumentException("Charset cannot be null");
        else
            return new String(abyte0, charset);
    }

    public static long getHeaderSize(s s1) {
        Iterator iterator = s1.b().iterator();
        int i;
        long l;
        for (l = 0L; iterator.hasNext(); l = (long)(((String)s1.getValue()).length() + i + 4) + l) {
            s1 = (java.util.Map.Entry)iterator.next();
            i = ((String)s1.getKey()).length();
        }

        return l;
    }

    public static String getRawPathAndParamsFromRequest(z z1) {
        if (HttpUtil.startsWithHttpOrHttps(z1.m())) {
            z1 = getRawPathAndParamsFromUri(z1.m());
        } else {
            new URI(z1.m());
            z1 = z1.m();
        }
        return z1;
    }

    public static String getRawPathAndParamsFromUri(String s1) {
        s1 = new URI(s1);
        String s2 = s1.getRawPath();
        String s3 = s1.getRawQuery();
        s1 = s2;
        if (s3 != null)
            s1 = (new StringBuilder()).append(s2).append('?').append(s3).toString();
        return s1;
    }

    public static boolean hasTextualContent(String s1) {
        boolean flag;
        if (s1 != null && (s1.startsWith("text/") || s1.startsWith("application/x-javascript") || s1.startsWith("application/javascript") || s1.startsWith("application/json") || s1.startsWith("application/xml") || s1.startsWith("application/xhtml+xml")))
            flag = true;
        else
            flag = false;
        return flag;
    }

    public static boolean isRedirect(ac ac1) {
        ac1.h().a();
        JVM INSTR tableswitch 300 307: default 56
    //                   300 60
    //                   301 60
    //                   302 60
    //                   303 60
    //                   304 56
    //                   305 56
    //                   306 56
    //                   307 60;
           goto _L1 _L2 _L2 _L2 _L2 _L1 _L1 _L1 _L2
_L1:
        boolean flag = false;
_L4:
        return flag;
_L2:
        flag = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static Charset readCharsetInContentTypeHeader(String s1) {
        Object obj;
        Object obj1;
        obj1 = null;
        obj = obj1;
        if (s1 == null) goto _L2; else goto _L1
_L1:
        if (!s1.isEmpty()) goto _L4; else goto _L3
_L3:
        obj = obj1;
_L2:
        return ((Charset) (obj));
_L4:
        obj = com.google.common.net.b.a(s1);
        IllegalArgumentException illegalargumentexception;
        try {
            obj = (Charset)((com.google.common.net.b) (obj)).a().b();
        }
        // Misplaced declaration of an exception variable
        catch (String s1) {
            throw new net.lightbody.bmp.exception.UnsupportedCharsetException(s1);
        }
        continue; /* Loop/switch isn't completed */
        illegalargumentexception;
        log.c("Unable to parse Content-Type header: {}. Content-Type header will be ignored.", s1, illegalargumentexception);
        illegalargumentexception = obj1;
        if (true) goto _L2; else goto _L5
_L5:
    }

    public static String removeMatchingPort(String s1, int i) {
        HostAndPort hostandport = HostAndPort.b(s1);
        String s2 = s1;
        if (hostandport.b()) {
            s2 = s1;
            if (hostandport.c() == i)
                s2 = HostAndPort.a(hostandport.a()).toString();
        }
        return s2;
    }

}
