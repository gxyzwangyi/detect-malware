// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.util;

import com.google.common.base.Suppliers;
import com.google.common.base.n;
import java.nio.charset.Charset;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import net.lightbody.bmp.core.har.Har;
import net.lightbody.bmp.core.har.HarEntry;
import net.lightbody.bmp.core.har.HarLog;
import net.lightbody.bmp.core.har.HarPage;
import net.lightbody.bmp.mitm.exception.UncheckedIOException;
import net.sf.uadetector.d.a;
import org.slf4j.b;
import org.slf4j.c;

// Referenced classes of package net.lightbody.bmp.util:
//            ClasspathResourceUtil

public class BrowserMobProxyUtil {

    private static final Object PARSER_INIT_LOCK = new Object();
    private static final String UNKNOWN_VERSION_STRING = "UNKNOWN-VERSION";
    private static final String VERSION_CLASSPATH_RESOURCE = "/net/lightbody/bmp/version";
    private static final b log = c.a(net/lightbody/bmp/util/BrowserMobProxyUtil);
    private static volatile net.sf.uadetector.a parser;
    private static final n version = Suppliers.a(new n() {

        public volatile Object get() {
            return get();
        }

        public String get() {
            return BrowserMobProxyUtil.readVersionFileOnClasspath();
        }

    }
);

    public BrowserMobProxyUtil() {
    }

    public static Har copyHarThroughPageRef(Har har, String s) {
        if (har == null)
            har = null;
        else
        if (har.getLog() == null) {
            har = new Har();
        } else {
            HashSet hashset = new HashSet();
            Iterator iterator = har.getLog().getPages().iterator();
            HarPage harpage1;
            do {
                if (!iterator.hasNext())
                    break;
                harpage1 = (HarPage)iterator.next();
                hashset.add(harpage1.getId());
            } while (!s.equals(harpage1.getId()));
            s = new HarLog();
            iterator = har.getLog().getEntries().iterator();
            do {
                if (!iterator.hasNext())
                    break;
                HarEntry harentry = (HarEntry)iterator.next();
                if (hashset.contains(harentry.getPageref()))
                    s.addEntry(harentry);
            } while (true);
            har = har.getLog().getPages().iterator();
            do {
                if (!har.hasNext())
                    break;
                HarPage harpage = (HarPage)har.next();
                if (hashset.contains(harpage.getId()))
                    s.addPage(harpage);
            } while (true);
            har = new Har();
            har.setLog(s);
        }
        return har;
    }

    public static net.sf.uadetector.a getUserAgentStringParser() {
        if (parser == null)
            synchronized (PARSER_INIT_LOCK) {
                if (parser == null)
                    parser = a.a();
            }
        return parser;
        exception;
        obj;
        JVM INSTR monitorexit ;
        throw exception;
    }

    public static String getVersionString() {
        return (String)version.get();
    }

    private static String readVersionFileOnClasspath() {
        String s1 = ClasspathResourceUtil.classpathResourceToString("/net/lightbody/bmp/version", Charset.forName("UTF-8"));
        String s;
        s = s1;
        if (s1.isEmpty()) {
            log.b("Version file on classpath was empty or could not be read. Resource: {}", "/net/lightbody/bmp/version");
            s = "UNKNOWN-VERSION";
        }
_L2:
        return s;
        UncheckedIOException uncheckedioexception;
        uncheckedioexception;
        log.b("Unable to load version from classpath resource: {}", "/net/lightbody/bmp/version", uncheckedioexception);
        uncheckedioexception = "UNKNOWN-VERSION";
        if (true) goto _L2; else goto _L1
_L1:
    }


}
