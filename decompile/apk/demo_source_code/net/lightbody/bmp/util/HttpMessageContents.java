// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.util;

import io.netty.handler.codec.http.k;
import io.netty.handler.codec.http.s;
import java.nio.charset.Charset;
import net.lightbody.bmp.exception.UnsupportedCharsetException;
import org.slf4j.b;
import org.slf4j.c;

// Referenced classes of package net.lightbody.bmp.util:
//            HttpObjectUtil, BrowserMobHttpUtil

public class HttpMessageContents {

    private static final b log = c.a(net/lightbody/bmp/util/HttpMessageContents);
    private volatile byte binaryContents[];
    private final k httpMessage;
    private volatile String textContents;

    public HttpMessageContents(k k) {
        httpMessage = k;
    }

    public byte[] getBinaryContents() {
        if (binaryContents == null)
            binaryContents = HttpObjectUtil.extractBinaryHttpEntityBody(httpMessage);
        return binaryContents;
    }

    public Charset getCharset() {
        Object obj = getContentType();
        Charset charset;
        try {
            charset = BrowserMobHttpUtil.readCharsetInContentTypeHeader(((String) (obj)));
        }
        catch (UnsupportedCharsetException unsupportedcharsetexception) {
            java.nio.charset.UnsupportedCharsetException unsupportedcharsetexception1 = unsupportedcharsetexception.getUnsupportedCharsetExceptionCause();
            log.e("Character set specified in Content-Type header is not supported on this platform. Content-Type header: {}", obj, unsupportedcharsetexception1);
            throw unsupportedcharsetexception1;
        }
        obj = charset;
        if (charset == null)
            obj = BrowserMobHttpUtil.DEFAULT_HTTP_CHARSET;
        return ((Charset) (obj));
    }

    public String getContentType() {
        String s1;
label0:
        {
            String s2 = s.a(httpMessage, "Content-Type");
            if (s2 != null) {
                s1 = s2;
                if (!s2.isEmpty())
                    break label0;
            }
            s1 = "application/octet-stream";
        }
        return s1;
    }

    public String getTextContents() {
        if (textContents == null)
            textContents = HttpObjectUtil.extractHttpEntityBody(httpMessage);
        return textContents;
    }

    public boolean isText() {
        return BrowserMobHttpUtil.hasTextualContent(getContentType());
    }

    public void setBinaryContents(byte abyte0[]) {
        HttpObjectUtil.replaceBinaryHttpEntityBody(httpMessage, abyte0);
        binaryContents = null;
        textContents = null;
    }

    public void setTextContents(String s1) {
        HttpObjectUtil.replaceTextHttpEntityBody(httpMessage, s1);
        textContents = null;
        binaryContents = null;
    }

}
