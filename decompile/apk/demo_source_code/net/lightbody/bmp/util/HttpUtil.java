// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.util;

import com.google.common.net.HostAndPort;
import io.netty.handler.codec.http.s;
import io.netty.handler.codec.http.z;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Locale;

public class HttpUtil {

    public HttpUtil() {
    }

    public static String getHostAndPortFromRequest(z z1) {
        if (!startsWithHttpOrHttps(z1.m())) goto _L2; else goto _L1
_L1:
        String s1 = getHostAndPortFromUri(z1.m());
        z1 = s1;
_L4:
        return z1;
        URISyntaxException urisyntaxexception;
        urisyntaxexception;
_L2:
        z1 = parseHostHeader(z1, true);
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static String getHostAndPortFromUri(String s1) {
        s1 = new URI(s1);
        if (s1.getPort() == -1)
            s1 = s1.getHost();
        else
            s1 = HostAndPort.a(s1.getHost(), s1.getPort()).toString();
        return s1;
    }

    public static String getHostFromRequest(z z1) {
label0:
        {
            Object obj1 = null;
            Object obj = obj1;
            if (startsWithHttpOrHttps(z1.m()))
                try {
                    obj = JVM INSTR new #33  <Class URI>;
                    ((URI) (obj)).URI(z1.m());
                    obj = ((URI) (obj)).getHost();
                }
                catch (URISyntaxException urisyntaxexception) {
                    urisyntaxexception = ((URISyntaxException) (obj1));
                }
            if (obj != null) {
                obj1 = obj;
                if (!((String) (obj)).isEmpty())
                    break label0;
            }
            obj1 = parseHostHeader(z1, false);
        }
        return ((String) (obj1));
    }

    private static String parseHostHeader(z z1, boolean flag) {
        z1 = z1.j().c("Host");
        if (!z1.isEmpty()) {
            z1 = (String)z1.get(0);
            if (!flag)
                z1 = HostAndPort.b(z1).a();
        } else {
            z1 = null;
        }
        return z1;
    }

    public static boolean startsWithHttpOrHttps(String s1) {
        boolean flag = false;
        if (s1 != null) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        s1 = s1.toLowerCase(Locale.US);
        if (s1.startsWith("http://") || s1.startsWith("https://"))
            flag = true;
        if (true) goto _L1; else goto _L3
_L3:
    }
}
