// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.mitm.util;

import java.io.IOException;
import java.security.*;
import java.security.cert.*;
import javax.net.ssl.KeyManager;
import javax.net.ssl.KeyManagerFactory;
import net.lightbody.bmp.mitm.exception.KeyStoreAccessException;

public class KeyStoreUtil {

    public KeyStoreUtil() {
    }

    public static KeyStore createEmptyKeyStore(String s, String s1) {
        String s2;
        s2 = s;
        if (s == null)
            s2 = "BKS";
        if (s1 != null)
            break MISSING_BLOCK_LABEL_26;
        s = KeyStore.getInstance(s2);
_L1:
        s.load(null, null);
        return s;
        s = KeyStore.getInstance(s2, s1);
          goto _L1
        s;
_L3:
        throw new KeyStoreAccessException((new StringBuilder()).append("Error creating or initializing new KeyStore of type: ").append(s2).toString(), s);
        s;
        continue; /* Loop/switch isn't completed */
        s;
        continue; /* Loop/switch isn't completed */
        s;
        continue; /* Loop/switch isn't completed */
        s;
        if (true) goto _L3; else goto _L2
_L2:
    }

    public static KeyStore createRootCertificateKeyStore(String s, X509Certificate x509certificate, String s1, PrivateKey privatekey, String s2, String s3) {
        if (s2 == null)
            throw new IllegalArgumentException("Must specify a KeyStore password");
        s = createEmptyKeyStore(s, s3);
        try {
            s.setKeyEntry(s1, privatekey, s2.toCharArray(), new Certificate[] {
                x509certificate
            });
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            throw new KeyStoreAccessException("Unable to store certificate and private key in KeyStore", s);
        }
        return s;
    }

    public static KeyManager[] getKeyManagers(KeyStore keystore, String s, String s1, String s2) {
        String s3;
        s3 = s1;
        if (s1 == null)
            s3 = KeyManagerFactory.getDefaultAlgorithm();
        if (s2 != null) goto _L2; else goto _L1
_L1:
        s1 = KeyManagerFactory.getInstance(s3);
_L4:
        s1.init(keystore, s.toCharArray());
        return s1.getKeyManagers();
_L2:
        s1 = KeyManagerFactory.getInstance(s3, s2);
        if (true) goto _L4; else goto _L3
_L3:
        keystore;
_L6:
        throw new KeyStoreAccessException("Unable to get KeyManagers for KeyStore", keystore);
        keystore;
        continue; /* Loop/switch isn't completed */
        keystore;
        continue; /* Loop/switch isn't completed */
        keystore;
        if (true) goto _L6; else goto _L5
_L5:
    }
}
