// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.mitm.util;

import com.google.common.base.Suppliers;
import com.google.common.base.n;
import io.netty.handler.ssl.ah;
import io.netty.handler.ssl.ai;
import io.netty.handler.ssl.an;
import io.netty.handler.ssl.r;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.security.cert.X509Certificate;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLException;
import javax.net.ssl.SSLPeerUnverifiedException;
import javax.net.ssl.SSLServerSocketFactory;
import javax.net.ssl.SSLSession;
import net.lightbody.bmp.mitm.TrustSource;
import net.lightbody.bmp.mitm.exception.SslContextInitializationException;
import net.lightbody.bmp.mitm.trustmanager.InsecureTrustManagerFactory;
import org.slf4j.b;
import org.slf4j.c;

public class SslUtil {

    private static final String DEFAULT_CIPHERS_LIST_RESOURCE = "/default-ciphers.txt";
    private static final n defaultCipherList = Suppliers.a(new n() {

        public volatile Object get() {
            return get();
        }

        public List get() {
            if (!r.a()) goto _L2; else goto _L1
_L1:
            List list = SslUtil.getBuiltInCipherList();
_L4:
            return list;
_L2:
            List list1 = SslUtil.getEnabledJdkCipherSuites();
            list = list1;
            if (list1.isEmpty())
                list = SslUtil.getBuiltInCipherList();
            if (true) goto _L4; else goto _L3
_L3:
        }

    }
);
    private static final b log = c.a(net/lightbody/bmp/mitm/util/SslUtil);

    public SslUtil() {
    }

    public static List getBuiltInCipherList() {
        Object obj2 = net/lightbody/bmp/mitm/util/SslUtil.getResourceAsStream("/default-ciphers.txt");
        Object obj1 = null;
        if (obj2 != null) goto _L2; else goto _L1
_L1:
        Object obj = Collections.emptyList();
        obj1 = obj;
        obj = obj1;
        if (obj2 == null) goto _L4; else goto _L3
_L3:
        if (true) goto _L6; else goto _L5
_L5:
        ((InputStream) (obj2)).close();
        obj = obj1;
_L4:
        return ((List) (obj));
        obj;
        try {
            throw new NullPointerException();
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            obj = Collections.emptyList();
        }
        continue; /* Loop/switch isn't completed */
_L6:
        ((InputStream) (obj2)).close();
        obj = obj1;
        continue; /* Loop/switch isn't completed */
_L2:
        obj = JVM INSTR new #64  <Class InputStreamReader>;
        ((InputStreamReader) (obj)).InputStreamReader(((InputStream) (obj2)), Charset.forName("UTF-8"));
        obj = com.google.common.a.c.b(((Readable) (obj)));
        obj1 = obj;
        obj = obj1;
        if (obj2 == null)
            continue; /* Loop/switch isn't completed */
        if (true)
            break MISSING_BLOCK_LABEL_113;
        ((InputStream) (obj2)).close();
        obj = obj1;
        continue; /* Loop/switch isn't completed */
        obj;
        throw new NullPointerException();
        ((InputStream) (obj2)).close();
        obj = obj1;
        if (true) goto _L4; else goto _L7
_L7:
        obj1;
        throw obj1;
        Exception exception;
        exception;
_L10:
        if (obj2 == null)
            break MISSING_BLOCK_LABEL_138;
        if (obj1 == null)
            break MISSING_BLOCK_LABEL_149;
        ((InputStream) (obj2)).close();
_L8:
        throw exception;
        obj2;
        ((Throwable) (obj1)).addSuppressed(((Throwable) (obj2)));
          goto _L8
        ((InputStream) (obj2)).close();
          goto _L8
        exception;
        if (true) goto _L10; else goto _L9
_L9:
    }

    public static List getDefaultCipherList() {
        return (List)defaultCipherList.get();
    }

    public static List getEnabledJdkCipherSuites() {
        Object obj;
        try {
            obj = SSLContext.getInstance("TLS");
            ((SSLContext) (obj)).init(null, null, null);
            obj = Arrays.asList(((SSLContext) (obj)).getServerSocketFactory().getDefaultCipherSuites());
        }
        catch (Throwable throwable) {
            log.b("Unable to load default JDK server cipher list from SSLContext");
            log.a("An error occurred while initializing an SSLContext or ServerSocketFactory", throwable);
            throwable = Collections.emptyList();
        }
        return ((List) (obj));
    }

    public static X509Certificate getServerCertificate(SSLSession sslsession) {
        Object obj = null;
        X509Certificate x509certificate;
        try {
            sslsession = sslsession.getPeerCertificates();
        }
        // Misplaced declaration of an exception variable
        catch (SSLSession sslsession) {
            sslsession = null;
        }
        x509certificate = obj;
        if (sslsession != null) {
            x509certificate = obj;
            if (sslsession.length > 0) {
                Object obj1 = sslsession[0];
                x509certificate = obj;
                if (obj1 != null) {
                    x509certificate = obj;
                    if (obj1 instanceof X509Certificate)
                        x509certificate = (X509Certificate)sslsession[0];
                }
            }
        }
        return x509certificate;
    }

    public static ah getUpstreamServerSslContext(Collection collection, TrustSource trustsource) {
        ai ai1 = ai.a();
        if (trustsource == null) {
            log.c("Disabling upstream server certificate verification. This will allow attackers to intercept communications with upstream servers.");
            ai1.a(InsecureTrustManagerFactory.INSTANCE);
        } else {
            ai1.a(trustsource.getTrustedCAs());
        }
        ai1.a(collection, an.a);
        try {
            collection = ai1.b();
        }
        // Misplaced declaration of an exception variable
        catch (Collection collection) {
            throw new SslContextInitializationException("Error creating new SSL context for connection to upstream server", collection);
        }
        return collection;
    }

}
