// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.mitm.util;

import com.google.common.base.Suppliers;
import com.google.common.base.n;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.security.*;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.X509TrustManager;
import net.lightbody.bmp.mitm.exception.*;
import net.lightbody.bmp.mitm.tools.DefaultSecurityProviderTool;
import net.lightbody.bmp.mitm.tools.SecurityProviderTool;
import net.lightbody.bmp.util.ClasspathResourceUtil;
import org.slf4j.b;
import org.slf4j.c;

public class TrustUtil {

    private static final Pattern CA_PEM_PATTERN = Pattern.compile("-----BEGIN CERTIFICATE-----.+?-----END CERTIFICATE-----", 32);
    private static final String DEFAULT_TRUSTED_CA_RESOURCE = "/cacerts.pem";
    public static final X509Certificate EMPTY_CERTIFICATE_ARRAY[] = new X509Certificate[0];
    private static final n builtinTrustedCAs = Suppliers.a(new n() {

        public volatile Object get() {
            return get();
        }

        public X509Certificate[] get() {
            X509Certificate ax509certificate[];
            try {
                ax509certificate = TrustUtil.readX509CertificatesFromPem(ClasspathResourceUtil.classpathResourceToString("/cacerts.pem", Charset.forName("UTF-8")));
            }
            catch (UncheckedIOException uncheckedioexception) {
                TrustUtil.log.c("Unable to load built-in trusted CAs; no built-in CAs will be trusted", uncheckedioexception);
                uncheckedioexception = new X509Certificate[0];
            }
            return ax509certificate;
        }

    }
);
    private static final n javaTrustedCAs = Suppliers.a(new n() {

        public volatile Object get() {
            return get();
        }

        public X509Certificate[] get() {
            X509Certificate ax509certificate[] = TrustUtil.getDefaultJavaTrustManager().getAcceptedIssuers();
            if (ax509certificate == null)
                ax509certificate = TrustUtil.EMPTY_CERTIFICATE_ARRAY;
            return ax509certificate;
        }

    }
);
    private static final b log = c.a(net/lightbody/bmp/mitm/util/TrustUtil);
    private static final SecurityProviderTool securityProviderTool = new DefaultSecurityProviderTool();

    public TrustUtil() {
    }

    public static List extractTrustedCertificateEntries(KeyStore keystore) {
        ArrayList arraylist;
        Object obj;
        obj = Collections.list(keystore.aliases());
        arraylist = JVM INSTR new #88  <Class ArrayList>;
        arraylist.ArrayList(((List) (obj)).size());
        obj = ((List) (obj)).iterator();
_L2:
        Object obj1;
        do {
            do {
                if (!((Iterator) (obj)).hasNext())
                    break MISSING_BLOCK_LABEL_114;
                obj1 = (String)((Iterator) (obj)).next();
            } while (!keystore.entryInstanceOf(((String) (obj1)), java/security/KeyStore$TrustedCertificateEntry));
            obj1 = keystore.getCertificate(((String) (obj1)));
            if (obj1 instanceof X509Certificate)
                break MISSING_BLOCK_LABEL_100;
            log.b("Skipping non-X509Certificate in KeyStore. Certificate type: {}", ((Certificate) (obj1)).getType());
        } while (true);
        try {
            arraylist.add((X509Certificate)obj1);
        }
        // Misplaced declaration of an exception variable
        catch (KeyStore keystore) {
            throw new KeyStoreAccessException("Error occurred while retrieving trusted CAs from KeyStore", keystore);
        }
        if (true) goto _L2; else goto _L1
_L1:
        return arraylist;
    }

    public static X509Certificate[] getBuiltinTrustedCAs() {
        return (X509Certificate[])builtinTrustedCAs.get();
    }

    public static X509TrustManager getDefaultJavaTrustManager() {
        TrustManagerFactory trustmanagerfactory;
        trustmanagerfactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        trustmanagerfactory.init((KeyStore)null);
        break MISSING_BLOCK_LABEL_15;
        Object obj;
        obj;
_L2:
        throw new TrustSourceException("Unable to retrieve default TrustManagerFactory", ((Throwable) (obj)));
        javax.net.ssl.TrustManager atrustmanager[] = trustmanagerfactory.getTrustManagers();
        int j = atrustmanager.length;
        for (int i = 0; i < j; i++) {
            javax.net.ssl.TrustManager trustmanager = atrustmanager[i];
            if (trustmanager instanceof X509TrustManager)
                return (X509TrustManager)trustmanager;
        }

        throw new TrustSourceException("No X509TrustManager found");
        obj;
        if (true) goto _L2; else goto _L1
_L1:
    }

    public static X509Certificate[] getJavaTrustedCAs() {
        return (X509Certificate[])javaTrustedCAs.get();
    }

    public static X509Certificate readSingleX509Certificate(String s) {
        return securityProviderTool.decodePemEncodedCertificate(new StringReader(s));
    }

    public static X509Certificate[] readX509CertificatesFromPem(String s) {
        ArrayList arraylist = new ArrayList(500);
        for (s = CA_PEM_PATTERN.matcher(s); s.find(); arraylist.add(readSingleX509Certificate(s.group())));
        return (X509Certificate[])arraylist.toArray(new X509Certificate[0]);
    }


}
