// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.mitm.util;

import java.io.File;
import java.io.IOException;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.*;
import java.util.Random;
import javax.crypto.Cipher;
import net.lightbody.bmp.mitm.exception.ExportException;
import net.lightbody.bmp.mitm.exception.ImportException;
import org.apache.commons.io.b;

public class EncryptionUtil {

    public EncryptionUtil() {
    }

    public static String getDigitalSignatureType(Key key) {
        if (key instanceof ECKey)
            key = "ECDSA";
        else
        if (key instanceof RSAKey)
            key = "RSA";
        else
        if (key instanceof DSAKey)
            key = "DSA";
        else
            throw new IllegalArgumentException((new StringBuilder()).append("Cannot determine digital signature encryption type for unknown key type: ").append(key.getClass().getCanonicalName()).toString());
        return key;
    }

    public static BigInteger getRandomBigInteger(int i) {
        return new BigInteger(i, new Random());
    }

    public static String getSignatureAlgorithm(String s, Key key) {
        return (new StringBuilder()).append(s).append("with").append(getDigitalSignatureType(key)).toString();
    }

    public static boolean isEcKey(Key key) {
        return "EC".equals(key.getAlgorithm());
    }

    public static boolean isRsaKey(Key key) {
        return "RSA".equals(key.getAlgorithm());
    }

    public static boolean isUnlimitedStrengthAllowed() {
        boolean flag = false;
        int i = Cipher.getMaxAllowedKeyLength("AES");
        if (i >= 256)
            flag = true;
_L2:
        return flag;
        NoSuchAlgorithmException nosuchalgorithmexception;
        nosuchalgorithmexception;
        if (true) goto _L2; else goto _L1
_L1:
    }

    public static String readPemStringFromFile(File file) {
        String s;
        try {
            s = new String(b.e(file), Charset.forName("US-ASCII"));
        }
        catch (IOException ioexception) {
            throw new ImportException((new StringBuilder()).append("Unable to read PEM-encoded data from file: ").append(file.getName()).toString());
        }
        return s;
    }

    public static void writePemStringToFile(File file, String s) {
        try {
            b.a(file, s);
            return;
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            throw new ExportException((new StringBuilder()).append("Unable to write PEM string to file: ").append(file.getName()).toString(), s);
        }
    }
}
