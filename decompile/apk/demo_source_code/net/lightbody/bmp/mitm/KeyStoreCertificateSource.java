// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.mitm;

import java.security.*;
import java.security.cert.X509Certificate;
import net.lightbody.bmp.mitm.exception.CertificateSourceException;

// Referenced classes of package net.lightbody.bmp.mitm:
//            CertificateAndKeySource, CertificateAndKey

public class KeyStoreCertificateSource
    implements CertificateAndKeySource {

    private final KeyStore keyStore;
    private final String keyStorePassword;
    private final String privateKeyAlias;

    public KeyStoreCertificateSource(KeyStore keystore, String s, String s1) {
        if (keystore == null)
            throw new IllegalArgumentException("KeyStore cannot be null");
        if (s == null)
            throw new IllegalArgumentException("Private key alias cannot be null");
        if (s1 == null) {
            throw new IllegalArgumentException("KeyStore password cannot be null");
        } else {
            keyStore = keystore;
            keyStorePassword = s1;
            privateKeyAlias = s;
            return;
        }
    }

    public CertificateAndKey load() {
        Object obj;
        KeyStore keystore = keyStore;
        obj = privateKeyAlias;
        java.security.KeyStore.PasswordProtection passwordprotection = JVM INSTR new #44  <Class java.security.KeyStore$PasswordProtection>;
        passwordprotection.java.security.KeyStore.PasswordProtection(keyStorePassword.toCharArray());
        obj = keystore.getEntry(((String) (obj)), passwordprotection);
        if (obj == null) {
            CertificateSourceException certificatesourceexception;
            StringBuilder stringbuilder1;
            try {
                obj = JVM INSTR new #61  <Class CertificateSourceException>;
                StringBuilder stringbuilder = JVM INSTR new #63  <Class StringBuilder>;
                stringbuilder.StringBuilder();
                ((CertificateSourceException) (obj)).CertificateSourceException(stringbuilder.append("Unable to find entry in keystore with alias: ").append(privateKeyAlias).toString());
                throw obj;
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) { }
            // Misplaced declaration of an exception variable
            catch (Object obj) { }
            throw new CertificateSourceException("Error accessing keyStore", ((Throwable) (obj)));
        }
        break MISSING_BLOCK_LABEL_127;
        obj;
        certificatesourceexception = JVM INSTR new #61  <Class CertificateSourceException>;
        stringbuilder1 = JVM INSTR new #63  <Class StringBuilder>;
        stringbuilder1.StringBuilder();
        certificatesourceexception.CertificateSourceException(stringbuilder1.append("Unable to load private key with alias ").append(privateKeyAlias).append(" from KeyStore. Verify the KeyStore password is correct.").toString(), ((Throwable) (obj)));
        throw certificatesourceexception;
        Object obj1;
        StringBuilder stringbuilder2;
        if (!(obj instanceof java.security.KeyStore.PrivateKeyEntry)) {
            CertificateSourceException certificatesourceexception1 = JVM INSTR new #61  <Class CertificateSourceException>;
            obj = JVM INSTR new #63  <Class StringBuilder>;
            ((StringBuilder) (obj)).StringBuilder();
            certificatesourceexception1.CertificateSourceException(((StringBuilder) (obj)).append("Entry in KeyStore with alias ").append(privateKeyAlias).append(" did not contain a private key entry").toString());
            throw certificatesourceexception1;
        }
        obj = (java.security.KeyStore.PrivateKeyEntry)obj;
        obj1 = ((java.security.KeyStore.PrivateKeyEntry) (obj)).getPrivateKey();
        if (((java.security.KeyStore.PrivateKeyEntry) (obj)).getCertificate() instanceof X509Certificate)
            break MISSING_BLOCK_LABEL_261;
        obj1 = JVM INSTR new #61  <Class CertificateSourceException>;
        stringbuilder2 = JVM INSTR new #63  <Class StringBuilder>;
        stringbuilder2.StringBuilder();
        stringbuilder2 = stringbuilder2.append("Certificate for private key in KeyStore was not an X509Certificate. Private key alias: ").append(privateKeyAlias).append(". Certificate type: ");
        if (((java.security.KeyStore.PrivateKeyEntry) (obj)).getCertificate() == null)
            break MISSING_BLOCK_LABEL_256;
        obj = ((java.security.KeyStore.PrivateKeyEntry) (obj)).getCertificate().getClass().getName();
_L1:
        ((CertificateSourceException) (obj1)).CertificateSourceException(stringbuilder2.append(((String) (obj))).toString());
        throw obj1;
        obj = null;
          goto _L1
        obj = new CertificateAndKey((X509Certificate)((java.security.KeyStore.PrivateKeyEntry) (obj)).getCertificate(), ((java.security.PrivateKey) (obj1)));
        return ((CertificateAndKey) (obj));
    }
}
