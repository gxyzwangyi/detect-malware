// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.mitm;

import com.google.common.a.f;
import com.google.common.collect.o;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.security.KeyStore;
import java.security.cert.X509Certificate;
import java.util.List;
import net.lightbody.bmp.mitm.exception.UncheckedIOException;
import net.lightbody.bmp.mitm.util.TrustUtil;

public class TrustSource {

    private static final TrustSource DEFAULT_TRUST_SOURCE = javaTrustSource().add(builtinTrustSource());
    private final X509Certificate trustedCAs[];

    protected TrustSource() {
        this(TrustUtil.EMPTY_CERTIFICATE_ARRAY);
    }

    protected transient TrustSource(X509Certificate ax509certificate[]) {
        if (ax509certificate == null)
            trustedCAs = TrustUtil.EMPTY_CERTIFICATE_ARRAY;
        else
            trustedCAs = ax509certificate;
    }

    public static TrustSource builtinTrustSource() {
        return new TrustSource(TrustUtil.getBuiltinTrustedCAs());
    }

    public static TrustSource defaultTrustSource() {
        return DEFAULT_TRUST_SOURCE;
    }

    public static TrustSource empty() {
        return new TrustSource();
    }

    public static TrustSource javaTrustSource() {
        return new TrustSource(TrustUtil.getJavaTrustedCAs());
    }

    public TrustSource add(File file) {
        if (file == null)
            throw new IllegalArgumentException("Trusted CA file cannot be null");
        String s;
        try {
            s = f.b(file, Charset.forName("UTF-8"));
        }
        catch (IOException ioexception) {
            throw new UncheckedIOException((new StringBuilder()).append("Unable to read file containing PEM-encoded trusted CAs: ").append(file.getAbsolutePath()).toString(), ioexception);
        }
        return add(s);
    }

    public TrustSource add(String s) {
        if (s == null)
            throw new IllegalArgumentException("PEM-encoded trusted CA String cannot be null");
        else
            return add(TrustUtil.readX509CertificatesFromPem(s));
    }

    public TrustSource add(KeyStore keystore) {
        if (keystore == null)
            throw new IllegalArgumentException("Trust store cannot be null");
        else
            return add((X509Certificate[])TrustUtil.extractTrustedCertificateEntries(keystore).toArray(new X509Certificate[0]));
    }

    public TrustSource add(TrustSource trustsource) {
        if (trustsource == null)
            throw new IllegalArgumentException("TrustSource cannot be null");
        else
            return add(trustsource.getTrustedCAs());
    }

    public transient TrustSource add(X509Certificate ax509certificate[]) {
        TrustSource trustsource = this;
        if (ax509certificate != null)
            if (ax509certificate.length == 0)
                trustsource = this;
            else
                trustsource = new TrustSource((X509Certificate[])o.a(trustedCAs, ax509certificate, java/security/cert/X509Certificate));
        return trustsource;
    }

    public X509Certificate[] getTrustedCAs() {
        return trustedCAs;
    }

}
