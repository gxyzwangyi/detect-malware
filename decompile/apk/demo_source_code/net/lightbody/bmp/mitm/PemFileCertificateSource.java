// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.mitm;

import com.google.common.base.Suppliers;
import com.google.common.base.n;
import java.io.File;
import java.io.StringReader;
import net.lightbody.bmp.mitm.tools.DefaultSecurityProviderTool;
import net.lightbody.bmp.mitm.tools.SecurityProviderTool;
import net.lightbody.bmp.mitm.util.EncryptionUtil;
import org.slf4j.b;
import org.slf4j.c;

// Referenced classes of package net.lightbody.bmp.mitm:
//            CertificateAndKeySource, CertificateAndKey

public class PemFileCertificateSource
    implements CertificateAndKeySource {

    private static final b log = c.a(net/lightbody/bmp/mitm/PemFileCertificateSource);
    private final n certificateAndKey = Suppliers.a(new n() {

        final PemFileCertificateSource this$0;

        public volatile Object get() {
            return get();
        }

        public CertificateAndKey get() {
            return loadCertificateAndKeyFiles();
        }

             {
                this$0 = PemFileCertificateSource.this;
                super();
            }
    }
);
    private final File certificateFile;
    private final File privateKeyFile;
    private final String privateKeyPassword;
    private SecurityProviderTool securityProviderTool;

    public PemFileCertificateSource(File file, File file1, String s) {
        securityProviderTool = new DefaultSecurityProviderTool();
        certificateFile = file;
        privateKeyFile = file1;
        privateKeyPassword = s;
    }

    private CertificateAndKey loadCertificateAndKeyFiles() {
        if (certificateFile == null)
            throw new IllegalArgumentException("PEM root certificate file cannot be null");
        if (privateKeyFile == null)
            throw new IllegalArgumentException("PEM private key file cannot be null");
        if (privateKeyPassword == null)
            log.c("Attempting to load private key from file without password. Private keys should be password-protected.");
        String s = EncryptionUtil.readPemStringFromFile(certificateFile);
        java.security.cert.X509Certificate x509certificate = securityProviderTool.decodePemEncodedCertificate(new StringReader(s));
        s = EncryptionUtil.readPemStringFromFile(privateKeyFile);
        return new CertificateAndKey(x509certificate, securityProviderTool.decodePemEncodedPrivateKey(new StringReader(s), privateKeyPassword));
    }

    public PemFileCertificateSource certificateTool(SecurityProviderTool securityprovidertool) {
        securityProviderTool = securityprovidertool;
        return this;
    }

    public CertificateAndKey load() {
        return (CertificateAndKey)certificateAndKey.get();
    }


}
