// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.mitm.tools;

import java.io.File;
import java.io.IOException;
import java.io.Reader;
import java.io.StringWriter;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.Security;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.net.ssl.KeyManager;
import net.lightbody.bmp.mitm.CertificateAndKey;
import net.lightbody.bmp.mitm.CertificateInfo;
import net.lightbody.bmp.mitm.exception.CertificateCreationException;
import net.lightbody.bmp.mitm.exception.ExportException;
import net.lightbody.bmp.mitm.exception.ImportException;
import net.lightbody.bmp.mitm.util.EncryptionUtil;
import org.bouncycastle.asn1.bd;
import org.bouncycastle.asn1.g;
import org.bouncycastle.asn1.n.a.b;
import org.bouncycastle.asn1.n.d;
import org.bouncycastle.asn1.o.l;
import org.bouncycastle.asn1.o.o;
import org.bouncycastle.asn1.o.p;
import org.bouncycastle.asn1.o.t;
import org.bouncycastle.asn1.o.u;
import org.bouncycastle.asn1.o.x;
import org.bouncycastle.asn1.o.y;
import org.bouncycastle.cert.CertIOException;
import org.bouncycastle.cert.a.a;
import org.bouncycastle.cert.f;
import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;
import org.bouncycastle.cert.jcajce.e;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.openssl.a.c;
import org.bouncycastle.openssl.i;
import org.bouncycastle.operator.OperatorCreationException;

// Referenced classes of package net.lightbody.bmp.mitm.tools:
//            SecurityProviderTool

public class BouncyCastleSecurityProviderTool
    implements SecurityProviderTool {

    private static final int CERTIFICATE_SERIAL_NUMBER_SIZE = 160;

    public BouncyCastleSecurityProviderTool() {
    }

    private static X509Certificate convertToJcaCertificate(org.bouncycastle.cert.d d1) {
        try {
            JcaX509CertificateConverter jcax509certificateconverter = JVM INSTR new #30  <Class JcaX509CertificateConverter>;
            jcax509certificateconverter.JcaX509CertificateConverter();
            d1 = jcax509certificateconverter.a(d1);
        }
        // Misplaced declaration of an exception variable
        catch (org.bouncycastle.cert.d d1) {
            throw new CertificateCreationException("Unable to convert X590CertificateHolder to JCA X590Certificate", d1);
        }
        return d1;
    }

    private static x createSubjectKeyIdentifier(Key key) {
        key = y.a(key.getEncoded());
        return (new a()).a(key);
    }

    private static org.bouncycastle.asn1.n.c createX500NameForCertificate(CertificateInfo certificateinfo) {
        d d1 = new d(b.J);
        if (certificateinfo.getCommonName() != null)
            d1.a(b.e, certificateinfo.getCommonName());
        if (certificateinfo.getOrganization() != null)
            d1.a(b.b, certificateinfo.getOrganization());
        if (certificateinfo.getOrganizationalUnit() != null)
            d1.a(b.c, certificateinfo.getOrganizationalUnit());
        if (certificateinfo.getEmail() != null)
            d1.a(b.G, certificateinfo.getEmail());
        if (certificateinfo.getLocality() != null)
            d1.a(b.i, certificateinfo.getLocality());
        if (certificateinfo.getState() != null)
            d1.a(b.j, certificateinfo.getState());
        if (certificateinfo.getCountryCode() != null)
            d1.a(b.a, certificateinfo.getCountryCode());
        return d1.a();
    }

    private static String encodeObjectAsPemString(Object obj, org.bouncycastle.openssl.f f1) {
        StringWriter stringwriter = new StringWriter();
        try {
            c c1 = JVM INSTR new #133 <Class c>;
            c1.c(stringwriter);
            c1.a(obj, f1);
            c1.flush();
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            throw new ExportException("Unable to generate PEM string representing object", ((Throwable) (obj)));
        }
        return stringwriter.toString();
    }

    private static org.bouncycastle.operator.a getCertificateSigner(PrivateKey privatekey, String s) {
        try {
            org.bouncycastle.operator.a.a a1 = JVM INSTR new #156 <Class org.bouncycastle.operator.a.a>;
            a1.org.bouncycastle.operator.a.a(s);
            privatekey = a1.a(privatekey);
        }
        // Misplaced declaration of an exception variable
        catch (PrivateKey privatekey) {
            throw new CertificateCreationException((new StringBuilder()).append("Unable to create ContentSigner using signature algorithm: ").append(s).toString(), privatekey);
        }
        return privatekey;
    }

    private static p getDomainNameSANsAsASN1Encodable(List list) {
        ArrayList arraylist = new ArrayList(list.size());
        Iterator iterator = list.iterator();
        while (iterator.hasNext())  {
            list = (String)iterator.next();
            byte byte0;
            if (com.google.common.net.a.b(list))
                byte0 = 7;
            else
                byte0 = 2;
            arraylist.add(new o(byte0, list));
        }
        return new p((o[])arraylist.toArray(new o[arraylist.size()]));
    }

    public CertificateAndKey createCARootCertificate(CertificateInfo certificateinfo, KeyPair keypair, String s) {
        if (certificateinfo.getNotBefore() == null)
            throw new IllegalArgumentException("Must specify Not Before for server certificate");
        if (certificateinfo.getNotAfter() == null)
            throw new IllegalArgumentException("Must specify Not After for server certificate");
        Object obj = createX500NameForCertificate(certificateinfo);
        Object obj1 = EncryptionUtil.getRandomBigInteger(160);
        java.security.PublicKey publickey = keypair.getPublic();
        s = EncryptionUtil.getSignatureAlgorithm(s, keypair.getPrivate());
        s = getCertificateSigner(keypair.getPrivate(), s);
        g g1 = new g();
        g1.a(t.b);
        g1.a(t.c);
        g1.a(t.a);
        try {
            e e1 = JVM INSTR new #287 <Class e>;
            e1.e(((org.bouncycastle.asn1.n.c) (obj)), ((java.math.BigInteger) (obj1)), certificateinfo.getNotBefore(), certificateinfo.getNotAfter(), ((org.bouncycastle.asn1.n.c) (obj)), publickey);
            obj = e1.a(l.b, false, createSubjectKeyIdentifier(publickey));
            certificateinfo = l.g;
            obj1 = JVM INSTR new #303 <Class org.bouncycastle.asn1.o.g>;
            ((org.bouncycastle.asn1.o.g) (obj1)).org.bouncycastle.asn1.o.g(true);
            obj1 = ((f) (obj)).a(certificateinfo, true, ((org.bouncycastle.asn1.f) (obj1)));
            obj = l.c;
            certificateinfo = JVM INSTR new #312 <Class u>;
            certificateinfo.u(182);
            obj1 = ((f) (obj1)).a(((org.bouncycastle.asn1.n) (obj)), false, certificateinfo);
            obj = l.u;
            certificateinfo = JVM INSTR new #318 <Class bd>;
            certificateinfo.bd(g1);
            certificateinfo = ((f) (obj1)).a(((org.bouncycastle.asn1.n) (obj)), false, certificateinfo).a(s);
        }
        // Misplaced declaration of an exception variable
        catch (CertificateInfo certificateinfo) {
            throw new CertificateCreationException("Error creating root certificate", certificateinfo);
        }
        return new CertificateAndKey(convertToJcaCertificate(certificateinfo), keypair.getPrivate());
    }

    public KeyStore createRootCertificateKeyStore(String s, CertificateAndKey certificateandkey, String s1, String s2) {
        throw new UnsupportedOperationException("BouncyCastle implementation does not implement this method");
    }

    public CertificateAndKey createServerCertificate(CertificateInfo certificateinfo, X509Certificate x509certificate, PrivateKey privatekey, KeyPair keypair, String s) {
        if (certificateinfo.getCommonName() == null)
            throw new IllegalArgumentException("Must specify CN for server certificate");
        if (certificateinfo.getNotBefore() == null)
            throw new IllegalArgumentException("Must specify Not Before for server certificate");
        if (certificateinfo.getNotAfter() == null)
            throw new IllegalArgumentException("Must specify Not After for server certificate");
        org.bouncycastle.asn1.n.c c1 = createX500NameForCertificate(certificateinfo);
        privatekey = getCertificateSigner(privatekey, EncryptionUtil.getSignatureAlgorithm(s, privatekey));
        s = EncryptionUtil.getRandomBigInteger(160);
        try {
            e e1 = JVM INSTR new #287 <Class e>;
            e1.e(x509certificate, s, certificateinfo.getNotBefore(), certificateinfo.getNotAfter(), c1, keypair.getPublic());
            x509certificate = e1.a(l.e, false, getDomainNameSANsAsASN1Encodable(certificateinfo.getSubjectAlternativeNames())).a(l.b, false, createSubjectKeyIdentifier(keypair.getPublic()));
            s = l.g;
            certificateinfo = JVM INSTR new #303 <Class org.bouncycastle.asn1.o.g>;
            certificateinfo.org.bouncycastle.asn1.o.g(false);
            certificateinfo = x509certificate.a(s, false, certificateinfo).a(privatekey);
        }
        // Misplaced declaration of an exception variable
        catch (CertificateInfo certificateinfo) {
            throw new CertificateCreationException("Error creating new server certificate", certificateinfo);
        }
        return new CertificateAndKey(convertToJcaCertificate(certificateinfo), keypair.getPrivate());
    }

    public KeyStore createServerKeyStore(String s, CertificateAndKey certificateandkey, X509Certificate x509certificate, String s1, String s2) {
        throw new UnsupportedOperationException("BouncyCastle implementation does not implement this method");
    }

    public X509Certificate decodePemEncodedCertificate(Reader reader) {
        throw new UnsupportedOperationException("BouncyCastle implementation does not implement this method");
    }

    public PrivateKey decodePemEncodedPrivateKey(Reader reader, String s) {
        i j = JVM INSTR new #364 <Class i>;
        j.i(reader);
        reader = ((Reader) (j.a()));
        if (!(reader instanceof org.bouncycastle.openssl.e)) goto _L2; else goto _L1
_L1:
        if (s == null)
            try {
                reader = JVM INSTR new #373 <Class ImportException>;
                reader.ImportException("Unable to import private key. Key is encrypted, but no password was provided.");
                throw reader;
            }
            // Misplaced declaration of an exception variable
            catch (Reader reader) {
                throw new ImportException("Unable to read PEM-encoded PrivateKey", reader);
            }
        org.bouncycastle.openssl.a.d d1 = JVM INSTR new #381 <Class org.bouncycastle.openssl.a.d>;
        d1.org.bouncycastle.openssl.a.d();
        s = d1.a(s.toCharArray());
        reader = ((org.bouncycastle.openssl.e)reader).a(s).a();
_L4:
        s = JVM INSTR new #399 <Class org.bouncycastle.openssl.a.b>;
        s.org.bouncycastle.openssl.a.b();
        return s.a(reader);
_L2:
        reader = ((org.bouncycastle.openssl.g)reader).a();
        if (true) goto _L4; else goto _L3
_L3:
    }

    public String encodeCertificateAsPem(Certificate certificate) {
        return encodeObjectAsPemString(certificate, null);
    }

    public String encodePrivateKeyAsPem(PrivateKey privatekey, String s, String s1) {
        if (s == null)
            throw new IllegalArgumentException("You must specify a password when serializing a private key");
        else
            return encodeObjectAsPemString(privatekey, (new org.bouncycastle.openssl.a.e(s1)).a(s.toCharArray()));
    }

    public KeyManager[] getKeyManagers(KeyStore keystore, String s) {
        return new KeyManager[0];
    }

    public KeyStore loadKeyStore(File file, String s, String s1) {
        throw new UnsupportedOperationException("BouncyCastle implementation does not implement this method");
    }

    public void saveKeyStore(File file, KeyStore keystore, String s) {
        throw new UnsupportedOperationException("BouncyCastle implementation does not implement this method");
    }

    static  {
        Security.addProvider(new BouncyCastleProvider());
    }
}
