// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package net.lightbody.bmp.mitm.trustmanager;

import cn.darkal.networkdiagnosis.d.f;
import java.net.Socket;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.X509Certificate;
import javax.net.ssl.SSLEngine;
import javax.net.ssl.TrustManagerFactory;
import org.slf4j.b;
import org.slf4j.c;

public class InsecureExtendedTrustManager extends f {

    protected static final f DEFAULT_EXTENDED_TRUST_MANAGER = getDefaultExtendedTrustManager();
    private static final f NOOP_EXTENDED_TRUST_MANAGER = new f() {

        public void checkClientTrusted(X509Certificate ax509certificate[], String s) {
        }

        public void checkClientTrusted(X509Certificate ax509certificate[], String s, Socket socket) {
        }

        public void checkClientTrusted(X509Certificate ax509certificate[], String s, SSLEngine sslengine) {
        }

        public void checkServerTrusted(X509Certificate ax509certificate[], String s) {
        }

        public void checkServerTrusted(X509Certificate ax509certificate[], String s, Socket socket) {
        }

        public void checkServerTrusted(X509Certificate ax509certificate[], String s, SSLEngine sslengine) {
        }

        public X509Certificate[] getAcceptedIssuers() {
            return io.netty.util.internal.c.o;
        }

    }
;
    private static final b log = c.a(net/lightbody/bmp/mitm/trustmanager/InsecureExtendedTrustManager);

    public InsecureExtendedTrustManager() {
    }

    private static f getDefaultExtendedTrustManager() {
        Object obj;
        obj = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        ((TrustManagerFactory) (obj)).init((KeyStore)null);
        int i;
        int j;
        javax.net.ssl.TrustManager atrustmanager[];
        atrustmanager = ((TrustManagerFactory) (obj)).getTrustManagers();
        j = atrustmanager.length;
        i = 0;
_L6:
        if (i >= j) goto _L2; else goto _L1
_L1:
        obj = atrustmanager[i];
        if (!(obj instanceof f)) goto _L4; else goto _L3
_L3:
        obj = (f)obj;
_L5:
        return ((f) (obj));
        obj;
_L7:
        log.a("Unable to initialize default TrustManagerFactory. Using no-op X509ExtendedTrustManager.", ((Throwable) (obj)));
        obj = NOOP_EXTENDED_TRUST_MANAGER;
          goto _L5
_L4:
        i++;
          goto _L6
_L2:
        log.a("No default X509ExtendedTrustManager found. Using no-op.");
        obj = NOOP_EXTENDED_TRUST_MANAGER;
          goto _L5
        obj;
          goto _L7
    }

    public void checkClientTrusted(X509Certificate ax509certificate[], String s) {
        DEFAULT_EXTENDED_TRUST_MANAGER.checkClientTrusted(ax509certificate, s);
_L1:
        return;
        s;
        log.b("Accepting an untrusted client certificate: {}", ax509certificate[0].getSubjectDN(), s);
          goto _L1
    }

    public void checkClientTrusted(X509Certificate ax509certificate[], String s, Socket socket) {
        DEFAULT_EXTENDED_TRUST_MANAGER.checkClientTrusted(ax509certificate, s, socket);
_L1:
        return;
        s;
        log.b("Accepting an untrusted client certificate: {}", ax509certificate[0].getSubjectDN(), s);
          goto _L1
    }

    public void checkClientTrusted(X509Certificate ax509certificate[], String s, SSLEngine sslengine) {
        DEFAULT_EXTENDED_TRUST_MANAGER.checkClientTrusted(ax509certificate, s, sslengine);
_L1:
        return;
        s;
        log.b("Accepting an untrusted client certificate: {}", ax509certificate[0].getSubjectDN(), s);
          goto _L1
    }

    public void checkServerTrusted(X509Certificate ax509certificate[], String s) {
        DEFAULT_EXTENDED_TRUST_MANAGER.checkServerTrusted(ax509certificate, s);
_L1:
        return;
        s;
        log.b("Accepting an untrusted server certificate: {}", ax509certificate[0].getSubjectDN(), s);
          goto _L1
    }

    public void checkServerTrusted(X509Certificate ax509certificate[], String s, Socket socket) {
        DEFAULT_EXTENDED_TRUST_MANAGER.checkServerTrusted(ax509certificate, s, socket);
_L1:
        return;
        s;
        log.b("Accepting an untrusted server certificate: {}", ax509certificate[0].getSubjectDN(), s);
          goto _L1
    }

    public void checkServerTrusted(X509Certificate ax509certificate[], String s, SSLEngine sslengine) {
        DEFAULT_EXTENDED_TRUST_MANAGER.checkServerTrusted(ax509certificate, s, sslengine);
_L1:
        return;
        s;
        log.b("Accepting an untrusted server certificate: {}", ax509certificate[0].getSubjectDN(), s);
          goto _L1
    }

    public X509Certificate[] getAcceptedIssuers() {
        return io.netty.util.internal.c.o;
    }

}
