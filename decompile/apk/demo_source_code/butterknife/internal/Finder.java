// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package butterknife.internal;

import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.content.res.Resources;
import android.view.View;

public abstract class Finder extends Enum {

    private static final Finder $VALUES[];
    public static final Finder ACTIVITY;
    public static final Finder DIALOG;
    public static final Finder VIEW;

    private Finder(String s, int i) {
        super(s, i);
    }


    public static Finder valueOf(String s) {
        return (Finder)Enum.valueOf(butterknife/internal/Finder, s);
    }

    public static Finder[] values() {
        return (Finder[])$VALUES.clone();
    }

    public final Object castParam(Object obj, String s, int i, String s1, int j) {
        return obj;
    }

    public final Object castView(View view, int i, String s, Class class1) {
        try {
            class1 = ((Class) (class1.cast(view)));
        }
        // Misplaced declaration of an exception variable
        catch (Class class1) {
            view = getResourceEntryName(view, i);
            throw new IllegalStateException((new StringBuilder()).append("View '").append(view).append("' with ID ").append(i).append(" for ").append(s).append(" was of the wrong type. See cause for more info.").toString(), class1);
        }
        return class1;
    }

    public abstract View findOptionalView(Object obj, int i);

    public final Object findOptionalViewAsType(Object obj, int i, String s, Class class1) {
        return castView(findOptionalView(obj, i), i, s, class1);
    }

    public final View findRequiredView(Object obj, int i, String s) {
        View view = findOptionalView(obj, i);
        if (view != null) {
            return view;
        } else {
            obj = getResourceEntryName(obj, i);
            throw new IllegalStateException((new StringBuilder()).append("Required view '").append(((String) (obj))).append("' with ID ").append(i).append(" for ").append(s).append(" was not found. If this view is optional add '@Nullable' (fields) or '@Optional' (methods) annotation.").toString());
        }
    }

    public final Object findRequiredViewAsType(Object obj, int i, String s, Class class1) {
        return castView(findRequiredView(obj, i, s), i, s, class1);
    }

    public abstract Context getContext(Object obj);

    protected String getResourceEntryName(Object obj, int i) {
        return getContext(obj).getResources().getResourceEntryName(i);
    }

    static  {
        VIEW = new Finder("VIEW", 0) {

            public View findOptionalView(Object obj, int i) {
                return ((View)obj).findViewById(i);
            }

            public Context getContext(Object obj) {
                return ((View)obj).getContext();
            }

            protected String getResourceEntryName(Object obj, int i) {
                if (((View)obj).isInEditMode())
                    obj = "<unavailable while editing>";
                else
                    obj = getResourceEntryName(obj, i);
                return ((String) (obj));
            }

        }
;
        ACTIVITY = new Finder("ACTIVITY", 1) {

            public View findOptionalView(Object obj, int i) {
                return ((Activity)obj).findViewById(i);
            }

            public Context getContext(Object obj) {
                return (Activity)obj;
            }

        }
;
        DIALOG = new Finder("DIALOG", 2) {

            public View findOptionalView(Object obj, int i) {
                return ((Dialog)obj).findViewById(i);
            }

            public Context getContext(Object obj) {
                return ((Dialog)obj).getContext();
            }

        }
;
        $VALUES = (new Finder[] {
            VIEW, ACTIVITY, DIALOG
        });
    }
}
