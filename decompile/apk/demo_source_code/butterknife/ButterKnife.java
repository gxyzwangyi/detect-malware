// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package butterknife;

import android.app.Activity;
import android.app.Dialog;
import android.util.Log;
import android.util.Property;
import android.view.View;
import butterknife.internal.Finder;
import butterknife.internal.ViewBinder;
import java.util.*;

// Referenced classes of package butterknife:
//            Unbinder

public final class ButterKnife {
    public static interface Action {

        public abstract void apply(View view, int i);
    }

    public static interface Setter {

        public abstract void set(View view, Object obj, int i);
    }


    static final Map BINDERS = new LinkedHashMap();
    static final ViewBinder NOP_VIEW_BINDER = new ViewBinder() {

        public Unbinder bind(Finder finder, Object obj, Object obj1) {
            return Unbinder.EMPTY;
        }

    }
;
    private static final String TAG = "ButterKnife";
    private static boolean debug = false;

    private ButterKnife() {
        throw new AssertionError("No instances.");
    }

    public static void apply(View view, Property property, Object obj) {
        property.set(view, obj);
    }

    public static void apply(View view, Action action) {
        action.apply(view, 0);
    }

    public static void apply(View view, Setter setter, Object obj) {
        setter.set(view, obj, 0);
    }

    public static transient void apply(View view, Action aaction[]) {
        int j = aaction.length;
        for (int i = 0; i < j; i++)
            aaction[i].apply(view, 0);

    }

    public static void apply(List list, Property property, Object obj) {
        int i = 0;
        for (int j = list.size(); i < j; i++)
            property.set(list.get(i), obj);

    }

    public static void apply(List list, Action action) {
        int j = list.size();
        for (int i = 0; i < j; i++)
            action.apply((View)list.get(i), i);

    }

    public static void apply(List list, Setter setter, Object obj) {
        int j = list.size();
        for (int i = 0; i < j; i++)
            setter.set((View)list.get(i), obj, i);

    }

    public static transient void apply(List list, Action aaction[]) {
        int k = list.size();
        for (int i = 0; i < k; i++) {
            int l = aaction.length;
            for (int j = 0; j < l; j++)
                aaction[j].apply((View)list.get(i), i);

        }

    }

    public static void apply(View aview[], Property property, Object obj) {
        int i = 0;
        for (int j = aview.length; i < j; i++)
            property.set(aview[i], obj);

    }

    public static void apply(View aview[], Action action) {
        int i = 0;
        for (int j = aview.length; i < j; i++)
            action.apply(aview[i], i);

    }

    public static void apply(View aview[], Setter setter, Object obj) {
        int i = 0;
        for (int j = aview.length; i < j; i++)
            setter.set(aview[i], obj, i);

    }

    public static transient void apply(View aview[], Action aaction[]) {
        int k = aview.length;
        for (int i = 0; i < k; i++) {
            int l = aaction.length;
            for (int j = 0; j < l; j++)
                aaction[j].apply(aview[i], i);

        }

    }

    public static Unbinder bind(Activity activity) {
        return getViewBinder(activity).bind(Finder.ACTIVITY, activity, activity);
    }

    public static Unbinder bind(Dialog dialog) {
        return getViewBinder(dialog).bind(Finder.DIALOG, dialog, dialog);
    }

    public static Unbinder bind(View view) {
        return getViewBinder(view).bind(Finder.VIEW, view, view);
    }

    public static Unbinder bind(Object obj, Activity activity) {
        return getViewBinder(obj).bind(Finder.ACTIVITY, obj, activity);
    }

    public static Unbinder bind(Object obj, Dialog dialog) {
        return getViewBinder(obj).bind(Finder.DIALOG, obj, dialog);
    }

    public static Unbinder bind(Object obj, View view) {
        return getViewBinder(obj).bind(Finder.VIEW, obj, view);
    }

    public static View findById(Activity activity, int i) {
        return activity.findViewById(i);
    }

    public static View findById(Dialog dialog, int i) {
        return dialog.findViewById(i);
    }

    public static View findById(View view, int i) {
        return view.findViewById(i);
    }

    private static ViewBinder findViewBinderForClass(Class class1) {
        ViewBinder viewbinder = (ViewBinder)BINDERS.get(class1);
        if (viewbinder == null) goto _L2; else goto _L1
_L1:
        Object obj;
        obj = viewbinder;
        if (debug) {
            Log.d("ButterKnife", "HIT: Cached in view binder map.");
            obj = viewbinder;
        }
_L4:
        return ((ViewBinder) (obj));
_L2:
        String s;
        s = class1.getName();
        if (s.startsWith("android.") || s.startsWith("java.")) {
            if (debug)
                Log.d("ButterKnife", "MISS: Reached framework class. Abandoning search.");
            obj = NOP_VIEW_BINDER;
            continue; /* Loop/switch isn't completed */
        }
        obj = JVM INSTR new #195 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        viewbinder = (ViewBinder)Class.forName(((StringBuilder) (obj)).append(s).append("_ViewBinder").toString()).newInstance();
        obj = viewbinder;
        if (!debug)
            break MISSING_BLOCK_LABEL_130;
        Log.d("ButterKnife", "HIT: Loaded view binder class.");
        obj = viewbinder;
_L5:
        BINDERS.put(class1, obj);
        if (true) goto _L4; else goto _L3
_L3:
        ClassNotFoundException classnotfoundexception;
        classnotfoundexception;
        if (debug)
            Log.d("ButterKnife", (new StringBuilder()).append("Not found. Trying superclass ").append(class1.getSuperclass().getName()).toString());
        classnotfoundexception = findViewBinderForClass(class1.getSuperclass());
          goto _L5
        class1;
        throw new RuntimeException((new StringBuilder()).append("Unable to create view binder for ").append(s).toString(), class1);
        class1;
        throw new RuntimeException((new StringBuilder()).append("Unable to create view binder for ").append(s).toString(), class1);
    }

    static ViewBinder getViewBinder(Object obj) {
        obj = obj.getClass();
        if (debug)
            Log.d("ButterKnife", (new StringBuilder()).append("Looking up view binder for ").append(((Class) (obj)).getName()).toString());
        return findViewBinderForClass(((Class) (obj)));
    }

    public static void setDebug(boolean flag) {
        debug = flag;
    }

}
