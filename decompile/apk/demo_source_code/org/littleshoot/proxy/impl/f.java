// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.littleshoot.proxy.impl;

import io.netty.buffer.ak;
import io.netty.buffer.h;
import io.netty.channel.ar;
import io.netty.channel.d;
import io.netty.channel.e;
import io.netty.channel.g;
import io.netty.channel.k;
import io.netty.channel.m;
import io.netty.channel.s;
import io.netty.handler.codec.http.ac;
import io.netty.handler.codec.http.n;
import io.netty.handler.codec.http.p;
import io.netty.handler.codec.http.t;
import io.netty.handler.codec.http.w;
import io.netty.handler.codec.http.x;
import io.netty.handler.codec.http.z;
import io.netty.handler.ssl.aj;
import io.netty.handler.timeout.a;
import io.netty.util.concurrent.y;
import io.netty.util.i;
import javax.net.ssl.SSLEngine;

// Referenced classes of package org.littleshoot.proxy.impl:
//            g, ConnectionState, j, e, 
//            d

abstract class org.littleshoot.proxy.impl.f extends ar {
    protected abstract class a extends m {

        final org.littleshoot.proxy.impl.f b;

        protected abstract void a(int i1);

        public void a(k k1, Object obj) {
            if (obj instanceof h)
                a(((h)obj).f());
            super.a(k1, obj);
_L2:
            return;
            Object obj1;
            obj1;
            b.b.b("Unable to record bytesRead", ((Throwable) (obj1)));
            super.a(k1, obj);
            if (true) goto _L2; else goto _L1
_L1:
            obj1;
            super.a(k1, obj);
            throw obj1;
        }

        protected a() {
            b = org.littleshoot.proxy.impl.f.this;
            super();
        }
    }

    protected abstract class b extends s {

        final org.littleshoot.proxy.impl.f b;

        protected abstract void a(int i1);

        public void a(k k1, Object obj, io.netty.channel.w w1) {
            if (obj instanceof h)
                a(((h)obj).f());
            super.a(k1, obj, w1);
_L2:
            return;
            Object obj1;
            obj1;
            b.b.b("Unable to record bytesRead", ((Throwable) (obj1)));
            super.a(k1, obj, w1);
            if (true) goto _L2; else goto _L1
_L1:
            obj1;
            super.a(k1, obj, w1);
            throw obj1;
        }

        protected b() {
            b = org.littleshoot.proxy.impl.f.this;
            super();
        }
    }

    protected abstract class c extends m {

        final org.littleshoot.proxy.impl.f b;

        public void a(k k1, Object obj) {
            if (obj instanceof z)
                a((z)obj);
            super.a(k1, obj);
_L2:
            return;
            Object obj1;
            obj1;
            b.b.b("Unable to record bytesRead", ((Throwable) (obj1)));
            super.a(k1, obj);
            if (true) goto _L2; else goto _L1
_L1:
            obj1;
            super.a(k1, obj);
            throw obj1;
        }

        protected abstract void a(z z1);

        protected c() {
            b = org.littleshoot.proxy.impl.f.this;
            super();
        }
    }

    protected abstract class d extends s {

        final org.littleshoot.proxy.impl.f a;

        public void a(k k1, Object obj, io.netty.channel.w w1) {
            z z1 = null;
            if (obj instanceof z)
                z1 = (z)obj;
            if (z1 != null)
                a(z1);
            super.a(k1, obj, w1);
            if (z1 != null)
                b(z1);
            if (obj instanceof n)
                a((n)obj);
        }

        protected abstract void a(n n1);

        protected abstract void a(z z1);

        protected abstract void b(z z1);

        protected d() {
            a = org.littleshoot.proxy.impl.f.this;
            super();
        }
    }

    protected abstract class e extends m {

        final org.littleshoot.proxy.impl.f a;

        public void a(k k1, Object obj) {
            if (obj instanceof ac)
                a((ac)obj);
            super.a(k1, obj);
_L2:
            return;
            Object obj1;
            obj1;
            a.b.b("Unable to record bytesRead", ((Throwable) (obj1)));
            super.a(k1, obj);
            if (true) goto _L2; else goto _L1
_L1:
            obj1;
            super.a(k1, obj);
            throw obj1;
        }

        protected abstract void a(ac ac1);

        protected e() {
            a = org.littleshoot.proxy.impl.f.this;
            super();
        }
    }

    protected abstract class f extends s {

        final org.littleshoot.proxy.impl.f b;

        public void a(k k1, Object obj, io.netty.channel.w w1) {
            if (obj instanceof ac)
                a((ac)obj);
            super.a(k1, obj, w1);
_L2:
            return;
            Object obj1;
            obj1;
            b.b.b("Error while invoking responseWritten callback", ((Throwable) (obj1)));
            super.a(k1, obj, w1);
            if (true) goto _L2; else goto _L1
_L1:
            obj1;
            super.a(k1, obj, w1);
            throw obj1;
        }

        protected abstract void a(ac ac1);

        protected f() {
            b = org.littleshoot.proxy.impl.f.this;
            super();
        }
    }


    private volatile ConnectionState a;
    protected final org.littleshoot.proxy.impl.g b = new org.littleshoot.proxy.impl.g(this);
    protected final org.littleshoot.proxy.impl.e c;
    protected final boolean d;
    protected volatile k e;
    protected volatile io.netty.channel.d g;
    protected volatile long h;
    protected volatile SSLEngine i;
    protected org.littleshoot.proxy.impl.d j;
    private volatile boolean k;

    protected org.littleshoot.proxy.impl.f(ConnectionState connectionstate, org.littleshoot.proxy.impl.e e1, boolean flag) {
        k = false;
        h = 0L;
        j = new org.littleshoot.proxy.impl.d(this, ConnectionState.c) {

            final org.littleshoot.proxy.impl.f a;

            boolean a() {
                return true;
            }

            protected io.netty.util.concurrent.n b() {
                Object obj;
                try {
                    obj = a.e.b();
                    if (((io.netty.channel.t) (obj)).b("encoder") != null)
                        ((io.netty.channel.t) (obj)).a("encoder");
                    if (((io.netty.channel.t) (obj)).b("responseWrittenMonitor") != null)
                        ((io.netty.channel.t) (obj)).a("responseWrittenMonitor");
                    if (((io.netty.channel.t) (obj)).b("decoder") != null)
                        ((io.netty.channel.t) (obj)).a("decoder");
                    if (((io.netty.channel.t) (obj)).b("requestReadMonitor") != null)
                        ((io.netty.channel.t) (obj)).a("requestReadMonitor");
                    org.littleshoot.proxy.impl.f.a(a, true);
                    obj = a.g.m();
                }
                catch (Throwable throwable) {
                    throwable = a.g.a(throwable);
                }
                return ((io.netty.util.concurrent.n) (obj));
            }

             {
                a = org.littleshoot.proxy.impl.f.this;
                super(f2, connectionstate);
            }
        }
;
        b(connectionstate);
        c = e1;
        d = flag;
    }

    private void a(y y) {
        g.i().a(new io.netty.util.concurrent.p(y) {

            final y a;
            final org.littleshoot.proxy.impl.f b;

            public void a(io.netty.util.concurrent.n n1) {
                if (n1.g_())
                    a.a(null);
                else
                    a.c(n1.j());
            }

             {
                b = org.littleshoot.proxy.impl.f.this;
                a = y1;
                super();
            }
        }
);
    }

    static void a(org.littleshoot.proxy.impl.f f1, y y) {
        f1.a(y);
    }

    static boolean a(org.littleshoot.proxy.impl.f f1, boolean flag) {
        f1.k = flag;
        return flag;
    }

    private void c(w w1) {
        ConnectionState connectionstate = o();
        static class _cls5 {

            static final int a[];

            static  {
                a = new int[ConnectionState.values().length];
                NoSuchFieldError nosuchfielderror;
                try {
                    a[ConnectionState.f.ordinal()] = 1;
                }
                catch (NoSuchFieldError nosuchfielderror8) { }
                try {
                    a[org.littleshoot.proxy.impl.ConnectionState.g.ordinal()] = 2;
                }
                catch (NoSuchFieldError nosuchfielderror7) { }
                try {
                    a[org.littleshoot.proxy.impl.ConnectionState.e.ordinal()] = 3;
                }
                catch (NoSuchFieldError nosuchfielderror6) { }
                try {
                    a[org.littleshoot.proxy.impl.ConnectionState.a.ordinal()] = 4;
                }
                catch (NoSuchFieldError nosuchfielderror5) { }
                try {
                    a[ConnectionState.c.ordinal()] = 5;
                }
                catch (NoSuchFieldError nosuchfielderror4) { }
                try {
                    a[org.littleshoot.proxy.impl.ConnectionState.d.ordinal()] = 6;
                }
                catch (NoSuchFieldError nosuchfielderror3) { }
                try {
                    a[ConnectionState.b.ordinal()] = 7;
                }
                catch (NoSuchFieldError nosuchfielderror2) { }
                try {
                    a[org.littleshoot.proxy.impl.ConnectionState.h.ordinal()] = 8;
                }
                catch (NoSuchFieldError nosuchfielderror1) { }
                a[org.littleshoot.proxy.impl.ConnectionState.i.ordinal()] = 9;
_L2:
                return;
                nosuchfielderror;
                if (true) goto _L2; else goto _L1
_L1:
            }
        }

        org.littleshoot.proxy.impl._cls5.a[o().ordinal()];
        JVM INSTR tableswitch 1 9: default 68
    //                   1 74
    //                   2 110
    //                   3 141
    //                   4 157
    //                   5 173
    //                   6 189
    //                   7 205
    //                   8 228
    //                   9 228;
           goto _L1 _L2 _L3 _L4 _L5 _L6 _L7 _L8 _L9 _L9
_L1:
        b(connectionstate);
        return;
_L2:
        if (w1 instanceof t)
            connectionstate = a(w1);
        else
            b.c("Dropping message because HTTP object was not an HttpMessage. HTTP object may be orphaned content from a short-circuited response. Message: {}", new Object[] {
                w1
            });
        continue; /* Loop/switch isn't completed */
_L3:
        w1 = (n)w1;
        a(w1);
        if (org.littleshoot.proxy.impl.j.a(w1))
            connectionstate = ConnectionState.f;
        else
            connectionstate = org.littleshoot.proxy.impl.ConnectionState.g;
        continue; /* Loop/switch isn't completed */
_L4:
        if (w1 instanceof z)
            connectionstate = a(w1);
        continue; /* Loop/switch isn't completed */
_L5:
        b.a("Attempted to read from connection that's in the process of connecting.  This shouldn't happen.", new Object[0]);
        continue; /* Loop/switch isn't completed */
_L6:
        b.c("Attempted to read from connection that's in the process of negotiating an HTTP CONNECT.  This is probably the LastHttpContent of a chunked CONNECT.", new Object[0]);
        continue; /* Loop/switch isn't completed */
_L7:
        b.a("AWAITING_CONNECT_OK should have been handled by ProxyToServerConnection.read()", new Object[0]);
        continue; /* Loop/switch isn't completed */
_L8:
        b.a("Attempted to read from connection that's in the process of handshaking.  This shouldn't happen.", new Object[] {
            g
        });
        continue; /* Loop/switch isn't completed */
_L9:
        b.b("Ignoring message since the connection is closed or about to close", new Object[0]);
        if (true) goto _L1; else goto _L10
_L10:
    }

    protected io.netty.util.concurrent.n a(io.netty.channel.t t1, SSLEngine sslengine, boolean flag) {
        b.c("Enabling encryption with SSLEngine: {}", new Object[] {
            sslengine
        });
        i = sslengine;
        sslengine.setUseClientMode(d);
        sslengine.setNeedClientAuth(flag);
        if (g != null)
            g.E().a(true);
        sslengine = new aj(sslengine);
        if (t1.b("ssl") == null)
            t1.a("ssl", sslengine);
        else
            t1.a("ssl", "sslWithServer", sslengine);
        return sslengine.d();
    }

    protected io.netty.util.concurrent.n a(SSLEngine sslengine, boolean flag) {
        return a(e.b(), sslengine, flag);
    }

    protected abstract ConnectionState a(w w1);

    protected org.littleshoot.proxy.impl.d a(SSLEngine sslengine) {
        return new org.littleshoot.proxy.impl.d(this, ConnectionState.b, sslengine) {

            final SSLEngine a;
            final org.littleshoot.proxy.impl.f b;

            protected io.netty.util.concurrent.n b() {
                org.littleshoot.proxy.impl.f f1 = b;
                SSLEngine sslengine1 = a;
                boolean flag;
                if (!b.d)
                    flag = true;
                else
                    flag = false;
                return f1.a(sslengine1, flag);
            }

            boolean e() {
                return false;
            }

             {
                b = org.littleshoot.proxy.impl.f.this;
                a = sslengine;
                super(f2, connectionstate);
            }
        }
;
    }

    protected abstract void a(h h1);

    public final void a(k k1, Throwable throwable) {
        a(throwable);
    }

    protected void a(io.netty.channel.t t1, int i1) {
        t1.b("inflater", new p());
        t1.b("aggregator", new x(i1));
    }

    protected abstract void a(n n1);

    protected void a(Throwable throwable) {
    }

    protected boolean a(ConnectionState connectionstate) {
        boolean flag;
        if (a == connectionstate)
            flag = true;
        else
            flag = false;
        return flag;
    }

    protected void b() {
        b.c("Connected", new Object[0]);
    }

    protected void b(h h1) {
        e(h1);
    }

    public final void b(k k1, Object obj) {
        if (obj instanceof io.netty.handler.timeout.a) {
            b.c("Got idle", new Object[0]);
            c();
        }
        super.b(k1, obj);
        return;
        Exception exception;
        exception;
        super.b(k1, obj);
        throw exception;
    }

    protected void b(w w1) {
        if (org.littleshoot.proxy.impl.j.a(w1)) {
            g.a(w1);
            b.c("Writing an empty buffer to signal the end of our chunked transfer", new Object[0]);
            e(ak.c);
        } else {
            e(w1);
        }
    }

    protected void b(Object obj) {
        b.c("Reading: {}", new Object[] {
            obj
        });
        h = System.currentTimeMillis();
        if (k)
            a((h)obj);
        else
            c((w)obj);
    }

    protected void b(ConnectionState connectionstate) {
        a = connectionstate;
    }

    protected void c() {
        l();
    }

    protected final void c(k k1, Object obj) {
        b(obj);
    }

    void c(Object obj) {
        if (obj instanceof i) {
            b.c("Retaining reference counted message", new Object[0]);
            ((i)obj).C();
        }
        d(obj);
    }

    protected void d() {
        b(org.littleshoot.proxy.impl.ConnectionState.i);
        b.c("Disconnected", new Object[0]);
    }

    void d(Object obj) {
        b.c("Writing: {}", new Object[] {
            obj
        });
        if (!(obj instanceof w)) goto _L2; else goto _L1
_L1:
        b((w)obj);
_L4:
        b.c("Wrote: {}", new Object[] {
            obj
        });
        return;
_L2:
        b((h)obj);
        if (true) goto _L4; else goto _L3
_L3:
        Exception exception;
        exception;
        b.c("Wrote: {}", new Object[] {
            obj
        });
        throw exception;
    }

    protected g e(Object obj) {
        return g.b(obj);
    }

    protected void e() {
        b.c("Became saturated", new Object[0]);
    }

    public void e(k k1) {
        e = k1;
        g = k1.a();
        c.a(k1.a());
        super.e(k1);
        return;
        Exception exception;
        exception;
        super.e(k1);
        throw exception;
    }

    protected void f() {
        b.c("Became writeable", new Object[0]);
    }

    public final void g(k k1) {
        b();
        super.g(k1);
        return;
        Exception exception;
        exception;
        super.g(k1);
        throw exception;
    }

    public void h(k k1) {
        d();
        super.h(k1);
        return;
        Exception exception;
        exception;
        super.h(k1);
        throw exception;
    }

    public SSLEngine i() {
        return i;
    }

    public final void j(k k1) {
        b.c("Writability changed. Is writable: {}", new Object[] {
            Boolean.valueOf(g.b())
        });
        if (!g.b()) goto _L2; else goto _L1
_L1:
        f();
_L4:
        super.j(k1);
        return;
_L2:
        e();
        if (true) goto _L4; else goto _L3
_L3:
        Exception exception;
        exception;
        super.j(k1);
        throw exception;
    }

    public boolean j() {
        return k;
    }

    io.netty.util.concurrent.n l() {
        Object obj;
        if (g == null) {
            obj = null;
        } else {
            obj = g.l();
            e(ak.c).a(new io.netty.util.concurrent.p(((y) (obj))) {

                final y a;
                final org.littleshoot.proxy.impl.f b;

                public void a(io.netty.util.concurrent.n n1) {
                    org.littleshoot.proxy.impl.f.a(b, a);
                }

             {
                b = org.littleshoot.proxy.impl.f.this;
                a = y;
                super();
            }
            }
);
        }
        return ((io.netty.util.concurrent.n) (obj));
    }

    protected boolean m() {
        boolean flag;
        if (!g.b())
            flag = true;
        else
            flag = false;
        return flag;
    }

    protected boolean n() {
        return a.a();
    }

    protected ConnectionState o() {
        return a;
    }

    protected void p() {
        b.c("Stopped reading", new Object[0]);
        g.E().a(false);
    }

    protected void q() {
        b.c("Resumed reading", new Object[0]);
        g.E().a(true);
    }

    org.littleshoot.proxy.impl.g r() {
        return b;
    }
}
