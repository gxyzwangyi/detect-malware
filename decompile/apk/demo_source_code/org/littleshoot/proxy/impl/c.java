// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.littleshoot.proxy.impl;

import io.netty.channel.k;
import io.netty.util.concurrent.*;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

// Referenced classes of package org.littleshoot.proxy.impl:
//            d, f, g, b, 
//            i, ConnectionState

class c {

    private Queue a;
    private final b b;
    private final org.littleshoot.proxy.impl.i c;
    private volatile d d;
    private volatile boolean e;
    private final Object f;

    c(b b1, org.littleshoot.proxy.impl.i j, Object obj) {
        a = new ConcurrentLinkedQueue();
        e = false;
        b = b1;
        c = j;
        f = obj;
    }

    static Object a(c c1) {
        return c1.f;
    }

    static void a(c c1, g g1) {
        c1.a(g1);
    }

    private void a(g g1) {
        d.b().d(new p(g1) {

            final g a;
            final c b;

            public void a(n n1) {
                Object obj = c.a(b);
                obj;
                JVM INSTR monitorenter ;
                if (!n1.g_())
                    break MISSING_BLOCK_LABEL_49;
                a.c("ConnectionFlowStep succeeded", new Object[0]);
                c.b(b).a(b);
_L2:
                return;
                a.d("ConnectionFlowStep failed", n1.j());
                b.a(n1.j());
                if (true) goto _L2; else goto _L1
_L1:
                n1;
                obj;
                JVM INSTR monitorexit ;
                throw n1;
            }

             {
                b = c.this;
                a = g1;
                super();
            }
        }
);
    }

    static d b(c c1) {
        return c1.d;
    }

    static org.littleshoot.proxy.impl.i c(c c1) {
        return c1.c;
    }

    static b d(c c1) {
        return c1.b;
    }

    private void e() {
        boolean flag = false;
        f f1 = d.c();
        g g1 = f1.r();
        g1.c("Processing connection flow step: {}", new Object[] {
            d
        });
        f1.b(d.d());
        if (e || d.a())
            flag = true;
        e = flag;
        if (d.e())
            f1.e.d().b(new Runnable(g1) {

                final g a;
                final c b;

                public void run() {
                    c.a(b, a);
                }

             {
                b = c.this;
                a = g1;
                super();
            }
            }
);
        else
            a(g1);
    }

    static void e(c c1) {
        c1.f();
    }

    private void f() {
        f.notifyAll();
    }

    c a(d d1) {
        a.add(d1);
        return this;
    }

    void a() {
        b.a(c);
        b();
    }

    void a(Object obj) {
        if (d != null)
            d.a(this, obj);
    }

    void a(Throwable throwable) {
        ConnectionState connectionstate = c.o();
        c.l().d(new p(connectionstate, throwable) {

            final ConnectionState a;
            final Throwable b;
            final c c;

            public void a(n n1) {
                synchronized (c.a(c)) {
                    if (!c.d(c).a(c.c(c), a, b)) {
                        c.c(c).b(org.littleshoot.proxy.impl.ConnectionState.i);
                        c.e(c);
                    }
                }
                return;
                exception;
                n1;
                JVM INSTR monitorexit ;
                throw exception;
            }

             {
                c = c.this;
                a = connectionstate;
                b = throwable;
                super();
            }
        }
);
    }

    void b() {
        d = (d)a.poll();
        if (d == null)
            c();
        else
            e();
    }

    void c() {
        boolean flag = true;
        Object obj = f;
        obj;
        JVM INSTR monitorenter ;
        org.littleshoot.proxy.impl.i j;
        c.r().c("Connection flow completed successfully: {}", new Object[] {
            d
        });
        j = c;
        if (e)
            flag = false;
        j.a(flag);
        f();
        return;
        Exception exception;
        exception;
        obj;
        JVM INSTR monitorexit ;
        throw exception;
    }

    void d() {
        a(((Throwable) (null)));
    }
}
