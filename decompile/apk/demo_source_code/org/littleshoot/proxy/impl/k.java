// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.littleshoot.proxy.impl;

import io.netty.channel.ah;
import io.netty.channel.c.a.h;
import java.nio.channels.spi.SelectorProvider;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import org.littleshoot.proxy.*;
import org.slf4j.b;
import org.slf4j.c;

// Referenced classes of package org.littleshoot.proxy.impl:
//            j, h

public class k {

    private static final b b;
    private static final AtomicInteger c = new AtomicInteger(0);
    private static final EnumMap j;
    public final List a = new ArrayList(1);
    private final String d;
    private final int e;
    private final int f;
    private final int g;
    private final int h;
    private final EnumMap i = new EnumMap(org/littleshoot/proxy/TransportProtocol);
    private final AtomicBoolean k = new AtomicBoolean(false);
    private final Object l = new Object();
    private final Object m = new Object();

    public k(String s, int i1, int j1, int k1) {
        d = s;
        e = c.getAndIncrement();
        f = i1;
        g = j1;
        h = k1;
    }

    private void a(boolean flag) {
        if (!k.compareAndSet(false, true)) {
            b.b("Shutdown requested, but ServerGroup is already stopped. Doing nothing.");
        } else {
            b b1 = b;
            StringBuilder stringbuilder = (new StringBuilder()).append("Shutting down server group event loops ");
            Object obj;
            if (flag)
                obj = "(graceful)";
            else
                obj = "(non-graceful)";
            b1.b(stringbuilder.append(((String) (obj))).toString());
            obj = new ArrayList();
            for (Iterator iterator = i.values().iterator(); iterator.hasNext(); ((List) (obj)).addAll(((org.littleshoot.proxy.impl.h)iterator.next()).a()));
            for (Iterator iterator1 = ((List) (obj)).iterator(); iterator1.hasNext();) {
                ah ah2 = (ah)iterator1.next();
                if (flag)
                    ah2.l();
                else
                    ah2.a(0L, 0L, TimeUnit.SECONDS);
            }

            if (flag)
                for (obj = ((List) (obj)).iterator(); ((Iterator) (obj)).hasNext();) {
                    ah ah1 = (ah)((Iterator) (obj)).next();
                    try {
                        ah1.awaitTermination(60L, TimeUnit.SECONDS);
                    }
                    catch (InterruptedException interruptedexception) {
                        Thread.currentThread().interrupt();
                        b.c("Interrupted while shutting down event loop");
                    }
                }

            b.a("Done shutting down server group");
        }
    }

    private org.littleshoot.proxy.impl.h d(TransportProtocol transportprotocol) {
        if (i.get(transportprotocol) != null) goto _L2; else goto _L1
_L1:
        Object obj = l;
        obj;
        JVM INSTR monitorenter ;
        SelectorProvider selectorprovider;
        if (i.get(transportprotocol) != null)
            break MISSING_BLOCK_LABEL_150;
        b.b("Initializing thread pools for {} with {} acceptor threads, {} incoming worker threads, and {} outgoing worker threads", new Object[] {
            transportprotocol, Integer.valueOf(f), Integer.valueOf(g), Integer.valueOf(h)
        });
        selectorprovider = (SelectorProvider)j.get(transportprotocol);
        if (selectorprovider != null)
            break MISSING_BLOCK_LABEL_110;
        UnknownTransportProtocolException unknowntransportprotocolexception = JVM INSTR new #234 <Class UnknownTransportProtocolException>;
        unknowntransportprotocolexception.UnknownTransportProtocolException(transportprotocol);
        throw unknowntransportprotocolexception;
        transportprotocol;
        obj;
        JVM INSTR monitorexit ;
        throw transportprotocol;
        org.littleshoot.proxy.impl.h h1 = JVM INSTR new #169 <Class org.littleshoot.proxy.impl.h>;
        h1.org.littleshoot.proxy.impl.h(selectorprovider, f, g, h, d, e);
        i.put(transportprotocol, h1);
        obj;
        JVM INSTR monitorexit ;
_L2:
        return (org.littleshoot.proxy.impl.h)i.get(transportprotocol);
    }

    public ah a(TransportProtocol transportprotocol) {
        return d(transportprotocol).b();
    }

    public void a(m m1) {
        synchronized (m) {
            a.add(m1);
        }
        return;
        m1;
        obj;
        JVM INSTR monitorexit ;
        throw m1;
    }

    public void a(m m1, boolean flag) {
        Object obj = m;
        obj;
        JVM INSTR monitorenter ;
        if (!a.remove(m1))
            b.c("Attempted to unregister proxy server from ServerGroup that it was not registered with. Was the proxy unregistered twice?");
        if (!a.isEmpty())
            break MISSING_BLOCK_LABEL_62;
        b.a("Proxy server unregistered from ServerGroup. No proxy servers remain registered, so shutting down ServerGroup.");
        a(flag);
_L2:
        return;
        b.b("Proxy server unregistered from ServerGroup. Not shutting down ServerGroup ({} proxy servers remain registered).", Integer.valueOf(a.size()));
        if (true) goto _L2; else goto _L1
_L1:
        m1;
        obj;
        JVM INSTR monitorexit ;
        throw m1;
    }

    public boolean a() {
        return k.get();
    }

    public ah b(TransportProtocol transportprotocol) {
        return d(transportprotocol).c();
    }

    public ah c(TransportProtocol transportprotocol) {
        return d(transportprotocol).d();
    }

    static  {
        b = org.slf4j.c.a(org/littleshoot/proxy/impl/k);
        j = new EnumMap(org/littleshoot/proxy/TransportProtocol);
        j.put(TransportProtocol.a, SelectorProvider.provider());
        if (org.littleshoot.proxy.impl.j.b())
            j.put(TransportProtocol.b, h.c);
        else
            b.a("UDT provider not found on classpath. UDT transport will not be available.");
    }
}
