// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.littleshoot.proxy.impl;

import com.google.common.base.k;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import io.netty.channel.c.a.h;
import io.netty.handler.codec.http.ac;
import io.netty.handler.codec.http.af;
import io.netty.handler.codec.http.ag;
import io.netty.handler.codec.http.ah;
import io.netty.handler.codec.http.i;
import io.netty.handler.codec.http.s;
import io.netty.handler.codec.http.t;
import io.netty.handler.codec.http.v;
import io.netty.handler.codec.http.w;
import io.netty.handler.codec.http.z;
import java.io.IOException;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.commons.b.a;
import org.slf4j.b;
import org.slf4j.c;

public class j {

    private static final Set a;
    private static final b b = org.slf4j.c.a(org/littleshoot/proxy/impl/j);
    private static final TimeZone c = TimeZone.getTimeZone("GMT");
    private static final k d = k.a(',').b().a();
    private static Pattern e = Pattern.compile("^https?://.*", 2);

    public j() {
    }

    public static ac a(ac ac1) {
        Object obj;
        List list;
        String s1;
        Iterator iterator;
        if (ac1 instanceof io.netty.handler.codec.http.c) {
            obj = ((io.netty.handler.codec.http.c)ac1).a();
            obj = new io.netty.handler.codec.http.c(ac1.k(), ac1.h(), ((io.netty.buffer.h) (obj)));
        } else {
            obj = new i(ac1.k(), ac1.h());
        }
        for (iterator = ac1.j().d().iterator(); iterator.hasNext(); ((ac) (obj)).j().a(s1, list)) {
            s1 = (String)iterator.next();
            list = ac1.j().c(s1);
        }

        return ((ac) (obj));
    }

    public static String a() {
        String s1 = InetAddress.getLocalHost().getHostName();
_L2:
        return s1;
        Object obj;
        obj;
        b.a("Ignored exception", ((Throwable) (obj)));
_L3:
        b.b("Could not lookup localhost");
        obj = null;
        if (true) goto _L2; else goto _L1
_L1:
        obj;
        b.a("Ignored exception", ((Throwable) (obj)));
          goto _L3
    }

    public static String a(z z1) {
        return b(z1.m());
    }

    public static String a(String s1) {
        if (e.matcher(s1).matches()) {
            s1 = org.apache.commons.b.a.b(s1, "://");
            int l = s1.indexOf("/");
            if (l == -1)
                s1 = "/";
            else
                s1 = s1.substring(l);
        }
        return s1;
    }

    public static List a(String s1, t t1) {
        t1 = t1.j().c(s1);
        if (t1.isEmpty()) {
            s1 = Collections.emptyList();
        } else {
            s1 = ImmutableList.i();
            for (t1 = t1.iterator(); t1.hasNext(); s1.b(d((String)t1.next())));
            s1 = s1.a();
        }
        return s1;
    }

    public static void a(t t1, String s1) {
        String s2 = (new StringBuilder()).append(t1.k().b()).append('.').append(t1.k().c()).append(' ').append(s1).toString();
        if (t1.j().d("Via")) {
            s1 = new ArrayList(t1.j().c("Via"));
            s1.add(s2);
        } else {
            s1 = Collections.singletonList(s2);
        }
        t1.j().a("Via", s1);
    }

    public static boolean a(t t1) {
        boolean flag = true;
        if (!(t1 instanceof ac)) goto _L2; else goto _L1
_L1:
        int l = ((ac)t1).h().a();
        if (l < 100 || l >= 200) goto _L4; else goto _L3
_L3:
        return flag;
_L4:
        switch (l) {
        case 204: 
        case 205: 
        case 304: 
            break;
        }
_L2:
        flag = false;
        if (true) goto _L3; else goto _L5
_L5:
    }

    public static boolean a(w w) {
        return w instanceof ah;
    }

    public static String b(String s1) {
        String s2;
        if (e.matcher(s1).matches())
            s1 = org.apache.commons.b.a.b(s1, "://");
        s2 = s1;
        if (s1.contains("/"))
            s2 = s1.substring(0, s1.indexOf("/"));
        return s2;
    }

    public static boolean b() {
        boolean flag = false;
        java.nio.channels.spi.SelectorProvider selectorprovider = h.c;
        if (selectorprovider != null)
            flag = true;
_L2:
        return flag;
        NoClassDefFoundError noclassdeffounderror;
        noclassdeffounderror;
        if (true) goto _L2; else goto _L1
_L1:
    }

    public static boolean b(ac ac1) {
        boolean flag = true;
        if (!a(ac1)) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        List list = a("Transfer-Encoding", ac1);
        if (!list.isEmpty()) {
            flag = "chunked".equals((String)list.get(list.size() - 1));
        } else {
            ac1 = s.a(ac1, "Content-Length");
            if (ac1 == null || ac1.isEmpty())
                flag = false;
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    public static boolean b(w w) {
        boolean flag;
        if (!a(w))
            flag = true;
        else
            flag = false;
        return flag;
    }

    public static boolean b(z z1) {
        return v.c.equals(z1.l());
    }

    public static ac c(ac ac1) {
        i l = new i(ac1.k(), ac1.h());
        l.j().a(ac1.j());
        return l;
    }

    public static boolean c(w w) {
        boolean flag;
        if ((w instanceof z) && v.i.equals(((z)w).l()))
            flag = true;
        else
            flag = false;
        return flag;
    }

    public static boolean c(z z1) {
        return v.c.equals(z1.l());
    }

    public static boolean c(String s1) {
        return a.contains(s1.toLowerCase(Locale.US));
    }

    public static List d(String s1) {
        return ImmutableList.a(d.a(s1));
    }

    static  {
        a = ImmutableSet.a("Connection".toLowerCase(Locale.US), "Proxy-Authenticate".toLowerCase(Locale.US), "Proxy-Authorization".toLowerCase(Locale.US), "TE".toLowerCase(Locale.US), "Trailer".toLowerCase(Locale.US), "Upgrade".toLowerCase(Locale.US), new String[] {
            "Keep-Alive".toLowerCase(Locale.US)
        });
    }
}
