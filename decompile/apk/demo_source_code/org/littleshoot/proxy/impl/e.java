// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.littleshoot.proxy.impl;

import io.netty.a.d;
import io.netty.channel.ah;
import io.netty.channel.aq;
import io.netty.channel.c.a.h;
import io.netty.channel.g;
import io.netty.channel.group.a;
import io.netty.channel.group.f;
import io.netty.channel.p;
import io.netty.util.concurrent.r;
import java.net.InetSocketAddress;
import java.util.Collection;
import java.util.Iterator;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import org.littleshoot.proxy.TransportProtocol;
import org.littleshoot.proxy.UnknownTransportProtocolException;
import org.littleshoot.proxy.k;
import org.littleshoot.proxy.l;
import org.littleshoot.proxy.m;
import org.littleshoot.proxy.n;
import org.littleshoot.proxy.o;
import org.littleshoot.proxy.q;
import org.slf4j.b;
import org.slf4j.c;

// Referenced classes of package org.littleshoot.proxy.impl:
//            j, k, l, b

public class e
    implements m {
    private static class a
        implements n {

        private String a;
        private org.littleshoot.proxy.impl.k b;
        private TransportProtocol c;
        private InetSocketAddress d;
        private int e;
        private boolean f;
        private q g;
        private boolean h;
        private org.littleshoot.proxy.p i;
        private org.littleshoot.proxy.d j;
        private o k;
        private k l;
        private boolean m;
        private int n;
        private Collection o;
        private int p;
        private org.littleshoot.proxy.h q;
        private long r;
        private long s;
        private InetSocketAddress t;
        private String u;
        private int v;
        private int w;
        private int x;

        private e b() {
            org.littleshoot.proxy.impl.k k1;
            if (b != null)
                k1 = b;
            else
                k1 = new org.littleshoot.proxy.impl.k(a, v, w, x);
            return new e(k1, c, c(), g, h, i, j, k, l, m, n, o, p, q, r, s, t, u);
        }

        private InetSocketAddress c() {
            InetSocketAddress inetsocketaddress;
            if (d != null)
                inetsocketaddress = d;
            else
            if (f)
                inetsocketaddress = new InetSocketAddress("127.0.0.1", e);
            else
                inetsocketaddress = new InetSocketAddress(e);
            return inetsocketaddress;
        }

        public m a() {
            return org.littleshoot.proxy.impl.e.d(b());
        }

        public n a(int i1) {
            n = i1;
            return this;
        }

        public n a(long l1, long l2) {
            r = l1;
            s = l2;
            return this;
        }

        public n a(String s1) {
            u = s1;
            return this;
        }

        public n a(InetSocketAddress inetsocketaddress) {
            d = inetsocketaddress;
            return this;
        }

        public n a(org.littleshoot.proxy.d d1) {
            j = d1;
            return this;
        }

        public n a(org.littleshoot.proxy.h h1) {
            q = h1;
            return this;
        }

        public n a(org.littleshoot.proxy.impl.l l1) {
            v = l1.b();
            w = l1.a();
            x = l1.c();
            return this;
        }

        public n a(k k1) {
            l = k1;
            return this;
        }

        public n a(o o1) {
            k = o1;
            if (g != null) {
                org.littleshoot.proxy.impl.e.q().c("Enabled man in the middle with encrypted inbound connections. These are mutually exclusive - encrypted inbound connections will be disabled.");
                g = null;
            }
            return this;
        }

        public n b(int i1) {
            p = i1;
            return this;
        }

        public n b(InetSocketAddress inetsocketaddress) {
            t = inetsocketaddress;
            return this;
        }

        private a() {
            a = "LittleProxy";
            b = null;
            c = TransportProtocol.a;
            e = 8080;
            f = true;
            g = null;
            h = true;
            i = null;
            j = null;
            k = null;
            l = new l();
            m = false;
            n = 70;
            o = new ConcurrentLinkedQueue();
            p = 40000;
            q = new org.littleshoot.proxy.e();
            v = 2;
            w = 8;
            x = 8;
        }


        private a(org.littleshoot.proxy.impl.k k1, TransportProtocol transportprotocol, InetSocketAddress inetsocketaddress, q q1, boolean flag, org.littleshoot.proxy.p p1, org.littleshoot.proxy.d d1, 
                o o1, k k2, boolean flag1, int i1, Collection collection, int j1, org.littleshoot.proxy.h h1, 
                long l1, long l2, InetSocketAddress inetsocketaddress1, String s1) {
            a = "LittleProxy";
            b = null;
            c = TransportProtocol.a;
            e = 8080;
            f = true;
            g = null;
            h = true;
            i = null;
            j = null;
            k = null;
            l = new l();
            m = false;
            n = 70;
            o = new ConcurrentLinkedQueue();
            p = 40000;
            q = new org.littleshoot.proxy.e();
            v = 2;
            w = 8;
            x = 8;
            b = k1;
            c = transportprotocol;
            d = inetsocketaddress;
            e = inetsocketaddress.getPort();
            g = q1;
            h = flag;
            i = p1;
            j = d1;
            k = o1;
            l = k2;
            m = flag1;
            n = i1;
            if (collection != null)
                o.addAll(collection);
            p = j1;
            q = h1;
            r = l1;
            s = l2;
            t = inetsocketaddress1;
            u = s1;
        }

        a(org.littleshoot.proxy.impl.k k1, TransportProtocol transportprotocol, InetSocketAddress inetsocketaddress, q q1, boolean flag, org.littleshoot.proxy.p p1, org.littleshoot.proxy.d d1, 
                o o1, k k2, boolean flag1, int i1, Collection collection, int j1, org.littleshoot.proxy.h h1, 
                long l1, long l2, InetSocketAddress inetsocketaddress1, String s1, _cls1 _pcls1) {
            this(k1, transportprotocol, inetsocketaddress, q1, flag, p1, d1, o1, k2, flag1, i1, collection, j1, h1, l1, l2, inetsocketaddress1, s1);
        }
    }


    private static final b a = org.slf4j.c.a(org/littleshoot/proxy/impl/e);
    private final org.littleshoot.proxy.impl.k b;
    private final TransportProtocol c;
    private final InetSocketAddress d;
    private volatile InetSocketAddress e;
    private volatile InetSocketAddress f;
    private final q g;
    private final boolean h;
    private final org.littleshoot.proxy.p i;
    private final org.littleshoot.proxy.d j;
    private final o k;
    private final k l;
    private final boolean m;
    private volatile int n;
    private volatile int o;
    private final org.littleshoot.proxy.h p;
    private volatile io.netty.handler.a.c q;
    private final AtomicBoolean r;
    private final String s;
    private final Collection t;
    private final io.netty.channel.group.a u;
    private final Thread v;

    private e(org.littleshoot.proxy.impl.k k1, TransportProtocol transportprotocol, InetSocketAddress inetsocketaddress, q q1, boolean flag, org.littleshoot.proxy.p p1, org.littleshoot.proxy.d d1, 
            o o1, k k2, boolean flag1, int i1, Collection collection, int j1, org.littleshoot.proxy.h h1, 
            long l1, long l2, InetSocketAddress inetsocketaddress1, String s1) {
        r = new AtomicBoolean(false);
        t = new ConcurrentLinkedQueue();
        u = new f("HTTP-Proxy-Server", r.a);
        v = new Thread(new Runnable() {

            final e a;

            public void run() {
                a.b();
            }

             {
                a = e.this;
                super();
            }
        }
, "LittleProxy-JVM-shutdown-hook");
        b = k1;
        c = transportprotocol;
        d = inetsocketaddress;
        g = q1;
        h = flag;
        i = p1;
        j = d1;
        k = o1;
        l = k2;
        m = flag1;
        o = i1;
        if (collection != null)
            t.addAll(collection);
        n = j1;
        p = h1;
        if (l2 > 0L || l1 > 0L)
            q = a(transportprotocol, l1, l2);
        else
            q = null;
        e = inetsocketaddress1;
        if (s1 == null) {
            transportprotocol = org.littleshoot.proxy.impl.j.a();
            k1 = transportprotocol;
            if (transportprotocol == null)
                k1 = "littleproxy";
            s = k1;
        } else {
            s = s1;
        }
    }

    e(org.littleshoot.proxy.impl.k k1, TransportProtocol transportprotocol, InetSocketAddress inetsocketaddress, q q1, boolean flag, org.littleshoot.proxy.p p1, org.littleshoot.proxy.d d1, 
            o o1, k k2, boolean flag1, int i1, Collection collection, int j1, org.littleshoot.proxy.h h1, 
            long l1, long l2, InetSocketAddress inetsocketaddress1, String s1, _cls1 _pcls1) {
        this(k1, transportprotocol, inetsocketaddress, q1, flag, p1, d1, o1, k2, flag1, i1, collection, j1, h1, l1, l2, inetsocketaddress1, s1);
    }

    private io.netty.handler.a.c a(TransportProtocol transportprotocol, long l1, long l2) {
        return new io.netty.handler.a.c(a(transportprotocol), l2, l1, 250L, 0xffffffffL);
    }

    static q a(e e1) {
        return e1.g;
    }

    static boolean b(e e1) {
        return e1.h;
    }

    static io.netty.handler.a.c c(e e1) {
        return e1.q;
    }

    static m d(e e1) {
        return e1.r();
    }

    public static n d() {
        return new a();
    }

    static b q() {
        return a;
    }

    private m r() {
        if (!b.a()) {
            a.b((new StringBuilder()).append("Starting proxy at address: ").append(d).toString());
            b.a(this);
            s();
            return this;
        } else {
            throw new IllegalStateException("Attempted to start proxy, but proxy's server group is already stopped");
        }
    }

    private void s() {
        Object obj;
        Object obj1;
        obj1 = (new d()).a(b.a(c), b.b(c));
        obj = new io.netty.channel.n() {

            final e a;

            protected void a(io.netty.channel.d d1) {
                new org.littleshoot.proxy.impl.b(a, org.littleshoot.proxy.impl.e.a(a), org.littleshoot.proxy.impl.e.b(a), d1.c(), org.littleshoot.proxy.impl.e.c(a));
            }

             {
                a = e.this;
                super();
            }
        }
;
        static class _cls5 {

            static final int a[];

            static  {
                a = new int[TransportProtocol.values().length];
                NoSuchFieldError nosuchfielderror;
                try {
                    a[TransportProtocol.a.ordinal()] = 1;
                }
                catch (NoSuchFieldError nosuchfielderror1) { }
                a[TransportProtocol.b.ordinal()] = 2;
_L2:
                return;
                nosuchfielderror;
                if (true) goto _L2; else goto _L1
_L1:
            }
        }

        switch (org.littleshoot.proxy.impl._cls5.a[c.ordinal()]) {
        default:
            throw new UnknownTransportProtocolException(c);

        case 2: // '\002'
            break MISSING_BLOCK_LABEL_164;

        case 1: // '\001'
            a.b("Proxy listening with TCP transport");
            ((d) (obj1)).a(new io.netty.a.c() {

                final e a;

                public io.netty.channel.d a() {
                    return b();
                }

                public aq b() {
                    return new io.netty.channel.b.a.a();
                }

             {
                a = e.this;
                super();
            }
            }
);
            break;
        }
_L1:
        ((d) (obj1)).b(((io.netty.channel.i) (obj)));
        obj = ((d) (obj1)).a(d).a(new io.netty.channel.h() {

            final e a;

            public void a(g g1) {
                if (g1.g_())
                    a.a(g1.e());
            }

            public volatile void a(io.netty.util.concurrent.n n1) {
                a((g)n1);
            }

             {
                a = e.this;
                super();
            }
        }
).f();
        obj1 = ((g) (obj)).j();
        if (obj1 != null) {
            throw new RuntimeException(((Throwable) (obj1)));
        } else {
            f = (InetSocketAddress)((g) (obj)).e().f();
            a.b((new StringBuilder()).append("Proxy started at address: ").append(f).toString());
            Runtime.getRuntime().addShutdownHook(v);
            return;
        }
        a.b("Proxy listening with UDT transport");
        ((d)((d)((d) (obj1)).a(h.a)).a(p.r, Integer.valueOf(10))).a(p.p, Boolean.valueOf(true));
          goto _L1
    }

    protected ah a(TransportProtocol transportprotocol) {
        return b.c(transportprotocol);
    }

    public void a() {
        a(true);
    }

    public void a(int i1) {
        o = i1;
    }

    public void a(long l1, long l2) {
        if (q == null) goto _L2; else goto _L1
_L1:
        q.a(l2, l1);
_L4:
        return;
_L2:
        if (l1 > 0L || l2 > 0L)
            q = a(c, l1, l2);
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected void a(io.netty.channel.d d1) {
        u.add(d1);
    }

    protected void a(boolean flag) {
        if (r.compareAndSet(false, true)) {
            if (flag)
                a.b("Shutting down proxy server gracefully");
            else
                a.b("Shutting down proxy server immediately (non-graceful)");
            b(flag);
            b.a(this, flag);
            try {
                Runtime.getRuntime().removeShutdownHook(v);
            }
            catch (IllegalStateException illegalstateexception) { }
            a.b("Done shutting down proxy server");
        }
    }

    public void b() {
        a(false);
    }

    public void b(int i1) {
        n = i1;
    }

    protected void b(boolean flag) {
        b b1 = a;
        StringBuilder stringbuilder = (new StringBuilder()).append("Closing all channels ");
        Object obj;
        if (flag)
            obj = "(graceful)";
        else
            obj = "(non-graceful)";
        b1.b(stringbuilder.append(((String) (obj))).toString());
        obj = u.b();
        if (flag) {
            try {
                ((io.netty.channel.group.b) (obj)).a(10L, TimeUnit.SECONDS);
            }
            catch (InterruptedException interruptedexception) {
                Thread.currentThread().interrupt();
                a.c("Interrupted while waiting for channels to shut down gracefully.");
            }
            if (!((io.netty.channel.group.b) (obj)).g_()) {
                Iterator iterator = ((io.netty.channel.group.b) (obj)).iterator();
                do {
                    if (!iterator.hasNext())
                        break;
                    obj = (g)iterator.next();
                    if (!((g) (obj)).g_())
                        a.c("Unable to close channel.  Cause of failure for {} is {}", ((g) (obj)).e(), ((g) (obj)).j());
                } while (true);
            }
        }
    }

    public InetSocketAddress c() {
        return f;
    }

    public Object clone() {
        return j();
    }

    boolean e() {
        return m;
    }

    public int f() {
        return o;
    }

    public int g() {
        return n;
    }

    public org.littleshoot.proxy.h h() {
        return p;
    }

    public InetSocketAddress i() {
        return e;
    }

    public n j() {
        org.littleshoot.proxy.impl.k k1 = b;
        TransportProtocol transportprotocol = c;
        Object obj = d.getAddress();
        int i1;
        int j1;
        long l1;
        long l2;
        boolean flag;
        boolean flag1;
        org.littleshoot.proxy.d d1;
        Collection collection;
        o o1;
        k k2;
        q q1;
        org.littleshoot.proxy.h h1;
        org.littleshoot.proxy.p p1;
        if (d.getPort() == 0)
            i1 = 0;
        else
            i1 = d.getPort() + 1;
        obj = new InetSocketAddress(((java.net.InetAddress) (obj)), i1);
        q1 = g;
        flag = h;
        p1 = i;
        d1 = j;
        o1 = k;
        k2 = l;
        flag1 = m;
        j1 = o;
        collection = t;
        i1 = n;
        h1 = p;
        if (q != null)
            l1 = q.d();
        else
            l1 = 0L;
        if (q != null)
            l2 = q.c();
        else
            l2 = 0L;
        return new a(k1, transportprotocol, ((InetSocketAddress) (obj)), q1, flag, p1, d1, o1, k2, flag1, j1, collection, i1, h1, l1, l2, e, s);
    }

    protected org.littleshoot.proxy.d k() {
        return j;
    }

    protected o l() {
        return k;
    }

    protected org.littleshoot.proxy.p m() {
        return i;
    }

    public k n() {
        return l;
    }

    protected Collection o() {
        return t;
    }

    public String p() {
        return s;
    }

}
