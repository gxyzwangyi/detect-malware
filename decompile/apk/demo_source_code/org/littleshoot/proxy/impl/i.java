// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.littleshoot.proxy.impl;

import com.google.common.net.HostAndPort;
import io.netty.channel.g;
import io.netty.channel.p;
import io.netty.channel.t;
import io.netty.handler.codec.http.ab;
import io.netty.handler.codec.http.ac;
import io.netty.handler.codec.http.ad;
import io.netty.handler.codec.http.af;
import io.netty.handler.codec.http.ah;
import io.netty.handler.codec.http.n;
import io.netty.handler.codec.http.v;
import io.netty.handler.codec.http.w;
import io.netty.handler.codec.http.z;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.UnknownHostException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.RejectedExecutionException;
import javax.net.ssl.SSLEngine;
import javax.net.ssl.SSLProtocolException;
import org.littleshoot.proxy.TransportProtocol;
import org.littleshoot.proxy.UnknownTransportProtocolException;
import org.littleshoot.proxy.b;
import org.littleshoot.proxy.c;
import org.littleshoot.proxy.d;
import org.littleshoot.proxy.h;
import org.littleshoot.proxy.k;
import org.littleshoot.proxy.o;

// Referenced classes of package org.littleshoot.proxy.impl:
//            f, ConnectionState, e, g, 
//            c, j, b, d

public class i extends f {
    private class a extends ad {

        final i g;

        protected boolean a(io.netty.handler.codec.http.t t1) {
            boolean flag;
            flag = true;
            if (t1 instanceof ac)
                i.a(g);
            break MISSING_BLOCK_LABEL_16;
            if (org.littleshoot.proxy.impl.i.b(g) != null && !v.c.equals(org.littleshoot.proxy.impl.i.b(g).l()))
                flag = super.a(t1);
            return flag;
        }

        public a(int j1, int k1, int l1) {
            g = i.this;
            super(j1, k1, l1);
        }
    }


    private org.littleshoot.proxy.impl.d A;
    private org.littleshoot.proxy.impl.d B;
    private org.littleshoot.proxy.impl.d C;
    private final f.a D = new f.a() {

        final i a;

        protected void a(int j1) {
            org.littleshoot.proxy.g g1 = new org.littleshoot.proxy.g(org.littleshoot.proxy.impl.i.h(a), a);
            for (Iterator iterator = a.c.o().iterator(); iterator.hasNext(); ((org.littleshoot.proxy.a)iterator.next()).b(g1, j1));
        }

             {
                a = i.this;
                super(i.this);
            }
    }
;
    private f.e E;
    private f.b F;
    private f.d G;
    private final org.littleshoot.proxy.impl.b a;
    private final i k = this;
    private volatile TransportProtocol l;
    private volatile InetSocketAddress m;
    private volatile InetSocketAddress n;
    private final String o;
    private volatile b p;
    private final Queue q;
    private volatile org.littleshoot.proxy.i r;
    private volatile org.littleshoot.proxy.impl.c s;
    private volatile boolean t;
    private final Object u = new Object();
    private volatile z v;
    private final Queue w = new LinkedList();
    private volatile z x;
    private volatile ac y;
    private volatile io.netty.handler.a.c z;

    private i(e e1, org.littleshoot.proxy.impl.b b1, String s1, b b2, Queue queue, org.littleshoot.proxy.i i1, io.netty.handler.a.c c1) {
        super(ConnectionState.i, e1, true);
        t = false;
        A = new org.littleshoot.proxy.impl.d(this, ConnectionState.a) {

            final i a;

            protected io.netty.util.concurrent.n b() {
                Object obj;
                obj = (io.netty.a.b)(new io.netty.a.b()).a(a.c.a(org.littleshoot.proxy.impl.i.c(a)));
                static class _cls8 {

                    static final int a[];

                    static  {
                        a = new int[TransportProtocol.values().length];
                        NoSuchFieldError nosuchfielderror;
                        try {
                            a[TransportProtocol.a.ordinal()] = 1;
                        }
                        catch (NoSuchFieldError nosuchfielderror1) { }
                        a[TransportProtocol.b.ordinal()] = 2;
_L2:
                        return;
                        nosuchfielderror;
                        if (true) goto _L2; else goto _L1
_L1:
                    }
                }

                switch (_cls8.a[org.littleshoot.proxy.impl.i.c(a).ordinal()]) {
                default:
                    throw new UnknownTransportProtocolException(org.littleshoot.proxy.impl.i.c(a));

                case 2: // '\002'
                    break MISSING_BLOCK_LABEL_177;

                case 1: // '\001'
                    a.b.c("Connecting to server with TCP", new Object[0]);
                    ((io.netty.a.b) (obj)).a(new io.netty.a.c(this) {

                        final _cls1 a;

                        public io.netty.channel.d a() {
                            return new io.netty.channel.b.a.b();
                        }

             {
                a = _pcls1;
                super();
            }
                    }
);
                    break;
                }
_L1:
                ((io.netty.a.b) (obj)).a(new io.netty.channel.n(this) {

                    final _cls1 a;

                    protected void a(io.netty.channel.d d1) {
                        i.a(a.a, d1.c(), org.littleshoot.proxy.impl.i.d(a.a));
                    }

             {
                a = _pcls1;
                super();
            }
                }
);
                ((io.netty.a.b) (obj)).a(p.d, Integer.valueOf(a.c.g()));
                if (i.e(a) != null)
                    obj = ((io.netty.a.b) (obj)).a(i.f(a), i.e(a));
                else
                    obj = ((io.netty.a.b) (obj)).b(i.f(a));
                return ((io.netty.util.concurrent.n) (obj));
                a.b.c("Connecting to server with UDT", new Object[0]);
                ((io.netty.a.b)((io.netty.a.b) (obj)).a(io.netty.channel.c.a.h.b)).a(p.p, Boolean.valueOf(true));
                  goto _L1
            }

            boolean e() {
                return false;
            }

             {
                a = i.this;
                super(f1, connectionstate);
            }
        }
;
        B = new org.littleshoot.proxy.impl.d(this, org.littleshoot.proxy.impl.ConnectionState.d) {

            final i a;

            void a(org.littleshoot.proxy.impl.c c2) {
            }

            void a(org.littleshoot.proxy.impl.c c2, Object obj) {
                boolean flag1 = false;
                boolean flag = flag1;
                if (obj instanceof ac) {
                    int j1 = ((ac)obj).h().a();
                    flag = flag1;
                    if (j1 >= 200) {
                        flag = flag1;
                        if (j1 <= 299)
                            flag = true;
                    }
                }
                if (flag)
                    c2.b();
                else
                    c2.d();
            }

            protected io.netty.util.concurrent.n b() {
                boolean flag = false;
                a.b.c("Handling CONNECT request through Chained Proxy", new Object[0]);
                org.littleshoot.proxy.impl.i.g(a).filterRequest(org.littleshoot.proxy.impl.i.d(a));
                if (a.c.l() != null)
                    flag = true;
                g g1;
                if (flag) {
                    g1 = a.e(org.littleshoot.proxy.impl.i.d(a));
                    g1.a(new io.netty.channel.h(this) {

                        final _cls2 a;

                        public void a(g g1) {
                            if (g1.g_())
                                a.a.e(ah.b);
                        }

                        public volatile void a(io.netty.util.concurrent.n n1) {
                            a((g)n1);
                        }

             {
                a = _pcls2;
                super();
            }
                    }
);
                } else {
                    g1 = a.e(org.littleshoot.proxy.impl.i.d(a));
                }
                return g1;
            }

             {
                a = i.this;
                super(f1, connectionstate);
            }
        }
;
        C = new org.littleshoot.proxy.impl.d(this, org.littleshoot.proxy.impl.ConnectionState.b) {

            final i a;

            boolean a() {
                return true;
            }

            protected io.netty.util.concurrent.n b() {
                return org.littleshoot.proxy.impl.i.h(a).a(a.c.l().clientSslEngineFor(org.littleshoot.proxy.impl.i.d(a), a.i.getSession()), false).d(new io.netty.util.concurrent.p(this) {

                    final _cls3 a;

                    public void a(io.netty.util.concurrent.n n1) {
                        if (n1.g_())
                            org.littleshoot.proxy.impl.i.h(a.a).a(true);
                    }

             {
                a = _pcls3;
                super();
            }
                }
);
            }

            boolean e() {
                return false;
            }

             {
                a = i.this;
                super(f1, connectionstate);
            }
        }
;
        E = new f.e() {

            final i b;

            protected void a(ac ac1) {
                org.littleshoot.proxy.g g1 = new org.littleshoot.proxy.g(org.littleshoot.proxy.impl.i.h(b), b);
                for (Iterator iterator = b.c.o().iterator(); iterator.hasNext(); ((org.littleshoot.proxy.a)iterator.next()).a(g1, ac1));
            }

             {
                b = i.this;
                super(i.this);
            }
        }
;
        F = new f.b() {

            final i a;

            protected void a(int j1) {
                org.littleshoot.proxy.g g1 = new org.littleshoot.proxy.g(org.littleshoot.proxy.impl.i.h(a), a);
                for (Iterator iterator = a.c.o().iterator(); iterator.hasNext(); ((org.littleshoot.proxy.a)iterator.next()).a(g1, j1));
            }

             {
                a = i.this;
                super(i.this);
            }
        }
;
        G = new f.d() {

            final i b;

            protected void a(n n1) {
                if (n1 instanceof ah)
                    i.i(b).proxyToServerRequestSent();
            }

            protected void a(z z1) {
                org.littleshoot.proxy.g g1 = new org.littleshoot.proxy.g(org.littleshoot.proxy.impl.i.h(b), b);
                try {
                    for (Iterator iterator = b.c.o().iterator(); iterator.hasNext(); ((org.littleshoot.proxy.a)iterator.next()).a(g1, z1));
                }
                // Misplaced declaration of an exception variable
                catch (z z1) {
                    b.b.b("Error while invoking ActivityTracker on request", z1);
                }
                i.i(b).proxyToServerRequestSending();
            }

            protected void b(z z1) {
            }

             {
                b = i.this;
                super(i.this);
            }
        }
;
        a = b1;
        o = s1;
        p = b2;
        q = queue;
        z = c1;
        r = i1;
        r.proxyToServerConnectionQueued();
        y();
    }

    public static InetSocketAddress a(String s1, e e1) {
        int i1;
        HostAndPort hostandport;
        try {
            hostandport = HostAndPort.b(s1);
        }
        // Misplaced declaration of an exception variable
        catch (e e1) {
            throw new UnknownHostException(s1);
        }
        s1 = hostandport.a();
        i1 = hostandport.a(80);
        return e1.h().resolve(s1, i1);
    }

    static i a(e e1, org.littleshoot.proxy.impl.b b1, String s1, org.littleshoot.proxy.i i1, z z1, io.netty.handler.a.c c1) {
        ConcurrentLinkedQueue concurrentlinkedqueue;
        d d1;
        concurrentlinkedqueue = new ConcurrentLinkedQueue();
        d1 = e1.k();
        if (d1 == null) goto _L2; else goto _L1
_L1:
        d1.lookupChainedProxies(z1, concurrentlinkedqueue);
        if (concurrentlinkedqueue.size() != 0) goto _L2; else goto _L3
_L3:
        e1 = null;
_L5:
        return e1;
_L2:
        e1 = new i(e1, b1, s1, (b)concurrentlinkedqueue.poll(), concurrentlinkedqueue, i1, c1);
        if (true) goto _L5; else goto _L4
_L4:
    }

    private void a(t t1, z z1) {
        if (z != null)
            t1.b("global-traffic-shaping", z);
        t1.b("bytesReadMonitor", D);
        t1.b("bytesWrittenMonitor", F);
        t1.b("encoder", new ab());
        t1.b("decoder", new a(8192, 16384, 16384));
        int i1 = c.n().getMaximumResponseBufferSizeInBytes();
        if (i1 > 0)
            a(t1, i1);
        t1.b("responseReadMonitor", E);
        t1.b("requestWrittenMonitor", G);
        t1.b("idle", new io.netty.handler.timeout.b(0, 0, c.f()));
        t1.b("handler", this);
    }

    private void a(z z1) {
        b.c("Starting new connection to: {}", new Object[] {
            m
        });
        v = z1;
        w();
        s.a();
    }

    static void a(i i1) {
        i1.v();
    }

    static void a(i i1, t t1, z z1) {
        i1.a(t1, z1);
    }

    static z b(i i1) {
        return i1.x;
    }

    private void b(ac ac1) {
        b.c("Remembering the current response.", new Object[0]);
        y = org.littleshoot.proxy.impl.j.a(ac1);
    }

    static TransportProtocol c(i i1) {
        return i1.l;
    }

    private void c(w w1) {
        a.a(this, r, x, y, w1);
    }

    static z d(i i1) {
        return i1.v;
    }

    static InetSocketAddress e(i i1) {
        return i1.n;
    }

    static InetSocketAddress f(i i1) {
        return i1.m;
    }

    static b g(i i1) {
        return i1.p;
    }

    static org.littleshoot.proxy.impl.b h(i i1) {
        return i1.a;
    }

    static org.littleshoot.proxy.i i(i i1) {
        return i1.r;
    }

    private void v() {
        b.c("Remembering the current request.", new Object[0]);
        if (!w.isEmpty()) {
            x = (z)w.remove();
            if (x == null)
                b.a("Got null HTTP request object.", new Object[0]);
        } else {
            b.c("Request queue is empty!", new Object[0]);
        }
    }

    private void w() {
        s = (new org.littleshoot.proxy.impl.c(a, this, u)).a(A);
        if (p != null && p.requiresEncryption())
            s.a(k.a(p.newSslEngine()));
        if (org.littleshoot.proxy.impl.j.c(v)) {
            if (k())
                s.a(k.B);
            boolean flag;
            if (c.l() != null)
                flag = true;
            else
                flag = false;
            if (flag) {
                HostAndPort hostandport = HostAndPort.b(o);
                if (t)
                    s.a(k.a(c.l().serverSslEngine()));
                else
                    s.a(k.a(c.l().serverSslEngine(hostandport.a(), hostandport.c())));
                s.a(a.a).a(k.C);
            } else {
                s.a(k.j).a(a.a).a(a.j);
            }
        }
    }

    private void x() {
        e.b().a(this);
        e.l();
        e = null;
        y();
    }

    private void y() {
        if (p == null || p == c.FALLBACK_TO_DIRECT_CONNECTION) goto _L2; else goto _L1
_L1:
        l = p.getTransportProtocol();
        m = p.getChainedProxyAddress();
        n = p.getLocalAddress();
_L4:
        return;
_L2:
        l = TransportProtocol.a;
        m = r.proxyToServerResolutionStarted(o);
        String s2 = null;
        String s1 = s2;
        try {
            if (m != null)
                break; /* Loop/switch isn't completed */
        }
        catch (UnknownHostException unknownhostexception) {
            r.proxyToServerResolutionFailed(s1);
            throw unknownhostexception;
        }
        s1 = s2;
        s2 = o;
        s1 = s2;
        m = a(o, c);
_L6:
        r.proxyToServerResolutionSucceeded(o, m);
        n = c.i();
        if (true) goto _L4; else goto _L3
_L3:
        s1 = s2;
        if (!m.isUnresolved()) goto _L6; else goto _L5
_L5:
        s1 = s2;
        s2 = HostAndPort.a(m.getHostName(), m.getPort()).toString();
        s1 = s2;
        m = c.h().resolve(m.getHostName(), m.getPort());
          goto _L6
    }

    protected ConnectionState a(ac ac1) {
        b.c("Received raw response: {}", new Object[] {
            ac1
        });
        r.serverToProxyResponseReceiving();
        b(ac1);
        c(ac1);
        if (org.littleshoot.proxy.impl.j.b(ac1)) {
            ac1 = org.littleshoot.proxy.impl.ConnectionState.g;
        } else {
            r.serverToProxyResponseReceived();
            ac1 = ConnectionState.f;
        }
        return ac1;
    }

    protected volatile ConnectionState a(w w1) {
        return a((ac)w1);
    }

    protected void a(io.netty.buffer.h h1) {
        a.c(h1);
    }

    protected void a(n n1) {
        c(n1);
    }

    void a(Object obj, org.littleshoot.proxy.i i1) {
        r = i1;
        c(obj);
    }

    protected void a(Throwable throwable) {
        if (!(throwable instanceof IOException)) goto _L2; else goto _L1
_L1:
        org.littleshoot.proxy.impl.g g1 = b;
        StringBuilder stringbuilder1 = JVM INSTR new #491 <Class StringBuilder>;
        stringbuilder1.StringBuilder();
        g1.b(stringbuilder1.append("An IOException occurred on ProxyToServerConnection: ").append(throwable.getMessage()).toString(), new Object[0]);
        b.d("An IOException occurred on ProxyToServerConnection", throwable);
_L3:
        if (!a(ConnectionState.i)) {
            b.b("Disconnecting open connection to server", new Object[0]);
            l();
        }
        return;
_L2:
        if (!(throwable instanceof RejectedExecutionException))
            break MISSING_BLOCK_LABEL_177;
        org.littleshoot.proxy.impl.g g2 = b;
        StringBuilder stringbuilder = JVM INSTR new #491 <Class StringBuilder>;
        stringbuilder.StringBuilder();
        g2.b(stringbuilder.append("An executor rejected a read or write operation on the ProxyToServerConnection (this is normal if the proxy is shutting down). Message: ").append(throwable.getMessage()).toString(), new Object[0]);
        b.d("A RejectedExecutionException occurred on ProxyToServerConnection", throwable);
          goto _L3
        throwable;
        if (!a(ConnectionState.i)) {
            b.b("Disconnecting open connection to server", new Object[0]);
            l();
        }
        throw throwable;
        b.a("Caught an exception on ProxyToServerConnection", throwable);
          goto _L3
    }

    void a(boolean flag) {
        b(ConnectionState.f);
        if (p != null)
            try {
                p.connectionSucceeded();
            }
            catch (Exception exception) {
                b.a("Unable to record connectionSucceeded", exception);
            }
        a.a(this, flag);
        if (flag) {
            b.c("Writing initial request: {}", new Object[] {
                v
            });
            c(v);
        } else {
            b.c("Dropping initial request: {}", new Object[] {
                v
            });
        }
    }

    protected void b(w w1) {
        if (p != null)
            p.filterRequest(w1);
        if (w1 instanceof z) {
            z z1 = (z)w1;
            w.add(z1);
        }
        super.b(w1);
    }

    protected void b(Object obj) {
        if (n()) {
            b.c("In the middle of connecting, forwarding message to connection flow: {}", new Object[] {
                obj
            });
            s.a(obj);
        } else {
            super.b(obj);
        }
    }

    protected void b(ConnectionState connectionstate) {
        if (o() != ConnectionState.i || connectionstate != ConnectionState.a) goto _L2; else goto _L1
_L1:
        r.proxyToServerConnectionStarted();
_L4:
        super.b(connectionstate);
        return;
_L2:
        if (o() == ConnectionState.a) {
            if (connectionstate == org.littleshoot.proxy.impl.ConnectionState.b)
                r.proxyToServerConnectionSSLHandshakeStarted();
            else
            if (connectionstate == ConnectionState.f)
                r.proxyToServerConnectionSucceeded(e);
            else
            if (connectionstate == ConnectionState.i)
                r.proxyToServerConnectionFailed();
        } else
        if (o() == org.littleshoot.proxy.impl.ConnectionState.b) {
            if (connectionstate == ConnectionState.f)
                r.proxyToServerConnectionSucceeded(e);
            else
            if (connectionstate == ConnectionState.i)
                r.proxyToServerConnectionFailed();
        } else
        if (o() == org.littleshoot.proxy.impl.ConnectionState.g && connectionstate != org.littleshoot.proxy.impl.ConnectionState.g)
            r.serverToProxyResponseReceived();
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected boolean b(Throwable throwable) {
        boolean flag;
        if (!t && (throwable instanceof SSLProtocolException) && throwable.getMessage() != null && throwable.getMessage().contains("unrecognized_name")) {
            b.c("Failed to connect to server due to an unrecognized_name SSL warning. Retrying connection without SNI.", new Object[0]);
            t = true;
            x();
            a(v);
            flag = true;
        } else {
            t = false;
            if (p != null) {
                b.c("Connection to upstream server via chained proxy failed", throwable);
                p.connectionFailed(throwable);
            } else {
                b.c("Connection to upstream server failed", throwable);
            }
            p = (b)q.poll();
            if (p != null) {
                b.b("Retrying connecting using the next available chained proxy", new Object[0]);
                x();
                a(v);
                flag = true;
            } else {
                flag = false;
            }
        }
        return flag;
    }

    protected void c() {
        super.c();
        a.c();
    }

    void c(Object obj) {
        b.c("Requested write of {}", new Object[] {
            obj
        });
        if (obj instanceof io.netty.util.i) {
            b.c("Retaining reference counted message", new Object[0]);
            ((io.netty.util.i)obj).C();
        }
        if (!a(ConnectionState.i) || !(obj instanceof z)) goto _L2; else goto _L1
_L1:
        b.c("Currently disconnected, connect and then write the message", new Object[0]);
        a((z)obj);
_L5:
        return;
_L2:
        if (!n())
            break MISSING_BLOCK_LABEL_142;
        Object obj1 = u;
        obj1;
        JVM INSTR monitorenter ;
        if (!n())
            break MISSING_BLOCK_LABEL_141;
        b.c("Attempted to write while still in the process of connecting, waiting for connection.", new Object[0]);
        a.p();
        u.wait(30000L);
_L3:
        InterruptedException interruptedexception;
        if (n() || o().b()) {
            b.c("Connection failed or timed out while waiting to write message to server. Message will be discarded: {}", new Object[] {
                obj
            });
        } else {
            b.c("Using existing connection to: {}", new Object[] {
                m
            });
            d(obj);
        }
        continue; /* Loop/switch isn't completed */
        interruptedexception;
        b.a("Interrupted while waiting for connect monitor", new Object[0]);
          goto _L3
        obj;
        obj1;
        JVM INSTR monitorexit ;
        throw obj;
        if (true) goto _L5; else goto _L4
_L4:
    }

    protected void d() {
        super.d();
        if (p != null)
            try {
                p.disconnected();
            }
            catch (Exception exception) {
                b.a("Unable to record connectionFailed", exception);
            }
        a.b(this);
    }

    protected void e() {
        super.e();
        a.c(this);
    }

    public volatile void e(io.netty.channel.k k1) {
        super.e(k1);
    }

    protected void f() {
        super.f();
        a.d(this);
    }

    public InetSocketAddress g() {
        return m;
    }

    public String h() {
        return o;
    }

    public volatile void h(io.netty.channel.k k1) {
        super.h(k1);
    }

    public volatile SSLEngine i() {
        return super.i();
    }

    public volatile boolean j() {
        return super.j();
    }

    public boolean k() {
        boolean flag;
        if (s() != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public InetSocketAddress s() {
        InetSocketAddress inetsocketaddress;
        if (p == null)
            inetsocketaddress = null;
        else
            inetsocketaddress = p.getChainedProxyAddress();
        return inetsocketaddress;
    }

    public b t() {
        return p;
    }

    public z u() {
        return v;
    }
}
