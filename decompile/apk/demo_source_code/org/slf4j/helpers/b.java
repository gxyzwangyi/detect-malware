// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.slf4j.helpers;

import java.util.HashMap;
import java.util.Map;

// Referenced classes of package org.slf4j.helpers:
//            a, f

public final class b {

    static final Throwable a(Object aobj[]) {
        if (aobj == null || aobj.length == 0) {
            aobj = null;
        } else {
            aobj = ((Object []) (aobj[aobj.length - 1]));
            if (aobj instanceof Throwable)
                aobj = (Throwable)aobj;
            else
                aobj = null;
        }
        return ((Throwable) (aobj));
    }

    public static final a a(String s, Object aobj[]) {
        Throwable throwable = a(aobj);
        Object aobj1[] = aobj;
        if (throwable != null)
            aobj1 = b(aobj);
        return a(s, aobj1, throwable);
    }

    public static final a a(String s, Object aobj[], Throwable throwable) {
        int j = 0;
        if (s != null) goto _L2; else goto _L1
_L1:
        s = new a(null, aobj, throwable);
_L4:
        return s;
_L2:
        if (aobj == null) {
            s = new a(s);
            continue; /* Loop/switch isn't completed */
        }
        StringBuilder stringbuilder = new StringBuilder(s.length() + 50);
        int i = 0;
        do {
            if (j >= aobj.length)
                break;
            int k = s.indexOf("{}", i);
            if (k == -1) {
                if (i == 0) {
                    s = new a(s, aobj, throwable);
                } else {
                    stringbuilder.append(s, i, s.length());
                    s = new a(stringbuilder.toString(), aobj, throwable);
                }
                continue; /* Loop/switch isn't completed */
            }
            if (a(s, k)) {
                if (!b(s, k)) {
                    j--;
                    stringbuilder.append(s, i, k - 1);
                    stringbuilder.append('{');
                    i = k + 1;
                } else {
                    stringbuilder.append(s, i, k - 1);
                    a(stringbuilder, aobj[j], ((Map) (new HashMap())));
                    i = k + 2;
                }
            } else {
                stringbuilder.append(s, i, k);
                a(stringbuilder, aobj[j], ((Map) (new HashMap())));
                i = k + 2;
            }
            j++;
        } while (true);
        stringbuilder.append(s, i, s.length());
        s = new a(stringbuilder.toString(), aobj, throwable);
        if (true) goto _L4; else goto _L3
_L3:
    }

    private static void a(StringBuilder stringbuilder, Object obj) {
        stringbuilder.append(obj.toString());
_L1:
        return;
        Throwable throwable;
        throwable;
        f.a((new StringBuilder()).append("SLF4J: Failed toString() invocation on an object of type [").append(obj.getClass().getName()).append("]").toString(), throwable);
        stringbuilder.append("[FAILED toString()]");
          goto _L1
    }

    private static void a(StringBuilder stringbuilder, Object obj, Map map) {
        if (obj == null)
            stringbuilder.append("null");
        else
        if (!obj.getClass().isArray())
            a(stringbuilder, obj);
        else
        if (obj instanceof boolean[])
            a(stringbuilder, (boolean[])(boolean[])obj);
        else
        if (obj instanceof byte[])
            a(stringbuilder, (byte[])(byte[])obj);
        else
        if (obj instanceof char[])
            a(stringbuilder, (char[])(char[])obj);
        else
        if (obj instanceof short[])
            a(stringbuilder, (short[])(short[])obj);
        else
        if (obj instanceof int[])
            a(stringbuilder, (int[])(int[])obj);
        else
        if (obj instanceof long[])
            a(stringbuilder, (long[])(long[])obj);
        else
        if (obj instanceof float[])
            a(stringbuilder, (float[])(float[])obj);
        else
        if (obj instanceof double[])
            a(stringbuilder, (double[])(double[])obj);
        else
            a(stringbuilder, (Object[])(Object[])obj, map);
    }

    private static void a(StringBuilder stringbuilder, byte abyte0[]) {
        stringbuilder.append('[');
        int j = abyte0.length;
        for (int i = 0; i < j; i++) {
            stringbuilder.append(abyte0[i]);
            if (i != j - 1)
                stringbuilder.append(", ");
        }

        stringbuilder.append(']');
    }

    private static void a(StringBuilder stringbuilder, char ac[]) {
        stringbuilder.append('[');
        int j = ac.length;
        for (int i = 0; i < j; i++) {
            stringbuilder.append(ac[i]);
            if (i != j - 1)
                stringbuilder.append(", ");
        }

        stringbuilder.append(']');
    }

    private static void a(StringBuilder stringbuilder, double ad[]) {
        stringbuilder.append('[');
        int j = ad.length;
        for (int i = 0; i < j; i++) {
            stringbuilder.append(ad[i]);
            if (i != j - 1)
                stringbuilder.append(", ");
        }

        stringbuilder.append(']');
    }

    private static void a(StringBuilder stringbuilder, float af[]) {
        stringbuilder.append('[');
        int j = af.length;
        for (int i = 0; i < j; i++) {
            stringbuilder.append(af[i]);
            if (i != j - 1)
                stringbuilder.append(", ");
        }

        stringbuilder.append(']');
    }

    private static void a(StringBuilder stringbuilder, int ai[]) {
        stringbuilder.append('[');
        int j = ai.length;
        for (int i = 0; i < j; i++) {
            stringbuilder.append(ai[i]);
            if (i != j - 1)
                stringbuilder.append(", ");
        }

        stringbuilder.append(']');
    }

    private static void a(StringBuilder stringbuilder, long al[]) {
        stringbuilder.append('[');
        int j = al.length;
        for (int i = 0; i < j; i++) {
            stringbuilder.append(al[i]);
            if (i != j - 1)
                stringbuilder.append(", ");
        }

        stringbuilder.append(']');
    }

    private static void a(StringBuilder stringbuilder, Object aobj[], Map map) {
        stringbuilder.append('[');
        if (!map.containsKey(((Object) (aobj)))) {
            map.put(((Object) (aobj)), null);
            int j = aobj.length;
            for (int i = 0; i < j; i++) {
                a(stringbuilder, aobj[i], map);
                if (i != j - 1)
                    stringbuilder.append(", ");
            }

            map.remove(((Object) (aobj)));
        } else {
            stringbuilder.append("...");
        }
        stringbuilder.append(']');
    }

    private static void a(StringBuilder stringbuilder, short aword0[]) {
        stringbuilder.append('[');
        int j = aword0.length;
        for (int i = 0; i < j; i++) {
            stringbuilder.append(aword0[i]);
            if (i != j - 1)
                stringbuilder.append(", ");
        }

        stringbuilder.append(']');
    }

    private static void a(StringBuilder stringbuilder, boolean aflag[]) {
        stringbuilder.append('[');
        int j = aflag.length;
        for (int i = 0; i < j; i++) {
            stringbuilder.append(aflag[i]);
            if (i != j - 1)
                stringbuilder.append(", ");
        }

        stringbuilder.append(']');
    }

    static final boolean a(String s, int i) {
        boolean flag;
        flag = false;
        break MISSING_BLOCK_LABEL_2;
        if (i != 0 && s.charAt(i - 1) == '\\')
            flag = true;
        return flag;
    }

    static final boolean b(String s, int i) {
        boolean flag;
        if (i >= 2 && s.charAt(i - 2) == '\\')
            flag = true;
        else
            flag = false;
        return flag;
    }

    private static Object[] b(Object aobj[]) {
        if (aobj == null || aobj.length == 0) {
            throw new IllegalStateException("non-sensical empty or null argument array");
        } else {
            int i = aobj.length - 1;
            Object aobj1[] = new Object[i];
            System.arraycopy(((Object) (aobj)), 0, ((Object) (aobj1)), 0, i);
            return aobj1;
        }
    }
}
