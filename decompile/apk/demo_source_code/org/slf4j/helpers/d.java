// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.slf4j.helpers;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Queue;
import org.slf4j.b;
import org.slf4j.event.a;

// Referenced classes of package org.slf4j.helpers:
//            NOPLogger

public class d
    implements b {

    private final String a;
    private volatile b b;
    private Boolean c;
    private Method d;
    private a e;
    private Queue f;
    private final boolean g;

    public d(String s, Queue queue, boolean flag) {
        a = s;
        f = queue;
        g = flag;
    }

    private b j() {
        if (e == null)
            e = new a(this, f);
        return e;
    }

    public String a() {
        return a;
    }

    public void a(String s) {
        f().a(s);
    }

    public void a(String s, Object obj) {
        f().a(s, obj);
    }

    public void a(String s, Object obj, Object obj1) {
        f().a(s, obj, obj1);
    }

    public void a(String s, Throwable throwable) {
        f().a(s, throwable);
    }

    public transient void a(String s, Object aobj[]) {
        f().a(s, aobj);
    }

    public void a(b b1) {
        b = b1;
    }

    public void a(org.slf4j.event.b b1) {
        if (!g())
            break MISSING_BLOCK_LABEL_27;
        d.invoke(b, new Object[] {
            b1
        });
_L2:
        return;
        b1;
        continue; /* Loop/switch isn't completed */
        b1;
        continue; /* Loop/switch isn't completed */
        b1;
        if (true) goto _L2; else goto _L1
_L1:
    }

    public void b(String s) {
        f().b(s);
    }

    public void b(String s, Object obj) {
        f().b(s, obj);
    }

    public void b(String s, Object obj, Object obj1) {
        f().b(s, obj, obj1);
    }

    public void b(String s, Throwable throwable) {
        f().b(s, throwable);
    }

    public transient void b(String s, Object aobj[]) {
        f().b(s, aobj);
    }

    public boolean b() {
        return f().b();
    }

    public void c(String s) {
        f().c(s);
    }

    public void c(String s, Object obj) {
        f().c(s, obj);
    }

    public void c(String s, Object obj, Object obj1) {
        f().c(s, obj, obj1);
    }

    public void c(String s, Throwable throwable) {
        f().c(s, throwable);
    }

    public transient void c(String s, Object aobj[]) {
        f().c(s, aobj);
    }

    public boolean c() {
        return f().c();
    }

    public void d(String s) {
        f().d(s);
    }

    public void d(String s, Object obj) {
        f().d(s, obj);
    }

    public void d(String s, Object obj, Object obj1) {
        f().d(s, obj, obj1);
    }

    public void d(String s, Throwable throwable) {
        f().d(s, throwable);
    }

    public transient void d(String s, Object aobj[]) {
        f().d(s, aobj);
    }

    public boolean d() {
        return f().d();
    }

    public void e(String s, Object obj) {
        f().e(s, obj);
    }

    public void e(String s, Object obj, Object obj1) {
        f().e(s, obj, obj1);
    }

    public transient void e(String s, Object aobj[]) {
        f().e(s, aobj);
    }

    public boolean e() {
        return f().e();
    }

    public boolean equals(Object obj) {
        boolean flag = true;
        if (this != obj) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        if (obj == null || getClass() != obj.getClass()) {
            flag = false;
        } else {
            obj = (d)obj;
            if (!a.equals(((d) (obj)).a))
                flag = false;
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    b f() {
        Object obj;
        if (b != null)
            obj = b;
        else
        if (g)
            obj = org.slf4j.helpers.NOPLogger.a;
        else
            obj = j();
        return ((b) (obj));
    }

    public boolean g() {
        boolean flag;
        if (c != null) {
            flag = c.booleanValue();
        } else {
            try {
                d = b.getClass().getMethod("log", new Class[] {
                    org/slf4j/event/b
                });
                c = Boolean.TRUE;
            }
            catch (NoSuchMethodException nosuchmethodexception) {
                c = Boolean.FALSE;
            }
            flag = c.booleanValue();
        }
        return flag;
    }

    public boolean h() {
        boolean flag;
        if (b == null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public int hashCode() {
        return a.hashCode();
    }

    public boolean i() {
        return b instanceof NOPLogger;
    }
}
