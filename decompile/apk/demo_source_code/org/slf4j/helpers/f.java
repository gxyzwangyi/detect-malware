// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.slf4j.helpers;

import java.io.PrintStream;

public final class f {
    private static final class a extends SecurityManager {

        protected Class[] getClassContext() {
            return super.getClassContext();
        }

        private a() {
        }

    }


    private static a a;
    private static boolean b = false;

    private f() {
    }

    public static Class a() {
        Object obj = b();
        if (obj == null) {
            obj = null;
        } else {
            obj = ((a) (obj)).getClassContext();
            String s = org/slf4j/helpers/f.getName();
            int i = 0;
            do {
                if (i >= obj.length || s.equals(obj[i].getName())) {
                    if (i >= obj.length || i + 2 >= obj.length)
                        throw new IllegalStateException("Failed to find org.slf4j.helpers.Util or its caller in the stack; this should not happen");
                    break;
                }
                i++;
            } while (true);
            obj = obj[i + 2];
        }
        return ((Class) (obj));
    }

    public static String a(String s) {
        if (s == null)
            throw new IllegalArgumentException("null input");
        Object obj = null;
        try {
            s = System.getProperty(s);
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            s = obj;
        }
        return s;
    }

    public static final void a(String s, Throwable throwable) {
        System.err.println(s);
        System.err.println("Reported exception:");
        throwable.printStackTrace();
    }

    private static a b() {
        a a1;
        if (a != null)
            a1 = a;
        else
        if (b) {
            a1 = null;
        } else {
            a = c();
            b = true;
            a1 = a;
        }
        return a1;
    }

    public static boolean b(String s) {
        s = a(s);
        boolean flag;
        if (s == null)
            flag = false;
        else
            flag = s.equalsIgnoreCase("true");
        return flag;
    }

    private static a c() {
        a a1;
        try {
            a1 = JVM INSTR new #8   <Class f$a>;
            a1.a();
        }
        catch (SecurityException securityexception) {
            securityexception = null;
        }
        return a1;
    }

    public static final void c(String s) {
        System.err.println((new StringBuilder()).append("SLF4J: ").append(s).toString());
    }

}
