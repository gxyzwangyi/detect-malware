// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.slf4j;

import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.LinkedBlockingQueue;
import org.slf4j.helpers.d;
import org.slf4j.helpers.e;
import org.slf4j.helpers.f;
import org.slf4j.impl.StaticLoggerBinder;

// Referenced classes of package org.slf4j:
//            b, a

public final class c {

    static volatile int a = 0;
    static e b = new e();
    static org.slf4j.helpers.c c = new org.slf4j.helpers.c();
    static boolean d = org.slf4j.helpers.f.b("slf4j.detectLoggerNameMismatch");
    private static final String e[] = {
        "1.6", "1.7"
    };
    private static String f = "org/slf4j/impl/StaticLoggerBinder.class";

    private c() {
    }

    static Set a() {
        LinkedHashSet linkedhashset = new LinkedHashSet();
        Object obj = org/slf4j/c.getClassLoader();
        if (obj != null)
            break MISSING_BLOCK_LABEL_62;
_L1:
        try {
            for (obj = ClassLoader.getSystemResources(f); ((Enumeration) (obj)).hasMoreElements(); linkedhashset.add((URL)((Enumeration) (obj)).nextElement()));
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            org.slf4j.helpers.f.a("Error getting resources from path", ((Throwable) (obj)));
        }
        return linkedhashset;
        obj = ((ClassLoader) (obj)).getResources(f);
          goto _L1
    }

    public static b a(Class class1) {
        b b1 = a(class1.getName());
        if (d) {
            Class class2 = org.slf4j.helpers.f.a();
            if (class2 != null && a(class1, class2)) {
                org.slf4j.helpers.f.c(String.format("Detected logger name mismatch. Given name: \"%s\"; computed name: \"%s\".", new Object[] {
                    b1.a(), class2.getName()
                }));
                org.slf4j.helpers.f.c("See http://www.slf4j.org/codes.html#loggerNameMismatch for an explanation");
            }
        }
        return b1;
    }

    public static b a(String s) {
        return b().a(s);
    }

    private static void a(int j) {
        org.slf4j.helpers.f.c((new StringBuilder()).append("A number (").append(j).append(") of logging calls during the initialization phase have been intercepted and are").toString());
        org.slf4j.helpers.f.c("now being replayed. These are subject to the filtering rules of the underlying logging system.");
        org.slf4j.helpers.f.c("See also http://www.slf4j.org/codes.html#replay");
    }

    static void a(Throwable throwable) {
        a = 2;
        org.slf4j.helpers.f.a("Failed to instantiate SLF4J LoggerFactory", throwable);
    }

    private static void a(org.slf4j.event.c c1) {
        if (c1 != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        d d1 = c1.a();
        String s = d1.a();
        if (d1.h())
            throw new IllegalStateException("Delegate logger cannot be null at this state.");
        if (!d1.i())
            if (d1.g())
                d1.a(c1);
            else
                org.slf4j.helpers.f.c(s);
        if (true) goto _L1; else goto _L3
_L3:
    }

    private static void a(org.slf4j.event.c c1, int j) {
        if (!c1.a().g()) goto _L2; else goto _L1
_L1:
        a(j);
_L4:
        return;
_L2:
        if (!c1.a().i())
            g();
        if (true) goto _L4; else goto _L3
_L3:
    }

    private static boolean a(Class class1, Class class2) {
        boolean flag;
        if (!class2.isAssignableFrom(class1))
            flag = true;
        else
            flag = false;
        return flag;
    }

    private static boolean a(Set set) {
        boolean flag = true;
        if (set.size() <= 1)
            flag = false;
        return flag;
    }

    public static a b() {
        if (a != 0) goto _L2; else goto _L1
_L1:
        org/slf4j/c;
        JVM INSTR monitorenter ;
        if (a == 0) {
            a = 1;
            c();
        }
        org/slf4j/c;
        JVM INSTR monitorexit ;
_L2:
        a;
        JVM INSTR tableswitch 1 4: default 60
    //                   1 102
    //                   2 92
    //                   3 76
    //                   4 85;
           goto _L3 _L4 _L5 _L6 _L7
_L3:
        throw new IllegalStateException("Unreachable code");
        Exception exception;
        exception;
        org/slf4j/c;
        JVM INSTR monitorexit ;
        throw exception;
_L6:
        Object obj = StaticLoggerBinder.getSingleton().getLoggerFactory();
_L9:
        return ((a) (obj));
_L7:
        obj = c;
        continue; /* Loop/switch isn't completed */
_L5:
        throw new IllegalStateException("org.slf4j.LoggerFactory could not be successfully initialized. See also http://www.slf4j.org/codes.html#unsuccessfulInit");
_L4:
        obj = b;
        if (true) goto _L9; else goto _L8
_L8:
    }

    private static void b(Set set) {
        if (a(set)) {
            org.slf4j.helpers.f.c("Class path contains multiple SLF4J bindings.");
            for (Iterator iterator = set.iterator(); iterator.hasNext(); org.slf4j.helpers.f.c((new StringBuilder()).append("Found binding in [").append(set).append("]").toString()))
                set = (URL)iterator.next();

            org.slf4j.helpers.f.c("See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.");
        }
    }

    private static boolean b(String s) {
        boolean flag = false;
        if (s != null) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        if (s.contains("org/slf4j/impl/StaticLoggerBinder"))
            flag = true;
        else
        if (s.contains("org.slf4j.impl.StaticLoggerBinder"))
            flag = true;
        if (true) goto _L1; else goto _L3
_L3:
    }

    private static final void c() {
        d();
        if (a == 3)
            h();
    }

    private static void c(Set set) {
        if (set != null && a(set))
            org.slf4j.helpers.f.c((new StringBuilder()).append("Actual binding is of type [").append(StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr()).append("]").toString());
    }

    private static final void d() {
        Set set = null;
        if (!i()) {
            set = a();
            b(set);
        }
        StaticLoggerBinder.getSingleton();
        a = 3;
        c(set);
        e();
        f();
        b.d();
_L1:
        return;
        Object obj;
        obj;
        if (b(((NoClassDefFoundError) (obj)).getMessage())) {
            a = 4;
            org.slf4j.helpers.f.c("Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".");
            org.slf4j.helpers.f.c("Defaulting to no-operation (NOP) logger implementation");
            org.slf4j.helpers.f.c("See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.");
        } else {
            a(((Throwable) (obj)));
            throw obj;
        }
          goto _L1
        obj;
        String s = ((NoSuchMethodError) (obj)).getMessage();
        if (s != null && s.contains("org.slf4j.impl.StaticLoggerBinder.getSingleton()")) {
            a = 2;
            org.slf4j.helpers.f.c("slf4j-api 1.6.x (or later) is incompatible with this binding.");
            org.slf4j.helpers.f.c("Your binding is version 1.5.5 or earlier.");
            org.slf4j.helpers.f.c("Upgrade your binding to version 1.6.x.");
        }
        throw obj;
        obj;
        a(((Throwable) (obj)));
        throw new IllegalStateException("Unexpected initialization failure", ((Throwable) (obj)));
    }

    private static void e() {
        e e1 = b;
        e1;
        JVM INSTR monitorenter ;
        b.c();
        d d1;
        for (Iterator iterator = b.a().iterator(); iterator.hasNext(); d1.a(a(d1.a())))
            d1 = (d)iterator.next();

        break MISSING_BLOCK_LABEL_62;
        Exception exception;
        exception;
        e1;
        JVM INSTR monitorexit ;
        throw exception;
        e1;
        JVM INSTR monitorexit ;
    }

    private static void f() {
        LinkedBlockingQueue linkedblockingqueue = b.b();
        int k = linkedblockingqueue.size();
        int j = 0;
        ArrayList arraylist = new ArrayList(128);
        do {
            if (linkedblockingqueue.drainTo(arraylist, 128) == 0)
                return;
            for (Iterator iterator = arraylist.iterator(); iterator.hasNext();) {
                org.slf4j.event.c c1 = (org.slf4j.event.c)iterator.next();
                a(c1);
                if (j == 0)
                    a(c1, k);
                j++;
            }

            arraylist.clear();
        } while (true);
    }

    private static void g() {
        org.slf4j.helpers.f.c("The following set of substitute loggers may have been accessed");
        org.slf4j.helpers.f.c("during the initialization phase. Logging calls during this");
        org.slf4j.helpers.f.c("phase were not honored. However, subsequent logging calls to these");
        org.slf4j.helpers.f.c("loggers will work as normally expected.");
        org.slf4j.helpers.f.c("See also http://www.slf4j.org/codes.html#substituteLogger");
    }

    private static final void h() {
        boolean flag = false;
        int k;
        String s;
        String as[];
        s = StaticLoggerBinder.REQUESTED_API_VERSION;
        as = e;
        k = as.length;
        int j = 0;
_L3:
        if (j >= k) goto _L2; else goto _L1
_L1:
        if (s.startsWith(as[j]))
            flag = true;
        j++;
          goto _L3
_L2:
        if (flag)
            break MISSING_BLOCK_LABEL_97;
        StringBuilder stringbuilder = JVM INSTR new #140 <Class StringBuilder>;
        stringbuilder.StringBuilder();
        org.slf4j.helpers.f.c(stringbuilder.append("The requested version ").append(s).append(" by your slf4j binding is not compatible with ").append(Arrays.asList(e).toString()).toString());
        org.slf4j.helpers.f.c("See http://www.slf4j.org/codes.html#version_mismatch for further details.");
_L5:
        return;
        Object obj;
        obj;
        org.slf4j.helpers.f.a("Unexpected problem occured during version sanity check", ((Throwable) (obj)));
        continue; /* Loop/switch isn't completed */
        obj;
        if (true) goto _L5; else goto _L4
_L4:
    }

    private static boolean i() {
        String s = org.slf4j.helpers.f.a("java.vendor.url");
        boolean flag;
        if (s == null)
            flag = false;
        else
            flag = s.toLowerCase().contains("android");
        return flag;
    }

}
