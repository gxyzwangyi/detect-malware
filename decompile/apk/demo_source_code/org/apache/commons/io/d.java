// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.apache.commons.io;

import java.io.*;
import java.nio.charset.Charset;
import org.apache.commons.io.output.StringBuilderWriter;

// Referenced classes of package org.apache.commons.io:
//            a

public class d {

    public static final char a;
    public static final String b;

    public static int a(InputStream inputstream, OutputStream outputstream) {
        long l = b(inputstream, outputstream);
        int i;
        if (l > 0x7fffffffL)
            i = -1;
        else
            i = (int)l;
        return i;
    }

    public static long a(InputStream inputstream, OutputStream outputstream, byte abyte0[]) {
        long l = 0L;
        do {
            int i = inputstream.read(abyte0);
            if (-1 != i) {
                outputstream.write(abyte0, 0, i);
                l += i;
            } else {
                return l;
            }
        } while (true);
    }

    public static void a(Closeable closeable) {
        if (closeable == null)
            break MISSING_BLOCK_LABEL_10;
        closeable.close();
_L2:
        return;
        closeable;
        if (true) goto _L2; else goto _L1
_L1:
    }

    public static void a(InputStream inputstream) {
        a(((Closeable) (inputstream)));
    }

    public static void a(OutputStream outputstream) {
        a(((Closeable) (outputstream)));
    }

    public static void a(String s, OutputStream outputstream, Charset charset) {
        if (s != null)
            outputstream.write(s.getBytes(org.apache.commons.io.a.a(charset)));
    }

    public static byte[] a(InputStream inputstream, int i) {
        int j = 0;
        if (i < 0)
            throw new IllegalArgumentException((new StringBuilder()).append("Size must be equal or greater than zero: ").append(i).toString());
        if (i == 0) {
            inputstream = new byte[0];
        } else {
            byte abyte0[] = new byte[i];
            do {
                if (j >= i)
                    break;
                int k = inputstream.read(abyte0, j, i - j);
                if (k == -1)
                    break;
                j += k;
            } while (true);
            inputstream = abyte0;
            if (j != i)
                throw new IOException((new StringBuilder()).append("Unexpected readed size. current: ").append(j).append(", excepted: ").append(i).toString());
        }
        return inputstream;
    }

    public static byte[] a(InputStream inputstream, long l) {
        if (l > 0x7fffffffL)
            throw new IllegalArgumentException((new StringBuilder()).append("Size cannot be greater than Integer max value: ").append(l).toString());
        else
            return a(inputstream, (int)l);
    }

    public static long b(InputStream inputstream, OutputStream outputstream) {
        return a(inputstream, outputstream, new byte[4096]);
    }

    static  {
        a = File.separatorChar;
        StringBuilderWriter stringbuilderwriter = new StringBuilderWriter(4);
        PrintWriter printwriter = new PrintWriter(stringbuilderwriter);
        printwriter.println();
        b = stringbuilderwriter.toString();
        printwriter.close();
    }
}
