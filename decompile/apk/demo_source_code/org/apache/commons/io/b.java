// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.apache.commons.io;

import java.io.*;
import java.math.BigInteger;
import java.nio.charset.Charset;

// Referenced classes of package org.apache.commons.io:
//            d, c

public class b {

    public static final BigInteger a;
    public static final BigInteger b;
    public static final BigInteger c;
    public static final BigInteger d;
    public static final BigInteger e;
    public static final BigInteger f;
    public static final BigInteger g;
    public static final BigInteger h;
    public static final File i[] = new File[0];
    private static final Charset j = Charset.forName("UTF-8");

    public static FileInputStream a(File file) {
        if (file.exists()) {
            if (file.isDirectory())
                throw new IOException((new StringBuilder()).append("File '").append(file).append("' exists but is a directory").toString());
            if (!file.canRead())
                throw new IOException((new StringBuilder()).append("File '").append(file).append("' cannot be read").toString());
            else
                return new FileInputStream(file);
        } else {
            throw new FileNotFoundException((new StringBuilder()).append("File '").append(file).append("' does not exist").toString());
        }
    }

    public static FileOutputStream a(File file, boolean flag) {
        if (file.exists()) {
            if (file.isDirectory())
                throw new IOException((new StringBuilder()).append("File '").append(file).append("' exists but is a directory").toString());
            if (!file.canWrite())
                throw new IOException((new StringBuilder()).append("File '").append(file).append("' cannot be written to").toString());
        } else {
            File file1 = file.getParentFile();
            if (file1 != null && !file1.mkdirs() && !file1.isDirectory())
                throw new IOException((new StringBuilder()).append("Directory '").append(file1).append("' could not be created").toString());
        }
        return new FileOutputStream(file, flag);
    }

    public static void a(File file, CharSequence charsequence) {
        a(file, charsequence, Charset.defaultCharset(), false);
    }

    public static void a(File file, CharSequence charsequence, Charset charset, boolean flag) {
        if (charsequence == null)
            charsequence = null;
        else
            charsequence = charsequence.toString();
        a(file, ((String) (charsequence)), charset, flag);
    }

    public static void a(File file, String s, Charset charset, boolean flag) {
        File file1 = null;
        file = a(file, flag);
        file1 = file;
        org.apache.commons.io.d.a(s, file, charset);
        file1 = file;
        file.close();
        org.apache.commons.io.d.a(file);
        return;
        file;
        org.apache.commons.io.d.a(file1);
        throw file;
    }

    public static void a(InputStream inputstream, File file) {
        file = b(file);
        org.apache.commons.io.d.a(inputstream, file);
        file.close();
        org.apache.commons.io.d.a(file);
        org.apache.commons.io.d.a(inputstream);
        return;
        Exception exception;
        exception;
        org.apache.commons.io.d.a(file);
        throw exception;
        file;
        org.apache.commons.io.d.a(inputstream);
        throw file;
    }

    public static FileOutputStream b(File file) {
        return a(file, false);
    }

    public static void c(File file) {
        if (file.exists()) {
            if (!h(file))
                d(file);
            if (!file.delete())
                throw new IOException((new StringBuilder()).append("Unable to delete directory ").append(file).append(".").toString());
        }
    }

    public static void d(File file) {
        if (!file.exists())
            throw new IllegalArgumentException((new StringBuilder()).append(file).append(" does not exist").toString());
        if (!file.isDirectory())
            throw new IllegalArgumentException((new StringBuilder()).append(file).append(" is not a directory").toString());
        File afile[] = file.listFiles();
        if (afile == null)
            throw new IOException((new StringBuilder()).append("Failed to list contents of ").append(file).toString());
        int l = afile.length;
        file = null;
        int k = 0;
        while (k < l)  {
            File file1 = afile[k];
            try {
                f(file1);
            }
            // Misplaced declaration of an exception variable
            catch (File file) { }
            k++;
        }
        if (file != null)
            throw file;
        else
            return;
    }

    public static byte[] e(File file) {
        FileInputStream fileinputstream = null;
        FileInputStream fileinputstream1 = a(file);
        fileinputstream = fileinputstream1;
        file = org.apache.commons.io.d.a(fileinputstream1, file.length());
        org.apache.commons.io.d.a(fileinputstream1);
        return file;
        file;
        org.apache.commons.io.d.a(fileinputstream);
        throw file;
    }

    public static void f(File file) {
        if (file.isDirectory()) {
            c(file);
        } else {
            boolean flag = file.exists();
            if (!file.delete())
                if (!flag)
                    throw new FileNotFoundException((new StringBuilder()).append("File does not exist: ").append(file).toString());
                else
                    throw new IOException((new StringBuilder()).append("Unable to delete file: ").append(file).toString());
        }
    }

    public static void g(File file) {
        if (file.exists()) {
            if (!file.isDirectory())
                throw new IOException((new StringBuilder()).append("File ").append(file).append(" exists and is ").append("not a directory. Unable to create directory.").toString());
        } else
        if (!file.mkdirs() && !file.isDirectory())
            throw new IOException((new StringBuilder()).append("Unable to create directory ").append(file).toString());
    }

    public static boolean h(File file) {
        if (file == null)
            throw new NullPointerException("File must not be null");
        boolean flag;
        if (org.apache.commons.io.c.a()) {
            flag = false;
        } else {
            if (file.getParent() != null)
                file = new File(file.getParentFile().getCanonicalFile(), file.getName());
            if (file.getCanonicalFile().equals(file.getAbsoluteFile()))
                flag = false;
            else
                flag = true;
        }
        return flag;
    }

    static  {
        a = BigInteger.valueOf(1024L);
        b = a.multiply(a);
        c = a.multiply(b);
        d = a.multiply(c);
        e = a.multiply(d);
        f = a.multiply(e);
        g = BigInteger.valueOf(1024L).multiply(BigInteger.valueOf(0x0L));
        h = a.multiply(g);
    }
}
