// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.xbill.DNS;

import java.util.Date;
import org.xbill.DNS.a.d;

// Referenced classes of package org.xbill.DNS:
//            Record, Name, f, g, 
//            s, u, d

public class TSIGRecord extends Record {

    private Name a;
    private Date b;
    private int c;
    private byte d[];
    private int e;
    private int f;
    private byte k[];

    TSIGRecord() {
    }

    public TSIGRecord(Name name, int i, long l, Name name1, Date date, int j, 
            byte abyte0[], int i1, int j1, byte abyte1[]) {
        super(name, 250, i, l);
        a = a("alg", name1);
        b = date;
        c = a("fudge", j);
        d = abyte0;
        e = a("originalID", i1);
        f = a("error", j1);
        k = abyte1;
    }

    Record a() {
        return new TSIGRecord();
    }

    void a(f f1) {
        a = new Name(f1);
        b = new Date((((long)f1.h() << 32) + f1.i()) * 1000L);
        c = f1.h();
        d = f1.d(f1.h());
        e = f1.h();
        f = f1.h();
        int i = f1.h();
        if (i > 0)
            k = f1.d(i);
        else
            k = null;
    }

    void a(g g1, org.xbill.DNS.d d1, boolean flag) {
        a.a(g1, null, flag);
        long l = b.getTime() / 1000L;
        g1.c((int)(l >> 32));
        g1.a(l & 0xffffffffL);
        g1.c(c);
        g1.c(d.length);
        g1.a(d);
        g1.c(e);
        g1.c(f);
        if (k != null) {
            g1.c(k.length);
            g1.a(k);
        } else {
            g1.c(0);
        }
    }

    String b() {
        StringBuffer stringbuffer = new StringBuffer();
        stringbuffer.append(a);
        stringbuffer.append(" ");
        if (s.b("multiline"))
            stringbuffer.append("(\n\t");
        stringbuffer.append(b.getTime() / 1000L);
        stringbuffer.append(" ");
        stringbuffer.append(c);
        stringbuffer.append(" ");
        stringbuffer.append(d.length);
        if (s.b("multiline")) {
            stringbuffer.append("\n");
            stringbuffer.append(org.xbill.DNS.a.d.a(d, 64, "\t", false));
        } else {
            stringbuffer.append(" ");
            stringbuffer.append(org.xbill.DNS.a.d.a(d));
        }
        stringbuffer.append(" ");
        stringbuffer.append(u.b(f));
        stringbuffer.append(" ");
        if (k == null) {
            stringbuffer.append(0);
        } else {
            stringbuffer.append(k.length);
            if (s.b("multiline"))
                stringbuffer.append("\n\n\n\t");
            else
                stringbuffer.append(" ");
            if (f == 18) {
                if (k.length != 6) {
                    stringbuffer.append("<invalid BADTIME other data>");
                } else {
                    long l2 = k[0] & 0xff;
                    long l = k[1] & 0xff;
                    long l3 = (k[2] & 0xff) << 24;
                    long l1 = (k[3] & 0xff) << 16;
                    long l4 = (k[4] & 0xff) << 8;
                    long l5 = k[5] & 0xff;
                    stringbuffer.append("<server time: ");
                    stringbuffer.append(new Date(((l2 << 40) + (l << 32) + l3 + l1 + l4 + l5) * 1000L));
                    stringbuffer.append(">");
                }
            } else {
                stringbuffer.append("<");
                stringbuffer.append(org.xbill.DNS.a.d.a(k));
                stringbuffer.append(">");
            }
        }
        if (s.b("multiline"))
            stringbuffer.append(" )");
        return stringbuffer.toString();
    }

    public Name d() {
        return a;
    }

    public Date e() {
        return b;
    }

    public int f() {
        return c;
    }

    public byte[] g() {
        return d;
    }

    public int p() {
        return f;
    }

    public byte[] q() {
        return k;
    }
}
