// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.xbill.DNS;

import java.io.*;
import java.lang.reflect.Method;
import java.util.*;

// Referenced classes of package org.xbill.DNS:
//            TextParseException, Name, s

public class x {

    static Class a;
    static Class b;
    private static x f;
    private String c[];
    private Name d[];
    private int e;

    public x() {
        c = null;
        d = null;
        e = -1;
        break MISSING_BLOCK_LABEL_19;
        if (!g() && !h() && (c == null || d == null)) {
            String s2 = System.getProperty("os.name");
            String s1 = System.getProperty("java.vendor");
            if (s2.indexOf("Windows") != -1) {
                if (s2.indexOf("95") != -1 || s2.indexOf("98") != -1 || s2.indexOf("ME") != -1)
                    k();
                else
                    l();
            } else
            if (s2.indexOf("NetWare") != -1)
                j();
            else
            if (s1.indexOf("Android") != -1)
                m();
            else
                i();
        }
        return;
    }

    static Class a(String s1) {
        try {
            s1 = Class.forName(s1);
        }
        // Misplaced declaration of an exception variable
        catch (String s1) {
            throw (new NoClassDefFoundError()).initCause(s1);
        }
        return s1;
    }

    private void a(int i1) {
        if (e < 0 && i1 > 0)
            e = i1;
    }

    private void a(InputStream inputstream) {
        int i1 = Integer.getInteger("org.xbill.DNS.windows.parse.buffer", 8192).intValue();
        inputstream = new BufferedInputStream(inputstream, i1);
        inputstream.mark(i1);
        a(inputstream, ((Locale) (null)));
        if (c != null)
            break MISSING_BLOCK_LABEL_60;
        inputstream.reset();
        a(inputstream, new Locale("", ""));
_L2:
        return;
        inputstream;
        if (true) goto _L2; else goto _L1
_L1:
    }

    private void a(InputStream inputstream, Locale locale) {
        boolean flag;
        boolean flag1;
        Object obj;
        String s1;
        String s2;
        String s3;
        ArrayList arraylist;
        ArrayList arraylist1;
        StringTokenizer stringtokenizer;
        String s4;
        boolean flag4;
        BufferedReader bufferedreader;
        if (a == null) {
            obj = a("org.xbill.DNS.x");
            a = ((Class) (obj));
        } else {
            obj = a;
        }
        obj = ((Class) (obj)).getPackage().getName();
        obj = obj + ".windows.DNSServer";
        if (locale != null)
            locale = ResourceBundle.getBundle(((String) (obj)), locale);
        else
            locale = ResourceBundle.getBundle(((String) (obj)));
        s1 = locale.getString("host_name");
        s2 = locale.getString("primary_dns_suffix");
        obj = locale.getString("dns_suffix");
        s3 = locale.getString("dns_servers");
        bufferedreader = new BufferedReader(new InputStreamReader(inputstream));
        arraylist = JVM INSTR new #189 <Class ArrayList>;
        arraylist.ArrayList();
        arraylist1 = JVM INSTR new #189 <Class ArrayList>;
        arraylist1.ArrayList();
        flag1 = false;
        flag = false;
_L8:
        s4 = bufferedreader.readLine();
        if (s4 == null) goto _L2; else goto _L1
_L1:
        stringtokenizer = JVM INSTR new #195 <Class StringTokenizer>;
        stringtokenizer.StringTokenizer(s4);
        flag4 = stringtokenizer.hasMoreTokens();
        if (!flag4) {
            flag1 = false;
            flag = false;
            continue; /* Loop/switch isn't completed */
        }
        inputstream = stringtokenizer.nextToken();
        boolean flag2;
        boolean flag3;
        flag3 = flag;
        flag2 = flag1;
        if (s4.indexOf(":") != -1) {
            flag2 = false;
            flag3 = false;
        }
        if (s4.indexOf(s1) == -1) goto _L4; else goto _L3
_L3:
        while (stringtokenizer.hasMoreTokens()) 
            inputstream = stringtokenizer.nextToken();
        locale = Name.a(inputstream, null);
        flag = flag3;
        flag1 = flag2;
        if (locale.c() == 1)
            continue; /* Loop/switch isn't completed */
        b(inputstream, arraylist1);
        flag = flag3;
        flag1 = flag2;
        continue; /* Loop/switch isn't completed */
_L6:
        return;
_L4:
        if (s4.indexOf(s2) == -1)
            break MISSING_BLOCK_LABEL_354;
        while (stringtokenizer.hasMoreTokens()) 
            inputstream = stringtokenizer.nextToken();
        flag = flag3;
        flag1 = flag2;
        if (inputstream.equals(":"))
            continue; /* Loop/switch isn't completed */
        b(inputstream, arraylist1);
        flag = true;
        flag1 = flag2;
        continue; /* Loop/switch isn't completed */
        locale = inputstream;
        if (flag3)
            break MISSING_BLOCK_LABEL_374;
        if (s4.indexOf(((String) (obj))) == -1)
            break MISSING_BLOCK_LABEL_423;
        locale = inputstream;
        while (stringtokenizer.hasMoreTokens()) 
            locale = stringtokenizer.nextToken();
        flag = flag3;
        flag1 = flag2;
        if (locale.equals(":"))
            continue; /* Loop/switch isn't completed */
        b(locale, arraylist1);
        flag = true;
        flag1 = flag2;
        continue; /* Loop/switch isn't completed */
        locale = inputstream;
        if (flag2)
            break MISSING_BLOCK_LABEL_450;
        flag = flag3;
        flag1 = flag2;
        if (s4.indexOf(s3) == -1)
            continue; /* Loop/switch isn't completed */
        locale = inputstream;
        while (stringtokenizer.hasMoreTokens()) 
            locale = stringtokenizer.nextToken();
        flag = flag3;
        flag1 = flag2;
        if (locale.equals(":"))
            continue; /* Loop/switch isn't completed */
        a(((String) (locale)), ((List) (arraylist)));
        flag1 = true;
        flag = flag3;
        continue; /* Loop/switch isn't completed */
_L2:
        try {
            a(((List) (arraylist)), ((List) (arraylist1)));
        }
        // Misplaced declaration of an exception variable
        catch (InputStream inputstream) { }
        if (true) goto _L6; else goto _L5
_L5:
        inputstream;
        flag = flag3;
        flag1 = flag2;
        if (true) goto _L8; else goto _L7
_L7:
    }

    private void a(String s1, List list) {
        if (!list.contains(s1)) {
            if (s.b("verbose"))
                System.out.println("adding server " + s1);
            list.add(s1);
        }
    }

    private void a(List list, List list1) {
        if (c == null && list.size() > 0)
            c = (String[])(String[])list.toArray(new String[0]);
        if (d == null && list1.size() > 0)
            d = (Name[])(Name[])list1.toArray(new Name[0]);
    }

    private int b(String s1) {
        String s2 = s1.substring(6);
        int j1 = Integer.parseInt(s2);
        if (j1 < 0) goto _L2; else goto _L1
_L1:
        int i1 = j1;
        if (!s.b("verbose"))
            break MISSING_BLOCK_LABEL_64;
        s1 = System.out;
        StringBuffer stringbuffer = JVM INSTR new #151 <Class StringBuffer>;
        stringbuffer.StringBuffer();
        s1.println(stringbuffer.append("setting ndots ").append(s2).toString());
        i1 = j1;
_L4:
        return i1;
        s1;
_L2:
        i1 = -1;
        if (true) goto _L4; else goto _L3
_L3:
    }

    private void b(String s1, List list) {
        if (s.b("verbose"))
            System.out.println("adding search " + s1);
        s1 = Name.a(s1, Name.a);
        if (!list.contains(s1))
            list.add(s1);
_L2:
        return;
        s1;
        if (true) goto _L2; else goto _L1
_L1:
    }

    private void c(String s1) {
        Object obj;
        obj = JVM INSTR new #283 <Class FileInputStream>;
        ((FileInputStream) (obj)).FileInputStream(s1);
        byte byte0;
        Object obj1;
        obj1 = new BufferedReader(new InputStreamReader(((InputStream) (obj))));
        obj = new ArrayList(0);
        s1 = new ArrayList(0);
        byte0 = -1;
_L5:
        byte byte1 = byte0;
        String s2 = ((BufferedReader) (obj1)).readLine();
        if (s2 == null) goto _L2; else goto _L1
_L1:
        byte1 = byte0;
        if (!s2.startsWith("nameserver")) goto _L4; else goto _L3
_L3:
        byte1 = byte0;
        StringTokenizer stringtokenizer = JVM INSTR new #195 <Class StringTokenizer>;
        byte1 = byte0;
        stringtokenizer.StringTokenizer(s2);
        byte1 = byte0;
        stringtokenizer.nextToken();
        byte1 = byte0;
        a(stringtokenizer.nextToken(), ((List) (obj)));
          goto _L5
_L2:
        byte1 = byte0;
        try {
            ((BufferedReader) (obj1)).close();
        }
        // Misplaced declaration of an exception variable
        catch (Object obj1) {
            byte0 = byte1;
        }
        a(((List) (obj)), s1);
        a(byte0);
_L14:
        return;
_L4:
        byte1 = byte0;
        if (!s2.startsWith("domain"))
            break MISSING_BLOCK_LABEL_207;
        byte1 = byte0;
        stringtokenizer1 = JVM INSTR new #195 <Class StringTokenizer>;
        byte1 = byte0;
        stringtokenizer1.StringTokenizer(s2);
        byte1 = byte0;
        stringtokenizer1.nextToken();
        byte1 = byte0;
        if (!stringtokenizer1.hasMoreTokens()) goto _L5; else goto _L6
_L6:
        byte1 = byte0;
        if (!s1.isEmpty()) goto _L5; else goto _L7
_L7:
        byte1 = byte0;
        b(stringtokenizer1.nextToken(), s1);
          goto _L5
        byte1 = byte0;
        if (!s2.startsWith("search"))
            break MISSING_BLOCK_LABEL_288;
        byte1 = byte0;
        if (s1.isEmpty())
            break MISSING_BLOCK_LABEL_239;
        byte1 = byte0;
        s1.clear();
        byte1 = byte0;
        stringtokenizer1 = JVM INSTR new #195 <Class StringTokenizer>;
        byte1 = byte0;
        stringtokenizer1.StringTokenizer(s2);
        byte1 = byte0;
        stringtokenizer1.nextToken();
_L9:
        byte1 = byte0;
        if (!stringtokenizer1.hasMoreTokens()) goto _L5; else goto _L8
_L8:
        byte1 = byte0;
        b(stringtokenizer1.nextToken(), s1);
          goto _L9
        byte1 = byte0;
        if (!s2.startsWith("options")) goto _L5; else goto _L10
_L10:
        byte1 = byte0;
        stringtokenizer1 = JVM INSTR new #195 <Class StringTokenizer>;
        byte1 = byte0;
        stringtokenizer1.StringTokenizer(s2);
        byte1 = byte0;
        stringtokenizer1.nextToken();
        i1 = byte0;
_L13:
        byte0 = i1;
        byte1 = i1;
        if (!stringtokenizer1.hasMoreTokens()) goto _L5; else goto _L11
_L11:
        byte1 = i1;
        s2 = stringtokenizer1.nextToken();
        byte1 = i1;
        if (!s2.startsWith("ndots:")) goto _L13; else goto _L12
_L12:
        byte1 = i1;
        i1 = b(s2);
          goto _L13
        s1;
          goto _L14
    }

    public static x e() {
        org/xbill/DNS/x;
        JVM INSTR monitorenter ;
        x x1 = f;
        org/xbill/DNS/x;
        JVM INSTR monitorexit ;
        return x1;
        Exception exception;
        exception;
        throw exception;
    }

    public static void f() {
        x x1 = new x();
        if (a != null) goto _L2; else goto _L1
_L1:
        Class class1 = a("org.xbill.DNS.x");
        a = class1;
_L4:
        class1;
        JVM INSTR monitorenter ;
        f = x1;
        class1;
        JVM INSTR monitorexit ;
        return;
_L2:
        class1 = a;
        if (true) goto _L4; else goto _L3
_L3:
        Exception exception;
        exception;
        class1;
        JVM INSTR monitorexit ;
        throw exception;
    }

    private boolean g() {
        boolean flag1 = false;
        ArrayList arraylist = new ArrayList(0);
        ArrayList arraylist1 = new ArrayList(0);
        Object obj = System.getProperty("dns.server");
        if (obj != null)
            for (obj = new StringTokenizer(((String) (obj)), ","); ((StringTokenizer) (obj)).hasMoreTokens(); a(((StringTokenizer) (obj)).nextToken(), arraylist));
        obj = System.getProperty("dns.search");
        if (obj != null)
            for (obj = new StringTokenizer(((String) (obj)), ","); ((StringTokenizer) (obj)).hasMoreTokens(); b(((StringTokenizer) (obj)).nextToken(), arraylist1));
        a(arraylist, arraylist1);
        boolean flag = flag1;
        if (c != null) {
            flag = flag1;
            if (d != null)
                flag = true;
        }
        return flag;
    }

    private boolean h() {
label0:
        {
            Object obj = new ArrayList(0);
            ArrayList arraylist = new ArrayList(0);
            boolean flag;
            Object obj1;
            Object obj2;
            try {
                Class aclass[] = new Class[0];
                Object aobj[] = new Object[0];
                Class class1 = Class.forName("sun.net.dns.ResolverConfiguration");
                obj2 = class1.getDeclaredMethod("open", aclass).invoke(null, aobj);
                obj1 = (List)class1.getMethod("nameservers", aclass).invoke(obj2, aobj);
                obj2 = (List)class1.getMethod("searchlist", aclass).invoke(obj2, aobj);
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) {
                flag = false;
                if (false)
                    ;
                else
                    break label0;
            }
            if (((List) (obj1)).size() == 0) {
                flag = false;
            } else {
                if (((List) (obj1)).size() > 0)
                    for (obj1 = ((List) (obj1)).iterator(); ((Iterator) (obj1)).hasNext(); a((String)((Iterator) (obj1)).next(), ((List) (obj))));
                if (((List) (obj2)).size() > 0) {
                    for (Iterator iterator = ((List) (obj2)).iterator(); iterator.hasNext(); b((String)iterator.next(), arraylist));
                }
                a(((List) (obj)), arraylist);
                flag = true;
            }
        }
        return flag;
    }

    private void i() {
        c("/etc/resolv.conf");
    }

    private void j() {
        c("sys:/etc/resolv.cfg");
    }

    private void k() {
        Object obj = Runtime.getRuntime();
        Object obj1 = JVM INSTR new #151 <Class StringBuffer>;
        ((StringBuffer) (obj1)).StringBuffer();
        ((Runtime) (obj)).exec(((StringBuffer) (obj1)).append("winipcfg /all /batch ").append("winipcfg.out").toString()).waitFor();
        obj1 = JVM INSTR new #386 <Class File>;
        ((File) (obj1)).File("winipcfg.out");
        obj = JVM INSTR new #283 <Class FileInputStream>;
        ((FileInputStream) (obj)).FileInputStream(((File) (obj1)));
        a(((InputStream) (obj)));
        obj = JVM INSTR new #386 <Class File>;
        ((File) (obj)).File("winipcfg.out");
        ((File) (obj)).delete();
_L2:
        return;
        Exception exception;
        exception;
        if (true) goto _L2; else goto _L1
_L1:
    }

    private void l() {
        Process process = Runtime.getRuntime().exec("ipconfig /all");
        a(process.getInputStream());
        process.destroy();
_L2:
        return;
        Exception exception;
        exception;
        if (true) goto _L2; else goto _L1
_L1:
    }

    private void m() {
        ArrayList arraylist;
        ArrayList arraylist1;
        arraylist1 = new ArrayList();
        arraylist = new ArrayList();
        Object obj1 = Class.forName("android.os.SystemProperties");
        if (b != null) goto _L2; else goto _L1
_L1:
        Object obj;
        obj = a("java.lang.String");
        b = ((Class) (obj));
_L5:
        String as[];
        obj = ((Class) (obj1)).getMethod("get", new Class[] {
            obj
        });
        as = new String[4];
        int i1;
        as[0] = "net.dns1";
        as[1] = "net.dns2";
        as[2] = "net.dns3";
        as[3] = "net.dns4";
        i1 = 0;
_L4:
        if (i1 >= as.length)
            break; /* Loop/switch isn't completed */
        obj1 = (String)((Method) (obj)).invoke(null, new Object[] {
            as[i1]
        });
        if (obj1 == null)
            break MISSING_BLOCK_LABEL_168;
        if ((((String) (obj1)).matches("^\\d+(\\.\\d+){3}$") || ((String) (obj1)).matches("^[0-9a-f]+(:[0-9a-f]*)+:[0-9a-f]+$")) && !arraylist1.contains(obj1))
            arraylist1.add(obj1);
        i1++;
        if (true) goto _L4; else goto _L3
_L2:
        obj = b;
          goto _L5
        Exception exception;
        exception;
_L3:
        a(arraylist1, arraylist);
        return;
    }

    public String[] a() {
        return c;
    }

    public String b() {
        String s1;
        if (c == null)
            s1 = null;
        else
            s1 = c[0];
        return s1;
    }

    public Name[] c() {
        return d;
    }

    public int d() {
        int i1;
        if (e < 0)
            i1 = 1;
        else
            i1 = e;
        return i1;
    }

    static  {
        f();
    }
}
