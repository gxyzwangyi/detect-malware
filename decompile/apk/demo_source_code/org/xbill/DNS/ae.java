// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.xbill.DNS;

import java.io.PrintStream;
import java.util.Date;
import org.xbill.DNS.a.a;

// Referenced classes of package org.xbill.DNS:
//            Name, s, g, TSIGRecord, 
//            o, m

public class ae {
    public static class a {

        private ae a;
        private org.xbill.DNS.a.a b;
        private int c;
        private int d;
        private TSIGRecord e;

        public int a(o o1, byte abyte0[]) {
            TSIGRecord tsigrecord = o1.c();
            c = c + 1;
            int i1;
            if (c == 1) {
                i1 = a.a(o1, abyte0, e);
                if (i1 == 0) {
                    abyte0 = tsigrecord.g();
                    o1 = new g();
                    o1.c(abyte0.length);
                    b.a(o1.b());
                    b.a(abyte0);
                }
                e = tsigrecord;
            } else {
                if (tsigrecord != null)
                    o1.a().f(3);
                byte abyte1[] = o1.a().a();
                if (tsigrecord != null)
                    o1.a().e(3);
                b.a(abyte1);
                if (tsigrecord == null)
                    i1 = abyte0.length - abyte1.length;
                else
                    i1 = o1.a - abyte1.length;
                b.a(abyte0, abyte1.length, i1);
                if (tsigrecord != null) {
                    d = c;
                    e = tsigrecord;
                    if (!tsigrecord.j().equals(ae.d(a)) || !tsigrecord.d().equals(ae.e(a))) {
                        if (s.b("verbose"))
                            System.err.println("BADKEY failure");
                        o1.b = 4;
                        i1 = 17;
                    } else {
                        abyte0 = new g();
                        long l1 = tsigrecord.e().getTime() / 1000L;
                        abyte0.c((int)(l1 >> 32));
                        abyte0.a(l1 & 0xffffffffL);
                        abyte0.c(tsigrecord.f());
                        b.a(abyte0.b());
                        if (!b.b(tsigrecord.g())) {
                            if (s.b("verbose"))
                                System.err.println("BADSIG failure");
                            o1.b = 4;
                            i1 = 16;
                        } else {
                            b.b();
                            abyte0 = new g();
                            abyte0.c(tsigrecord.g().length);
                            b.a(abyte0.b());
                            b.a(tsigrecord.g());
                            o1.b = 1;
                            i1 = 0;
                        }
                    }
                } else {
                    if (c - d >= 100)
                        i1 = 1;
                    else
                        i1 = 0;
                    if (i1 != 0) {
                        o1.b = 4;
                        i1 = 1;
                    } else {
                        o1.b = 2;
                        i1 = 0;
                    }
                }
            }
            return i1;
        }

        public a(ae ae1, TSIGRecord tsigrecord) {
            a = ae1;
            b = new org.xbill.DNS.a.a(org.xbill.DNS.ae.a(a), ae.b(a), ae.c(a));
            c = 0;
            e = tsigrecord;
        }
    }


    public static final Name a;
    public static final Name b;
    public static final Name c = Name.b("hmac-sha1.");
    public static final Name d = Name.b("hmac-sha224.");
    public static final Name e = Name.b("hmac-sha256.");
    public static final Name f = Name.b("hmac-sha384.");
    public static final Name g = Name.b("hmac-sha512.");
    private Name h;
    private Name i;
    private String j;
    private int k;
    private byte l[];

    static String a(ae ae1) {
        return ae1.j;
    }

    static int b(ae ae1) {
        return ae1.k;
    }

    static byte[] c(ae ae1) {
        return ae1.l;
    }

    static Name d(ae ae1) {
        return ae1.h;
    }

    static Name e(ae ae1) {
        return ae1.i;
    }

    public int a() {
        return h.b() + 10 + i.b() + 8 + 18 + 4 + 8;
    }

    public int a(o o1, byte abyte0[], TSIGRecord tsigrecord) {
        return b(o1, abyte0, abyte0.length, tsigrecord);
    }

    public TSIGRecord a(o o1, byte abyte0[], int i1, TSIGRecord tsigrecord) {
label0:
        {
            int j1;
            int k1;
            long l1;
            Date date;
            org.xbill.DNS.a.a a1;
            g g1;
            if (i1 != 18)
                date = new Date();
            else
                date = tsigrecord.e();
            a1 = null;
            if (i1 == 0 || i1 == 18)
                a1 = new org.xbill.DNS.a.a(j, k, l);
            k1 = s.d("tsigfudge");
            if (k1 >= 0) {
                j1 = k1;
                if (k1 <= 32767)
                    break label0;
            }
            j1 = 300;
        }
        if (tsigrecord != null) {
            g1 = new g();
            g1.c(tsigrecord.g().length);
            if (a1 != null) {
                a1.a(g1.b());
                a1.a(tsigrecord.g());
            }
        }
        if (a1 != null)
            a1.a(abyte0);
        abyte0 = new g();
        h.a(abyte0);
        abyte0.c(255);
        abyte0.a(0L);
        i.a(abyte0);
        l1 = date.getTime() / 1000L;
        abyte0.c((int)(l1 >> 32));
        abyte0.a(l1 & 0xffffffffL);
        abyte0.c(j1);
        abyte0.c(i1);
        abyte0.c(0);
        if (a1 != null)
            a1.a(abyte0.b());
        if (a1 != null)
            abyte0 = a1.a();
        else
            abyte0 = new byte[0];
        tsigrecord = null;
        if (i1 == 18) {
            tsigrecord = new g();
            l1 = (new Date()).getTime() / 1000L;
            tsigrecord.c((int)(l1 >> 32));
            tsigrecord.a(l1 & 0xffffffffL);
            tsigrecord = tsigrecord.b();
        }
        return new TSIGRecord(h, 255, 0L, i, date, j1, abyte0, o1.a().b(), i1, tsigrecord);
    }

    public void a(o o1, int i1, TSIGRecord tsigrecord) {
        o1.a(a(o1, o1.h(), i1, tsigrecord), 3);
        o1.b = 3;
    }

    public void a(o o1, TSIGRecord tsigrecord) {
        a(o1, 0, tsigrecord);
    }

    public byte b(o o1, byte abyte0[], int i1, TSIGRecord tsigrecord) {
        o1.b = 4;
        TSIGRecord tsigrecord1 = o1.c();
        org.xbill.DNS.a.a a1 = new org.xbill.DNS.a.a(j, k, l);
        byte byte0;
        if (tsigrecord1 == null)
            byte0 = 1;
        else
        if (!tsigrecord1.j().equals(h) || !tsigrecord1.d().equals(i)) {
            if (s.b("verbose"))
                System.err.println("BADKEY failure");
            byte0 = 17;
        } else {
            long l1 = System.currentTimeMillis();
            long l4 = tsigrecord1.e().getTime();
            long l3 = tsigrecord1.f();
            if (Math.abs(l1 - l4) > 1000L * l3) {
                if (s.b("verbose"))
                    System.err.println("BADTIME failure");
                byte0 = 18;
            } else {
                if (tsigrecord != null && tsigrecord1.p() != 17 && tsigrecord1.p() != 16) {
                    g g1 = new g();
                    g1.c(tsigrecord.g().length);
                    a1.a(g1.b());
                    a1.a(tsigrecord.g());
                }
                o1.a().f(3);
                tsigrecord = o1.a().a();
                o1.a().e(3);
                a1.a(tsigrecord);
                i1 = o1.a;
                int j1 = tsigrecord.length;
                a1.a(abyte0, tsigrecord.length, i1 - j1);
                abyte0 = new g();
                tsigrecord1.j().a(abyte0);
                abyte0.c(tsigrecord1.i);
                abyte0.a(tsigrecord1.j);
                tsigrecord1.d().a(abyte0);
                long l2 = tsigrecord1.e().getTime() / 1000L;
                abyte0.c((int)(l2 >> 32));
                abyte0.a(l2 & 0xffffffffL);
                abyte0.c(tsigrecord1.f());
                abyte0.c(tsigrecord1.p());
                if (tsigrecord1.q() != null) {
                    abyte0.c(tsigrecord1.q().length);
                    abyte0.a(tsigrecord1.q());
                } else {
                    abyte0.c(0);
                }
                a1.a(abyte0.b());
                abyte0 = tsigrecord1.g();
                j1 = a1.c();
                if (j.equals("md5"))
                    i1 = 10;
                else
                    i1 = j1 / 2;
                if (abyte0.length > j1) {
                    if (s.b("verbose"))
                        System.err.println("BADSIG: signature too long");
                    byte0 = 16;
                } else
                if (abyte0.length < i1) {
                    if (s.b("verbose"))
                        System.err.println("BADSIG: signature too short");
                    byte0 = 16;
                } else
                if (!a1.a(abyte0, true)) {
                    if (s.b("verbose"))
                        System.err.println("BADSIG: signature verification");
                    byte0 = 16;
                } else {
                    o1.b = 1;
                    byte0 = 0;
                }
            }
        }
        return byte0;
    }

    static  {
        a = Name.b("HMAC-MD5.SIG-ALG.REG.INT.");
        b = a;
    }
}
