// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.xbill.DNS;


public class g {

    private byte a[];
    private int b;
    private int c;

    public g() {
        this(32);
    }

    public g(int i) {
        a = new byte[i];
        b = 0;
        c = -1;
    }

    private void a(long l, int i) {
        if (l < 0L || l > 1L << i)
            throw new IllegalArgumentException(l + " out of range for " + i + " bit value");
        else
            return;
    }

    private void d(int i) {
        if (a.length - b < i) {
            int k = a.length * 2;
            int j = k;
            if (k < b + i)
                j = b + i;
            byte abyte0[] = new byte[j];
            System.arraycopy(a, 0, abyte0, 0, b);
            a = abyte0;
        }
    }

    public int a() {
        return b;
    }

    public void a(int i) {
        if (i > b) {
            throw new IllegalArgumentException("cannot jump past end of data");
        } else {
            b = i;
            return;
        }
    }

    public void a(int i, int j) {
        a(i, 16);
        if (j > b - 2) {
            throw new IllegalArgumentException("cannot write past end of data");
        } else {
            byte abyte0[] = a;
            int k = j + 1;
            abyte0[j] = (byte)(i >>> 8 & 0xff);
            a[k] = (byte)(i & 0xff);
            return;
        }
    }

    public void a(long l) {
        a(l, 32);
        d(4);
        byte abyte0[] = a;
        int i = b;
        b = i + 1;
        abyte0[i] = (byte)(int)(l >>> 24 & 255L);
        abyte0 = a;
        i = b;
        b = i + 1;
        abyte0[i] = (byte)(int)(l >>> 16 & 255L);
        abyte0 = a;
        i = b;
        b = i + 1;
        abyte0[i] = (byte)(int)(l >>> 8 & 255L);
        abyte0 = a;
        i = b;
        b = i + 1;
        abyte0[i] = (byte)(int)(l & 255L);
    }

    public void a(byte abyte0[]) {
        a(abyte0, 0, abyte0.length);
    }

    public void a(byte abyte0[], int i, int j) {
        d(j);
        System.arraycopy(abyte0, i, a, b, j);
        b = b + j;
    }

    public void b(int i) {
        a(i, 8);
        d(1);
        byte abyte0[] = a;
        int j = b;
        b = j + 1;
        abyte0[j] = (byte)(i & 0xff);
    }

    public void b(byte abyte0[]) {
        if (abyte0.length > 255) {
            throw new IllegalArgumentException("Invalid counted string");
        } else {
            d(abyte0.length + 1);
            byte abyte1[] = a;
            int i = b;
            b = i + 1;
            abyte1[i] = (byte)(abyte0.length & 0xff);
            a(abyte0, 0, abyte0.length);
            return;
        }
    }

    public byte[] b() {
        byte abyte0[] = new byte[b];
        System.arraycopy(a, 0, abyte0, 0, b);
        return abyte0;
    }

    public void c(int i) {
        a(i, 16);
        d(2);
        byte abyte0[] = a;
        int j = b;
        b = j + 1;
        abyte0[j] = (byte)(i >>> 8 & 0xff);
        abyte0 = a;
        j = b;
        b = j + 1;
        abyte0[j] = (byte)(i & 0xff);
    }
}
