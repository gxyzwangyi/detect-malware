// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.xbill.DNS;

import java.io.*;
import java.net.UnknownHostException;
import java.util.*;

// Referenced classes of package org.xbill.DNS:
//            Name, ag, e, s, 
//            p, Cache, i, x, 
//            Record, o, w, m, 
//            u, NameTooLongException, ab, RRset, 
//            CNAMERecord

public final class n {

    private static final Name D[] = new Name[0];
    static Class a;
    private static w b;
    private static Name c[];
    private static Map d;
    private static int e;
    private boolean A;
    private boolean B;
    private boolean C;
    private w f;
    private Name g[];
    private Cache h;
    private boolean i;
    private int j;
    private Name k;
    private int l;
    private int m;
    private boolean n;
    private int o;
    private boolean p;
    private boolean q;
    private boolean r;
    private List s;
    private Record t[];
    private int u;
    private String v;
    private boolean w;
    private boolean x;
    private String y;
    private boolean z;

    public n(String s1, int i1, int j1) {
        this(Name.a(s1), i1, j1);
    }

    public n(Name name, int i1, int j1) {
        ag.a(i1);
        org.xbill.DNS.e.a(j1);
        if (!ag.d(i1) && i1 != 255)
            throw new IllegalArgumentException("Cannot query for meta-types other than ANY");
        k = name;
        l = i1;
        m = j1;
        if (a != null) goto _L2; else goto _L1
_L1:
        name = a("org.xbill.DNS.n");
        a = name;
_L4:
        name;
        JVM INSTR monitorenter ;
        f = b();
        g = c();
        h = a(j1);
        name;
        JVM INSTR monitorexit ;
        j = 3;
        n = org.xbill.DNS.s.b("verbose");
        u = -1;
        return;
_L2:
        name = a;
        if (true) goto _L4; else goto _L3
_L3:
        Exception exception;
        exception;
        name;
        JVM INSTR monitorexit ;
        throw exception;
    }

    static Class a(String s1) {
        try {
            s1 = Class.forName(s1);
        }
        // Misplaced declaration of an exception variable
        catch (String s1) {
            throw (new NoClassDefFoundError()).initCause(s1);
        }
        return s1;
    }

    public static Cache a(int i1) {
        org/xbill/DNS/n;
        JVM INSTR monitorenter ;
        Cache cache1;
        org.xbill.DNS.e.a(i1);
        cache1 = (Cache)d.get(org.xbill.DNS.p.c(i1));
        Cache cache;
        cache = cache1;
        if (cache1 != null)
            break MISSING_BLOCK_LABEL_52;
        cache = JVM INSTR new #152 <Class Cache>;
        cache.Cache(i1);
        d.put(org.xbill.DNS.p.c(i1), cache);
        org/xbill/DNS/n;
        JVM INSTR monitorexit ;
        return cache;
        Exception exception;
        exception;
        throw exception;
    }

    public static void a() {
        org/xbill/DNS/n;
        JVM INSTR monitorenter ;
        i i1 = JVM INSTR new #162 <Class i>;
        i1.i();
        b = i1;
        c = org.xbill.DNS.x.e().c();
        HashMap hashmap = JVM INSTR new #175 <Class HashMap>;
        hashmap.HashMap();
        d = hashmap;
        e = org.xbill.DNS.x.e().d();
        org/xbill/DNS/n;
        JVM INSTR monitorexit ;
        return;
        Object obj;
        obj;
        RuntimeException runtimeexception = JVM INSTR new #183 <Class RuntimeException>;
        runtimeexception.RuntimeException("Failed to initialize resolver");
        throw runtimeexception;
        runtimeexception;
        org/xbill/DNS/n;
        JVM INSTR monitorexit ;
        throw runtimeexception;
    }

    private void a(Name name) {
        ab ab1 = h.b(name, l, j);
        if (n) {
            System.err.println("lookup " + name + " " + ag.b(l));
            System.err.println(ab1);
        }
        a(name, ab1);
        if (!q && !r) goto _L2; else goto _L1
_L1:
        return;
_L2:
        o o1 = org.xbill.DNS.o.a(Record.a(name, l, m));
        Object obj = f.a(o1);
        int i1 = ((o) (obj)).a().c();
        if (i1 != 0 && i1 != 3) {
            x = true;
            y = org.xbill.DNS.u.a(i1);
        } else
        if (!o1.b().equals(((o) (obj)).b())) {
            x = true;
            y = "response does not match query";
        } else {
            obj = h.a(((o) (obj)));
            ab ab2 = ((ab) (obj));
            if (obj == null)
                ab2 = h.b(name, l, j);
            if (n) {
                System.err.println("queried " + name + " " + ag.b(l));
                System.err.println(ab2);
            }
            a(name, ab2);
        }
        continue; /* Loop/switch isn't completed */
        name;
        if (name instanceof InterruptedIOException)
            A = true;
        else
            z = true;
        if (true) goto _L1; else goto _L3
_L3:
    }

    private void a(Name name, Name name1) {
        p = true;
        x = false;
        z = false;
        A = false;
        w = false;
        C = false;
        o = o + 1;
        if (o >= 6 || name.equals(name1)) {
            u = 1;
            v = "CNAME loop";
            q = true;
        } else {
            if (s == null)
                s = new ArrayList();
            s.add(name1);
            a(name);
        }
    }

    private void a(Name name, ab ab1) {
        if (!ab1.f()) goto _L2; else goto _L1
_L1:
        name = ab1.g();
        ab1 = new ArrayList();
        for (int i1 = 0; i1 < name.length; i1++) {
            for (Iterator iterator = name[i1].c(); iterator.hasNext(); ab1.add(iterator.next()));
        }

        u = 0;
        t = (Record[])(Record[])ab1.toArray(new Record[ab1.size()]);
        q = true;
_L4:
        return;
_L2:
        if (ab1.a()) {
            w = true;
            r = true;
            if (o > 0) {
                u = 3;
                q = true;
            }
        } else
        if (ab1.b()) {
            u = 4;
            t = null;
            q = true;
        } else
        if (ab1.d())
            a(ab1.h().k_(), name);
        else
        if (ab1.e()) {
            ab1 = ab1.i();
            try {
                a(name.a(ab1), name);
            }
            // Misplaced declaration of an exception variable
            catch (Name name) {
                u = 1;
                v = "Invalid DNAME target";
                q = true;
            }
        } else
        if (ab1.c())
            C = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static w b() {
        org/xbill/DNS/n;
        JVM INSTR monitorenter ;
        w w1 = b;
        org/xbill/DNS/n;
        JVM INSTR monitorexit ;
        return w1;
        Exception exception;
        exception;
        throw exception;
    }

    private void b(Name name, Name name1) {
        r = false;
        if (name1 != null) goto _L2; else goto _L1
_L1:
        a(name);
_L3:
        return;
_L2:
        name = Name.a(name, name1);
          goto _L1
        name;
        B = true;
          goto _L3
    }

    public static Name[] c() {
        org/xbill/DNS/n;
        JVM INSTR monitorenter ;
        Name aname[] = c;
        org/xbill/DNS/n;
        JVM INSTR monitorexit ;
        return aname;
        Exception exception;
        exception;
        throw exception;
    }

    private final void f() {
        o = 0;
        p = false;
        q = false;
        r = false;
        s = null;
        t = null;
        u = -1;
        v = null;
        w = false;
        x = false;
        y = null;
        z = false;
        A = false;
        B = false;
        C = false;
        if (i)
            h.a();
    }

    private void g() {
        if (q && u != -1)
            return;
        StringBuffer stringbuffer = new StringBuffer("Lookup of " + k + " ");
        if (m != 1)
            stringbuffer.append(org.xbill.DNS.e.b(m) + " ");
        stringbuffer.append(ag.b(l) + " isn't done");
        throw new IllegalStateException(stringbuffer.toString());
    }

    public void a(Cache cache) {
        if (cache == null) {
            h = new Cache(m);
            i = true;
        } else {
            h = cache;
            i = false;
        }
    }

    public Record[] d() {
        Record arecord[];
        if (q)
            f();
        if (k.a()) {
            b(k, null);
        } else {
label0:
            {
                if (g != null)
                    break label0;
                b(k, Name.a);
            }
        }
_L3:
        int i1;
        if (!q)
            if (x) {
                u = 2;
                v = y;
                q = true;
            } else
            if (A) {
                u = 2;
                v = "timed out";
                q = true;
            } else
            if (z) {
                u = 2;
                v = "network error";
                q = true;
            } else
            if (w) {
                u = 3;
                q = true;
            } else
            if (C) {
                u = 1;
                v = "referral";
                q = true;
            } else
            if (B) {
                u = 1;
                v = "name too long";
                q = true;
            }
        arecord = t;
_L1:
        return arecord;
label1:
        {
            if (k.c() > e)
                b(k, Name.a);
            if (!q)
                break label1;
            arecord = t;
        }
          goto _L1
        i1 = 0;
_L5:
        if (i1 >= g.length) goto _L3; else goto _L2
_L2:
        b(k, g[i1]);
        if (!q)
            continue; /* Loop/switch isn't completed */
        arecord = t;
          goto _L1
        if (p) goto _L3; else goto _L4
_L4:
        i1++;
          goto _L5
    }

    public int e() {
        g();
        return u;
    }

    static  {
        a();
    }
}
