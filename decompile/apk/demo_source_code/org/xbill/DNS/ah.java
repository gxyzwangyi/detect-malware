// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.xbill.DNS;

import java.io.EOFException;
import java.net.*;
import java.nio.ByteBuffer;
import java.nio.channels.DatagramChannel;
import java.nio.channels.SelectionKey;
import java.security.SecureRandom;

// Referenced classes of package org.xbill.DNS:
//            b, ai

final class ah extends b {

    private static SecureRandom c = new SecureRandom();
    private static volatile boolean d = true;
    private boolean e;

    public ah(long l) {
        super(DatagramChannel.open(), l);
        e = false;
    }

    private void a(InetSocketAddress inetsocketaddress) {
        if (!d) goto _L2; else goto _L1
_L1:
        int i;
        int j;
        Object obj;
        DatagramChannel datagramchannel;
        try {
            Thread.sleep(2L);
        }
        catch (InterruptedException interruptedexception) { }
        if (!d) goto _L2; else goto _L3
_L3:
        return;
_L2:
        datagramchannel = (DatagramChannel)b.channel();
        i = 0;
_L5:
        if (i >= 1024) goto _L3; else goto _L4
_L4:
        j = c.nextInt(64511) + 1024;
        if (inetsocketaddress == null)
            break MISSING_BLOCK_LABEL_98;
        obj = JVM INSTR new #72  <Class InetSocketAddress>;
        ((InetSocketAddress) (obj)).InetSocketAddress(inetsocketaddress.getAddress(), j);
_L6:
        datagramchannel.socket().bind(((SocketAddress) (obj)));
        e = true;
          goto _L3
        obj;
        i++;
          goto _L5
        obj = new InetSocketAddress(j);
          goto _L6
    }

    static boolean a(boolean flag) {
        d = flag;
        return flag;
    }

    static byte[] a(SocketAddress socketaddress, SocketAddress socketaddress1, byte abyte0[], int i, long l) {
        ah ah1 = new ah(l);
        ah1.a(socketaddress);
        ah1.b(socketaddress1);
        ah1.a(abyte0);
        socketaddress = ah1.a(i);
        ah1.a();
        return socketaddress;
        socketaddress;
        ah1.a();
        throw socketaddress;
    }

    static SecureRandom b() {
        return c;
    }

    void a(SocketAddress socketaddress) {
        if (socketaddress != null && (!(socketaddress instanceof InetSocketAddress) || ((InetSocketAddress)socketaddress).getPort() != 0)) goto _L2; else goto _L1
_L1:
        a((InetSocketAddress)socketaddress);
        if (!e) goto _L2; else goto _L3
_L3:
        return;
_L2:
        if (socketaddress != null) {
            ((DatagramChannel)b.channel()).socket().bind(socketaddress);
            e = true;
        }
        if (true) goto _L3; else goto _L4
_L4:
    }

    void a(byte abyte0[]) {
        DatagramChannel datagramchannel = (DatagramChannel)b.channel();
        a("UDP write", datagramchannel.socket().getLocalSocketAddress(), datagramchannel.socket().getRemoteSocketAddress(), abyte0);
        datagramchannel.write(ByteBuffer.wrap(abyte0));
    }

    byte[] a(int i) {
        DatagramChannel datagramchannel;
        byte abyte1[];
        datagramchannel = (DatagramChannel)b.channel();
        abyte1 = new byte[i];
        b.interestOps(1);
        for (; !b.isReadable(); a(b, a));
        break MISSING_BLOCK_LABEL_74;
        Exception exception;
        exception;
        if (b.isValid())
            b.interestOps(0);
        throw exception;
        if (b.isValid())
            b.interestOps(0);
        long l = datagramchannel.read(ByteBuffer.wrap(abyte1));
        if (l <= 0L) {
            throw new EOFException();
        } else {
            i = (int)l;
            byte abyte0[] = new byte[i];
            System.arraycopy(abyte1, 0, abyte0, 0, i);
            a("UDP read", datagramchannel.socket().getLocalSocketAddress(), datagramchannel.socket().getRemoteSocketAddress(), abyte0);
            return abyte0;
        }
    }

    void b(SocketAddress socketaddress) {
        if (!e)
            a(((SocketAddress) (null)));
        ((DatagramChannel)b.channel()).connect(socketaddress);
    }

    static  {
        (new Thread(new ai())).start();
    }
}
