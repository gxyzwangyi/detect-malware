// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.xbill.DNS;

import java.io.Serializable;
import java.text.DecimalFormat;
import java.util.Arrays;
import org.xbill.DNS.a.b;

// Referenced classes of package org.xbill.DNS:
//            Name, RelativeNameException, ag, e, 
//            af, f, WireParseException, UNKRecord, 
//            EmptyRecord, g, RRSIGRecord, s, 
//            d

public abstract class Record
    implements Serializable, Cloneable, Comparable {

    private static final DecimalFormat a;
    protected Name g;
    protected int h;
    protected int i;
    protected long j;

    protected Record() {
    }

    Record(Name name, int i1, int j1, long l1) {
        if (!name.a()) {
            throw new RelativeNameException(name);
        } else {
            ag.a(i1);
            e.a(j1);
            af.a(l1);
            g = name;
            h = i1;
            i = j1;
            j = l1;
            return;
        }
    }

    static int a(String s1, int i1) {
        if (i1 < 0 || i1 > 65535)
            throw new IllegalArgumentException("\"" + s1 + "\" " + i1 + " must be an unsigned 16 " + "bit value");
        else
            return i1;
    }

    static long a(String s1, long l1) {
        if (l1 < 0L || l1 > 0xffffffffL)
            throw new IllegalArgumentException("\"" + s1 + "\" " + l1 + " must be an unsigned 32 " + "bit value");
        else
            return l1;
    }

    protected static String a(byte abyte0[]) {
        StringBuffer stringbuffer = new StringBuffer();
        stringbuffer.append("\\# ");
        stringbuffer.append(abyte0.length);
        stringbuffer.append(" ");
        stringbuffer.append(org.xbill.DNS.a.b.a(abyte0));
        return stringbuffer.toString();
    }

    protected static String a(byte abyte0[], boolean flag) {
        StringBuffer stringbuffer = new StringBuffer();
        if (flag)
            stringbuffer.append('"');
        int i1 = 0;
        while (i1 < abyte0.length)  {
            int j1 = abyte0[i1] & 0xff;
            if (j1 < 32 || j1 >= 127) {
                stringbuffer.append('\\');
                stringbuffer.append(a.format(j1));
            } else
            if (j1 == 34 || j1 == 92) {
                stringbuffer.append('\\');
                stringbuffer.append((char)j1);
            } else {
                stringbuffer.append((char)j1);
            }
            i1++;
        }
        if (flag)
            stringbuffer.append('"');
        return stringbuffer.toString();
    }

    static Name a(String s1, Name name) {
        if (!name.a())
            throw new RelativeNameException(name);
        else
            return name;
    }

    public static Record a(Name name, int i1, int j1) {
        return a(name, i1, j1, 0L);
    }

    public static Record a(Name name, int i1, int j1, long l1) {
        if (!name.a()) {
            throw new RelativeNameException(name);
        } else {
            ag.a(i1);
            e.a(j1);
            af.a(l1);
            return a(name, i1, j1, l1, false);
        }
    }

    private static Record a(Name name, int i1, int j1, long l1, int k1, f f1) {
        boolean flag;
        if (f1 != null)
            flag = true;
        else
            flag = false;
        name = a(name, i1, j1, l1, flag);
        if (f1 != null) {
            if (f1.b() < k1)
                throw new WireParseException("truncated record");
            f1.a(k1);
            name.a(f1);
            if (f1.b() > 0)
                throw new WireParseException("invalid record length");
            f1.c();
        }
        return name;
    }

    private static final Record a(Name name, int i1, int j1, long l1, boolean flag) {
        Object obj;
        if (flag) {
            obj = ag.c(i1);
            if (obj != null)
                obj = ((Record) (obj)).a();
            else
                obj = new UNKRecord();
        } else {
            obj = new EmptyRecord();
        }
        obj.g = name;
        obj.h = i1;
        obj.i = j1;
        obj.j = l1;
        return ((Record) (obj));
    }

    static Record a(f f1, int i1, boolean flag) {
        Name name = new Name(f1);
        int k1 = f1.h();
        int j1 = f1.h();
        if (i1 == 0) {
            f1 = a(name, k1, j1);
        } else {
            long l2 = f1.i();
            int l1 = f1.h();
            if (l1 == 0 && flag && (i1 == 1 || i1 == 2))
                f1 = a(name, k1, j1, l2);
            else
                f1 = a(name, k1, j1, l2, l1, f1);
        }
        return f1;
    }

    private void a(g g1, boolean flag) {
        g.a(g1);
        g1.c(h);
        g1.c(i);
        int i1;
        if (flag)
            g1.a(0L);
        else
            g1.a(j);
        i1 = g1.a();
        g1.c(0);
        a(g1, ((d) (null)), true);
        g1.a(g1.a() - i1 - 2, i1);
    }

    private byte[] a(boolean flag) {
        g g1 = new g();
        a(g1, flag);
        return g1.b();
    }

    abstract Record a();

    void a(long l1) {
        j = l1;
    }

    abstract void a(f f1);

    void a(g g1, int i1, d d) {
        g.a(g1, d);
        g1.c(h);
        g1.c(i);
        if (i1 != 0) {
            g1.a(j);
            i1 = g1.a();
            g1.c(0);
            a(g1, d, false);
            g1.a(g1.a() - i1 - 2, i1);
        }
    }

    abstract void a(g g1, d d, boolean flag);

    public boolean a(Record record) {
        boolean flag;
        if (l() == record.l() && i == record.i && g.equals(record.g))
            flag = true;
        else
            flag = false;
        return flag;
    }

    public byte[] a(int i1) {
        g g1 = new g();
        a(g1, i1, ((d) (null)));
        return g1.b();
    }

    abstract String b();

    public Name c() {
        return null;
    }

    public int compareTo(Object obj) {
        int i1;
        boolean flag;
        Record record;
        i1 = 0;
        flag = false;
        record = (Record)obj;
        if (this != record) goto _L2; else goto _L1
_L1:
        i1 = ((flag) ? 1 : 0);
_L4:
        return i1;
_L2:
        int j1 = g.compareTo(record.g);
        if (j1 != 0) {
            i1 = j1;
            continue; /* Loop/switch isn't completed */
        }
        j1 = i - record.i;
        if (j1 != 0) {
            i1 = j1;
            continue; /* Loop/switch isn't completed */
        }
        j1 = h - record.h;
        if (j1 != 0) {
            i1 = j1;
            continue; /* Loop/switch isn't completed */
        }
        obj = h();
        byte abyte0[] = record.h();
        do {
            if (i1 >= obj.length || i1 >= abyte0.length)
                break;
            int k1 = (obj[i1] & 0xff) - (abyte0[i1] & 0xff);
            if (k1 != 0) {
                i1 = k1;
                continue; /* Loop/switch isn't completed */
            }
            i1++;
        } while (true);
        i1 = obj.length - abyte0.length;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public boolean equals(Object obj) {
        boolean flag;
        boolean flag1;
        flag1 = false;
        flag = flag1;
        if (obj == null) goto _L2; else goto _L1
_L1:
        if (obj instanceof Record) goto _L4; else goto _L3
_L3:
        flag = flag1;
_L2:
        return flag;
_L4:
        obj = (Record)obj;
        flag = flag1;
        if (h == ((Record) (obj)).h) {
            flag = flag1;
            if (i == ((Record) (obj)).i) {
                flag = flag1;
                if (g.equals(((Record) (obj)).g))
                    flag = Arrays.equals(h(), ((Record) (obj)).h());
            }
        }
        if (true) goto _L2; else goto _L5
_L5:
    }

    public byte[] h() {
        g g1 = new g();
        a(g1, ((d) (null)), true);
        return g1.b();
    }

    public int hashCode() {
        int j1 = 0;
        byte abyte0[] = a(true);
        int i1 = 0;
        for (; j1 < abyte0.length; j1++)
            i1 += (i1 << 3) + (abyte0[j1] & 0xff);

        return i1;
    }

    public String i() {
        return b();
    }

    public Name j() {
        return g;
    }

    public int k() {
        return h;
    }

    public int l() {
        int i1;
        if (h == 46)
            i1 = ((RRSIGRecord)this).d();
        else
            i1 = h;
        return i1;
    }

    public int m() {
        return i;
    }

    public long n() {
        return j;
    }

    Record o() {
        Record record;
        try {
            record = (Record)clone();
        }
        catch (CloneNotSupportedException clonenotsupportedexception) {
            throw new IllegalStateException();
        }
        return record;
    }

    public String toString() {
        StringBuffer stringbuffer = new StringBuffer();
        stringbuffer.append(g);
        if (stringbuffer.length() < 8)
            stringbuffer.append("\t");
        if (stringbuffer.length() < 16)
            stringbuffer.append("\t");
        stringbuffer.append("\t");
        String s1;
        if (org.xbill.DNS.s.b("BINDTTL"))
            stringbuffer.append(org.xbill.DNS.af.b(j));
        else
            stringbuffer.append(j);
        stringbuffer.append("\t");
        if (i != 1 || !org.xbill.DNS.s.b("noPrintIN")) {
            stringbuffer.append(org.xbill.DNS.e.b(i));
            stringbuffer.append("\t");
        }
        stringbuffer.append(org.xbill.DNS.ag.b(h));
        s1 = b();
        if (!s1.equals("")) {
            stringbuffer.append("\t");
            stringbuffer.append(s1);
        }
        return stringbuffer.toString();
    }

    static  {
        a = new DecimalFormat();
        a.setMinimumIntegerDigits(3);
    }
}
