// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.xbill.DNS;

import java.net.InetAddress;
import java.util.*;
import org.xbill.DNS.a.b;

// Referenced classes of package org.xbill.DNS:
//            Record, WireParseException, f, a, 
//            g, d

public class APLRecord extends Record {
    public static class a {

        public final int a;
        public final boolean b;
        public final int c;
        public final Object d;

        public boolean equals(Object obj) {
            boolean flag;
            boolean flag1;
            flag1 = false;
            flag = flag1;
            if (obj == null) goto _L2; else goto _L1
_L1:
            if (obj instanceof a) goto _L4; else goto _L3
_L3:
            flag = flag1;
_L2:
            return flag;
_L4:
            obj = (a)obj;
            flag = flag1;
            if (a == ((a) (obj)).a) {
                flag = flag1;
                if (b == ((a) (obj)).b) {
                    flag = flag1;
                    if (c == ((a) (obj)).c) {
                        flag = flag1;
                        if (d.equals(((a) (obj)).d))
                            flag = true;
                    }
                }
            }
            if (true) goto _L2; else goto _L5
_L5:
        }

        public int hashCode() {
            int k = d.hashCode();
            int j = c;
            int i;
            if (b)
                i = 1;
            else
                i = 0;
            return i + (j + k);
        }

        public String toString() {
            StringBuffer stringbuffer = new StringBuffer();
            if (b)
                stringbuffer.append("!");
            stringbuffer.append(a);
            stringbuffer.append(":");
            if (a == 1 || a == 2)
                stringbuffer.append(((InetAddress)d).getHostAddress());
            else
                stringbuffer.append(org.xbill.DNS.a.b.a((byte[])(byte[])d));
            stringbuffer.append("/");
            stringbuffer.append(c);
            return stringbuffer.toString();
        }

        private a(int i, boolean flag, Object obj, int j) {
            a = i;
            b = flag;
            d = obj;
            c = j;
            if (!APLRecord.a(i, j))
                throw new IllegalArgumentException("invalid prefix length");
            else
                return;
        }


        public a(boolean flag, InetAddress inetaddress, int i) {
            this(org.xbill.DNS.a.a(inetaddress), flag, inetaddress, i);
        }
    }


    private List a;

    APLRecord() {
    }

    static boolean a(int i, int j) {
        return b(i, j);
    }

    private static byte[] a(byte abyte0[], int i) {
        if (abyte0.length > i)
            throw new WireParseException("invalid address length");
        if (abyte0.length != i) {
            byte abyte1[] = new byte[i];
            System.arraycopy(abyte0, 0, abyte1, 0, abyte0.length);
            abyte0 = abyte1;
        }
        return abyte0;
    }

    private static int b(byte abyte0[]) {
        int i = abyte0.length - 1;
_L3:
        if (i < 0)
            break MISSING_BLOCK_LABEL_26;
        if (abyte0[i] == 0) goto _L2; else goto _L1
_L1:
        i++;
_L4:
        return i;
_L2:
        i--;
          goto _L3
        i = 0;
          goto _L4
    }

    private static boolean b(int i, int j) {
        boolean flag;
        boolean flag1;
        flag1 = false;
        flag = flag1;
        if (j < 0) goto _L2; else goto _L1
_L1:
        if (j < 256) goto _L4; else goto _L3
_L3:
        flag = flag1;
_L2:
        return flag;
_L4:
        if (i == 1) {
            flag = flag1;
            if (j > 32)
                continue; /* Loop/switch isn't completed */
        }
        if (i == 2) {
            flag = flag1;
            if (j > 128)
                continue; /* Loop/switch isn't completed */
        }
        flag = true;
        if (true) goto _L2; else goto _L5
_L5:
    }

    Record a() {
        return new APLRecord();
    }

    void a(f f1) {
        a = new ArrayList(1);
        while (f1.b() != 0)  {
            int k = f1.h();
            int j = f1.g();
            int i = f1.g();
            boolean flag;
            Object obj;
            if ((i & 0x80) != 0)
                flag = true;
            else
                flag = false;
            obj = f1.d(i & 0xffffff7f);
            if (!b(k, j))
                throw new WireParseException("invalid prefix length");
            if (k == 1 || k == 2)
                obj = new a(flag, InetAddress.getByAddress(a(((byte []) (obj)), org.xbill.DNS.a.a(k))), j);
            else
                obj = new a(k, flag, obj, j);
            a.add(obj);
        }
    }

    void a(g g1, d d, boolean flag) {
        Iterator iterator = a.iterator();
        while (iterator.hasNext())  {
            a a1 = (a)iterator.next();
            int i;
            int j;
            if (a1.a == 1 || a1.a == 2) {
                d = ((InetAddress)a1.d).getAddress();
                i = b(d);
            } else {
                d = (byte[])(byte[])a1.d;
                i = d.length;
            }
            if (a1.b)
                j = i | 0x80;
            else
                j = i;
            g1.c(a1.a);
            g1.b(a1.c);
            g1.b(j);
            g1.a(d, 0, i);
        }
    }

    String b() {
        StringBuffer stringbuffer = new StringBuffer();
        Iterator iterator = a.iterator();
        do {
            if (!iterator.hasNext())
                break;
            stringbuffer.append((a)iterator.next());
            if (iterator.hasNext())
                stringbuffer.append(" ");
        } while (true);
        return stringbuffer.toString();
    }
}
