// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.xbill.DNS;

import java.util.Random;

// Referenced classes of package org.xbill.DNS:
//            f, j, g, r, 
//            u, z

public class m
    implements Cloneable {

    private static Random d = new Random();
    private int a;
    private int b;
    private int c[];

    public m() {
        g();
    }

    public m(int k) {
        g();
        c(k);
    }

    m(f f1) {
        this(f1.h());
        b = f1.h();
        for (int k = 0; k < c.length; k++)
            c[k] = f1.h();

    }

    static int a(int k, int l, boolean flag) {
        j(l);
        if (flag)
            k = 1 << 15 - l | k;
        else
            k = ~(1 << 15 - l) & k;
        return k;
    }

    private void g() {
        c = new int[4];
        b = 0;
        a = -1;
    }

    private static boolean i(int k) {
        boolean flag;
        if (k >= 0 && k <= 15 && org.xbill.DNS.j.b(k))
            flag = true;
        else
            flag = false;
        return flag;
    }

    private static void j(int k) {
        if (!i(k))
            throw new IllegalArgumentException("invalid flag bit " + k);
        else
            return;
    }

    public void a(int k) {
        j(k);
        b = a(b, k, true);
    }

    void a(g g1) {
        g1.c(b());
        g1.c(b);
        for (int k = 0; k < c.length; k++)
            g1.c(c[k]);

    }

    public byte[] a() {
        g g1 = new g();
        a(g1);
        return g1.b();
    }

    public int b() {
        if (a < 0) goto _L2; else goto _L1
_L1:
        int k = a;
_L4:
        return k;
_L2:
        this;
        JVM INSTR monitorenter ;
        if (a < 0)
            a = d.nextInt(65535);
        k = a;
        this;
        JVM INSTR monitorexit ;
        if (true) goto _L4; else goto _L3
_L3:
        Exception exception;
        exception;
        this;
        JVM INSTR monitorexit ;
        throw exception;
    }

    public boolean b(int k) {
        boolean flag = true;
        j(k);
        if ((b & 1 << 15 - k) == 0)
            flag = false;
        return flag;
    }

    public int c() {
        return b & 0xf;
    }

    public void c(int k) {
        if (k < 0 || k > 65535) {
            throw new IllegalArgumentException("DNS message ID " + k + " is out of range");
        } else {
            a = k;
            return;
        }
    }

    public Object clone() {
        m m1 = new m();
        m1.a = a;
        m1.b = b;
        System.arraycopy(c, 0, m1.c, 0, c.length);
        return m1;
    }

    public int d() {
        return b >> 11 & 0xf;
    }

    public void d(int k) {
        if (k < 0 || k > 15) {
            throw new IllegalArgumentException("DNS Opcode " + k + "is out of range");
        } else {
            b = b & 0x87ff;
            b = b | k << 11;
            return;
        }
    }

    int e() {
        return b;
    }

    void e(int k) {
        if (c[k] == 65535) {
            throw new IllegalStateException("DNS section count cannot be incremented");
        } else {
            int ai[] = c;
            ai[k] = ai[k] + 1;
            return;
        }
    }

    public String f() {
        StringBuffer stringbuffer = new StringBuffer();
        for (int k = 0; k < 16; k++)
            if (i(k) && b(k)) {
                stringbuffer.append(org.xbill.DNS.j.a(k));
                stringbuffer.append(" ");
            }

        return stringbuffer.toString();
    }

    void f(int k) {
        if (c[k] == 0) {
            throw new IllegalStateException("DNS section count cannot be decremented");
        } else {
            int ai[] = c;
            ai[k] = ai[k] - 1;
            return;
        }
    }

    public int g(int k) {
        return c[k];
    }

    String h(int k) {
        StringBuffer stringbuffer = new StringBuffer();
        stringbuffer.append(";; ->>HEADER<<- ");
        stringbuffer.append("opcode: " + r.a(d()));
        stringbuffer.append(", status: " + u.a(k));
        stringbuffer.append(", id: " + b());
        stringbuffer.append("\n");
        stringbuffer.append(";; flags: " + f());
        stringbuffer.append("; ");
        for (k = 0; k < 4; k++)
            stringbuffer.append(z.a(k) + ": " + g(k) + " ");

        return stringbuffer.toString();
    }

    public String toString() {
        return h(c());
    }

}
