// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.xbill.DNS;

import java.util.HashMap;

// Referenced classes of package org.xbill.DNS:
//            ARecord, NSRecord, MDRecord, MFRecord, 
//            CNAMERecord, SOARecord, MBRecord, MGRecord, 
//            MRRecord, NULLRecord, WKSRecord, PTRRecord, 
//            HINFORecord, MINFORecord, MXRecord, TXTRecord, 
//            RPRecord, AFSDBRecord, X25Record, ISDNRecord, 
//            RTRecord, NSAPRecord, NSAP_PTRRecord, SIGRecord, 
//            KEYRecord, PXRecord, GPOSRecord, AAAARecord, 
//            LOCRecord, NXTRecord, SRVRecord, NAPTRRecord, 
//            KXRecord, CERTRecord, A6Record, DNAMERecord, 
//            OPTRecord, APLRecord, DSRecord, SSHFPRecord, 
//            IPSECKEYRecord, RRSIGRecord, NSECRecord, DNSKEYRecord, 
//            DHCIDRecord, NSEC3Record, NSEC3PARAMRecord, TLSARecord, 
//            SPFRecord, TKEYRecord, TSIGRecord, URIRecord, 
//            DLVRecord, InvalidTypeException, Record, p

public final class ag {
    private static class a extends p {

        private HashMap a;

        public void a(int i) {
            ag.a(i);
        }

        public void a(int i, String s, Record record) {
            super.a(i, s);
            a.put(p.c(i), record);
        }

        public Record e(int i) {
            a(i);
            return (Record)a.get(c(i));
        }

        public a() {
            super("Type", 2);
            a("TYPE");
            a = new HashMap();
        }
    }


    private static a a;

    public static void a(int i) {
        if (i < 0 || i > 65535)
            throw new InvalidTypeException(i);
        else
            return;
    }

    public static String b(int i) {
        return a.d(i);
    }

    static Record c(int i) {
        return a.e(i);
    }

    public static boolean d(int i) {
        i;
        JVM INSTR lookupswitch 8: default 76
    //                   41: 80
    //                   249: 80
    //                   250: 80
    //                   251: 80
    //                   252: 80
    //                   253: 80
    //                   254: 80
    //                   255: 80;
           goto _L1 _L2 _L2 _L2 _L2 _L2 _L2 _L2 _L2
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        flag = false;
        if (true) goto _L4; else goto _L3
_L3:
    }

    static  {
        a = new a();
        a.a(1, "A", new ARecord());
        a.a(2, "NS", new NSRecord());
        a.a(3, "MD", new MDRecord());
        a.a(4, "MF", new MFRecord());
        a.a(5, "CNAME", new CNAMERecord());
        a.a(6, "SOA", new SOARecord());
        a.a(7, "MB", new MBRecord());
        a.a(8, "MG", new MGRecord());
        a.a(9, "MR", new MRRecord());
        a.a(10, "NULL", new NULLRecord());
        a.a(11, "WKS", new WKSRecord());
        a.a(12, "PTR", new PTRRecord());
        a.a(13, "HINFO", new HINFORecord());
        a.a(14, "MINFO", new MINFORecord());
        a.a(15, "MX", new MXRecord());
        a.a(16, "TXT", new TXTRecord());
        a.a(17, "RP", new RPRecord());
        a.a(18, "AFSDB", new AFSDBRecord());
        a.a(19, "X25", new X25Record());
        a.a(20, "ISDN", new ISDNRecord());
        a.a(21, "RT", new RTRecord());
        a.a(22, "NSAP", new NSAPRecord());
        a.a(23, "NSAP-PTR", new NSAP_PTRRecord());
        a.a(24, "SIG", new SIGRecord());
        a.a(25, "KEY", new KEYRecord());
        a.a(26, "PX", new PXRecord());
        a.a(27, "GPOS", new GPOSRecord());
        a.a(28, "AAAA", new AAAARecord());
        a.a(29, "LOC", new LOCRecord());
        a.a(30, "NXT", new NXTRecord());
        a.a(31, "EID");
        a.a(32, "NIMLOC");
        a.a(33, "SRV", new SRVRecord());
        a.a(34, "ATMA");
        a.a(35, "NAPTR", new NAPTRRecord());
        a.a(36, "KX", new KXRecord());
        a.a(37, "CERT", new CERTRecord());
        a.a(38, "A6", new A6Record());
        a.a(39, "DNAME", new DNAMERecord());
        a.a(41, "OPT", new OPTRecord());
        a.a(42, "APL", new APLRecord());
        a.a(43, "DS", new DSRecord());
        a.a(44, "SSHFP", new SSHFPRecord());
        a.a(45, "IPSECKEY", new IPSECKEYRecord());
        a.a(46, "RRSIG", new RRSIGRecord());
        a.a(47, "NSEC", new NSECRecord());
        a.a(48, "DNSKEY", new DNSKEYRecord());
        a.a(49, "DHCID", new DHCIDRecord());
        a.a(50, "NSEC3", new NSEC3Record());
        a.a(51, "NSEC3PARAM", new NSEC3PARAMRecord());
        a.a(52, "TLSA", new TLSARecord());
        a.a(99, "SPF", new SPFRecord());
        a.a(249, "TKEY", new TKEYRecord());
        a.a(250, "TSIG", new TSIGRecord());
        a.a(251, "IXFR");
        a.a(252, "AXFR");
        a.a(253, "MAILB");
        a.a(254, "MAILA");
        a.a(255, "ANY");
        a.a(256, "URI", new URIRecord());
        a.a(32769, "DLV", new DLVRecord());
    }
}
