// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.xbill.DNS;

import java.io.IOException;
import java.io.PrintStream;
import java.net.SocketAddress;
import java.util.ArrayList;
import java.util.List;

// Referenced classes of package org.xbill.DNS:
//            NameTooLongException, Name, o, WireParseException, 
//            s, SOARecord, ZoneTransferException, ad, 
//            Record, aa, m, ae, 
//            u

public class aj {
    private static class a
        implements c {

        private List a;
        private List b;

        static List a(a a1) {
            return a1.a;
        }

        static List b(a a1) {
            return a1.b;
        }

        public void a() {
            a = new ArrayList();
        }

        public void a(Record record) {
            b b1 = new b();
            b1.d.add(record);
            b1.a = aj.a(record);
            b.add(b1);
        }

        public void b() {
            b = new ArrayList();
        }

        public void b(Record record) {
            b b1 = (b)b.get(b.size() - 1);
            b1.c.add(record);
            b1.b = aj.a(record);
        }

        public void c(Record record) {
            Object obj;
            if (b != null) {
                obj = (b)b.get(b.size() - 1);
                if (((b) (obj)).c.size() > 0)
                    obj = ((b) (obj)).c;
                else
                    obj = ((b) (obj)).d;
            } else {
                obj = a;
            }
            ((List) (obj)).add(record);
        }

        private a() {
        }

    }

    public static class b {

        public long a;
        public long b;
        public List c;
        public List d;

        private b() {
            c = new ArrayList();
            d = new ArrayList();
        }

    }

    public static interface c {

        public abstract void a();

        public abstract void a(Record record);

        public abstract void b();

        public abstract void b(Record record);

        public abstract void c(Record record);
    }


    private Name a;
    private int b;
    private int c;
    private long d;
    private boolean e;
    private c f;
    private SocketAddress g;
    private SocketAddress h;
    private ad i;
    private ae j;
    private ae.a k;
    private long l;
    private int m;
    private long n;
    private long o;
    private Record p;
    private int q;

    private aj() {
        l = 0xdbba0L;
    }

    private aj(Name name, int i1, long l1, boolean flag, SocketAddress socketaddress, ae ae1) {
        l = 0xdbba0L;
        h = socketaddress;
        j = ae1;
        if (name.a())
            a = name;
        else
            try {
                a = Name.a(name, Name.a);
            }
            // Misplaced declaration of an exception variable
            catch (Name name) {
                throw new IllegalArgumentException("ZoneTransferIn: name too long");
            }
        b = i1;
        c = 1;
        d = l1;
        e = flag;
        m = 0;
    }

    static long a(Record record) {
        return b(record);
    }

    public static aj a(Name name, SocketAddress socketaddress, ae ae1) {
        return new aj(name, 252, 0L, false, socketaddress, ae1);
    }

    private o a(byte abyte0[]) {
        try {
            abyte0 = new o(abyte0);
        }
        // Misplaced declaration of an exception variable
        catch (byte abyte0[]) {
            if (abyte0 instanceof WireParseException)
                throw (WireParseException)abyte0;
            else
                throw new WireParseException("Error parsing message");
        }
        return abyte0;
    }

    private void a(String s1) {
        if (s.b("verbose"))
            System.out.println(a + ": " + s1);
    }

    private static long b(Record record) {
        return ((SOARecord)record).d();
    }

    private void b(String s1) {
        throw new ZoneTransferException(s1);
    }

    private void c() {
        i = new ad(System.currentTimeMillis() + l);
        if (g != null)
            i.a(g);
        i.b(h);
    }

    private void c(Record record) {
        int i1 = record.k();
        m;
        JVM INSTR tableswitch 0 7: default 56
    //                   0 63
    //                   1 135
    //                   2 242
    //                   3 260
    //                   4 300
    //                   5 318
    //                   6 417
    //                   7 458;
           goto _L1 _L2 _L3 _L4 _L5 _L6 _L7 _L8 _L9
_L1:
        b("invalid state");
_L11:
        return;
_L2:
        if (i1 != 6)
            b("missing initial SOA");
        p = record;
        n = b(record);
        if (b == 251 && aa.a(n, d) <= 0) {
            a("up to date");
            m = 7;
        } else {
            m = 1;
        }
        continue; /* Loop/switch isn't completed */
_L3:
        if (b == 251 && i1 == 6 && b(record) == d) {
            q = 251;
            f.b();
            a("got incremental response");
            m = 2;
        } else {
            q = 252;
            f.a();
            f.c(p);
            a("got nonincremental response");
            m = 6;
        }
        c(record);
        continue; /* Loop/switch isn't completed */
_L4:
        f.a(record);
        m = 3;
        continue; /* Loop/switch isn't completed */
_L5:
        if (i1 == 6) {
            o = b(record);
            m = 4;
            c(record);
        } else {
            f.c(record);
        }
        continue; /* Loop/switch isn't completed */
_L6:
        f.b(record);
        m = 5;
        continue; /* Loop/switch isn't completed */
_L7:
label0:
        {
            if (i1 == 6) {
                long l1 = b(record);
                if (l1 == n) {
                    m = 7;
                    continue; /* Loop/switch isn't completed */
                }
                if (l1 == o)
                    break label0;
                b("IXFR out of sync: expected serial " + o + " , got " + l1);
            }
            f.c(record);
            continue; /* Loop/switch isn't completed */
        }
        m = 2;
        c(record);
        continue; /* Loop/switch isn't completed */
_L8:
        if (i1 != 1 || record.m() == c) {
            f.c(record);
            if (i1 == 6)
                m = 7;
        }
        continue; /* Loop/switch isn't completed */
_L9:
        b("extra data");
        if (true) goto _L11; else goto _L10
_L10:
    }

    private void d() {
        Record record = Record.a(a, b, c);
        o o1 = new o();
        o1.a().d(0);
        o1.a(record, 0);
        if (b == 251)
            o1.a(new SOARecord(a, c, 0L, Name.a, Name.a, d, 0L, 0L, 0L, 0L), 2);
        if (j != null) {
            j.a(o1, null);
            k = new ae.a(j, o1.c());
        }
        byte abyte0[] = o1.c(65535);
        i.a(abyte0);
    }

    private void e() {
        if (!e)
            b("server doesn't support IXFR");
        a("falling back to AXFR");
        b = 252;
        m = 0;
    }

    private void f() {
        if (i != null)
            i.a();
_L2:
        return;
        IOException ioexception;
        ioexception;
        if (true) goto _L2; else goto _L1
_L1:
    }

    private void g() {
        d();
_L10:
        if (m == 7) goto _L2; else goto _L1
_L1:
        o o1;
        Object aobj[];
        aobj = i.b();
        o1 = a(((byte []) (aobj)));
        if (o1.a().c() == 0 && k != null) {
            o1.c();
            if (k.a(o1, ((byte []) (aobj))) != 0)
                b("TSIG failure");
        }
        aobj = o1.a(1);
        if (m != 0) goto _L4; else goto _L3
_L3:
        int i1 = o1.g();
        if (i1 == 0) goto _L6; else goto _L5
_L5:
        if (b != 251 || i1 != 4) goto _L8; else goto _L7
_L7:
        e();
        g();
_L2:
        return;
_L8:
        b(u.a(i1));
_L6:
        Record record = o1.b();
        if (record != null && record.k() != b)
            b("invalid question section");
        if (aobj.length != 0 || b != 251)
            break; /* Loop/switch isn't completed */
        e();
        g();
        if (true) goto _L2; else goto _L4
_L4:
        for (int j1 = 0; j1 < aobj.length; j1++)
            c(aobj[j1]);

        if (m == 7 && k != null && !o1.e())
            b("last message must be signed");
        if (true) goto _L10; else goto _L9
_L9:
    }

    private a h() {
        if (f instanceof a)
            return (a)f;
        else
            throw new IllegalArgumentException("ZoneTransferIn used callback interface");
    }

    public List a() {
        Object obj = new a();
        a(((c) (obj)));
        if (a.a(((a) (obj))) != null)
            obj = a.a(((a) (obj)));
        else
            obj = a.b(((a) (obj)));
        return ((List) (obj));
    }

    public void a(int i1) {
        if (i1 < 0) {
            throw new IllegalArgumentException("timeout cannot be negative");
        } else {
            l = 1000L * (long)i1;
            return;
        }
    }

    public void a(SocketAddress socketaddress) {
        g = socketaddress;
    }

    public void a(c c1) {
        f = c1;
        c();
        g();
        f();
        return;
        c1;
        f();
        throw c1;
    }

    public List b() {
        return a.a(h());
    }
}
