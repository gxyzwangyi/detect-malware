// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.xbill.DNS;

import java.text.DecimalFormat;
import java.text.NumberFormat;

// Referenced classes of package org.xbill.DNS:
//            Record, WireParseException, f, g, 
//            d

public class LOCRecord extends Record {

    private static NumberFormat a;
    private static NumberFormat b;
    private long c;
    private long d;
    private long e;
    private long f;
    private long k;
    private long l;

    LOCRecord() {
    }

    private String a(long l1, char c1, char c2) {
        StringBuffer stringbuffer = new StringBuffer();
        l1 -= 0x80000000L;
        if (l1 < 0L)
            l1 = -l1;
        else
            c2 = c1;
        stringbuffer.append(l1 / 0x36ee80L);
        l1 %= 0x36ee80L;
        stringbuffer.append(" ");
        stringbuffer.append(l1 / 60000L);
        stringbuffer.append(" ");
        a(stringbuffer, b, l1 % 60000L, 1000L);
        stringbuffer.append(" ");
        stringbuffer.append(c2);
        return stringbuffer.toString();
    }

    private void a(StringBuffer stringbuffer, NumberFormat numberformat, long l1, long l2) {
        stringbuffer.append(l1 / l2);
        l1 %= l2;
        if (l1 != 0L) {
            stringbuffer.append(".");
            stringbuffer.append(numberformat.format(l1));
        }
    }

    private int b(long l1) {
        int i = 0;
        for (; l1 > 9L; l1 /= 10L)
            i = (byte)(i + 1);

        return (int)((long)i + (l1 << 4));
    }

    private static long b(int i) {
        long l1;
label0:
        {
            l1 = i >> 4;
            int j = i & 0xf;
            if (l1 <= 9L) {
                i = j;
                if (j <= 9)
                    break label0;
            }
            throw new WireParseException("Invalid LOC Encoding");
        }
        for (; i > 0; i--)
            l1 *= 10L;

        return l1;
    }

    Record a() {
        return new LOCRecord();
    }

    void a(f f1) {
        if (f1.g() != 0) {
            throw new WireParseException("Invalid LOC version");
        } else {
            c = b(f1.g());
            d = b(f1.g());
            e = b(f1.g());
            f = f1.i();
            k = f1.i();
            l = f1.i();
            return;
        }
    }

    void a(g g1, d d1, boolean flag) {
        g1.b(0);
        g1.b(b(c));
        g1.b(b(d));
        g1.b(b(e));
        g1.a(f);
        g1.a(k);
        g1.a(l);
    }

    String b() {
        StringBuffer stringbuffer = new StringBuffer();
        stringbuffer.append(a(f, 'N', 'S'));
        stringbuffer.append(" ");
        stringbuffer.append(a(k, 'E', 'W'));
        stringbuffer.append(" ");
        a(stringbuffer, a, l - 0x989680L, 100L);
        stringbuffer.append("m ");
        a(stringbuffer, a, c, 100L);
        stringbuffer.append("m ");
        a(stringbuffer, a, d, 100L);
        stringbuffer.append("m ");
        a(stringbuffer, a, e, 100L);
        stringbuffer.append("m");
        return stringbuffer.toString();
    }

    static  {
        a = new DecimalFormat();
        a.setMinimumIntegerDigits(2);
        b = new DecimalFormat();
        b.setMinimumIntegerDigits(3);
    }
}
