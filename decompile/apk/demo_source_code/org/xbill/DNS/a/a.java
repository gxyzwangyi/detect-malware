// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.xbill.DNS.a;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;

public class a {

    private MessageDigest a;
    private int b;
    private byte c[];
    private byte d[];

    public a(String s, int i, byte abyte0[]) {
        try {
            a = MessageDigest.getInstance(s);
        }
        // Misplaced declaration of an exception variable
        catch (byte abyte0[]) {
            throw new IllegalArgumentException("unknown digest algorithm " + s);
        }
        b = i;
        c(abyte0);
    }

    private void c(byte abyte0[]) {
        byte abyte1[] = abyte0;
        if (abyte0.length > b) {
            abyte1 = a.digest(abyte0);
            a.reset();
        }
        c = new byte[b];
        d = new byte[b];
        int i = 0;
        int j;
        do {
            j = i;
            if (i >= abyte1.length)
                break;
            c[i] = (byte)(abyte1[i] ^ 0x36);
            d[i] = (byte)(abyte1[i] ^ 0x5c);
            i++;
        } while (true);
        for (; j < b; j++) {
            c[j] = 54;
            d[j] = 92;
        }

        a.update(c);
    }

    public void a(byte abyte0[]) {
        a.update(abyte0);
    }

    public void a(byte abyte0[], int i, int j) {
        a.update(abyte0, i, j);
    }

    public boolean a(byte abyte0[], boolean flag) {
        byte abyte1[] = a();
        if (flag && abyte0.length < abyte1.length) {
            byte abyte2[] = new byte[abyte0.length];
            System.arraycopy(abyte1, 0, abyte2, 0, abyte2.length);
            abyte1 = abyte2;
        }
        return Arrays.equals(abyte0, abyte1);
    }

    public byte[] a() {
        byte abyte0[] = a.digest();
        a.reset();
        a.update(d);
        return a.digest(abyte0);
    }

    public void b() {
        a.reset();
        a.update(c);
    }

    public boolean b(byte abyte0[]) {
        return a(abyte0, false);
    }

    public int c() {
        return a.getDigestLength();
    }
}
