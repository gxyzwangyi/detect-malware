// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.xbill.DNS.a;

import java.io.ByteArrayOutputStream;

public class c {

    private String a;
    private boolean b;
    private boolean c;

    public c(String s, boolean flag, boolean flag1) {
        a = s;
        b = flag;
        c = flag1;
    }

    private static int a(int i) {
        i;
        JVM INSTR tableswitch 1 5: default 36
    //                   1 40
    //                   2 46
    //                   3 51
    //                   4 56
    //                   5 61;
           goto _L1 _L2 _L3 _L4 _L5 _L6
_L1:
        i = -1;
_L8:
        return i;
_L2:
        i = 6;
        continue; /* Loop/switch isn't completed */
_L3:
        i = 4;
        continue; /* Loop/switch isn't completed */
_L4:
        i = 3;
        continue; /* Loop/switch isn't completed */
_L5:
        i = 1;
        continue; /* Loop/switch isn't completed */
_L6:
        i = 0;
        if (true) goto _L8; else goto _L7
_L7:
    }

    public String a(byte abyte0[]) {
        ByteArrayOutputStream bytearrayoutputstream = new ByteArrayOutputStream();
        for (int i = 0; i < (abyte0.length + 4) / 5; i++) {
            short aword0[] = new short[5];
            int ai[] = new int[8];
            int j = 0;
            int i1 = 5;
            while (j < 5)  {
                if (i * 5 + j < abyte0.length) {
                    aword0[j] = (short)(abyte0[i * 5 + j] & 0xff);
                } else {
                    aword0[j] = 0;
                    i1--;
                }
                j++;
            }
            int j1 = a(i1);
            ai[0] = (byte)(aword0[0] >> 3 & 0x1f);
            ai[1] = (byte)((aword0[0] & 7) << 2 | aword0[1] >> 6 & 3);
            ai[2] = (byte)(aword0[1] >> 1 & 0x1f);
            ai[3] = (byte)((aword0[1] & 1) << 4 | aword0[2] >> 4 & 0xf);
            ai[4] = (byte)((aword0[2] & 0xf) << 1 | aword0[3] >> 7 & 1);
            ai[5] = (byte)(aword0[3] >> 2 & 0x1f);
            ai[6] = (byte)((aword0[3] & 3) << 3 | aword0[4] >> 5 & 7);
            ai[7] = (byte)(aword0[4] & 0x1f);
            for (int k = 0; k < ai.length - j1; k++) {
                char c1 = a.charAt(ai[k]);
                char c2 = c1;
                if (c)
                    c2 = Character.toLowerCase(c1);
                bytearrayoutputstream.write(c2);
            }

            if (!b)
                continue;
            for (int l = ai.length - j1; l < ai.length; l++)
                bytearrayoutputstream.write(61);

        }

        return new String(bytearrayoutputstream.toByteArray());
    }
}
