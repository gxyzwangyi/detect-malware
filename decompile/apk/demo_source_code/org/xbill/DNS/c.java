// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.xbill.DNS;

import java.net.InetAddress;
import java.net.UnknownHostException;

// Referenced classes of package org.xbill.DNS:
//            h, f, WireParseException, a, 
//            g

public class c extends h {

    private int a;
    private int b;
    private int c;
    private InetAddress d;

    c() {
        super(8);
    }

    String a() {
        StringBuffer stringbuffer = new StringBuffer();
        stringbuffer.append(d.getHostAddress());
        stringbuffer.append("/");
        stringbuffer.append(b);
        stringbuffer.append(", scope netmask ");
        stringbuffer.append(c);
        return stringbuffer.toString();
    }

    void a(f f1) {
        a = f1.h();
        if (a != 1 && a != 2)
            throw new WireParseException("unknown address family");
        b = f1.g();
        if (b > org.xbill.DNS.a.a(a) * 8)
            throw new WireParseException("invalid source netmask");
        c = f1.g();
        if (c > org.xbill.DNS.a.a(a) * 8)
            throw new WireParseException("invalid scope netmask");
        f1 = f1.j();
        if (f1.length != (b + 7) / 8)
            throw new WireParseException("invalid address");
        byte abyte0[] = new byte[org.xbill.DNS.a.a(a)];
        System.arraycopy(f1, 0, abyte0, 0, f1.length);
        try {
            d = InetAddress.getByAddress(abyte0);
        }
        // Misplaced declaration of an exception variable
        catch (f f1) {
            throw new WireParseException("invalid address", f1);
        }
        if (!org.xbill.DNS.a.a(d, b).equals(d))
            throw new WireParseException("invalid padding");
        else
            return;
    }

    void a(g g1) {
        g1.c(a);
        g1.b(b);
        g1.b(c);
        g1.a(d.getAddress(), 0, (b + 7) / 8);
    }
}
