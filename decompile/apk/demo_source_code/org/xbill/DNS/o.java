// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.xbill.DNS;

import java.util.*;

// Referenced classes of package org.xbill.DNS:
//            Record, RRset, m, WireParseException, 
//            f, SIGRecord, g, OPTRecord, 
//            Name, ae, d, TSIGRecord, 
//            ag, e, z

public class o
    implements Cloneable {

    private static Record j[] = new Record[0];
    private static RRset k[] = new RRset[0];
    int a;
    int b;
    int c;
    private m d;
    private List e[];
    private int f;
    private ae g;
    private TSIGRecord h;
    private int i;

    public o() {
        this(new m());
    }

    public o(int l) {
        this(new m(l));
    }

    o(f f1) {
        int l;
        boolean flag1;
        this(new m(f1));
        int i1;
        int j1;
        int k1;
        boolean flag;
        Object obj;
        List alist[];
        if (d.d() == 5)
            flag = true;
        else
            flag = false;
        flag1 = d.b(6);
        l = 0;
_L5:
        if (l >= 4)
            break; /* Loop/switch isn't completed */
        j1 = d.g(l);
        if (j1 <= 0)
            break MISSING_BLOCK_LABEL_83;
        alist = e;
        obj = JVM INSTR new #66  <Class ArrayList>;
        ((ArrayList) (obj)).ArrayList(j1);
        alist[l] = ((List) (obj));
        i1 = 0;
_L3:
        if (i1 >= j1) goto _L2; else goto _L1
_L1:
        k1 = f1.a();
        obj = Record.a(f1, l, flag);
        e[l].add(obj);
        if (l != 3)
            continue; /* Loop/switch isn't completed */
        if (((Record) (obj)).k() == 250)
            a = k1;
        if (((Record) (obj)).k() == 24 && ((SIGRecord)obj).d() == 0)
            c = k1;
        i1++;
          goto _L3
_L2:
        l++;
        if (true) goto _L5; else goto _L4
        WireParseException wireparseexception;
        wireparseexception;
        if (!flag1)
            throw wireparseexception;
_L4:
        f = f1.a();
        return;
    }

    private o(m m1) {
        e = new List[4];
        d = m1;
    }

    public o(byte abyte0[]) {
        this(new f(abyte0));
    }

    private int a(g g1, int l, d d1, int i1) {
        int j1;
        int k1;
        int l1;
        int i2;
        int k2;
        Record record;
        i2 = 0;
        k2 = e[l].size();
        k1 = g1.a();
        record = null;
        j1 = 0;
        l1 = 0;
_L5:
        int j2 = j1;
        if (i2 >= k2) goto _L2; else goto _L1
_L1:
        Record record1 = (Record)e[l].get(i2);
        if (l != 3 || !(record1 instanceof OPTRecord)) goto _L4; else goto _L3
_L3:
        j1++;
_L6:
        i2++;
          goto _L5
_L4:
        if (record != null && !a(record1, record)) {
            k1 = g1.a();
            l1 = i2;
        }
        record1.a(g1, l, d1);
        if (g1.a() <= i1)
            break MISSING_BLOCK_LABEL_146;
        g1.a(k1);
        j2 = j1 + (k2 - l1);
_L2:
        return j2;
        record = record1;
          goto _L6
    }

    public static o a(Record record) {
        o o1 = new o();
        o1.d.d(0);
        o1.d.a(7);
        o1.a(record, 0);
        return o1;
    }

    private static boolean a(Record record, Record record1) {
        boolean flag;
        if (record.l() == record1.l() && record.m() == record1.m() && record.j().equals(record1.j()))
            flag = true;
        else
            flag = false;
        return flag;
    }

    private boolean a(g g1, int l) {
        if (l >= 12) goto _L2; else goto _L1
_L1:
        boolean flag = false;
_L7:
        return flag;
_L2:
        int i1;
        int j1;
        int i2;
        int j2;
        byte abyte0[];
        Object obj;
        i1 = l;
        if (g != null)
            i1 = l - g.a();
        obj = f();
        abyte0 = null;
        j1 = i1;
        if (obj != null) {
            abyte0 = ((OPTRecord) (obj)).a(3);
            j1 = i1 - abyte0.length;
        }
        j2 = g1.a();
        d.a(g1);
        obj = new d();
        i2 = d.e();
        i1 = 0;
        l = 0;
_L4:
        if (i1 >= 4)
            break MISSING_BLOCK_LABEL_340;
        if (e[i1] != null)
            break; /* Loop/switch isn't completed */
_L8:
        i1++;
        if (true) goto _L4; else goto _L3
_L3:
        int k2 = a(g1, i1, ((d) (obj)), j1);
        if (k2 == 0 || i1 == 3) goto _L6; else goto _L5
_L5:
        int k1 = m.a(i2, 6, true);
        g1.a(d.g(i1) - k2, j2 + 4 + i1 * 2);
        for (i1++; i1 < 3; i1++)
            g1.a(0, j2 + 4 + i1 * 2);

        i1 = k1;
_L9:
        int l1 = l;
        if (abyte0 != null) {
            g1.a(abyte0);
            l1 = l + 1;
        }
        if (i1 != d.e())
            g1.a(i1, j2 + 2);
        if (l1 != d.g(3))
            g1.a(l1, j2 + 10);
        if (g != null) {
            g.a(this, g1.b(), i, h).a(g1, 3, ((d) (obj)));
            g1.a(l1 + 1, j2 + 10);
        }
        flag = true;
          goto _L7
_L6:
        if (i1 == 3)
            l = d.g(i1) - k2;
          goto _L8
        i1 = i2;
          goto _L9
    }

    public m a() {
        return d;
    }

    public void a(Record record, int l) {
        if (e[l] == null)
            e[l] = new LinkedList();
        d.e(l);
        e[l].add(record);
    }

    void a(g g1) {
        d.a(g1);
        d d1 = new d();
        int l = 0;
        while (l < 4)  {
            if (e[l] != null) {
                int i1 = 0;
                while (i1 < e[l].size())  {
                    ((Record)e[l].get(i1)).a(g1, l, d1);
                    i1++;
                }
            }
            l++;
        }
    }

    public Record[] a(int l) {
        Object obj;
        if (e[l] == null) {
            obj = j;
        } else {
            obj = e[l];
            obj = (Record[])(Record[])((List) (obj)).toArray(new Record[((List) (obj)).size()]);
        }
        return ((Record []) (obj));
    }

    public Record b() {
        Object obj = e[0];
        if (obj == null || ((List) (obj)).size() == 0)
            obj = null;
        else
            obj = (Record)((List) (obj)).get(0);
        return ((Record) (obj));
    }

    public RRset[] b(int l) {
        if (e[l] != null) goto _L2; else goto _L1
_L1:
        Object obj = k;
_L9:
        return ((RRset []) (obj));
_L2:
        HashSet hashset;
        Record arecord[];
        obj = new LinkedList();
        arecord = a(l);
        hashset = new HashSet();
        l = 0;
_L7:
        if (l >= arecord.length) goto _L4; else goto _L3
_L3:
        int i1;
        Name name;
        name = arecord[l].j();
        if (!hashset.contains(name))
            break MISSING_BLOCK_LABEL_217;
        i1 = ((List) (obj)).size() - 1;
_L8:
        RRset rrset;
        if (i1 < 0)
            break MISSING_BLOCK_LABEL_217;
        rrset = (RRset)((List) (obj)).get(i1);
        if (rrset.b() != arecord[l].l() || rrset.e() != arecord[l].m() || !rrset.d().equals(name)) goto _L6; else goto _L5
_L5:
        rrset.a(arecord[l]);
        i1 = 0;
_L10:
        if (i1 != 0) {
            ((List) (obj)).add(new RRset(arecord[l]));
            hashset.add(name);
        }
        l++;
          goto _L7
_L6:
        i1--;
          goto _L8
_L4:
        obj = (RRset[])(RRset[])((List) (obj)).toArray(new RRset[((List) (obj)).size()]);
          goto _L9
        i1 = 1;
          goto _L10
    }

    public TSIGRecord c() {
        int l = d.g(3);
        Object obj;
        if (l == 0) {
            obj = null;
        } else {
            obj = (Record)e[3].get(l - 1);
            if (((Record) (obj)).h != 250)
                obj = null;
            else
                obj = (TSIGRecord)obj;
        }
        return ((TSIGRecord) (obj));
    }

    public byte[] c(int l) {
        g g1 = new g();
        a(g1, l);
        f = g1.a();
        return g1.b();
    }

    public Object clone() {
        o o1 = new o();
        for (int l = 0; l < e.length; l++)
            if (e[l] != null)
                o1.e[l] = new LinkedList(e[l]);

        o1.d = (m)d.clone();
        o1.f = f;
        return o1;
    }

    public String d(int l) {
        Object obj;
        if (l > 3) {
            obj = null;
        } else {
            StringBuffer stringbuffer = new StringBuffer();
            Record arecord[] = a(l);
            int i1 = 0;
            while (i1 < arecord.length)  {
                obj = arecord[i1];
                if (l == 0) {
                    stringbuffer.append(";;\t" + ((Record) (obj)).g);
                    stringbuffer.append(", type = " + ag.b(((Record) (obj)).h));
                    stringbuffer.append(", class = " + org.xbill.DNS.e.b(((Record) (obj)).i));
                } else {
                    stringbuffer.append(obj);
                }
                stringbuffer.append("\n");
                i1++;
            }
            obj = stringbuffer.toString();
        }
        return ((String) (obj));
    }

    public boolean d() {
        boolean flag1 = true;
        boolean flag = flag1;
        if (b != 3) {
            flag = flag1;
            if (b != 1)
                if (b == 4)
                    flag = flag1;
                else
                    flag = false;
        }
        return flag;
    }

    public boolean e() {
        boolean flag = true;
        if (b != 1)
            flag = false;
        return flag;
    }

    public OPTRecord f() {
        int l;
        Record arecord[];
        arecord = a(3);
        l = 0;
_L3:
        if (l >= arecord.length)
            break MISSING_BLOCK_LABEL_38;
        if (!(arecord[l] instanceof OPTRecord)) goto _L2; else goto _L1
_L1:
        OPTRecord optrecord = (OPTRecord)arecord[l];
_L4:
        return optrecord;
_L2:
        l++;
          goto _L3
        optrecord = null;
          goto _L4
    }

    public int g() {
        int i1 = d.c();
        OPTRecord optrecord = f();
        int l = i1;
        if (optrecord != null)
            l = i1 + (optrecord.e() << 4);
        return l;
    }

    public byte[] h() {
        g g1 = new g();
        a(g1);
        f = g1.a();
        return g1.b();
    }

    public int i() {
        return f;
    }

    public String toString() {
        StringBuffer stringbuffer = new StringBuffer();
        int l;
        if (f() != null)
            stringbuffer.append(d.h(g()) + "\n");
        else
            stringbuffer.append(d + "\n");
        if (d()) {
            stringbuffer.append(";; TSIG ");
            if (e())
                stringbuffer.append("ok");
            else
                stringbuffer.append("invalid");
            stringbuffer.append('\n');
        }
        l = 0;
        while (l < 4)  {
            if (d.d() != 5)
                stringbuffer.append(";; " + z.b(l) + ":\n");
            else
                stringbuffer.append(";; " + z.c(l) + ":\n");
            stringbuffer.append(d(l) + "\n");
            l++;
        }
        stringbuffer.append(";; Message size: " + i() + " bytes");
        return stringbuffer.toString();
    }

}
