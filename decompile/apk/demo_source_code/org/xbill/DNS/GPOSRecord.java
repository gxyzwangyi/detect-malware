// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.xbill.DNS;


// Referenced classes of package org.xbill.DNS:
//            Record, f, WireParseException, g, 
//            d

public class GPOSRecord extends Record {

    private byte a[];
    private byte b[];
    private byte c[];

    GPOSRecord() {
    }

    private void a(double d1, double d2) {
        if (d1 < -90D || d1 > 90D)
            throw new IllegalArgumentException("illegal longitude " + d1);
        if (d2 < -180D || d2 > 180D)
            throw new IllegalArgumentException("illegal latitude " + d2);
        else
            return;
    }

    Record a() {
        return new GPOSRecord();
    }

    void a(f f1) {
        b = f1.k();
        a = f1.k();
        c = f1.k();
        try {
            a(d(), f());
            return;
        }
        // Misplaced declaration of an exception variable
        catch (f f1) {
            throw new WireParseException(f1.getMessage());
        }
    }

    void a(g g1, d d1, boolean flag) {
        g1.b(b);
        g1.b(a);
        g1.b(c);
    }

    String b() {
        StringBuffer stringbuffer = new StringBuffer();
        stringbuffer.append(a(b, true));
        stringbuffer.append(" ");
        stringbuffer.append(a(a, true));
        stringbuffer.append(" ");
        stringbuffer.append(a(c, true));
        return stringbuffer.toString();
    }

    public double d() {
        return Double.parseDouble(n_());
    }

    public String e() {
        return a(a, false);
    }

    public double f() {
        return Double.parseDouble(e());
    }

    public String n_() {
        return a(b, false);
    }
}
