// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.xbill.DNS;

import java.io.Serializable;
import java.util.Iterator;
import java.util.TreeSet;

// Referenced classes of package org.xbill.DNS:
//            f, WireParseException, p, g, 
//            ag

final class TypeBitmap
    implements Serializable {

    private TreeSet a;

    private TypeBitmap() {
        a = new TreeSet();
    }

    public TypeBitmap(f f1) {
        this();
        while (f1.b() > 0)  {
            if (f1.b() < 2)
                throw new WireParseException("invalid bitmap descriptor");
            int k = f1.g();
            if (k < -1)
                throw new WireParseException("invalid ordering");
            int l = f1.g();
            if (l > f1.b())
                throw new WireParseException("invalid bitmap");
            int i = 0;
            while (i < l)  {
                int i1 = f1.g();
                if (i1 != 0) {
                    int j = 0;
                    while (j < 8)  {
                        if ((1 << 7 - j & i1) != 0)
                            a.add(p.c(k * 256 + i * 8 + j));
                        j++;
                    }
                }
                i++;
            }
        }
    }

    private static void a(g g1, TreeSet treeset, int i) {
        int j = (((Integer)treeset.last()).intValue() & 0xff) / 8 + 1;
        int ai[] = new int[j];
        g1.b(i);
        g1.b(j);
        for (treeset = treeset.iterator(); treeset.hasNext();) {
            int k = ((Integer)treeset.next()).intValue();
            i = (k & 0xff) / 8;
            ai[i] = 1 << 7 - k % 8 | ai[i];
        }

        for (i = 0; i < j; i++)
            g1.b(ai[i]);

    }

    public void a(g g1) {
        if (a.size() != 0) {
            TreeSet treeset = new TreeSet();
            Iterator iterator = a.iterator();
            int i = -1;
            while (iterator.hasNext())  {
                int l = ((Integer)iterator.next()).intValue();
                int k = l >> 8;
                int j;
                if (k != i) {
                    j = k;
                    if (treeset.size() > 0) {
                        a(g1, treeset, i);
                        treeset.clear();
                        j = k;
                    }
                } else {
                    j = i;
                }
                treeset.add(new Integer(l));
                i = j;
            }
            a(g1, treeset, i);
        }
    }

    public boolean a() {
        return a.isEmpty();
    }

    public String toString() {
        StringBuffer stringbuffer = new StringBuffer();
        Iterator iterator = a.iterator();
        do {
            if (!iterator.hasNext())
                break;
            stringbuffer.append(ag.b(((Integer)iterator.next()).intValue()));
            if (iterator.hasNext())
                stringbuffer.append(' ');
        } while (true);
        return stringbuffer.toString();
    }
}
