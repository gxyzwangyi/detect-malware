// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.xbill.DNS;

import java.io.IOException;
import java.io.PrintStream;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.util.Iterator;
import java.util.List;

// Referenced classes of package org.xbill.DNS:
//            w, x, o, s, 
//            WireParseException, ae, u, OPTRecord, 
//            ZoneTransferException, Record, aj, m, 
//            Name, v, ad, ah, 
//            y

public class ac
    implements w {

    private static String h = "localhost";
    private static int i = 0;
    private InetSocketAddress a;
    private InetSocketAddress b;
    private boolean c;
    private boolean d;
    private OPTRecord e;
    private ae f;
    private long g;

    public ac() {
        this(null);
    }

    public ac(String s1) {
        g = 10000L;
        String s2 = s1;
        if (s1 == null) {
            s1 = x.e().b();
            s2 = s1;
            if (s1 == null)
                s2 = h;
        }
        if (s2.equals("0"))
            s1 = InetAddress.getLocalHost();
        else
            s1 = InetAddress.getByName(s2);
        a = new InetSocketAddress(s1, 53);
    }

    private o a(byte abyte0[]) {
        try {
            abyte0 = new o(abyte0);
        }
        // Misplaced declaration of an exception variable
        catch (byte abyte0[]) {
            if (s.b("verbose"))
                abyte0.printStackTrace();
            Object obj = abyte0;
            if (!(abyte0 instanceof WireParseException))
                obj = new WireParseException("Error parsing message");
            throw (WireParseException)obj;
        }
        return abyte0;
    }

    private void a(o o1, o o2, byte abyte0[], ae ae1) {
        if (ae1 != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        int j = ae1.a(o2, abyte0, o1.c());
        if (s.b("verbose"))
            System.err.println("TSIG verify: " + u.b(j));
        if (true) goto _L1; else goto _L3
_L3:
    }

    private void b(o o1) {
        if (e != null && o1.f() == null)
            o1.a(e, 3);
    }

    private int c(o o1) {
        o1 = o1.f();
        int j;
        if (o1 == null)
            j = 512;
        else
            j = o1.d();
        return j;
    }

    private o d(o o1) {
        Object obj = aj.a(o1.b().j(), a, f);
        ((aj) (obj)).a((int)(a() / 1000L));
        ((aj) (obj)).a(b);
        List list;
        try {
            ((aj) (obj)).a();
        }
        // Misplaced declaration of an exception variable
        catch (o o1) {
            throw new WireParseException(o1.getMessage());
        }
        list = ((aj) (obj)).b();
        obj = new o(o1.a().b());
        ((o) (obj)).a().a(5);
        ((o) (obj)).a().a(0);
        ((o) (obj)).a(o1.b(), 0);
        for (o1 = list.iterator(); o1.hasNext(); ((o) (obj)).a((Record)o1.next(), 1));
        return ((o) (obj));
    }

    long a() {
        return g;
    }

    public Object a(o o1, y y) {
        this;
        JVM INSTR monitorenter ;
        Integer integer;
        integer = JVM INSTR new #218 <Class Integer>;
        int j = i;
        i = j + 1;
        integer.Integer(j);
        this;
        JVM INSTR monitorexit ;
        Object obj = o1.b();
        if (obj != null)
            obj = ((Record) (obj)).j().toString();
        else
            obj = "(none)";
        obj = getClass() + ": " + obj;
        o1 = new v(this, o1, integer, y);
        o1.setName(((String) (obj)));
        o1.setDaemon(true);
        o1.start();
        return integer;
        o1;
        this;
        JVM INSTR monitorexit ;
        throw o1;
    }

    public o a(o o1) {
        if (s.b("verbose"))
            System.err.println("Sending to " + a.getAddress().getHostAddress() + ":" + a.getPort());
        if (o1.a().d() != 0) goto _L2; else goto _L1
_L1:
        Record record = o1.b();
        if (record == null || record.k() != 252) goto _L2; else goto _L3
_L3:
        o1 = d(o1);
_L5:
        return o1;
_L2:
        o o3 = (o)o1.clone();
        b(o3);
        if (f != null)
            f.a(o3, null);
        byte abyte0[] = o3.c(65535);
        int j = c(o3);
        long l1 = System.currentTimeMillis();
        l1 = g + l1;
        boolean flag = false;
        o o2;
        do {
            if (c || abyte0.length > j)
                flag = true;
            if (flag)
                o1 = ad.a(b, a, abyte0, l1);
            else
                o1 = ah.a(b, a, abyte0, j, l1);
            if (o1.length < 12)
                throw new WireParseException("invalid DNS header - too short");
            int k = ((o1[0] & 0xff) << 8) + (o1[1] & 0xff);
            int l = o3.a().b();
            if (k != l) {
                o1 = "invalid message id: expected " + l + "; got id " + k;
                if (flag)
                    throw new WireParseException(o1);
                if (s.b("verbose"))
                    System.err.println(o1);
                continue;
            }
            o2 = a(((byte []) (o1)));
            a(o3, o2, ((byte []) (o1)), f);
            if (flag || d || !o2.a().b(6))
                break;
            flag = true;
        } while (true);
        o1 = o2;
        if (true) goto _L5; else goto _L4
_L4:
    }

    public void a(int j) {
        a(j, 0);
    }

    public void a(int j, int k) {
        g = (long)j * 1000L + (long)k;
    }

}
