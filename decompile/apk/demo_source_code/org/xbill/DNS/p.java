// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.xbill.DNS;

import java.util.HashMap;

class p {

    private static Integer a[];
    private HashMap b;
    private HashMap c;
    private String d;
    private int e;
    private String f;
    private int g;
    private boolean h;

    public p(String s, int i) {
        d = s;
        e = i;
        b = new HashMap();
        c = new HashMap();
        g = 0x7fffffff;
    }

    private String b(String s) {
        if (e != 2) goto _L2; else goto _L1
_L1:
        String s1 = s.toUpperCase();
_L4:
        return s1;
_L2:
        s1 = s;
        if (e == 3)
            s1 = s.toLowerCase();
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static Integer c(int i) {
        Integer integer;
        if (i >= 0 && i < a.length)
            integer = a[i];
        else
            integer = new Integer(i);
        return integer;
    }

    public void a(int i) {
        if (i < 0 || i > g)
            throw new IllegalArgumentException(d + " " + i + "is out of range");
        else
            return;
    }

    public void a(int i, String s) {
        a(i);
        Integer integer = c(i);
        s = b(s);
        b.put(s, integer);
        c.put(integer, s);
    }

    public void a(String s) {
        f = b(s);
    }

    public void a(p p1) {
        if (e != p1.e) {
            throw new IllegalArgumentException(p1.d + ": wordcases do not match");
        } else {
            b.putAll(p1.b);
            c.putAll(p1.c);
            return;
        }
    }

    public void a(boolean flag) {
        h = flag;
    }

    public void b(int i) {
        g = i;
    }

    public void b(int i, String s) {
        a(i);
        Integer integer = c(i);
        s = b(s);
        b.put(s, integer);
    }

    public String d(int i) {
        String s;
        a(i);
        s = (String)c.get(c(i));
        if (s == null) goto _L2; else goto _L1
_L1:
        return s;
_L2:
        String s1 = Integer.toString(i);
        s = s1;
        if (f != null)
            s = f + s1;
        if (true) goto _L1; else goto _L3
_L3:
    }

    static  {
        a = new Integer[64];
        for (int i = 0; i < a.length; i++)
            a[i] = new Integer(i);

    }
}
