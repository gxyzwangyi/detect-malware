// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.xbill.DNS;

import java.io.Serializable;
import java.util.*;

// Referenced classes of package org.xbill.DNS:
//            Record, RRSIGRecord, e, ag, 
//            Name

public class RRset
    implements Serializable {

    private List a;
    private short b;
    private short c;

    public RRset() {
        a = new ArrayList(1);
        b = 0;
        c = 0;
    }

    public RRset(RRset rrset) {
        rrset;
        JVM INSTR monitorenter ;
        a = (List)((ArrayList)rrset.a).clone();
        b = rrset.b;
        c = rrset.c;
        rrset;
        JVM INSTR monitorexit ;
        return;
        Exception exception;
        exception;
        rrset;
        JVM INSTR monitorexit ;
        throw exception;
    }

    public RRset(Record record) {
        this();
        b(record);
    }

    private String a(Iterator iterator) {
        StringBuffer stringbuffer = new StringBuffer();
        do {
            if (!iterator.hasNext())
                break;
            Record record = (Record)iterator.next();
            stringbuffer.append("[");
            stringbuffer.append(record.i());
            stringbuffer.append("]");
            if (iterator.hasNext())
                stringbuffer.append(" ");
        } while (true);
        return stringbuffer.toString();
    }

    private Iterator a(boolean flag, boolean flag1) {
        int i = 0;
        this;
        JVM INSTR monitorenter ;
        int k = a.size();
        if (!flag) goto _L2; else goto _L1
_L1:
        int j = k - b;
_L5:
        if (j != 0) goto _L4; else goto _L3
_L3:
        Object obj = Collections.EMPTY_LIST.iterator();
_L10:
        this;
        JVM INSTR monitorexit ;
        return ((Iterator) (obj));
_L2:
        j = b;
          goto _L5
_L4:
        if (!flag) goto _L7; else goto _L6
_L6:
        if (flag1) goto _L9; else goto _L8
_L8:
        obj = JVM INSTR new #17  <Class ArrayList>;
        ((ArrayList) (obj)).ArrayList(j);
        if (!flag)
            break MISSING_BLOCK_LABEL_184;
        ((List) (obj)).addAll(a.subList(i, j));
        if (i == 0)
            break MISSING_BLOCK_LABEL_124;
        ((List) (obj)).addAll(a.subList(0, i));
_L11:
        obj = ((List) (obj)).iterator();
          goto _L10
_L9:
        if (c >= j)
            c = 0;
        i = c;
        c = (short)(i + 1);
          goto _L8
        obj;
        throw obj;
_L7:
        i = k - b;
          goto _L8
        ((List) (obj)).addAll(a.subList(i, k));
          goto _L11
    }

    private void b(Record record) {
        if (!(record instanceof RRSIGRecord)) {
            if (b == 0)
                a.add(record);
            else
                a.add(a.size() - b, record);
        } else {
            a.add(record);
            b = (short)(b + 1);
        }
    }

    public void a(Record record) {
        this;
        JVM INSTR monitorenter ;
        if (a.size() != 0) goto _L2; else goto _L1
_L1:
        b(record);
_L7:
        this;
        JVM INSTR monitorexit ;
        return;
_L2:
        Record record3;
        record3 = g();
        if (!record.a(record3)) {
            record = JVM INSTR new #110 <Class IllegalArgumentException>;
            record.IllegalArgumentException("record does not match rrset");
            throw record;
        }
        break MISSING_BLOCK_LABEL_54;
        record;
        this;
        JVM INSTR monitorexit ;
        throw record;
        Record record1 = record;
        if (record.n() == record3.n()) goto _L4; else goto _L3
_L3:
        if (record.n() <= record3.n()) goto _L6; else goto _L5
_L5:
        record1 = record.o();
        record1.a(record3.n());
_L4:
        if (!a.contains(record1))
            b(record1);
          goto _L7
_L6:
        int i = 0;
_L9:
        record1 = record;
        if (i >= a.size()) goto _L4; else goto _L8
_L8:
        Record record2 = ((Record)a.get(i)).o();
        record2.a(record.n());
        a.set(i, record2);
        i++;
          goto _L9
    }

    public int b() {
        return g().l();
    }

    public Iterator c() {
        this;
        JVM INSTR monitorenter ;
        Iterator iterator = a(true, true);
        this;
        JVM INSTR monitorexit ;
        return iterator;
        Exception exception;
        exception;
        throw exception;
    }

    public Name d() {
        return g().j();
    }

    public int e() {
        return g().m();
    }

    public long f() {
        this;
        JVM INSTR monitorenter ;
        long l = g().n();
        this;
        JVM INSTR monitorexit ;
        return l;
        Exception exception;
        exception;
        throw exception;
    }

    public Record g() {
        this;
        JVM INSTR monitorenter ;
        if (a.size() == 0) {
            IllegalStateException illegalstateexception = JVM INSTR new #153 <Class IllegalStateException>;
            illegalstateexception.IllegalStateException("rrset is empty");
            throw illegalstateexception;
        }
        break MISSING_BLOCK_LABEL_31;
        Exception exception;
        exception;
        this;
        JVM INSTR monitorexit ;
        throw exception;
        Record record = (Record)a.get(0);
        this;
        JVM INSTR monitorexit ;
        return record;
    }

    public String toString() {
        Object obj;
        if (a.size() == 0) {
            obj = "{empty}";
        } else {
            obj = new StringBuffer();
            ((StringBuffer) (obj)).append("{ ");
            ((StringBuffer) (obj)).append(d() + " ");
            ((StringBuffer) (obj)).append(f() + " ");
            ((StringBuffer) (obj)).append(org.xbill.DNS.e.b(e()) + " ");
            ((StringBuffer) (obj)).append(ag.b(b()) + " ");
            ((StringBuffer) (obj)).append(a(a(true, false)));
            if (b > 0) {
                ((StringBuffer) (obj)).append(" sigs: ");
                ((StringBuffer) (obj)).append(a(a(false, false)));
            }
            ((StringBuffer) (obj)).append(" }");
            obj = ((StringBuffer) (obj)).toString();
        }
        return ((String) (obj));
    }
}
