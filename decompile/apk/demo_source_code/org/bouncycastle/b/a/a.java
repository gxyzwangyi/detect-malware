// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.bouncycastle.b.a;

import java.math.BigInteger;
import org.bouncycastle.b.b.b;
import org.bouncycastle.b.b.g;

// Referenced classes of package org.bouncycastle.b.a:
//            f, c, d, b

public class a {

    public static f a(f f1, BigInteger biginteger) {
        BigInteger biginteger1 = biginteger.abs();
        f f3 = f1.c().b();
        int j = biginteger1.bitLength();
        f f2 = f3;
        if (j > 0) {
            f2 = f3;
            if (biginteger1.testBit(0))
                f2 = f1;
            int i = 1;
            f3 = f1;
            f1 = f2;
            do {
                f2 = f1;
                if (i >= j)
                    break;
                f3 = f3.n();
                f2 = f1;
                if (biginteger1.testBit(i))
                    f2 = f1.b(f3);
                i++;
                f1 = f2;
            } while (true);
        }
        f1 = f2;
        if (biginteger.signum() < 0)
            f1 = f2.m();
        return f1;
    }

    public static void a(d ad[], int i, int j, d d1) {
        int k = 0;
        d ad1[] = new d[j];
        for (ad1[0] = ad[i]; ++k < j; ad1[k] = ad1[k - 1].c(ad[i + k]));
        j = k - 1;
        if (d1 != null)
            ad1[j] = ad1[j].c(d1);
        d1 = ad1[j].f();
        int l;
        for (; j > 0; j = l) {
            l = j - 1;
            j += i;
            d d2 = ad[j];
            ad[j] = ad1[l].c(d1);
            d1 = d1.c(d2);
        }

        ad[i] = d1;
    }

    public static boolean a(c c1) {
        return a(c1.c());
    }

    public static boolean a(b b1) {
        boolean flag = true;
        if (b1.b() <= 1 || !b1.a().equals(b.c) || !(b1 instanceof g))
            flag = false;
        return flag;
    }

    public static boolean b(c c1) {
        return b(c1.c());
    }

    public static boolean b(b b1) {
        boolean flag = true;
        if (b1.b() != 1)
            flag = false;
        return flag;
    }
}
