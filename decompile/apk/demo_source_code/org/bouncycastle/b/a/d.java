// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.bouncycastle.b.a;

import java.math.BigInteger;
import java.util.Random;

// Referenced classes of package org.bouncycastle.b.a:
//            b, g

public abstract class d
    implements org.bouncycastle.b.a.b {
    public static class a extends d {

        private int g;
        private int h;
        private int i[];
        private g j;

        public static void b(d d1, d d2) {
            if (!(d1 instanceof a) || !(d2 instanceof a))
                throw new IllegalArgumentException("Field elements are not both instances of ECFieldElement.F2m");
            d1 = (a)d1;
            d2 = (a)d2;
            if (((a) (d1)).g != ((a) (d2)).g)
                throw new IllegalArgumentException("One of the F2m field elements has incorrect representation");
            if (((a) (d1)).h != ((a) (d2)).h || !org.bouncycastle.util.a.a(((a) (d1)).i, ((a) (d2)).i))
                throw new IllegalArgumentException("Field elements are not elements of the same field F2m");
            else
                return;
        }

        public BigInteger a() {
            return j.e();
        }

        public d a(int k) {
            a a1;
            if (k < 1)
                a1 = this;
            else
                a1 = new a(h, i, j.a(k, h, i));
            return a1;
        }

        public d a(d d1) {
            g g1 = (g)j.clone();
            g1.a(((a)d1).j, 0);
            return new a(h, i, g1);
        }

        public d a(d d1, d d2) {
            g g1 = j;
            d1 = ((a)d1).j;
            g g2 = ((a)d2).j;
            d2 = g1.c(h, i);
            g2 = d1.b(g2, h, i);
            d1 = d2;
            if (d2 == g1)
                d1 = (g)d2.clone();
            d1.a(g2, 0);
            d1.a(h, i);
            return new a(h, i, d1);
        }

        public d a(d d1, d d2, d d3) {
            return b(d1, d2, d3);
        }

        public int b() {
            return h;
        }

        public d b(d d1) {
            return a(d1);
        }

        public d b(d d1, d d2, d d3) {
label0:
            {
                g g1 = j;
                g g2 = ((a)d1).j;
                d1 = ((a)d2).j;
                d3 = ((a)d3).j;
                d2 = g1.b(g2, h, i);
                d3 = d1.b(d3, h, i);
                if (d2 != g1) {
                    d1 = d2;
                    if (d2 != g2)
                        break label0;
                }
                d1 = (g)d2.clone();
            }
            d1.a(d3, 0);
            d1.a(h, i);
            return new a(h, i, d1);
        }

        public d c() {
            return new a(h, i, j.f());
        }

        public d c(d d1) {
            return new a(h, i, j.a(((a)d1).j, h, i));
        }

        public d d() {
            return this;
        }

        public d d(d d1) {
            return c(d1.f());
        }

        public d e() {
            return new a(h, i, j.b(h, i));
        }

        public boolean equals(Object obj) {
            boolean flag = true;
            if (obj != this) goto _L2; else goto _L1
_L1:
            return flag;
_L2:
            if (!(obj instanceof a)) {
                flag = false;
            } else {
                obj = (a)obj;
                if (h != ((a) (obj)).h || g != ((a) (obj)).g || !org.bouncycastle.util.a.a(i, ((a) (obj)).i) || !j.equals(((a) (obj)).j))
                    flag = false;
            }
            if (true) goto _L1; else goto _L3
_L3:
        }

        public d f() {
            return new a(h, i, j.d(h, i));
        }

        public d g() {
            Object obj = this;
            if (!j.b())
                if (j.a())
                    obj = this;
                else
                    obj = a(h - 1);
            return ((d) (obj));
        }

        public int h() {
            return j.d();
        }

        public int hashCode() {
            return j.hashCode() ^ h ^ org.bouncycastle.util.a.a(i);
        }

        public boolean i() {
            return j.a();
        }

        public boolean j() {
            return j.b();
        }

        public a(int k, int l, int i1, int j1, BigInteger biginteger) {
            if (biginteger == null || biginteger.signum() < 0 || biginteger.bitLength() > k)
                throw new IllegalArgumentException("x value invalid in F2m field element");
            if (i1 == 0 && j1 == 0) {
                g = 2;
                i = (new int[] {
                    l
                });
            } else {
                if (i1 >= j1)
                    throw new IllegalArgumentException("k2 must be smaller than k3");
                if (i1 <= 0)
                    throw new IllegalArgumentException("k2 must be larger than 0");
                g = 3;
                i = (new int[] {
                    l, i1, j1
                });
            }
            h = k;
            j = new g(biginteger);
        }

        private a(int k, int ai[], g g1) {
            h = k;
            if (ai.length == 1)
                k = 2;
            else
                k = 3;
            g = k;
            i = ai;
            j = g1;
        }
    }

    public static class b extends d {

        BigInteger g;
        BigInteger h;
        BigInteger i;

        static BigInteger a(BigInteger biginteger) {
            int k = biginteger.bitLength();
            if (k >= 96 && biginteger.shiftRight(k - 64).longValue() == -1L)
                biginteger = b.shiftLeft(k).subtract(biginteger);
            else
                biginteger = null;
            return biginteger;
        }

        private BigInteger[] a(BigInteger biginteger, BigInteger biginteger1, BigInteger biginteger2) {
            int k = biginteger2.bitLength();
            int i1 = biginteger2.getLowestSetBit();
            BigInteger biginteger5 = org.bouncycastle.b.a.b.b;
            BigInteger biginteger4 = org.bouncycastle.b.a.b.c;
            BigInteger biginteger7 = org.bouncycastle.b.a.b.b;
            BigInteger biginteger6 = org.bouncycastle.b.a.b.b;
            k--;
            BigInteger biginteger3 = biginteger;
            while (k >= i1 + 1)  {
                biginteger7 = b(biginteger7, biginteger6);
                BigInteger biginteger9;
                BigInteger biginteger10;
                if (biginteger2.testBit(k)) {
                    BigInteger biginteger8 = b(biginteger7, biginteger1);
                    biginteger5 = b(biginteger5, biginteger3);
                    biginteger4 = e(biginteger3.multiply(biginteger4).subtract(biginteger.multiply(biginteger7)));
                    biginteger6 = e(biginteger3.multiply(biginteger3).subtract(biginteger8.shiftLeft(1)));
                    biginteger3 = biginteger5;
                    biginteger5 = biginteger4;
                    biginteger4 = biginteger8;
                } else {
                    biginteger5 = e(biginteger5.multiply(biginteger4).subtract(biginteger7));
                    biginteger6 = e(biginteger3.multiply(biginteger4).subtract(biginteger.multiply(biginteger7)));
                    biginteger4 = e(biginteger4.multiply(biginteger4).subtract(biginteger7.shiftLeft(1)));
                    biginteger3 = biginteger5;
                    biginteger5 = biginteger4;
                    biginteger4 = biginteger7;
                }
                k--;
                biginteger9 = biginteger6;
                biginteger10 = biginteger5;
                biginteger6 = biginteger4;
                biginteger5 = biginteger3;
                biginteger3 = biginteger9;
                biginteger4 = biginteger10;
            }
            biginteger2 = b(biginteger7, biginteger6);
            biginteger6 = b(biginteger2, biginteger1);
            biginteger1 = e(biginteger5.multiply(biginteger4).subtract(biginteger2));
            biginteger = e(biginteger3.multiply(biginteger4).subtract(biginteger.multiply(biginteger2)));
            biginteger2 = b(biginteger2, biginteger6);
            for (int l = 1; l <= i1; l++) {
                biginteger1 = b(biginteger1, biginteger);
                biginteger = e(biginteger.multiply(biginteger).subtract(biginteger2.shiftLeft(1)));
                biginteger2 = b(biginteger2, biginteger2);
            }

            return (new BigInteger[] {
                biginteger1, biginteger
            });
        }

        private d e(d d1) {
            if (!d1.e().equals(this))
                d1 = null;
            return d1;
        }

        public BigInteger a() {
            return i;
        }

        protected BigInteger a(BigInteger biginteger, BigInteger biginteger1) {
            biginteger1 = biginteger.add(biginteger1);
            biginteger = biginteger1;
            if (biginteger1.compareTo(g) >= 0)
                biginteger = biginteger1.subtract(g);
            return biginteger;
        }

        public d a(d d1) {
            return new b(g, h, a(i, d1.a()));
        }

        public d a(d d1, d d2) {
            BigInteger biginteger = i;
            d1 = d1.a();
            d2 = d2.a();
            biginteger = biginteger.multiply(biginteger);
            d1 = d1.multiply(d2);
            return new b(g, h, e(biginteger.add(d1)));
        }

        public d a(d d1, d d2, d d3) {
            BigInteger biginteger = i;
            BigInteger biginteger1 = d1.a();
            d1 = d2.a();
            d2 = d3.a();
            d3 = biginteger.multiply(biginteger1);
            d1 = d1.multiply(d2);
            return new b(g, h, e(d3.subtract(d1)));
        }

        public int b() {
            return g.bitLength();
        }

        protected BigInteger b(BigInteger biginteger) {
            BigInteger biginteger1 = biginteger.shiftLeft(1);
            biginteger = biginteger1;
            if (biginteger1.compareTo(g) >= 0)
                biginteger = biginteger1.subtract(g);
            return biginteger;
        }

        protected BigInteger b(BigInteger biginteger, BigInteger biginteger1) {
            return e(biginteger.multiply(biginteger1));
        }

        public d b(d d1) {
            return new b(g, h, c(i, d1.a()));
        }

        public d b(d d1, d d2, d d3) {
            BigInteger biginteger = i;
            d1 = d1.a();
            d2 = d2.a();
            d3 = d3.a();
            d1 = biginteger.multiply(d1);
            d2 = d2.multiply(d3);
            return new b(g, h, e(d1.add(d2)));
        }

        protected BigInteger c(BigInteger biginteger) {
            BigInteger biginteger1 = biginteger;
            if (biginteger.testBit(0))
                biginteger1 = g.subtract(biginteger);
            return biginteger1.shiftRight(1);
        }

        protected BigInteger c(BigInteger biginteger, BigInteger biginteger1) {
            biginteger1 = biginteger.subtract(biginteger1);
            biginteger = biginteger1;
            if (biginteger1.signum() < 0)
                biginteger = biginteger1.add(g);
            return biginteger;
        }

        public d c() {
            BigInteger biginteger1 = i.add(org.bouncycastle.b.a.b.b);
            BigInteger biginteger = biginteger1;
            if (biginteger1.compareTo(g) == 0)
                biginteger = org.bouncycastle.b.a.b.a;
            return new b(g, h, biginteger);
        }

        public d c(d d1) {
            return new b(g, h, b(i, d1.a()));
        }

        protected BigInteger d(BigInteger biginteger) {
            int l = b();
            int k = l + 31 >> 5;
            int ai[] = org.bouncycastle.b.c.b.a(l, g);
            biginteger = org.bouncycastle.b.c.b.a(l, biginteger);
            int ai1[] = org.bouncycastle.b.c.b.a(k);
            org.bouncycastle.b.c.a.a(ai, biginteger, ai1);
            return org.bouncycastle.b.c.b.d(k, ai1);
        }

        public d d() {
            b b1;
            if (i.signum() == 0)
                b1 = this;
            else
                b1 = new b(g, h, g.subtract(i));
            return b1;
        }

        public d d(d d1) {
            return new b(g, h, b(i, d(d1.a())));
        }

        protected BigInteger e(BigInteger biginteger) {
            BigInteger biginteger1;
            if (h != null) {
                boolean flag;
                int k;
                boolean flag1;
                if (biginteger.signum() < 0)
                    flag = true;
                else
                    flag = false;
                biginteger1 = biginteger;
                if (flag)
                    biginteger1 = biginteger.abs();
                k = g.bitLength();
                flag1 = h.equals(org.bouncycastle.b.a.b.b);
                do {
                    biginteger = biginteger1;
                    if (biginteger1.bitLength() <= k + 1)
                        break;
                    BigInteger biginteger2 = biginteger1.shiftRight(k);
                    biginteger1 = biginteger1.subtract(biginteger2.shiftLeft(k));
                    biginteger = biginteger2;
                    if (!flag1)
                        biginteger = biginteger2.multiply(h);
                    biginteger1 = biginteger.add(biginteger1);
                } while (true);
                for (; biginteger.compareTo(g) >= 0; biginteger = biginteger.subtract(g));
                biginteger1 = biginteger;
                if (flag) {
                    biginteger1 = biginteger;
                    if (biginteger.signum() != 0)
                        biginteger1 = g.subtract(biginteger);
                }
            } else {
                biginteger1 = biginteger.mod(g);
            }
            return biginteger1;
        }

        public d e() {
            return new b(g, h, b(i, i));
        }

        public boolean equals(Object obj) {
            boolean flag = true;
            if (obj != this) goto _L2; else goto _L1
_L1:
            return flag;
_L2:
            if (!(obj instanceof b)) {
                flag = false;
            } else {
                obj = (b)obj;
                if (!g.equals(((b) (obj)).g) || !i.equals(((b) (obj)).i))
                    flag = false;
            }
            if (true) goto _L1; else goto _L3
_L3:
        }

        public d f() {
            return new b(g, h, d(i));
        }

        public d g() {
            Object obj = this;
            if (j()) goto _L2; else goto _L1
_L1:
            if (!i()) goto _L4; else goto _L3
_L3:
            obj = this;
_L2:
            return ((d) (obj));
_L4:
            if (!g.testBit(0))
                throw new RuntimeException("not done yet");
            if (g.testBit(1)) {
                obj = g.shiftRight(2).add(org.bouncycastle.b.a.b.b);
                obj = e(new b(g, h, i.modPow(((BigInteger) (obj)), g)));
                continue; /* Loop/switch isn't completed */
            }
            if (g.testBit(2)) {
                BigInteger biginteger = i.modPow(g.shiftRight(3), g);
                obj = b(biginteger, i);
                if (b(((BigInteger) (obj)), biginteger).equals(org.bouncycastle.b.a.b.b)) {
                    obj = e(new b(g, h, ((BigInteger) (obj))));
                } else {
                    obj = b(((BigInteger) (obj)), org.bouncycastle.b.a.b.c.modPow(g.shiftRight(2), g));
                    obj = e(new b(g, h, ((BigInteger) (obj))));
                }
                continue; /* Loop/switch isn't completed */
            }
            BigInteger biginteger1 = g.shiftRight(1);
            if (!i.modPow(biginteger1, g).equals(org.bouncycastle.b.a.b.b)) {
                obj = null;
                continue; /* Loop/switch isn't completed */
            }
            obj = i;
            BigInteger biginteger2 = b(b(((BigInteger) (obj))));
            BigInteger biginteger4 = biginteger1.add(org.bouncycastle.b.a.b.b);
            BigInteger biginteger3 = g.subtract(org.bouncycastle.b.a.b.b);
            Random random = new Random();
            BigInteger biginteger5;
            do {
                do
                    biginteger5 = new BigInteger(g.bitLength(), random);
                while (biginteger5.compareTo(g) >= 0 || !e(biginteger5.multiply(biginteger5).subtract(biginteger2)).modPow(biginteger1, g).equals(biginteger3));
                BigInteger abiginteger[] = a(biginteger5, ((BigInteger) (obj)), biginteger4);
                biginteger5 = abiginteger[0];
                BigInteger biginteger6 = abiginteger[1];
                if (!b(biginteger6, biginteger6).equals(biginteger2))
                    continue;
                obj = new b(g, h, c(biginteger6));
                continue; /* Loop/switch isn't completed */
            } while (biginteger5.equals(org.bouncycastle.b.a.b.b) || biginteger5.equals(biginteger3));
            obj = null;
            if (true) goto _L2; else goto _L5
_L5:
        }

        public int hashCode() {
            return g.hashCode() ^ i.hashCode();
        }

        public b(BigInteger biginteger, BigInteger biginteger1) {
            this(biginteger, a(biginteger), biginteger1);
        }

        b(BigInteger biginteger, BigInteger biginteger1, BigInteger biginteger2) {
            if (biginteger2 == null || biginteger2.signum() < 0 || biginteger2.compareTo(biginteger) >= 0) {
                throw new IllegalArgumentException("x value invalid in Fp field element");
            } else {
                g = biginteger;
                h = biginteger1;
                i = biginteger2;
                return;
            }
        }
    }


    public d() {
    }

    public abstract BigInteger a();

    public d a(int k) {
        int l = 0;
        d d1 = this;
        for (; l < k; l++)
            d1 = d1.e();

        return d1;
    }

    public abstract d a(d d1);

    public d a(d d1, d d2) {
        return e().a(d1.c(d2));
    }

    public d a(d d1, d d2, d d3) {
        return c(d1).b(d2.c(d3));
    }

    public abstract int b();

    public abstract d b(d d1);

    public d b(d d1, d d2, d d3) {
        return c(d1).a(d2.c(d3));
    }

    public abstract d c();

    public abstract d c(d d1);

    public abstract d d();

    public abstract d d(d d1);

    public abstract d e();

    public abstract d f();

    public abstract d g();

    public int h() {
        return a().bitLength();
    }

    public boolean i() {
        boolean flag = true;
        if (h() != 1)
            flag = false;
        return flag;
    }

    public boolean j() {
        boolean flag;
        if (a().signum() == 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public String toString() {
        return a().toString(16);
    }
}
