// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.bouncycastle.jcajce.provider.config;

import java.security.BasicPermission;
import java.security.Permission;
import java.util.StringTokenizer;
import org.bouncycastle.util.f;

public class ProviderConfigurationPermission extends BasicPermission {

    private final String a;
    private final int b;

    public ProviderConfigurationPermission(String s, String s1) {
        super(s, s1);
        a = s1;
        b = a(s1);
    }

    private int a(String s) {
        StringTokenizer stringtokenizer = new StringTokenizer(f.c(s), " ,");
        int i = 0;
        do {
            if (!stringtokenizer.hasMoreTokens())
                break;
            s = stringtokenizer.nextToken();
            if (s.equals("threadlocalecimplicitlyca"))
                i |= 1;
            else
            if (s.equals("ecimplicitlyca"))
                i |= 2;
            else
            if (s.equals("threadlocaldhdefaultparams"))
                i |= 4;
            else
            if (s.equals("dhdefaultparams"))
                i |= 8;
            else
            if (s.equals("all"))
                i |= 0xf;
        } while (true);
        if (i == 0)
            throw new IllegalArgumentException("unknown permissions passed to mask");
        else
            return i;
    }

    public boolean equals(Object obj) {
        boolean flag = true;
        if (obj != this) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        if (obj instanceof ProviderConfigurationPermission) {
            obj = (ProviderConfigurationPermission)obj;
            if (b != ((ProviderConfigurationPermission) (obj)).b || !getName().equals(((ProviderConfigurationPermission) (obj)).getName()))
                flag = false;
        } else {
            flag = false;
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    public String getActions() {
        return a;
    }

    public int hashCode() {
        return getName().hashCode() + b;
    }

    public boolean implies(Permission permission) {
        boolean flag1 = false;
        if (permission instanceof ProviderConfigurationPermission) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        flag = flag1;
        if (getName().equals(permission.getName())) {
            permission = (ProviderConfigurationPermission)permission;
            flag = flag1;
            if ((b & ((ProviderConfigurationPermission) (permission)).b) == ((ProviderConfigurationPermission) (permission)).b)
                flag = true;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }
}
