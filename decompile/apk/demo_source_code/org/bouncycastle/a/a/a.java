// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.bouncycastle.a.a;

import org.bouncycastle.a.b;

public abstract class a
    implements b {

    private final byte a[] = new byte[4];
    private int b;
    private long c;

    protected a() {
        b = 0;
    }

    public void a(byte byte0) {
        byte abyte0[] = a;
        int i = b;
        b = i + 1;
        abyte0[i] = byte0;
        if (b == a.length) {
            b(a, 0);
            b = 0;
        }
        c = c + 1L;
    }

    protected abstract void a(long l);

    public void a(byte abyte0[], int i, int j) {
        int j1;
        boolean flag = false;
        j1 = Math.max(0, j);
        j = ((flag) ? 1 : 0);
        if (b == 0) goto _L2; else goto _L1
_L1:
        j = 0;
_L7:
        if (j >= j1) goto _L2; else goto _L3
_L3:
        int k;
        byte abyte1[] = a;
        int l = b;
        b = l + 1;
        k = j + 1;
        abyte1[l] = abyte0[j + i];
        if (b != 4) goto _L5; else goto _L4
_L4:
        b(a, 0);
        b = 0;
        j = k;
_L2:
        k = j;
        do {
            int i1 = k;
            k = i1;
            if (i1 >= (j1 - j & -4) + j)
                break;
            b(abyte0, i + i1);
            k = i1 + 4;
        } while (true);
        for (; k < j1; k++) {
            byte abyte2[] = a;
            j = b;
            b = j + 1;
            abyte2[j] = abyte0[k + i];
        }

        c = c + (long)j1;
        return;
_L5:
        j = k;
        if (true) goto _L7; else goto _L6
_L6:
    }

    public void b() {
        long l = c;
        a((byte)-128);
        while (b != 0) 
            a((byte)0);
        a(l << 3);
        d();
    }

    protected abstract void b(byte abyte0[], int i);

    public void c() {
        c = 0L;
        b = 0;
        for (int i = 0; i < a.length; i++)
            a[i] = 0;

    }

    protected abstract void d();
}
