// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.bouncycastle.operator.a;

import java.security.NoSuchAlgorithmException;
import java.security.Signature;
import java.util.HashMap;
import java.util.Map;
import org.bouncycastle.asn1.ax;
import org.bouncycastle.asn1.c.a;
import org.bouncycastle.asn1.k.e;
import org.bouncycastle.asn1.k.i;
import org.bouncycastle.asn1.n;
import org.bouncycastle.asn1.p.g;
import org.bouncycastle.util.c;

class b {

    private static final Map a;
    private static final Map b;
    private static final Map c;
    private static final Map d;
    private static final Map e;
    private org.bouncycastle.jcajce.a.b f;

    b(org.bouncycastle.jcajce.a.b b1) {
        f = b1;
    }

    private static String a(n n1) {
        String s = org.bouncycastle.jcajce.a.c.a(n1);
        int j = s.indexOf('-');
        if (j > 0)
            n1 = (new StringBuilder()).append(s.substring(0, j)).append(s.substring(j + 1)).toString();
        else
            n1 = org.bouncycastle.jcajce.a.c.a(n1);
        return n1;
    }

    private static String b(org.bouncycastle.asn1.o.a a1) {
        org.bouncycastle.asn1.f f1 = a1.b();
        if (f1 != null && !ax.a.equals(f1) && a1.a().equals(e.k)) {
            a1 = i.a(f1);
            a1 = (new StringBuilder()).append(a(a1.a().a())).append("WITHRSAANDMGF1").toString();
        } else
        if (a.containsKey(a1.a()))
            a1 = (String)a.get(a1.a());
        else
            a1 = a1.a().c();
        return a1;
    }

    Signature a(org.bouncycastle.asn1.o.a a1) {
        Signature signature = f.d(b(a1));
        a1 = signature;
_L2:
        return a1;
        NoSuchAlgorithmException nosuchalgorithmexception;
        nosuchalgorithmexception;
        if (a.get(a1.a()) != null) {
            a1 = (String)a.get(a1.a());
            a1 = f.d(a1);
        } else {
            throw nosuchalgorithmexception;
        }
        if (true) goto _L2; else goto _L1
_L1:
    }

    static  {
        a = new HashMap();
        b = new HashMap();
        c = new HashMap();
        d = new HashMap();
        e = new HashMap();
        a.put(new n("1.2.840.113549.1.1.5"), "SHA1WITHRSA");
        a.put(e.o, "SHA224WITHRSA");
        a.put(e.l, "SHA256WITHRSA");
        a.put(e.m, "SHA384WITHRSA");
        a.put(e.n, "SHA512WITHRSA");
        a.put(a.k, "GOST3411WITHGOST3410");
        a.put(a.l, "GOST3411WITHECGOST3410");
        a.put(org.bouncycastle.asn1.a.a.d, "SHA1WITHPLAIN-ECDSA");
        a.put(org.bouncycastle.asn1.a.a.e, "SHA224WITHPLAIN-ECDSA");
        a.put(org.bouncycastle.asn1.a.a.f, "SHA256WITHPLAIN-ECDSA");
        a.put(org.bouncycastle.asn1.a.a.g, "SHA384WITHPLAIN-ECDSA");
        a.put(org.bouncycastle.asn1.a.a.h, "SHA512WITHPLAIN-ECDSA");
        a.put(org.bouncycastle.asn1.a.a.i, "RIPEMD160WITHPLAIN-ECDSA");
        a.put(org.bouncycastle.asn1.d.a.s, "SHA1WITHCVC-ECDSA");
        a.put(org.bouncycastle.asn1.d.a.t, "SHA224WITHCVC-ECDSA");
        a.put(org.bouncycastle.asn1.d.a.u, "SHA256WITHCVC-ECDSA");
        a.put(org.bouncycastle.asn1.d.a.v, "SHA384WITHCVC-ECDSA");
        a.put(org.bouncycastle.asn1.d.a.w, "SHA512WITHCVC-ECDSA");
        a.put(new n("1.2.840.113549.1.1.4"), "MD5WITHRSA");
        a.put(new n("1.2.840.113549.1.1.2"), "MD2WITHRSA");
        a.put(new n("1.2.840.10040.4.3"), "SHA1WITHDSA");
        a.put(g.i, "SHA1WITHECDSA");
        a.put(g.m, "SHA224WITHECDSA");
        a.put(g.n, "SHA256WITHECDSA");
        a.put(g.o, "SHA384WITHECDSA");
        a.put(g.p, "SHA512WITHECDSA");
        a.put(org.bouncycastle.asn1.j.a.k, "SHA1WITHRSA");
        a.put(org.bouncycastle.asn1.j.a.j, "SHA1WITHDSA");
        a.put(org.bouncycastle.asn1.h.a.L, "SHA224WITHDSA");
        a.put(org.bouncycastle.asn1.h.a.M, "SHA256WITHDSA");
        a.put(org.bouncycastle.asn1.j.a.i, "SHA-1");
        a.put(org.bouncycastle.asn1.h.a.f, "SHA-224");
        a.put(org.bouncycastle.asn1.h.a.c, "SHA-256");
        a.put(org.bouncycastle.asn1.h.a.d, "SHA-384");
        a.put(org.bouncycastle.asn1.h.a.e, "SHA-512");
        a.put(org.bouncycastle.asn1.m.a.c, "RIPEMD128");
        a.put(org.bouncycastle.asn1.m.a.b, "RIPEMD160");
        a.put(org.bouncycastle.asn1.m.a.d, "RIPEMD256");
        b.put(e.b, "RSA/ECB/PKCS1Padding");
        c.put(e.bD, "DESEDEWrap");
        c.put(e.bE, "RC2Wrap");
        c.put(org.bouncycastle.asn1.h.a.t, "AESWrap");
        c.put(org.bouncycastle.asn1.h.a.A, "AESWrap");
        c.put(org.bouncycastle.asn1.h.a.H, "AESWrap");
        c.put(org.bouncycastle.asn1.i.a.d, "CamelliaWrap");
        c.put(org.bouncycastle.asn1.i.a.e, "CamelliaWrap");
        c.put(org.bouncycastle.asn1.i.a.f, "CamelliaWrap");
        c.put(org.bouncycastle.asn1.g.a.d, "SEEDWrap");
        c.put(e.B, "DESede");
        e.put(e.bD, org.bouncycastle.util.c.a(192));
        e.put(org.bouncycastle.asn1.h.a.t, org.bouncycastle.util.c.a(128));
        e.put(org.bouncycastle.asn1.h.a.A, org.bouncycastle.util.c.a(192));
        e.put(org.bouncycastle.asn1.h.a.H, org.bouncycastle.util.c.a(256));
        e.put(org.bouncycastle.asn1.i.a.d, org.bouncycastle.util.c.a(128));
        e.put(org.bouncycastle.asn1.i.a.e, org.bouncycastle.util.c.a(192));
        e.put(org.bouncycastle.asn1.i.a.f, org.bouncycastle.util.c.a(256));
        e.put(org.bouncycastle.asn1.g.a.d, org.bouncycastle.util.c.a(128));
        e.put(e.B, org.bouncycastle.util.c.a(192));
        d.put(org.bouncycastle.asn1.h.a.o, "AES");
        d.put(org.bouncycastle.asn1.h.a.q, "AES");
        d.put(org.bouncycastle.asn1.h.a.x, "AES");
        d.put(org.bouncycastle.asn1.h.a.E, "AES");
        d.put(e.B, "DESede");
        d.put(e.C, "RC2");
    }
}
