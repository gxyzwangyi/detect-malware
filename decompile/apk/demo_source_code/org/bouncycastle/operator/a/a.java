// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.bouncycastle.operator.a;

import java.io.OutputStream;
import java.security.GeneralSecurityException;
import java.security.PrivateKey;
import java.security.SecureRandom;
import java.security.Signature;
import java.security.SignatureException;
import org.bouncycastle.operator.OperatorCreationException;
import org.bouncycastle.operator.OperatorStreamException;
import org.bouncycastle.operator.RuntimeOperatorException;
import org.bouncycastle.operator.b;

// Referenced classes of package org.bouncycastle.operator.a:
//            b

public class org.bouncycastle.operator.a.a {
    private class a extends OutputStream {

        final org.bouncycastle.operator.a.a a;
        private Signature b;

        byte[] a() {
            return b.sign();
        }

        public void write(int i) {
            try {
                b.update((byte)i);
                return;
            }
            catch (SignatureException signatureexception) {
                throw new OperatorStreamException((new StringBuilder()).append("exception in content signer: ").append(signatureexception.getMessage()).toString(), signatureexception);
            }
        }

        public void write(byte abyte0[]) {
            try {
                b.update(abyte0);
                return;
            }
            // Misplaced declaration of an exception variable
            catch (byte abyte0[]) {
                throw new OperatorStreamException((new StringBuilder()).append("exception in content signer: ").append(abyte0.getMessage()).toString(), abyte0);
            }
        }

        public void write(byte abyte0[], int i, int j) {
            try {
                b.update(abyte0, i, j);
                return;
            }
            // Misplaced declaration of an exception variable
            catch (byte abyte0[]) {
                throw new OperatorStreamException((new StringBuilder()).append("exception in content signer: ").append(abyte0.getMessage()).toString(), abyte0);
            }
        }

        a(Signature signature) {
            a = org.bouncycastle.operator.a.a.this;
            super();
            b = signature;
        }
    }


    private org.bouncycastle.operator.a.b a;
    private SecureRandom b;
    private String c;
    private org.bouncycastle.asn1.o.a d;

    public org.bouncycastle.operator.a.a(String s) {
        a = new org.bouncycastle.operator.a.b(new org.bouncycastle.jcajce.a.a());
        c = s;
        d = (new b()).a(s);
    }

    static org.bouncycastle.asn1.o.a a(org.bouncycastle.operator.a.a a1) {
        return a1.d;
    }

    public org.bouncycastle.operator.a a(PrivateKey privatekey) {
        try {
            Signature signature = a.a(d);
            if (b != null)
                signature.initSign(privatekey, b);
            else
                signature.initSign(privatekey);
            return new org.bouncycastle.operator.a(signature) {

                final Signature a;
                final org.bouncycastle.operator.a.a b;
                private a c;

                public org.bouncycastle.asn1.o.a a() {
                    return org.bouncycastle.operator.a.a.a(b);
                }

                public OutputStream b() {
                    return c;
                }

                public byte[] c() {
                    byte abyte0[];
                    try {
                        abyte0 = c.a();
                    }
                    catch (SignatureException signatureexception) {
                        throw new RuntimeOperatorException((new StringBuilder()).append("exception obtaining signature: ").append(signatureexception.getMessage()).toString(), signatureexception);
                    }
                    return abyte0;
                }

             {
                b = org.bouncycastle.operator.a.a.this;
                a = signature;
                super();
                c = b. new a(a);
            }
            }
;
        }
        // Misplaced declaration of an exception variable
        catch (PrivateKey privatekey) {
            throw new OperatorCreationException((new StringBuilder()).append("cannot create signer: ").append(privatekey.getMessage()).toString(), privatekey);
        }
    }
}
