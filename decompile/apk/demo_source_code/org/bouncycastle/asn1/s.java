// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.bouncycastle.asn1;

import java.io.IOException;
import java.util.*;
import org.bouncycastle.util.d;

// Referenced classes of package org.bouncycastle.asn1:
//            r, g, f, t, 
//            y, ak, ag, bq, 
//            bd, q

public abstract class s extends r
    implements d {

    protected Vector a;

    protected s() {
        a = new Vector();
    }

    protected s(f f1) {
        a = new Vector();
        a.addElement(f1);
    }

    protected s(g g1) {
        a = new Vector();
        for (int i = 0; i != g1.a(); i++)
            a.addElement(g1.a(i));

    }

    protected s(f af[]) {
        a = new Vector();
        for (int i = 0; i != af.length; i++)
            a.addElement(af[i]);

    }

    private f a(Enumeration enumeration) {
        return (f)enumeration.nextElement();
    }

    public static s a(Object obj) {
        if (obj != null && !(obj instanceof s)) goto _L2; else goto _L1
_L1:
        obj = (s)obj;
_L4:
        return ((s) (obj));
_L2:
        if (obj instanceof t) {
            obj = a(((t)obj).h());
            continue; /* Loop/switch isn't completed */
        }
        if (obj instanceof byte[]) {
            try {
                obj = a(b((byte[])(byte[])obj));
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) {
                throw new IllegalArgumentException((new StringBuilder()).append("failed to construct sequence from byte[]: ").append(((IOException) (obj)).getMessage()).toString());
            }
            continue; /* Loop/switch isn't completed */
        }
        if (!(obj instanceof f))
            break; /* Loop/switch isn't completed */
        r r1 = ((f)obj).h();
        if (!(r1 instanceof s))
            break; /* Loop/switch isn't completed */
        obj = (s)r1;
        if (true) goto _L4; else goto _L3
_L3:
        throw new IllegalArgumentException((new StringBuilder()).append("unknown object in getInstance: ").append(obj.getClass().getName()).toString());
    }

    public static s a(y y1, boolean flag) {
        if (flag) {
            if (!y1.d())
                throw new IllegalArgumentException("object implicit - explicit expected.");
            y1 = a(y1.j().h());
        } else
        if (y1.d()) {
            if (y1 instanceof ak)
                y1 = new ag(y1.j());
            else
                y1 = new bq(y1.j());
        } else
        if (y1.j() instanceof s)
            y1 = (s)y1.j();
        else
            throw new IllegalArgumentException((new StringBuilder()).append("unknown object in getInstance: ").append(y1.getClass().getName()).toString());
        return y1;
    }

    public f a(int i) {
        return (f)a.elementAt(i);
    }

    abstract void a(q q);

    boolean a() {
        return true;
    }

    boolean a(r r1) {
        boolean flag1 = false;
        if (r1 instanceof s) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        Object obj = (s)r1;
        flag = flag1;
        if (e() != ((s) (obj)).e())
            continue; /* Loop/switch isn't completed */
        r1 = d();
        obj = ((s) (obj)).d();
        while (r1.hasMoreElements())  {
            Object obj1 = a(((Enumeration) (r1)));
            Object obj2 = a(((Enumeration) (obj)));
            obj1 = ((f) (obj1)).h();
            obj2 = ((f) (obj2)).h();
            if (obj1 != obj2) {
                flag = flag1;
                if (!((r) (obj1)).equals(obj2))
                    continue; /* Loop/switch isn't completed */
            }
        }
        flag = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public f[] c() {
        f af[] = new f[e()];
        for (int i = 0; i != e(); i++)
            af[i] = a(i);

        return af;
    }

    public Enumeration d() {
        return a.elements();
    }

    public int e() {
        return a.size();
    }

    r f() {
        bd bd1 = new bd();
        bd1.a = a;
        return bd1;
    }

    r g() {
        bq bq1 = new bq();
        bq1.a = a;
        return bq1;
    }

    public int hashCode() {
        Enumeration enumeration = d();
        int i;
        for (i = e(); enumeration.hasMoreElements(); i = i * 17 ^ a(enumeration).hashCode());
        return i;
    }

    public Iterator iterator() {
        return new org.bouncycastle.util.a.a(c());
    }

    public String toString() {
        return a.toString();
    }
}
