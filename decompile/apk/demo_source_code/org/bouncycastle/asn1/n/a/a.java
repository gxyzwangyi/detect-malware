// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.bouncycastle.asn1.n.a;

import java.io.IOException;
import java.util.Enumeration;
import java.util.Hashtable;
import org.bouncycastle.asn1.ASN1ParsingException;
import org.bouncycastle.asn1.bk;
import org.bouncycastle.asn1.f;
import org.bouncycastle.asn1.n;
import org.bouncycastle.asn1.n.b;
import org.bouncycastle.asn1.n.c;
import org.bouncycastle.asn1.n.e;

// Referenced classes of package org.bouncycastle.asn1.n.a:
//            c

public abstract class a
    implements e {

    public a() {
    }

    private int a(f f) {
        return c.a(c.a(f)).hashCode();
    }

    public static Hashtable a(Hashtable hashtable) {
        Hashtable hashtable1 = new Hashtable();
        Object obj;
        for (Enumeration enumeration = hashtable.keys(); enumeration.hasMoreElements(); hashtable1.put(obj, hashtable.get(obj)))
            obj = enumeration.nextElement();

        return hashtable1;
    }

    private boolean a(boolean flag, b b1, b ab[]) {
        boolean flag1 = false;
        if (!flag) goto _L2; else goto _L1
_L1:
        int i = ab.length - 1;
_L7:
        flag = flag1;
        if (i < 0) goto _L4; else goto _L3
_L3:
        if (ab[i] == null || !a(b1, ab[i])) goto _L6; else goto _L5
_L5:
        ab[i] = null;
        flag = true;
_L4:
        return flag;
_L6:
        i--;
          goto _L7
_L2:
        i = 0;
_L8:
        flag = flag1;
        if (i != ab.length) {
label0:
            {
                if (ab[i] == null || !a(b1, ab[i]))
                    break label0;
                ab[i] = null;
                flag = true;
            }
        }
          goto _L4
        i++;
          goto _L8
    }

    public int a(c c1) {
        b ab[] = c1.a();
        int j = 0;
        int i = 0;
        while (j != ab.length)  {
            if (ab[j].a()) {
                c1 = ab[j].c();
                for (int k = 0; k != c1.length; k++)
                    i = i ^ c1[k].a().hashCode() ^ a(c1[k].b());

            } else {
                i = i ^ ab[j].b().a().hashCode() ^ a(ab[j].b().b());
            }
            j++;
        }
        return i;
    }

    public f a(n n1, String s) {
        if (s.length() != 0 && s.charAt(0) == '#') {
            try {
                s = c.a(s, 1);
            }
            // Misplaced declaration of an exception variable
            catch (String s) {
                throw new ASN1ParsingException((new StringBuilder()).append("can't recode value for oid ").append(n1.c()).toString());
            }
            n1 = s;
        } else {
            String s1 = s;
            if (s.length() != 0) {
                s1 = s;
                if (s.charAt(0) == '\\')
                    s1 = s.substring(1);
            }
            n1 = b(n1, s1);
        }
        return n1;
    }

    protected boolean a(b b1, b b2) {
        return c.a(b1, b2);
    }

    public boolean a(c c1, c c2) {
        boolean flag2;
        flag2 = false;
        c1 = c1.a();
        c2 = c2.a();
        if (c1.length == c2.length) goto _L2; else goto _L1
_L1:
        boolean flag1 = flag2;
_L4:
        return flag1;
_L2:
        int i;
        boolean flag;
        if (c1[0].b() != null && c2[0].b() != null) {
            if (!c1[0].b().a().equals(c2[0].b().a()))
                flag = true;
            else
                flag = false;
        } else {
            flag = false;
        }
        for (i = 0; i != c1.length; i++) {
            flag1 = flag2;
            if (!a(flag, c1[i], ((b []) (c2))))
                continue; /* Loop/switch isn't completed */
        }

        flag1 = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected f b(n n1, String s) {
        return new bk(s);
    }
}
