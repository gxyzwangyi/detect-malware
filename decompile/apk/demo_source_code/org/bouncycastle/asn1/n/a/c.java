// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.bouncycastle.asn1.n.a;

import java.io.IOException;
import java.util.Hashtable;
import java.util.Vector;
import org.bouncycastle.asn1.bl;
import org.bouncycastle.asn1.n;
import org.bouncycastle.asn1.n.a;
import org.bouncycastle.asn1.n.b;
import org.bouncycastle.asn1.n.e;
import org.bouncycastle.asn1.r;
import org.bouncycastle.asn1.x;
import org.bouncycastle.util.encoders.d;
import org.bouncycastle.util.f;

// Referenced classes of package org.bouncycastle.asn1.n.a:
//            d

public class c {

    public static String a(String s) {
        String s1;
label0:
        {
            s = f.c(s);
            if (s.length() > 0 && s.charAt(0) == '#') {
                r r1 = d(s);
                if (r1 instanceof x)
                    s = f.c(((x)r1).c());
            }
            s1 = s;
            if (s.length() <= 1)
                break label0;
            int i;
            for (i = 0; i + 1 < s.length() && s.charAt(i) == '\\' && s.charAt(i + 1) == ' '; i += 2);
            int j;
            for (j = s.length() - 1; j - 1 > 0 && s.charAt(j - 1) == '\\' && s.charAt(j) == ' '; j -= 2);
            if (i <= 0) {
                s1 = s;
                if (j >= s.length() - 1)
                    break label0;
            }
            s1 = s.substring(i, j + 1);
        }
        return b(s1);
    }

    public static String a(org.bouncycastle.asn1.f f1) {
        int i = 2;
        StringBuffer stringbuffer = new StringBuffer();
        if ((f1 instanceof x) && !(f1 instanceof bl)) {
            f1 = ((x)f1).c();
            int j;
            int k;
            int l;
            if (f1.length() > 0 && f1.charAt(0) == '#')
                stringbuffer.append((new StringBuilder()).append("\\").append(f1).toString());
            else
                stringbuffer.append(f1);
        } else {
            try {
                StringBuilder stringbuilder = JVM INSTR new #51  <Class StringBuilder>;
                stringbuilder.StringBuilder();
                stringbuffer.append(stringbuilder.append("#").append(a(org.bouncycastle.util.encoders.d.a(f1.h().a("DER")))).toString());
            }
            // Misplaced declaration of an exception variable
            catch (org.bouncycastle.asn1.f f1) {
                throw new IllegalArgumentException("Other value has no encoded form");
            }
        }
        j = stringbuffer.length();
        if (stringbuffer.length() < 2 || stringbuffer.charAt(0) != '\\' || stringbuffer.charAt(1) != '#')
            i = 0;
label0:
        do {
label1:
            {
                if (i == j)
                    break label0;
                if (stringbuffer.charAt(i) != ',' && stringbuffer.charAt(i) != '"' && stringbuffer.charAt(i) != '\\' && stringbuffer.charAt(i) != '+' && stringbuffer.charAt(i) != '=' && stringbuffer.charAt(i) != '<' && stringbuffer.charAt(i) != '>') {
                    l = i;
                    k = j;
                    if (stringbuffer.charAt(i) != ';')
                        break label1;
                }
                stringbuffer.insert(i, "\\");
                l = i + 1;
                k = j + 1;
            }
            i = l + 1;
            j = k;
        } while (true);
        if (stringbuffer.length() > 0)
            for (i = 0; stringbuffer.length() > i && stringbuffer.charAt(i) == ' '; i += 2)
                stringbuffer.insert(i, "\\");

        for (i = stringbuffer.length() - 1; i >= 0 && stringbuffer.charAt(i) == ' '; i--)
            stringbuffer.insert(i, '\\');

        return stringbuffer.toString();
    }

    private static String a(byte abyte0[]) {
        char ac[] = new char[abyte0.length];
        for (int i = 0; i != ac.length; i++)
            ac[i] = (char)(abyte0[i] & 0xff);

        return new String(ac);
    }

    public static org.bouncycastle.asn1.f a(String s, int i) {
        byte abyte0[] = new byte[(s.length() - i) / 2];
        for (int j = 0; j != abyte0.length; j++) {
            char c1 = s.charAt(j * 2 + i);
            char c2 = s.charAt(j * 2 + i + 1);
            abyte0[j] = (byte)(b(c1) << 4 | b(c2));
        }

        return r.b(abyte0);
    }

    public static n a(String s, Hashtable hashtable) {
        if (!f.b(s).startsWith("OID.")) goto _L2; else goto _L1
_L1:
        hashtable = new n(s.substring(4));
_L4:
        return hashtable;
_L2:
        if (s.charAt(0) < '0' || s.charAt(0) > '9')
            break; /* Loop/switch isn't completed */
        hashtable = new n(s);
        if (true) goto _L4; else goto _L3
_L3:
        n n1 = (n)hashtable.get(f.c(s));
        hashtable = n1;
        if (n1 == null)
            throw new IllegalArgumentException((new StringBuilder()).append("Unknown object id - ").append(s).append(" - passed to distinguished name").toString());
        if (true) goto _L4; else goto _L5
_L5:
    }

    public static void a(StringBuffer stringbuffer, a a1, Hashtable hashtable) {
        hashtable = (String)hashtable.get(a1.a());
        if (hashtable != null)
            stringbuffer.append(hashtable);
        else
            stringbuffer.append(a1.a().c());
        stringbuffer.append('=');
        stringbuffer.append(a(a1.b()));
    }

    public static void a(StringBuffer stringbuffer, b b1, Hashtable hashtable) {
        if (b1.a()) {
            b1 = b1.c();
            boolean flag = true;
            int i = 0;
            while (i != b1.length)  {
                if (flag)
                    flag = false;
                else
                    stringbuffer.append('+');
                a(stringbuffer, b1[i], hashtable);
                i++;
            }
        } else
        if (b1.b() != null)
            a(stringbuffer, b1.b(), hashtable);
    }

    private static boolean a(char c1) {
        boolean flag;
        if ('0' <= c1 && c1 <= '9' || 'a' <= c1 && c1 <= 'f' || 'A' <= c1 && c1 <= 'F')
            flag = true;
        else
            flag = false;
        return flag;
    }

    private static boolean a(a a1, a a2) {
        boolean flag = true;
        if (a1 != a2) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        if (a1 == null)
            flag = false;
        else
        if (a2 == null)
            flag = false;
        else
        if (!a1.a().equals(a2.a()))
            flag = false;
        else
        if (!a(a(a1.b())).equals(a(a(a2.b()))))
            flag = false;
        if (true) goto _L1; else goto _L3
_L3:
    }

    public static boolean a(b b1, b b2) {
        boolean flag1 = false;
        if (!b1.a()) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
        if (!b2.a()) goto _L4; else goto _L3
_L3:
        b1 = b1.c();
        b2 = b2.c();
        if (b1.length == b2.length) goto _L6; else goto _L5
_L5:
        flag = flag1;
_L4:
        return flag;
_L6:
        for (int i = 0; i != b1.length; i++) {
            flag = flag1;
            if (!a(b1[i], b2[i]))
                continue; /* Loop/switch isn't completed */
        }

        flag = true;
        continue; /* Loop/switch isn't completed */
_L2:
        flag = flag1;
        if (!b2.a())
            flag = a(b1.b(), b2.b());
        continue; /* Loop/switch isn't completed */
        if (true) goto _L4; else goto _L7
_L7:
    }

    private static String[] a(Vector vector) {
        String as[] = new String[vector.size()];
        for (int i = 0; i != as.length; i++)
            as[i] = (String)vector.elementAt(i);

        return as;
    }

    public static b[] a(String s, e e1) {
        s = new org.bouncycastle.asn1.n.a.d(s);
        org.bouncycastle.asn1.n.d d1 = new org.bouncycastle.asn1.n.d(e1);
        while (s.a())  {
            Object obj = s.b();
            if (((String) (obj)).indexOf('+') > 0) {
                obj = new org.bouncycastle.asn1.n.a.d(((String) (obj)), '+');
                org.bouncycastle.asn1.n.a.d d2 = new org.bouncycastle.asn1.n.a.d(((org.bouncycastle.asn1.n.a.d) (obj)).b(), '=');
                String s1 = d2.b();
                if (!d2.a())
                    throw new IllegalArgumentException("badly formatted directory string");
                String s2 = d2.b();
                Object obj2 = e1.a(s1.trim());
                if (((org.bouncycastle.asn1.n.a.d) (obj)).a()) {
                    Vector vector1 = new Vector();
                    Vector vector = new Vector();
                    vector1.addElement(obj2);
                    vector.addElement(c(s2));
                    for (; ((org.bouncycastle.asn1.n.a.d) (obj)).a(); vector.addElement(c(((String) (obj2))))) {
                        obj2 = new org.bouncycastle.asn1.n.a.d(((org.bouncycastle.asn1.n.a.d) (obj)).b(), '=');
                        s2 = ((org.bouncycastle.asn1.n.a.d) (obj2)).b();
                        if (!((org.bouncycastle.asn1.n.a.d) (obj2)).a())
                            throw new IllegalArgumentException("badly formatted directory string");
                        obj2 = ((org.bouncycastle.asn1.n.a.d) (obj2)).b();
                        vector1.addElement(e1.a(s2.trim()));
                    }

                    d1.a(b(vector1), a(vector));
                } else {
                    d1.a(((n) (obj2)), c(s2));
                }
            } else {
                Object obj1 = new org.bouncycastle.asn1.n.a.d(((String) (obj)), '=');
                obj = ((org.bouncycastle.asn1.n.a.d) (obj1)).b();
                if (!((org.bouncycastle.asn1.n.a.d) (obj1)).a())
                    throw new IllegalArgumentException("badly formatted directory string");
                obj1 = ((org.bouncycastle.asn1.n.a.d) (obj1)).b();
                d1.a(e1.a(((String) (obj)).trim()), c(((String) (obj1))));
            }
        }
        return d1.a().a();
    }

    private static int b(char c1) {
        if ('0' <= c1 && c1 <= '9')
            c1 -= 48;
        else
        if ('a' <= c1 && c1 <= 'f')
            c1 = (c1 - 97) + 10;
        else
            c1 = (c1 - 65) + 10;
        return c1;
    }

    public static String b(String s) {
        StringBuffer stringbuffer = new StringBuffer();
        if (s.length() != 0) {
            char c1 = s.charAt(0);
            stringbuffer.append(c1);
            int i = 1;
            for (char c2 = c1; i < s.length(); c2 = c1) {
                c1 = s.charAt(i);
                if (c2 != ' ' || c1 != ' ')
                    stringbuffer.append(c1);
                i++;
            }

        }
        return stringbuffer.toString();
    }

    private static n[] b(Vector vector) {
        n an[] = new n[vector.size()];
        for (int i = 0; i != an.length; i++)
            an[i] = (n)vector.elementAt(i);

        return an;
    }

    private static String c(String s) {
        if (s.length() != 0 && (s.indexOf('\\') >= 0 || s.indexOf('"') >= 0)) goto _L2; else goto _L1
_L1:
        s = s.trim();
_L8:
        return s;
_L2:
        char ac[] = s.toCharArray();
        s = new StringBuffer(s.length());
        char c1;
        char c2;
        char c3;
        byte byte0;
        boolean flag;
        int i;
        int j;
        boolean flag1;
        boolean flag2;
        boolean flag3;
        int k;
        if (ac[0] == '\\' && ac[1] == '#') {
            byte0 = 2;
            s.append("\\#");
        } else {
            byte0 = 0;
        }
        c2 = '\0';
        j = 0;
        flag1 = false;
        flag = false;
        flag2 = false;
        i = byte0;
        if (i == ac.length)
            break MISSING_BLOCK_LABEL_339;
        c3 = ac[i];
        if (c3 != ' ')
            flag1 = true;
        if (c3 != '"')
            break; /* Loop/switch isn't completed */
        if (!flag2) {
            if (!flag)
                flag = true;
            else
                flag = false;
        } else {
            s.append(c3);
        }
        byte0 = 0;
        flag3 = flag;
        k = j;
        c1 = c2;
_L6:
        i++;
        c2 = c1;
        j = k;
        flag = flag3;
        flag2 = byte0;
        if (true) goto _L4; else goto _L3
_L4:
        break MISSING_BLOCK_LABEL_96;
_L3:
label0:
        {
            if (c3 != '\\' || flag2 || flag)
                break label0;
            k = s.length();
            byte0 = 1;
            c1 = c2;
            flag3 = flag;
        }
        continue; /* Loop/switch isn't completed */
        if (c3 == ' ' && !flag2) {
            c1 = c2;
            k = j;
            flag3 = flag;
            byte0 = flag2;
            if (!flag1)
                continue; /* Loop/switch isn't completed */
        }
        if (flag2 && a(c3)) {
            if (c2 != 0) {
                s.append((char)(b(c2) * 16 + b(c3)));
                c1 = '\0';
                byte0 = 0;
                k = j;
                flag3 = flag;
            } else {
                c1 = c3;
                k = j;
                flag3 = flag;
                byte0 = flag2;
            }
        } else {
            s.append(c3);
            byte0 = 0;
            c1 = c2;
            k = j;
            flag3 = flag;
        }
        if (true) goto _L6; else goto _L5
_L5:
        if (s.length() > 0)
            for (; s.charAt(s.length() - 1) == ' ' && j != s.length() - 1; s.setLength(s.length() - 1));
        s = s.toString();
        if (true) goto _L8; else goto _L7
_L7:
    }

    private static r d(String s) {
        try {
            s = r.b(org.bouncycastle.util.encoders.d.a(s.substring(1)));
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            throw new IllegalStateException((new StringBuilder()).append("unknown encoding in name: ").append(s).toString());
        }
        return s;
    }
}
