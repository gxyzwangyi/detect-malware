// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.bouncycastle.asn1;

import java.io.ByteArrayOutputStream;

// Referenced classes of package org.bouncycastle.asn1:
//            r, n, k, y, 
//            g, f, bi, q

public class aq extends r {

    private n a;
    private k b;
    private r c;
    private int d;
    private r e;

    public aq(g g1) {
        int j = 0;
        r r1 = a(g1, 0);
        r r2 = r1;
        if (r1 instanceof n) {
            a = (n)r1;
            j = 1;
            r2 = a(g1, 1);
        }
        r1 = r2;
        int i = j;
        if (r2 instanceof k) {
            b = (k)r2;
            i = j + 1;
            r1 = a(g1, i);
        }
        r2 = r1;
        j = i;
        if (!(r1 instanceof y)) {
            c = r1;
            j = i + 1;
            r2 = a(g1, j);
        }
        if (g1.a() != j + 1)
            throw new IllegalArgumentException("input vector too large");
        if (!(r2 instanceof y)) {
            throw new IllegalArgumentException("No tagged object found in vector. Structure doesn't seem to be of type External");
        } else {
            g1 = (y)r2;
            a(g1.c());
            e = g1.j();
            return;
        }
    }

    private r a(g g1, int i) {
        if (g1.a() <= i)
            throw new IllegalArgumentException("too few objects in input vector");
        else
            return g1.a(i).h();
    }

    private void a(int i) {
        if (i < 0 || i > 2) {
            throw new IllegalArgumentException((new StringBuilder()).append("invalid encoding value: ").append(i).toString());
        } else {
            d = i;
            return;
        }
    }

    void a(q q1) {
        ByteArrayOutputStream bytearrayoutputstream = new ByteArrayOutputStream();
        if (a != null)
            bytearrayoutputstream.write(a.a("DER"));
        if (b != null)
            bytearrayoutputstream.write(b.a("DER"));
        if (c != null)
            bytearrayoutputstream.write(c.a("DER"));
        bytearrayoutputstream.write((new bi(true, d, e)).a("DER"));
        q1.a(32, 8, bytearrayoutputstream.toByteArray());
    }

    boolean a() {
        return true;
    }

    boolean a(r r1) {
        boolean flag1 = false;
        if (r1 instanceof aq) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        if (this == r1) {
            flag = true;
            continue; /* Loop/switch isn't completed */
        }
        r1 = (aq)r1;
        if (a != null) {
            flag = flag1;
            if (((aq) (r1)).a == null)
                continue; /* Loop/switch isn't completed */
            flag = flag1;
            if (!((aq) (r1)).a.equals(a))
                continue; /* Loop/switch isn't completed */
        }
        if (b != null) {
            flag = flag1;
            if (((aq) (r1)).b == null)
                continue; /* Loop/switch isn't completed */
            flag = flag1;
            if (!((aq) (r1)).b.equals(b))
                continue; /* Loop/switch isn't completed */
        }
        if (c != null) {
            flag = flag1;
            if (((aq) (r1)).c == null)
                continue; /* Loop/switch isn't completed */
            flag = flag1;
            if (!((aq) (r1)).c.equals(c))
                continue; /* Loop/switch isn't completed */
        }
        flag = e.equals(((aq) (r1)).e);
        if (true) goto _L4; else goto _L3
_L3:
    }

    int b() {
        return i().length;
    }

    public int hashCode() {
        int j = 0;
        if (a != null)
            j = a.hashCode();
        int i = j;
        if (b != null)
            i = j ^ b.hashCode();
        j = i;
        if (c != null)
            j = i ^ c.hashCode();
        return j ^ e.hashCode();
    }
}
