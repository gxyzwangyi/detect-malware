// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.bouncycastle.asn1;

import java.io.IOException;
import java.util.*;
import org.bouncycastle.util.d;

// Referenced classes of package org.bouncycastle.asn1:
//            r, g, f, ax, 
//            v, y, ak, ai, 
//            br, s, bf, q

public abstract class u extends r
    implements d {

    private Vector a;
    private boolean b;

    protected u() {
        a = new Vector();
        b = false;
    }

    protected u(f f1) {
        a = new Vector();
        b = false;
        a.addElement(f1);
    }

    protected u(g g1, boolean flag) {
        int i = 0;
        super();
        a = new Vector();
        b = false;
        for (; i != g1.a(); i++)
            a.addElement(g1.a(i));

        if (flag)
            j();
    }

    protected u(f af[], boolean flag) {
        int i = 0;
        super();
        a = new Vector();
        b = false;
        for (; i != af.length; i++)
            a.addElement(af[i]);

        if (flag)
            j();
    }

    private f a(Enumeration enumeration) {
        f f1 = (f)enumeration.nextElement();
        enumeration = f1;
        if (f1 == null)
            enumeration = ax.a;
        return enumeration;
    }

    public static u a(Object obj) {
        if (obj != null && !(obj instanceof u)) goto _L2; else goto _L1
_L1:
        obj = (u)obj;
_L4:
        return ((u) (obj));
_L2:
        if (obj instanceof v) {
            obj = a(((v)obj).h());
            continue; /* Loop/switch isn't completed */
        }
        if (obj instanceof byte[]) {
            try {
                obj = a(r.b((byte[])(byte[])obj));
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) {
                throw new IllegalArgumentException((new StringBuilder()).append("failed to construct set from byte[]: ").append(((IOException) (obj)).getMessage()).toString());
            }
            continue; /* Loop/switch isn't completed */
        }
        if (!(obj instanceof f))
            break; /* Loop/switch isn't completed */
        r r1 = ((f)obj).h();
        if (!(r1 instanceof u))
            break; /* Loop/switch isn't completed */
        obj = (u)r1;
        if (true) goto _L4; else goto _L3
_L3:
        throw new IllegalArgumentException((new StringBuilder()).append("unknown object in getInstance: ").append(obj.getClass().getName()).toString());
    }

    public static u a(y y1, boolean flag) {
        if (flag) {
            if (!y1.d())
                throw new IllegalArgumentException("object implicit - explicit expected.");
            y1 = (u)y1.j();
        } else
        if (y1.d()) {
            if (y1 instanceof ak)
                y1 = new ai(y1.j());
            else
                y1 = new br(y1.j());
        } else
        if (y1.j() instanceof u)
            y1 = (u)y1.j();
        else
        if (y1.j() instanceof s) {
            s s1 = (s)y1.j();
            if (y1 instanceof ak)
                y1 = new ai(s1.c());
            else
                y1 = new br(s1.c());
        } else {
            throw new IllegalArgumentException((new StringBuilder()).append("unknown object in getInstance: ").append(y1.getClass().getName()).toString());
        }
        return y1;
    }

    private boolean a(byte abyte0[], byte abyte1[]) {
        int i;
        int k;
        boolean flag;
        flag = true;
        k = Math.min(abyte0.length, abyte1.length);
        i = 0;
_L3:
        if (i == k)
            break MISSING_BLOCK_LABEL_61;
        if (abyte0[i] == abyte1[i]) goto _L2; else goto _L1
_L1:
        if ((abyte0[i] & 0xff) >= (abyte1[i] & 0xff))
            flag = false;
_L4:
        return flag;
_L2:
        i++;
          goto _L3
        if (k != abyte0.length)
            flag = false;
          goto _L4
    }

    private byte[] a(f f1) {
        try {
            f1 = f1.h().a("DER");
        }
        // Misplaced declaration of an exception variable
        catch (f f1) {
            throw new IllegalArgumentException("cannot encode object added to SET");
        }
        return f1;
    }

    public f a(int i) {
        return (f)a.elementAt(i);
    }

    abstract void a(q q);

    boolean a() {
        return true;
    }

    boolean a(r r1) {
        boolean flag1 = false;
        if (r1 instanceof u) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        Object obj = (u)r1;
        flag = flag1;
        if (d() != ((u) (obj)).d())
            continue; /* Loop/switch isn't completed */
        r1 = c();
        obj = ((u) (obj)).c();
        while (r1.hasMoreElements())  {
            Object obj1 = a(((Enumeration) (r1)));
            Object obj2 = a(((Enumeration) (obj)));
            obj1 = ((f) (obj1)).h();
            obj2 = ((f) (obj2)).h();
            if (obj1 != obj2) {
                flag = flag1;
                if (!((r) (obj1)).equals(obj2))
                    continue; /* Loop/switch isn't completed */
            }
        }
        flag = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public Enumeration c() {
        return a.elements();
    }

    public int d() {
        return a.size();
    }

    public f[] e() {
        f af[] = new f[d()];
        for (int i = 0; i != d(); i++)
            af[i] = a(i);

        return af;
    }

    r f() {
        bf bf1;
        if (b) {
            bf1 = new bf();
            bf1.a = a;
        } else {
            Vector vector = new Vector();
            for (int i = 0; i != a.size(); i++)
                vector.addElement(a.elementAt(i));

            bf1 = new bf();
            bf1.a = vector;
            bf1.j();
        }
        return bf1;
    }

    r g() {
        br br1 = new br();
        br1.a = a;
        return br1;
    }

    public int hashCode() {
        Enumeration enumeration = c();
        int i;
        for (i = d(); enumeration.hasMoreElements(); i = i * 17 ^ a(enumeration).hashCode());
        return i;
    }

    public Iterator iterator() {
        return new org.bouncycastle.util.a.a(e());
    }

    protected void j() {
        if (!b) {
            b = true;
            if (a.size() > 1) {
                int l = a.size() - 1;
                for (int i = 1; i != 0;) {
                    byte abyte0[] = a((f)a.elementAt(0));
                    boolean flag = false;
                    int k = 0;
                    i = 0;
                    while (k != l)  {
                        byte abyte1[] = a((f)a.elementAt(k + 1));
                        boolean flag2;
                        if (a(abyte0, abyte1)) {
                            boolean flag1 = flag;
                            flag = i;
                            i = ((flag1) ? 1 : 0);
                            abyte0 = abyte1;
                        } else {
                            Object obj = a.elementAt(k);
                            a.setElementAt(a.elementAt(k + 1), k);
                            a.setElementAt(obj, k + 1);
                            flag = true;
                            i = k;
                        }
                        k++;
                        flag2 = flag;
                        flag = i;
                        i = ((flag2) ? 1 : 0);
                    }
                    l = ((flag) ? 1 : 0);
                }

            }
        }
    }

    public String toString() {
        return a.toString();
    }
}
