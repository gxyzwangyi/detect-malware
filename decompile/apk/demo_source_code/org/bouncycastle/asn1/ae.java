// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.bouncycastle.asn1;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Vector;

// Referenced classes of package org.bouncycastle.asn1:
//            o, s, az, q, 
//            f, r

public class ae extends o {

    private o b[];

    public ae(byte abyte0[]) {
        super(abyte0);
    }

    public ae(o ao[]) {
        super(a(ao));
        b = ao;
    }

    static ae a(s s1) {
        o ao[] = new o[s1.e()];
        s1 = s1.d();
        for (int i = 0; s1.hasMoreElements(); i++)
            ao[i] = (o)s1.nextElement();

        return new ae(ao);
    }

    private static byte[] a(o ao[]) {
        Object obj = new ByteArrayOutputStream();
        int i = 0;
        while (i != ao.length)  {
            try {
                ((ByteArrayOutputStream) (obj)).write(((az)ao[i]).d());
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) {
                throw new IllegalArgumentException((new StringBuilder()).append(ao[i].getClass().getName()).append(" found in input should only contain DEROctetString").toString());
            }
            // Misplaced declaration of an exception variable
            catch (o ao[]) {
                throw new IllegalArgumentException((new StringBuilder()).append("exception converting octets ").append(ao.toString()).toString());
            }
            i++;
        }
        return ((ByteArrayOutputStream) (obj)).toByteArray();
    }

    static o[] a(ae ae1) {
        return ae1.b;
    }

    private Vector k() {
        Vector vector = new Vector();
        int i = 0;
        while (i < a.length)  {
            int l;
            byte abyte0[];
            if (i + 1000 > a.length)
                l = a.length;
            else
                l = i + 1000;
            abyte0 = new byte[l - i];
            System.arraycopy(a, i, abyte0, 0, abyte0.length);
            vector.addElement(new az(abyte0));
            i += 1000;
        }
        return vector;
    }

    public void a(q q1) {
        q1.b(36);
        q1.b(128);
        for (Enumeration enumeration = j(); enumeration.hasMoreElements(); q1.a((f)enumeration.nextElement()));
        q1.b(0);
        q1.b(0);
    }

    boolean a() {
        return true;
    }

    int b() {
        Enumeration enumeration = j();
        int i;
        for (i = 0; enumeration.hasMoreElements(); i = ((f)enumeration.nextElement()).h().b() + i);
        return i + 2 + 2;
    }

    public byte[] d() {
        return a;
    }

    public Enumeration j() {
        Enumeration enumeration;
        if (b == null)
            enumeration = k().elements();
        else
            enumeration = new Enumeration() {

                int a;
                final ae b;

                public boolean hasMoreElements() {
                    boolean flag;
                    if (a < ae.a(b).length)
                        flag = true;
                    else
                        flag = false;
                    return flag;
                }

                public Object nextElement() {
                    o ao[] = ae.a(b);
                    int i = a;
                    a = i + 1;
                    return ao[i];
                }

             {
                b = ae.this;
                super();
                a = 0;
            }
            }
;
        return enumeration;
    }
}
