// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.bouncycastle.asn1;

import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import org.bouncycastle.util.a;

// Referenced classes of package org.bouncycastle.asn1:
//            r, x, bo, ap, 
//            q, ASN1ParsingException

public abstract class c extends r
    implements x {

    private static final char c[] = {
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 
        'A', 'B', 'C', 'D', 'E', 'F'
    };
    protected final byte a[];
    protected final int b;

    public c(byte abyte0[], int i) {
        if (abyte0 == null)
            throw new NullPointerException("data cannot be null");
        if (abyte0.length == 0 && i != 0)
            throw new IllegalArgumentException("zero length data with non-zero pad bits");
        if (i > 7 || i < 0) {
            throw new IllegalArgumentException("pad bits cannot be greater than 7 or less than 0");
        } else {
            a = org.bouncycastle.util.a.b(abyte0);
            b = i;
            return;
        }
    }

    protected static int a(int i) {
        int j;
        boolean flag;
        flag = false;
        j = 3;
_L3:
        if (j < 0) goto _L2; else goto _L1
_L1:
        if (j != 0) {
            if (i >> j * 8 == 0)
                continue; /* Loop/switch isn't completed */
            i = i >> j * 8 & 0xff;
        } else {
            if (i == 0)
                continue; /* Loop/switch isn't completed */
            i &= 0xff;
        }
_L4:
        if (i == 0) {
            i = ((flag) ? 1 : 0);
        } else {
            boolean flag1 = true;
            int k = i;
            i = ((flag1) ? 1 : 0);
            do {
                k <<= 1;
                if ((k & 0xff) == 0)
                    break;
                i++;
            } while (true);
            i = 8 - i;
        }
        return i;
        j--;
          goto _L3
_L2:
        i = 0;
          goto _L4
    }

    static c a(int i, InputStream inputstream) {
        int j;
        byte abyte0[];
        if (i < 1)
            throw new IllegalArgumentException("truncated BIT STRING detected");
        j = inputstream.read();
        abyte0 = new byte[i - 1];
        if (abyte0.length == 0) goto _L2; else goto _L1
_L1:
        if (org.bouncycastle.util.io.a.a(inputstream, abyte0) != abyte0.length)
            throw new EOFException("EOF encountered in middle of BIT STRING");
        if (j <= 0 || j >= 8 || abyte0[abyte0.length - 1] == (byte)(abyte0[abyte0.length - 1] & 255 << j)) goto _L2; else goto _L3
_L3:
        inputstream = new bo(abyte0, j);
_L5:
        return inputstream;
_L2:
        inputstream = new ap(abyte0, j);
        if (true) goto _L5; else goto _L4
_L4:
    }

    protected static byte[] a(byte abyte0[], int i) {
        byte abyte1[] = org.bouncycastle.util.a.b(abyte0);
        if (i > 0) {
            int j = abyte0.length - 1;
            abyte1[j] = (byte)(abyte1[j] & 255 << i);
        }
        return abyte1;
    }

    protected static byte[] b(int i) {
        boolean flag = false;
        if (i != 0) goto _L2; else goto _L1
_L1:
        byte abyte0[] = new byte[0];
_L4:
        return abyte0;
_L2:
        int j;
        int k;
        j = 4;
        k = 3;
_L6:
        byte abyte1[];
        if (k >= 1 && (255 << k * 8 & i) == 0)
            break MISSING_BLOCK_LABEL_73;
        abyte1 = new byte[j];
        k = ((flag) ? 1 : 0);
_L5:
        abyte0 = abyte1;
        if (k >= j) goto _L4; else goto _L3
_L3:
        abyte1[k] = (byte)(i >> k * 8 & 0xff);
        k++;
          goto _L5
          goto _L4
        j--;
        k--;
          goto _L6
    }

    abstract void a(q q1);

    protected boolean a(r r1) {
        boolean flag1 = false;
        if (r1 instanceof c) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        r1 = (c)r1;
        flag = flag1;
        if (b == ((c) (r1)).b) {
            flag = flag1;
            if (org.bouncycastle.util.a.a(d(), r1.d()))
                flag = true;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public String c() {
        Object obj = new StringBuffer("#");
        ByteArrayOutputStream bytearrayoutputstream = new ByteArrayOutputStream();
        q q1 = new q(bytearrayoutputstream);
        byte abyte0[];
        try {
            q1.a(this);
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            throw new ASN1ParsingException((new StringBuilder()).append("Internal error encoding BitString: ").append(((IOException) (obj)).getMessage()).toString(), ((Throwable) (obj)));
        }
        abyte0 = bytearrayoutputstream.toByteArray();
        for (int i = 0; i != abyte0.length; i++) {
            ((StringBuffer) (obj)).append(c[abyte0[i] >>> 4 & 0xf]);
            ((StringBuffer) (obj)).append(c[abyte0[i] & 0xf]);
        }

        return ((StringBuffer) (obj)).toString();
    }

    public byte[] d() {
        return a(a, b);
    }

    public int e() {
        return b;
    }

    r f() {
        return new ap(a, b);
    }

    r g() {
        return new bo(a, b);
    }

    public int hashCode() {
        return b ^ org.bouncycastle.util.a.a(d());
    }

    public String toString() {
        return c();
    }

}
