// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.bouncycastle.util.encoders;

import java.io.IOException;
import java.io.OutputStream;

// Referenced classes of package org.bouncycastle.util.encoders:
//            c

public class b
    implements c {

    protected final byte a[] = {
        65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 
        75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 
        85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 
        101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 
        111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 
        121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 
        56, 57, 43, 47
    };
    protected byte b;
    protected final byte c[] = new byte[128];

    public b() {
        b = 61;
        a();
    }

    private int a(OutputStream outputstream, char c1, char c2, char c3, char c4) {
        if (c3 == b) {
            c1 = c[c1];
            c2 = c[c2];
            if ((c1 | c2) < 0)
                throw new IOException("invalid characters encountered at end of base64 data");
            outputstream.write(c1 << 2 | c2 >> 4);
            c1 = '\001';
        } else
        if (c4 == b) {
            c1 = c[c1];
            c2 = c[c2];
            c3 = c[c3];
            if ((c1 | c2 | c3) < 0)
                throw new IOException("invalid characters encountered at end of base64 data");
            outputstream.write(c1 << 2 | c2 >> 4);
            outputstream.write(c2 << 4 | c3 >> 2);
            c1 = '\002';
        } else {
            c1 = c[c1];
            c2 = c[c2];
            c3 = c[c3];
            c4 = c[c4];
            if ((c1 | c2 | c3 | c4) < 0)
                throw new IOException("invalid characters encountered at end of base64 data");
            outputstream.write(c1 << 2 | c2 >> 4);
            outputstream.write(c2 << 4 | c3 >> 2);
            outputstream.write(c3 << 6 | c4);
            c1 = '\003';
        }
        return c1;
    }

    private int a(String s, int i, int j) {
        for (; i < j && a(s.charAt(i)); i++);
        return i;
    }

    private boolean a(char c1) {
        boolean flag;
        if (c1 == '\n' || c1 == '\r' || c1 == '\t' || c1 == ' ')
            flag = true;
        else
            flag = false;
        return flag;
    }

    public int a(String s, OutputStream outputstream) {
        int i = s.length();
_L2:
        int j;
        int k;
        int l;
        if (i <= 0 || !a(s.charAt(i - 1))) {
            l = i - 4;
            k = a(s, 0, l);
            j = 0;
            break MISSING_BLOCK_LABEL_41;
        } else {
            i--;
            continue; /* Loop/switch isn't completed */
        }
        do {
            if (k >= l)
                break;
            byte byte0 = c[s.charAt(k)];
            int i1 = a(s, k + 1, l);
            k = c[s.charAt(i1)];
            int j1 = a(s, i1 + 1, l);
            i1 = c[s.charAt(j1)];
            j1 = a(s, j1 + 1, l);
            byte byte1 = c[s.charAt(j1)];
            if ((byte0 | k | i1 | byte1) < 0)
                throw new IOException("invalid characters encountered in base64 data");
            outputstream.write(byte0 << 2 | k >> 4);
            outputstream.write(k << 4 | i1 >> 2);
            outputstream.write(i1 << 6 | byte1);
            k = a(s, j1 + 1, l);
            j += 3;
        } while (true);
        return a(outputstream, s.charAt(i - 4), s.charAt(i - 3), s.charAt(i - 2), s.charAt(i - 1)) + j;
        if (true) goto _L2; else goto _L1
_L1:
    }

    public int a(byte abyte0[], int i, int j, OutputStream outputstream) {
        int k;
        int l;
        k = j % 3;
        l = j - k;
        for (j = i; j < i + l; j += 3) {
            int j1 = abyte0[j] & 0xff;
            int k1 = abyte0[j + 1] & 0xff;
            int i1 = abyte0[j + 2] & 0xff;
            outputstream.write(a[j1 >>> 2 & 0x3f]);
            outputstream.write(a[(j1 << 4 | k1 >>> 4) & 0x3f]);
            outputstream.write(a[(k1 << 2 | i1 >>> 6) & 0x3f]);
            outputstream.write(a[i1 & 0x3f]);
        }

        k;
        JVM INSTR tableswitch 0 2: default 164
    //                   0 164
    //                   1 182
    //                   2 246;
           goto _L1 _L1 _L2 _L3
_L1:
        break; /* Loop/switch isn't completed */
_L3:
        break MISSING_BLOCK_LABEL_246;
_L4:
        j = l / 3;
        if (k == 0)
            i = 0;
        else
            i = 4;
        return i + j * 4;
_L2:
        i = abyte0[i + l] & 0xff;
        outputstream.write(a[i >>> 2 & 0x3f]);
        outputstream.write(a[i << 4 & 0x3f]);
        outputstream.write(b);
        outputstream.write(b);
          goto _L4
        j = abyte0[i + l] & 0xff;
        i = abyte0[i + l + 1] & 0xff;
        outputstream.write(a[j >>> 2 & 0x3f]);
        outputstream.write(a[(j << 4 | i >>> 4) & 0x3f]);
        outputstream.write(a[i << 2 & 0x3f]);
        outputstream.write(b);
          goto _L4
    }

    protected void a() {
        boolean flag = false;
        int i = 0;
        int j;
        do {
            j = ((flag) ? 1 : 0);
            if (i >= c.length)
                break;
            c[i] = -1;
            i++;
        } while (true);
        for (; j < a.length; j++)
            c[a[j]] = (byte)j;

    }
}
