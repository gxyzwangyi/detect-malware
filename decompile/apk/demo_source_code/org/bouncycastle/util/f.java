// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.bouncycastle.util;

import java.io.*;
import java.security.AccessController;
import java.security.PrivilegedAction;

public final class f {

    private static String a;

    public static String a() {
        return a;
    }

    public static String a(byte abyte0[]) {
        boolean flag = false;
        int k = 0;
        for (int i = 0; i < abyte0.length;) {
            k++;
            if ((abyte0[i] & 0xf0) == 240) {
                k++;
                i += 4;
            } else
            if ((abyte0[i] & 0xe0) == 224)
                i += 3;
            else
            if ((abyte0[i] & 0xc0) == 192)
                i += 2;
            else
                i++;
        }

        char ac[] = new char[k];
        k = 0;
        int j = ((flag) ? 1 : 0);
        while (k < abyte0.length)  {
            char c1;
            int i1;
            if ((abyte0[k] & 0xf0) == 240) {
                int l = ((abyte0[k] & 3) << 18 | (abyte0[k + 1] & 0x3f) << 12 | (abyte0[k + 2] & 0x3f) << 6 | abyte0[k + 3] & 0x3f) - 0x10000;
                char c2 = (char)(0xd800 | l >> 10);
                c1 = (char)(l & 0x3ff | 0xdc00);
                l = j + 1;
                ac[j] = c2;
                j = k + 4;
                k = l;
            } else
            if ((abyte0[k] & 0xe0) == 224) {
                c1 = (char)((abyte0[k] & 0xf) << 12 | (abyte0[k + 1] & 0x3f) << 6 | abyte0[k + 2] & 0x3f);
                int j1 = k + 3;
                k = j;
                j = j1;
            } else
            if ((abyte0[k] & 0xd0) == 208) {
                c1 = (char)((abyte0[k] & 0x1f) << 6 | abyte0[k + 1] & 0x3f);
                int k1 = k + 2;
                k = j;
                j = k1;
            } else
            if ((abyte0[k] & 0xc0) == 192) {
                c1 = (char)((abyte0[k] & 0x1f) << 6 | abyte0[k + 1] & 0x3f);
                int l1 = k + 2;
                k = j;
                j = l1;
            } else {
                c1 = (char)(abyte0[k] & 0xff);
                int i2 = k + 1;
                k = j;
                j = i2;
            }
            i1 = k + 1;
            ac[k] = c1;
            k = j;
            j = i1;
        }
        return new String(ac);
    }

    public static void a(char ac[], OutputStream outputstream) {
        int i = 0;
        while (i < ac.length)  {
            int j = ac[i];
            if (j < 128)
                outputstream.write(j);
            else
            if (j < 2048) {
                outputstream.write(j >> 6 | 0xc0);
                outputstream.write(j & 0x3f | 0x80);
            } else
            if (j >= 55296 && j <= 57343) {
                if (i + 1 >= ac.length)
                    throw new IllegalStateException("invalid UTF-16 codepoint");
                i++;
                char c1 = ac[i];
                if (j > 56319)
                    throw new IllegalStateException("invalid UTF-16 codepoint");
                j = ((j & 0x3ff) << 10 | c1 & 0x3ff) + 0x10000;
                outputstream.write(j >> 18 | 0xf0);
                outputstream.write(j >> 12 & 0x3f | 0x80);
                outputstream.write(j >> 6 & 0x3f | 0x80);
                outputstream.write(j & 0x3f | 0x80);
            } else {
                outputstream.write(j >> 12 | 0xe0);
                outputstream.write(j >> 6 & 0x3f | 0x80);
                outputstream.write(j & 0x3f | 0x80);
            }
            i++;
        }
    }

    public static byte[] a(String s) {
        return a(s.toCharArray());
    }

    public static byte[] a(char ac[]) {
        ByteArrayOutputStream bytearrayoutputstream = new ByteArrayOutputStream();
        try {
            a(ac, ((OutputStream) (bytearrayoutputstream)));
        }
        // Misplaced declaration of an exception variable
        catch (char ac[]) {
            throw new IllegalStateException("cannot encode string to byte array!");
        }
        return bytearrayoutputstream.toByteArray();
    }

    public static String b(String s) {
        int i = 0;
        char ac[] = s.toCharArray();
        boolean flag;
        boolean flag1;
        for (flag1 = false; i != ac.length; flag1 = flag) {
            char c1 = ac[i];
            flag = flag1;
            if ('a' <= c1) {
                flag = flag1;
                if ('z' >= c1) {
                    flag = true;
                    ac[i] = (char)((c1 - 97) + 65);
                }
            }
            i++;
        }

        if (flag1)
            s = new String(ac);
        return s;
    }

    public static String b(byte abyte0[]) {
        return new String(c(abyte0));
    }

    public static String c(String s) {
        int i = 0;
        char ac[] = s.toCharArray();
        boolean flag;
        boolean flag1;
        for (flag1 = false; i != ac.length; flag1 = flag) {
            char c1 = ac[i];
            flag = flag1;
            if ('A' <= c1) {
                flag = flag1;
                if ('Z' >= c1) {
                    flag = true;
                    ac[i] = (char)((c1 - 65) + 97);
                }
            }
            i++;
        }

        if (flag1)
            s = new String(ac);
        return s;
    }

    public static char[] c(byte abyte0[]) {
        char ac[] = new char[abyte0.length];
        for (int i = 0; i != ac.length; i++)
            ac[i] = (char)(abyte0[i] & 0xff);

        return ac;
    }

    public static byte[] d(String s) {
        byte abyte0[] = new byte[s.length()];
        for (int i = 0; i != abyte0.length; i++)
            abyte0[i] = (byte)s.charAt(i);

        return abyte0;
    }

    static  {
        PrivilegedAction privilegedaction = JVM INSTR new #6   <Class f$1>;
        privilegedaction._cls1();
        a = (String)AccessController.doPrivileged(privilegedaction);
_L1:
        return;
        Exception exception;
        exception;
        try {
            a = String.format("%n", new Object[0]);
        }
        catch (Exception exception1) {
            a = "\n";
        }
          goto _L1
    }

    // Unreferenced inner class org/bouncycastle/util/f$1

/* anonymous class */
    static final class _cls1
        implements PrivilegedAction {

        public String a() {
            return System.getProperty("line.separator");
        }

        public Object run() {
            return a();
        }

    }

}
