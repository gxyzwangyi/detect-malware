// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.bouncycastle.util;

import java.util.Iterator;
import java.util.NoSuchElementException;

public final class org.bouncycastle.util.a {
    public static class a
        implements Iterator {

        private final Object a[];
        private int b;

        public boolean hasNext() {
            boolean flag;
            if (b < a.length)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public Object next() {
            if (b == a.length) {
                throw new NoSuchElementException((new StringBuilder()).append("Out of elements: ").append(b).toString());
            } else {
                Object aobj[] = a;
                int i = b;
                b = i + 1;
                return aobj[i];
            }
        }

        public void remove() {
            throw new UnsupportedOperationException("Cannot remove element from an Array.");
        }

        public a(Object aobj[]) {
            b = 0;
            a = aobj;
        }
    }


    public static int a(byte abyte0[]) {
        if (abyte0 != null) goto _L2; else goto _L1
_L1:
        int j = 0;
_L4:
        return j;
_L2:
        j = abyte0.length;
        int i = j + 1;
        do {
            int k = j - 1;
            j = i;
            if (k < 0)
                continue;
            i = i * 257 ^ abyte0[k];
            j = k;
        } while (true);
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static int a(char ac[]) {
        if (ac != null) goto _L2; else goto _L1
_L1:
        int j = 0;
_L4:
        return j;
_L2:
        j = ac.length;
        int i = j + 1;
        do {
            int k = j - 1;
            j = i;
            if (k < 0)
                continue;
            i = i * 257 ^ ac[k];
            j = k;
        } while (true);
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static int a(int ai[]) {
        if (ai != null) goto _L2; else goto _L1
_L1:
        int j = 0;
_L4:
        return j;
_L2:
        j = ai.length;
        int i = j + 1;
        do {
            int k = j - 1;
            j = i;
            if (k < 0)
                continue;
            i = i * 257 ^ ai[k];
            j = k;
        } while (true);
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static boolean a(byte abyte0[], byte abyte1[]) {
        boolean flag1 = false;
        if (abyte0 != abyte1) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        flag = flag1;
        if (abyte0 == null)
            continue; /* Loop/switch isn't completed */
        flag = flag1;
        if (abyte1 == null)
            continue; /* Loop/switch isn't completed */
        flag = flag1;
        if (abyte0.length != abyte1.length)
            continue; /* Loop/switch isn't completed */
        for (int i = 0; i != abyte0.length; i++) {
            flag = flag1;
            if (abyte0[i] != abyte1[i])
                continue; /* Loop/switch isn't completed */
        }

        flag = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static boolean a(char ac[], char ac1[]) {
        boolean flag1 = false;
        if (ac != ac1) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        flag = flag1;
        if (ac == null)
            continue; /* Loop/switch isn't completed */
        flag = flag1;
        if (ac1 == null)
            continue; /* Loop/switch isn't completed */
        flag = flag1;
        if (ac.length != ac1.length)
            continue; /* Loop/switch isn't completed */
        for (int i = 0; i != ac.length; i++) {
            flag = flag1;
            if (ac[i] != ac1[i])
                continue; /* Loop/switch isn't completed */
        }

        flag = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static boolean a(int ai[], int ai1[]) {
        boolean flag1 = false;
        if (ai != ai1) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        flag = flag1;
        if (ai == null)
            continue; /* Loop/switch isn't completed */
        flag = flag1;
        if (ai1 == null)
            continue; /* Loop/switch isn't completed */
        flag = flag1;
        if (ai.length != ai1.length)
            continue; /* Loop/switch isn't completed */
        for (int i = 0; i != ai.length; i++) {
            flag = flag1;
            if (ai[i] != ai1[i])
                continue; /* Loop/switch isn't completed */
        }

        flag = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static long[] a(long al[]) {
        if (al == null) {
            al = null;
        } else {
            long al1[] = new long[al.length];
            System.arraycopy(al, 0, al1, 0, al.length);
            al = al1;
        }
        return al;
    }

    public static byte[] b(byte abyte0[]) {
        if (abyte0 == null) {
            abyte0 = null;
        } else {
            byte abyte1[] = new byte[abyte0.length];
            System.arraycopy(abyte0, 0, abyte1, 0, abyte0.length);
            abyte0 = abyte1;
        }
        return abyte0;
    }

    public static byte[] b(byte abyte0[], byte abyte1[]) {
        if (abyte0 != null && abyte1 != null) {
            byte abyte2[] = new byte[abyte0.length + abyte1.length];
            System.arraycopy(abyte0, 0, abyte2, 0, abyte0.length);
            System.arraycopy(abyte1, 0, abyte2, abyte0.length, abyte1.length);
            abyte0 = abyte2;
        } else
        if (abyte1 != null)
            abyte0 = b(abyte1);
        else
            abyte0 = b(abyte0);
        return abyte0;
    }

    public static int[] b(int ai[]) {
        if (ai == null) {
            ai = null;
        } else {
            int ai1[] = new int[ai.length];
            System.arraycopy(ai, 0, ai1, 0, ai.length);
            ai = ai1;
        }
        return ai;
    }
}
