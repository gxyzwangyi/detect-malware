// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.bouncycastle.openssl.a;

import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.HashMap;
import java.util.Map;
import org.bouncycastle.asn1.k.e;
import org.bouncycastle.asn1.k.f;
import org.bouncycastle.asn1.n;
import org.bouncycastle.asn1.p.g;
import org.bouncycastle.jcajce.a.a;
import org.bouncycastle.openssl.PEMException;

public class b {

    private static final Map b;
    private org.bouncycastle.jcajce.a.b a;

    public b() {
        a = new a();
    }

    private KeyFactory a(org.bouncycastle.asn1.o.a a1) {
        n n1 = a1.a();
        String s = (String)b.get(n1);
        a1 = s;
        if (s == null)
            a1 = n1.c();
        return a.b(a1);
    }

    public PrivateKey a(f f1) {
        try {
            KeyFactory keyfactory = a(f1.a());
            PKCS8EncodedKeySpec pkcs8encodedkeyspec = JVM INSTR new #84  <Class PKCS8EncodedKeySpec>;
            pkcs8encodedkeyspec.PKCS8EncodedKeySpec(f1.i());
            f1 = keyfactory.generatePrivate(pkcs8encodedkeyspec);
        }
        // Misplaced declaration of an exception variable
        catch (f f1) {
            throw new PEMException((new StringBuilder()).append("unable to convert key pair: ").append(f1.getMessage()).toString(), f1);
        }
        return f1;
    }

    static  {
        b = new HashMap();
        b.put(g.k, "ECDSA");
        b.put(e.b, "RSA");
        b.put(g.U, "DSA");
    }
}
