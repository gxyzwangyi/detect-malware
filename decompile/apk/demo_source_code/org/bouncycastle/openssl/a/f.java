// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.bouncycastle.openssl.a;

import java.security.GeneralSecurityException;
import java.util.*;
import javax.crypto.*;
import javax.crypto.spec.*;
import org.bouncycastle.asn1.h.a;
import org.bouncycastle.asn1.k.e;
import org.bouncycastle.asn1.n;
import org.bouncycastle.jcajce.a.b;
import org.bouncycastle.openssl.EncryptionException;
import org.bouncycastle.openssl.PEMException;
import org.bouncycastle.util.c;

class f {

    private static final Map a;
    private static final Set b;
    private static final Set c;

    private static SecretKey a(b b1, char ac[], String s, int i, byte abyte0[]) {
        return a(b1, ac, s, i, abyte0, false);
    }

    private static SecretKey a(b b1, char ac[], String s, int i, byte abyte0[], boolean flag) {
        try {
            PBEKeySpec pbekeyspec = JVM INSTR new #110 <Class PBEKeySpec>;
            pbekeyspec.PBEKeySpec(ac, abyte0, 1, i * 8);
            b1 = b1.c("PBKDF-OpenSSL").generateSecret(pbekeyspec).getEncoded();
        }
        // Misplaced declaration of an exception variable
        catch (b b1) {
            throw new PEMException((new StringBuilder()).append("Unable to create OpenSSL PBDKF: ").append(b1.getMessage()).toString(), b1);
        }
        if (!flag)
            break MISSING_BLOCK_LABEL_59;
        if (b1.length >= 24)
            System.arraycopy(b1, 0, b1, 16, 8);
        b1 = new SecretKeySpec(b1, s);
        return b1;
    }

    static byte[] a(boolean flag, b b1, byte abyte0[], char ac[], String s, byte abyte1[]) {
        Object obj2 = new IvParameterSpec(abyte1);
        Object obj = "CBC";
        String s1 = "PKCS5Padding";
        if (s.endsWith("-CFB")) {
            obj = "CFB";
            s1 = "NoPadding";
        }
        int i;
        Object obj1;
        if (s.endsWith("-ECB") || "DES-EDE".equals(s) || "DES-EDE3".equals(s)) {
            obj1 = "ECB";
            obj = null;
        } else {
            obj1 = obj;
            obj = obj2;
        }
        if (s.endsWith("-OFB")) {
            obj1 = "NoPadding";
            s1 = "OFB";
        } else {
            obj2 = s1;
            s1 = ((String) (obj1));
            obj1 = obj2;
        }
        if (s.startsWith("DES-EDE")) {
            obj2 = "DESede";
            boolean flag1;
            if (!s.startsWith("DES-EDE3"))
                flag1 = true;
            else
                flag1 = false;
            ac = a(b1, ac, "DESede", 24, abyte1, flag1);
            s = ((String) (obj2));
        } else
        if (s.startsWith("DES-")) {
            s = "DES";
            ac = a(b1, ac, "DES", 8, abyte1);
        } else
        if (s.startsWith("BF-")) {
            s = "Blowfish";
            ac = a(b1, ac, "Blowfish", 16, abyte1);
        } else
        if (s.startsWith("RC2-")) {
            i = 128;
            if (s.startsWith("RC2-40-"))
                i = 40;
            else
            if (s.startsWith("RC2-64-"))
                i = 64;
            s = a(b1, ac, "RC2", i / 8, abyte1);
            if (obj == null)
                ac = new RC2ParameterSpec(i);
            else
                ac = new RC2ParameterSpec(i, abyte1);
            obj = ac;
            ac = s;
            s = "RC2";
        } else
        if (s.startsWith("AES-")) {
            String s2 = "AES";
            obj2 = abyte1;
            if (abyte1.length > 8) {
                obj2 = new byte[8];
                System.arraycopy(abyte1, 0, obj2, 0, 8);
            }
            if (s.startsWith("AES-128-"))
                i = 128;
            else
            if (s.startsWith("AES-192-"))
                i = 192;
            else
            if (s.startsWith("AES-256-"))
                i = 256;
            else
                throw new EncryptionException("unknown AES encryption with private key");
            ac = a(b1, ac, "AES", i / 8, ((byte []) (obj2)));
            s = s2;
        } else {
            throw new EncryptionException("unknown encryption with private key");
        }
        s = (new StringBuilder()).append(s).append("/").append(s1).append("/").append(((String) (obj1))).toString();
        try {
            b1 = b1.a(s);
        }
        // Misplaced declaration of an exception variable
        catch (b b1) {
            throw new EncryptionException("exception using cipher - please check password and data.", b1);
        }
        if (flag)
            i = 1;
        else
            i = 2;
        if (obj != null)
            break MISSING_BLOCK_LABEL_525;
        b1.init(i, ac);
_L1:
        b1 = b1.doFinal(abyte0);
        return b1;
        b1.init(i, ac, ((java.security.spec.AlgorithmParameterSpec) (obj)));
          goto _L1
    }

    static  {
        a = new HashMap();
        b = new HashSet();
        c = new HashSet();
        b.add(e.s);
        b.add(e.t);
        b.add(e.u);
        b.add(e.v);
        b.add(e.w);
        b.add(e.x);
        c.add(e.y);
        c.add(e.B);
        c.add(a.q);
        c.add(a.x);
        c.add(a.E);
        a.put(e.B.c(), org.bouncycastle.util.c.a(192));
        a.put(a.q.c(), org.bouncycastle.util.c.a(128));
        a.put(a.x.c(), org.bouncycastle.util.c.a(192));
        a.put(a.E.c(), org.bouncycastle.util.c.a(256));
        a.put(e.bw.c(), org.bouncycastle.util.c.a(128));
        a.put(e.bx, org.bouncycastle.util.c.a(40));
        a.put(e.bz, org.bouncycastle.util.c.a(128));
        a.put(e.by, org.bouncycastle.util.c.a(192));
        a.put(e.bA, org.bouncycastle.util.c.a(128));
        a.put(e.bB, org.bouncycastle.util.c.a(40));
    }
}
