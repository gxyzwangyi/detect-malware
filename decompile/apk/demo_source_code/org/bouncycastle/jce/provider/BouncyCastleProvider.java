// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package org.bouncycastle.jce.provider;

import java.security.AccessController;
import java.security.PrivilegedAction;
import java.security.Provider;
import java.util.HashMap;
import java.util.Map;
import org.bouncycastle.jcajce.provider.config.a;
import org.bouncycastle.jcajce.provider.config.b;

// Referenced classes of package org.bouncycastle.jce.provider:
//            a

public final class BouncyCastleProvider extends Provider
    implements a {

    public static final b a = new org.bouncycastle.jce.provider.a();
    private static String b = "BouncyCastle Security Provider v1.54";
    private static final Map c = new HashMap();
    private static final String d[] = {
        "PBEPBKDF2", "PBEPKCS12"
    };
    private static final String e[] = {
        "SipHash"
    };
    private static final String f[] = {
        "AES", "ARC4", "Blowfish", "Camellia", "CAST5", "CAST6", "ChaCha", "DES", "DESede", "GOST28147", 
        "Grainv1", "Grain128", "HC128", "HC256", "IDEA", "Noekeon", "RC2", "RC5", "RC6", "Rijndael", 
        "Salsa20", "SEED", "Serpent", "Shacal2", "Skipjack", "SM4", "TEA", "Twofish", "Threefish", "VMPC", 
        "VMPCKSA3", "XTEA", "XSalsa20", "OpenSSLPBKDF"
    };
    private static final String g[] = {
        "X509", "IES"
    };
    private static final String h[] = {
        "DSA", "DH", "EC", "RSA", "GOST", "ECGOST", "ElGamal", "DSTU4145"
    };
    private static final String i[] = {
        "GOST3411", "Keccak", "MD2", "MD4", "MD5", "SHA1", "RIPEMD128", "RIPEMD160", "RIPEMD256", "RIPEMD320", 
        "SHA224", "SHA256", "SHA384", "SHA512", "SHA3", "Skein", "SM3", "Tiger", "Whirlpool", "Blake2b"
    };
    private static final String j[] = {
        "BC", "PKCS12"
    };

    public BouncyCastleProvider() {
        super("BC", 1.54D, b);
        AccessController.doPrivileged(new PrivilegedAction() {

            final BouncyCastleProvider a;

            public Object run() {
                org.bouncycastle.jce.provider.BouncyCastleProvider.a(a);
                return null;
            }

             {
                a = BouncyCastleProvider.this;
                super();
            }
        }
);
    }

    private void a() {
        a("org.bouncycastle.jcajce.provider.digest.", i);
        a("org.bouncycastle.jcajce.provider.symmetric.", d);
        a("org.bouncycastle.jcajce.provider.symmetric.", e);
        a("org.bouncycastle.jcajce.provider.symmetric.", f);
        a("org.bouncycastle.jcajce.provider.asymmetric.", g);
        a("org.bouncycastle.jcajce.provider.asymmetric.", h);
        a("org.bouncycastle.jcajce.provider.keystore.", j);
        put("X509Store.CERTIFICATE/COLLECTION", "org.bouncycastle.jce.provider.X509StoreCertCollection");
        put("X509Store.ATTRIBUTECERTIFICATE/COLLECTION", "org.bouncycastle.jce.provider.X509StoreAttrCertCollection");
        put("X509Store.CRL/COLLECTION", "org.bouncycastle.jce.provider.X509StoreCRLCollection");
        put("X509Store.CERTIFICATEPAIR/COLLECTION", "org.bouncycastle.jce.provider.X509StoreCertPairCollection");
        put("X509Store.CERTIFICATE/LDAP", "org.bouncycastle.jce.provider.X509StoreLDAPCerts");
        put("X509Store.CRL/LDAP", "org.bouncycastle.jce.provider.X509StoreLDAPCRLs");
        put("X509Store.ATTRIBUTECERTIFICATE/LDAP", "org.bouncycastle.jce.provider.X509StoreLDAPAttrCerts");
        put("X509Store.CERTIFICATEPAIR/LDAP", "org.bouncycastle.jce.provider.X509StoreLDAPCertPairs");
        put("X509StreamParser.CERTIFICATE", "org.bouncycastle.jce.provider.X509CertParser");
        put("X509StreamParser.ATTRIBUTECERTIFICATE", "org.bouncycastle.jce.provider.X509AttrCertParser");
        put("X509StreamParser.CRL", "org.bouncycastle.jce.provider.X509CRLParser");
        put("X509StreamParser.CERTIFICATEPAIR", "org.bouncycastle.jce.provider.X509CertPairParser");
        put("Cipher.BROKENPBEWITHMD5ANDDES", "org.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithMD5AndDES");
        put("Cipher.BROKENPBEWITHSHA1ANDDES", "org.bouncycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithSHA1AndDES");
        put("Cipher.OLDPBEWITHSHAANDTWOFISH-CBC", "org.bouncycastle.jce.provider.BrokenJCEBlockCipher$OldPBEWithSHAAndTwofish");
        put("CertPathValidator.RFC3281", "org.bouncycastle.jce.provider.PKIXAttrCertPathValidatorSpi");
        put("CertPathBuilder.RFC3281", "org.bouncycastle.jce.provider.PKIXAttrCertPathBuilderSpi");
        put("CertPathValidator.RFC3280", "org.bouncycastle.jce.provider.PKIXCertPathValidatorSpi");
        put("CertPathBuilder.RFC3280", "org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi");
        put("CertPathValidator.PKIX", "org.bouncycastle.jce.provider.PKIXCertPathValidatorSpi");
        put("CertPathBuilder.PKIX", "org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi");
        put("CertStore.Collection", "org.bouncycastle.jce.provider.CertStoreCollectionSpi");
        put("CertStore.LDAP", "org.bouncycastle.jce.provider.X509LDAPCertStoreSpi");
        put("CertStore.Multi", "org.bouncycastle.jce.provider.MultiCertStoreSpi");
        put("Alg.Alias.CertStore.X509LDAP", "LDAP");
    }

    private void a(String s, String as[]) {
        int k = 0;
_L5:
        if (k == as.length) goto _L2; else goto _L1
_L1:
        Class class1 = null;
        Object obj = getClass().getClassLoader();
        if (obj == null) goto _L4; else goto _L3
_L3:
        StringBuilder stringbuilder = JVM INSTR new #338 <Class StringBuilder>;
        stringbuilder.StringBuilder();
        obj = ((ClassLoader) (obj)).loadClass(stringbuilder.append(s).append(as[k]).append("$Mappings").toString());
        class1 = ((Class) (obj));
_L6:
        Object obj1;
        if (class1 != null)
            try {
                ((org.bouncycastle.jcajce.provider.a.a)class1.newInstance()).a(this);
            }
            catch (Exception exception) {
                throw new InternalError((new StringBuilder()).append("cannot create instance of ").append(s).append(as[k]).append("$Mappings : ").append(exception).toString());
            }
        k++;
          goto _L5
_L4:
        obj1 = JVM INSTR new #338 <Class StringBuilder>;
        ((StringBuilder) (obj1)).StringBuilder();
        obj1 = Class.forName(((StringBuilder) (obj1)).append(s).append(as[k]).append("$Mappings").toString());
        class1 = ((Class) (obj1));
          goto _L6
_L2:
        return;
        ClassNotFoundException classnotfoundexception;
        classnotfoundexception;
          goto _L6
    }

    static void a(BouncyCastleProvider bouncycastleprovider) {
        bouncycastleprovider.a();
    }

}
