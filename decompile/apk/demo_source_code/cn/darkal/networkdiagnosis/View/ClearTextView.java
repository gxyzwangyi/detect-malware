// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package cn.darkal.networkdiagnosis.View;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.*;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.text.Editable;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.MotionEvent;
import android.widget.EditText;

public class ClearTextView extends EditText {
    public static final class ClearButtonMode extends Enum {

        public static final ClearButtonMode a;
        public static final ClearButtonMode b;
        public static final ClearButtonMode c;
        public static final ClearButtonMode d;
        private static final ClearButtonMode e[];

        public static ClearButtonMode valueOf(String s) {
            return (ClearButtonMode)Enum.valueOf(cn/darkal/networkdiagnosis/View/ClearTextView$ClearButtonMode, s);
        }

        public static ClearButtonMode[] values() {
            return (ClearButtonMode[])e.clone();
        }

        static  {
            a = new ClearButtonMode("NEVER", 0);
            b = new ClearButtonMode("ALWAYS", 1);
            c = new ClearButtonMode("WHILEEDITING", 2);
            d = new ClearButtonMode("UNLESSEDITING", 3);
            e = (new ClearButtonMode[] {
                a, b, c, d
            });
        }

        private ClearButtonMode(String s, int i) {
            super(s, i);
        }
    }


    private Context a;
    private Bitmap b;
    private Paint c;
    private ClearButtonMode d;
    private int e;
    private int f;

    public ClearTextView(Context context) {
        super(context);
        f = a(3F);
        a(context, ((AttributeSet) (null)));
    }

    public ClearTextView(Context context, AttributeSet attributeset) {
        super(context, attributeset);
        f = a(3F);
        a(context, attributeset);
    }

    public ClearTextView(Context context, AttributeSet attributeset, int i) {
        super(context, attributeset, i);
        f = a(3F);
        a(context, attributeset);
    }

    private Rect a(boolean flag) {
        int l = 0;
        int i;
        int j;
        int k;
        if (flag)
            i = (getMeasuredWidth() + getScrollX()) - f - f;
        else
            i = 0;
        if (flag)
            j = i - b.getWidth();
        else
            j = 0;
        if (flag)
            k = (getMeasuredHeight() - b.getHeight()) / 2;
        else
            k = 0;
        if (flag)
            l = b.getHeight() + k;
        setPadding(flag);
        return new Rect(j, k, i, l);
    }

    private Drawable a(int i) {
        Drawable drawable;
        if (android.os.Build.VERSION.SDK_INT > 21)
            drawable = getResources().getDrawable(i, a.getTheme());
        else
            drawable = getResources().getDrawable(i);
        return drawable;
    }

    private void a(Context context, AttributeSet attributeset) {
        a = context;
        context = context.obtainStyledAttributes(attributeset, cn.darkal.networkdiagnosis.a.a.EditTextField);
        context.getInteger(0, 0);
        JVM INSTR tableswitch 1 3: default 48
    //                   1 110
    //                   2 120
    //                   3 130;
           goto _L1 _L2 _L3 _L4
_L1:
        d = ClearButtonMode.a;
_L6:
        int i = context.getResourceId(1, 0x7f020053);
        context.recycle();
        b = ((BitmapDrawable)a(i)).getBitmap();
        c = new Paint();
        c.setAntiAlias(true);
        e = getPaddingRight();
        return;
_L2:
        d = ClearButtonMode.b;
        continue; /* Loop/switch isn't completed */
_L3:
        d = ClearButtonMode.c;
        continue; /* Loop/switch isn't completed */
_L4:
        d = ClearButtonMode.d;
        if (true) goto _L6; else goto _L5
_L5:
    }

    private void a(Canvas canvas) {
        boolean flag = true;
        static class _cls1 {

            static final int a[];

            static  {
                a = new int[ClearButtonMode.values().length];
                NoSuchFieldError nosuchfielderror;
                try {
                    a[ClearButtonMode.b.ordinal()] = 1;
                }
                catch (NoSuchFieldError nosuchfielderror2) { }
                try {
                    a[ClearButtonMode.c.ordinal()] = 2;
                }
                catch (NoSuchFieldError nosuchfielderror1) { }
                a[ClearButtonMode.d.ordinal()] = 3;
_L2:
                return;
                nosuchfielderror;
                if (true) goto _L2; else goto _L1
_L1:
            }
        }

        _cls1.a[d.ordinal()];
        JVM INSTR tableswitch 1 3: default 40
    //                   1 51
    //                   2 64
    //                   3 50;
           goto _L1 _L2 _L3 _L4
_L4:
        break; /* Loop/switch isn't completed */
_L1:
        a(canvas, a(false));
_L6:
        return;
_L2:
        a(canvas, a(true));
        continue; /* Loop/switch isn't completed */
_L3:
        if (!hasFocus() || getText().length() <= 0)
            flag = false;
        a(canvas, a(flag));
        if (true) goto _L6; else goto _L5
_L5:
    }

    private void a(Canvas canvas, Rect rect) {
        if (rect != null)
            canvas.drawBitmap(b, null, rect, c);
    }

    private void setPadding(boolean flag) {
        int j = e;
        int i;
        if (flag)
            i = b.getWidth() + f + f;
        else
            i = 0;
        setPadding(getPaddingLeft(), getPaddingTop(), i + j, getPaddingBottom());
    }

    public int a(float f1) {
        return (int)(getResources().getDisplayMetrics().density * f1 + 0.5F);
    }

    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        canvas.save();
        a(canvas);
        canvas.restore();
    }

    public boolean onTouchEvent(MotionEvent motionevent) {
        motionevent.getAction();
        JVM INSTR tableswitch 1 1: default 24
    //                   1 30;
           goto _L1 _L2
_L1:
        return super.onTouchEvent(motionevent);
_L2:
        if (motionevent.getX() - (float)(getMeasuredWidth() - getPaddingRight()) >= 0.0F) {
            setError(null);
            setText("");
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void setButtonPadding(int i) {
        f = a(i);
    }

    public void setClearButtonMode(ClearButtonMode clearbuttonmode) {
        d = clearbuttonmode;
    }
}
