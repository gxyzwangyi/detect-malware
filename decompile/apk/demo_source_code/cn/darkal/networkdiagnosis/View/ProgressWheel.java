// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package cn.darkal.networkdiagnosis.View;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.*;
import android.os.Handler;
import android.os.Message;
import android.util.AttributeSet;
import android.view.View;

public class ProgressWheel extends View {

    private Paint A;
    private RectF B;
    private RectF C;
    private int D;
    private float E;
    private float F;
    private int G;
    private int H;
    private Handler I;
    private String J;
    private String K[];
    int a;
    boolean b;
    private int c;
    private int d;
    private int e;
    private int f;
    private int g;
    private int h;
    private int i;
    private float j;
    private int k;
    private int l;
    private int m;
    private int n;
    private int o;
    private int p;
    private int q;
    private int r;
    private int s;
    private int t;
    private Paint u;
    private Paint v;
    private Paint w;
    private Paint x;
    private Paint y;
    private Paint z;

    public ProgressWheel(Context context, AttributeSet attributeset) {
        super(context, attributeset);
        c = 100;
        d = 80;
        e = 60;
        f = 20;
        g = 20;
        h = 20;
        i = 60;
        j = f / 2;
        k = 5;
        l = 5;
        m = 5;
        n = 5;
        o = 0xaa000000;
        p = 65535;
        q = 0xaadddddd;
        r = 0xaadddddd;
        s = 0xff000000;
        t = 0;
        u = new Paint();
        v = new Paint();
        w = new Paint();
        x = new Paint();
        y = new Paint();
        z = new Paint();
        A = new Paint();
        B = new RectF();
        C = new RectF();
        D = -90;
        E = 0.0F;
        F = 0.0F;
        G = 2;
        H = 0;
        I = new Handler() {

            final ProgressWheel a;

            public void handleMessage(Message message) {
                message.what;
                JVM INSTR tableswitch 0 1: default 28
            //                           0 29
            //                           1 111;
                   goto _L1 _L2 _L3
_L1:
                return;
_L2:
                a.invalidate();
                if (a.b) {
                    message = a;
                    message.a = ((ProgressWheel) (message)).a + ProgressWheel.a(a);
                    if (a.a > 360)
                        a.a = 0;
                    ProgressWheel.c(a).sendEmptyMessageDelayed(0, ProgressWheel.b(a));
                }
                continue; /* Loop/switch isn't completed */
_L3:
                ProgressWheel.c(a).removeMessages(0);
                a.b = false;
                a.invalidate();
                if (true) goto _L1; else goto _L4
_L4:
            }

             {
                a = ProgressWheel.this;
                super();
            }
        }
;
        a = 0;
        b = false;
        J = "";
        K = new String[0];
        a(context.obtainStyledAttributes(attributeset, cn.darkal.networkdiagnosis.a.a.ProgressWheel));
    }

    static int a(ProgressWheel progresswheel) {
        return progresswheel.G;
    }

    private void a(TypedArray typedarray) {
        f = (int)typedarray.getDimension(12, f);
        g = (int)typedarray.getDimension(6, g);
        G = typedarray.getInteger(7, G);
        H = typedarray.getInteger(8, H);
        if (H < 0)
            H = 0;
        o = typedarray.getColor(3, o);
        e = (int)typedarray.getDimension(13, e);
        h = (int)typedarray.getDimension(2, h);
        s = typedarray.getColor(1, s);
        setText(typedarray.getString(0));
        q = typedarray.getColor(4, q);
        r = typedarray.getColor(5, r);
        p = typedarray.getColor(9, p);
        t = typedarray.getColor(10, t);
        i = typedarray.getInteger(14, -1);
    }

    static int b(ProgressWheel progresswheel) {
        return progresswheel.H;
    }

    static Handler c(ProgressWheel progresswheel) {
        return progresswheel.I;
    }

    private void d() {
        u.setColor(o);
        u.setAntiAlias(true);
        u.setStyle(android.graphics.Paint.Style.STROKE);
        u.setStrokeWidth(f);
        x.setColor(q);
        x.setAntiAlias(true);
        x.setStyle(android.graphics.Paint.Style.STROKE);
        x.setStrokeWidth(g);
        z.setColor(r);
        z.setAntiAlias(true);
        z.setStyle(android.graphics.Paint.Style.STROKE);
        z.setStrokeWidth(g);
        A.setColor(t);
        A.setAntiAlias(true);
        A.setStyle(android.graphics.Paint.Style.FILL);
        A.setShadowLayer(1.0F, 2.0F, 2.0F, 0x40000000);
        v.setColor(p);
        v.setAntiAlias(true);
        v.setStyle(android.graphics.Paint.Style.FILL);
        w.setColor(o);
        w.setAntiAlias(true);
        w.setStyle(android.graphics.Paint.Style.FILL);
        w.setStrokeWidth(f);
        y.setColor(s);
        y.setStyle(android.graphics.Paint.Style.FILL);
        y.setAntiAlias(true);
        y.setTextSize(h);
    }

    private void e() {
        k = getPaddingTop();
        l = getPaddingBottom();
        m = getPaddingLeft();
        n = getPaddingRight();
        B = new RectF(m, k, getLayoutParams().width - n, getLayoutParams().height - l);
        C = new RectF(m + f, k + f, getLayoutParams().width - n - f, getLayoutParams().height - l - f);
        c = (getLayoutParams().width - n - f) / 2;
        d = (c - f) + 1;
        j = f / 2;
        E = (float)((double)(-C.width() / 2.0F) * Math.sin((double)(D + 270) * 0.017453292519943295D) + (double)(getLayoutParams().width / 2));
        F = (float)((double)(C.height() / 2.0F) * Math.cos((double)(D + 270) * 0.017453292519943295D) + (double)(getLayoutParams().height / 2));
    }

    public void a() {
        I.sendEmptyMessageDelayed(1, 200L);
    }

    public void b() {
        b = true;
        I.sendEmptyMessage(0);
    }

    public boolean c() {
        return b;
    }

    public int getBarColor() {
        return o;
    }

    public int getBarLength() {
        return e;
    }

    public int getBarWidth() {
        return f;
    }

    public int getCircleColor() {
        return p;
    }

    public int getCircleRadius() {
        return d;
    }

    public int getDelayMillis() {
        return H;
    }

    public int getPaddingBottom() {
        return l;
    }

    public int getPaddingLeft() {
        return m;
    }

    public int getPaddingRight() {
        return n;
    }

    public int getPaddingTop() {
        return k;
    }

    public int getRimColor() {
        return q;
    }

    public Shader getRimShader() {
        return x.getShader();
    }

    public int getRimWidth() {
        return g;
    }

    public int getSpinRimColor() {
        return r;
    }

    public int getSpinSpeed() {
        return G;
    }

    public int getTextColor() {
        return s;
    }

    public int getTextSize() {
        return h;
    }

    public void onAttachedToWindow() {
        super.onAttachedToWindow();
        e();
        d();
        invalidate();
    }

    protected void onDetachedFromWindow() {
        invalidate();
        super.onDetachedFromWindow();
    }

    protected void onDraw(Canvas canvas) {
        int i1 = 0;
        super.onDraw(canvas);
        double d1;
        double d4;
        float f1;
        float f4;
        float f6;
        float f8;
        int j1;
        int k1;
        String s1;
        String as[];
        if (c())
            canvas.drawArc(C, 360F, 360F, false, z);
        else
            canvas.drawArc(C, 360F, 360F, false, x);
        if (!b) goto _L2; else goto _L1
_L1:
        if (i != -1) {
            canvas.drawArc(C, a - 90, i, false, u);
            d4 = (a - 90) + i + 270;
            f8 = (float)((double)(-C.width() / 2.0F) * Math.sin((double)((a - 90) + 270) * 0.017453292519943295D) + (double)(getLayoutParams().width / 2));
            f6 = (float)((double)(C.height() / 2.0F) * Math.cos((double)((a - 90) + 270) * 0.017453292519943295D) + (double)(getLayoutParams().height / 2));
            f4 = (float)((double)(-C.width() / 2.0F) * Math.sin(0.017453292519943295D * d4) + (double)(getLayoutParams().width / 2));
            d1 = C.height() / 2.0F;
            f1 = (float)(Math.cos(d4 * 0.017453292519943295D) * d1 + (double)(getLayoutParams().height / 2));
            f1 = (float)Math.sqrt((f1 - f6) * (f1 - f6) + (f4 - f8) * (f4 - f8));
            d1 = (a - 90) + i + (360 - i) / 2 + 270;
            f4 = (float)((double)(-C.width() / 2.0F) * Math.sin(0.017453292519943295D * d1) + (double)(getLayoutParams().width / 2));
            d4 = C.height() / 2.0F;
            canvas.drawCircle(f4, (float)(Math.cos(d1 * 0.017453292519943295D) * d4 + (double)(getLayoutParams().height / 2)), f1, A);
        } else {
            canvas.drawArc(C, a - 90, e, false, u);
            double d5 = (a - 90) + e + 270;
            float f2 = (float)((double)(-C.width() / 2.0F) * Math.sin((double)((a - 90) + 270) * 0.017453292519943295D) + (double)(getLayoutParams().width / 2));
            float f5 = (float)((double)(C.height() / 2.0F) * Math.cos((double)((a - 90) + 270) * 0.017453292519943295D) + (double)(getLayoutParams().height / 2));
            float f9 = (float)((double)(-C.width() / 2.0F) * Math.sin(0.017453292519943295D * d5) + (double)(getLayoutParams().width / 2));
            double d2 = C.height() / 2.0F;
            float f7 = (float)(Math.cos(d5 * 0.017453292519943295D) * d2 + (double)(getLayoutParams().height / 2));
            f5 = (float)Math.sqrt((f7 - f5) * (f7 - f5) + (f9 - f2) * (f9 - f2));
            d2 = (a - 90) + e + (360 - e) / 2 + 270;
            f2 = (float)((double)(-C.width() / 2.0F) * Math.sin(0.017453292519943295D * d2) + (double)(getLayoutParams().width / 2));
            d5 = C.height() / 2.0F;
            canvas.drawCircle(f2, (float)(Math.cos(d2 * 0.017453292519943295D) * d5 + (double)(getLayoutParams().height / 2)), f5, A);
        }
_L4:
        canvas.drawCircle(C.width() / 2.0F + (float)g + (float)m, C.height() / 2.0F + (float)g + (float)k, d, v);
        as = K;
        k1 = as.length;
        j1 = 0;
        for (; i1 < k1; i1++) {
            s1 = as[i1];
            f1 = y.measureText(s1) / 2.0F;
            canvas.drawText(s1, (float)(getWidth() / 2) - f1, (getHeight() / 2 + h * j1) - (K.length - 1) * (h / 2), y);
            j1++;
        }

        break; /* Loop/switch isn't completed */
_L2:
        canvas.drawArc(C, D, a, false, u);
        double d6 = a + D + 270;
        if (a != 0) {
            canvas.drawCircle(E, F, j, w);
            float f3 = (float)((double)(-C.width() / 2.0F) * Math.sin(0.017453292519943295D * d6) + (double)(getLayoutParams().width / 2));
            double d3 = C.height() / 2.0F;
            canvas.drawCircle(f3, (float)(Math.cos(d6 * 0.017453292519943295D) * d3 + (double)(getLayoutParams().height / 2)), j, w);
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void setBarColor(int i1) {
        o = i1;
    }

    public void setBarLength(int i1) {
        e = i1;
    }

    public void setBarWidth(int i1) {
        f = i1;
    }

    public void setCircleColor(int i1) {
        p = i1;
    }

    public void setCircleRadius(int i1) {
        d = i1;
    }

    public void setDelayMillis(int i1) {
        H = i1;
    }

    public void setPaddingBottom(int i1) {
        l = i1;
    }

    public void setPaddingLeft(int i1) {
        m = i1;
    }

    public void setPaddingRight(int i1) {
        n = i1;
    }

    public void setPaddingTop(int i1) {
        k = i1;
    }

    public void setProgress(int i1) {
        b = false;
        a = i1;
        I.sendEmptyMessage(0);
    }

    public void setRimColor(int i1) {
        q = i1;
    }

    public void setRimShader(Shader shader) {
        x.setShader(shader);
    }

    public void setRimWidth(int i1) {
        g = i1;
    }

    public void setSpinRimColor(int i1) {
        r = i1;
    }

    public void setSpinSpeed(int i1) {
        G = i1;
    }

    public void setText(String s1) {
        J = s1;
        K = J.split("\n");
    }

    public void setTextColor(int i1) {
        s = i1;
    }

    public void setTextSize(int i1) {
        h = i1;
    }
}
