// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package cn.darkal.networkdiagnosis.Activity;

import android.content.Intent;
import android.os.Bundle;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.view.*;
import android.widget.LinearLayout;
import android.widget.TextView;
import butterknife.ButterKnife;
import cn.darkal.networkdiagnosis.SysApplication;
import java.util.Iterator;
import java.util.List;
import net.lightbody.bmp.BrowserMobProxy;
import net.lightbody.bmp.core.har.*;

// Referenced classes of package cn.darkal.networkdiagnosis.Activity:
//            JsonPreviewActivity

public class HarDetailActivity extends AppCompatActivity {

    LinearLayout linearLayout;

    public HarDetailActivity() {
    }

    private void a() {
        setTitle("\u6570\u636E\u8BE6\u60C5");
        ActionBar actionbar = getSupportActionBar();
        if (actionbar != null)
            actionbar.setDisplayHomeAsUpEnabled(true);
    }

    public void a(int i) {
        Object obj1 = (HarEntry)((SysApplication)getApplication()).c.getHar().getLog().getEntries().get(i);
        Object obj = ((HarEntry) (obj1)).getRequest();
        HarResponse harresponse = ((HarEntry) (obj1)).getResponse();
        a("Overview");
        a("URL", ((HarRequest) (obj)).getUrl());
        a("Method", ((HarRequest) (obj)).getMethod());
        a("Code", (new StringBuilder()).append(harresponse.getStatus()).append("").toString());
        a("TotalTime", (new StringBuilder()).append(((HarEntry) (obj1)).getTime()).append("ms").toString());
        a("Size", (new StringBuilder()).append(harresponse.getBodySize()).append("Bytes").toString());
        if (((HarRequest) (obj)).getQueryString().size() > 0) {
            a("Request Query");
            HarNameValuePair harnamevaluepair;
            for (obj1 = ((HarRequest) (obj)).getQueryString().iterator(); ((Iterator) (obj1)).hasNext(); a(harnamevaluepair.getName(), harnamevaluepair.getDecodeValue()))
                harnamevaluepair = (HarNameValuePair)((Iterator) (obj1)).next();

        }
        a("Request Header");
        obj1 = ((HarRequest) (obj)).getHeaders().iterator();
label0:
        do {
            Object obj3;
label1:
            {
                if (((Iterator) (obj1)).hasNext()) {
                    obj3 = (HarNameValuePair)((Iterator) (obj1)).next();
                    if (!((HarNameValuePair) (obj3)).getName().equals("Cookie"))
                        break label1;
                }
                if (((HarRequest) (obj)).getCookies().size() > 0) {
                    a("Request Cookies");
                    for (Iterator iterator1 = ((HarRequest) (obj)).getCookies().iterator(); iterator1.hasNext(); a(((HarCookie) (obj3)).getName(), ((HarCookie) (obj3)).getDecodeValue()))
                        obj3 = (HarCookie)iterator1.next();

                }
                break label0;
            }
            a(((HarNameValuePair) (obj3)).getName(), ((HarNameValuePair) (obj3)).getDecodeValue());
        } while (true);
        if (((HarRequest) (obj)).getPostData() != null) {
            a("Request Content");
            a("PostData", ((HarRequest) (obj)).getPostData().getText());
        }
        a("Response Header");
        obj = harresponse.getHeaders().iterator();
label2:
        do {
            Object obj2;
label3:
            {
                if (((Iterator) (obj)).hasNext()) {
                    obj2 = (HarNameValuePair)((Iterator) (obj)).next();
                    if (!((HarNameValuePair) (obj2)).getName().equals("Cookie"))
                        break label3;
                }
                if (harresponse.getCookies().size() > 0) {
                    a("Response Cookies");
                    for (Iterator iterator = harresponse.getCookies().iterator(); iterator.hasNext(); a(((HarCookie) (obj2)).getName(), ((HarCookie) (obj2)).getDecodeValue()))
                        obj2 = (HarCookie)iterator.next();

                }
                break label2;
            }
            a(((HarNameValuePair) (obj2)).getName(), ((HarNameValuePair) (obj2)).getDecodeValue());
        } while (true);
        if (harresponse.getRedirectURL() != null && harresponse.getRedirectURL().length() > 0 || harresponse.getContent().getText() != null && harresponse.getContent().getText().length() > 0)
            a("Response Content");
        if (harresponse.getRedirectURL() != null && harresponse.getRedirectURL().length() > 0)
            a("RedirectURL", harresponse.getRedirectURL());
        if (harresponse.getContent().getText() != null && harresponse.getContent().getText().length() > 0)
            a("Content", harresponse.getContent().getText(), i);
    }

    public void a(String s) {
        View view = LayoutInflater.from(this).inflate(0x7f040035, null);
        ((TextView)view.findViewById(0x7f0f00b6)).setText(s);
        linearLayout.addView(view);
    }

    public void a(String s, String s1) {
        int i = 50;
        View view = LayoutInflater.from(this).inflate(0x7f040036, null);
        ((TextView)view.findViewById(0x7f0f00b7)).setText(s);
        s = (TextView)view.findViewById(0x7f0f00b8);
        if (TextUtils.isEmpty(s1)) {
            s.setText("");
        } else {
            if (s1.length() <= 50)
                i = s1.length();
            s.setText(s1.substring(0, i));
        }
        view.setOnClickListener(new android.view.View.OnClickListener(s1) {

            final String a;
            final HarDetailActivity b;

            public void onClick(View view1) {
                if (a != null && a.length() > 10) {
                    view1 = LayoutInflater.from(b).inflate(0x7f040022, null);
                    ((TextView)view1.findViewById(0x7f0f009e)).setText(a);
                    android.support.v7.app.AlertDialog.Builder builder = new android.support.v7.app.AlertDialog.Builder(b);
                    builder.setCancelable(true);
                    builder.setView(view1);
                    builder.setPositiveButton("\u786E\u8BA4", null);
                    builder.show();
                }
            }

             {
                b = HarDetailActivity.this;
                a = s;
                super();
            }
        }
);
        linearLayout.addView(view);
    }

    public void a(String s, String s1, int i) {
        int j = 50;
        View view = LayoutInflater.from(this).inflate(0x7f040036, null);
        ((TextView)view.findViewById(0x7f0f00b7)).setText(s);
        TextView textview = (TextView)view.findViewById(0x7f0f00b8);
        if (TextUtils.isEmpty(s1)) {
            textview.setText("");
        } else {
            if (s1.length() <= 50)
                j = s1.length();
            textview.setText(s1.substring(0, j));
        }
        if (s.equals("Content"))
            view.setOnClickListener(new android.view.View.OnClickListener(s1, i) {

                final String a;
                final int b;
                final HarDetailActivity c;

                public void onClick(View view1) {
                    if (a != null && a.length() > 10) {
                        view1 = new Intent(c, cn/darkal/networkdiagnosis/Activity/JsonPreviewActivity);
                        view1.putExtra("pos", b);
                        c.startActivity(view1);
                    }
                }

             {
                c = HarDetailActivity.this;
                a = s;
                b = i;
                super();
            }
            }
);
        linearLayout.addView(view);
    }

    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        setContentView(0x7f04001e);
        ButterKnife.bind(this);
        setSupportActionBar((Toolbar)findViewById(0x7f0f008c));
        a();
        a(getIntent().getIntExtra("pos", -1));
_L1:
        return;
        bundle;
        bundle.printStackTrace();
        finish();
          goto _L1
    }

    public boolean onOptionsItemSelected(MenuItem menuitem) {
        boolean flag;
        if (menuitem.getItemId() == 0x102002c) {
            finish();
            flag = true;
        } else {
            flag = super.onOptionsItemSelected(menuitem);
        }
        return flag;
    }
}
