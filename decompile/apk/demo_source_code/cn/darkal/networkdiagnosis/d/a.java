// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package cn.darkal.networkdiagnosis.d;

import java.util.Calendar;
import java.util.TimeZone;

public class a {

    private static final byte a[] = a();

    public static String a(String s, Calendar calendar) {
        int i = 0;
        int k = s.length();
        StringBuilder stringbuilder = new StringBuilder();
label0:
        do {
            while (i < k)  {
                int j = i + 1;
                char c1 = s.charAt(i);
                if (c1 != '%') {
                    stringbuilder.append(c1);
                    i = j;
                } else {
                    i = j + 1;
                    switch (s.charAt(j)) {
                    default:
                        throw new InternalError();

                    case 89: // 'Y'
                        a(calendar, stringbuilder);
                        break;

                    case 77: // 'M'
                        b(calendar, stringbuilder);
                        break;

                    case 68: // 'D'
                        c(calendar, stringbuilder);
                        break;

                    case 104: // 'h'
                        d(calendar, stringbuilder);
                        break;

                    case 109: // 'm'
                        e(calendar, stringbuilder);
                        break;

                    case 115: // 's'
                        f(calendar, stringbuilder);
                        break;

                    case 122: // 'z'
                        g(calendar, stringbuilder);
                        break;
                    }
                    continue label0;
                }
            }
            return stringbuilder.toString();
        } while (true);
    }

    private static void a(int i, StringBuilder stringbuilder) {
        if (i < 10)
            stringbuilder.append('0');
        stringbuilder.append(i);
    }

    private static void a(Calendar calendar, StringBuilder stringbuilder) {
        int i = calendar.get(1);
        if (i <= 0)
            calendar = Integer.toString(1 - i);
        else
            calendar = Integer.toString(i);
        for (; calendar.length() < 4; calendar = (new StringBuilder()).append('0').append(calendar).toString());
        Object obj = calendar;
        if (i <= 0)
            obj = (new StringBuilder()).append('-').append(calendar).toString();
        stringbuilder.append(((String) (obj)));
    }

    private static byte[] a() {
        byte abyte0[] = new byte[128];
        for (int i = 0; i < 128; i++)
            abyte0[i] = -1;

        for (int j = 65; j <= 90; j++)
            abyte0[j] = (byte)(j - 65);

        for (int k = 97; k <= 122; k++)
            abyte0[k] = (byte)((k - 97) + 26);

        for (int l = 48; l <= 57; l++)
            abyte0[l] = (byte)((l - 48) + 52);

        abyte0[43] = 62;
        abyte0[47] = 63;
        abyte0[61] = 127;
        return abyte0;
    }

    public static byte[] a(String s) {
        int k1 = b(s);
        byte abyte0[] = new byte[k1];
        int j1 = s.length();
        byte abyte1[] = new byte[4];
        int j = 0;
        int k = 0;
        int i = 0;
        while (k < j1)  {
            int l = s.charAt(k);
            byte byte0 = a[l];
            if (byte0 != -1) {
                l = j + 1;
                abyte1[j] = byte0;
                j = l;
            }
            if (j == 4) {
                j = i + 1;
                abyte0[i] = (byte)(abyte1[0] << 2 | abyte1[1] >> 4);
                if (abyte1[2] != 127) {
                    i = j + 1;
                    abyte0[j] = (byte)(abyte1[1] << 4 | abyte1[2] >> 2);
                    j = i;
                }
                i = j;
                if (abyte1[3] != 127) {
                    abyte0[j] = (byte)(abyte1[2] << 6 | abyte1[3]);
                    i = j + 1;
                }
                l = 0;
                j = i;
                i = l;
            } else {
                int i1 = i;
                i = j;
                j = i1;
            }
            l = k + 1;
            k = j;
            j = i;
            i = k;
            k = l;
        }
        if (k1 == i) {
            s = abyte0;
        } else {
            s = new byte[i];
            System.arraycopy(abyte0, 0, s, 0, i);
        }
        return s;
    }

    private static int b(String s) {
        int i;
        int j;
        byte byte0;
        j = s.length();
        for (i = j - 1; i >= 0; i--) {
            byte0 = a[s.charAt(i)];
            if (byte0 != 127)
                break MISSING_BLOCK_LABEL_35;
        }

          goto _L1
        if (byte0 != -1) goto _L1; else goto _L2
_L2:
        i = (s.length() / 4) * 3;
_L4:
        return i;
_L1:
        i = j - (i + 1);
        if (i > 2)
            i = (s.length() / 4) * 3;
        else
            i = (s.length() / 4) * 3 - i;
        if (true) goto _L4; else goto _L3
_L3:
    }

    private static void b(Calendar calendar, StringBuilder stringbuilder) {
        a(calendar.get(2) + 1, stringbuilder);
    }

    private static void c(Calendar calendar, StringBuilder stringbuilder) {
        a(calendar.get(5), stringbuilder);
    }

    private static void d(Calendar calendar, StringBuilder stringbuilder) {
        a(calendar.get(11), stringbuilder);
    }

    private static void e(Calendar calendar, StringBuilder stringbuilder) {
        a(calendar.get(12), stringbuilder);
    }

    private static void f(Calendar calendar, StringBuilder stringbuilder) {
        a(calendar.get(13), stringbuilder);
        if (calendar.isSet(14)) {
            int i = calendar.get(14);
            if (i != 0) {
                for (calendar = Integer.toString(i); calendar.length() < 3; calendar = (new StringBuilder()).append('0').append(calendar).toString());
                stringbuilder.append('.');
                stringbuilder.append(calendar);
            }
        }
    }

    private static void g(Calendar calendar, StringBuilder stringbuilder) {
        TimeZone timezone = calendar.getTimeZone();
        if (timezone != null) {
            int i;
            if (timezone.inDaylightTime(calendar.getTime())) {
                int j = timezone.getRawOffset();
                if (timezone.useDaylightTime())
                    i = 0x36ee80;
                else
                    i = 0;
                i += j;
            } else {
                i = timezone.getRawOffset();
            }
            if (i == 0) {
                stringbuilder.append('Z');
            } else {
                if (i >= 0) {
                    stringbuilder.append('+');
                } else {
                    stringbuilder.append('-');
                    i *= -1;
                }
                i /= 60000;
                a(i / 60, stringbuilder);
                stringbuilder.append(':');
                a(i % 60, stringbuilder);
            }
        }
    }

}
