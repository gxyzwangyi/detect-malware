// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package cn.darkal.networkdiagnosis.d;

import java.io.*;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

public class g {

    public static void a(String s, String s1) {
        File file1;
        File file = JVM INSTR new #10  <Class File>;
        file.File(s1);
        file1 = JVM INSTR new #10  <Class File>;
        file1.File(s);
        s1 = JVM INSTR new #16  <Class ZipOutputStream>;
        s = JVM INSTR new #18  <Class FileOutputStream>;
        s.FileOutputStream(file);
        s1.ZipOutputStream(s);
        s = s1;
        if (!file1.isFile()) goto _L2; else goto _L1
_L1:
        s = s1;
        a(((ZipOutputStream) (s1)), file1, "");
_L4:
        if (s1 == null)
            break MISSING_BLOCK_LABEL_66;
        s1.close();
_L6:
        return;
_L2:
        s = s1;
        File afile[] = file1.listFiles();
        int i = 0;
_L5:
        s = s1;
        if (i >= afile.length) goto _L4; else goto _L3
_L3:
        s = s1;
        a(((ZipOutputStream) (s1)), afile[i], "");
        i++;
          goto _L5
        s;
        s.printStackTrace();
          goto _L6
        IOException ioexception;
        ioexception;
        s1 = null;
_L9:
        s = s1;
        ioexception.printStackTrace();
        if (s1 != null)
            try {
                s1.close();
            }
            // Misplaced declaration of an exception variable
            catch (String s) {
                s.printStackTrace();
            }
          goto _L6
        s1;
        s = null;
_L8:
        if (s != null)
            try {
                s.close();
            }
            // Misplaced declaration of an exception variable
            catch (String s) {
                s.printStackTrace();
            }
        throw s1;
        s1;
        if (true) goto _L8; else goto _L7
_L7:
        ioexception;
          goto _L9
    }

    private static void a(ZipOutputStream zipoutputstream, File file, String s) {
        int i;
        Object obj;
        i = 0;
        obj = null;
        if (file.isDirectory()) goto _L2; else goto _L1
_L1:
        Object obj1;
        byte abyte0[];
        abyte0 = new byte[4096];
        obj1 = JVM INSTR new #50  <Class FileInputStream>;
        ((FileInputStream) (obj1)).FileInputStream(file);
        obj = obj1;
        ZipEntry zipentry = JVM INSTR new #53  <Class ZipEntry>;
        obj = obj1;
        StringBuilder stringbuilder = JVM INSTR new #55  <Class StringBuilder>;
        obj = obj1;
        stringbuilder.StringBuilder();
        obj = obj1;
        zipentry.ZipEntry(stringbuilder.append(s).append(file.getName()).toString());
        obj = obj1;
        zipoutputstream.putNextEntry(zipentry);
_L4:
        obj = obj1;
        i = ((FileInputStream) (obj1)).read(abyte0);
        if (i == -1)
            break; /* Loop/switch isn't completed */
        obj = obj1;
        zipoutputstream.write(abyte0, 0, i);
        if (true) goto _L4; else goto _L3
        zipoutputstream;
_L9:
        obj = obj1;
        zipoutputstream.printStackTrace();
        if (obj1 == null)
            break MISSING_BLOCK_LABEL_143;
        ((FileInputStream) (obj1)).close();
_L5:
        return;
_L3:
        obj = obj1;
        zipoutputstream.closeEntry();
_L10:
        if (obj1 != null)
            try {
                ((FileInputStream) (obj1)).close();
            }
            // Misplaced declaration of an exception variable
            catch (ZipOutputStream zipoutputstream) {
                zipoutputstream.printStackTrace();
            }
          goto _L5
_L2:
        obj1 = file.listFiles();
_L6:
        if (i >= obj1.length)
            break MISSING_BLOCK_LABEL_275;
        File file1 = obj1[i];
        StringBuilder stringbuilder1 = JVM INSTR new #55  <Class StringBuilder>;
        stringbuilder1.StringBuilder();
        a(zipoutputstream, file1, stringbuilder1.append(s).append(file.getName()).append("/").toString());
        i++;
          goto _L6
        zipoutputstream;
        zipoutputstream.printStackTrace();
          goto _L5
        zipoutputstream;
_L8:
        if (obj != null)
            try {
                ((FileInputStream) (obj)).close();
            }
            // Misplaced declaration of an exception variable
            catch (File file) {
                file.printStackTrace();
            }
        throw zipoutputstream;
        zipoutputstream;
        if (true) goto _L8; else goto _L7
_L7:
        zipoutputstream;
        obj1 = null;
          goto _L9
        obj1 = null;
          goto _L10
    }
}
