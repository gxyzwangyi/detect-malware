// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v7.widget;

import java.util.*;

// Referenced classes of package android.support.v7.widget:
//            OpReorderer

class AdapterHelper
    implements OpReorderer.Callback {
    static interface Callback {

        public abstract RecyclerView.ViewHolder findViewHolder(int i);

        public abstract void markViewHoldersUpdated(int i, int j, Object obj);

        public abstract void offsetPositionsForAdd(int i, int j);

        public abstract void offsetPositionsForMove(int i, int j);

        public abstract void offsetPositionsForRemovingInvisible(int i, int j);

        public abstract void offsetPositionsForRemovingLaidOutOrNewView(int i, int j);

        public abstract void onDispatchFirstPass(UpdateOp updateop);

        public abstract void onDispatchSecondPass(UpdateOp updateop);
    }

    static class UpdateOp {

        static final int ADD = 1;
        static final int MOVE = 8;
        static final int POOL_SIZE = 30;
        static final int REMOVE = 2;
        static final int UPDATE = 4;
        int cmd;
        int itemCount;
        Object payload;
        int positionStart;

        String cmdToString() {
            cmd;
            JVM INSTR tableswitch 1 8: default 52
        //                       1 57
        //                       2 63
        //                       3 52
        //                       4 69
        //                       5 52
        //                       6 52
        //                       7 52
        //                       8 75;
               goto _L1 _L2 _L3 _L1 _L4 _L1 _L1 _L1 _L5
_L1:
            String s = "??";
_L7:
            return s;
_L2:
            s = "add";
            continue; /* Loop/switch isn't completed */
_L3:
            s = "rm";
            continue; /* Loop/switch isn't completed */
_L4:
            s = "up";
            continue; /* Loop/switch isn't completed */
_L5:
            s = "mv";
            if (true) goto _L7; else goto _L6
_L6:
        }

        public boolean equals(Object obj) {
            boolean flag1 = true;
            if (this != obj) goto _L2; else goto _L1
_L1:
            boolean flag = flag1;
_L4:
            return flag;
_L2:
            if (obj == null || getClass() != obj.getClass()) {
                flag = false;
                continue; /* Loop/switch isn't completed */
            }
            obj = (UpdateOp)obj;
            if (cmd != ((UpdateOp) (obj)).cmd) {
                flag = false;
                continue; /* Loop/switch isn't completed */
            }
            if (cmd == 8 && Math.abs(itemCount - positionStart) == 1 && itemCount == ((UpdateOp) (obj)).positionStart) {
                flag = flag1;
                if (positionStart == ((UpdateOp) (obj)).itemCount)
                    continue; /* Loop/switch isn't completed */
            }
            if (itemCount != ((UpdateOp) (obj)).itemCount)
                flag = false;
            else
            if (positionStart != ((UpdateOp) (obj)).positionStart)
                flag = false;
            else
            if (payload != null) {
                flag = flag1;
                if (!payload.equals(((UpdateOp) (obj)).payload))
                    flag = false;
            } else {
                flag = flag1;
                if (((UpdateOp) (obj)).payload != null)
                    flag = false;
            }
            if (true) goto _L4; else goto _L3
_L3:
        }

        public int hashCode() {
            return (cmd * 31 + positionStart) * 31 + itemCount;
        }

        public String toString() {
            return (new StringBuilder()).append(Integer.toHexString(System.identityHashCode(this))).append("[").append(cmdToString()).append(",s:").append(positionStart).append("c:").append(itemCount).append(",p:").append(payload).append("]").toString();
        }

        UpdateOp(int i, int j, int k, Object obj) {
            cmd = i;
            positionStart = j;
            itemCount = k;
            payload = obj;
        }
    }


    private static final boolean DEBUG = false;
    static final int POSITION_TYPE_INVISIBLE = 0;
    static final int POSITION_TYPE_NEW_OR_LAID_OUT = 1;
    private static final String TAG = "AHT";
    final Callback mCallback;
    final boolean mDisableRecycler;
    private int mExistingUpdateTypes;
    Runnable mOnItemProcessedCallback;
    final OpReorderer mOpReorderer;
    final ArrayList mPendingUpdates;
    final ArrayList mPostponedList;
    private android.support.v4.util.Pools.Pool mUpdateOpPool;

    AdapterHelper(Callback callback) {
        AdapterHelper(callback, false);
    }

    AdapterHelper(Callback callback, boolean flag) {
        mUpdateOpPool = new SimplePool(30);
        mPendingUpdates = new ArrayList();
        mPostponedList = new ArrayList();
        mExistingUpdateTypes = 0;
        mCallback = callback;
        mDisableRecycler = flag;
        mOpReorderer = new OpReorderer(this);
    }

    private void applyAdd(UpdateOp updateop) {
        postponeAndUpdateViewHolders(updateop);
    }

    private void applyMove(UpdateOp updateop) {
        postponeAndUpdateViewHolders(updateop);
    }

    private void applyRemove(UpdateOp updateop) {
        int i1 = updateop.positionStart;
        int j = updateop.positionStart + updateop.itemCount;
        byte byte0 = -1;
        int i = updateop.positionStart;
        int l = 0;
        while (i < j)  {
            if (mCallback.findViewHolder(i) != null || canFindInPreLayout(i)) {
                int k;
                boolean flag;
                UpdateOp updateop1;
                if (byte0 == 0) {
                    dispatchAndUpdateViewHolders(obtainUpdateOp(2, i1, l, null));
                    k = 1;
                } else {
                    k = 0;
                }
                byte0 = 1;
            } else {
                if (byte0 == 1) {
                    postponeAndUpdateViewHolders(obtainUpdateOp(2, i1, l, null));
                    byte0 = 1;
                } else {
                    byte0 = 0;
                }
                flag = false;
                k = byte0;
                byte0 = flag;
            }
            if (k != 0) {
                k = i - l;
                i = j - l;
                j = 1;
            } else {
                l++;
                k = i;
                i = j;
                j = l;
            }
            l = j;
            j = i;
            i = k + 1;
        }
        updateop1 = updateop;
        if (l != updateop.itemCount) {
            recycleUpdateOp(updateop);
            updateop1 = obtainUpdateOp(2, i1, l, null);
        }
        if (byte0 == 0)
            dispatchAndUpdateViewHolders(updateop1);
        else
            postponeAndUpdateViewHolders(updateop1);
    }

    private void applyUpdate(UpdateOp updateop) {
        int j = updateop.positionStart;
        int j2 = updateop.positionStart;
        int i2 = updateop.itemCount;
        int i = updateop.positionStart;
        int l1 = -1;
        int k = 0;
        while (i < j2 + i2)  {
            int l;
            int j1;
            if (mCallback.findViewHolder(i) != null || canFindInPreLayout(i)) {
                l = k;
                int i1 = j;
                if (l1 == 0) {
                    dispatchAndUpdateViewHolders(obtainUpdateOp(4, j, k, updateop.payload));
                    l = 0;
                    i1 = i;
                }
                k = i1;
                j = 1;
            } else {
                l = k;
                int k1 = j;
                if (l1 == 1) {
                    postponeAndUpdateViewHolders(obtainUpdateOp(4, j, k, updateop.payload));
                    l = 0;
                    k1 = i;
                }
                k = k1;
                j = 0;
            }
            j1 = i + 1;
            l++;
            i = k;
            l1 = j;
            k = l;
            j = i;
            i = j1;
        }
        Object obj = updateop;
        if (k != updateop.itemCount) {
            obj = updateop.payload;
            recycleUpdateOp(updateop);
            obj = obtainUpdateOp(4, j, k, obj);
        }
        if (l1 == 0)
            dispatchAndUpdateViewHolders(((UpdateOp) (obj)));
        else
            postponeAndUpdateViewHolders(((UpdateOp) (obj)));
    }

    private boolean canFindInPreLayout(int i) {
        int j;
        int l;
        l = mPostponedList.size();
        j = 0;
_L7:
        if (j >= l) goto _L2; else goto _L1
_L1:
        UpdateOp updateop = (UpdateOp)mPostponedList.get(j);
        if (updateop.cmd != 8) goto _L4; else goto _L3
_L3:
        boolean flag;
        if (findPositionOffset(updateop.itemCount, j + 1) != i)
            continue; /* Loop/switch isn't completed */
        flag = true;
_L5:
        return flag;
_L4:
        int k;
        int i1;
        int j1;
        if (updateop.cmd != 1)
            continue; /* Loop/switch isn't completed */
        j1 = updateop.positionStart;
        i1 = updateop.itemCount;
        k = updateop.positionStart;
_L6:
label0:
        {
            if (k >= j1 + i1)
                continue; /* Loop/switch isn't completed */
            if (findPositionOffset(k, j + 1) != i)
                break label0;
            flag = true;
        }
          goto _L5
        k++;
          goto _L6
        j++;
          goto _L7
_L2:
        flag = false;
          goto _L5
    }

    private void dispatchAndUpdateViewHolders(UpdateOp updateop) {
        int j;
        int j1;
        if (updateop.cmd == 1 || updateop.cmd == 8)
            throw new IllegalArgumentException("should not dispatch add or move for pre layout");
        j1 = updatePositionWithPostponed(updateop.positionStart, updateop.cmd);
        j = updateop.positionStart;
        updateop.cmd;
        JVM INSTR tableswitch 2 4: default 76
    //                   2 192
    //                   3 76
    //                   4 103;
           goto _L1 _L2 _L1 _L3
_L1:
        throw new IllegalArgumentException((new StringBuilder()).append("op should be remove or update.").append(updateop).toString());
_L3:
        int k = 1;
_L8:
        int l;
        int i1;
        i1 = 1;
        l = 1;
_L7:
        int k1;
        if (l >= updateop.itemCount)
            break MISSING_BLOCK_LABEL_295;
        k1 = updatePositionWithPostponed(updateop.positionStart + k * l, updateop.cmd);
        updateop.cmd;
        JVM INSTR tableswitch 2 4: default 172
    //                   2 217
    //                   3 172
    //                   4 198;
           goto _L4 _L5 _L4 _L6
_L4:
        int i = 0;
_L9:
        if (i != 0) {
            i = i1 + 1;
        } else {
            UpdateOp updateop1 = obtainUpdateOp(updateop.cmd, j1, i1, updateop.payload);
            dispatchFirstPassAndUpdateViewHolders(updateop1, j);
            recycleUpdateOp(updateop1);
            i = j;
            if (updateop.cmd == 4)
                i = j + i1;
            i1 = 1;
            j1 = k1;
            j = i;
            i = i1;
        }
        l++;
        i1 = i;
          goto _L7
_L2:
        k = 0;
          goto _L8
_L6:
        if (k1 == j1 + 1)
            i = 1;
        else
            i = 0;
          goto _L9
_L5:
        if (k1 == j1)
            i = 1;
        else
            i = 0;
          goto _L9
        Object obj = updateop.payload;
        recycleUpdateOp(updateop);
        if (i1 > 0) {
            updateop = obtainUpdateOp(updateop.cmd, j1, i1, obj);
            dispatchFirstPassAndUpdateViewHolders(updateop, j);
            recycleUpdateOp(updateop);
        }
        return;
          goto _L7
    }

    private void postponeAndUpdateViewHolders(UpdateOp updateop) {
        mPostponedList.add(updateop);
        updateop.cmd;
        JVM INSTR tableswitch 1 8: default 60
    //                   1 87
    //                   2 125
    //                   3 60
    //                   4 145
    //                   5 60
    //                   6 60
    //                   7 60
    //                   8 105;
           goto _L1 _L2 _L3 _L1 _L4 _L1 _L1 _L1 _L5
_L1:
        throw new IllegalArgumentException((new StringBuilder()).append("Unknown update op type for ").append(updateop).toString());
_L2:
        mCallback.offsetPositionsForAdd(updateop.positionStart, updateop.itemCount);
_L7:
        return;
_L5:
        mCallback.offsetPositionsForMove(updateop.positionStart, updateop.itemCount);
        continue; /* Loop/switch isn't completed */
_L3:
        mCallback.offsetPositionsForRemovingLaidOutOrNewView(updateop.positionStart, updateop.itemCount);
        continue; /* Loop/switch isn't completed */
_L4:
        mCallback.markViewHoldersUpdated(updateop.positionStart, updateop.itemCount, updateop.payload);
        if (true) goto _L7; else goto _L6
_L6:
    }

    private int updatePositionWithPostponed(int i, int j) {
        int l = mPostponedList.size() - 1;
        do {
            if (l >= 0) {
                UpdateOp updateop = (UpdateOp)mPostponedList.get(l);
                int k;
                if (updateop.cmd == 8) {
                    int i1;
                    if (updateop.positionStart < updateop.itemCount) {
                        k = updateop.positionStart;
                        i1 = updateop.itemCount;
                    } else {
                        k = updateop.itemCount;
                        i1 = updateop.positionStart;
                    }
                    if (i >= k && i <= i1) {
                        if (k == updateop.positionStart) {
                            if (j == 1)
                                updateop.itemCount = updateop.itemCount + 1;
                            else
                            if (j == 2)
                                updateop.itemCount = updateop.itemCount - 1;
                            i++;
                        } else {
                            if (j == 1)
                                updateop.positionStart = updateop.positionStart + 1;
                            else
                            if (j == 2)
                                updateop.positionStart = updateop.positionStart - 1;
                            i--;
                        }
                    } else
                    if (i < updateop.positionStart)
                        if (j == 1) {
                            updateop.positionStart = updateop.positionStart + 1;
                            updateop.itemCount = updateop.itemCount + 1;
                        } else
                        if (j == 2) {
                            updateop.positionStart = updateop.positionStart - 1;
                            updateop.itemCount = updateop.itemCount - 1;
                        }
                    k = i;
                } else
                if (updateop.positionStart <= i) {
                    if (updateop.cmd == 1) {
                        k = i - updateop.itemCount;
                    } else {
                        k = i;
                        if (updateop.cmd == 2)
                            k = i + updateop.itemCount;
                    }
                } else
                if (j == 1) {
                    updateop.positionStart = updateop.positionStart + 1;
                    k = i;
                } else {
                    k = i;
                    if (j == 2) {
                        updateop.positionStart = updateop.positionStart - 1;
                        k = i;
                    }
                }
                l--;
                i = k;
                continue;
            }
            j = mPostponedList.size() - 1;
            while (j >= 0)  {
                UpdateOp updateop1 = (UpdateOp)mPostponedList.get(j);
                if (updateop1.cmd == 8) {
                    if (updateop1.itemCount == updateop1.positionStart || updateop1.itemCount < 0) {
                        mPostponedList.remove(j);
                        recycleUpdateOp(updateop1);
                    }
                } else
                if (updateop1.itemCount <= 0) {
                    mPostponedList.remove(j);
                    recycleUpdateOp(updateop1);
                }
                j--;
            }
            return i;
        } while (true);
    }

    transient AdapterHelper addUpdateOp(UpdateOp aupdateop[]) {
        Collections.addAll(mPendingUpdates, aupdateop);
        return this;
    }

    public int applyPendingUpdatesToPosition(int i) {
        int j;
        int l;
        int i1;
        i1 = mPendingUpdates.size();
        l = 0;
        j = i;
_L7:
        i = j;
        if (l >= i1) goto _L2; else goto _L1
_L1:
        UpdateOp updateop = (UpdateOp)mPendingUpdates.get(l);
        updateop.cmd;
        JVM INSTR lookupswitch 3: default 76
    //                   1: 86
    //                   2: 108
    //                   8: 149;
           goto _L3 _L4 _L5 _L6
_L6:
        break MISSING_BLOCK_LABEL_149;
_L3:
        i = j;
_L8:
        l++;
        j = i;
          goto _L7
_L4:
        i = j;
        if (updateop.positionStart <= j)
            i = j + updateop.itemCount;
          goto _L8
_L5:
        i = j;
        if (updateop.positionStart > j) goto _L8; else goto _L9
_L9:
        if (updateop.positionStart + updateop.itemCount <= j) goto _L11; else goto _L10
_L10:
        i = -1;
_L2:
        return i;
_L11:
        i = j - updateop.itemCount;
          goto _L8
        if (updateop.positionStart == j) {
            i = updateop.itemCount;
        } else {
            int k = j;
            if (updateop.positionStart < j)
                k = j - 1;
            i = k;
            if (updateop.itemCount <= k)
                i = k + 1;
        }
          goto _L8
    }

    void consumePostponedUpdates() {
        int j = mPostponedList.size();
        for (int i = 0; i < j; i++)
            mCallback.onDispatchSecondPass((UpdateOp)mPostponedList.get(i));

        recycleUpdateOpsAndClearList(mPostponedList);
        mExistingUpdateTypes = 0;
    }

    void consumeUpdatesInOnePass() {
        int i;
        int j;
        consumePostponedUpdates();
        j = mPendingUpdates.size();
        i = 0;
_L7:
        UpdateOp updateop;
        if (i >= j)
            break MISSING_BLOCK_LABEL_226;
        updateop = (UpdateOp)mPendingUpdates.get(i);
        updateop.cmd;
        JVM INSTR tableswitch 1 8: default 80
    //                   1 102
    //                   2 132
    //                   3 80
    //                   4 162
    //                   5 80
    //                   6 80
    //                   7 80
    //                   8 196;
           goto _L1 _L2 _L3 _L1 _L4 _L1 _L1 _L1 _L5
_L5:
        break MISSING_BLOCK_LABEL_196;
_L1:
        break; /* Loop/switch isn't completed */
_L2:
        break; /* Loop/switch isn't completed */
_L8:
        if (mOnItemProcessedCallback != null)
            mOnItemProcessedCallback.run();
        i++;
        if (true) goto _L7; else goto _L6
_L6:
        mCallback.onDispatchSecondPass(updateop);
        mCallback.offsetPositionsForAdd(updateop.positionStart, updateop.itemCount);
          goto _L8
_L3:
        mCallback.onDispatchSecondPass(updateop);
        mCallback.offsetPositionsForRemovingInvisible(updateop.positionStart, updateop.itemCount);
          goto _L8
_L4:
        mCallback.onDispatchSecondPass(updateop);
        mCallback.markViewHoldersUpdated(updateop.positionStart, updateop.itemCount, updateop.payload);
          goto _L8
        mCallback.onDispatchSecondPass(updateop);
        mCallback.offsetPositionsForMove(updateop.positionStart, updateop.itemCount);
          goto _L8
        recycleUpdateOpsAndClearList(mPendingUpdates);
        mExistingUpdateTypes = 0;
        return;
    }

    void dispatchFirstPassAndUpdateViewHolders(UpdateOp updateop, int i) {
        mCallback.onDispatchFirstPass(updateop);
        updateop.cmd;
        JVM INSTR tableswitch 2 4: default 40
    //                   2 50
    //                   3 40
    //                   4 65;
           goto _L1 _L2 _L1 _L3
_L1:
        throw new IllegalArgumentException("only remove and update ops can be dispatched in first pass");
_L2:
        mCallback.offsetPositionsForRemovingInvisible(i, updateop.itemCount);
_L5:
        return;
_L3:
        mCallback.markViewHoldersUpdated(i, updateop.itemCount, updateop.payload);
        if (true) goto _L5; else goto _L4
_L4:
    }

    int findPositionOffset(int i) {
        return findPositionOffset(i, 0);
    }

    int findPositionOffset(int i, int j) {
        int l;
        int i1;
        i1 = mPostponedList.size();
        l = j;
        j = i;
_L5:
        i = j;
        if (l >= i1) goto _L2; else goto _L1
_L1:
        UpdateOp updateop = (UpdateOp)mPostponedList.get(l);
        if (updateop.cmd != 8) goto _L4; else goto _L3
_L3:
        if (updateop.positionStart == j) {
            i = updateop.itemCount;
        } else {
            int k = j;
            if (updateop.positionStart < j)
                k = j - 1;
            i = k;
            if (updateop.itemCount <= k)
                i = k + 1;
        }
_L7:
        l++;
        j = i;
          goto _L5
_L4:
        i = j;
        if (updateop.positionStart > j) goto _L7; else goto _L6
_L6:
        if (updateop.cmd != 2)
            break MISSING_BLOCK_LABEL_153;
        if (j >= updateop.positionStart + updateop.itemCount) goto _L9; else goto _L8
_L8:
        i = -1;
_L2:
        return i;
_L9:
        i = j - updateop.itemCount;
          goto _L7
        i = j;
        if (updateop.cmd == 1)
            i = j + updateop.itemCount;
          goto _L7
    }

    boolean hasAnyUpdateTypes(int i) {
        boolean flag;
        if ((mExistingUpdateTypes & i) != 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    boolean hasPendingUpdates() {
        boolean flag;
        if (mPendingUpdates.size() > 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    boolean hasUpdates() {
        boolean flag;
        if (!mPostponedList.isEmpty() && !mPendingUpdates.isEmpty())
            flag = true;
        else
            flag = false;
        return flag;
    }

    public UpdateOp obtainUpdateOp(int i, int j, int k, Object obj) {
        UpdateOp updateop = (UpdateOp)mUpdateOpPool.acquire();
        if (updateop == null) {
            obj = new UpdateOp(i, j, k, obj);
        } else {
            updateop.cmd = i;
            updateop.positionStart = j;
            updateop.itemCount = k;
            updateop.payload = obj;
            obj = updateop;
        }
        return ((UpdateOp) (obj));
    }

    boolean onItemRangeChanged(int i, int j, Object obj) {
        boolean flag;
        boolean flag1;
        flag1 = false;
        flag = true;
        if (j >= 1) goto _L2; else goto _L1
_L1:
        flag = flag1;
_L4:
        return flag;
_L2:
        mPendingUpdates.add(obtainUpdateOp(4, i, j, obj));
        mExistingUpdateTypes = mExistingUpdateTypes | 4;
        if (mPendingUpdates.size() != 1)
            flag = false;
        if (true) goto _L4; else goto _L3
_L3:
    }

    boolean onItemRangeInserted(int i, int j) {
        boolean flag = false;
        boolean flag1 = true;
        if (j >= 1) {
            mPendingUpdates.add(obtainUpdateOp(1, i, j, null));
            mExistingUpdateTypes = mExistingUpdateTypes | 1;
            if (mPendingUpdates.size() == 1)
                flag = flag1;
            else
                flag = false;
        }
        return flag;
    }

    boolean onItemRangeMoved(int i, int j, int k) {
        boolean flag = false;
        boolean flag1 = true;
        if (i != j) {
            if (k != 1)
                throw new IllegalArgumentException("Moving more than 1 item is not supported yet");
            mPendingUpdates.add(obtainUpdateOp(8, i, j, null));
            mExistingUpdateTypes = mExistingUpdateTypes | 8;
            if (mPendingUpdates.size() == 1)
                flag = flag1;
            else
                flag = false;
        }
        return flag;
    }

    boolean onItemRangeRemoved(int i, int j) {
        boolean flag = false;
        boolean flag1 = true;
        if (j >= 1) {
            mPendingUpdates.add(obtainUpdateOp(2, i, j, null));
            mExistingUpdateTypes = mExistingUpdateTypes | 2;
            if (mPendingUpdates.size() == 1)
                flag = flag1;
            else
                flag = false;
        }
        return flag;
    }

    void preProcess() {
        int i;
        int j;
        mOpReorderer.reorderOps(mPendingUpdates);
        j = mPendingUpdates.size();
        i = 0;
_L7:
        UpdateOp updateop;
        if (i >= j)
            break MISSING_BLOCK_LABEL_142;
        updateop = (UpdateOp)mPendingUpdates.get(i);
        updateop.cmd;
        JVM INSTR tableswitch 1 8: default 88
    //                   1 110
    //                   2 118
    //                   3 88
    //                   4 126
    //                   5 88
    //                   6 88
    //                   7 88
    //                   8 134;
           goto _L1 _L2 _L3 _L1 _L4 _L1 _L1 _L1 _L5
_L5:
        break MISSING_BLOCK_LABEL_134;
_L1:
        break; /* Loop/switch isn't completed */
_L2:
        break; /* Loop/switch isn't completed */
_L8:
        if (mOnItemProcessedCallback != null)
            mOnItemProcessedCallback.run();
        i++;
        if (true) goto _L7; else goto _L6
_L6:
        applyAdd(updateop);
          goto _L8
_L3:
        applyRemove(updateop);
          goto _L8
_L4:
        applyUpdate(updateop);
          goto _L8
        applyMove(updateop);
          goto _L8
        mPendingUpdates.clear();
        return;
    }

    public void recycleUpdateOp(UpdateOp updateop) {
        if (!mDisableRecycler) {
            updateop.payload = null;
            mUpdateOpPool.release(updateop);
        }
    }

    void recycleUpdateOpsAndClearList(List list) {
        int j = list.size();
        for (int i = 0; i < j; i++)
            recycleUpdateOp((UpdateOp)list.get(i));

        list.clear();
    }

    void reset() {
        recycleUpdateOpsAndClearList(mPendingUpdates);
        recycleUpdateOpsAndClearList(mPostponedList);
        mExistingUpdateTypes = 0;
    }
}
