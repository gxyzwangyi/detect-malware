// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v7.widget;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.database.DataSetObserver;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Handler;
import android.support.v4.view.ViewCompat;
import android.support.v4.widget.PopupWindowCompat;
import android.support.v7.view.menu.ShowableListMenu;
import android.util.*;
import android.view.*;
import android.widget.*;
import java.lang.reflect.Method;

// Referenced classes of package android.support.v7.widget:
//            AppCompatPopupWindow, DropDownListView, ForwardingListener

public class ListPopupWindow
    implements ShowableListMenu {
    private class ListSelectorHider
        implements Runnable {

        final ListPopupWindow this$0;

        public void run() {
            clearListSelection();
        }

        ListSelectorHider() {
            this$0 = ListPopupWindow.this;
            super();
        }
    }

    private class PopupDataSetObserver extends DataSetObserver {

        final ListPopupWindow this$0;

        public void onChanged() {
            if (isShowing())
                show();
        }

        public void onInvalidated() {
            dismiss();
        }

        PopupDataSetObserver() {
            this$0 = ListPopupWindow.this;
            super();
        }
    }

    private class PopupScrollListener
        implements android.widget.AbsListView.OnScrollListener {

        final ListPopupWindow this$0;

        public void onScroll(AbsListView abslistview, int i, int j, int k) {
        }

        public void onScrollStateChanged(AbsListView abslistview, int i) {
            if (i == 1 && !isInputMethodNotNeeded() && mPopup.getContentView() != null) {
                mHandler.removeCallbacks(mResizePopupRunnable);
                mResizePopupRunnable.run();
            }
        }

        PopupScrollListener() {
            this$0 = ListPopupWindow.this;
            super();
        }
    }

    private class PopupTouchInterceptor
        implements android.view.View.OnTouchListener {

        final ListPopupWindow this$0;

        public boolean onTouch(View view, MotionEvent motionevent) {
            int i;
            int j;
            int k;
            j = motionevent.getAction();
            k = (int)motionevent.getX();
            i = (int)motionevent.getY();
            if (j != 0 || mPopup == null || !mPopup.isShowing() || k < 0 || k >= mPopup.getWidth() || i < 0 || i >= mPopup.getHeight()) goto _L2; else goto _L1
_L1:
            mHandler.postDelayed(mResizePopupRunnable, 250L);
_L4:
            return false;
_L2:
            if (j == 1)
                mHandler.removeCallbacks(mResizePopupRunnable);
            if (true) goto _L4; else goto _L3
_L3:
        }

        PopupTouchInterceptor() {
            this$0 = ListPopupWindow.this;
            super();
        }
    }

    private class ResizePopupRunnable
        implements Runnable {

        final ListPopupWindow this$0;

        public void run() {
            if (mDropDownList != null && ViewCompat.isAttachedToWindow(mDropDownList) && mDropDownList.getCount() > mDropDownList.getChildCount() && mDropDownList.getChildCount() <= mListItemExpandMaximum) {
                mPopup.setInputMethodMode(2);
                show();
            }
        }

        ResizePopupRunnable() {
            this$0 = ListPopupWindow.this;
            super();
        }
    }


    private static final boolean DEBUG = false;
    static final int EXPAND_LIST_TIMEOUT = 250;
    public static final int INPUT_METHOD_FROM_FOCUSABLE = 0;
    public static final int INPUT_METHOD_NEEDED = 1;
    public static final int INPUT_METHOD_NOT_NEEDED = 2;
    public static final int MATCH_PARENT = -1;
    public static final int POSITION_PROMPT_ABOVE = 0;
    public static final int POSITION_PROMPT_BELOW = 1;
    private static final String TAG = "ListPopupWindow";
    public static final int WRAP_CONTENT = -2;
    private static Method sClipToWindowEnabledMethod;
    private static Method sGetMaxAvailableHeightMethod;
    private static Method sSetEpicenterBoundsMethod = android/widget/PopupWindow.getDeclaredMethod("setEpicenterBounds", new Class[] {
        android/graphics/Rect
    });
    private ListAdapter mAdapter;
    private Context mContext;
    private boolean mDropDownAlwaysVisible;
    private View mDropDownAnchorView;
    private int mDropDownGravity;
    private int mDropDownHeight;
    private int mDropDownHorizontalOffset;
    DropDownListView mDropDownList;
    private Drawable mDropDownListHighlight;
    private int mDropDownVerticalOffset;
    private boolean mDropDownVerticalOffsetSet;
    private int mDropDownWidth;
    private int mDropDownWindowLayoutType;
    private Rect mEpicenterBounds;
    private boolean mForceIgnoreOutsideTouch;
    final Handler mHandler;
    private final ListSelectorHider mHideSelector;
    private boolean mIsAnimatedFromAnchor;
    private android.widget.AdapterView.OnItemClickListener mItemClickListener;
    private android.widget.AdapterView.OnItemSelectedListener mItemSelectedListener;
    int mListItemExpandMaximum;
    private boolean mModal;
    private DataSetObserver mObserver;
    PopupWindow mPopup;
    private int mPromptPosition;
    private View mPromptView;
    final ResizePopupRunnable mResizePopupRunnable;
    private final PopupScrollListener mScrollListener;
    private Runnable mShowDropDownRunnable;
    private final Rect mTempRect;
    private final PopupTouchInterceptor mTouchInterceptor;

    public ListPopupWindow(Context context) {
        this(context, null, android.support.v7.appcompat.R.attr.listPopupWindowStyle);
    }

    public ListPopupWindow(Context context, AttributeSet attributeset) {
        this(context, attributeset, android.support.v7.appcompat.R.attr.listPopupWindowStyle);
    }

    public ListPopupWindow(Context context, AttributeSet attributeset, int i) {
        this(context, attributeset, i, 0);
    }

    public ListPopupWindow(Context context, AttributeSet attributeset, int i, int j) {
        mDropDownHeight = -2;
        mDropDownWidth = -2;
        mDropDownWindowLayoutType = 1002;
        mIsAnimatedFromAnchor = true;
        mDropDownGravity = 0;
        mDropDownAlwaysVisible = false;
        mForceIgnoreOutsideTouch = false;
        mListItemExpandMaximum = 0x7fffffff;
        mPromptPosition = 0;
        mResizePopupRunnable = new ResizePopupRunnable();
        mTouchInterceptor = new PopupTouchInterceptor();
        mScrollListener = new PopupScrollListener();
        mHideSelector = new ListSelectorHider();
        mTempRect = new Rect();
        mContext = context;
        mHandler = new Handler(context.getMainLooper());
        TypedArray typedarray = context.obtainStyledAttributes(attributeset, android.support.v7.appcompat.R.styleable.ListPopupWindow, i, j);
        mDropDownHorizontalOffset = typedarray.getDimensionPixelOffset(android.support.v7.appcompat.R.styleable.ListPopupWindow_android_dropDownHorizontalOffset, 0);
        mDropDownVerticalOffset = typedarray.getDimensionPixelOffset(android.support.v7.appcompat.R.styleable.ListPopupWindow_android_dropDownVerticalOffset, 0);
        if (mDropDownVerticalOffset != 0)
            mDropDownVerticalOffsetSet = true;
        typedarray.recycle();
        if (android.os.Build.VERSION.SDK_INT >= 11)
            mPopup = new AppCompatPopupWindow(context, attributeset, i, j);
        else
            mPopup = new AppCompatPopupWindow(context, attributeset, i);
        mPopup.setInputMethodMode(1);
    }

    private int buildDropDown() {
        boolean flag1 = true;
        if (mDropDownList != null) goto _L2; else goto _L1
_L1:
        int i;
        int j;
        int l;
        boolean flag;
        Object obj;
        Object obj1;
        View view;
        android.widget.LinearLayout.LayoutParams layoutparams;
        obj = mContext;
        mShowDropDownRunnable = new Runnable() {

            final ListPopupWindow this$0;

            public void run() {
                View view1 = getAnchorView();
                if (view1 != null && view1.getWindowToken() != null)
                    show();
            }

             {
                this$0 = ListPopupWindow.this;
                super();
            }
        }
;
        if (!mModal)
            flag = true;
        else
            flag = false;
        mDropDownList = createDropDownListView(((Context) (obj)), flag);
        if (mDropDownListHighlight != null)
            mDropDownList.setSelector(mDropDownListHighlight);
        mDropDownList.setAdapter(mAdapter);
        mDropDownList.setOnItemClickListener(mItemClickListener);
        mDropDownList.setFocusable(true);
        mDropDownList.setFocusableInTouchMode(true);
        mDropDownList.setOnItemSelectedListener(new android.widget.AdapterView.OnItemSelectedListener() {

            final ListPopupWindow this$0;

            public void onItemSelected(AdapterView adapterview, View view1, int i1, long l1) {
                if (i1 != -1) {
                    adapterview = mDropDownList;
                    if (adapterview != null)
                        adapterview.setListSelectionHidden(false);
                }
            }

            public void onNothingSelected(AdapterView adapterview) {
            }

             {
                this$0 = ListPopupWindow.this;
                super();
            }
        }
);
        mDropDownList.setOnScrollListener(mScrollListener);
        if (mItemSelectedListener != null)
            mDropDownList.setOnItemSelectedListener(mItemSelectedListener);
        obj1 = mDropDownList;
        view = mPromptView;
        if (view == null)
            break MISSING_BLOCK_LABEL_737;
        obj = new LinearLayout(((Context) (obj)));
        ((LinearLayout) (obj)).setOrientation(1);
        layoutparams = new android.widget.LinearLayout.LayoutParams(-1, 0, 1.0F);
        mPromptPosition;
        JVM INSTR tableswitch 0 1: default 224
    //                   0 458
    //                   1 439;
           goto _L3 _L4 _L5
_L3:
        Log.e("ListPopupWindow", (new StringBuilder()).append("Invalid hint position ").append(mPromptPosition).toString());
_L8:
        if (mDropDownWidth >= 0) {
            j = mDropDownWidth;
            i = 0x80000000;
        } else {
            i = 0;
            j = 0;
        }
        view.measure(android.view.View.MeasureSpec.makeMeasureSpec(j, i), 0);
        obj1 = (android.widget.LinearLayout.LayoutParams)view.getLayoutParams();
        j = view.getMeasuredHeight();
        i = ((android.widget.LinearLayout.LayoutParams) (obj1)).topMargin;
        i = ((android.widget.LinearLayout.LayoutParams) (obj1)).bottomMargin + (j + i);
_L15:
        mPopup.setContentView(((View) (obj)));
_L9:
        obj = mPopup.getBackground();
        if (obj != null) {
            ((Drawable) (obj)).getPadding(mTempRect);
            j = mTempRect.top + mTempRect.bottom;
            if (!mDropDownVerticalOffsetSet)
                mDropDownVerticalOffset = -mTempRect.top;
        } else {
            mTempRect.setEmpty();
            j = 0;
        }
        if (mPopup.getInputMethodMode() == 2)
            flag = flag1;
        else
            flag = false;
        l = getMaxAvailableHeight(getAnchorView(), mDropDownVerticalOffset, flag);
        if (!mDropDownAlwaysVisible && mDropDownHeight != -1) goto _L7; else goto _L6
_L6:
        i = l + j;
_L13:
        return i;
_L5:
        ((LinearLayout) (obj)).addView(((View) (obj1)), layoutparams);
        ((LinearLayout) (obj)).addView(view);
          goto _L8
_L4:
        ((LinearLayout) (obj)).addView(view);
        ((LinearLayout) (obj)).addView(((View) (obj1)), layoutparams);
          goto _L8
_L2:
        obj = (ViewGroup)mPopup.getContentView();
        obj1 = mPromptView;
        int k;
        if (obj1 != null) {
            obj = (android.widget.LinearLayout.LayoutParams)((View) (obj1)).getLayoutParams();
            j = ((View) (obj1)).getMeasuredHeight();
            i = ((android.widget.LinearLayout.LayoutParams) (obj)).topMargin;
            i = ((android.widget.LinearLayout.LayoutParams) (obj)).bottomMargin + (j + i);
        } else {
            i = 0;
        }
          goto _L9
_L7:
        mDropDownWidth;
        JVM INSTR tableswitch -2 -1: default 588
    //                   -2 651
    //                   -1 690;
           goto _L10 _L11 _L12
_L12:
        break MISSING_BLOCK_LABEL_690;
_L10:
        k = android.view.View.MeasureSpec.makeMeasureSpec(mDropDownWidth, 0x40000000);
_L14:
        l = mDropDownList.measureHeightOfChildrenCompat(k, 0, -1, l - i, -1);
        k = i;
        if (l > 0)
            k = i + (mDropDownList.getPaddingTop() + mDropDownList.getPaddingBottom() + j);
        i = l + k;
          goto _L13
_L11:
        k = android.view.View.MeasureSpec.makeMeasureSpec(mContext.getResources().getDisplayMetrics().widthPixels - (mTempRect.left + mTempRect.right), 0x80000000);
          goto _L14
        k = android.view.View.MeasureSpec.makeMeasureSpec(mContext.getResources().getDisplayMetrics().widthPixels - (mTempRect.left + mTempRect.right), 0x40000000);
          goto _L14
        obj = obj1;
        i = 0;
          goto _L15
    }

    private int getMaxAvailableHeight(View view, int i, boolean flag) {
        if (sGetMaxAvailableHeightMethod == null) goto _L2; else goto _L1
_L1:
        int j = ((Integer)sGetMaxAvailableHeightMethod.invoke(mPopup, new Object[] {
            view, Integer.valueOf(i), Boolean.valueOf(flag)
        })).intValue();
        i = j;
_L4:
        return i;
        Exception exception;
        exception;
        Log.i("ListPopupWindow", "Could not call getMaxAvailableHeightMethod(View, int, boolean) on PopupWindow. Using the public version.");
_L2:
        i = mPopup.getMaxAvailableHeight(view, i);
        if (true) goto _L4; else goto _L3
_L3:
    }

    private static boolean isConfirmKey(int i) {
        boolean flag;
        if (i == 66 || i == 23)
            flag = true;
        else
            flag = false;
        return flag;
    }

    private void removePromptView() {
        if (mPromptView != null) {
            android.view.ViewParent viewparent = mPromptView.getParent();
            if (viewparent instanceof ViewGroup)
                ((ViewGroup)viewparent).removeView(mPromptView);
        }
    }

    private void setPopupClipToScreenEnabled(boolean flag) {
        if (sClipToWindowEnabledMethod == null)
            break MISSING_BLOCK_LABEL_28;
        sClipToWindowEnabledMethod.invoke(mPopup, new Object[] {
            Boolean.valueOf(flag)
        });
_L1:
        return;
        Exception exception;
        exception;
        Log.i("ListPopupWindow", "Could not call setClipToScreenEnabled() on PopupWindow. Oh well.");
          goto _L1
    }

    public void clearListSelection() {
        DropDownListView dropdownlistview = mDropDownList;
        if (dropdownlistview != null) {
            dropdownlistview.setListSelectionHidden(true);
            dropdownlistview.requestLayout();
        }
    }

    public android.view.View.OnTouchListener createDragToOpenListener(View view) {
        return new ForwardingListener(view) {

            final ListPopupWindow this$0;

            public volatile ShowableListMenu getPopup() {
                return getPopup();
            }

            public ListPopupWindow getPopup() {
                return ListPopupWindow.this;
            }

             {
                this$0 = ListPopupWindow.this;
                super(view);
            }
        }
;
    }

    DropDownListView createDropDownListView(Context context, boolean flag) {
        return new DropDownListView(context, flag);
    }

    public void dismiss() {
        mPopup.dismiss();
        removePromptView();
        mPopup.setContentView(null);
        mDropDownList = null;
        mHandler.removeCallbacks(mResizePopupRunnable);
    }

    public View getAnchorView() {
        return mDropDownAnchorView;
    }

    public int getAnimationStyle() {
        return mPopup.getAnimationStyle();
    }

    public Drawable getBackground() {
        return mPopup.getBackground();
    }

    public int getHeight() {
        return mDropDownHeight;
    }

    public int getHorizontalOffset() {
        return mDropDownHorizontalOffset;
    }

    public int getInputMethodMode() {
        return mPopup.getInputMethodMode();
    }

    public ListView getListView() {
        return mDropDownList;
    }

    public int getPromptPosition() {
        return mPromptPosition;
    }

    public Object getSelectedItem() {
        Object obj;
        if (!isShowing())
            obj = null;
        else
            obj = mDropDownList.getSelectedItem();
        return obj;
    }

    public long getSelectedItemId() {
        long l;
        if (!isShowing())
            l = 0x0L;
        else
            l = mDropDownList.getSelectedItemId();
        return l;
    }

    public int getSelectedItemPosition() {
        int i;
        if (!isShowing())
            i = -1;
        else
            i = mDropDownList.getSelectedItemPosition();
        return i;
    }

    public View getSelectedView() {
        View view;
        if (!isShowing())
            view = null;
        else
            view = mDropDownList.getSelectedView();
        return view;
    }

    public int getSoftInputMode() {
        return mPopup.getSoftInputMode();
    }

    public int getVerticalOffset() {
        int i;
        if (!mDropDownVerticalOffsetSet)
            i = 0;
        else
            i = mDropDownVerticalOffset;
        return i;
    }

    public int getWidth() {
        return mDropDownWidth;
    }

    public boolean isDropDownAlwaysVisible() {
        return mDropDownAlwaysVisible;
    }

    public boolean isInputMethodNotNeeded() {
        boolean flag;
        if (mPopup.getInputMethodMode() == 2)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean isModal() {
        return mModal;
    }

    public boolean isShowing() {
        return mPopup.isShowing();
    }

    public boolean onKeyDown(int i, KeyEvent keyevent) {
        boolean flag1 = true;
        if (!isShowing() || i == 62 || mDropDownList.getSelectedItemPosition() < 0 && isConfirmKey(i)) goto _L2; else goto _L1
_L1:
        int j;
        int k;
        boolean flag;
        int l;
        l = mDropDownList.getSelectedItemPosition();
        ListAdapter listadapter;
        if (!mPopup.isAboveAnchor())
            flag = true;
        else
            flag = false;
        listadapter = mAdapter;
        j = 0x7fffffff;
        k = 0x80000000;
        if (listadapter != null) {
            boolean flag2 = listadapter.areAllItemsEnabled();
            if (flag2)
                j = 0;
            else
                j = mDropDownList.lookForSelectablePosition(0, true);
            if (flag2)
                k = listadapter.getCount() - 1;
            else
                k = mDropDownList.lookForSelectablePosition(listadapter.getCount() - 1, false);
        }
        if ((!flag || i != 19 || l > j) && (flag || i != 20 || l < k)) goto _L4; else goto _L3
_L3:
        clearListSelection();
        mPopup.setInputMethodMode(1);
        show();
_L7:
        return flag1;
_L4:
        mDropDownList.setListSelectionHidden(false);
        if (!mDropDownList.onKeyDown(i, keyevent))
            break; /* Loop/switch isn't completed */
        mPopup.setInputMethodMode(2);
        mDropDownList.requestFocusFromTouch();
        show();
        switch (i) {
        case 19: // '\023'
        case 20: // '\024'
        case 23: // '\027'
        case 66: // 'B'
            continue; /* Loop/switch isn't completed */
        }
_L2:
        flag1 = false;
        if (true) goto _L6; else goto _L5
_L5:
        continue; /* Loop/switch isn't completed */
_L6:
        break; /* Loop/switch isn't completed */
        if (!flag || i != 20 ? flag || i != 19 || l != j : l != k) goto _L2; else goto _L7
    }

    public boolean onKeyPreIme(int i, KeyEvent keyevent) {
        boolean flag1 = true;
        if (i != 4 || !isShowing()) goto _L2; else goto _L1
_L1:
        Object obj = mDropDownAnchorView;
        if (keyevent.getAction() != 0 || keyevent.getRepeatCount() != 0) goto _L4; else goto _L3
_L3:
        boolean flag;
        obj = ((View) (obj)).getKeyDispatcherState();
        flag = flag1;
        if (obj != null) {
            ((android.view.KeyEvent.DispatcherState) (obj)).startTracking(keyevent, this);
            flag = flag1;
        }
_L6:
        return flag;
_L4:
        if (keyevent.getAction() == 1) {
            obj = ((View) (obj)).getKeyDispatcherState();
            if (obj != null)
                ((android.view.KeyEvent.DispatcherState) (obj)).handleUpEvent(keyevent);
            if (keyevent.isTracking() && !keyevent.isCanceled()) {
                dismiss();
                flag = flag1;
                continue; /* Loop/switch isn't completed */
            }
        }
_L2:
        flag = false;
        if (true) goto _L6; else goto _L5
_L5:
    }

    public boolean onKeyUp(int i, KeyEvent keyevent) {
        boolean flag;
        if (isShowing() && mDropDownList.getSelectedItemPosition() >= 0) {
            boolean flag1 = mDropDownList.onKeyUp(i, keyevent);
            flag = flag1;
            if (flag1) {
                flag = flag1;
                if (isConfirmKey(i)) {
                    dismiss();
                    flag = flag1;
                }
            }
        } else {
            flag = false;
        }
        return flag;
    }

    public boolean performItemClick(int i) {
        boolean flag;
        if (isShowing()) {
            if (mItemClickListener != null) {
                DropDownListView dropdownlistview = mDropDownList;
                View view = dropdownlistview.getChildAt(i - dropdownlistview.getFirstVisiblePosition());
                ListAdapter listadapter = dropdownlistview.getAdapter();
                mItemClickListener.onItemClick(dropdownlistview, view, i, listadapter.getItemId(i));
            }
            flag = true;
        } else {
            flag = false;
        }
        return flag;
    }

    public void postShow() {
        mHandler.post(mShowDropDownRunnable);
    }

    public void setAdapter(ListAdapter listadapter) {
        if (mObserver != null) goto _L2; else goto _L1
_L1:
        mObserver = new PopupDataSetObserver();
_L4:
        mAdapter = listadapter;
        if (mAdapter != null)
            listadapter.registerDataSetObserver(mObserver);
        if (mDropDownList != null)
            mDropDownList.setAdapter(mAdapter);
        return;
_L2:
        if (mAdapter != null)
            mAdapter.unregisterDataSetObserver(mObserver);
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void setAnchorView(View view) {
        mDropDownAnchorView = view;
    }

    public void setAnimationStyle(int i) {
        mPopup.setAnimationStyle(i);
    }

    public void setBackgroundDrawable(Drawable drawable) {
        mPopup.setBackgroundDrawable(drawable);
    }

    public void setContentWidth(int i) {
        Drawable drawable = mPopup.getBackground();
        if (drawable != null) {
            drawable.getPadding(mTempRect);
            mDropDownWidth = mTempRect.left + mTempRect.right + i;
        } else {
            setWidth(i);
        }
    }

    public void setDropDownAlwaysVisible(boolean flag) {
        mDropDownAlwaysVisible = flag;
    }

    public void setDropDownGravity(int i) {
        mDropDownGravity = i;
    }

    public void setEpicenterBounds(Rect rect) {
        mEpicenterBounds = rect;
    }

    public void setForceIgnoreOutsideTouch(boolean flag) {
        mForceIgnoreOutsideTouch = flag;
    }

    public void setHeight(int i) {
        mDropDownHeight = i;
    }

    public void setHorizontalOffset(int i) {
        mDropDownHorizontalOffset = i;
    }

    public void setInputMethodMode(int i) {
        mPopup.setInputMethodMode(i);
    }

    void setListItemExpandMax(int i) {
        mListItemExpandMaximum = i;
    }

    public void setListSelector(Drawable drawable) {
        mDropDownListHighlight = drawable;
    }

    public void setModal(boolean flag) {
        mModal = flag;
        mPopup.setFocusable(flag);
    }

    public void setOnDismissListener(android.widget.PopupWindow.OnDismissListener ondismisslistener) {
        mPopup.setOnDismissListener(ondismisslistener);
    }

    public void setOnItemClickListener(android.widget.AdapterView.OnItemClickListener onitemclicklistener) {
        mItemClickListener = onitemclicklistener;
    }

    public void setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener onitemselectedlistener) {
        mItemSelectedListener = onitemselectedlistener;
    }

    public void setPromptPosition(int i) {
        mPromptPosition = i;
    }

    public void setPromptView(View view) {
        boolean flag = isShowing();
        if (flag)
            removePromptView();
        mPromptView = view;
        if (flag)
            show();
    }

    public void setSelection(int i) {
        DropDownListView dropdownlistview = mDropDownList;
        if (isShowing() && dropdownlistview != null) {
            dropdownlistview.setListSelectionHidden(false);
            dropdownlistview.setSelection(i);
            if (android.os.Build.VERSION.SDK_INT >= 11 && dropdownlistview.getChoiceMode() != 0)
                dropdownlistview.setItemChecked(i, true);
        }
    }

    public void setSoftInputMode(int i) {
        mPopup.setSoftInputMode(i);
    }

    public void setVerticalOffset(int i) {
        mDropDownVerticalOffset = i;
        mDropDownVerticalOffsetSet = true;
    }

    public void setWidth(int i) {
        mDropDownWidth = i;
    }

    public void setWindowLayoutType(int i) {
        mDropDownWindowLayoutType = i;
    }

    public void show() {
        int i;
        byte byte2;
        boolean flag;
        boolean flag1;
        boolean flag2;
        flag = true;
        flag1 = false;
        byte2 = -1;
        i = buildDropDown();
        flag2 = isInputMethodNotNeeded();
        PopupWindowCompat.setWindowLayoutType(mPopup, mDropDownWindowLayoutType);
        if (!mPopup.isShowing()) goto _L2; else goto _L1
_L1:
        int j;
        if (mDropDownWidth == -1)
            j = -1;
        else
        if (mDropDownWidth == -2)
            j = getAnchorView().getWidth();
        else
            j = mDropDownWidth;
        if (mDropDownHeight == -1) {
            if (!flag2)
                i = -1;
            if (flag2) {
                PopupWindow popupwindow = mPopup;
                byte byte0;
                int l;
                int i1;
                View view;
                if (mDropDownWidth == -1)
                    byte0 = -1;
                else
                    byte0 = 0;
                popupwindow.setWidth(byte0);
                mPopup.setHeight(0);
            } else {
                PopupWindow popupwindow1 = mPopup;
                byte byte1;
                if (mDropDownWidth == -1)
                    byte1 = -1;
                else
                    byte1 = 0;
                popupwindow1.setWidth(byte1);
                mPopup.setHeight(-1);
            }
        } else
        if (mDropDownHeight != -2)
            i = mDropDownHeight;
        popupwindow = mPopup;
        flag = flag1;
        if (!mForceIgnoreOutsideTouch) {
            flag = flag1;
            if (!mDropDownAlwaysVisible)
                flag = true;
        }
        popupwindow.setOutsideTouchable(flag);
        popupwindow = mPopup;
        view = getAnchorView();
        i1 = mDropDownHorizontalOffset;
        l = mDropDownVerticalOffset;
        byte0 = j;
        if (j < 0)
            byte0 = -1;
        if (i < 0)
            i = byte2;
        popupwindow.update(view, i1, l, byte0, i);
_L5:
        return;
_L2:
        int k;
        if (mDropDownWidth == -1)
            k = -1;
        else
        if (mDropDownWidth == -2)
            k = getAnchorView().getWidth();
        else
            k = mDropDownWidth;
        if (mDropDownHeight != -1) goto _L4; else goto _L3
_L3:
        i = -1;
_L6:
        mPopup.setWidth(k);
        mPopup.setHeight(i);
        setPopupClipToScreenEnabled(true);
        PopupWindow popupwindow2 = mPopup;
        if (mForceIgnoreOutsideTouch || mDropDownAlwaysVisible)
            flag = false;
        popupwindow2.setOutsideTouchable(flag);
        mPopup.setTouchInterceptor(mTouchInterceptor);
        if (sSetEpicenterBoundsMethod != null)
            try {
                sSetEpicenterBoundsMethod.invoke(mPopup, new Object[] {
                    mEpicenterBounds
                });
            }
            catch (Exception exception) {
                Log.e("ListPopupWindow", "Could not invoke setEpicenterBounds on PopupWindow", exception);
            }
        PopupWindowCompat.showAsDropDown(mPopup, getAnchorView(), mDropDownHorizontalOffset, mDropDownVerticalOffset, mDropDownGravity);
        mDropDownList.setSelection(-1);
        if (!mModal || mDropDownList.isInTouchMode())
            clearListSelection();
        if (!mModal)
            mHandler.post(mHideSelector);
        if (true) goto _L5; else goto _L4
_L4:
        if (mDropDownHeight != -2)
            i = mDropDownHeight;
          goto _L6
    }

    static  {
        try {
            sClipToWindowEnabledMethod = android/widget/PopupWindow.getDeclaredMethod("setClipToScreenEnabled", new Class[] {
                Boolean.TYPE
            });
        }
        catch (NoSuchMethodException nosuchmethodexception) {
            Log.i("ListPopupWindow", "Could not find method setClipToScreenEnabled() on PopupWindow. Oh well.");
        }
        try {
            sGetMaxAvailableHeightMethod = android/widget/PopupWindow.getDeclaredMethod("getMaxAvailableHeight", new Class[] {
                android/view/View, Integer.TYPE, Boolean.TYPE
            });
        }
        catch (NoSuchMethodException nosuchmethodexception1) {
            Log.i("ListPopupWindow", "Could not find method getMaxAvailableHeight(View, int, boolean) on PopupWindow. Oh well.");
        }
_L1:
        return;
        NoSuchMethodException nosuchmethodexception2;
        nosuchmethodexception2;
        Log.i("ListPopupWindow", "Could not find method setEpicenterBounds(Rect) on PopupWindow. Oh well.");
          goto _L1
    }
}
