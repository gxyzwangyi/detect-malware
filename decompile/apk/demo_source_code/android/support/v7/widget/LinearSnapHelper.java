// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v7.widget;

import android.graphics.PointF;
import android.view.View;

// Referenced classes of package android.support.v7.widget:
//            SnapHelper, OrientationHelper

public class LinearSnapHelper extends SnapHelper {

    private static final float INVALID_DISTANCE = 1F;
    private OrientationHelper mHorizontalHelper;
    private OrientationHelper mVerticalHelper;

    public LinearSnapHelper() {
    }

    private float computeDistancePerChild(RecyclerView.LayoutManager layoutmanager, OrientationHelper orientationhelper) {
        View view = null;
        int i = 0x7fffffff;
        int j1 = layoutmanager.getChildCount();
        float f;
        if (j1 == 0) {
            f = 1.0F;
        } else {
            int k = 0;
            View view1 = null;
            int l = 0x80000000;
            while (k < j1)  {
                View view2 = layoutmanager.getChildAt(k);
                int i1 = layoutmanager.getPosition(view2);
                if (i1 != -1) {
                    int j = i;
                    if (i1 < i) {
                        j = i1;
                        view1 = view2;
                    }
                    if (i1 > l) {
                        l = i1;
                        i = j;
                        view = view2;
                    } else {
                        i = j;
                    }
                }
                k++;
            }
            if (view1 == null || view == null) {
                f = 1.0F;
            } else {
                j = Math.min(orientationhelper.getDecoratedStart(view1), orientationhelper.getDecoratedStart(view));
                j = Math.max(orientationhelper.getDecoratedEnd(view1), orientationhelper.getDecoratedEnd(view)) - j;
                if (j == 0)
                    f = 1.0F;
                else
                    f = ((float)j * 1.0F) / (float)((l - i) + 1);
            }
        }
        return f;
    }

    private int distanceToCenter(RecyclerView.LayoutManager layoutmanager, View view, OrientationHelper orientationhelper) {
        int k = orientationhelper.getDecoratedStart(view);
        int j = orientationhelper.getDecoratedMeasurement(view) / 2;
        int i;
        if (layoutmanager.getClipToPadding())
            i = orientationhelper.getStartAfterPadding() + orientationhelper.getTotalSpace() / 2;
        else
            i = orientationhelper.getEnd() / 2;
        return (j + k) - i;
    }

    private int estimateNextPositionDiffForFling(RecyclerView.LayoutManager layoutmanager, OrientationHelper orientationhelper, int i, int j) {
        boolean flag = false;
        int ai[] = calculateScrollDistance(i, j);
        float f = computeDistancePerChild(layoutmanager, orientationhelper);
        if (f <= 0.0F) {
            i = ((flag) ? 1 : 0);
        } else {
            if (Math.abs(ai[0]) > Math.abs(ai[1]))
                i = ai[0];
            else
                i = ai[1];
            i = (int)Math.floor((float)i / f);
        }
        return i;
    }

    private View findCenterView(RecyclerView.LayoutManager layoutmanager, OrientationHelper orientationhelper) {
        int i1;
        View view;
        View view1;
        view = null;
        view1 = null;
        i1 = layoutmanager.getChildCount();
        if (i1 != 0) goto _L2; else goto _L1
_L1:
        return view1;
_L2:
        int i;
        int j;
        int k;
        int l;
        if (layoutmanager.getClipToPadding())
            j = orientationhelper.getStartAfterPadding() + orientationhelper.getTotalSpace() / 2;
        else
            j = orientationhelper.getEnd() / 2;
        i = 0x7fffffff;
        k = 0;
        view1 = view;
        if (k < i1) {
            view1 = layoutmanager.getChildAt(k);
            l = Math.abs((orientationhelper.getDecoratedStart(view1) + orientationhelper.getDecoratedMeasurement(view1) / 2) - j);
            if (l < i) {
                view = view1;
                i = l;
            }
            k++;
            break MISSING_BLOCK_LABEL_46;
        }
        continue; /* Loop/switch isn't completed */
        if (true) goto _L1; else goto _L3
_L3:
    }

    private OrientationHelper getHorizontalHelper(RecyclerView.LayoutManager layoutmanager) {
        if (mHorizontalHelper == null || mHorizontalHelper.mLayoutManager != layoutmanager)
            mHorizontalHelper = OrientationHelper.createHorizontalHelper(layoutmanager);
        return mHorizontalHelper;
    }

    private OrientationHelper getVerticalHelper(RecyclerView.LayoutManager layoutmanager) {
        if (mVerticalHelper == null || mVerticalHelper.mLayoutManager != layoutmanager)
            mVerticalHelper = OrientationHelper.createVerticalHelper(layoutmanager);
        return mVerticalHelper;
    }

    public int[] calculateDistanceToFinalSnap(RecyclerView.LayoutManager layoutmanager, View view) {
        int ai[] = new int[2];
        if (layoutmanager.canScrollHorizontally())
            ai[0] = distanceToCenter(layoutmanager, view, getHorizontalHelper(layoutmanager));
        else
            ai[0] = 0;
        if (layoutmanager.canScrollVertically())
            ai[1] = distanceToCenter(layoutmanager, view, getVerticalHelper(layoutmanager));
        else
            ai[1] = 0;
        return ai;
    }

    public View findSnapView(RecyclerView.LayoutManager layoutmanager) {
        if (layoutmanager.canScrollVertically())
            layoutmanager = findCenterView(layoutmanager, getVerticalHelper(layoutmanager));
        else
        if (layoutmanager.canScrollHorizontally())
            layoutmanager = findCenterView(layoutmanager, getHorizontalHelper(layoutmanager));
        else
            layoutmanager = null;
        return layoutmanager;
    }

    public int findTargetSnapPosition(RecyclerView.LayoutManager layoutmanager, int i, int j) {
        if (layoutmanager instanceof RecyclerView.SmoothScroller.ScrollVectorProvider) goto _L2; else goto _L1
_L1:
        i = -1;
_L4:
        return i;
_L2:
        int i1 = layoutmanager.getItemCount();
        if (i1 == 0) {
            i = -1;
        } else {
            View view = findSnapView(layoutmanager);
            if (view == null) {
                i = -1;
            } else {
                int j1 = layoutmanager.getPosition(view);
                if (j1 == -1) {
                    i = -1;
                } else {
                    PointF pointf = ((RecyclerView.SmoothScroller.ScrollVectorProvider)layoutmanager).computeScrollVectorForPosition(i1 - 1);
                    if (pointf == null) {
                        i = -1;
                    } else {
                        if (layoutmanager.canScrollHorizontally()) {
                            int k = estimateNextPositionDiffForFling(layoutmanager, getHorizontalHelper(layoutmanager), i, 0);
                            i = k;
                            if (pointf.x < 0.0F)
                                i = -k;
                        } else {
                            i = 0;
                        }
                        if (layoutmanager.canScrollVertically()) {
                            int l = estimateNextPositionDiffForFling(layoutmanager, getVerticalHelper(layoutmanager), 0, j);
                            j = l;
                            if (pointf.y < 0.0F)
                                j = -l;
                        } else {
                            j = 0;
                        }
                        if (!layoutmanager.canScrollVertically())
                            j = i;
                        if (j == 0) {
                            i = -1;
                        } else {
                            i = j1 + j;
                            j = i;
                            if (i < 0)
                                j = 0;
                            i = j;
                            if (j >= i1)
                                i = i1 - 1;
                        }
                    }
                }
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }
}
