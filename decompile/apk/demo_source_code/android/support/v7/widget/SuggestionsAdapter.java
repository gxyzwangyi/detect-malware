// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v7.widget;

import android.app.SearchManager;
import android.app.SearchableInfo;
import android.content.*;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageManager;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.database.Cursor;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.content.ContextCompat;
import android.support.v4.widget.ResourceCursorAdapter;
import android.text.SpannableString;
import android.text.TextUtils;
import android.text.style.TextAppearanceSpan;
import android.util.Log;
import android.util.TypedValue;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import java.io.*;
import java.util.List;
import java.util.WeakHashMap;

// Referenced classes of package android.support.v7.widget:
//            SearchView

class SuggestionsAdapter extends ResourceCursorAdapter
    implements android.view.View.OnClickListener {
    private static final class ChildViewCache {

        public final ImageView mIcon1;
        public final ImageView mIcon2;
        public final ImageView mIconRefine;
        public final TextView mText1;
        public final TextView mText2;

        public ChildViewCache(View view) {
            mText1 = (TextView)view.findViewById(0x1020014);
            mText2 = (TextView)view.findViewById(0x1020015);
            mIcon1 = (ImageView)view.findViewById(0x1020007);
            mIcon2 = (ImageView)view.findViewById(0x1020008);
            mIconRefine = (ImageView)view.findViewById(android.support.v7.appcompat.R.id.edit_query);
        }
    }


    private static final boolean DBG = false;
    static final int INVALID_INDEX = -1;
    private static final String LOG_TAG = "SuggestionsAdapter";
    private static final int QUERY_LIMIT = 50;
    static final int REFINE_ALL = 2;
    static final int REFINE_BY_ENTRY = 1;
    static final int REFINE_NONE = 0;
    private boolean mClosed;
    private final int mCommitIconResId;
    private int mFlagsCol;
    private int mIconName1Col;
    private int mIconName2Col;
    private final WeakHashMap mOutsideDrawablesCache;
    private final Context mProviderContext;
    private int mQueryRefinement;
    private final SearchManager mSearchManager;
    private final SearchView mSearchView;
    private final SearchableInfo mSearchable;
    private int mText1Col;
    private int mText2Col;
    private int mText2UrlCol;
    private ColorStateList mUrlColor;

    public SuggestionsAdapter(Context context, SearchView searchview, SearchableInfo searchableinfo, WeakHashMap weakhashmap) {
        super(context, searchview.getSuggestionRowLayout(), null, true);
        mClosed = false;
        mQueryRefinement = 1;
        mText1Col = -1;
        mText2Col = -1;
        mText2UrlCol = -1;
        mIconName1Col = -1;
        mIconName2Col = -1;
        mFlagsCol = -1;
        mSearchManager = (SearchManager)mContext.getSystemService("search");
        mSearchView = searchview;
        mSearchable = searchableinfo;
        mCommitIconResId = searchview.getSuggestionCommitIconResId();
        mProviderContext = context;
        mOutsideDrawablesCache = weakhashmap;
    }

    private Drawable checkIconCache(String s) {
        s = (android.graphics.drawable.Drawable.ConstantState)mOutsideDrawablesCache.get(s);
        if (s == null)
            s = null;
        else
            s = s.newDrawable();
        return s;
    }

    private CharSequence formatUrl(CharSequence charsequence) {
        if (mUrlColor == null) {
            TypedValue typedvalue = new TypedValue();
            mContext.getTheme().resolveAttribute(android.support.v7.appcompat.R.attr.textColorSearchUrl, typedvalue, true);
            mUrlColor = mContext.getResources().getColorStateList(typedvalue.resourceId);
        }
        SpannableString spannablestring = new SpannableString(charsequence);
        spannablestring.setSpan(new TextAppearanceSpan(null, 0, 0, mUrlColor, null), 0, charsequence.length(), 33);
        return spannablestring;
    }

    private Drawable getActivityIcon(ComponentName componentname) {
label0:
        {
            Object obj = null;
            Object obj1 = mContext.getPackageManager();
            int i;
            ActivityInfo activityinfo;
            try {
                activityinfo = ((PackageManager) (obj1)).getActivityInfo(componentname, 128);
            }
            // Misplaced declaration of an exception variable
            catch (ComponentName componentname) {
                Log.w("SuggestionsAdapter", componentname.toString());
                componentname = obj;
                if (false)
                    ;
                else
                    break label0;
            }
            i = activityinfo.getIconResource();
            if (i == 0) {
                componentname = obj;
            } else {
                obj1 = ((PackageManager) (obj1)).getDrawable(componentname.getPackageName(), i, activityinfo.applicationInfo);
                if (obj1 == null) {
                    Log.w("SuggestionsAdapter", (new StringBuilder()).append("Invalid icon resource ").append(i).append(" for ").append(componentname.flattenToShortString()).toString());
                    componentname = obj;
                } else {
                    componentname = ((ComponentName) (obj1));
                }
            }
        }
        return componentname;
    }

    private Drawable getActivityIconWithCache(ComponentName componentname) {
        Object obj = null;
        String s = componentname.flattenToShortString();
        if (mOutsideDrawablesCache.containsKey(s)) {
            componentname = (android.graphics.drawable.Drawable.ConstantState)mOutsideDrawablesCache.get(s);
            if (componentname == null)
                componentname = null;
            else
                componentname = componentname.newDrawable(mProviderContext.getResources());
        } else {
            Drawable drawable = getActivityIcon(componentname);
            if (drawable == null)
                componentname = obj;
            else
                componentname = drawable.getConstantState();
            mOutsideDrawablesCache.put(s, componentname);
            componentname = drawable;
        }
        return componentname;
    }

    public static String getColumnString(Cursor cursor, String s) {
        return getStringOrNull(cursor, cursor.getColumnIndex(s));
    }

    private Drawable getDefaultIcon1(Cursor cursor) {
        cursor = getActivityIconWithCache(mSearchable.getSearchActivity());
        if (cursor == null)
            cursor = mContext.getPackageManager().getDefaultActivityIcon();
        return cursor;
    }

    private Drawable getDrawable(Uri uri) {
        boolean flag = "android.resource".equals(uri.getScheme());
        if (!flag) goto _L2; else goto _L1
_L1:
        Object obj = getDrawableFromResourceUri(uri);
        uri = ((Uri) (obj));
_L4:
        return uri;
        Object obj1;
        obj1;
        try {
            obj1 = JVM INSTR new #284 <Class FileNotFoundException>;
            StringBuilder stringbuilder = JVM INSTR new #220 <Class StringBuilder>;
            stringbuilder.StringBuilder();
            ((FileNotFoundException) (obj1)).FileNotFoundException(stringbuilder.append("Resource does not exist: ").append(uri).toString());
            throw obj1;
        }
        // Misplaced declaration of an exception variable
        catch (Object obj1) {
            Log.w("SuggestionsAdapter", (new StringBuilder()).append("Icon not found: ").append(uri).append(", ").append(((FileNotFoundException) (obj1)).getMessage()).toString());
        }
        uri = null;
        continue; /* Loop/switch isn't completed */
_L2:
        Object obj2 = mProviderContext.getContentResolver().openInputStream(uri);
        if (obj2 != null)
            break MISSING_BLOCK_LABEL_159;
        obj2 = JVM INSTR new #284 <Class FileNotFoundException>;
        obj1 = JVM INSTR new #220 <Class StringBuilder>;
        ((StringBuilder) (obj1)).StringBuilder();
        ((FileNotFoundException) (obj2)).FileNotFoundException(((StringBuilder) (obj1)).append("Failed to open ").append(uri).toString());
        throw obj2;
        obj1 = Drawable.createFromStream(((InputStream) (obj2)), null);
        ((InputStream) (obj2)).close();
        uri = ((Uri) (obj1));
        continue; /* Loop/switch isn't completed */
        IOException ioexception1;
        ioexception1;
        obj2 = JVM INSTR new #220 <Class StringBuilder>;
        ((StringBuilder) (obj2)).StringBuilder();
        Log.e("SuggestionsAdapter", ((StringBuilder) (obj2)).append("Error closing icon stream for ").append(uri).toString(), ioexception1);
        uri = ((Uri) (obj1));
        if (true) goto _L4; else goto _L3
_L3:
        obj1;
        ((InputStream) (obj2)).close();
_L5:
        throw obj1;
        IOException ioexception;
        ioexception;
        StringBuilder stringbuilder1 = JVM INSTR new #220 <Class StringBuilder>;
        stringbuilder1.StringBuilder();
        Log.e("SuggestionsAdapter", stringbuilder1.append("Error closing icon stream for ").append(uri).toString(), ioexception);
          goto _L5
    }

    private Drawable getDrawableFromResourceValue(String s) {
        if (s != null && s.length() != 0 && !"0".equals(s)) goto _L2; else goto _L1
_L1:
        Object obj = null;
_L4:
        return ((Drawable) (obj));
_L2:
        int i;
        Drawable drawable;
        String s1;
        i = Integer.parseInt(s);
        obj = JVM INSTR new #220 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        s1 = ((StringBuilder) (obj)).append("android.resource://").append(mProviderContext.getPackageName()).append("/").append(i).toString();
        drawable = checkIconCache(s1);
        obj = drawable;
        if (drawable == null)
            try {
                obj = ContextCompat.getDrawable(mProviderContext, i);
                storeInIconCache(s1, ((Drawable) (obj)));
            }
            catch (NumberFormatException numberformatexception) {
                Drawable drawable1 = checkIconCache(s);
                numberformatexception = drawable1;
                if (drawable1 == null) {
                    numberformatexception = getDrawable(Uri.parse(s));
                    storeInIconCache(s, numberformatexception);
                }
            }
            catch (android.content.res.Resources.NotFoundException notfoundexception) {
                Log.w("SuggestionsAdapter", (new StringBuilder()).append("Icon resource not found: ").append(s).toString());
                notfoundexception = null;
            }
        if (true) goto _L4; else goto _L3
_L3:
    }

    private Drawable getIcon1(Cursor cursor) {
        if (mIconName1Col != -1) goto _L2; else goto _L1
_L1:
        Drawable drawable = null;
_L4:
        return drawable;
_L2:
        Drawable drawable1 = getDrawableFromResourceValue(cursor.getString(mIconName1Col));
        drawable = drawable1;
        if (drawable1 == null)
            drawable = getDefaultIcon1(cursor);
        if (true) goto _L4; else goto _L3
_L3:
    }

    private Drawable getIcon2(Cursor cursor) {
        if (mIconName2Col == -1)
            cursor = null;
        else
            cursor = getDrawableFromResourceValue(cursor.getString(mIconName2Col));
        return cursor;
    }

    private static String getStringOrNull(Cursor cursor, int i) {
        Object obj = null;
        if (i == -1)
            cursor = obj;
        else
            try {
                cursor = cursor.getString(i);
            }
            // Misplaced declaration of an exception variable
            catch (Cursor cursor) {
                Log.e("SuggestionsAdapter", "unexpected error retrieving valid column from cursor, did the remote process die?", cursor);
                cursor = obj;
            }
        return cursor;
    }

    private void setViewDrawable(ImageView imageview, Drawable drawable, int i) {
        imageview.setImageDrawable(drawable);
        if (drawable == null) {
            imageview.setVisibility(i);
        } else {
            imageview.setVisibility(0);
            drawable.setVisible(false, false);
            drawable.setVisible(true, false);
        }
    }

    private void setViewText(TextView textview, CharSequence charsequence) {
        textview.setText(charsequence);
        if (TextUtils.isEmpty(charsequence))
            textview.setVisibility(8);
        else
            textview.setVisibility(0);
    }

    private void storeInIconCache(String s, Drawable drawable) {
        if (drawable != null)
            mOutsideDrawablesCache.put(s, drawable.getConstantState());
    }

    private void updateSpinnerState(Cursor cursor) {
        if (cursor != null)
            cursor = cursor.getExtras();
        else
            cursor = null;
        if (cursor != null)
            if (!cursor.getBoolean("in_progress"));
    }

    public void bindView(View view, Context context, Cursor cursor) {
        context = (ChildViewCache)view.getTag();
        int i;
        if (mFlagsCol != -1)
            i = cursor.getInt(mFlagsCol);
        else
            i = 0;
        if (((ChildViewCache) (context)).mText1 != null) {
            view = getStringOrNull(cursor, mText1Col);
            setViewText(((ChildViewCache) (context)).mText1, view);
        }
        if (((ChildViewCache) (context)).mText2 == null) goto _L2; else goto _L1
_L1:
        view = getStringOrNull(cursor, mText2UrlCol);
        if (view != null)
            view = formatUrl(view);
        else
            view = getStringOrNull(cursor, mText2Col);
        if (!TextUtils.isEmpty(view)) goto _L4; else goto _L3
_L3:
        if (((ChildViewCache) (context)).mText1 != null) {
            ((ChildViewCache) (context)).mText1.setSingleLine(false);
            ((ChildViewCache) (context)).mText1.setMaxLines(2);
        }
_L6:
        setViewText(((ChildViewCache) (context)).mText2, view);
_L2:
        if (((ChildViewCache) (context)).mIcon1 != null)
            setViewDrawable(((ChildViewCache) (context)).mIcon1, getIcon1(cursor), 4);
        if (((ChildViewCache) (context)).mIcon2 != null)
            setViewDrawable(((ChildViewCache) (context)).mIcon2, getIcon2(cursor), 8);
        if (mQueryRefinement == 2 || mQueryRefinement == 1 && (i & 1) != 0) {
            ((ChildViewCache) (context)).mIconRefine.setVisibility(0);
            ((ChildViewCache) (context)).mIconRefine.setTag(((ChildViewCache) (context)).mText1.getText());
            ((ChildViewCache) (context)).mIconRefine.setOnClickListener(this);
        } else {
            ((ChildViewCache) (context)).mIconRefine.setVisibility(8);
        }
        return;
_L4:
        if (((ChildViewCache) (context)).mText1 != null) {
            ((ChildViewCache) (context)).mText1.setSingleLine(true);
            ((ChildViewCache) (context)).mText1.setMaxLines(1);
        }
        if (true) goto _L6; else goto _L5
_L5:
    }

    public void changeCursor(Cursor cursor) {
        if (!mClosed) goto _L2; else goto _L1
_L1:
        Log.w("SuggestionsAdapter", "Tried to change cursor after adapter was closed.");
        if (cursor != null)
            cursor.close();
_L4:
        return;
_L2:
        super.changeCursor(cursor);
        if (cursor != null)
            try {
                mText1Col = cursor.getColumnIndex("suggest_text_1");
                mText2Col = cursor.getColumnIndex("suggest_text_2");
                mText2UrlCol = cursor.getColumnIndex("suggest_text_2_url");
                mIconName1Col = cursor.getColumnIndex("suggest_icon_1");
                mIconName2Col = cursor.getColumnIndex("suggest_icon_2");
                mFlagsCol = cursor.getColumnIndex("suggest_flags");
            }
            // Misplaced declaration of an exception variable
            catch (Cursor cursor) {
                Log.e("SuggestionsAdapter", "error changing cursor and caching columns", cursor);
            }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void close() {
        changeCursor(null);
        mClosed = true;
    }

    public CharSequence convertToString(Cursor cursor) {
        Object obj1 = null;
        if (cursor != null) goto _L2; else goto _L1
_L1:
        Object obj = obj1;
_L4:
        return ((CharSequence) (obj));
_L2:
        obj = getColumnString(cursor, "suggest_intent_query");
        if (obj != null)
            continue; /* Loop/switch isn't completed */
        if (mSearchable.shouldRewriteQueryFromData()) {
            obj = getColumnString(cursor, "suggest_intent_data");
            if (obj != null)
                continue; /* Loop/switch isn't completed */
        }
        obj = obj1;
        if (mSearchable.shouldRewriteQueryFromText()) {
            cursor = getColumnString(cursor, "suggest_text_1");
            obj = obj1;
            if (cursor != null)
                obj = cursor;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    Drawable getDrawableFromResourceUri(Uri uri) {
        String s = uri.getAuthority();
        if (TextUtils.isEmpty(s))
            throw new FileNotFoundException((new StringBuilder()).append("No authority: ").append(uri).toString());
        Object obj;
        Resources resources;
        try {
            resources = mContext.getPackageManager().getResourcesForApplication(s);
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            throw new FileNotFoundException((new StringBuilder()).append("No package found for authority: ").append(uri).toString());
        }
        obj = uri.getPathSegments();
        if (obj == null)
            throw new FileNotFoundException((new StringBuilder()).append("No path: ").append(uri).toString());
        int i = ((List) (obj)).size();
        if (i == 1)
            try {
                i = Integer.parseInt((String)((List) (obj)).get(0));
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) {
                throw new FileNotFoundException((new StringBuilder()).append("Single path segment is not a resource ID: ").append(uri).toString());
            }
        else
        if (i == 2)
            i = resources.getIdentifier((String)((List) (obj)).get(1), (String)((List) (obj)).get(0), s);
        else
            throw new FileNotFoundException((new StringBuilder()).append("More than two path segments: ").append(uri).toString());
        if (i == 0)
            throw new FileNotFoundException((new StringBuilder()).append("No resource found for: ").append(uri).toString());
        else
            return resources.getDrawable(i);
    }

    public int getQueryRefinement() {
        return mQueryRefinement;
    }

    Cursor getSearchManagerSuggestions(SearchableInfo searchableinfo, String s, int i) {
        Object obj = null;
        if (searchableinfo != null) goto _L2; else goto _L1
_L1:
        return ((Cursor) (obj));
_L2:
        String s1 = searchableinfo.getSuggestAuthority();
        if (s1 != null) {
            obj = (new android.net.Uri.Builder()).scheme("content").authority(s1).query("").fragment("");
            s1 = searchableinfo.getSuggestPath();
            if (s1 != null)
                ((android.net.Uri.Builder) (obj)).appendEncodedPath(s1);
            ((android.net.Uri.Builder) (obj)).appendPath("search_suggest_query");
            s1 = searchableinfo.getSuggestSelection();
            if (s1 != null) {
                searchableinfo = new String[1];
                searchableinfo[0] = s;
            } else {
                ((android.net.Uri.Builder) (obj)).appendPath(s);
                searchableinfo = null;
            }
            if (i > 0)
                ((android.net.Uri.Builder) (obj)).appendQueryParameter("limit", String.valueOf(i));
            s = ((android.net.Uri.Builder) (obj)).build();
            obj = mContext.getContentResolver().query(s, null, s1, searchableinfo, null);
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    public View getView(int i, View view, ViewGroup viewgroup) {
        view = super.getView(i, view, viewgroup);
_L2:
        return view;
        RuntimeException runtimeexception;
        runtimeexception;
        Log.w("SuggestionsAdapter", "Search suggestions cursor threw exception.", runtimeexception);
        view = newView(mContext, mCursor, viewgroup);
        if (view != null)
            ((ChildViewCache)view.getTag()).mText1.setText(runtimeexception.toString());
        if (true) goto _L2; else goto _L1
_L1:
    }

    public boolean hasStableIds() {
        return false;
    }

    public View newView(Context context, Cursor cursor, ViewGroup viewgroup) {
        context = super.newView(context, cursor, viewgroup);
        context.setTag(new ChildViewCache(context));
        ((ImageView)context.findViewById(android.support.v7.appcompat.R.id.edit_query)).setImageResource(mCommitIconResId);
        return context;
    }

    public void notifyDataSetChanged() {
        super.notifyDataSetChanged();
        updateSpinnerState(getCursor());
    }

    public void notifyDataSetInvalidated() {
        super.notifyDataSetInvalidated();
        updateSpinnerState(getCursor());
    }

    public void onClick(View view) {
        view = ((View) (view.getTag()));
        if (view instanceof CharSequence)
            mSearchView.onQueryRefine((CharSequence)view);
    }

    public Cursor runQueryOnBackgroundThread(CharSequence charsequence) {
        if (charsequence == null)
            charsequence = "";
        else
            charsequence = charsequence.toString();
        if (mSearchView.getVisibility() == 0 && mSearchView.getWindowVisibility() == 0) goto _L2; else goto _L1
_L1:
        charsequence = null;
_L4:
        return charsequence;
_L2:
        charsequence = getSearchManagerSuggestions(mSearchable, charsequence, 50);
        if (charsequence != null)
            try {
                charsequence.getCount();
                continue; /* Loop/switch isn't completed */
            }
            // Misplaced declaration of an exception variable
            catch (CharSequence charsequence) {
                Log.w("SuggestionsAdapter", "Search suggestions query threw an exception.", charsequence);
            }
        charsequence = null;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void setQueryRefinement(int i) {
        mQueryRefinement = i;
    }
}
