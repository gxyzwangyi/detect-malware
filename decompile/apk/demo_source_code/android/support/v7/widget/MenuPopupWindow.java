// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v7.widget;

import android.content.Context;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.support.v7.view.menu.*;
import android.transition.Transition;
import android.util.AttributeSet;
import android.util.Log;
import android.view.*;
import android.widget.HeaderViewListAdapter;
import android.widget.PopupWindow;
import java.lang.reflect.Method;

// Referenced classes of package android.support.v7.widget:
//            ListPopupWindow, MenuItemHoverListener, DropDownListView

public class MenuPopupWindow extends ListPopupWindow
    implements MenuItemHoverListener {
    public static class MenuDropDownListView extends DropDownListView {

        final int mAdvanceKey;
        private MenuItemHoverListener mHoverListener;
        private MenuItem mHoveredMenuItem;
        final int mRetreatKey;

        public void clearSelection() {
            setSelection(-1);
        }

        public volatile boolean hasFocus() {
            return super.hasFocus();
        }

        public volatile boolean hasWindowFocus() {
            return super.hasWindowFocus();
        }

        public volatile boolean isFocused() {
            return super.isFocused();
        }

        public volatile boolean isInTouchMode() {
            return super.isInTouchMode();
        }

        public volatile boolean onForwardedEvent(MotionEvent motionevent, int i) {
            return super.onForwardedEvent(motionevent, i);
        }

        public boolean onHoverEvent(MotionEvent motionevent) {
            if (mHoverListener == null) goto _L2; else goto _L1
_L1:
            MenuItemImpl menuitemimpl;
            Object obj = getAdapter();
            int i;
            int j;
            MenuItem menuitem;
            if (obj instanceof HeaderViewListAdapter) {
                obj = (HeaderViewListAdapter)obj;
                i = ((HeaderViewListAdapter) (obj)).getHeadersCount();
                obj = (MenuAdapter)((HeaderViewListAdapter) (obj)).getWrappedAdapter();
            } else {
                i = 0;
                obj = (MenuAdapter)obj;
            }
            if (motionevent.getAction() == 10) goto _L4; else goto _L3
_L3:
            j = pointToPosition((int)motionevent.getX(), (int)motionevent.getY());
            if (j == -1) goto _L4; else goto _L5
_L5:
            i = j - i;
            if (i < 0 || i >= ((MenuAdapter) (obj)).getCount()) goto _L4; else goto _L6
_L6:
            menuitemimpl = ((MenuAdapter) (obj)).getItem(i);
_L8:
            menuitem = mHoveredMenuItem;
            if (menuitem != menuitemimpl) {
                obj = ((MenuAdapter) (obj)).getAdapterMenu();
                if (menuitem != null)
                    mHoverListener.onItemHoverExit(((MenuBuilder) (obj)), menuitem);
                mHoveredMenuItem = menuitemimpl;
                if (menuitemimpl != null)
                    mHoverListener.onItemHoverEnter(((MenuBuilder) (obj)), menuitemimpl);
            }
_L2:
            return super.onHoverEvent(motionevent);
_L4:
            menuitemimpl = null;
            if (true) goto _L8; else goto _L7
_L7:
        }

        public boolean onKeyDown(int i, KeyEvent keyevent) {
            ListMenuItemView listmenuitemview = (ListMenuItemView)getSelectedView();
            boolean flag;
            if (listmenuitemview != null && i == mAdvanceKey) {
                if (listmenuitemview.isEnabled() && listmenuitemview.getItemData().hasSubMenu())
                    performItemClick(listmenuitemview, getSelectedItemPosition(), getSelectedItemId());
                flag = true;
            } else
            if (listmenuitemview != null && i == mRetreatKey) {
                setSelection(-1);
                ((MenuAdapter)getAdapter()).getAdapterMenu().close(false);
                flag = true;
            } else {
                flag = super.onKeyDown(i, keyevent);
            }
            return flag;
        }

        public void setHoverListener(MenuItemHoverListener menuitemhoverlistener) {
            mHoverListener = menuitemhoverlistener;
        }

        public MenuDropDownListView(Context context, boolean flag) {
            super(context, flag);
            context = context.getResources().getConfiguration();
            if (android.os.Build.VERSION.SDK_INT >= 17 && 1 == context.getLayoutDirection()) {
                mAdvanceKey = 21;
                mRetreatKey = 22;
            } else {
                mAdvanceKey = 22;
                mRetreatKey = 21;
            }
        }
    }


    private static final String TAG = "MenuPopupWindow";
    private static Method sSetTouchModalMethod;
    private MenuItemHoverListener mHoverListener;

    public MenuPopupWindow(Context context, AttributeSet attributeset, int i, int j) {
        super(context, attributeset, i, j);
    }

    DropDownListView createDropDownListView(Context context, boolean flag) {
        context = new MenuDropDownListView(context, flag);
        context.setHoverListener(this);
        return context;
    }

    public void onItemHoverEnter(MenuBuilder menubuilder, MenuItem menuitem) {
        if (mHoverListener != null)
            mHoverListener.onItemHoverEnter(menubuilder, menuitem);
    }

    public void onItemHoverExit(MenuBuilder menubuilder, MenuItem menuitem) {
        if (mHoverListener != null)
            mHoverListener.onItemHoverExit(menubuilder, menuitem);
    }

    public void setEnterTransition(Object obj) {
        if (android.os.Build.VERSION.SDK_INT >= 23)
            mPopup.setEnterTransition((Transition)obj);
    }

    public void setExitTransition(Object obj) {
        if (android.os.Build.VERSION.SDK_INT >= 23)
            mPopup.setExitTransition((Transition)obj);
    }

    public void setHoverListener(MenuItemHoverListener menuitemhoverlistener) {
        mHoverListener = menuitemhoverlistener;
    }

    public void setTouchModal(boolean flag) {
        if (sSetTouchModalMethod == null)
            break MISSING_BLOCK_LABEL_28;
        sSetTouchModalMethod.invoke(mPopup, new Object[] {
            Boolean.valueOf(flag)
        });
_L1:
        return;
        Exception exception;
        exception;
        Log.i("MenuPopupWindow", "Could not invoke setTouchModal() on PopupWindow. Oh well.");
          goto _L1
    }

    static  {
        sSetTouchModalMethod = android/widget/PopupWindow.getDeclaredMethod("setTouchModal", new Class[] {
            Boolean.TYPE
        });
_L1:
        return;
        NoSuchMethodException nosuchmethodexception;
        nosuchmethodexception;
        Log.i("MenuPopupWindow", "Could not find method setTouchModal() on PopupWindow. Oh well.");
          goto _L1
    }
}
