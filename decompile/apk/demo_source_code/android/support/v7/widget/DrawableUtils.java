// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v7.widget;

import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.DrawableContainer;
import android.graphics.drawable.GradientDrawable;
import android.graphics.drawable.InsetDrawable;
import android.graphics.drawable.LayerDrawable;
import android.graphics.drawable.ScaleDrawable;
import android.support.v4.graphics.drawable.DrawableCompat;
import android.support.v4.graphics.drawable.DrawableWrapper;
import android.util.Log;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

// Referenced classes of package android.support.v7.widget:
//            ThemeUtils

public class DrawableUtils {

    public static final Rect INSETS_NONE;
    private static final String TAG = "DrawableUtils";
    private static final String VECTOR_DRAWABLE_CLAZZ_NAME = "android.graphics.drawable.VectorDrawable";
    private static Class sInsetsClazz = Class.forName("android.graphics.Insets");

    private DrawableUtils() {
    }

    public static boolean canSafelyMutateDrawable(Drawable drawable) {
        if (android.os.Build.VERSION.SDK_INT >= 15 || !(drawable instanceof InsetDrawable)) goto _L2; else goto _L1
_L1:
        boolean flag = false;
_L4:
        return flag;
_L2:
        if (android.os.Build.VERSION.SDK_INT < 15 && (drawable instanceof GradientDrawable)) {
            flag = false;
            continue; /* Loop/switch isn't completed */
        }
        if (android.os.Build.VERSION.SDK_INT < 17 && (drawable instanceof LayerDrawable)) {
            flag = false;
            continue; /* Loop/switch isn't completed */
        }
        if (drawable instanceof DrawableContainer) {
            drawable = drawable.getConstantState();
            if (drawable instanceof android.graphics.drawable.DrawableContainer.DrawableContainerState) {
                drawable = ((android.graphics.drawable.DrawableContainer.DrawableContainerState)drawable).getChildren();
                int j = drawable.length;
                int i = 0;
                do {
                    if (i >= j)
                        break;
                    if (!canSafelyMutateDrawable(drawable[i])) {
                        flag = false;
                        continue; /* Loop/switch isn't completed */
                    }
                    i++;
                } while (true);
            }
        } else {
            if (drawable instanceof DrawableWrapper) {
                flag = canSafelyMutateDrawable(((DrawableWrapper)drawable).getWrappedDrawable());
                continue; /* Loop/switch isn't completed */
            }
            if (drawable instanceof android.support.v7.graphics.drawable.DrawableWrapper) {
                flag = canSafelyMutateDrawable(((android.support.v7.graphics.drawable.DrawableWrapper)drawable).getWrappedDrawable());
                continue; /* Loop/switch isn't completed */
            }
            if (drawable instanceof ScaleDrawable) {
                flag = canSafelyMutateDrawable(((ScaleDrawable)drawable).getDrawable());
                continue; /* Loop/switch isn't completed */
            }
        }
        flag = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    static void fixDrawable(Drawable drawable) {
        if (android.os.Build.VERSION.SDK_INT == 21 && "android.graphics.drawable.VectorDrawable".equals(drawable.getClass().getName()))
            fixVectorDrawableTinting(drawable);
    }

    private static void fixVectorDrawableTinting(Drawable drawable) {
        int ai[] = drawable.getState();
        if (ai == null || ai.length == 0)
            drawable.setState(ThemeUtils.CHECKED_STATE_SET);
        else
            drawable.setState(ThemeUtils.EMPTY_STATE_SET);
        drawable.setState(ai);
    }

    public static Rect getOpticalBounds(Drawable drawable) {
        if (sInsetsClazz == null) goto _L2; else goto _L1
_L1:
        Object obj;
        drawable = DrawableCompat.unwrap(drawable);
        obj = drawable.getClass().getMethod("getOpticalInsets", new Class[0]).invoke(drawable, new Object[0]);
        if (obj == null) goto _L2; else goto _L3
_L3:
        int j;
        Rect rect;
        Field afield[];
        rect = JVM INSTR new #22  <Class Rect>;
        rect.Rect();
        afield = sInsetsClazz.getFields();
        j = afield.length;
        int i = 0;
_L16:
        drawable = rect;
        if (i >= j) goto _L5; else goto _L4
_L4:
        Field field = afield[i];
        drawable = field.getName();
        byte byte0 = -1;
        drawable.hashCode();
        JVM INSTR lookupswitch 4: default 132
    //                   -1383228885: 212
    //                   115029: 184
    //                   3317767: 170
    //                   108511772: 198;
           goto _L6 _L7 _L8 _L9 _L10
_L6:
        byte0;
        JVM INSTR tableswitch 0 3: default 164
    //                   0 226
    //                   1 256
    //                   2 271
    //                   3 286;
           goto _L11 _L12 _L13 _L14 _L15
_L11:
        i++;
          goto _L16
_L9:
        if (!drawable.equals("left")) goto _L6; else goto _L17
_L17:
        byte0 = 0;
          goto _L6
_L8:
        if (!drawable.equals("top")) goto _L6; else goto _L18
_L18:
        byte0 = 1;
          goto _L6
_L10:
        if (!drawable.equals("right")) goto _L6; else goto _L19
_L19:
        byte0 = 2;
          goto _L6
_L7:
        if (!drawable.equals("bottom")) goto _L6; else goto _L20
_L20:
        byte0 = 3;
          goto _L6
_L12:
        rect.left = field.getInt(obj);
          goto _L11
        drawable;
        Log.e("DrawableUtils", "Couldn't obtain the optical insets. Ignoring.");
_L2:
        drawable = INSETS_NONE;
_L5:
        return drawable;
_L13:
        rect.top = field.getInt(obj);
          goto _L11
_L14:
        rect.right = field.getInt(obj);
          goto _L11
_L15:
        rect.bottom = field.getInt(obj);
          goto _L11
    }

    static android.graphics.PorterDuff.Mode parseTintMode(int i, android.graphics.PorterDuff.Mode mode) {
        android.graphics.PorterDuff.Mode mode1 = mode;
        i;
        JVM INSTR tableswitch 3 16: default 72
    //                   3 76
    //                   4 74
    //                   5 83
    //                   6 74
    //                   7 74
    //                   8 74
    //                   9 90
    //                   10 74
    //                   11 74
    //                   12 74
    //                   13 74
    //                   14 97
    //                   15 104
    //                   16 111;
           goto _L1 _L2 _L3 _L4 _L3 _L3 _L3 _L5 _L3 _L3 _L3 _L3 _L6 _L7 _L8
_L3:
        break; /* Loop/switch isn't completed */
_L1:
        mode1 = mode;
_L10:
        return mode1;
_L2:
        mode1 = android.graphics.PorterDuff.Mode.SRC_OVER;
        continue; /* Loop/switch isn't completed */
_L4:
        mode1 = android.graphics.PorterDuff.Mode.SRC_IN;
        continue; /* Loop/switch isn't completed */
_L5:
        mode1 = android.graphics.PorterDuff.Mode.SRC_ATOP;
        continue; /* Loop/switch isn't completed */
_L6:
        mode1 = android.graphics.PorterDuff.Mode.MULTIPLY;
        continue; /* Loop/switch isn't completed */
_L7:
        mode1 = android.graphics.PorterDuff.Mode.SCREEN;
        continue; /* Loop/switch isn't completed */
_L8:
        mode1 = mode;
        if (android.os.Build.VERSION.SDK_INT >= 11)
            mode1 = android.graphics.PorterDuff.Mode.valueOf("ADD");
        if (true) goto _L10; else goto _L9
_L9:
    }

    static  {
        INSETS_NONE = new Rect();
        if (android.os.Build.VERSION.SDK_INT < 18)
            break MISSING_BLOCK_LABEL_26;
_L2:
        return;
        ClassNotFoundException classnotfoundexception;
        classnotfoundexception;
        if (true) goto _L2; else goto _L1
_L1:
    }
}
