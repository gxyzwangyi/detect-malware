// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v7.widget;

import android.content.Context;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.drawable.Drawable;
import android.support.v7.view.menu.*;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.*;
import android.view.accessibility.AccessibilityEvent;

// Referenced classes of package android.support.v7.widget:
//            LinearLayoutCompat, ActionMenuPresenter, ViewUtils

public class ActionMenuView extends LinearLayoutCompat
    implements android.support.v7.view.menu.MenuBuilder.ItemInvoker, MenuView {
    public static interface ActionMenuChildView {

        public abstract boolean needsDividerAfter();

        public abstract boolean needsDividerBefore();
    }

    private class ActionMenuPresenterCallback
        implements android.support.v7.view.menu.MenuPresenter.Callback {

        final ActionMenuView this$0;

        public void onCloseMenu(MenuBuilder menubuilder, boolean flag) {
        }

        public boolean onOpenSubMenu(MenuBuilder menubuilder) {
            return false;
        }

        ActionMenuPresenterCallback() {
            this$0 = ActionMenuView.this;
            Object();
        }
    }

    public static class LayoutParams extends LinearLayoutCompat.LayoutParams {

        public int cellsUsed;
        public boolean expandable;
        boolean expanded;
        public int extraPixels;
        public boolean isOverflowButton;
        public boolean preventEdgeOffset;

        public LayoutParams(int i, int j) {
            LayoutParams(i, j);
            isOverflowButton = false;
        }

        LayoutParams(int i, int j, boolean flag) {
            LayoutParams(i, j);
            isOverflowButton = flag;
        }

        public LayoutParams(Context context, AttributeSet attributeset) {
            LayoutParams(context, attributeset);
        }

        public LayoutParams(LayoutParams layoutparams) {
            LayoutParams(layoutparams);
            isOverflowButton = layoutparams.isOverflowButton;
        }

        public LayoutParams(android.view.ViewGroup.LayoutParams layoutparams) {
            LayoutParams(layoutparams);
        }
    }

    private class MenuBuilderCallback
        implements android.support.v7.view.menu.MenuBuilder.Callback {

        final ActionMenuView this$0;

        public boolean onMenuItemSelected(MenuBuilder menubuilder, MenuItem menuitem) {
            boolean flag;
            if (mOnMenuItemClickListener != null && mOnMenuItemClickListener.onMenuItemClick(menuitem))
                flag = true;
            else
                flag = false;
            return flag;
        }

        public void onMenuModeChange(MenuBuilder menubuilder) {
            if (mMenuBuilderCallback != null)
                mMenuBuilderCallback.onMenuModeChange(menubuilder);
        }

        MenuBuilderCallback() {
            this$0 = ActionMenuView.this;
            Object();
        }
    }

    public static interface OnMenuItemClickListener {

        public abstract boolean onMenuItemClick(MenuItem menuitem);
    }


    static final int GENERATED_ITEM_PADDING = 4;
    static final int MIN_CELL_SIZE = 56;
    private static final String TAG = "ActionMenuView";
    private android.support.v7.view.menu.MenuPresenter.Callback mActionMenuPresenterCallback;
    private boolean mFormatItems;
    private int mFormatItemsWidth;
    private int mGeneratedItemPadding;
    private MenuBuilder mMenu;
    android.support.v7.view.menu.MenuBuilder.Callback mMenuBuilderCallback;
    private int mMinCellSize;
    OnMenuItemClickListener mOnMenuItemClickListener;
    private Context mPopupContext;
    private int mPopupTheme;
    private ActionMenuPresenter mPresenter;
    private boolean mReserveOverflow;

    public ActionMenuView(Context context) {
        ActionMenuView(context, null);
    }

    public ActionMenuView(Context context, AttributeSet attributeset) {
        LinearLayoutCompat(context, attributeset);
        setBaselineAligned(false);
        float f = context.getResources().getDisplayMetrics().density;
        mMinCellSize = (int)(56F * f);
        mGeneratedItemPadding = (int)(f * 4F);
        mPopupContext = context;
        mPopupTheme = 0;
    }

    static int measureChildForCells(View view, int i, int j, int k, int l) {
        boolean flag1 = false;
        LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
        int i1 = android.view.View.MeasureSpec.makeMeasureSpec(android.view.View.MeasureSpec.getSize(k) - l, android.view.View.MeasureSpec.getMode(k));
        boolean flag;
        ActionMenuItemView actionmenuitemview;
        if (view instanceof ActionMenuItemView)
            actionmenuitemview = (ActionMenuItemView)view;
        else
            actionmenuitemview = null;
        if (actionmenuitemview != null && actionmenuitemview.hasText())
            l = 1;
        else
            l = 0;
        if (j > 0 && (l == 0 || j >= 2)) {
            view.measure(android.view.View.MeasureSpec.makeMeasureSpec(i * j, 0x80000000), i1);
            int j1 = view.getMeasuredWidth();
            k = j1 / i;
            j = k;
            if (j1 % i != 0)
                j = k + 1;
            k = j;
            if (l != 0) {
                k = j;
                if (j < 2)
                    k = 2;
            }
        } else {
            k = 0;
        }
        flag = flag1;
        if (!layoutparams.isOverflowButton) {
            flag = flag1;
            if (l != 0)
                flag = true;
        }
        layoutparams.expandable = flag;
        layoutparams.cellsUsed = k;
        view.measure(android.view.View.MeasureSpec.makeMeasureSpec(k * i, 0x40000000), i1);
        return k;
    }

    private void onMeasureExactFormat(int i, int j) {
        int i3;
        int k3;
        int l3;
        int i4;
        int j4;
        l3 = android.view.View.MeasureSpec.getMode(j);
        int k = android.view.View.MeasureSpec.getSize(i);
        k3 = android.view.View.MeasureSpec.getSize(j);
        i = getPaddingLeft();
        int i1 = getPaddingRight();
        i3 = getPaddingTop() + getPaddingBottom();
        i4 = getChildMeasureSpec(j, i3, -2);
        j4 = k - (i + i1);
        i = j4 / mMinCellSize;
        j = mMinCellSize;
        if (i != 0) goto _L2; else goto _L1
_L1:
        setMeasuredDimension(j4, 0);
_L4:
        return;
_L2:
        int k4 = mMinCellSize + (j4 % j) / i;
        int l = 0;
        int i2 = 0;
        int l1 = 0;
        int j2 = 0;
        int k1 = 0;
        long l5 = 0L;
        int l4 = getChildCount();
        int k2 = 0;
        while (k2 < l4)  {
            Object obj1 = getChildAt(k2);
            int j1;
            if (((View) (obj1)).getVisibility() == 8) {
                j1 = l;
                j = i2;
                l = i;
                i = j2;
            } else {
                boolean flag = obj1 instanceof ActionMenuItemView;
                j2++;
                if (flag)
                    ((View) (obj1)).setPadding(mGeneratedItemPadding, 0, mGeneratedItemPadding, 0);
                Object obj = (LayoutParams)((View) (obj1)).getLayoutParams();
                obj.expanded = false;
                obj.extraPixels = 0;
                obj.cellsUsed = 0;
                obj.expandable = false;
                obj.leftMargin = 0;
                obj.rightMargin = 0;
                int l2;
                int j3;
                if (flag && ((ActionMenuItemView)obj1).hasText())
                    flag = true;
                else
                    flag = false;
                obj.preventEdgeOffset = flag;
                if (((LayoutParams) (obj)).isOverflowButton)
                    j = 1;
                else
                    j = i;
                j3 = measureChildForCells(((View) (obj1)), k4, j, i4, i3);
                i2 = Math.max(i2, j3);
                float f;
                float f1;
                float f2;
                long l7;
                if (((LayoutParams) (obj)).expandable)
                    j = l1 + 1;
                else
                    j = l1;
                if (((LayoutParams) (obj)).isOverflowButton)
                    j1 = 1;
                else
                    j1 = k1;
                l2 = i - j3;
                l = Math.max(l, ((View) (obj1)).getMeasuredHeight());
                if (j3 == 1) {
                    long l6 = 1 << k2;
                    l1 = j;
                    l5 = l6 | l5;
                    j = i2;
                    i = j2;
                    k1 = j1;
                    j1 = l;
                    l = l2;
                } else {
                    i = j2;
                    k1 = i2;
                    i2 = l;
                    l = l2;
                    l1 = j;
                    j = k1;
                    k1 = j1;
                    j1 = i2;
                }
            }
            k2++;
            j2 = i;
            i = l;
            i2 = j;
            l = j1;
        }
        if (k1 != 0 && j2 == 2)
            l2 = 1;
        else
            l2 = 0;
        j1 = 0;
        k2 = i;
label0:
        do {
label1:
            {
                if (l1 > 0 && k2 > 0) {
                    i = 0x7fffffff;
                    l7 = 0L;
                    j = 0;
                    i3 = 0;
                    while (i3 < l4)  {
                        obj = (LayoutParams)getChildAt(i3).getLayoutParams();
                        if (!((LayoutParams) (obj)).expandable) {
                            j3 = j;
                            j = i;
                            i = j3;
                        } else
                        if (((LayoutParams) (obj)).cellsUsed < i) {
                            j = ((LayoutParams) (obj)).cellsUsed;
                            l7 = 1 << i3;
                            i = 1;
                        } else
                        if (((LayoutParams) (obj)).cellsUsed == i) {
                            l7 |= 1 << i3;
                            j3 = j + 1;
                            j = i;
                            i = j3;
                        } else {
                            j3 = j;
                            j = i;
                            i = j3;
                        }
                        j3 = i3 + 1;
                        i3 = j;
                        j = i;
                        i = i3;
                        i3 = j3;
                    }
                    l5 |= l7;
                    if (j <= k2)
                        break label1;
                }
                if (k1 == 0 && j2 == 1)
                    i = 1;
                else
                    i = 0;
                if (k2 > 0 && l5 != 0L && (k2 < j2 - 1 || i != 0 || i2 > 1)) {
                    f2 = Long.bitCount(l5);
                    f = f2;
                    if (i == 0) {
                        f1 = f2;
                        if ((1L & l5) != 0L) {
                            f1 = f2;
                            if (!((LayoutParams)getChildAt(0).getLayoutParams()).preventEdgeOffset)
                                f1 = f2 - 0.5F;
                        }
                        f = f1;
                        if (((long)(1 << l4 - 1) & l5) != 0L) {
                            f = f1;
                            if (!((LayoutParams)getChildAt(l4 - 1).getLayoutParams()).preventEdgeOffset)
                                f = f1 - 0.5F;
                        }
                    }
                    if (f > 0.0F)
                        j = (int)((float)(k2 * k4) / f);
                    else
                        j = 0;
                    k1 = 0;
                    i = j1;
                    j1 = k1;
                    do {
                        k1 = i;
                        if (j1 >= l4)
                            break;
                        if (((long)(1 << j1) & l5) != 0L) {
                            obj1 = getChildAt(j1);
                            obj = (LayoutParams)((View) (obj1)).getLayoutParams();
                            if (obj1 instanceof ActionMenuItemView) {
                                obj.extraPixels = j;
                                obj.expanded = true;
                                if (j1 == 0 && !((LayoutParams) (obj)).preventEdgeOffset)
                                    obj.leftMargin = -j / 2;
                                i = 1;
                            } else
                            if (((LayoutParams) (obj)).isOverflowButton) {
                                obj.extraPixels = j;
                                obj.expanded = true;
                                obj.rightMargin = -j / 2;
                                i = 1;
                            } else {
                                if (j1 != 0)
                                    obj.leftMargin = j / 2;
                                if (j1 != l4 - 1)
                                    obj.rightMargin = j / 2;
                            }
                        }
                        j1++;
                    } while (true);
                } else {
                    k1 = j1;
                }
                break label0;
            }
            j1 = 0;
            j = k2;
            while (j1 < l4)  {
                obj1 = getChildAt(j1);
                obj = (LayoutParams)((View) (obj1)).getLayoutParams();
                if (((long)(1 << j1) & l7) == 0L) {
                    if (((LayoutParams) (obj)).cellsUsed == i + 1)
                        l5 |= 1 << j1;
                } else {
                    if (l2 != 0 && ((LayoutParams) (obj)).preventEdgeOffset && j == 1)
                        ((View) (obj1)).setPadding(mGeneratedItemPadding + k4, 0, mGeneratedItemPadding, 0);
                    obj.cellsUsed = ((LayoutParams) (obj)).cellsUsed + 1;
                    obj.expanded = true;
                    j--;
                }
                j1++;
            }
            j1 = 1;
            k2 = j;
        } while (true);
        if (k1 != 0) {
            i = 0;
            while (i < l4)  {
                obj = getChildAt(i);
                obj1 = (LayoutParams)((View) (obj)).getLayoutParams();
                if (((LayoutParams) (obj1)).expanded) {
                    j = ((LayoutParams) (obj1)).cellsUsed;
                    ((View) (obj)).measure(android.view.View.MeasureSpec.makeMeasureSpec(((LayoutParams) (obj1)).extraPixels + j * k4, 0x40000000), i4);
                }
                i++;
            }
        }
        if (l3 == 0x40000000)
            l = k3;
        setMeasuredDimension(j4, l);
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected boolean checkLayoutParams(android.view.ViewGroup.LayoutParams layoutparams) {
        boolean flag;
        if (layoutparams != null && (layoutparams instanceof LayoutParams))
            flag = true;
        else
            flag = false;
        return flag;
    }

    public void dismissPopupMenus() {
        if (mPresenter != null)
            mPresenter.dismissPopupMenus();
    }

    public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent accessibilityevent) {
        return false;
    }

    protected LayoutParams generateDefaultLayoutParams() {
        LayoutParams layoutparams = new LayoutParams(-2, -2);
        layoutparams.gravity = 16;
        return layoutparams;
    }

    protected volatile LinearLayoutCompat.LayoutParams generateDefaultLayoutParams() {
        return generateDefaultLayoutParams();
    }

    protected volatile android.view.ViewGroup.LayoutParams generateDefaultLayoutParams() {
        return generateDefaultLayoutParams();
    }

    public LayoutParams generateLayoutParams(AttributeSet attributeset) {
        return new LayoutParams(getContext(), attributeset);
    }

    protected LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams layoutparams) {
        Object obj;
        if (layoutparams != null) {
            if (layoutparams instanceof LayoutParams)
                layoutparams = new LayoutParams((LayoutParams)layoutparams);
            else
                layoutparams = new LayoutParams(layoutparams);
            obj = layoutparams;
            if (((LayoutParams) (layoutparams)).gravity <= 0) {
                layoutparams.gravity = 16;
                obj = layoutparams;
            }
        } else {
            obj = generateDefaultLayoutParams();
        }
        return ((LayoutParams) (obj));
    }

    public volatile LinearLayoutCompat.LayoutParams generateLayoutParams(AttributeSet attributeset) {
        return generateLayoutParams(attributeset);
    }

    protected volatile LinearLayoutCompat.LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams layoutparams) {
        return generateLayoutParams(layoutparams);
    }

    public volatile android.view.ViewGroup.LayoutParams generateLayoutParams(AttributeSet attributeset) {
        return generateLayoutParams(attributeset);
    }

    protected volatile android.view.ViewGroup.LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams layoutparams) {
        return generateLayoutParams(layoutparams);
    }

    public LayoutParams generateOverflowButtonLayoutParams() {
        LayoutParams layoutparams = generateDefaultLayoutParams();
        layoutparams.isOverflowButton = true;
        return layoutparams;
    }

    public Menu getMenu() {
        if (mMenu == null) {
            Object obj = getContext();
            mMenu = new MenuBuilder(((Context) (obj)));
            mMenu.setCallback(new MenuBuilderCallback());
            mPresenter = new ActionMenuPresenter(((Context) (obj)));
            mPresenter.setReserveOverflow(true);
            ActionMenuPresenter actionmenupresenter = mPresenter;
            if (mActionMenuPresenterCallback != null)
                obj = mActionMenuPresenterCallback;
            else
                obj = new ActionMenuPresenterCallback();
            actionmenupresenter.setCallback(((android.support.v7.view.menu.MenuPresenter.Callback) (obj)));
            mMenu.addMenuPresenter(mPresenter, mPopupContext);
            mPresenter.setMenuView(this);
        }
        return mMenu;
    }

    public Drawable getOverflowIcon() {
        getMenu();
        return mPresenter.getOverflowIcon();
    }

    public int getPopupTheme() {
        return mPopupTheme;
    }

    public int getWindowAnimations() {
        return 0;
    }

    protected boolean hasSupportDividerBeforeChildAt(int i) {
        boolean flag1 = false;
        if (i != 0) goto _L2; else goto _L1
_L1:
        boolean flag = false;
_L4:
        return flag;
_L2:
        View view1 = getChildAt(i - 1);
        View view = getChildAt(i);
        flag = flag1;
        if (i < getChildCount()) {
            flag = flag1;
            if (view1 instanceof ActionMenuChildView)
                flag = false | ((ActionMenuChildView)view1).needsDividerAfter();
        }
        if (i > 0 && (view instanceof ActionMenuChildView))
            flag = ((ActionMenuChildView)view).needsDividerBefore() | flag;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public boolean hideOverflowMenu() {
        boolean flag;
        if (mPresenter != null && mPresenter.hideOverflowMenu())
            flag = true;
        else
            flag = false;
        return flag;
    }

    public void initialize(MenuBuilder menubuilder) {
        mMenu = menubuilder;
    }

    public boolean invokeItem(MenuItemImpl menuitemimpl) {
        return mMenu.performItemAction(menuitemimpl, 0);
    }

    public boolean isOverflowMenuShowPending() {
        boolean flag;
        if (mPresenter != null && mPresenter.isOverflowMenuShowPending())
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean isOverflowMenuShowing() {
        boolean flag;
        if (mPresenter != null && mPresenter.isOverflowMenuShowing())
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean isOverflowReserved() {
        return mReserveOverflow;
    }

    public void onConfigurationChanged(Configuration configuration) {
        onConfigurationChanged(configuration);
        if (mPresenter != null) {
            mPresenter.updateMenuView(false);
            if (mPresenter.isOverflowMenuShowing()) {
                mPresenter.hideOverflowMenu();
                mPresenter.showOverflowMenu();
            }
        }
    }

    public void onDetachedFromWindow() {
        onDetachedFromWindow();
        dismissPopupMenus();
    }

    protected void onLayout(boolean flag, int i, int j, int k, int l) {
        if (mFormatItems) goto _L2; else goto _L1
_L1:
        onLayout(flag, i, j, k, l);
_L4:
        return;
_L2:
        int i1;
        int l1;
        int j4;
        int k4;
        k4 = getChildCount();
        j4 = (l - j) / 2;
        int l4 = getDividerWidth();
        l = 0;
        j = 0;
        l1 = k - i - getPaddingRight() - getPaddingLeft();
        i1 = 0;
        flag = ViewUtils.isLayoutRtl(this);
        int k2 = 0;
        while (k2 < k4)  {
            View view2 = getChildAt(k2);
            int i3;
            if (view2.getVisibility() == 8) {
                int l2 = i1;
                i1 = l1;
                l1 = l;
                l = j;
                j = l2;
            } else {
                LayoutParams layoutparams = (LayoutParams)view2.getLayoutParams();
                if (layoutparams.isOverflowButton) {
                    int j3 = view2.getMeasuredWidth();
                    i1 = j3;
                    if (hasSupportDividerBeforeChildAt(k2))
                        i1 = j3 + l4;
                    int i5 = view2.getMeasuredHeight();
                    int l3;
                    int j5;
                    if (flag) {
                        j3 = getPaddingLeft();
                        j3 = layoutparams.leftMargin + j3;
                        l3 = j3 + i1;
                    } else {
                        l3 = getWidth() - getPaddingRight() - layoutparams.rightMargin;
                        j3 = l3 - i1;
                    }
                    j5 = j4 - i5 / 2;
                    view2.layout(j3, j5, l3, i5 + j5);
                    i1 = l1 - i1;
                    l3 = 1;
                    j3 = j;
                    l1 = l;
                    j = l3;
                    l = j3;
                } else {
                    int i4 = view2.getMeasuredWidth() + layoutparams.leftMargin + layoutparams.rightMargin;
                    int k3 = l + i4;
                    l = k3;
                    if (hasSupportDividerBeforeChildAt(k2))
                        l = k3 + l4;
                    i4 = l1 - i4;
                    k3 = j + 1;
                    l1 = l;
                    j = i1;
                    i1 = i4;
                    l = k3;
                }
            }
            i3 = k2 + 1;
            k2 = l1;
            l1 = i1;
            i1 = j;
            j = l;
            l = k2;
            k2 = i3;
        }
        if (k4 != 1 || i1 != 0)
            break; /* Loop/switch isn't completed */
        View view = getChildAt(0);
        j = view.getMeasuredWidth();
        l = view.getMeasuredHeight();
        i = (k - i) / 2 - j / 2;
        k = j4 - l / 2;
        view.layout(i, k, j + i, l + k);
        if (true) goto _L4; else goto _L3
_L3:
        if (i1 != 0)
            i = 0;
        else
            i = 1;
        i = j - i;
        if (i > 0)
            i = l1 / i;
        else
            i = 0;
        k = Math.max(0, i);
        if (!flag)
            break; /* Loop/switch isn't completed */
        i = getWidth() - getPaddingRight();
        j = 0;
        while (j < k4)  {
            View view3 = getChildAt(j);
            LayoutParams layoutparams1 = (LayoutParams)view3.getLayoutParams();
            if (view3.getVisibility() != 8 && !layoutparams1.isOverflowButton) {
                int i2 = i - layoutparams1.rightMargin;
                l = view3.getMeasuredWidth();
                int j1 = view3.getMeasuredHeight();
                i = j4 - j1 / 2;
                view3.layout(i2 - l, i, i2, j1 + i);
                i = i2 - (layoutparams1.leftMargin + l + k);
            }
            j++;
        }
        if (true) goto _L4; else goto _L5
_L5:
        i = getPaddingLeft();
        j = 0;
        while (j < k4)  {
            View view1 = getChildAt(j);
            LayoutParams layoutparams2 = (LayoutParams)view1.getLayoutParams();
            if (view1.getVisibility() != 8 && !layoutparams2.isOverflowButton) {
                int j2 = i + layoutparams2.leftMargin;
                i = view1.getMeasuredWidth();
                int k1 = view1.getMeasuredHeight();
                l = j4 - k1 / 2;
                view1.layout(j2, l, j2 + i, k1 + l);
                i = layoutparams2.rightMargin + i + k + j2;
            }
            j++;
        }
        if (true) goto _L4; else goto _L6
_L6:
    }

    protected void onMeasure(int i, int j) {
        boolean flag1 = mFormatItems;
        int k;
        int i1;
        boolean flag;
        if (android.view.View.MeasureSpec.getMode(i) == 0x40000000)
            flag = true;
        else
            flag = false;
        mFormatItems = flag;
        if (flag1 != mFormatItems)
            mFormatItemsWidth = 0;
        k = android.view.View.MeasureSpec.getSize(i);
        if (mFormatItems && mMenu != null && k != mFormatItemsWidth) {
            mFormatItemsWidth = k;
            mMenu.onItemsChanged(true);
        }
        i1 = getChildCount();
        if (mFormatItems && i1 > 0) {
            onMeasureExactFormat(i, j);
        } else {
            for (int l = 0; l < i1; l++) {
                LayoutParams layoutparams = (LayoutParams)getChildAt(l).getLayoutParams();
                layoutparams.rightMargin = 0;
                layoutparams.leftMargin = 0;
            }

            onMeasure(i, j);
        }
    }

    public MenuBuilder peekMenu() {
        return mMenu;
    }

    public void setExpandedActionViewsExclusive(boolean flag) {
        mPresenter.setExpandedActionViewsExclusive(flag);
    }

    public void setMenuCallbacks(android.support.v7.view.menu.MenuPresenter.Callback callback, android.support.v7.view.menu.MenuBuilder.Callback callback1) {
        mActionMenuPresenterCallback = callback;
        mMenuBuilderCallback = callback1;
    }

    public void setOnMenuItemClickListener(OnMenuItemClickListener onmenuitemclicklistener) {
        mOnMenuItemClickListener = onmenuitemclicklistener;
    }

    public void setOverflowIcon(Drawable drawable) {
        getMenu();
        mPresenter.setOverflowIcon(drawable);
    }

    public void setOverflowReserved(boolean flag) {
        mReserveOverflow = flag;
    }

    public void setPopupTheme(int i) {
        if (mPopupTheme != i) {
            mPopupTheme = i;
            if (i == 0)
                mPopupContext = getContext();
            else
                mPopupContext = new ContextThemeWrapper(getContext(), i);
        }
    }

    public void setPresenter(ActionMenuPresenter actionmenupresenter) {
        mPresenter = actionmenupresenter;
        mPresenter.setMenuView(this);
    }

    public boolean showOverflowMenu() {
        boolean flag;
        if (mPresenter != null && mPresenter.showOverflowMenu())
            flag = true;
        else
            flag = false;
        return flag;
    }
}
