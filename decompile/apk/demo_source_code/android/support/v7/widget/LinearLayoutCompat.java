// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v7.widget;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.drawable.Drawable;
import android.support.v4.view.GravityCompat;
import android.support.v4.view.ViewCompat;
import android.util.AttributeSet;
import android.view.View;
import android.view.ViewGroup;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityNodeInfo;
import java.lang.annotation.Annotation;

// Referenced classes of package android.support.v7.widget:
//            TintTypedArray, ViewUtils

public class LinearLayoutCompat extends ViewGroup {
    public static interface DividerMode
        extends Annotation {
    }

    public static class LayoutParams extends android.view.ViewGroup.MarginLayoutParams {

        public int gravity;
        public float weight;

        public LayoutParams(int i, int j) {
            super(i, j);
            gravity = -1;
            weight = 0.0F;
        }

        public LayoutParams(int i, int j, float f) {
            super(i, j);
            gravity = -1;
            weight = f;
        }

        public LayoutParams(Context context, AttributeSet attributeset) {
            super(context, attributeset);
            gravity = -1;
            context = context.obtainStyledAttributes(attributeset, android.support.v7.appcompat.R.styleable.LinearLayoutCompat_Layout);
            weight = context.getFloat(android.support.v7.appcompat.R.styleable.LinearLayoutCompat_Layout_android_layout_weight, 0.0F);
            gravity = context.getInt(android.support.v7.appcompat.R.styleable.LinearLayoutCompat_Layout_android_layout_gravity, -1);
            context.recycle();
        }

        public LayoutParams(LayoutParams layoutparams) {
            super(layoutparams);
            gravity = -1;
            weight = layoutparams.weight;
            gravity = layoutparams.gravity;
        }

        public LayoutParams(android.view.ViewGroup.LayoutParams layoutparams) {
            super(layoutparams);
            gravity = -1;
        }

        public LayoutParams(android.view.ViewGroup.MarginLayoutParams marginlayoutparams) {
            super(marginlayoutparams);
            gravity = -1;
        }
    }

    public static interface OrientationMode
        extends Annotation {
    }


    public static final int HORIZONTAL = 0;
    private static final int INDEX_BOTTOM = 2;
    private static final int INDEX_CENTER_VERTICAL = 0;
    private static final int INDEX_FILL = 3;
    private static final int INDEX_TOP = 1;
    public static final int SHOW_DIVIDER_BEGINNING = 1;
    public static final int SHOW_DIVIDER_END = 4;
    public static final int SHOW_DIVIDER_MIDDLE = 2;
    public static final int SHOW_DIVIDER_NONE = 0;
    public static final int VERTICAL = 1;
    private static final int VERTICAL_GRAVITY_COUNT = 4;
    private boolean mBaselineAligned;
    private int mBaselineAlignedChildIndex;
    private int mBaselineChildTop;
    private Drawable mDivider;
    private int mDividerHeight;
    private int mDividerPadding;
    private int mDividerWidth;
    private int mGravity;
    private int mMaxAscent[];
    private int mMaxDescent[];
    private int mOrientation;
    private int mShowDividers;
    private int mTotalLength;
    private boolean mUseLargestChild;
    private float mWeightSum;

    public LinearLayoutCompat(Context context) {
        this(context, null);
    }

    public LinearLayoutCompat(Context context, AttributeSet attributeset) {
        this(context, attributeset, 0);
    }

    public LinearLayoutCompat(Context context, AttributeSet attributeset, int i) {
        super(context, attributeset, i);
        mBaselineAligned = true;
        mBaselineAlignedChildIndex = -1;
        mBaselineChildTop = 0;
        mGravity = 0x800033;
        context = TintTypedArray.obtainStyledAttributes(context, attributeset, android.support.v7.appcompat.R.styleable.LinearLayoutCompat, i, 0);
        i = context.getInt(android.support.v7.appcompat.R.styleable.LinearLayoutCompat_android_orientation, -1);
        if (i >= 0)
            setOrientation(i);
        i = context.getInt(android.support.v7.appcompat.R.styleable.LinearLayoutCompat_android_gravity, -1);
        if (i >= 0)
            setGravity(i);
        boolean flag = context.getBoolean(android.support.v7.appcompat.R.styleable.LinearLayoutCompat_android_baselineAligned, true);
        if (!flag)
            setBaselineAligned(flag);
        mWeightSum = context.getFloat(android.support.v7.appcompat.R.styleable.LinearLayoutCompat_android_weightSum, -1F);
        mBaselineAlignedChildIndex = context.getInt(android.support.v7.appcompat.R.styleable.LinearLayoutCompat_android_baselineAlignedChildIndex, -1);
        mUseLargestChild = context.getBoolean(android.support.v7.appcompat.R.styleable.LinearLayoutCompat_measureWithLargestChild, false);
        setDividerDrawable(context.getDrawable(android.support.v7.appcompat.R.styleable.LinearLayoutCompat_divider));
        mShowDividers = context.getInt(android.support.v7.appcompat.R.styleable.LinearLayoutCompat_showDividers, 0);
        mDividerPadding = context.getDimensionPixelSize(android.support.v7.appcompat.R.styleable.LinearLayoutCompat_dividerPadding, 0);
        context.recycle();
    }

    private void forceUniformHeight(int i, int j) {
        int l = android.view.View.MeasureSpec.makeMeasureSpec(getMeasuredHeight(), 0x40000000);
        for (int k = 0; k < i; k++) {
            View view = getVirtualChildAt(k);
            if (view.getVisibility() == 8)
                continue;
            LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
            if (layoutparams.height == -1) {
                int i1 = layoutparams.width;
                layoutparams.width = view.getMeasuredWidth();
                measureChildWithMargins(view, j, 0, l, 0);
                layoutparams.width = i1;
            }
        }

    }

    private void forceUniformWidth(int i, int j) {
        int l = android.view.View.MeasureSpec.makeMeasureSpec(getMeasuredWidth(), 0x40000000);
        for (int k = 0; k < i; k++) {
            View view = getVirtualChildAt(k);
            if (view.getVisibility() == 8)
                continue;
            LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
            if (layoutparams.width == -1) {
                int i1 = layoutparams.height;
                layoutparams.height = view.getMeasuredHeight();
                measureChildWithMargins(view, l, 0, j, 0);
                layoutparams.height = i1;
            }
        }

    }

    private void setChildFrame(View view, int i, int j, int k, int l) {
        view.layout(i, j, i + k, j + l);
    }

    protected boolean checkLayoutParams(android.view.ViewGroup.LayoutParams layoutparams) {
        return layoutparams instanceof LayoutParams;
    }

    void drawDividersHorizontal(Canvas canvas) {
        int l = getVirtualChildCount();
        boolean flag = ViewUtils.isLayoutRtl(this);
        int i = 0;
        while (i < l)  {
            View view = getVirtualChildAt(i);
            if (view != null && view.getVisibility() != 8 && hasDividerBeforeChildAt(i)) {
                LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
                int k;
                if (flag) {
                    k = view.getRight();
                    k = layoutparams.rightMargin + k;
                } else {
                    k = view.getLeft() - layoutparams.leftMargin - mDividerWidth;
                }
                drawVerticalDivider(canvas, k);
            }
            i++;
        }
        if (hasDividerBeforeChildAt(l)) {
            View view1 = getVirtualChildAt(l - 1);
            int j;
            if (view1 == null) {
                if (flag)
                    j = getPaddingLeft();
                else
                    j = getWidth() - getPaddingRight() - mDividerWidth;
            } else {
                LayoutParams layoutparams1 = (LayoutParams)view1.getLayoutParams();
                if (flag) {
                    j = view1.getLeft() - layoutparams1.leftMargin - mDividerWidth;
                } else {
                    j = view1.getRight();
                    j = layoutparams1.rightMargin + j;
                }
            }
            drawVerticalDivider(canvas, j);
        }
    }

    void drawDividersVertical(Canvas canvas) {
        int k = getVirtualChildCount();
        for (int i = 0; i < k; i++) {
            View view1 = getVirtualChildAt(i);
            if (view1 != null && view1.getVisibility() != 8 && hasDividerBeforeChildAt(i)) {
                LayoutParams layoutparams = (LayoutParams)view1.getLayoutParams();
                drawHorizontalDivider(canvas, view1.getTop() - layoutparams.topMargin - mDividerHeight);
            }
        }

        if (hasDividerBeforeChildAt(k)) {
            View view = getVirtualChildAt(k - 1);
            int j;
            if (view == null) {
                j = getHeight() - getPaddingBottom() - mDividerHeight;
            } else {
                LayoutParams layoutparams1 = (LayoutParams)view.getLayoutParams();
                j = view.getBottom();
                j = layoutparams1.bottomMargin + j;
            }
            drawHorizontalDivider(canvas, j);
        }
    }

    void drawHorizontalDivider(Canvas canvas, int i) {
        mDivider.setBounds(getPaddingLeft() + mDividerPadding, i, getWidth() - getPaddingRight() - mDividerPadding, mDividerHeight + i);
        mDivider.draw(canvas);
    }

    void drawVerticalDivider(Canvas canvas, int i) {
        mDivider.setBounds(i, getPaddingTop() + mDividerPadding, mDividerWidth + i, getHeight() - getPaddingBottom() - mDividerPadding);
        mDivider.draw(canvas);
    }

    protected LayoutParams generateDefaultLayoutParams() {
        LayoutParams layoutparams;
        if (mOrientation == 0)
            layoutparams = new LayoutParams(-2, -2);
        else
        if (mOrientation == 1)
            layoutparams = new LayoutParams(-1, -2);
        else
            layoutparams = null;
        return layoutparams;
    }

    protected volatile android.view.ViewGroup.LayoutParams generateDefaultLayoutParams() {
        return generateDefaultLayoutParams();
    }

    public LayoutParams generateLayoutParams(AttributeSet attributeset) {
        return new LayoutParams(getContext(), attributeset);
    }

    protected LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams layoutparams) {
        return new LayoutParams(layoutparams);
    }

    public volatile android.view.ViewGroup.LayoutParams generateLayoutParams(AttributeSet attributeset) {
        return generateLayoutParams(attributeset);
    }

    protected volatile android.view.ViewGroup.LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams layoutparams) {
        return generateLayoutParams(layoutparams);
    }

    public int getBaseline() {
        int i = -1;
        if (mBaselineAlignedChildIndex >= 0) goto _L2; else goto _L1
_L1:
        i = super.getBaseline();
_L4:
        return i;
_L2:
        int j;
        View view;
        if (getChildCount() <= mBaselineAlignedChildIndex)
            throw new RuntimeException("mBaselineAlignedChildIndex of LinearLayout set to an index that is out of bounds.");
        view = getChildAt(mBaselineAlignedChildIndex);
        j = view.getBaseline();
        if (j == -1) {
            if (mBaselineAlignedChildIndex != 0)
                throw new RuntimeException("mBaselineAlignedChildIndex of LinearLayout points to a View that doesn't know how to get its baseline.");
            continue; /* Loop/switch isn't completed */
        }
        i = mBaselineChildTop;
        if (mOrientation == 1) {
            int k = mGravity & 0x70;
            if (k != 48) {
                switch (k) {
                default:
                    break;

                case 80: // 'P'
                    break; /* Loop/switch isn't completed */

                case 16: // '\020'
                    break;
                }
                break MISSING_BLOCK_LABEL_174;
            }
        }
_L5:
        i = ((LayoutParams)view.getLayoutParams()).topMargin + i + j;
        if (true) goto _L4; else goto _L3
_L3:
        i = getBottom() - getTop() - getPaddingBottom() - mTotalLength;
          goto _L5
        i += (getBottom() - getTop() - getPaddingTop() - getPaddingBottom() - mTotalLength) / 2;
          goto _L5
    }

    public int getBaselineAlignedChildIndex() {
        return mBaselineAlignedChildIndex;
    }

    int getChildrenSkipCount(View view, int i) {
        return 0;
    }

    public Drawable getDividerDrawable() {
        return mDivider;
    }

    public int getDividerPadding() {
        return mDividerPadding;
    }

    public int getDividerWidth() {
        return mDividerWidth;
    }

    int getLocationOffset(View view) {
        return 0;
    }

    int getNextLocationOffset(View view) {
        return 0;
    }

    public int getOrientation() {
        return mOrientation;
    }

    public int getShowDividers() {
        return mShowDividers;
    }

    View getVirtualChildAt(int i) {
        return getChildAt(i);
    }

    int getVirtualChildCount() {
        return getChildCount();
    }

    public float getWeightSum() {
        return mWeightSum;
    }

    protected boolean hasDividerBeforeChildAt(int i) {
        boolean flag1 = true;
        if (i != 0) goto _L2; else goto _L1
_L1:
        boolean flag;
        if ((mShowDividers & 1) != 0)
            flag = flag1;
        else
            flag = false;
_L4:
        return flag;
_L2:
        if (i == getChildCount()) {
            flag = flag1;
            if ((mShowDividers & 4) == 0)
                flag = false;
            continue; /* Loop/switch isn't completed */
        }
        if ((mShowDividers & 2) != 0) {
            for (i--; i >= 0; i--) {
                flag = flag1;
                if (getChildAt(i).getVisibility() != 8)
                    continue; /* Loop/switch isn't completed */
            }

        } else {
            flag = false;
            continue; /* Loop/switch isn't completed */
        }
        flag = false;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public boolean isBaselineAligned() {
        return mBaselineAligned;
    }

    public boolean isMeasureWithLargestChildEnabled() {
        return mUseLargestChild;
    }

    void layoutHorizontal(int i, int j, int k, int l) {
        int j1;
        int l1;
        int i2;
        int j2;
        int k2;
        int l2;
        boolean flag;
        boolean flag1;
        int ai[];
        int ai1[];
        flag1 = ViewUtils.isLayoutRtl(this);
        j1 = getPaddingTop();
        k2 = l - j;
        l1 = getPaddingBottom();
        l2 = getPaddingBottom();
        j2 = getVirtualChildCount();
        j = mGravity;
        i2 = mGravity;
        flag = mBaselineAligned;
        ai = mMaxAscent;
        ai1 = mMaxDescent;
        GravityCompat.getAbsoluteGravity(j & 0x800007, ViewCompat.getLayoutDirection(this));
        JVM INSTR lookupswitch 2: default 104
    //                   1: 190
    //                   5: 173;
           goto _L1 _L2 _L3
_L1:
        i = getPaddingLeft();
_L9:
        byte byte0;
        int i1;
        int k1;
        int i3;
        int j3;
        int k3;
        LayoutParams layoutparams;
        View view;
        if (flag1) {
            byte0 = -1;
            l = j2 - 1;
        } else {
            byte0 = 1;
            l = 0;
        }
        j = 0;
        k = i;
_L8:
        if (j >= j2) goto _L5; else goto _L4
_L4:
        i3 = l + byte0 * j;
        view = getVirtualChildAt(i3);
        if (view != null) goto _L7; else goto _L6
_L6:
        k += measureNullChild(i3);
        i = j;
_L14:
        j = i + 1;
          goto _L8
_L3:
        i = (getPaddingLeft() + k) - i - mTotalLength;
          goto _L9
_L2:
        i = getPaddingLeft() + (k - i - mTotalLength) / 2;
          goto _L9
_L7:
        if (view.getVisibility() == 8)
            break MISSING_BLOCK_LABEL_524;
        k3 = view.getMeasuredWidth();
        j3 = view.getMeasuredHeight();
        layoutparams = (LayoutParams)view.getLayoutParams();
        if (flag && layoutparams.height != -1)
            i1 = view.getBaseline();
        else
            i1 = -1;
        k1 = layoutparams.gravity;
        i = k1;
        if (k1 < 0)
            i = i2 & 0x70;
        i & 0x70;
        JVM INSTR lookupswitch 3: default 324
    //                   16: 435
    //                   48: 402
    //                   80: 467;
           goto _L10 _L11 _L12 _L13
_L13:
        break MISSING_BLOCK_LABEL_467;
_L10:
        i = j1;
_L15:
        if (hasDividerBeforeChildAt(i3))
            k = mDividerWidth + k;
        k += layoutparams.leftMargin;
        setChildFrame(view, k + getLocationOffset(view), i, k3, j3);
        k += layoutparams.rightMargin + k3 + getNextLocationOffset(view);
        i = getChildrenSkipCount(view, i3) + j;
          goto _L14
_L12:
        k1 = j1 + layoutparams.topMargin;
        i = k1;
        if (i1 != -1)
            i = k1 + (ai[1] - i1);
          goto _L15
_L11:
        i = ((k2 - j1 - l2 - j3) / 2 + j1 + layoutparams.topMargin) - layoutparams.bottomMargin;
          goto _L15
        k1 = k2 - l1 - j3 - layoutparams.bottomMargin;
        i = k1;
        if (i1 != -1) {
            i = view.getMeasuredHeight();
            i = k1 - (ai1[2] - (i - i1));
        }
          goto _L15
_L5:
        return;
        i = j;
          goto _L14
    }

    void layoutVertical(int i, int j, int k, int l) {
        int i1;
        int j1;
        int k1;
        int l1;
        int i2;
        int j2;
        i1 = getPaddingLeft();
        k1 = k - i;
        l1 = getPaddingRight();
        j2 = getPaddingRight();
        j1 = getVirtualChildCount();
        i = mGravity;
        i2 = mGravity;
        i & 0x70;
        JVM INSTR lookupswitch 2: default 72
    //                   16: 133
    //                   80: 115;
           goto _L1 _L2 _L3
_L1:
        i = getPaddingTop();
_L15:
        k = 0;
        j = i;
        i = k;
_L7:
        View view;
        if (i >= j1)
            break; /* Loop/switch isn't completed */
        view = getVirtualChildAt(i);
        if (view != null) goto _L5; else goto _L4
_L4:
        j += measureNullChild(i);
_L9:
        i++;
        if (true) goto _L7; else goto _L6
_L3:
        i = (getPaddingTop() + l) - j - mTotalLength;
        continue; /* Loop/switch isn't completed */
_L2:
        i = getPaddingTop() + (l - j - mTotalLength) / 2;
        continue; /* Loop/switch isn't completed */
_L5:
        if (view.getVisibility() == 8) goto _L9; else goto _L8
_L8:
        int k2;
        int l2;
        LayoutParams layoutparams;
        k2 = view.getMeasuredWidth();
        l2 = view.getMeasuredHeight();
        layoutparams = (LayoutParams)view.getLayoutParams();
        l = layoutparams.gravity;
        k = l;
        if (l < 0)
            k = i2 & 0x800007;
        GravityCompat.getAbsoluteGravity(k, ViewCompat.getLayoutDirection(this)) & 7;
        JVM INSTR lookupswitch 2: default 248
    //                   1: 330
    //                   5: 362;
           goto _L10 _L11 _L12
_L12:
        break MISSING_BLOCK_LABEL_362;
_L10:
        k = i1 + layoutparams.leftMargin;
_L13:
        if (hasDividerBeforeChildAt(i))
            j = mDividerHeight + j;
        j += layoutparams.topMargin;
        setChildFrame(view, k, j + getLocationOffset(view), k2, l2);
        j += layoutparams.bottomMargin + l2 + getNextLocationOffset(view);
        i = getChildrenSkipCount(view, i) + i;
          goto _L9
_L11:
        k = ((k1 - i1 - j2 - k2) / 2 + i1 + layoutparams.leftMargin) - layoutparams.rightMargin;
          goto _L13
        k = k1 - l1 - k2 - layoutparams.rightMargin;
          goto _L13
_L6:
        return;
        if (true) goto _L15; else goto _L14
_L14:
    }

    void measureChildBeforeLayout(View view, int i, int j, int k, int l, int i1) {
        measureChildWithMargins(view, j, k, l, i1);
    }

    void measureHorizontal(int i, int j) {
        mTotalLength = 0;
        int i1 = 0;
        int l = 0;
        int l1 = 0;
        int j2 = 0;
        int k = 1;
        float f = 0.0F;
        int l5 = getVirtualChildCount();
        int j6 = android.view.View.MeasureSpec.getMode(i);
        int i6 = android.view.View.MeasureSpec.getMode(j);
        int i2 = 0;
        int k1 = 0;
        if (mMaxAscent == null || mMaxDescent == null) {
            mMaxAscent = new int[4];
            mMaxDescent = new int[4];
        }
        int ai1[] = mMaxAscent;
        int ai[] = mMaxDescent;
        ai1[3] = -1;
        ai1[2] = -1;
        ai1[1] = -1;
        ai1[0] = -1;
        ai[3] = -1;
        ai[2] = -1;
        ai[1] = -1;
        ai[0] = -1;
        boolean flag1 = mBaselineAligned;
        boolean flag2 = mUseLargestChild;
        int j1;
        int k2;
        boolean flag;
        if (j6 == 0x40000000)
            flag = true;
        else
            flag = false;
        j1 = 0x80000000;
        k2 = 0;
        while (k2 < l5)  {
            Object obj1 = getVirtualChildAt(k2);
            int i3;
            int i4;
            if (obj1 == null) {
                mTotalLength = mTotalLength + measureNullChild(k2);
                int l2 = j1;
                int l3 = k1;
                k1 = i1;
                j1 = l;
                i1 = k;
                l = l3;
                k = l2;
            } else
            if (((View) (obj1)).getVisibility() == 8) {
                int l4 = k2 + getChildrenSkipCount(((View) (obj1)), k2);
                k2 = j1;
                int j4 = k1;
                int j3 = k;
                j1 = l;
                k1 = i1;
                k = k2;
                l = j4;
                k2 = l4;
                i1 = j3;
            } else {
                if (hasDividerBeforeChildAt(k2))
                    mTotalLength = mTotalLength + mDividerWidth;
                Object obj = (LayoutParams)((View) (obj1)).getLayoutParams();
                f += ((LayoutParams) (obj)).weight;
                int k3;
                int k4;
                int i5;
                if (j6 == 0x40000000 && ((LayoutParams) (obj)).width == 0 && ((LayoutParams) (obj)).weight > 0.0F) {
                    int j5;
                    int k5;
                    if (flag) {
                        mTotalLength = mTotalLength + (((LayoutParams) (obj)).leftMargin + ((LayoutParams) (obj)).rightMargin);
                    } else {
                        k3 = mTotalLength;
                        mTotalLength = Math.max(k3, ((LayoutParams) (obj)).leftMargin + k3 + ((LayoutParams) (obj)).rightMargin);
                    }
                    if (flag1) {
                        k3 = android.view.View.MeasureSpec.makeMeasureSpec(0, 0);
                        ((View) (obj1)).measure(k3, k3);
                        k4 = k1;
                        k3 = j1;
                    } else {
                        k4 = 1;
                        k3 = j1;
                    }
                } else {
                    k4 = 0x80000000;
                    k3 = k4;
                    if (((LayoutParams) (obj)).width == 0) {
                        k3 = k4;
                        if (((LayoutParams) (obj)).weight > 0.0F) {
                            k3 = 0;
                            obj.width = -2;
                        }
                    }
                    if (f == 0.0F)
                        k4 = mTotalLength;
                    else
                        k4 = 0;
                    measureChildBeforeLayout(((View) (obj1)), k2, i, k4, j, 0);
                    if (k3 != 0x80000000)
                        obj.width = k3;
                    i5 = ((View) (obj1)).getMeasuredWidth();
                    if (flag) {
                        mTotalLength = mTotalLength + (((LayoutParams) (obj)).leftMargin + i5 + ((LayoutParams) (obj)).rightMargin + getNextLocationOffset(((View) (obj1))));
                    } else {
                        k3 = mTotalLength;
                        mTotalLength = Math.max(k3, k3 + i5 + ((LayoutParams) (obj)).leftMargin + ((LayoutParams) (obj)).rightMargin + getNextLocationOffset(((View) (obj1))));
                    }
                    k3 = j1;
                    k4 = k1;
                    if (flag2) {
                        k3 = Math.max(i5, j1);
                        k4 = k1;
                    }
                }
                k1 = 0;
                float f1;
                View view;
                if (i6 != 0x40000000 && ((LayoutParams) (obj)).height == -1) {
                    j1 = 1;
                    k1 = 1;
                } else {
                    j1 = i2;
                }
                i2 = ((LayoutParams) (obj)).topMargin;
                i5 = ((LayoutParams) (obj)).bottomMargin + i2;
                i2 = ((View) (obj1)).getMeasuredHeight() + i5;
                j5 = ViewUtils.combineMeasuredStates(l, ViewCompat.getMeasuredState(((View) (obj1))));
                if (flag1) {
                    k5 = ((View) (obj1)).getBaseline();
                    if (k5 != -1) {
                        if (((LayoutParams) (obj)).gravity < 0)
                            l = mGravity;
                        else
                            l = ((LayoutParams) (obj)).gravity;
                        l = ((l & 0x70) >> 4 & -2) >> 1;
                        ai1[l] = Math.max(ai1[l], k5);
                        ai[l] = Math.max(ai[l], i2 - k5);
                    }
                }
                k5 = Math.max(i1, i2);
                if (k != 0 && ((LayoutParams) (obj)).height == -1)
                    i1 = 1;
                else
                    i1 = 0;
                if (((LayoutParams) (obj)).weight > 0.0F) {
                    if (k1 != 0)
                        k = i5;
                    else
                        k = i2;
                    l = Math.max(j2, k);
                    k = l1;
                } else {
                    if (k1 != 0)
                        i2 = i5;
                    k = Math.max(l1, i2);
                    l = j2;
                }
                k2 += getChildrenSkipCount(((View) (obj1)), k2);
                j2 = l;
                l1 = k;
                k1 = k5;
                k = k3;
                k3 = j5;
                i2 = j1;
                l = k4;
                j1 = k3;
            }
            k2++;
            i4 = k;
            k = i1;
            i3 = j1;
            i1 = k1;
            j1 = i4;
            k1 = l;
            l = i3;
        }
        if (mTotalLength > 0 && hasDividerBeforeChildAt(l5))
            mTotalLength = mTotalLength + mDividerWidth;
        if (ai1[1] != -1 || ai1[0] != -1 || ai1[2] != -1 || ai1[3] != -1)
            k2 = Math.max(i1, Math.max(ai1[3], Math.max(ai1[0], Math.max(ai1[1], ai1[2]))) + Math.max(ai[3], Math.max(ai[0], Math.max(ai[1], ai[2]))));
        else
            k2 = i1;
        if (flag2 && (j6 == 0x80000000 || j6 == 0)) {
            mTotalLength = 0;
            i1 = 0;
            while (i1 < l5)  {
                obj = getVirtualChildAt(i1);
                if (obj == null)
                    mTotalLength = mTotalLength + measureNullChild(i1);
                else
                if (((View) (obj)).getVisibility() == 8) {
                    i1 = getChildrenSkipCount(((View) (obj)), i1) + i1;
                } else {
                    obj1 = (LayoutParams)((View) (obj)).getLayoutParams();
                    if (flag) {
                        k3 = mTotalLength;
                        k4 = ((LayoutParams) (obj1)).leftMargin;
                        mTotalLength = ((LayoutParams) (obj1)).rightMargin + (k4 + j1) + getNextLocationOffset(((View) (obj))) + k3;
                    } else {
                        k3 = mTotalLength;
                        k4 = ((LayoutParams) (obj1)).leftMargin;
                        mTotalLength = Math.max(k3, ((LayoutParams) (obj1)).rightMargin + (k3 + j1 + k4) + getNextLocationOffset(((View) (obj))));
                    }
                }
                i1++;
            }
        }
        mTotalLength = mTotalLength + (getPaddingLeft() + getPaddingRight());
        i5 = ViewCompat.resolveSizeAndState(Math.max(mTotalLength, getSuggestedMinimumWidth()), i, 0);
        i1 = (0xffffff & i5) - mTotalLength;
        if (k1 == 0 && (i1 == 0 || f <= 0.0F)) goto _L2; else goto _L1
_L1:
label0:
        {
            if (mWeightSum > 0.0F)
                f = mWeightSum;
            ai1[3] = -1;
            ai1[2] = -1;
            ai1[1] = -1;
            ai1[0] = -1;
            ai[3] = -1;
            ai[2] = -1;
            ai[1] = -1;
            ai[0] = -1;
            mTotalLength = 0;
            k2 = 0;
            j2 = l1;
            k1 = l;
            j1 = i1;
            i1 = -1;
            l1 = k2;
            l = j2;
            while (l1 < l5)  {
                obj = getVirtualChildAt(l1);
                if (obj != null) {
                    if (((View) (obj)).getVisibility() == 8) {
                        j2 = j1;
                        j1 = i1;
                        i1 = l;
                        l = k;
                        k = j2;
                    } else {
                        obj1 = (LayoutParams)((View) (obj)).getLayoutParams();
                        f1 = ((LayoutParams) (obj1)).weight;
                        if (f1 > 0.0F) {
                            k2 = (int)(((float)j1 * f1) / f);
                            j2 = j1 - k2;
                            k3 = getChildMeasureSpec(j, getPaddingTop() + getPaddingBottom() + ((LayoutParams) (obj1)).topMargin + ((LayoutParams) (obj1)).bottomMargin, ((LayoutParams) (obj1)).height);
                            if (((LayoutParams) (obj1)).width != 0 || j6 != 0x40000000) {
                                k2 += ((View) (obj)).getMeasuredWidth();
                                j1 = k2;
                                if (k2 < 0)
                                    j1 = 0;
                                ((View) (obj)).measure(android.view.View.MeasureSpec.makeMeasureSpec(j1, 0x40000000), k3);
                            } else {
                                if (k2 > 0)
                                    j1 = k2;
                                else
                                    j1 = 0;
                                ((View) (obj)).measure(android.view.View.MeasureSpec.makeMeasureSpec(j1, 0x40000000), k3);
                            }
                            k1 = ViewUtils.combineMeasuredStates(k1, ViewCompat.getMeasuredState(((View) (obj))) & 0xff000000);
                            f -= f1;
                            j1 = j2;
                        }
                        if (flag) {
                            mTotalLength = mTotalLength + (((View) (obj)).getMeasuredWidth() + ((LayoutParams) (obj1)).leftMargin + ((LayoutParams) (obj1)).rightMargin + getNextLocationOffset(((View) (obj))));
                        } else {
                            j2 = mTotalLength;
                            mTotalLength = Math.max(j2, ((View) (obj)).getMeasuredWidth() + j2 + ((LayoutParams) (obj1)).leftMargin + ((LayoutParams) (obj1)).rightMargin + getNextLocationOffset(((View) (obj))));
                        }
                        if (i6 != 0x40000000 && ((LayoutParams) (obj1)).height == -1)
                            j2 = 1;
                        else
                            j2 = 0;
                        k4 = ((LayoutParams) (obj1)).topMargin + ((LayoutParams) (obj1)).bottomMargin;
                        k3 = ((View) (obj)).getMeasuredHeight() + k4;
                        k2 = Math.max(i1, k3);
                        if (j2 != 0)
                            i1 = k4;
                        else
                            i1 = k3;
                        i1 = Math.max(l, i1);
                        if (k != 0 && ((LayoutParams) (obj1)).height == -1)
                            k = 1;
                        else
                            k = 0;
                        if (flag1) {
                            j2 = ((View) (obj)).getBaseline();
                            if (j2 != -1) {
                                if (((LayoutParams) (obj1)).gravity < 0)
                                    l = mGravity;
                                else
                                    l = ((LayoutParams) (obj1)).gravity;
                                l = ((l & 0x70) >> 4 & -2) >> 1;
                                ai1[l] = Math.max(ai1[l], j2);
                                ai[l] = Math.max(ai[l], k3 - j2);
                            }
                        }
                        l = k;
                        k = j1;
                        j1 = k2;
                    }
                } else {
                    j2 = j1;
                    j1 = i1;
                    i1 = l;
                    l = k;
                    k = j2;
                }
                j2 = l1 + 1;
                l1 = j1;
                j1 = k;
                k = l;
                l = i1;
                i1 = l1;
                l1 = j2;
            }
            mTotalLength = mTotalLength + (getPaddingLeft() + getPaddingRight());
            if (ai1[1] == -1 && ai1[0] == -1 && ai1[2] == -1) {
                j1 = i1;
                if (ai1[3] == -1)
                    break label0;
            }
            j1 = Math.max(i1, Math.max(ai1[3], Math.max(ai1[0], Math.max(ai1[1], ai1[2]))) + Math.max(ai[3], Math.max(ai[0], Math.max(ai[1], ai[2]))));
        }
        i1 = l;
        l = k1;
_L4:
        if (k != 0 || i6 == 0x40000000)
            i1 = j1;
        setMeasuredDimension(0xff000000 & l | i5, ViewCompat.resolveSizeAndState(Math.max(i1 + (getPaddingTop() + getPaddingBottom()), getSuggestedMinimumHeight()), j, l << 16));
        if (i2 != 0)
            forceUniformHeight(l5, i);
        return;
_L2:
        k1 = Math.max(l1, j2);
        if (flag2 && j6 != 0x40000000) {
            i1 = 0;
            do {
                if (i1 >= l5)
                    break;
                view = getVirtualChildAt(i1);
                if (view != null && view.getVisibility() != 8 && ((LayoutParams)view.getLayoutParams()).weight > 0.0F)
                    view.measure(android.view.View.MeasureSpec.makeMeasureSpec(j1, 0x40000000), android.view.View.MeasureSpec.makeMeasureSpec(view.getMeasuredHeight(), 0x40000000));
                i1++;
            } while (true);
        }
        i1 = k1;
        j1 = k2;
        if (true) goto _L4; else goto _L3
_L3:
    }

    int measureNullChild(int i) {
        return 0;
    }

    void measureVertical(int i, int j) {
        float f;
        int k;
        int l;
        int i1;
        int j1;
        int k1;
        int l1;
        int i2;
        int j2;
        int k2;
        int j6;
        int k6;
        int l6;
        int i7;
        boolean flag;
        mTotalLength = 0;
        l = 0;
        k = 0;
        l1 = 0;
        k2 = 0;
        i1 = 1;
        f = 0.0F;
        j6 = getVirtualChildCount();
        k6 = android.view.View.MeasureSpec.getMode(i);
        l6 = android.view.View.MeasureSpec.getMode(j);
        j2 = 0;
        k1 = 0;
        i7 = mBaselineAlignedChildIndex;
        flag = mUseLargestChild;
        j1 = 0x80000000;
        i2 = 0;
_L2:
        Object obj1;
        if (i2 >= j6)
            break MISSING_BLOCK_LABEL_749;
        obj1 = getVirtualChildAt(i2);
        if (obj1 != null)
            break; /* Loop/switch isn't completed */
        mTotalLength = mTotalLength + measureNullChild(i2);
        int l2 = j1;
        int l3 = k1;
        k1 = i1;
        i1 = l;
        j1 = k;
        k = l3;
        l = l2;
_L3:
        i2++;
        int l4 = l;
        l = k1;
        int i3 = j1;
        int i4 = i1;
        j1 = l4;
        k1 = k;
        i1 = l;
        k = i3;
        l = i4;
        if (true) goto _L2; else goto _L1
_L1:
label0:
        {
            if (((View) (obj1)).getVisibility() != 8)
                break label0;
            int j4 = i2 + getChildrenSkipCount(((View) (obj1)), i2);
            i2 = j1;
            j1 = k;
            int j3 = l;
            l = i2;
            k = k1;
            i2 = j4;
            k1 = i1;
            i1 = j3;
        }
          goto _L3
        Object obj;
        if (hasDividerBeforeChildAt(i2))
            mTotalLength = mTotalLength + mDividerHeight;
        obj = (LayoutParams)((View) (obj1)).getLayoutParams();
        f += ((LayoutParams) (obj)).weight;
        if (l6 != 0x40000000 || ((LayoutParams) (obj)).height != 0 || ((LayoutParams) (obj)).weight <= 0.0F) goto _L5; else goto _L4
_L4:
        int k3;
        int k4;
        k1 = mTotalLength;
        mTotalLength = Math.max(k1, ((LayoutParams) (obj)).topMargin + k1 + ((LayoutParams) (obj)).bottomMargin);
        k4 = 1;
        k3 = j1;
_L7:
        if (i7 >= 0 && i7 == i2 + 1)
            mBaselineChildTop = mTotalLength;
        if (i2 < i7 && ((LayoutParams) (obj)).weight > 0.0F)
            throw new RuntimeException("A child of LinearLayout with index less than mBaselineAlignedChildIndex has weight > 0, which won't work.  Either remove the weight, or don't set mBaselineAlignedChildIndex.");
        break; /* Loop/switch isn't completed */
_L5:
        k4 = 0x80000000;
        k3 = k4;
        if (((LayoutParams) (obj)).height == 0) {
            k3 = k4;
            if (((LayoutParams) (obj)).weight > 0.0F) {
                k3 = 0;
                obj.height = -2;
            }
        }
        int i5;
        if (f == 0.0F)
            k4 = mTotalLength;
        else
            k4 = 0;
        measureChildBeforeLayout(((View) (obj1)), i2, i, 0, j, k4);
        if (k3 != 0x80000000)
            obj.height = k3;
        i5 = ((View) (obj1)).getMeasuredHeight();
        k3 = mTotalLength;
        mTotalLength = Math.max(k3, k3 + i5 + ((LayoutParams) (obj)).topMargin + ((LayoutParams) (obj)).bottomMargin + getNextLocationOffset(((View) (obj1))));
        k3 = j1;
        k4 = k1;
        if (flag) {
            k3 = Math.max(i5, j1);
            k4 = k1;
        }
        if (true) goto _L7; else goto _L6
_L6:
        k1 = 0;
        float f1;
        int j5;
        int k5;
        int l5;
        int i6;
        if (k6 != 0x40000000 && ((LayoutParams) (obj)).width == -1) {
            j1 = 1;
            j2 = 1;
        } else {
            j1 = j2;
            j2 = k1;
        }
        k1 = ((LayoutParams) (obj)).leftMargin;
        j5 = ((LayoutParams) (obj)).rightMargin + k1;
        k5 = ((View) (obj1)).getMeasuredWidth() + j5;
        i6 = Math.max(l, k5);
        l5 = ViewUtils.combineMeasuredStates(k, ViewCompat.getMeasuredState(((View) (obj1))));
        if (i1 != 0 && ((LayoutParams) (obj)).width == -1)
            k1 = 1;
        else
            k1 = 0;
        if (((LayoutParams) (obj)).weight > 0.0F) {
            if (j2 != 0)
                k5 = j5;
            l = Math.max(k2, k5);
            k = l1;
        } else {
            if (j2 == 0)
                j5 = k5;
            k = Math.max(l1, j5);
            l = k2;
        }
        i2 += getChildrenSkipCount(((View) (obj1)), i2);
        k2 = l;
        l1 = k;
        i1 = i6;
        l = k3;
        k3 = l5;
        j2 = j1;
        k = k4;
        j1 = k3;
          goto _L3
label1:
        {
            {
                if (mTotalLength > 0 && hasDividerBeforeChildAt(j6))
                    mTotalLength = mTotalLength + mDividerHeight;
                if (flag && (l6 == 0x80000000 || l6 == 0)) {
                    mTotalLength = 0;
                    i2 = 0;
                    while (i2 < j6)  {
                        obj = getVirtualChildAt(i2);
                        if (obj == null)
                            mTotalLength = mTotalLength + measureNullChild(i2);
                        else
                        if (((View) (obj)).getVisibility() == 8) {
                            i2 = getChildrenSkipCount(((View) (obj)), i2) + i2;
                        } else {
                            obj1 = (LayoutParams)((View) (obj)).getLayoutParams();
                            k4 = mTotalLength;
                            k3 = ((LayoutParams) (obj1)).topMargin;
                            mTotalLength = Math.max(k4, ((LayoutParams) (obj1)).bottomMargin + (k4 + j1 + k3) + getNextLocationOffset(((View) (obj))));
                        }
                        i2++;
                    }
                }
                mTotalLength = mTotalLength + (getPaddingTop() + getPaddingBottom());
                k4 = ViewCompat.resolveSizeAndState(Math.max(mTotalLength, getSuggestedMinimumHeight()), j, 0);
                i2 = (0xffffff & k4) - mTotalLength;
                if (k1 == 0 && (i2 == 0 || f <= 0.0F))
                    break label1;
                if (mWeightSum > 0.0F)
                    f = mWeightSum;
                mTotalLength = 0;
                j1 = 0;
                k1 = i1;
                i1 = l1;
                l1 = i2;
                i2 = j1;
                j1 = l;
                l = k1;
                k1 = l1;
                while (i2 < j6)  {
                    obj = getVirtualChildAt(i2);
                    if (((View) (obj)).getVisibility() == 8) {
                        l1 = i1;
                        i1 = j1;
                        j1 = l1;
                    } else {
                        obj1 = (LayoutParams)((View) (obj)).getLayoutParams();
                        f1 = ((LayoutParams) (obj1)).weight;
                        if (f1 > 0.0F) {
                            k2 = (int)(((float)k1 * f1) / f);
                            j5 = getChildMeasureSpec(i, getPaddingLeft() + getPaddingRight() + ((LayoutParams) (obj1)).leftMargin + ((LayoutParams) (obj1)).rightMargin, ((LayoutParams) (obj1)).width);
                            if (((LayoutParams) (obj1)).height != 0 || l6 != 0x40000000) {
                                k3 = k2 + ((View) (obj)).getMeasuredHeight();
                                l1 = k3;
                                if (k3 < 0)
                                    l1 = 0;
                                ((View) (obj)).measure(j5, android.view.View.MeasureSpec.makeMeasureSpec(l1, 0x40000000));
                            } else {
                                if (k2 > 0)
                                    l1 = k2;
                                else
                                    l1 = 0;
                                ((View) (obj)).measure(j5, android.view.View.MeasureSpec.makeMeasureSpec(l1, 0x40000000));
                            }
                            l1 = ViewUtils.combineMeasuredStates(k, ViewCompat.getMeasuredState(((View) (obj))) & 0xffffff00);
                            k = k1 - k2;
                            k1 = l1;
                            f -= f1;
                        } else {
                            l1 = k1;
                            k1 = k;
                            k = l1;
                        }
                        k2 = ((LayoutParams) (obj1)).leftMargin + ((LayoutParams) (obj1)).rightMargin;
                        k3 = ((View) (obj)).getMeasuredWidth() + k2;
                        l1 = Math.max(j1, k3);
                        if (k6 != 0x40000000 && ((LayoutParams) (obj1)).width == -1)
                            j1 = 1;
                        else
                            j1 = 0;
                        if (j1 != 0)
                            j1 = k2;
                        else
                            j1 = k3;
                        j1 = Math.max(i1, j1);
                        if (l != 0 && ((LayoutParams) (obj1)).width == -1)
                            l = 1;
                        else
                            l = 0;
                        k2 = mTotalLength;
                        k3 = ((View) (obj)).getMeasuredHeight();
                        i1 = ((LayoutParams) (obj1)).topMargin;
                        mTotalLength = Math.max(k2, ((LayoutParams) (obj1)).bottomMargin + (k3 + k2 + i1) + getNextLocationOffset(((View) (obj))));
                        i1 = l1;
                        l1 = k;
                        k = k1;
                        k1 = l1;
                    }
                    i2++;
                    l1 = j1;
                    j1 = i1;
                    i1 = l1;
                }
                mTotalLength = mTotalLength + (getPaddingTop() + getPaddingBottom());
                k1 = l;
                l = j1;
                j1 = i1;
            }
            if (k1 != 0 || k6 == 0x40000000)
                j1 = l;
            setMeasuredDimension(ViewCompat.resolveSizeAndState(Math.max(j1 + (getPaddingLeft() + getPaddingRight()), getSuggestedMinimumWidth()), i, k), k4);
            if (j2 != 0)
                forceUniformWidth(j6, j);
            return;
        }
        l1 = Math.max(l1, k2);
        if (flag && l6 != 0x40000000) {
            k1 = 0;
            do {
                if (k1 >= j6)
                    break;
                obj = getVirtualChildAt(k1);
                if (obj != null && ((View) (obj)).getVisibility() != 8 && ((LayoutParams)((View) (obj)).getLayoutParams()).weight > 0.0F)
                    ((View) (obj)).measure(android.view.View.MeasureSpec.makeMeasureSpec(((View) (obj)).getMeasuredWidth(), 0x40000000), android.view.View.MeasureSpec.makeMeasureSpec(j1, 0x40000000));
                k1++;
            } while (true);
        }
        j1 = l1;
        k1 = i1;
        if (false)
            ;
        else
            break MISSING_BLOCK_LABEL_1483;
    }

    protected void onDraw(Canvas canvas) {
        if (mDivider != null)
            if (mOrientation == 1)
                drawDividersVertical(canvas);
            else
                drawDividersHorizontal(canvas);
    }

    public void onInitializeAccessibilityEvent(AccessibilityEvent accessibilityevent) {
        if (android.os.Build.VERSION.SDK_INT >= 14) {
            super.onInitializeAccessibilityEvent(accessibilityevent);
            accessibilityevent.setClassName(android/support/v7/widget/LinearLayoutCompat.getName());
        }
    }

    public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo accessibilitynodeinfo) {
        if (android.os.Build.VERSION.SDK_INT >= 14) {
            super.onInitializeAccessibilityNodeInfo(accessibilitynodeinfo);
            accessibilitynodeinfo.setClassName(android/support/v7/widget/LinearLayoutCompat.getName());
        }
    }

    protected void onLayout(boolean flag, int i, int j, int k, int l) {
        if (mOrientation == 1)
            layoutVertical(i, j, k, l);
        else
            layoutHorizontal(i, j, k, l);
    }

    protected void onMeasure(int i, int j) {
        if (mOrientation == 1)
            measureVertical(i, j);
        else
            measureHorizontal(i, j);
    }

    public void setBaselineAligned(boolean flag) {
        mBaselineAligned = flag;
    }

    public void setBaselineAlignedChildIndex(int i) {
        if (i < 0 || i >= getChildCount()) {
            throw new IllegalArgumentException((new StringBuilder()).append("base aligned child index out of range (0, ").append(getChildCount()).append(")").toString());
        } else {
            mBaselineAlignedChildIndex = i;
            return;
        }
    }

    public void setDividerDrawable(Drawable drawable) {
        boolean flag = false;
        if (drawable != mDivider) {
            mDivider = drawable;
            if (drawable != null) {
                mDividerWidth = drawable.getIntrinsicWidth();
                mDividerHeight = drawable.getIntrinsicHeight();
            } else {
                mDividerWidth = 0;
                mDividerHeight = 0;
            }
            if (drawable == null)
                flag = true;
            setWillNotDraw(flag);
            requestLayout();
        }
    }

    public void setDividerPadding(int i) {
        mDividerPadding = i;
    }

    public void setGravity(int i) {
        if (mGravity != i) {
            if ((0x800007 & i) == 0)
                i = 0x800003 | i;
            int j = i;
            if ((i & 0x70) == 0)
                j = i | 0x30;
            mGravity = j;
            requestLayout();
        }
    }

    public void setHorizontalGravity(int i) {
        i &= 0x800007;
        if ((mGravity & 0x800007) != i) {
            mGravity = i | mGravity & 0xff7ffff8;
            requestLayout();
        }
    }

    public void setMeasureWithLargestChildEnabled(boolean flag) {
        mUseLargestChild = flag;
    }

    public void setOrientation(int i) {
        if (mOrientation != i) {
            mOrientation = i;
            requestLayout();
        }
    }

    public void setShowDividers(int i) {
        if (i != mShowDividers)
            requestLayout();
        mShowDividers = i;
    }

    public void setVerticalGravity(int i) {
        i &= 0x70;
        if ((mGravity & 0x70) != i) {
            mGravity = i | mGravity & 0xffffff8f;
            requestLayout();
        }
    }

    public void setWeightSum(float f) {
        mWeightSum = Math.max(0.0F, f);
    }

    public boolean shouldDelayChildPressedState() {
        return false;
    }
}
