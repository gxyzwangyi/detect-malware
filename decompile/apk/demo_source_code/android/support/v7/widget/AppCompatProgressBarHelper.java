// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v7.widget;

import android.graphics.*;
import android.graphics.drawable.*;
import android.graphics.drawable.shapes.RoundRectShape;
import android.graphics.drawable.shapes.Shape;
import android.support.v4.graphics.drawable.DrawableWrapper;
import android.util.AttributeSet;
import android.widget.ProgressBar;

// Referenced classes of package android.support.v7.widget:
//            TintTypedArray

class AppCompatProgressBarHelper {

    private static final int TINT_ATTRS[] = {
        0x101013b, 0x101013c
    };
    private Bitmap mSampleTile;
    private final ProgressBar mView;

    AppCompatProgressBarHelper(ProgressBar progressbar) {
        mView = progressbar;
    }

    private Shape getDrawableShape() {
        return new RoundRectShape(new float[] {
            5F, 5F, 5F, 5F, 5F, 5F, 5F, 5F
        }, null, null);
    }

    private Drawable tileify(Drawable drawable, boolean flag) {
        boolean flag1 = false;
        if (!(drawable instanceof DrawableWrapper)) goto _L2; else goto _L1
_L1:
        Drawable drawable1 = ((DrawableWrapper)drawable).getWrappedDrawable();
        if (drawable1 != null) {
            drawable1 = tileify(drawable1, flag);
            ((DrawableWrapper)drawable).setWrappedDrawable(drawable1);
        }
_L4:
        return drawable;
_L2:
        if (drawable instanceof LayerDrawable) {
            LayerDrawable layerdrawable1 = (LayerDrawable)drawable;
            int j = layerdrawable1.getNumberOfLayers();
            Drawable adrawable[] = new Drawable[j];
            int i = 0;
            while (i < j)  {
                int k = layerdrawable1.getId(i);
                drawable = layerdrawable1.getDrawable(i);
                if (k == 0x102000d || k == 0x102000f)
                    flag = true;
                else
                    flag = false;
                adrawable[i] = tileify(drawable, flag);
                i++;
            }
            LayerDrawable layerdrawable = new LayerDrawable(adrawable);
            i = ((flag1) ? 1 : 0);
            do {
                drawable = layerdrawable;
                if (i >= j)
                    continue; /* Loop/switch isn't completed */
                layerdrawable.setId(i, layerdrawable1.getId(i));
                i++;
            } while (true);
        }
        if (drawable instanceof BitmapDrawable) {
            BitmapDrawable bitmapdrawable = (BitmapDrawable)drawable;
            Object obj = bitmapdrawable.getBitmap();
            if (mSampleTile == null)
                mSampleTile = ((Bitmap) (obj));
            drawable = new ShapeDrawable(getDrawableShape());
            obj = new BitmapShader(((Bitmap) (obj)), android.graphics.Shader.TileMode.REPEAT, android.graphics.Shader.TileMode.CLAMP);
            drawable.getPaint().setShader(((android.graphics.Shader) (obj)));
            drawable.getPaint().setColorFilter(bitmapdrawable.getPaint().getColorFilter());
            if (flag)
                drawable = new ClipDrawable(drawable, 3, 1);
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    private Drawable tileifyIndeterminate(Drawable drawable) {
        Object obj = drawable;
        if (drawable instanceof AnimationDrawable) {
            AnimationDrawable animationdrawable = (AnimationDrawable)drawable;
            int j = animationdrawable.getNumberOfFrames();
            obj = new AnimationDrawable();
            ((AnimationDrawable) (obj)).setOneShot(animationdrawable.isOneShot());
            for (int i = 0; i < j; i++) {
                drawable = tileify(animationdrawable.getFrame(i), true);
                drawable.setLevel(10000);
                ((AnimationDrawable) (obj)).addFrame(drawable, animationdrawable.getDuration(i));
            }

            ((AnimationDrawable) (obj)).setLevel(10000);
        }
        return ((Drawable) (obj));
    }

    Bitmap getSampleTime() {
        return mSampleTile;
    }

    void loadFromAttributes(AttributeSet attributeset, int i) {
        attributeset = TintTypedArray.obtainStyledAttributes(mView.getContext(), attributeset, TINT_ATTRS, i, 0);
        Drawable drawable = attributeset.getDrawableIfKnown(0);
        if (drawable != null)
            mView.setIndeterminateDrawable(tileifyIndeterminate(drawable));
        drawable = attributeset.getDrawableIfKnown(1);
        if (drawable != null)
            mView.setProgressDrawable(tileify(drawable, false));
        attributeset.recycle();
    }

}
