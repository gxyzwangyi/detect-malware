// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v7.widget;

import android.content.Context;
import android.graphics.drawable.Drawable;
import android.os.Parcel;
import android.os.Parcelable;
import android.support.v4.os.ParcelableCompat;
import android.support.v4.os.ParcelableCompatCreatorCallbacks;
import android.support.v4.view.*;
import android.support.v7.content.res.AppCompatResources;
import android.support.v7.view.CollapsibleActionView;
import android.support.v7.view.SupportMenuInflater;
import android.support.v7.view.menu.*;
import android.text.Layout;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.view.*;
import android.widget.*;
import java.util.ArrayList;
import java.util.List;

// Referenced classes of package android.support.v7.widget:
//            TintTypedArray, RtlSpacingHelper, AppCompatImageView, ActionMenuView, 
//            AppCompatImageButton, ToolbarWidgetWrapper, ViewUtils, ActionMenuPresenter, 
//            AppCompatTextView, DecorToolbar

public class Toolbar extends ViewGroup {
    private class ExpandedActionViewMenuPresenter
        implements MenuPresenter {

        MenuItemImpl mCurrentExpandedItem;
        MenuBuilder mMenu;
        final Toolbar this$0;

        public boolean collapseItemActionView(MenuBuilder menubuilder, MenuItemImpl menuitemimpl) {
            if (mExpandedActionView instanceof CollapsibleActionView)
                ((CollapsibleActionView)mExpandedActionView).onActionViewCollapsed();
            removeView(mExpandedActionView);
            removeView(mCollapseButtonView);
            mExpandedActionView = null;
            addChildrenForExpandedActionView();
            mCurrentExpandedItem = null;
            requestLayout();
            menuitemimpl.setActionViewExpanded(false);
            return true;
        }

        public boolean expandItemActionView(MenuBuilder menubuilder, MenuItemImpl menuitemimpl) {
            ensureCollapseButtonView();
            if (mCollapseButtonView.getParent() != Toolbar.this)
                addView(mCollapseButtonView);
            mExpandedActionView = menuitemimpl.getActionView();
            mCurrentExpandedItem = menuitemimpl;
            if (mExpandedActionView.getParent() != Toolbar.this) {
                menubuilder = generateDefaultLayoutParams();
                menubuilder.gravity = 0x800003 | mButtonGravity & 0x70;
                menubuilder.mViewType = 2;
                mExpandedActionView.setLayoutParams(menubuilder);
                addView(mExpandedActionView);
            }
            removeChildrenForExpandedActionView();
            requestLayout();
            menuitemimpl.setActionViewExpanded(true);
            if (mExpandedActionView instanceof CollapsibleActionView)
                ((CollapsibleActionView)mExpandedActionView).onActionViewExpanded();
            return true;
        }

        public boolean flagActionItems() {
            return false;
        }

        public int getId() {
            return 0;
        }

        public MenuView getMenuView(ViewGroup viewgroup) {
            return null;
        }

        public void initForMenu(Context context, MenuBuilder menubuilder) {
            if (mMenu != null && mCurrentExpandedItem != null)
                mMenu.collapseItemActionView(mCurrentExpandedItem);
            mMenu = menubuilder;
        }

        public void onCloseMenu(MenuBuilder menubuilder, boolean flag) {
        }

        public void onRestoreInstanceState(Parcelable parcelable) {
        }

        public Parcelable onSaveInstanceState() {
            return null;
        }

        public boolean onSubMenuSelected(SubMenuBuilder submenubuilder) {
            return false;
        }

        public void setCallback(android.support.v7.view.menu.MenuPresenter.Callback callback) {
        }

        public void updateMenuView(boolean flag) {
            boolean flag2 = false;
            if (mCurrentExpandedItem == null) goto _L2; else goto _L1
_L1:
            boolean flag1 = flag2;
            if (mMenu == null) goto _L4; else goto _L3
_L3:
            int i;
            int j;
            j = mMenu.size();
            i = 0;
_L9:
            flag1 = flag2;
            if (i >= j) goto _L4; else goto _L5
_L5:
            if (mMenu.getItem(i) != mCurrentExpandedItem) goto _L7; else goto _L6
_L6:
            flag1 = true;
_L4:
            if (!flag1)
                collapseItemActionView(mMenu, mCurrentExpandedItem);
_L2:
            return;
_L7:
            i++;
            if (true) goto _L9; else goto _L8
_L8:
        }

        ExpandedActionViewMenuPresenter() {
            this$0 = Toolbar.this;
            super();
        }
    }

    public static class LayoutParams extends android.support.v7.app.ActionBar.LayoutParams {

        static final int CUSTOM = 0;
        static final int EXPANDED = 2;
        static final int SYSTEM = 1;
        int mViewType;

        void copyMarginsFromCompat(android.view.ViewGroup.MarginLayoutParams marginlayoutparams) {
            leftMargin = marginlayoutparams.leftMargin;
            topMargin = marginlayoutparams.topMargin;
            rightMargin = marginlayoutparams.rightMargin;
            bottomMargin = marginlayoutparams.bottomMargin;
        }

        public LayoutParams(int i) {
            this(-2, -1, i);
        }

        public LayoutParams(int i, int j) {
            super(i, j);
            mViewType = 0;
            gravity = 0x800013;
        }

        public LayoutParams(int i, int j, int k) {
            super(i, j);
            mViewType = 0;
            gravity = k;
        }

        public LayoutParams(Context context, AttributeSet attributeset) {
            super(context, attributeset);
            mViewType = 0;
        }

        public LayoutParams(android.support.v7.app.ActionBar.LayoutParams layoutparams) {
            super(layoutparams);
            mViewType = 0;
        }

        public LayoutParams(LayoutParams layoutparams) {
            super(layoutparams);
            mViewType = 0;
            mViewType = layoutparams.mViewType;
        }

        public LayoutParams(android.view.ViewGroup.LayoutParams layoutparams) {
            super(layoutparams);
            mViewType = 0;
        }

        public LayoutParams(android.view.ViewGroup.MarginLayoutParams marginlayoutparams) {
            super(marginlayoutparams);
            mViewType = 0;
            copyMarginsFromCompat(marginlayoutparams);
        }
    }

    public static interface OnMenuItemClickListener {

        public abstract boolean onMenuItemClick(MenuItem menuitem);
    }

    public static class SavedState extends AbsSavedState {

        public static final android.os.Parcelable.Creator CREATOR = ParcelableCompat.newCreator(new ParcelableCompatCreatorCallbacks() {

            public SavedState createFromParcel(Parcel parcel, ClassLoader classloader) {
                return new SavedState(parcel, classloader);
            }

            public volatile Object createFromParcel(Parcel parcel, ClassLoader classloader) {
                return createFromParcel(parcel, classloader);
            }

            public SavedState[] newArray(int i) {
                return new SavedState[i];
            }

            public volatile Object[] newArray(int i) {
                return newArray(i);
            }

        }
);
        int expandedMenuItemId;
        boolean isOverflowOpen;

        public void writeToParcel(Parcel parcel, int i) {
            super.writeToParcel(parcel, i);
            parcel.writeInt(expandedMenuItemId);
            if (isOverflowOpen)
                i = 1;
            else
                i = 0;
            parcel.writeInt(i);
        }


        public SavedState(Parcel parcel) {
            this(parcel, null);
        }

        public SavedState(Parcel parcel, ClassLoader classloader) {
            super(parcel, classloader);
            expandedMenuItemId = parcel.readInt();
            boolean flag;
            if (parcel.readInt() != 0)
                flag = true;
            else
                flag = false;
            isOverflowOpen = flag;
        }

        public SavedState(Parcelable parcelable) {
            super(parcelable);
        }
    }


    private static final String TAG = "Toolbar";
    private android.support.v7.view.menu.MenuPresenter.Callback mActionMenuPresenterCallback;
    int mButtonGravity;
    ImageButton mCollapseButtonView;
    private CharSequence mCollapseDescription;
    private Drawable mCollapseIcon;
    private boolean mCollapsible;
    private int mContentInsetEndWithActions;
    private int mContentInsetStartWithNavigation;
    private RtlSpacingHelper mContentInsets;
    private boolean mEatingHover;
    private boolean mEatingTouch;
    View mExpandedActionView;
    private ExpandedActionViewMenuPresenter mExpandedMenuPresenter;
    private int mGravity;
    private final ArrayList mHiddenViews;
    private ImageView mLogoView;
    private int mMaxButtonHeight;
    private android.support.v7.view.menu.MenuBuilder.Callback mMenuBuilderCallback;
    private ActionMenuView mMenuView;
    private final ActionMenuView.OnMenuItemClickListener mMenuViewItemClickListener;
    private ImageButton mNavButtonView;
    OnMenuItemClickListener mOnMenuItemClickListener;
    private ActionMenuPresenter mOuterActionMenuPresenter;
    private Context mPopupContext;
    private int mPopupTheme;
    private final Runnable mShowOverflowMenuRunnable;
    private CharSequence mSubtitleText;
    private int mSubtitleTextAppearance;
    private int mSubtitleTextColor;
    private TextView mSubtitleTextView;
    private final int mTempMargins[];
    private final ArrayList mTempViews;
    private int mTitleMarginBottom;
    private int mTitleMarginEnd;
    private int mTitleMarginStart;
    private int mTitleMarginTop;
    private CharSequence mTitleText;
    private int mTitleTextAppearance;
    private int mTitleTextColor;
    private TextView mTitleTextView;
    private ToolbarWidgetWrapper mWrapper;

    public Toolbar(Context context) {
        this(context, null);
    }

    public Toolbar(Context context, AttributeSet attributeset) {
        this(context, attributeset, android.support.v7.appcompat.R.attr.toolbarStyle);
    }

    public Toolbar(Context context, AttributeSet attributeset, int i) {
        super(context, attributeset, i);
        mGravity = 0x800013;
        mTempViews = new ArrayList();
        mHiddenViews = new ArrayList();
        mTempMargins = new int[2];
        mMenuViewItemClickListener = new ActionMenuView.OnMenuItemClickListener() {

            final Toolbar this$0;

            public boolean onMenuItemClick(MenuItem menuitem) {
                boolean flag;
                if (mOnMenuItemClickListener != null)
                    flag = mOnMenuItemClickListener.onMenuItemClick(menuitem);
                else
                    flag = false;
                return flag;
            }

             {
                this$0 = Toolbar.this;
                super();
            }
        }
;
        mShowOverflowMenuRunnable = new Runnable() {

            final Toolbar this$0;

            public void run() {
                showOverflowMenu();
            }

             {
                this$0 = Toolbar.this;
                super();
            }
        }
;
        context = TintTypedArray.obtainStyledAttributes(getContext(), attributeset, android.support.v7.appcompat.R.styleable.Toolbar, i, 0);
        mTitleTextAppearance = context.getResourceId(android.support.v7.appcompat.R.styleable.Toolbar_titleTextAppearance, 0);
        mSubtitleTextAppearance = context.getResourceId(android.support.v7.appcompat.R.styleable.Toolbar_subtitleTextAppearance, 0);
        mGravity = context.getInteger(android.support.v7.appcompat.R.styleable.Toolbar_android_gravity, mGravity);
        mButtonGravity = context.getInteger(android.support.v7.appcompat.R.styleable.Toolbar_buttonGravity, 48);
        int j = context.getDimensionPixelOffset(android.support.v7.appcompat.R.styleable.Toolbar_titleMargin, 0);
        i = j;
        if (context.hasValue(android.support.v7.appcompat.R.styleable.Toolbar_titleMargins))
            i = context.getDimensionPixelOffset(android.support.v7.appcompat.R.styleable.Toolbar_titleMargins, j);
        mTitleMarginBottom = i;
        mTitleMarginTop = i;
        mTitleMarginEnd = i;
        mTitleMarginStart = i;
        i = context.getDimensionPixelOffset(android.support.v7.appcompat.R.styleable.Toolbar_titleMarginStart, -1);
        if (i >= 0)
            mTitleMarginStart = i;
        i = context.getDimensionPixelOffset(android.support.v7.appcompat.R.styleable.Toolbar_titleMarginEnd, -1);
        if (i >= 0)
            mTitleMarginEnd = i;
        i = context.getDimensionPixelOffset(android.support.v7.appcompat.R.styleable.Toolbar_titleMarginTop, -1);
        if (i >= 0)
            mTitleMarginTop = i;
        i = context.getDimensionPixelOffset(android.support.v7.appcompat.R.styleable.Toolbar_titleMarginBottom, -1);
        if (i >= 0)
            mTitleMarginBottom = i;
        mMaxButtonHeight = context.getDimensionPixelSize(android.support.v7.appcompat.R.styleable.Toolbar_maxButtonHeight, -1);
        int l = context.getDimensionPixelOffset(android.support.v7.appcompat.R.styleable.Toolbar_contentInsetStart, 0x80000000);
        int k = context.getDimensionPixelOffset(android.support.v7.appcompat.R.styleable.Toolbar_contentInsetEnd, 0x80000000);
        j = context.getDimensionPixelSize(android.support.v7.appcompat.R.styleable.Toolbar_contentInsetLeft, 0);
        i = context.getDimensionPixelSize(android.support.v7.appcompat.R.styleable.Toolbar_contentInsetRight, 0);
        ensureContentInsets();
        mContentInsets.setAbsolute(j, i);
        if (l != 0x80000000 || k != 0x80000000)
            mContentInsets.setRelative(l, k);
        mContentInsetStartWithNavigation = context.getDimensionPixelOffset(android.support.v7.appcompat.R.styleable.Toolbar_contentInsetStartWithNavigation, 0x80000000);
        mContentInsetEndWithActions = context.getDimensionPixelOffset(android.support.v7.appcompat.R.styleable.Toolbar_contentInsetEndWithActions, 0x80000000);
        mCollapseIcon = context.getDrawable(android.support.v7.appcompat.R.styleable.Toolbar_collapseIcon);
        mCollapseDescription = context.getText(android.support.v7.appcompat.R.styleable.Toolbar_collapseContentDescription);
        attributeset = context.getText(android.support.v7.appcompat.R.styleable.Toolbar_title);
        if (!TextUtils.isEmpty(attributeset))
            setTitle(attributeset);
        attributeset = context.getText(android.support.v7.appcompat.R.styleable.Toolbar_subtitle);
        if (!TextUtils.isEmpty(attributeset))
            setSubtitle(attributeset);
        mPopupContext = getContext();
        setPopupTheme(context.getResourceId(android.support.v7.appcompat.R.styleable.Toolbar_popupTheme, 0));
        attributeset = context.getDrawable(android.support.v7.appcompat.R.styleable.Toolbar_navigationIcon);
        if (attributeset != null)
            setNavigationIcon(attributeset);
        attributeset = context.getText(android.support.v7.appcompat.R.styleable.Toolbar_navigationContentDescription);
        if (!TextUtils.isEmpty(attributeset))
            setNavigationContentDescription(attributeset);
        attributeset = context.getDrawable(android.support.v7.appcompat.R.styleable.Toolbar_logo);
        if (attributeset != null)
            setLogo(attributeset);
        attributeset = context.getText(android.support.v7.appcompat.R.styleable.Toolbar_logoDescription);
        if (!TextUtils.isEmpty(attributeset))
            setLogoDescription(attributeset);
        if (context.hasValue(android.support.v7.appcompat.R.styleable.Toolbar_titleTextColor))
            setTitleTextColor(context.getColor(android.support.v7.appcompat.R.styleable.Toolbar_titleTextColor, -1));
        if (context.hasValue(android.support.v7.appcompat.R.styleable.Toolbar_subtitleTextColor))
            setSubtitleTextColor(context.getColor(android.support.v7.appcompat.R.styleable.Toolbar_subtitleTextColor, -1));
        context.recycle();
    }

    private void addCustomViewsWithGravity(List list, int i) {
        boolean flag = true;
        boolean flag1 = false;
        int j;
        int k;
        if (ViewCompat.getLayoutDirection(this) != 1)
            flag = false;
        k = getChildCount();
        j = GravityCompat.getAbsoluteGravity(i, ViewCompat.getLayoutDirection(this));
        list.clear();
        i = ((flag1) ? 1 : 0);
        if (flag)
            for (i = k - 1; i >= 0; i--) {
                View view = getChildAt(i);
                LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
                if (layoutparams.mViewType == 0 && shouldLayout(view) && getChildHorizontalGravity(layoutparams.gravity) == j)
                    list.add(view);
            }

        else
            for (; i < k; i++) {
                View view1 = getChildAt(i);
                LayoutParams layoutparams1 = (LayoutParams)view1.getLayoutParams();
                if (layoutparams1.mViewType == 0 && shouldLayout(view1) && getChildHorizontalGravity(layoutparams1.gravity) == j)
                    list.add(view1);
            }

    }

    private void addSystemView(View view, boolean flag) {
        Object obj = view.getLayoutParams();
        if (obj == null)
            obj = generateDefaultLayoutParams();
        else
        if (!checkLayoutParams(((android.view.ViewGroup.LayoutParams) (obj))))
            obj = generateLayoutParams(((android.view.ViewGroup.LayoutParams) (obj)));
        else
            obj = (LayoutParams)obj;
        obj.mViewType = 1;
        if (flag && mExpandedActionView != null) {
            view.setLayoutParams(((android.view.ViewGroup.LayoutParams) (obj)));
            mHiddenViews.add(view);
        } else {
            addView(view, ((android.view.ViewGroup.LayoutParams) (obj)));
        }
    }

    private void ensureContentInsets() {
        if (mContentInsets == null)
            mContentInsets = new RtlSpacingHelper();
    }

    private void ensureLogoView() {
        if (mLogoView == null)
            mLogoView = new AppCompatImageView(getContext());
    }

    private void ensureMenu() {
        ensureMenuView();
        if (mMenuView.peekMenu() == null) {
            MenuBuilder menubuilder = (MenuBuilder)mMenuView.getMenu();
            if (mExpandedMenuPresenter == null)
                mExpandedMenuPresenter = new ExpandedActionViewMenuPresenter();
            mMenuView.setExpandedActionViewsExclusive(true);
            menubuilder.addMenuPresenter(mExpandedMenuPresenter, mPopupContext);
        }
    }

    private void ensureMenuView() {
        if (mMenuView == null) {
            mMenuView = new ActionMenuView(getContext());
            mMenuView.setPopupTheme(mPopupTheme);
            mMenuView.setOnMenuItemClickListener(mMenuViewItemClickListener);
            mMenuView.setMenuCallbacks(mActionMenuPresenterCallback, mMenuBuilderCallback);
            LayoutParams layoutparams = generateDefaultLayoutParams();
            layoutparams.gravity = 0x800005 | mButtonGravity & 0x70;
            mMenuView.setLayoutParams(layoutparams);
            addSystemView(mMenuView, false);
        }
    }

    private void ensureNavButtonView() {
        if (mNavButtonView == null) {
            mNavButtonView = new AppCompatImageButton(getContext(), null, android.support.v7.appcompat.R.attr.toolbarNavigationButtonStyle);
            LayoutParams layoutparams = generateDefaultLayoutParams();
            layoutparams.gravity = 0x800003 | mButtonGravity & 0x70;
            mNavButtonView.setLayoutParams(layoutparams);
        }
    }

    private int getChildHorizontalGravity(int i) {
        int k = ViewCompat.getLayoutDirection(this);
        int j = GravityCompat.getAbsoluteGravity(i, k) & 7;
        i = j;
        switch (j) {
        case 2: // '\002'
        case 4: // '\004'
        default:
            if (k == 1)
                i = 5;
            else
                i = 3;
            break;

        case 1: // '\001'
        case 3: // '\003'
        case 5: // '\005'
            break;
        }
        return i;
    }

    private int getChildTop(View view, int i) {
        int j;
        int k;
        int l;
        int i1;
        LayoutParams layoutparams;
        layoutparams = (LayoutParams)view.getLayoutParams();
        k = view.getMeasuredHeight();
        if (i > 0)
            i = (k - i) / 2;
        else
            i = 0;
        getChildVerticalGravity(layoutparams.gravity);
        JVM INSTR lookupswitch 2: default 60
    //                   48: 116
    //                   80: 126;
           goto _L1 _L2 _L3
_L1:
        j = getPaddingTop();
        l = getPaddingBottom();
        i1 = getHeight();
        i = (i1 - j - l - k) / 2;
        if (i >= layoutparams.topMargin) goto _L5; else goto _L4
_L4:
        i = layoutparams.topMargin;
_L8:
        i += j;
_L6:
        return i;
_L2:
        i = getPaddingTop() - i;
        continue; /* Loop/switch isn't completed */
_L3:
        i = getHeight() - getPaddingBottom() - k - layoutparams.bottomMargin - i;
        if (true) goto _L6; else goto _L5
_L5:
        k = i1 - l - k - i - j;
        if (k < layoutparams.bottomMargin)
            i = Math.max(0, i - (layoutparams.bottomMargin - k));
        if (true) goto _L8; else goto _L7
_L7:
    }

    private int getChildVerticalGravity(int i) {
        int j = i & 0x70;
        i = j;
        switch (j) {
        default:
            i = mGravity & 0x70;
            // fall through

        case 16: // '\020'
        case 48: // '0'
        case 80: // 'P'
            return i;
        }
    }

    private int getHorizontalMargins(View view) {
        view = (android.view.ViewGroup.MarginLayoutParams)view.getLayoutParams();
        int i = MarginLayoutParamsCompat.getMarginStart(view);
        return MarginLayoutParamsCompat.getMarginEnd(view) + i;
    }

    private MenuInflater getMenuInflater() {
        return new SupportMenuInflater(getContext());
    }

    private int getVerticalMargins(View view) {
        view = (android.view.ViewGroup.MarginLayoutParams)view.getLayoutParams();
        int i = ((android.view.ViewGroup.MarginLayoutParams) (view)).topMargin;
        return ((android.view.ViewGroup.MarginLayoutParams) (view)).bottomMargin + i;
    }

    private int getViewListMeasuredWidth(List list, int ai[]) {
        int l = ai[0];
        int k = ai[1];
        int i1 = list.size();
        int j = 0;
        int i;
        int j1;
        int k1;
        int l1;
        for (i = 0; j < i1; i += l1 + k1 + j1) {
            ai = (View)list.get(j);
            LayoutParams layoutparams = (LayoutParams)ai.getLayoutParams();
            l = layoutparams.leftMargin - l;
            k = layoutparams.rightMargin - k;
            k1 = Math.max(0, l);
            j1 = Math.max(0, k);
            l = Math.max(0, -l);
            k = Math.max(0, -k);
            l1 = ai.getMeasuredWidth();
            j++;
        }

        return i;
    }

    private boolean isChildOrHidden(View view) {
        boolean flag;
        if (view.getParent() == this || mHiddenViews.contains(view))
            flag = true;
        else
            flag = false;
        return flag;
    }

    private static boolean isCustomView(View view) {
        boolean flag;
        if (((LayoutParams)view.getLayoutParams()).mViewType == 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    private int layoutChildLeft(View view, int i, int ai[], int j) {
        LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
        int k = layoutparams.leftMargin - ai[0];
        i = Math.max(0, k) + i;
        ai[0] = Math.max(0, -k);
        k = getChildTop(view, j);
        j = view.getMeasuredWidth();
        view.layout(i, k, i + j, view.getMeasuredHeight() + k);
        return layoutparams.rightMargin + j + i;
    }

    private int layoutChildRight(View view, int i, int ai[], int j) {
        LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
        int k = layoutparams.rightMargin - ai[1];
        i -= Math.max(0, k);
        ai[1] = Math.max(0, -k);
        k = getChildTop(view, j);
        j = view.getMeasuredWidth();
        view.layout(i - j, k, i, view.getMeasuredHeight() + k);
        return i - (layoutparams.leftMargin + j);
    }

    private int measureChildCollapseMargins(View view, int i, int j, int k, int l, int ai[]) {
        android.view.ViewGroup.MarginLayoutParams marginlayoutparams = (android.view.ViewGroup.MarginLayoutParams)view.getLayoutParams();
        int k1 = marginlayoutparams.leftMargin - ai[0];
        int i1 = marginlayoutparams.rightMargin - ai[1];
        int j1 = Math.max(0, k1) + Math.max(0, i1);
        ai[0] = Math.max(0, -k1);
        ai[1] = Math.max(0, -i1);
        view.measure(getChildMeasureSpec(i, getPaddingLeft() + getPaddingRight() + j1 + j, marginlayoutparams.width), getChildMeasureSpec(k, getPaddingTop() + getPaddingBottom() + marginlayoutparams.topMargin + marginlayoutparams.bottomMargin + l, marginlayoutparams.height));
        return view.getMeasuredWidth() + j1;
    }

    private void measureChildConstrained(View view, int i, int j, int k, int l, int i1) {
        android.view.ViewGroup.MarginLayoutParams marginlayoutparams = (android.view.ViewGroup.MarginLayoutParams)view.getLayoutParams();
        int j1 = getChildMeasureSpec(i, getPaddingLeft() + getPaddingRight() + marginlayoutparams.leftMargin + marginlayoutparams.rightMargin + j, marginlayoutparams.width);
        j = getChildMeasureSpec(k, getPaddingTop() + getPaddingBottom() + marginlayoutparams.topMargin + marginlayoutparams.bottomMargin + l, marginlayoutparams.height);
        k = android.view.View.MeasureSpec.getMode(j);
        i = j;
        if (k != 0x40000000) {
            i = j;
            if (i1 >= 0) {
                i = i1;
                if (k != 0)
                    i = Math.min(android.view.View.MeasureSpec.getSize(j), i1);
                i = android.view.View.MeasureSpec.makeMeasureSpec(i, 0x40000000);
            }
        }
        view.measure(j1, i);
    }

    private void postShowOverflowMenu() {
        removeCallbacks(mShowOverflowMenuRunnable);
        post(mShowOverflowMenuRunnable);
    }

    private boolean shouldCollapse() {
        boolean flag1 = false;
        if (mCollapsible) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        int j = getChildCount();
        for (int i = 0; i < j; i++) {
            View view = getChildAt(i);
            if (!shouldLayout(view) || view.getMeasuredWidth() <= 0)
                continue;
            flag = flag1;
            if (view.getMeasuredHeight() > 0)
                continue; /* Loop/switch isn't completed */
        }

        flag = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    private boolean shouldLayout(View view) {
        boolean flag;
        if (view != null && view.getParent() == this && view.getVisibility() != 8)
            flag = true;
        else
            flag = false;
        return flag;
    }

    void addChildrenForExpandedActionView() {
        for (int i = mHiddenViews.size() - 1; i >= 0; i--)
            addView((View)mHiddenViews.get(i));

        mHiddenViews.clear();
    }

    public boolean canShowOverflowMenu() {
        boolean flag;
        if (getVisibility() == 0 && mMenuView != null && mMenuView.isOverflowReserved())
            flag = true;
        else
            flag = false;
        return flag;
    }

    protected boolean checkLayoutParams(android.view.ViewGroup.LayoutParams layoutparams) {
        boolean flag;
        if (super.checkLayoutParams(layoutparams) && (layoutparams instanceof LayoutParams))
            flag = true;
        else
            flag = false;
        return flag;
    }

    public void collapseActionView() {
        MenuItemImpl menuitemimpl;
        if (mExpandedMenuPresenter == null)
            menuitemimpl = null;
        else
            menuitemimpl = mExpandedMenuPresenter.mCurrentExpandedItem;
        if (menuitemimpl != null)
            menuitemimpl.collapseActionView();
    }

    public void dismissPopupMenus() {
        if (mMenuView != null)
            mMenuView.dismissPopupMenus();
    }

    void ensureCollapseButtonView() {
        if (mCollapseButtonView == null) {
            mCollapseButtonView = new AppCompatImageButton(getContext(), null, android.support.v7.appcompat.R.attr.toolbarNavigationButtonStyle);
            mCollapseButtonView.setImageDrawable(mCollapseIcon);
            mCollapseButtonView.setContentDescription(mCollapseDescription);
            LayoutParams layoutparams = generateDefaultLayoutParams();
            layoutparams.gravity = 0x800003 | mButtonGravity & 0x70;
            layoutparams.mViewType = 2;
            mCollapseButtonView.setLayoutParams(layoutparams);
            mCollapseButtonView.setOnClickListener(new android.view.View.OnClickListener() {

                final Toolbar this$0;

                public void onClick(View view) {
                    collapseActionView();
                }

             {
                this$0 = Toolbar.this;
                super();
            }
            }
);
        }
    }

    protected LayoutParams generateDefaultLayoutParams() {
        return new LayoutParams(-2, -2);
    }

    protected volatile android.view.ViewGroup.LayoutParams generateDefaultLayoutParams() {
        return generateDefaultLayoutParams();
    }

    public LayoutParams generateLayoutParams(AttributeSet attributeset) {
        return new LayoutParams(getContext(), attributeset);
    }

    protected LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams layoutparams) {
        if (layoutparams instanceof LayoutParams)
            layoutparams = new LayoutParams((LayoutParams)layoutparams);
        else
        if (layoutparams instanceof android.support.v7.app.ActionBar.LayoutParams)
            layoutparams = new LayoutParams((android.support.v7.app.ActionBar.LayoutParams)layoutparams);
        else
        if (layoutparams instanceof android.view.ViewGroup.MarginLayoutParams)
            layoutparams = new LayoutParams((android.view.ViewGroup.MarginLayoutParams)layoutparams);
        else
            layoutparams = new LayoutParams(layoutparams);
        return layoutparams;
    }

    public volatile android.view.ViewGroup.LayoutParams generateLayoutParams(AttributeSet attributeset) {
        return generateLayoutParams(attributeset);
    }

    protected volatile android.view.ViewGroup.LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams layoutparams) {
        return generateLayoutParams(layoutparams);
    }

    public int getContentInsetEnd() {
        int i;
        if (mContentInsets != null)
            i = mContentInsets.getEnd();
        else
            i = 0;
        return i;
    }

    public int getContentInsetEndWithActions() {
        int i;
        if (mContentInsetEndWithActions != 0x80000000)
            i = mContentInsetEndWithActions;
        else
            i = getContentInsetEnd();
        return i;
    }

    public int getContentInsetLeft() {
        int i;
        if (mContentInsets != null)
            i = mContentInsets.getLeft();
        else
            i = 0;
        return i;
    }

    public int getContentInsetRight() {
        int i;
        if (mContentInsets != null)
            i = mContentInsets.getRight();
        else
            i = 0;
        return i;
    }

    public int getContentInsetStart() {
        int i;
        if (mContentInsets != null)
            i = mContentInsets.getStart();
        else
            i = 0;
        return i;
    }

    public int getContentInsetStartWithNavigation() {
        int i;
        if (mContentInsetStartWithNavigation != 0x80000000)
            i = mContentInsetStartWithNavigation;
        else
            i = getContentInsetStart();
        return i;
    }

    public int getCurrentContentInsetEnd() {
        int i;
        if (mMenuView != null) {
            MenuBuilder menubuilder = mMenuView.peekMenu();
            if (menubuilder != null && menubuilder.hasVisibleItems())
                i = 1;
            else
                i = 0;
        } else {
            i = 0;
        }
        if (i != 0)
            i = Math.max(getContentInsetEnd(), Math.max(mContentInsetEndWithActions, 0));
        else
            i = getContentInsetEnd();
        return i;
    }

    public int getCurrentContentInsetLeft() {
        int i;
        if (ViewCompat.getLayoutDirection(this) == 1)
            i = getCurrentContentInsetEnd();
        else
            i = getCurrentContentInsetStart();
        return i;
    }

    public int getCurrentContentInsetRight() {
        int i;
        if (ViewCompat.getLayoutDirection(this) == 1)
            i = getCurrentContentInsetStart();
        else
            i = getCurrentContentInsetEnd();
        return i;
    }

    public int getCurrentContentInsetStart() {
        int i;
        if (getNavigationIcon() != null)
            i = Math.max(getContentInsetStart(), Math.max(mContentInsetStartWithNavigation, 0));
        else
            i = getContentInsetStart();
        return i;
    }

    public Drawable getLogo() {
        Drawable drawable;
        if (mLogoView != null)
            drawable = mLogoView.getDrawable();
        else
            drawable = null;
        return drawable;
    }

    public CharSequence getLogoDescription() {
        CharSequence charsequence;
        if (mLogoView != null)
            charsequence = mLogoView.getContentDescription();
        else
            charsequence = null;
        return charsequence;
    }

    public Menu getMenu() {
        ensureMenu();
        return mMenuView.getMenu();
    }

    public CharSequence getNavigationContentDescription() {
        CharSequence charsequence;
        if (mNavButtonView != null)
            charsequence = mNavButtonView.getContentDescription();
        else
            charsequence = null;
        return charsequence;
    }

    public Drawable getNavigationIcon() {
        Drawable drawable;
        if (mNavButtonView != null)
            drawable = mNavButtonView.getDrawable();
        else
            drawable = null;
        return drawable;
    }

    public Drawable getOverflowIcon() {
        ensureMenu();
        return mMenuView.getOverflowIcon();
    }

    public int getPopupTheme() {
        return mPopupTheme;
    }

    public CharSequence getSubtitle() {
        return mSubtitleText;
    }

    public CharSequence getTitle() {
        return mTitleText;
    }

    public int getTitleMarginBottom() {
        return mTitleMarginBottom;
    }

    public int getTitleMarginEnd() {
        return mTitleMarginEnd;
    }

    public int getTitleMarginStart() {
        return mTitleMarginStart;
    }

    public int getTitleMarginTop() {
        return mTitleMarginTop;
    }

    public DecorToolbar getWrapper() {
        if (mWrapper == null)
            mWrapper = new ToolbarWidgetWrapper(this, true);
        return mWrapper;
    }

    public boolean hasExpandedActionView() {
        boolean flag;
        if (mExpandedMenuPresenter != null && mExpandedMenuPresenter.mCurrentExpandedItem != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean hideOverflowMenu() {
        boolean flag;
        if (mMenuView != null && mMenuView.hideOverflowMenu())
            flag = true;
        else
            flag = false;
        return flag;
    }

    public void inflateMenu(int i) {
        getMenuInflater().inflate(i, getMenu());
    }

    public boolean isOverflowMenuShowPending() {
        boolean flag;
        if (mMenuView != null && mMenuView.isOverflowMenuShowPending())
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean isOverflowMenuShowing() {
        boolean flag;
        if (mMenuView != null && mMenuView.isOverflowMenuShowing())
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean isTitleTruncated() {
        boolean flag1 = false;
        if (mTitleTextView != null) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        int i;
        int j;
        Layout layout;
        layout = mTitleTextView.getLayout();
        flag = flag1;
        if (layout == null)
            continue; /* Loop/switch isn't completed */
        j = layout.getLineCount();
        i = 0;
_L5:
        flag = flag1;
        if (i < j) {
label0:
            {
                if (layout.getEllipsisCount(i) <= 0)
                    break label0;
                flag = true;
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
        i++;
          goto _L5
        if (true) goto _L4; else goto _L6
_L6:
    }

    protected void onDetachedFromWindow() {
        super.onDetachedFromWindow();
        removeCallbacks(mShowOverflowMenuRunnable);
    }

    public boolean onHoverEvent(MotionEvent motionevent) {
        int i = MotionEventCompat.getActionMasked(motionevent);
        if (i == 9)
            mEatingHover = false;
        if (!mEatingHover) {
            boolean flag = super.onHoverEvent(motionevent);
            if (i == 9 && !flag)
                mEatingHover = true;
        }
        if (i == 10 || i == 3)
            mEatingHover = false;
        return true;
    }

    protected void onLayout(boolean flag, int i, int j, int k, int l) {
        int i1;
        int j1;
        int k1;
        boolean flag1;
        int i2;
        int j2;
        int k2;
        int l2;
        int i3;
        int j3;
        boolean flag2;
        Object obj;
        Object obj1;
        int ai[];
        if (ViewCompat.getLayoutDirection(this) == 1)
            k1 = 1;
        else
            k1 = 0;
        j2 = getWidth();
        i3 = getHeight();
        j1 = getPaddingLeft();
        k2 = getPaddingRight();
        l2 = getPaddingTop();
        j3 = getPaddingBottom();
        i = j2 - k2;
        ai = mTempMargins;
        ai[1] = 0;
        ai[0] = 0;
        k = ViewCompat.getMinimumHeight(this);
        if (k >= 0)
            i1 = Math.min(k, l - j);
        else
            i1 = 0;
        if (shouldLayout(mNavButtonView)) {
            if (k1 != 0) {
                i = layoutChildRight(mNavButtonView, i, ai, i1);
                j = j1;
            } else {
                j = layoutChildLeft(mNavButtonView, j1, ai, i1);
            }
        } else {
            j = j1;
        }
        l = i;
        k = j;
        if (shouldLayout(mCollapseButtonView))
            if (k1 != 0) {
                l = layoutChildRight(mCollapseButtonView, i, ai, i1);
                k = j;
            } else {
                k = layoutChildLeft(mCollapseButtonView, j, ai, i1);
                l = i;
            }
        i = l;
        j = k;
        if (shouldLayout(mMenuView))
            if (k1 != 0) {
                j = layoutChildLeft(mMenuView, k, ai, i1);
                i = l;
            } else {
                i = layoutChildRight(mMenuView, l, ai, i1);
                j = k;
            }
        k = getCurrentContentInsetLeft();
        l = getCurrentContentInsetRight();
        ai[0] = Math.max(0, k - j);
        ai[1] = Math.max(0, l - (j2 - k2 - i));
        k = Math.max(j, k);
        l = Math.min(i, j2 - k2 - l);
        j = l;
        i = k;
        if (shouldLayout(mExpandedActionView))
            if (k1 != 0) {
                j = layoutChildRight(mExpandedActionView, l, ai, i1);
                i = k;
            } else {
                i = layoutChildLeft(mExpandedActionView, k, ai, i1);
                j = l;
            }
        if (shouldLayout(mLogoView)) {
            if (k1 != 0) {
                k = layoutChildRight(mLogoView, j, ai, i1);
                j = i;
            } else {
                i = layoutChildLeft(mLogoView, i, ai, i1);
                k = j;
                j = i;
            }
        } else {
            k = j;
            j = i;
        }
        flag2 = shouldLayout(mTitleTextView);
        flag = shouldLayout(mSubtitleTextView);
        i = 0;
        if (flag2) {
            LayoutParams layoutparams = (LayoutParams)mTitleTextView.getLayoutParams();
            i = layoutparams.topMargin;
            l = mTitleTextView.getMeasuredHeight();
            i = 0 + (layoutparams.bottomMargin + (i + l));
        }
        if (flag) {
            LayoutParams layoutparams1 = (LayoutParams)mSubtitleTextView.getLayoutParams();
            l = layoutparams1.topMargin;
            int l1 = mSubtitleTextView.getMeasuredHeight();
            i2 = layoutparams1.bottomMargin + (l + l1) + i;
        } else {
            i2 = i;
        }
        if (flag2) goto _L2; else goto _L1
_L1:
        l = k;
        i = j;
        if (!flag) goto _L3; else goto _L2
_L2:
        if (flag2)
            obj = mTitleTextView;
        else
            obj = mSubtitleTextView;
        if (flag)
            obj1 = mSubtitleTextView;
        else
            obj1 = mTitleTextView;
        obj = (LayoutParams)((View) (obj)).getLayoutParams();
        obj1 = (LayoutParams)((View) (obj1)).getLayoutParams();
        if (flag2 && mTitleTextView.getMeasuredWidth() > 0 || flag && mSubtitleTextView.getMeasuredWidth() > 0)
            flag1 = true;
        else
            flag1 = false;
        mGravity & 0x70;
        JVM INSTR lookupswitch 2: default 576
    //                   48: 1032
    //                   80: 1106;
           goto _L4 _L5 _L6
_L4:
        i = (i3 - l2 - j3 - i2) / 2;
        if (i < ((LayoutParams) (obj)).topMargin + mTitleMarginTop) {
            i = ((LayoutParams) (obj)).topMargin + mTitleMarginTop;
        } else {
            l = i3 - j3 - i2 - i - l2;
            if (l < ((LayoutParams) (obj)).bottomMargin + mTitleMarginBottom)
                i = Math.max(0, i - ((((LayoutParams) (obj1)).bottomMargin + mTitleMarginBottom) - l));
        }
        i = l2 + i;
_L8:
        if (k1 != 0) {
            if (flag1)
                l = mTitleMarginStart;
            else
                l = 0;
            l -= ai[1];
            k -= Math.max(0, l);
            ai[1] = Math.max(0, -l);
            if (flag2) {
                obj = (LayoutParams)mTitleTextView.getLayoutParams();
                l = k - mTitleTextView.getMeasuredWidth();
                k1 = mTitleTextView.getMeasuredHeight() + i;
                mTitleTextView.layout(l, i, k, k1);
                i2 = mTitleMarginEnd;
                i = k1 + ((LayoutParams) (obj)).bottomMargin;
                l -= i2;
            } else {
                l = k;
            }
            if (flag) {
                obj = (LayoutParams)mSubtitleTextView.getLayoutParams();
                i2 = ((LayoutParams) (obj)).topMargin + i;
                k1 = mSubtitleTextView.getMeasuredWidth();
                i = mSubtitleTextView.getMeasuredHeight() + i2;
                mSubtitleTextView.layout(k - k1, i2, k, i);
                k1 = mTitleMarginEnd;
                i = ((LayoutParams) (obj)).bottomMargin;
                i = k - k1;
            } else {
                i = k;
            }
            if (flag1)
                i = Math.min(l, i);
            else
                i = k;
            l = i;
            i = j;
        } else {
            if (flag1)
                l = mTitleMarginStart;
            else
                l = 0;
            l -= ai[0];
            j += Math.max(0, l);
            ai[0] = Math.max(0, -l);
            if (flag2) {
                obj = (LayoutParams)mTitleTextView.getLayoutParams();
                k1 = mTitleTextView.getMeasuredWidth() + j;
                l = mTitleTextView.getMeasuredHeight() + i;
                mTitleTextView.layout(j, i, k1, l);
                i2 = mTitleMarginEnd;
                i = ((LayoutParams) (obj)).bottomMargin;
                k1 += i2;
                i += l;
            } else {
                k1 = j;
            }
            if (flag) {
                obj = (LayoutParams)mSubtitleTextView.getLayoutParams();
                i2 = i + ((LayoutParams) (obj)).topMargin;
                i = mSubtitleTextView.getMeasuredWidth() + j;
                l = mSubtitleTextView.getMeasuredHeight() + i2;
                mSubtitleTextView.layout(j, i2, i, l);
                i2 = mTitleMarginEnd;
                l = ((LayoutParams) (obj)).bottomMargin;
                i2 += i;
            } else {
                i2 = j;
            }
            l = k;
            i = j;
            if (flag1) {
                i = Math.max(k1, i2);
                l = k;
            }
        }
_L3:
        addCustomViewsWithGravity(mTempViews, 3);
        k = mTempViews.size();
        for (j = 0; j < k; j++)
            i = layoutChildLeft((View)mTempViews.get(j), i, ai, i1);

        addCustomViewsWithGravity(mTempViews, 5);
        k = mTempViews.size();
        for (j = 0; j < k; j++)
            l = layoutChildRight((View)mTempViews.get(j), l, ai, i1);

        addCustomViewsWithGravity(mTempViews, 1);
        k = getViewListMeasuredWidth(mTempViews, ai);
        j = ((j2 - j1 - k2) / 2 + j1) - k / 2;
        k += j;
          goto _L7
_L5:
        i = getPaddingTop();
        i = ((LayoutParams) (obj)).topMargin + i + mTitleMarginTop;
        break MISSING_BLOCK_LABEL_620;
_L6:
        i = i3 - j3 - ((LayoutParams) (obj1)).bottomMargin - mTitleMarginBottom - i2;
          goto _L8
_L7:
        if (j >= i) goto _L10; else goto _L9
_L9:
        l = mTempViews.size();
        k = 0;
        j = i;
        for (i = k; i < l; i++)
            j = layoutChildLeft((View)mTempViews.get(i), j, ai, i1);

        break; /* Loop/switch isn't completed */
_L10:
        i = j;
        if (k > l)
            i = j - (k - l);
        if (true) goto _L9; else goto _L11
_L11:
        mTempViews.clear();
        return;
          goto _L8
    }

    protected void onMeasure(int i, int j) {
        int i2 = 0;
        int i1 = 0;
        int ai[] = mTempMargins;
        int k;
        int l;
        int j2;
        int k2;
        int l2;
        int j3;
        if (ViewUtils.isLayoutRtl(this)) {
            j2 = 0;
            k2 = 1;
        } else {
            j2 = 1;
            k2 = 0;
        }
        k = 0;
        if (shouldLayout(mNavButtonView)) {
            measureChildConstrained(mNavButtonView, i, 0, j, 0, mMaxButtonHeight);
            k = mNavButtonView.getMeasuredWidth() + getHorizontalMargins(mNavButtonView);
            i2 = Math.max(0, mNavButtonView.getMeasuredHeight() + getVerticalMargins(mNavButtonView));
            i1 = ViewUtils.combineMeasuredStates(0, ViewCompat.getMeasuredState(mNavButtonView));
        }
        l2 = k;
        k = i1;
        l = i2;
        if (shouldLayout(mCollapseButtonView)) {
            measureChildConstrained(mCollapseButtonView, i, 0, j, 0, mMaxButtonHeight);
            l2 = mCollapseButtonView.getMeasuredWidth() + getHorizontalMargins(mCollapseButtonView);
            l = Math.max(i2, mCollapseButtonView.getMeasuredHeight() + getVerticalMargins(mCollapseButtonView));
            k = ViewUtils.combineMeasuredStates(i1, ViewCompat.getMeasuredState(mCollapseButtonView));
        }
        i1 = getCurrentContentInsetStart();
        j3 = 0 + Math.max(i1, l2);
        ai[k2] = Math.max(0, i1 - l2);
        k2 = 0;
        i2 = k;
        i1 = l;
        if (shouldLayout(mMenuView)) {
            measureChildConstrained(mMenuView, i, j3, j, 0, mMaxButtonHeight);
            k2 = mMenuView.getMeasuredWidth() + getHorizontalMargins(mMenuView);
            i1 = Math.max(l, mMenuView.getMeasuredHeight() + getVerticalMargins(mMenuView));
            i2 = ViewUtils.combineMeasuredStates(k, ViewCompat.getMeasuredState(mMenuView));
        }
        k = getCurrentContentInsetEnd();
        l2 = j3 + Math.max(k, k2);
        ai[j2] = Math.max(0, k - k2);
        k2 = l2;
        l = i2;
        k = i1;
        if (shouldLayout(mExpandedActionView)) {
            k2 = l2 + measureChildCollapseMargins(mExpandedActionView, i, l2, j, 0, ai);
            k = Math.max(i1, mExpandedActionView.getMeasuredHeight() + getVerticalMargins(mExpandedActionView));
            l = ViewUtils.combineMeasuredStates(i2, ViewCompat.getMeasuredState(mExpandedActionView));
        }
        i1 = k2;
        i2 = l;
        j2 = k;
        if (shouldLayout(mLogoView)) {
            i1 = k2 + measureChildCollapseMargins(mLogoView, i, k2, j, 0, ai);
            j2 = Math.max(k, mLogoView.getMeasuredHeight() + getVerticalMargins(mLogoView));
            i2 = ViewUtils.combineMeasuredStates(l, ViewCompat.getMeasuredState(mLogoView));
        }
        l2 = getChildCount();
        k2 = 0;
        l = j2;
        k = i2;
        i2 = k2;
        k2 = i1;
        while (i2 < l2)  {
            View view = getChildAt(i2);
            int k1;
            int i3;
            int k3;
            int l3;
            int i4;
            if (((LayoutParams)view.getLayoutParams()).mViewType == 0) {
                if (!shouldLayout(view)) {
                    int j1 = k;
                    k = l;
                    l = j1;
                } else {
                    k2 += measureChildCollapseMargins(view, i, k2, j, 0, ai);
                    k1 = Math.max(l, view.getMeasuredHeight() + getVerticalMargins(view));
                    l = ViewUtils.combineMeasuredStates(k, ViewCompat.getMeasuredState(view));
                    k = k1;
                }
            } else {
                int l1 = l;
                l = k;
                k = l1;
            }
            i2++;
            k1 = l;
            l = k;
            k = k1;
        }
        j2 = 0;
        i2 = 0;
        l3 = mTitleMarginTop + mTitleMarginBottom;
        i4 = mTitleMarginStart + mTitleMarginEnd;
        k1 = k;
        if (shouldLayout(mTitleTextView)) {
            measureChildCollapseMargins(mTitleTextView, i, k2 + i4, j, l3, ai);
            k1 = mTitleTextView.getMeasuredWidth();
            j2 = getHorizontalMargins(mTitleTextView) + k1;
            i2 = mTitleTextView.getMeasuredHeight() + getVerticalMargins(mTitleTextView);
            k1 = ViewUtils.combineMeasuredStates(k, ViewCompat.getMeasuredState(mTitleTextView));
        }
        k3 = i2;
        i3 = j2;
        k = k1;
        if (shouldLayout(mSubtitleTextView)) {
            i3 = Math.max(j2, measureChildCollapseMargins(mSubtitleTextView, i, k2 + i4, j, l3 + i2, ai));
            k3 = i2 + (mSubtitleTextView.getMeasuredHeight() + getVerticalMargins(mSubtitleTextView));
            k = ViewUtils.combineMeasuredStates(k1, ViewCompat.getMeasuredState(mSubtitleTextView));
        }
        k1 = Math.max(l, k3);
        j2 = getPaddingLeft();
        k3 = getPaddingRight();
        i2 = getPaddingTop();
        l = getPaddingBottom();
        j2 = ViewCompat.resolveSizeAndState(Math.max(i3 + k2 + (j2 + k3), getSuggestedMinimumWidth()), i, 0xff000000 & k);
        i = ViewCompat.resolveSizeAndState(Math.max(k1 + (i2 + l), getSuggestedMinimumHeight()), j, k << 16);
        if (shouldCollapse())
            i = 0;
        setMeasuredDimension(j2, i);
    }

    protected void onRestoreInstanceState(Parcelable parcelable) {
        if (parcelable instanceof SavedState) goto _L2; else goto _L1
_L1:
        super.onRestoreInstanceState(parcelable);
_L4:
        return;
_L2:
        SavedState savedstate = (SavedState)parcelable;
        super.onRestoreInstanceState(savedstate.getSuperState());
        if (mMenuView != null)
            parcelable = mMenuView.peekMenu();
        else
            parcelable = null;
        if (savedstate.expandedMenuItemId != 0 && mExpandedMenuPresenter != null && parcelable != null) {
            parcelable = parcelable.findItem(savedstate.expandedMenuItemId);
            if (parcelable != null)
                MenuItemCompat.expandActionView(parcelable);
        }
        if (savedstate.isOverflowOpen)
            postShowOverflowMenu();
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void onRtlPropertiesChanged(int i) {
        boolean flag = true;
        if (android.os.Build.VERSION.SDK_INT >= 17)
            super.onRtlPropertiesChanged(i);
        ensureContentInsets();
        RtlSpacingHelper rtlspacinghelper = mContentInsets;
        if (i != 1)
            flag = false;
        rtlspacinghelper.setDirection(flag);
    }

    protected Parcelable onSaveInstanceState() {
        SavedState savedstate = new SavedState(super.onSaveInstanceState());
        if (mExpandedMenuPresenter != null && mExpandedMenuPresenter.mCurrentExpandedItem != null)
            savedstate.expandedMenuItemId = mExpandedMenuPresenter.mCurrentExpandedItem.getItemId();
        savedstate.isOverflowOpen = isOverflowMenuShowing();
        return savedstate;
    }

    public boolean onTouchEvent(MotionEvent motionevent) {
        int i = MotionEventCompat.getActionMasked(motionevent);
        if (i == 0)
            mEatingTouch = false;
        if (!mEatingTouch) {
            boolean flag = super.onTouchEvent(motionevent);
            if (i == 0 && !flag)
                mEatingTouch = true;
        }
        if (i == 1 || i == 3)
            mEatingTouch = false;
        return true;
    }

    void removeChildrenForExpandedActionView() {
        for (int i = getChildCount() - 1; i >= 0; i--) {
            View view = getChildAt(i);
            if (((LayoutParams)view.getLayoutParams()).mViewType != 2 && view != mMenuView) {
                removeViewAt(i);
                mHiddenViews.add(view);
            }
        }

    }

    public void setCollapsible(boolean flag) {
        mCollapsible = flag;
        requestLayout();
    }

    public void setContentInsetEndWithActions(int i) {
        int j = i;
        if (i < 0)
            j = 0x80000000;
        if (j != mContentInsetEndWithActions) {
            mContentInsetEndWithActions = j;
            if (getNavigationIcon() != null)
                requestLayout();
        }
    }

    public void setContentInsetStartWithNavigation(int i) {
        int j = i;
        if (i < 0)
            j = 0x80000000;
        if (j != mContentInsetStartWithNavigation) {
            mContentInsetStartWithNavigation = j;
            if (getNavigationIcon() != null)
                requestLayout();
        }
    }

    public void setContentInsetsAbsolute(int i, int j) {
        ensureContentInsets();
        mContentInsets.setAbsolute(i, j);
    }

    public void setContentInsetsRelative(int i, int j) {
        ensureContentInsets();
        mContentInsets.setRelative(i, j);
    }

    public void setLogo(int i) {
        setLogo(AppCompatResources.getDrawable(getContext(), i));
    }

    public void setLogo(Drawable drawable) {
        if (drawable == null) goto _L2; else goto _L1
_L1:
        ensureLogoView();
        if (!isChildOrHidden(mLogoView))
            addSystemView(mLogoView, true);
_L4:
        if (mLogoView != null)
            mLogoView.setImageDrawable(drawable);
        return;
_L2:
        if (mLogoView != null && isChildOrHidden(mLogoView)) {
            removeView(mLogoView);
            mHiddenViews.remove(mLogoView);
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void setLogoDescription(int i) {
        setLogoDescription(getContext().getText(i));
    }

    public void setLogoDescription(CharSequence charsequence) {
        if (!TextUtils.isEmpty(charsequence))
            ensureLogoView();
        if (mLogoView != null)
            mLogoView.setContentDescription(charsequence);
    }

    public void setMenu(MenuBuilder menubuilder, ActionMenuPresenter actionmenupresenter) {
        if (menubuilder != null || mMenuView != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        ensureMenuView();
        MenuBuilder menubuilder1 = mMenuView.peekMenu();
        if (menubuilder1 != menubuilder) {
            if (menubuilder1 != null) {
                menubuilder1.removeMenuPresenter(mOuterActionMenuPresenter);
                menubuilder1.removeMenuPresenter(mExpandedMenuPresenter);
            }
            if (mExpandedMenuPresenter == null)
                mExpandedMenuPresenter = new ExpandedActionViewMenuPresenter();
            actionmenupresenter.setExpandedActionViewsExclusive(true);
            if (menubuilder != null) {
                menubuilder.addMenuPresenter(actionmenupresenter, mPopupContext);
                menubuilder.addMenuPresenter(mExpandedMenuPresenter, mPopupContext);
            } else {
                actionmenupresenter.initForMenu(mPopupContext, null);
                mExpandedMenuPresenter.initForMenu(mPopupContext, null);
                actionmenupresenter.updateMenuView(true);
                mExpandedMenuPresenter.updateMenuView(true);
            }
            mMenuView.setPopupTheme(mPopupTheme);
            mMenuView.setPresenter(actionmenupresenter);
            mOuterActionMenuPresenter = actionmenupresenter;
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void setMenuCallbacks(android.support.v7.view.menu.MenuPresenter.Callback callback, android.support.v7.view.menu.MenuBuilder.Callback callback1) {
        mActionMenuPresenterCallback = callback;
        mMenuBuilderCallback = callback1;
        if (mMenuView != null)
            mMenuView.setMenuCallbacks(callback, callback1);
    }

    public void setNavigationContentDescription(int i) {
        CharSequence charsequence;
        if (i != 0)
            charsequence = getContext().getText(i);
        else
            charsequence = null;
        setNavigationContentDescription(charsequence);
    }

    public void setNavigationContentDescription(CharSequence charsequence) {
        if (!TextUtils.isEmpty(charsequence))
            ensureNavButtonView();
        if (mNavButtonView != null)
            mNavButtonView.setContentDescription(charsequence);
    }

    public void setNavigationIcon(int i) {
        setNavigationIcon(AppCompatResources.getDrawable(getContext(), i));
    }

    public void setNavigationIcon(Drawable drawable) {
        if (drawable == null) goto _L2; else goto _L1
_L1:
        ensureNavButtonView();
        if (!isChildOrHidden(mNavButtonView))
            addSystemView(mNavButtonView, true);
_L4:
        if (mNavButtonView != null)
            mNavButtonView.setImageDrawable(drawable);
        return;
_L2:
        if (mNavButtonView != null && isChildOrHidden(mNavButtonView)) {
            removeView(mNavButtonView);
            mHiddenViews.remove(mNavButtonView);
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void setNavigationOnClickListener(android.view.View.OnClickListener onclicklistener) {
        ensureNavButtonView();
        mNavButtonView.setOnClickListener(onclicklistener);
    }

    public void setOnMenuItemClickListener(OnMenuItemClickListener onmenuitemclicklistener) {
        mOnMenuItemClickListener = onmenuitemclicklistener;
    }

    public void setOverflowIcon(Drawable drawable) {
        ensureMenu();
        mMenuView.setOverflowIcon(drawable);
    }

    public void setPopupTheme(int i) {
        if (mPopupTheme != i) {
            mPopupTheme = i;
            if (i == 0)
                mPopupContext = getContext();
            else
                mPopupContext = new ContextThemeWrapper(getContext(), i);
        }
    }

    public void setSubtitle(int i) {
        setSubtitle(getContext().getText(i));
    }

    public void setSubtitle(CharSequence charsequence) {
        if (TextUtils.isEmpty(charsequence)) goto _L2; else goto _L1
_L1:
        if (mSubtitleTextView == null) {
            Context context = getContext();
            mSubtitleTextView = new AppCompatTextView(context);
            mSubtitleTextView.setSingleLine();
            mSubtitleTextView.setEllipsize(android.text.TextUtils.TruncateAt.END);
            if (mSubtitleTextAppearance != 0)
                mSubtitleTextView.setTextAppearance(context, mSubtitleTextAppearance);
            if (mSubtitleTextColor != 0)
                mSubtitleTextView.setTextColor(mSubtitleTextColor);
        }
        if (!isChildOrHidden(mSubtitleTextView))
            addSystemView(mSubtitleTextView, true);
_L4:
        if (mSubtitleTextView != null)
            mSubtitleTextView.setText(charsequence);
        mSubtitleText = charsequence;
        return;
_L2:
        if (mSubtitleTextView != null && isChildOrHidden(mSubtitleTextView)) {
            removeView(mSubtitleTextView);
            mHiddenViews.remove(mSubtitleTextView);
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void setSubtitleTextAppearance(Context context, int i) {
        mSubtitleTextAppearance = i;
        if (mSubtitleTextView != null)
            mSubtitleTextView.setTextAppearance(context, i);
    }

    public void setSubtitleTextColor(int i) {
        mSubtitleTextColor = i;
        if (mSubtitleTextView != null)
            mSubtitleTextView.setTextColor(i);
    }

    public void setTitle(int i) {
        setTitle(getContext().getText(i));
    }

    public void setTitle(CharSequence charsequence) {
        if (TextUtils.isEmpty(charsequence)) goto _L2; else goto _L1
_L1:
        if (mTitleTextView == null) {
            Context context = getContext();
            mTitleTextView = new AppCompatTextView(context);
            mTitleTextView.setSingleLine();
            mTitleTextView.setEllipsize(android.text.TextUtils.TruncateAt.END);
            if (mTitleTextAppearance != 0)
                mTitleTextView.setTextAppearance(context, mTitleTextAppearance);
            if (mTitleTextColor != 0)
                mTitleTextView.setTextColor(mTitleTextColor);
        }
        if (!isChildOrHidden(mTitleTextView))
            addSystemView(mTitleTextView, true);
_L4:
        if (mTitleTextView != null)
            mTitleTextView.setText(charsequence);
        mTitleText = charsequence;
        return;
_L2:
        if (mTitleTextView != null && isChildOrHidden(mTitleTextView)) {
            removeView(mTitleTextView);
            mHiddenViews.remove(mTitleTextView);
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void setTitleMargin(int i, int j, int k, int l) {
        mTitleMarginStart = i;
        mTitleMarginTop = j;
        mTitleMarginEnd = k;
        mTitleMarginBottom = l;
        requestLayout();
    }

    public void setTitleMarginBottom(int i) {
        mTitleMarginBottom = i;
        requestLayout();
    }

    public void setTitleMarginEnd(int i) {
        mTitleMarginEnd = i;
        requestLayout();
    }

    public void setTitleMarginStart(int i) {
        mTitleMarginStart = i;
        requestLayout();
    }

    public void setTitleMarginTop(int i) {
        mTitleMarginTop = i;
        requestLayout();
    }

    public void setTitleTextAppearance(Context context, int i) {
        mTitleTextAppearance = i;
        if (mTitleTextView != null)
            mTitleTextView.setTextAppearance(context, i);
    }

    public void setTitleTextColor(int i) {
        mTitleTextColor = i;
        if (mTitleTextView != null)
            mTitleTextView.setTextColor(i);
    }

    public boolean showOverflowMenu() {
        boolean flag;
        if (mMenuView != null && mMenuView.showOverflowMenu())
            flag = true;
        else
            flag = false;
        return flag;
    }
}
