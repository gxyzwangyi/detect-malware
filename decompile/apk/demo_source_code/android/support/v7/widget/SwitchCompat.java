// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v7.widget;

import android.content.Context;
import android.content.res.*;
import android.graphics.*;
import android.graphics.drawable.Drawable;
import android.support.v4.graphics.drawable.DrawableCompat;
import android.support.v4.view.MotionEventCompat;
import android.support.v4.view.ViewCompat;
import android.support.v7.content.res.AppCompatResources;
import android.support.v7.text.AllCapsTransformationMethod;
import android.text.*;
import android.text.method.TransformationMethod;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.*;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityNodeInfo;
import android.view.animation.Animation;
import android.view.animation.Transformation;
import android.widget.CompoundButton;
import java.util.List;

// Referenced classes of package android.support.v7.widget:
//            TintTypedArray, DrawableUtils, ViewUtils

public class SwitchCompat extends CompoundButton {
    private class ThumbAnimation extends Animation {

        final float mDiff;
        final float mEndPosition;
        final float mStartPosition;
        final SwitchCompat this$0;

        protected void applyTransformation(float f, Transformation transformation) {
            setThumbPosition(mStartPosition + mDiff * f);
        }

        ThumbAnimation(float f, float f1) {
            this$0 = SwitchCompat.this;
            super();
            mStartPosition = f;
            mEndPosition = f1;
            mDiff = f1 - f;
        }
    }


    private static final String ACCESSIBILITY_EVENT_CLASS_NAME = "android.widget.Switch";
    private static final int CHECKED_STATE_SET[] = {
        0x10100a0
    };
    private static final int MONOSPACE = 3;
    private static final int SANS = 1;
    private static final int SERIF = 2;
    private static final int THUMB_ANIMATION_DURATION = 250;
    private static final int TOUCH_MODE_DOWN = 1;
    private static final int TOUCH_MODE_DRAGGING = 2;
    private static final int TOUCH_MODE_IDLE = 0;
    private boolean mHasThumbTint;
    private boolean mHasThumbTintMode;
    private boolean mHasTrackTint;
    private boolean mHasTrackTintMode;
    private int mMinFlingVelocity;
    private Layout mOffLayout;
    private Layout mOnLayout;
    ThumbAnimation mPositionAnimator;
    private boolean mShowText;
    private boolean mSplitTrack;
    private int mSwitchBottom;
    private int mSwitchHeight;
    private int mSwitchLeft;
    private int mSwitchMinWidth;
    private int mSwitchPadding;
    private int mSwitchRight;
    private int mSwitchTop;
    private TransformationMethod mSwitchTransformationMethod;
    private int mSwitchWidth;
    private final Rect mTempRect;
    private ColorStateList mTextColors;
    private CharSequence mTextOff;
    private CharSequence mTextOn;
    private TextPaint mTextPaint;
    private Drawable mThumbDrawable;
    private float mThumbPosition;
    private int mThumbTextPadding;
    private ColorStateList mThumbTintList;
    private android.graphics.PorterDuff.Mode mThumbTintMode;
    private int mThumbWidth;
    private int mTouchMode;
    private int mTouchSlop;
    private float mTouchX;
    private float mTouchY;
    private Drawable mTrackDrawable;
    private ColorStateList mTrackTintList;
    private android.graphics.PorterDuff.Mode mTrackTintMode;
    private VelocityTracker mVelocityTracker;

    public SwitchCompat(Context context) {
        this(context, null);
    }

    public SwitchCompat(Context context, AttributeSet attributeset) {
        this(context, attributeset, android.support.v7.appcompat.R.attr.switchStyle);
    }

    public SwitchCompat(Context context, AttributeSet attributeset, int i) {
        super(context, attributeset, i);
        mThumbTintList = null;
        mThumbTintMode = null;
        mHasThumbTint = false;
        mHasThumbTintMode = false;
        mTrackTintList = null;
        mTrackTintMode = null;
        mHasTrackTint = false;
        mHasTrackTintMode = false;
        mVelocityTracker = VelocityTracker.obtain();
        mTempRect = new Rect();
        mTextPaint = new TextPaint(1);
        Object obj = getResources();
        mTextPaint.density = ((Resources) (obj)).getDisplayMetrics().density;
        attributeset = TintTypedArray.obtainStyledAttributes(context, attributeset, android.support.v7.appcompat.R.styleable.SwitchCompat, i, 0);
        mThumbDrawable = attributeset.getDrawable(android.support.v7.appcompat.R.styleable.SwitchCompat_android_thumb);
        if (mThumbDrawable != null)
            mThumbDrawable.setCallback(this);
        mTrackDrawable = attributeset.getDrawable(android.support.v7.appcompat.R.styleable.SwitchCompat_track);
        if (mTrackDrawable != null)
            mTrackDrawable.setCallback(this);
        mTextOn = attributeset.getText(android.support.v7.appcompat.R.styleable.SwitchCompat_android_textOn);
        mTextOff = attributeset.getText(android.support.v7.appcompat.R.styleable.SwitchCompat_android_textOff);
        mShowText = attributeset.getBoolean(android.support.v7.appcompat.R.styleable.SwitchCompat_showText, true);
        mThumbTextPadding = attributeset.getDimensionPixelSize(android.support.v7.appcompat.R.styleable.SwitchCompat_thumbTextPadding, 0);
        mSwitchMinWidth = attributeset.getDimensionPixelSize(android.support.v7.appcompat.R.styleable.SwitchCompat_switchMinWidth, 0);
        mSwitchPadding = attributeset.getDimensionPixelSize(android.support.v7.appcompat.R.styleable.SwitchCompat_switchPadding, 0);
        mSplitTrack = attributeset.getBoolean(android.support.v7.appcompat.R.styleable.SwitchCompat_splitTrack, false);
        obj = attributeset.getColorStateList(android.support.v7.appcompat.R.styleable.SwitchCompat_thumbTint);
        if (obj != null) {
            mThumbTintList = ((ColorStateList) (obj));
            mHasThumbTint = true;
        }
        obj = DrawableUtils.parseTintMode(attributeset.getInt(android.support.v7.appcompat.R.styleable.SwitchCompat_thumbTintMode, -1), null);
        if (mThumbTintMode != obj) {
            mThumbTintMode = ((android.graphics.PorterDuff.Mode) (obj));
            mHasThumbTintMode = true;
        }
        if (mHasThumbTint || mHasThumbTintMode)
            applyThumbTint();
        obj = attributeset.getColorStateList(android.support.v7.appcompat.R.styleable.SwitchCompat_trackTint);
        if (obj != null) {
            mTrackTintList = ((ColorStateList) (obj));
            mHasTrackTint = true;
        }
        obj = DrawableUtils.parseTintMode(attributeset.getInt(android.support.v7.appcompat.R.styleable.SwitchCompat_trackTintMode, -1), null);
        if (mTrackTintMode != obj) {
            mTrackTintMode = ((android.graphics.PorterDuff.Mode) (obj));
            mHasTrackTintMode = true;
        }
        if (mHasTrackTint || mHasTrackTintMode)
            applyTrackTint();
        i = attributeset.getResourceId(android.support.v7.appcompat.R.styleable.SwitchCompat_switchTextAppearance, 0);
        if (i != 0)
            setSwitchTextAppearance(context, i);
        attributeset.recycle();
        context = ViewConfiguration.get(context);
        mTouchSlop = context.getScaledTouchSlop();
        mMinFlingVelocity = context.getScaledMinimumFlingVelocity();
        refreshDrawableState();
        setChecked(isChecked());
    }

    private void animateThumbToCheckedState(final boolean newCheckedState) {
        if (mPositionAnimator != null)
            cancelPositionAnimator();
        float f1 = mThumbPosition;
        float f;
        if (newCheckedState)
            f = 1.0F;
        else
            f = 0.0F;
        mPositionAnimator = new ThumbAnimation(f1, f);
        mPositionAnimator.setDuration(250L);
        mPositionAnimator.setAnimationListener(new android.view.animation.Animation.AnimationListener() {

            final SwitchCompat this$0;
            final boolean val$newCheckedState;

            public void onAnimationEnd(Animation animation) {
                if (mPositionAnimator == animation) {
                    animation = SwitchCompat.this;
                    float f2;
                    if (newCheckedState)
                        f2 = 1.0F;
                    else
                        f2 = 0.0F;
                    animation.setThumbPosition(f2);
                    mPositionAnimator = null;
                }
            }

            public void onAnimationRepeat(Animation animation) {
            }

            public void onAnimationStart(Animation animation) {
            }

             {
                this$0 = SwitchCompat.this;
                newCheckedState = flag;
                super();
            }
        }
);
        startAnimation(mPositionAnimator);
    }

    private void applyThumbTint() {
        if (mThumbDrawable != null && (mHasThumbTint || mHasThumbTintMode)) {
            mThumbDrawable = mThumbDrawable.mutate();
            if (mHasThumbTint)
                DrawableCompat.setTintList(mThumbDrawable, mThumbTintList);
            if (mHasThumbTintMode)
                DrawableCompat.setTintMode(mThumbDrawable, mThumbTintMode);
            if (mThumbDrawable.isStateful())
                mThumbDrawable.setState(getDrawableState());
        }
    }

    private void applyTrackTint() {
        if (mTrackDrawable != null && (mHasTrackTint || mHasTrackTintMode)) {
            mTrackDrawable = mTrackDrawable.mutate();
            if (mHasTrackTint)
                DrawableCompat.setTintList(mTrackDrawable, mTrackTintList);
            if (mHasTrackTintMode)
                DrawableCompat.setTintMode(mTrackDrawable, mTrackTintMode);
            if (mTrackDrawable.isStateful())
                mTrackDrawable.setState(getDrawableState());
        }
    }

    private void cancelPositionAnimator() {
        if (mPositionAnimator != null) {
            clearAnimation();
            mPositionAnimator = null;
        }
    }

    private void cancelSuperTouch(MotionEvent motionevent) {
        motionevent = MotionEvent.obtain(motionevent);
        motionevent.setAction(3);
        super.onTouchEvent(motionevent);
        motionevent.recycle();
    }

    private static float constrain(float f, float f1, float f2) {
        if (f >= f1)
            if (f > f2)
                f1 = f2;
            else
                f1 = f;
        return f1;
    }

    private boolean getTargetCheckedState() {
        boolean flag;
        if (mThumbPosition > 0.5F)
            flag = true;
        else
            flag = false;
        return flag;
    }

    private int getThumbOffset() {
        float f;
        if (ViewUtils.isLayoutRtl(this))
            f = 1.0F - mThumbPosition;
        else
            f = mThumbPosition;
        return (int)(f * (float)getThumbScrollRange() + 0.5F);
    }

    private int getThumbScrollRange() {
        int i;
        if (mTrackDrawable != null) {
            Rect rect1 = mTempRect;
            mTrackDrawable.getPadding(rect1);
            Rect rect;
            if (mThumbDrawable != null)
                rect = DrawableUtils.getOpticalBounds(mThumbDrawable);
            else
                rect = DrawableUtils.INSETS_NONE;
            i = mSwitchWidth - mThumbWidth - rect1.left - rect1.right - rect.left - rect.right;
        } else {
            i = 0;
        }
        return i;
    }

    private boolean hitThumb(float f, float f1) {
        boolean flag1 = false;
        if (mThumbDrawable != null) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        int k = getThumbOffset();
        mThumbDrawable.getPadding(mTempRect);
        int j = mSwitchTop;
        int i = mTouchSlop;
        int i2 = (k + mSwitchLeft) - mTouchSlop;
        int k1 = mThumbWidth;
        int i1 = mTempRect.left;
        int l = mTempRect.right;
        int l1 = mTouchSlop;
        int j1 = mSwitchBottom;
        k = mTouchSlop;
        flag = flag1;
        if (f > (float)i2) {
            flag = flag1;
            if (f < (float)(k1 + i2 + i1 + l + l1)) {
                flag = flag1;
                if (f1 > (float)(j - i)) {
                    flag = flag1;
                    if (f1 < (float)(j1 + k))
                        flag = true;
                }
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    private Layout makeLayout(CharSequence charsequence) {
        if (mSwitchTransformationMethod != null)
            charsequence = mSwitchTransformationMethod.getTransformation(charsequence, this);
        TextPaint textpaint = mTextPaint;
        int i;
        if (charsequence != null)
            i = (int)Math.ceil(Layout.getDesiredWidth(charsequence, mTextPaint));
        else
            i = 0;
        return new StaticLayout(charsequence, textpaint, i, android.text.Layout.Alignment.ALIGN_NORMAL, 1.0F, 0.0F, true);
    }

    private void setSwitchTypefaceByIndex(int i, int j) {
        Typeface typeface = null;
        i;
        JVM INSTR tableswitch 1 3: default 28
    //                   1 35
    //                   2 42
    //                   3 49;
           goto _L1 _L2 _L3 _L4
_L1:
        setSwitchTypeface(typeface, j);
        return;
_L2:
        typeface = Typeface.SANS_SERIF;
        continue; /* Loop/switch isn't completed */
_L3:
        typeface = Typeface.SERIF;
        continue; /* Loop/switch isn't completed */
_L4:
        typeface = Typeface.MONOSPACE;
        if (true) goto _L1; else goto _L5
_L5:
    }

    private void stopDrag(MotionEvent motionevent) {
        float f;
        boolean flag1;
        boolean flag2;
        flag1 = true;
        mTouchMode = 0;
        boolean flag;
        if (motionevent.getAction() == 1 && isEnabled())
            flag = true;
        else
            flag = false;
        flag2 = isChecked();
        if (!flag) goto _L2; else goto _L1
_L1:
        mVelocityTracker.computeCurrentVelocity(1000);
        f = mVelocityTracker.getXVelocity();
        if (Math.abs(f) <= (float)mMinFlingVelocity) goto _L4; else goto _L3
_L3:
        if (!ViewUtils.isLayoutRtl(this)) goto _L6; else goto _L5
_L5:
        if (f >= 0.0F)
            flag1 = false;
_L8:
        if (flag1 != flag2)
            playSoundEffect(0);
        setChecked(flag1);
        cancelSuperTouch(motionevent);
        return;
_L6:
        if (f <= 0.0F)
            flag1 = false;
        continue; /* Loop/switch isn't completed */
_L4:
        flag1 = getTargetCheckedState();
        continue; /* Loop/switch isn't completed */
_L2:
        flag1 = flag2;
        if (true) goto _L8; else goto _L7
_L7:
    }

    public void draw(Canvas canvas) {
        Rect rect = mTempRect;
        int k = mSwitchLeft;
        int j1 = mSwitchTop;
        int k1 = mSwitchRight;
        int i1 = mSwitchBottom;
        int l1 = k + getThumbOffset();
        int i;
        Object obj;
        if (mThumbDrawable != null)
            obj = DrawableUtils.getOpticalBounds(mThumbDrawable);
        else
            obj = DrawableUtils.INSETS_NONE;
        if (mTrackDrawable != null) {
            mTrackDrawable.getPadding(rect);
            int i2 = rect.left;
            int j;
            int l;
            if (obj != null) {
                i = k;
                if (((Rect) (obj)).left > rect.left)
                    i = k + (((Rect) (obj)).left - rect.left);
                if (((Rect) (obj)).top > rect.top)
                    k = (((Rect) (obj)).top - rect.top) + j1;
                else
                    k = j1;
                l = k1;
                if (((Rect) (obj)).right > rect.right)
                    l = k1 - (((Rect) (obj)).right - rect.right);
                if (((Rect) (obj)).bottom > rect.bottom)
                    j = i1 - (((Rect) (obj)).bottom - rect.bottom);
                else
                    j = i1;
            } else {
                j = i1;
                l = j1;
                i = k;
                k = l;
                l = k1;
            }
            mTrackDrawable.setBounds(i, k, l, j);
            i = i2 + l1;
        } else {
            i = l1;
        }
        if (mThumbDrawable != null) {
            mThumbDrawable.getPadding(rect);
            j = i - rect.left;
            i = i + mThumbWidth + rect.right;
            mThumbDrawable.setBounds(j, j1, i, i1);
            obj = getBackground();
            if (obj != null)
                DrawableCompat.setHotspotBounds(((Drawable) (obj)), j, j1, i, i1);
        }
        super.draw(canvas);
    }

    public void drawableHotspotChanged(float f, float f1) {
        if (android.os.Build.VERSION.SDK_INT >= 21)
            super.drawableHotspotChanged(f, f1);
        if (mThumbDrawable != null)
            DrawableCompat.setHotspot(mThumbDrawable, f, f1);
        if (mTrackDrawable != null)
            DrawableCompat.setHotspot(mTrackDrawable, f, f1);
    }

    protected void drawableStateChanged() {
        super.drawableStateChanged();
        int ai[] = getDrawableState();
        boolean flag1 = false;
        Drawable drawable = mThumbDrawable;
        boolean flag = flag1;
        if (drawable != null) {
            flag = flag1;
            if (drawable.isStateful())
                flag = false | drawable.setState(ai);
        }
        drawable = mTrackDrawable;
        flag1 = flag;
        if (drawable != null) {
            flag1 = flag;
            if (drawable.isStateful())
                flag1 = flag | drawable.setState(ai);
        }
        if (flag1)
            invalidate();
    }

    public int getCompoundPaddingLeft() {
        if (ViewUtils.isLayoutRtl(this)) goto _L2; else goto _L1
_L1:
        int i = super.getCompoundPaddingLeft();
_L4:
        return i;
_L2:
        int j = super.getCompoundPaddingLeft() + mSwitchWidth;
        i = j;
        if (!TextUtils.isEmpty(getText()))
            i = j + mSwitchPadding;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public int getCompoundPaddingRight() {
        if (!ViewUtils.isLayoutRtl(this)) goto _L2; else goto _L1
_L1:
        int i = super.getCompoundPaddingRight();
_L4:
        return i;
_L2:
        int j = super.getCompoundPaddingRight() + mSwitchWidth;
        i = j;
        if (!TextUtils.isEmpty(getText()))
            i = j + mSwitchPadding;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public boolean getShowText() {
        return mShowText;
    }

    public boolean getSplitTrack() {
        return mSplitTrack;
    }

    public int getSwitchMinWidth() {
        return mSwitchMinWidth;
    }

    public int getSwitchPadding() {
        return mSwitchPadding;
    }

    public CharSequence getTextOff() {
        return mTextOff;
    }

    public CharSequence getTextOn() {
        return mTextOn;
    }

    public Drawable getThumbDrawable() {
        return mThumbDrawable;
    }

    public int getThumbTextPadding() {
        return mThumbTextPadding;
    }

    public ColorStateList getThumbTintList() {
        return mThumbTintList;
    }

    public android.graphics.PorterDuff.Mode getThumbTintMode() {
        return mThumbTintMode;
    }

    public Drawable getTrackDrawable() {
        return mTrackDrawable;
    }

    public ColorStateList getTrackTintList() {
        return mTrackTintList;
    }

    public android.graphics.PorterDuff.Mode getTrackTintMode() {
        return mTrackTintMode;
    }

    public void jumpDrawablesToCurrentState() {
        if (android.os.Build.VERSION.SDK_INT >= 11) {
            super.jumpDrawablesToCurrentState();
            if (mThumbDrawable != null)
                mThumbDrawable.jumpToCurrentState();
            if (mTrackDrawable != null)
                mTrackDrawable.jumpToCurrentState();
            cancelPositionAnimator();
            float f;
            if (isChecked())
                f = 1.0F;
            else
                f = 0.0F;
            setThumbPosition(f);
        }
    }

    protected int[] onCreateDrawableState(int i) {
        int ai[] = super.onCreateDrawableState(i + 1);
        if (isChecked())
            mergeDrawableStates(ai, CHECKED_STATE_SET);
        return ai;
    }

    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        Object obj = mTempRect;
        Drawable drawable = mTrackDrawable;
        int k;
        int l;
        int i1;
        int j1;
        int k1;
        Object obj1;
        if (drawable != null)
            drawable.getPadding(((Rect) (obj)));
        else
            ((Rect) (obj)).setEmpty();
        j1 = mSwitchTop;
        i1 = mSwitchBottom;
        k1 = ((Rect) (obj)).top;
        l = ((Rect) (obj)).bottom;
        obj1 = mThumbDrawable;
        if (drawable != null)
            if (mSplitTrack && obj1 != null) {
                Rect rect = DrawableUtils.getOpticalBounds(((Drawable) (obj1)));
                ((Drawable) (obj1)).copyBounds(((Rect) (obj)));
                obj.left = ((Rect) (obj)).left + rect.left;
                obj.right = ((Rect) (obj)).right - rect.right;
                int i = canvas.save();
                canvas.clipRect(((Rect) (obj)), android.graphics.Region.Op.DIFFERENCE);
                drawable.draw(canvas);
                canvas.restoreToCount(i);
            } else {
                drawable.draw(canvas);
            }
        k = canvas.save();
        if (obj1 != null)
            ((Drawable) (obj1)).draw(canvas);
        if (getTargetCheckedState())
            obj = mOnLayout;
        else
            obj = mOffLayout;
        if (obj != null) {
            int ai[] = getDrawableState();
            if (mTextColors != null)
                mTextPaint.setColor(mTextColors.getColorForState(ai, 0));
            mTextPaint.drawableState = ai;
            int j;
            int l1;
            if (obj1 != null) {
                obj1 = ((Drawable) (obj1)).getBounds();
                j = ((Rect) (obj1)).left;
                j = ((Rect) (obj1)).right + j;
            } else {
                j = getWidth();
            }
            j /= 2;
            l1 = ((Layout) (obj)).getWidth() / 2;
            i1 = (j1 + k1 + (i1 - l)) / 2;
            l = ((Layout) (obj)).getHeight() / 2;
            canvas.translate(j - l1, i1 - l);
            ((Layout) (obj)).draw(canvas);
        }
        canvas.restoreToCount(k);
    }

    public void onInitializeAccessibilityEvent(AccessibilityEvent accessibilityevent) {
        super.onInitializeAccessibilityEvent(accessibilityevent);
        accessibilityevent.setClassName("android.widget.Switch");
    }

    public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo accessibilitynodeinfo) {
        if (android.os.Build.VERSION.SDK_INT >= 14) {
            super.onInitializeAccessibilityNodeInfo(accessibilitynodeinfo);
            accessibilitynodeinfo.setClassName("android.widget.Switch");
            CharSequence charsequence;
            if (isChecked())
                charsequence = mTextOn;
            else
                charsequence = mTextOff;
            if (!TextUtils.isEmpty(charsequence)) {
                CharSequence charsequence1 = accessibilitynodeinfo.getText();
                if (TextUtils.isEmpty(charsequence1)) {
                    accessibilitynodeinfo.setText(charsequence);
                } else {
                    StringBuilder stringbuilder = new StringBuilder();
                    stringbuilder.append(charsequence1).append(' ').append(charsequence);
                    accessibilitynodeinfo.setText(stringbuilder);
                }
            }
        }
    }

    protected void onLayout(boolean flag, int i, int j, int k, int l) {
        boolean flag1 = false;
        super.onLayout(flag, i, j, k, l);
        if (mThumbDrawable != null) {
            Rect rect1 = mTempRect;
            Rect rect;
            if (mTrackDrawable != null)
                mTrackDrawable.getPadding(rect1);
            else
                rect1.setEmpty();
            rect = DrawableUtils.getOpticalBounds(mThumbDrawable);
            i = Math.max(0, rect.left - rect1.left);
            j = Math.max(0, rect.right - rect1.right);
        } else {
            i = 0;
            j = ((flag1) ? 1 : 0);
        }
        if (ViewUtils.isLayoutRtl(this)) {
            k = getPaddingLeft() + i;
            l = (mSwitchWidth + k) - i - j;
        } else {
            l = getWidth() - getPaddingRight() - j;
            k = j + (i + (l - mSwitchWidth));
        }
        getGravity() & 0x70;
        JVM INSTR lookupswitch 2: default 148
    //                   16: 220
    //                   80: 254;
           goto _L1 _L2 _L3
_L1:
        j = getPaddingTop();
        i = mSwitchHeight + j;
_L5:
        mSwitchLeft = k;
        mSwitchTop = j;
        mSwitchBottom = i;
        mSwitchRight = l;
        return;
_L2:
        j = ((getPaddingTop() + getHeight()) - getPaddingBottom()) / 2 - mSwitchHeight / 2;
        i = mSwitchHeight + j;
        continue; /* Loop/switch isn't completed */
_L3:
        i = getHeight() - getPaddingBottom();
        j = i - mSwitchHeight;
        if (true) goto _L5; else goto _L4
_L4:
    }

    public void onMeasure(int i, int j) {
        int j1 = 0;
        if (mShowText) {
            if (mOnLayout == null)
                mOnLayout = makeLayout(mTextOn);
            if (mOffLayout == null)
                mOffLayout = makeLayout(mTextOff);
        }
        Rect rect = mTempRect;
        int k;
        int l;
        int i1;
        int k1;
        int l1;
        if (mThumbDrawable != null) {
            mThumbDrawable.getPadding(rect);
            l = mThumbDrawable.getIntrinsicWidth() - rect.left - rect.right;
            k = mThumbDrawable.getIntrinsicHeight();
        } else {
            k = 0;
            l = 0;
        }
        if (mShowText)
            i1 = Math.max(mOnLayout.getWidth(), mOffLayout.getWidth()) + mThumbTextPadding * 2;
        else
            i1 = 0;
        mThumbWidth = Math.max(i1, l);
        if (mTrackDrawable != null) {
            mTrackDrawable.getPadding(rect);
            l = mTrackDrawable.getIntrinsicHeight();
        } else {
            rect.setEmpty();
            l = j1;
        }
        l1 = rect.left;
        k1 = rect.right;
        j1 = k1;
        i1 = l1;
        if (mThumbDrawable != null) {
            rect = DrawableUtils.getOpticalBounds(mThumbDrawable);
            i1 = Math.max(l1, rect.left);
            j1 = Math.max(k1, rect.right);
        }
        i1 = Math.max(mSwitchMinWidth, j1 + (i1 + mThumbWidth * 2));
        k = Math.max(l, k);
        mSwitchWidth = i1;
        mSwitchHeight = k;
        super.onMeasure(i, j);
        if (getMeasuredHeight() < k)
            setMeasuredDimension(ViewCompat.getMeasuredWidthAndState(this), k);
    }

    public void onPopulateAccessibilityEvent(AccessibilityEvent accessibilityevent) {
        super.onPopulateAccessibilityEvent(accessibilityevent);
        CharSequence charsequence;
        if (isChecked())
            charsequence = mTextOn;
        else
            charsequence = mTextOff;
        if (charsequence != null)
            accessibilityevent.getText().add(charsequence);
    }

    public boolean onTouchEvent(MotionEvent motionevent) {
        mVelocityTracker.addMovement(motionevent);
        MotionEventCompat.getActionMasked(motionevent);
        JVM INSTR tableswitch 0 3: default 44
    //                   0 54
    //                   1 307
    //                   2 98
    //                   3 307;
           goto _L1 _L2 _L3 _L4 _L3
_L1:
        boolean flag = super.onTouchEvent(motionevent);
_L6:
        return flag;
_L2:
        float f = motionevent.getX();
        float f3 = motionevent.getY();
        if (isEnabled() && hitThumb(f, f3)) {
            mTouchMode = 1;
            mTouchX = f;
            mTouchY = f3;
        }
        continue; /* Loop/switch isn't completed */
_L4:
        switch (mTouchMode) {
        case 0: // '\0'
        default:
            continue; /* Loop/switch isn't completed */

        case 1: // '\001'
            float f1 = motionevent.getX();
            float f4 = motionevent.getY();
            if (Math.abs(f1 - mTouchX) <= (float)mTouchSlop && Math.abs(f4 - mTouchY) <= (float)mTouchSlop)
                continue; /* Loop/switch isn't completed */
            mTouchMode = 2;
            getParent().requestDisallowInterceptTouchEvent(true);
            mTouchX = f1;
            mTouchY = f4;
            flag = true;
            break;

        case 2: // '\002'
            float f6 = motionevent.getX();
            int i = getThumbScrollRange();
            float f2 = f6 - mTouchX;
            float f5;
            if (i != 0)
                f2 /= i;
            else
            if (f2 > 0.0F)
                f2 = 1.0F;
            else
                f2 = -1F;
            f5 = f2;
            if (ViewUtils.isLayoutRtl(this))
                f5 = -f2;
            f2 = constrain(f5 + mThumbPosition, 0.0F, 1.0F);
            if (f2 != mThumbPosition) {
                mTouchX = f6;
                setThumbPosition(f2);
            }
            flag = true;
            break;
        }
        if (false)
            ;
        continue; /* Loop/switch isn't completed */
_L3:
        if (mTouchMode != 2)
            break; /* Loop/switch isn't completed */
        stopDrag(motionevent);
        super.onTouchEvent(motionevent);
        flag = true;
        if (true) goto _L6; else goto _L5
_L5:
        mTouchMode = 0;
        mVelocityTracker.clear();
        if (true) goto _L1; else goto _L7
_L7:
    }

    public void setChecked(boolean flag) {
        super.setChecked(flag);
        flag = isChecked();
        if (getWindowToken() != null && ViewCompat.isLaidOut(this) && isShown()) {
            animateThumbToCheckedState(flag);
        } else {
            cancelPositionAnimator();
            float f;
            if (flag)
                f = 1.0F;
            else
                f = 0.0F;
            setThumbPosition(f);
        }
    }

    public void setShowText(boolean flag) {
        if (mShowText != flag) {
            mShowText = flag;
            requestLayout();
        }
    }

    public void setSplitTrack(boolean flag) {
        mSplitTrack = flag;
        invalidate();
    }

    public void setSwitchMinWidth(int i) {
        mSwitchMinWidth = i;
        requestLayout();
    }

    public void setSwitchPadding(int i) {
        mSwitchPadding = i;
        requestLayout();
    }

    public void setSwitchTextAppearance(Context context, int i) {
        TypedArray typedarray = context.obtainStyledAttributes(i, android.support.v7.appcompat.R.styleable.TextAppearance);
        context = typedarray.getColorStateList(android.support.v7.appcompat.R.styleable.TextAppearance_android_textColor);
        if (context != null)
            mTextColors = context;
        else
            mTextColors = getTextColors();
        i = typedarray.getDimensionPixelSize(android.support.v7.appcompat.R.styleable.TextAppearance_android_textSize, 0);
        if (i != 0 && (float)i != mTextPaint.getTextSize()) {
            mTextPaint.setTextSize(i);
            requestLayout();
        }
        setSwitchTypefaceByIndex(typedarray.getInt(android.support.v7.appcompat.R.styleable.TextAppearance_android_typeface, -1), typedarray.getInt(android.support.v7.appcompat.R.styleable.TextAppearance_android_textStyle, -1));
        if (typedarray.getBoolean(android.support.v7.appcompat.R.styleable.TextAppearance_textAllCaps, false))
            mSwitchTransformationMethod = new AllCapsTransformationMethod(getContext());
        else
            mSwitchTransformationMethod = null;
        typedarray.recycle();
    }

    public void setSwitchTypeface(Typeface typeface) {
        if (mTextPaint.getTypeface() != typeface) {
            mTextPaint.setTypeface(typeface);
            requestLayout();
            invalidate();
        }
    }

    public void setSwitchTypeface(Typeface typeface, int i) {
        boolean flag = false;
        if (i > 0) {
            float f;
            int j;
            if (typeface == null)
                typeface = Typeface.defaultFromStyle(i);
            else
                typeface = Typeface.create(typeface, i);
            setSwitchTypeface(typeface);
            if (typeface != null)
                j = typeface.getStyle();
            else
                j = 0;
            i = ~j & i;
            typeface = mTextPaint;
            if ((i & 1) != 0)
                flag = true;
            typeface.setFakeBoldText(flag);
            typeface = mTextPaint;
            if ((i & 2) != 0)
                f = -0.25F;
            else
                f = 0.0F;
            typeface.setTextSkewX(f);
        } else {
            mTextPaint.setFakeBoldText(false);
            mTextPaint.setTextSkewX(0.0F);
            setSwitchTypeface(typeface);
        }
    }

    public void setTextOff(CharSequence charsequence) {
        mTextOff = charsequence;
        requestLayout();
    }

    public void setTextOn(CharSequence charsequence) {
        mTextOn = charsequence;
        requestLayout();
    }

    public void setThumbDrawable(Drawable drawable) {
        if (mThumbDrawable != null)
            mThumbDrawable.setCallback(null);
        mThumbDrawable = drawable;
        if (drawable != null)
            drawable.setCallback(this);
        requestLayout();
    }

    void setThumbPosition(float f) {
        mThumbPosition = f;
        invalidate();
    }

    public void setThumbResource(int i) {
        setThumbDrawable(AppCompatResources.getDrawable(getContext(), i));
    }

    public void setThumbTextPadding(int i) {
        mThumbTextPadding = i;
        requestLayout();
    }

    public void setThumbTintList(ColorStateList colorstatelist) {
        mThumbTintList = colorstatelist;
        mHasThumbTint = true;
        applyThumbTint();
    }

    public void setThumbTintMode(android.graphics.PorterDuff.Mode mode) {
        mThumbTintMode = mode;
        mHasThumbTintMode = true;
        applyThumbTint();
    }

    public void setTrackDrawable(Drawable drawable) {
        if (mTrackDrawable != null)
            mTrackDrawable.setCallback(null);
        mTrackDrawable = drawable;
        if (drawable != null)
            drawable.setCallback(this);
        requestLayout();
    }

    public void setTrackResource(int i) {
        setTrackDrawable(AppCompatResources.getDrawable(getContext(), i));
    }

    public void setTrackTintList(ColorStateList colorstatelist) {
        mTrackTintList = colorstatelist;
        mHasTrackTint = true;
        applyTrackTint();
    }

    public void setTrackTintMode(android.graphics.PorterDuff.Mode mode) {
        mTrackTintMode = mode;
        mHasTrackTintMode = true;
        applyTrackTint();
    }

    public void toggle() {
        boolean flag;
        if (!isChecked())
            flag = true;
        else
            flag = false;
        setChecked(flag);
    }

    protected boolean verifyDrawable(Drawable drawable) {
        boolean flag;
        if (super.verifyDrawable(drawable) || drawable == mThumbDrawable || drawable == mTrackDrawable)
            flag = true;
        else
            flag = false;
        return flag;
    }

}
