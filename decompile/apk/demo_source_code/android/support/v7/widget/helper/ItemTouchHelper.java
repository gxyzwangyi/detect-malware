// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v7.widget.helper;

import android.content.res.Resources;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.support.v4.animation.*;
import android.support.v4.view.*;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.*;
import android.view.animation.Interpolator;
import java.util.ArrayList;
import java.util.List;

// Referenced classes of package android.support.v7.widget.helper:
//            ItemTouchUIUtil

public class ItemTouchHelper extends android.support.v7.widget.RecyclerView.ItemDecoration
    implements android.support.v7.widget.RecyclerView.OnChildAttachStateChangeListener {
    public static abstract class Callback {

        private static final int ABS_HORIZONTAL_DIR_FLAGS = 0xc0c0c;
        public static final int DEFAULT_DRAG_ANIMATION_DURATION = 200;
        public static final int DEFAULT_SWIPE_ANIMATION_DURATION = 250;
        private static final long DRAG_SCROLL_ACCELERATION_LIMIT_TIME_MS = 2000L;
        static final int RELATIVE_DIR_FLAGS = 0x303030;
        private static final Interpolator sDragScrollInterpolator = new Interpolator() {

            public float getInterpolation(float f) {
                return f * f * f * f * f;
            }

        }
;
        private static final Interpolator sDragViewScrollCapInterpolator = new Interpolator() {

            public float getInterpolation(float f) {
                f--;
                return f * (f * f * f * f) + 1.0F;
            }

        }
;
        private static final ItemTouchUIUtil sUICallback;
        private int mCachedMaxScrollSpeed;

        public static int convertToRelativeDirection(int i, int j) {
            int k = i & 0xc0c0c;
            if (k != 0) {
                i = ~k & i;
                if (j == 0)
                    i |= k << 2;
                else
                    i = i | k << 1 & 0xfff3f3f3 | (k << 1 & 0xc0c0c) << 2;
            }
            return i;
        }

        public static ItemTouchUIUtil getDefaultUIUtil() {
            return sUICallback;
        }

        private int getMaxDragScroll(RecyclerView recyclerview) {
            if (mCachedMaxScrollSpeed == -1)
                mCachedMaxScrollSpeed = recyclerview.getResources().getDimensionPixelSize(android.support.v7.recyclerview.R.dimen.item_touch_helper_max_drag_scroll_per_frame);
            return mCachedMaxScrollSpeed;
        }

        public static int makeFlag(int i, int j) {
            return j << i * 8;
        }

        public static int makeMovementFlags(int i, int j) {
            return makeFlag(0, j | i) | makeFlag(1, j) | makeFlag(2, i);
        }

        public boolean canDropOver(RecyclerView recyclerview, android.support.v7.widget.RecyclerView.ViewHolder viewholder, android.support.v7.widget.RecyclerView.ViewHolder viewholder1) {
            return true;
        }

        public android.support.v7.widget.RecyclerView.ViewHolder chooseDropTarget(android.support.v7.widget.RecyclerView.ViewHolder viewholder, List list, int i, int j) {
            int k;
            int l;
            int i2;
            int j2;
            int k2;
            int l2;
            int i3;
            android.support.v7.widget.RecyclerView.ViewHolder viewholder2;
            i2 = viewholder.itemView.getWidth();
            i3 = viewholder.itemView.getHeight();
            viewholder2 = null;
            k = -1;
            l2 = i - viewholder.itemView.getLeft();
            k2 = j - viewholder.itemView.getTop();
            j2 = list.size();
            l = 0;
_L2:
            android.support.v7.widget.RecyclerView.ViewHolder viewholder1;
            if (l >= j2)
                break; /* Loop/switch isn't completed */
            viewholder1 = (android.support.v7.widget.RecyclerView.ViewHolder)list.get(l);
            if (l2 > 0) {
                int i1 = viewholder1.itemView.getRight() - (i + i2);
                if (i1 < 0 && viewholder1.itemView.getRight() > viewholder.itemView.getRight()) {
                    i1 = Math.abs(i1);
                    if (i1 > k) {
                        k = i1;
                        viewholder2 = viewholder1;
                    }
                }
            }
            if (l2 < 0) {
                int j1 = viewholder1.itemView.getLeft() - i;
                if (j1 > 0 && viewholder1.itemView.getLeft() < viewholder.itemView.getLeft()) {
                    j1 = Math.abs(j1);
                    if (j1 > k) {
                        viewholder2 = viewholder1;
                        k = j1;
                    }
                }
            }
            if (k2 < 0) {
                int k1 = viewholder1.itemView.getTop() - j;
                if (k1 > 0 && viewholder1.itemView.getTop() < viewholder.itemView.getTop()) {
                    k1 = Math.abs(k1);
                    if (k1 > k) {
                        viewholder2 = viewholder1;
                        k = k1;
                    }
                }
            }
            if (k2 <= 0)
                break MISSING_BLOCK_LABEL_346;
            int l1 = viewholder1.itemView.getBottom() - (j + i3);
            if (l1 >= 0 || viewholder1.itemView.getBottom() <= viewholder.itemView.getBottom())
                break MISSING_BLOCK_LABEL_346;
            l1 = Math.abs(l1);
            if (l1 <= k)
                break MISSING_BLOCK_LABEL_346;
            k = l1;
_L3:
            l++;
            viewholder2 = viewholder1;
            if (true) goto _L2; else goto _L1
_L1:
            return viewholder2;
            viewholder1 = viewholder2;
              goto _L3
        }

        public void clearView(RecyclerView recyclerview, android.support.v7.widget.RecyclerView.ViewHolder viewholder) {
            sUICallback.clearView(viewholder.itemView);
        }

        public int convertToAbsoluteDirection(int i, int j) {
            int k = i & 0x303030;
            if (k != 0) {
                i = ~k & i;
                if (j == 0)
                    i |= k >> 2;
                else
                    i = i | k >> 1 & 0xffcfcfcf | (k >> 1 & 0x303030) >> 2;
            }
            return i;
        }

        final int getAbsoluteMovementFlags(RecyclerView recyclerview, android.support.v7.widget.RecyclerView.ViewHolder viewholder) {
            return convertToAbsoluteDirection(getMovementFlags(recyclerview, viewholder), ViewCompat.getLayoutDirection(recyclerview));
        }

        public long getAnimationDuration(RecyclerView recyclerview, int i, float f, float f1) {
            recyclerview = recyclerview.getItemAnimator();
            long l;
            if (recyclerview == null) {
                if (i == 8)
                    l = 200L;
                else
                    l = 250L;
            } else
            if (i == 8)
                l = recyclerview.getMoveDuration();
            else
                l = recyclerview.getRemoveDuration();
            return l;
        }

        public int getBoundingBoxMargin() {
            return 0;
        }

        public float getMoveThreshold(android.support.v7.widget.RecyclerView.ViewHolder viewholder) {
            return 0.5F;
        }

        public abstract int getMovementFlags(RecyclerView recyclerview, android.support.v7.widget.RecyclerView.ViewHolder viewholder);

        public float getSwipeEscapeVelocity(float f) {
            return f;
        }

        public float getSwipeThreshold(android.support.v7.widget.RecyclerView.ViewHolder viewholder) {
            return 0.5F;
        }

        public float getSwipeVelocityThreshold(float f) {
            return f;
        }

        boolean hasDragFlag(RecyclerView recyclerview, android.support.v7.widget.RecyclerView.ViewHolder viewholder) {
            boolean flag;
            if ((getAbsoluteMovementFlags(recyclerview, viewholder) & 0xff0000) != 0)
                flag = true;
            else
                flag = false;
            return flag;
        }

        boolean hasSwipeFlag(RecyclerView recyclerview, android.support.v7.widget.RecyclerView.ViewHolder viewholder) {
            boolean flag;
            if ((getAbsoluteMovementFlags(recyclerview, viewholder) & 0xff00) != 0)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public int interpolateOutOfBoundsScroll(RecyclerView recyclerview, int i, int j, int k, long l) {
            float f = 1.0F;
            k = getMaxDragScroll(recyclerview);
            int j1 = Math.abs(j);
            int i1 = (int)Math.signum(j);
            float f1 = Math.min(1.0F, ((float)j1 * 1.0F) / (float)i);
            i = (int)((float)(k * i1) * sDragViewScrollCapInterpolator.getInterpolation(f1));
            if (l <= 2000L)
                f = (float)l / 2000F;
            f1 = i;
            k = (int)(sDragScrollInterpolator.getInterpolation(f) * f1);
            i = k;
            if (k == 0)
                if (j > 0)
                    i = 1;
                else
                    i = -1;
            return i;
        }

        public boolean isItemViewSwipeEnabled() {
            return true;
        }

        public boolean isLongPressDragEnabled() {
            return true;
        }

        public void onChildDraw(Canvas canvas, RecyclerView recyclerview, android.support.v7.widget.RecyclerView.ViewHolder viewholder, float f, float f1, int i, boolean flag) {
            sUICallback.onDraw(canvas, recyclerview, viewholder.itemView, f, f1, i, flag);
        }

        public void onChildDrawOver(Canvas canvas, RecyclerView recyclerview, android.support.v7.widget.RecyclerView.ViewHolder viewholder, float f, float f1, int i, boolean flag) {
            sUICallback.onDrawOver(canvas, recyclerview, viewholder.itemView, f, f1, i, flag);
        }

        void onDraw(Canvas canvas, RecyclerView recyclerview, android.support.v7.widget.RecyclerView.ViewHolder viewholder, List list, int i, float f, float f1) {
            int l = list.size();
            for (int j = 0; j < l; j++) {
                RecoverAnimation recoveranimation = (RecoverAnimation)list.get(j);
                recoveranimation.update();
                int i1 = canvas.save();
                onChildDraw(canvas, recyclerview, recoveranimation.mViewHolder, recoveranimation.mX, recoveranimation.mY, recoveranimation.mActionState, false);
                canvas.restoreToCount(i1);
            }

            if (viewholder != null) {
                int k = canvas.save();
                onChildDraw(canvas, recyclerview, viewholder, f, f1, i, true);
                canvas.restoreToCount(k);
            }
        }

        void onDrawOver(Canvas canvas, RecyclerView recyclerview, android.support.v7.widget.RecyclerView.ViewHolder viewholder, List list, int i, float f, float f1) {
            int i1 = list.size();
            for (int j = 0; j < i1; j++) {
                RecoverAnimation recoveranimation = (RecoverAnimation)list.get(j);
                int j1 = canvas.save();
                onChildDrawOver(canvas, recyclerview, recoveranimation.mViewHolder, recoveranimation.mX, recoveranimation.mY, recoveranimation.mActionState, false);
                canvas.restoreToCount(j1);
            }

            if (viewholder != null) {
                int k = canvas.save();
                onChildDrawOver(canvas, recyclerview, viewholder, f, f1, i, true);
                canvas.restoreToCount(k);
            }
            i = 0;
            int l = i1 - 1;
            while (l >= 0)  {
                canvas = (RecoverAnimation)list.get(l);
                if (((RecoverAnimation) (canvas)).mEnded && !((RecoverAnimation) (canvas)).mIsPendingCleanup)
                    list.remove(l);
                else
                if (!((RecoverAnimation) (canvas)).mEnded)
                    i = 1;
                l--;
            }
            if (i != 0)
                recyclerview.invalidate();
        }

        public abstract boolean onMove(RecyclerView recyclerview, android.support.v7.widget.RecyclerView.ViewHolder viewholder, android.support.v7.widget.RecyclerView.ViewHolder viewholder1);

        public void onMoved(RecyclerView recyclerview, android.support.v7.widget.RecyclerView.ViewHolder viewholder, int i, android.support.v7.widget.RecyclerView.ViewHolder viewholder1, int j, int k, int l) {
            android.support.v7.widget.RecyclerView.LayoutManager layoutmanager = recyclerview.getLayoutManager();
            if (!(layoutmanager instanceof ViewDropHandler)) goto _L2; else goto _L1
_L1:
            ((ViewDropHandler)layoutmanager).prepareForDrop(viewholder.itemView, viewholder1.itemView, k, l);
_L4:
            return;
_L2:
            if (layoutmanager.canScrollHorizontally()) {
                if (layoutmanager.getDecoratedLeft(viewholder1.itemView) <= recyclerview.getPaddingLeft())
                    recyclerview.scrollToPosition(j);
                if (layoutmanager.getDecoratedRight(viewholder1.itemView) >= recyclerview.getWidth() - recyclerview.getPaddingRight())
                    recyclerview.scrollToPosition(j);
            }
            if (layoutmanager.canScrollVertically()) {
                if (layoutmanager.getDecoratedTop(viewholder1.itemView) <= recyclerview.getPaddingTop())
                    recyclerview.scrollToPosition(j);
                if (layoutmanager.getDecoratedBottom(viewholder1.itemView) >= recyclerview.getHeight() - recyclerview.getPaddingBottom())
                    recyclerview.scrollToPosition(j);
            }
            if (true) goto _L4; else goto _L3
_L3:
        }

        public void onSelectedChanged(android.support.v7.widget.RecyclerView.ViewHolder viewholder, int i) {
            if (viewholder != null)
                sUICallback.onSelected(viewholder.itemView);
        }

        public abstract void onSwiped(android.support.v7.widget.RecyclerView.ViewHolder viewholder, int i);

        static  {
            if (android.os.Build.VERSION.SDK_INT >= 21)
                sUICallback = new ItemTouchUIUtilImpl.Lollipop();
            else
            if (android.os.Build.VERSION.SDK_INT >= 11)
                sUICallback = new ItemTouchUIUtilImpl.Honeycomb();
            else
                sUICallback = new ItemTouchUIUtilImpl.Gingerbread();
        }

        public Callback() {
            mCachedMaxScrollSpeed = -1;
        }
    }

    private class ItemTouchHelperGestureListener extends android.view.GestureDetector.SimpleOnGestureListener {

        final ItemTouchHelper this$0;

        public boolean onDown(MotionEvent motionevent) {
            return true;
        }

        public void onLongPress(MotionEvent motionevent) {
            Object obj = findChildView(motionevent);
            if (obj != null) {
                obj = mRecyclerView.getChildViewHolder(((View) (obj)));
                break MISSING_BLOCK_LABEL_29;
            }
            do {
                do
                    return;
                while (obj == null || !mCallback.hasDragFlag(mRecyclerView, ((android.support.v7.widget.RecyclerView.ViewHolder) (obj))) || motionevent.getPointerId(0) != mActivePointerId);
                int i = motionevent.findPointerIndex(mActivePointerId);
                float f1 = motionevent.getX(i);
                float f = motionevent.getY(i);
                mInitialTouchX = f1;
                mInitialTouchY = f;
                motionevent = ItemTouchHelper.this;
                mDy = 0.0F;
                motionevent.mDx = 0.0F;
                if (mCallback.isLongPressDragEnabled())
                    select(((android.support.v7.widget.RecyclerView.ViewHolder) (obj)), 2);
            } while (true);
        }

        ItemTouchHelperGestureListener() {
            this$0 = ItemTouchHelper.this;
            super();
        }
    }

    private class RecoverAnimation
        implements AnimatorListenerCompat {

        final int mActionState;
        final int mAnimationType;
        boolean mEnded;
        private float mFraction;
        public boolean mIsPendingCleanup;
        boolean mOverridden;
        final float mStartDx;
        final float mStartDy;
        final float mTargetX;
        final float mTargetY;
        private final ValueAnimatorCompat mValueAnimator = AnimatorCompatHelper.emptyValueAnimator();
        final android.support.v7.widget.RecyclerView.ViewHolder mViewHolder;
        float mX;
        float mY;
        final ItemTouchHelper this$0;

        public void cancel() {
            mValueAnimator.cancel();
        }

        public void onAnimationCancel(ValueAnimatorCompat valueanimatorcompat) {
            setFraction(1.0F);
        }

        public void onAnimationEnd(ValueAnimatorCompat valueanimatorcompat) {
            if (!mEnded)
                mViewHolder.setIsRecyclable(true);
            mEnded = true;
        }

        public void onAnimationRepeat(ValueAnimatorCompat valueanimatorcompat) {
        }

        public void onAnimationStart(ValueAnimatorCompat valueanimatorcompat) {
        }

        public void setDuration(long l) {
            mValueAnimator.setDuration(l);
        }

        public void setFraction(float f) {
            mFraction = f;
        }

        public void start() {
            mViewHolder.setIsRecyclable(false);
            mValueAnimator.start();
        }

        public void update() {
            if (mStartDx == mTargetX)
                mX = ViewCompat.getTranslationX(mViewHolder.itemView);
            else
                mX = mStartDx + mFraction * (mTargetX - mStartDx);
            if (mStartDy == mTargetY)
                mY = ViewCompat.getTranslationY(mViewHolder.itemView);
            else
                mY = mStartDy + mFraction * (mTargetY - mStartDy);
        }

        public RecoverAnimation(android.support.v7.widget.RecyclerView.ViewHolder viewholder, int i, int j, float f, float f1, float f2, 
                float f3) {
            this$0 = ItemTouchHelper.this;
            super();
            mOverridden = false;
            mEnded = false;
            mActionState = j;
            mAnimationType = i;
            mViewHolder = viewholder;
            mStartDx = f;
            mStartDy = f1;
            mTargetX = f2;
            mTargetY = f3;
            mValueAnimator.addUpdateListener(new _cls1());
            mValueAnimator.setTarget(viewholder.itemView);
            mValueAnimator.addListener(this);
            setFraction(0.0F);
        }
    }

    public static abstract class SimpleCallback extends Callback {

        private int mDefaultDragDirs;
        private int mDefaultSwipeDirs;

        public int getDragDirs(RecyclerView recyclerview, android.support.v7.widget.RecyclerView.ViewHolder viewholder) {
            return mDefaultDragDirs;
        }

        public int getMovementFlags(RecyclerView recyclerview, android.support.v7.widget.RecyclerView.ViewHolder viewholder) {
            return makeMovementFlags(getDragDirs(recyclerview, viewholder), getSwipeDirs(recyclerview, viewholder));
        }

        public int getSwipeDirs(RecyclerView recyclerview, android.support.v7.widget.RecyclerView.ViewHolder viewholder) {
            return mDefaultSwipeDirs;
        }

        public void setDefaultDragDirs(int i) {
            mDefaultDragDirs = i;
        }

        public void setDefaultSwipeDirs(int i) {
            mDefaultSwipeDirs = i;
        }

        public SimpleCallback(int i, int j) {
            mDefaultSwipeDirs = j;
            mDefaultDragDirs = i;
        }
    }

    public static interface ViewDropHandler {

        public abstract void prepareForDrop(View view, View view1, int i, int j);
    }


    static final int ACTION_MODE_DRAG_MASK = 0xff0000;
    private static final int ACTION_MODE_IDLE_MASK = 255;
    static final int ACTION_MODE_SWIPE_MASK = 65280;
    public static final int ACTION_STATE_DRAG = 2;
    public static final int ACTION_STATE_IDLE = 0;
    public static final int ACTION_STATE_SWIPE = 1;
    static final int ACTIVE_POINTER_ID_NONE = -1;
    public static final int ANIMATION_TYPE_DRAG = 8;
    public static final int ANIMATION_TYPE_SWIPE_CANCEL = 4;
    public static final int ANIMATION_TYPE_SWIPE_SUCCESS = 2;
    static final boolean DEBUG = false;
    static final int DIRECTION_FLAG_COUNT = 8;
    public static final int DOWN = 2;
    public static final int END = 32;
    public static final int LEFT = 4;
    private static final int PIXELS_PER_SECOND = 1000;
    public static final int RIGHT = 8;
    public static final int START = 16;
    static final String TAG = "ItemTouchHelper";
    public static final int UP = 1;
    int mActionState;
    int mActivePointerId;
    Callback mCallback;
    private android.support.v7.widget.RecyclerView.ChildDrawingOrderCallback mChildDrawingOrderCallback;
    private List mDistances;
    private long mDragScrollStartTimeInMs;
    float mDx;
    float mDy;
    GestureDetectorCompat mGestureDetector;
    float mInitialTouchX;
    float mInitialTouchY;
    float mMaxSwipeVelocity;
    private final android.support.v7.widget.RecyclerView.OnItemTouchListener mOnItemTouchListener = new android.support.v7.widget.RecyclerView.OnItemTouchListener() {

        final ItemTouchHelper this$0;

        public boolean onInterceptTouchEvent(RecyclerView recyclerview, MotionEvent motionevent) {
            boolean flag = true;
            mGestureDetector.onTouchEvent(motionevent);
            int j = MotionEventCompat.getActionMasked(motionevent);
            if (j == 0) {
                mActivePointerId = motionevent.getPointerId(0);
                mInitialTouchX = motionevent.getX();
                mInitialTouchY = motionevent.getY();
                obtainVelocityTracker();
                if (mSelected == null) {
                    recyclerview = findAnimation(motionevent);
                    if (recyclerview != null) {
                        ItemTouchHelper itemtouchhelper = ItemTouchHelper.this;
                        itemtouchhelper.mInitialTouchX = itemtouchhelper.mInitialTouchX - ((RecoverAnimation) (recyclerview)).mX;
                        itemtouchhelper = ItemTouchHelper.this;
                        itemtouchhelper.mInitialTouchY = itemtouchhelper.mInitialTouchY - ((RecoverAnimation) (recyclerview)).mY;
                        endRecoverAnimation(((RecoverAnimation) (recyclerview)).mViewHolder, true);
                        if (mPendingCleanup.remove(((RecoverAnimation) (recyclerview)).mViewHolder.itemView))
                            mCallback.clearView(mRecyclerView, ((RecoverAnimation) (recyclerview)).mViewHolder);
                        select(((RecoverAnimation) (recyclerview)).mViewHolder, ((RecoverAnimation) (recyclerview)).mActionState);
                        updateDxDy(motionevent, mSelectedFlags, 0);
                    }
                }
            } else
            if (j == 3 || j == 1) {
                mActivePointerId = -1;
                select(null, 0);
            } else
            if (mActivePointerId != -1) {
                int i = motionevent.findPointerIndex(mActivePointerId);
                if (i >= 0)
                    checkSelectForSwipe(j, motionevent, i);
            }
            if (mVelocityTracker != null)
                mVelocityTracker.addMovement(motionevent);
            if (mSelected == null)
                flag = false;
            return flag;
        }

        public void onRequestDisallowInterceptTouchEvent(boolean flag) {
            if (flag)
                select(null, 0);
        }

        public void onTouchEvent(RecyclerView recyclerview, MotionEvent motionevent) {
            int i;
            i = 0;
            mGestureDetector.onTouchEvent(motionevent);
            if (mVelocityTracker != null)
                mVelocityTracker.addMovement(motionevent);
            if (mActivePointerId != -1) goto _L2; else goto _L1
_L1:
            return;
_L2:
            int j;
            int l;
            j = MotionEventCompat.getActionMasked(motionevent);
            l = motionevent.findPointerIndex(mActivePointerId);
            if (l >= 0)
                checkSelectForSwipe(j, motionevent, l);
            recyclerview = mSelected;
            if (recyclerview == null)
                continue; /* Loop/switch isn't completed */
            j;
            JVM INSTR tableswitch 1 6: default 136
        //                       1 139
        //                       2 159
        //                       3 232
        //                       4 136
        //                       5 136
        //                       6 255;
               goto _L3 _L4 _L5 _L6 _L3 _L3 _L7
_L3:
            break; /* Loop/switch isn't completed */
_L4:
            select(null, 0);
            mActivePointerId = -1;
            break; /* Loop/switch isn't completed */
_L5:
            if (l >= 0) {
                updateDxDy(motionevent, mSelectedFlags, l);
                moveIfNecessary(recyclerview);
                mRecyclerView.removeCallbacks(mScrollRunnable);
                mScrollRunnable.run();
                mRecyclerView.invalidate();
            }
            break; /* Loop/switch isn't completed */
_L6:
            if (mVelocityTracker != null)
                mVelocityTracker.clear();
            if (true) goto _L4; else goto _L8
_L8:
            break; /* Loop/switch isn't completed */
_L7:
            int k = MotionEventCompat.getActionIndex(motionevent);
            if (motionevent.getPointerId(k) == mActivePointerId) {
                if (k == 0)
                    i = 1;
                mActivePointerId = motionevent.getPointerId(i);
                updateDxDy(motionevent, mSelectedFlags, k);
            }
            if (true) goto _L1; else goto _L9
_L9:
        }

             {
                this$0 = ItemTouchHelper.this;
                super();
            }
    }
;
    View mOverdrawChild;
    int mOverdrawChildPosition;
    final List mPendingCleanup = new ArrayList();
    List mRecoverAnimations;
    RecyclerView mRecyclerView;
    final Runnable mScrollRunnable = new Runnable() {

        final ItemTouchHelper this$0;

        public void run() {
            if (mSelected != null && scrollIfNecessary()) {
                if (mSelected != null)
                    moveIfNecessary(mSelected);
                mRecyclerView.removeCallbacks(mScrollRunnable);
                ViewCompat.postOnAnimation(mRecyclerView, this);
            }
        }

             {
                this$0 = ItemTouchHelper.this;
                super();
            }
    }
;
    android.support.v7.widget.RecyclerView.ViewHolder mSelected;
    int mSelectedFlags;
    float mSelectedStartX;
    float mSelectedStartY;
    private int mSlop;
    private List mSwapTargets;
    float mSwipeEscapeVelocity;
    private final float mTmpPosition[] = new float[2];
    private Rect mTmpRect;
    VelocityTracker mVelocityTracker;

    public ItemTouchHelper(Callback callback) {
        mSelected = null;
        mActivePointerId = -1;
        mActionState = 0;
        mRecoverAnimations = new ArrayList();
        mChildDrawingOrderCallback = null;
        mOverdrawChild = null;
        mOverdrawChildPosition = -1;
        mCallback = callback;
    }

    private void addChildDrawingOrderCallback() {
        if (android.os.Build.VERSION.SDK_INT < 21) {
            if (mChildDrawingOrderCallback == null)
                mChildDrawingOrderCallback = new android.support.v7.widget.RecyclerView.ChildDrawingOrderCallback() {

                    final ItemTouchHelper this$0;

                    public int onGetChildDrawingOrder(int i, int j) {
                        if (mOverdrawChild != null) goto _L2; else goto _L1
_L1:
                        i = j;
_L4:
                        return i;
_L2:
                        int l = mOverdrawChildPosition;
                        int k = l;
                        if (l == -1) {
                            k = mRecyclerView.indexOfChild(mOverdrawChild);
                            mOverdrawChildPosition = k;
                        }
                        if (j == i - 1) {
                            i = k;
                        } else {
                            i = j;
                            if (j >= k)
                                i = j + 1;
                        }
                        if (true) goto _L4; else goto _L3
_L3:
                    }

             {
                this$0 = ItemTouchHelper.this;
                super();
            }
                }
;
            mRecyclerView.setChildDrawingOrderCallback(mChildDrawingOrderCallback);
        }
    }

    private int checkHorizontalSwipe(android.support.v7.widget.RecyclerView.ViewHolder viewholder, int i) {
        byte byte1 = 8;
        if ((i & 0xc) == 0) goto _L2; else goto _L1
_L1:
        byte byte0;
        if (mDx > 0.0F)
            byte0 = 8;
        else
            byte0 = 4;
        if (mVelocityTracker == null || mActivePointerId <= -1) goto _L4; else goto _L3
_L3:
        mVelocityTracker.computeCurrentVelocity(1000, mCallback.getSwipeVelocityThreshold(mMaxSwipeVelocity));
        float f2 = VelocityTrackerCompat.getXVelocity(mVelocityTracker, mActivePointerId);
        float f = VelocityTrackerCompat.getYVelocity(mVelocityTracker, mActivePointerId);
        if (f2 <= 0.0F)
            byte1 = 4;
        f2 = Math.abs(f2);
        if ((byte1 & i) == 0 || byte0 != byte1 || f2 < mCallback.getSwipeEscapeVelocity(mSwipeEscapeVelocity) || f2 <= Math.abs(f)) goto _L4; else goto _L5
_L5:
        return byte1;
_L4:
        float f3 = mRecyclerView.getWidth();
        float f1 = mCallback.getSwipeThreshold(viewholder);
        if ((i & byte0) != 0 && Math.abs(mDx) > f3 * f1) {
            byte1 = byte0;
            continue; /* Loop/switch isn't completed */
        }
_L2:
        byte1 = 0;
        if (true) goto _L5; else goto _L6
_L6:
    }

    private int checkVerticalSwipe(android.support.v7.widget.RecyclerView.ViewHolder viewholder, int i) {
        byte byte1 = 2;
        if ((i & 3) == 0) goto _L2; else goto _L1
_L1:
        byte byte0;
        if (mDy > 0.0F)
            byte0 = 2;
        else
            byte0 = 1;
        if (mVelocityTracker == null || mActivePointerId <= -1) goto _L4; else goto _L3
_L3:
        mVelocityTracker.computeCurrentVelocity(1000, mCallback.getSwipeVelocityThreshold(mMaxSwipeVelocity));
        float f = VelocityTrackerCompat.getXVelocity(mVelocityTracker, mActivePointerId);
        float f2 = VelocityTrackerCompat.getYVelocity(mVelocityTracker, mActivePointerId);
        if (f2 <= 0.0F)
            byte1 = 1;
        f2 = Math.abs(f2);
        if ((byte1 & i) == 0 || byte1 != byte0 || f2 < mCallback.getSwipeEscapeVelocity(mSwipeEscapeVelocity) || f2 <= Math.abs(f)) goto _L4; else goto _L5
_L5:
        return byte1;
_L4:
        float f1 = mRecyclerView.getHeight();
        float f3 = mCallback.getSwipeThreshold(viewholder);
        if ((i & byte0) != 0 && Math.abs(mDy) > f1 * f3) {
            byte1 = byte0;
            continue; /* Loop/switch isn't completed */
        }
_L2:
        byte1 = 0;
        if (true) goto _L5; else goto _L6
_L6:
    }

    private void destroyCallbacks() {
        mRecyclerView.removeItemDecoration(this);
        mRecyclerView.removeOnItemTouchListener(mOnItemTouchListener);
        mRecyclerView.removeOnChildAttachStateChangeListener(this);
        for (int i = mRecoverAnimations.size() - 1; i >= 0; i--) {
            RecoverAnimation recoveranimation = (RecoverAnimation)mRecoverAnimations.get(0);
            mCallback.clearView(mRecyclerView, recoveranimation.mViewHolder);
        }

        mRecoverAnimations.clear();
        mOverdrawChild = null;
        mOverdrawChildPosition = -1;
        releaseVelocityTracker();
    }

    private List findSwapTargets(android.support.v7.widget.RecyclerView.ViewHolder viewholder) {
        int i1;
        int j1;
        int k1;
        int l1;
        int i2;
        int k2;
        View view;
        int i;
        int j2;
        android.support.v7.widget.RecyclerView.LayoutManager layoutmanager;
        if (mSwapTargets == null) {
            mSwapTargets = new ArrayList();
            mDistances = new ArrayList();
        } else {
            mSwapTargets.clear();
            mDistances.clear();
        }
        i = mCallback.getBoundingBoxMargin();
        k1 = Math.round(mSelectedStartX + mDx) - i;
        i1 = Math.round(mSelectedStartY + mDy) - i;
        j1 = viewholder.itemView.getWidth() + k1 + i * 2;
        k2 = viewholder.itemView.getHeight() + i1 + i * 2;
        i2 = (k1 + j1) / 2;
        l1 = (i1 + k2) / 2;
        layoutmanager = mRecyclerView.getLayoutManager();
        j2 = layoutmanager.getChildCount();
        i = 0;
        if (i >= j2)
            break; /* Loop/switch isn't completed */
        view = layoutmanager.getChildAt(i);
        if (view != viewholder.itemView && view.getBottom() >= i1 && view.getTop() <= k2 && view.getRight() >= k1 && view.getLeft() <= j1) {
            android.support.v7.widget.RecyclerView.ViewHolder viewholder1 = mRecyclerView.getChildViewHolder(view);
            if (mCallback.canDropOver(mRecyclerView, mSelected, viewholder1)) {
                int j = Math.abs(i2 - (view.getLeft() + view.getRight()) / 2);
                int k = view.getTop();
                k = Math.abs(l1 - (view.getBottom() + k) / 2);
                int l2 = j * j + k * k;
                int i3 = mSwapTargets.size();
                j = 0;
                for (int l = 0; l < i3 && l2 > ((Integer)mDistances.get(l)).intValue(); l++)
                    j++;

                mSwapTargets.add(j, viewholder1);
                mDistances.add(j, Integer.valueOf(l2));
            }
        }
        i++;
        if (true) goto _L2; else goto _L1
_L2:
        break MISSING_BLOCK_LABEL_137;
_L1:
        return mSwapTargets;
    }

    private android.support.v7.widget.RecyclerView.ViewHolder findSwipedView(MotionEvent motionevent) {
        Object obj;
        android.support.v7.widget.RecyclerView.LayoutManager layoutmanager;
        obj = null;
        layoutmanager = mRecyclerView.getLayoutManager();
        if (mActivePointerId != -1) goto _L2; else goto _L1
_L1:
        android.support.v7.widget.RecyclerView.ViewHolder viewholder = obj;
_L4:
        return viewholder;
_L2:
        int i = motionevent.findPointerIndex(mActivePointerId);
        float f2 = motionevent.getX(i);
        float f3 = mInitialTouchX;
        float f1 = motionevent.getY(i);
        float f = mInitialTouchY;
        f2 = Math.abs(f2 - f3);
        f = Math.abs(f1 - f);
        if (f2 < (float)mSlop) {
            viewholder = obj;
            if (f < (float)mSlop)
                continue; /* Loop/switch isn't completed */
        }
        if (f2 > f) {
            viewholder = obj;
            if (layoutmanager.canScrollHorizontally())
                continue; /* Loop/switch isn't completed */
        }
        if (f > f2) {
            viewholder = obj;
            if (layoutmanager.canScrollVertically())
                continue; /* Loop/switch isn't completed */
        }
        motionevent = findChildView(motionevent);
        viewholder = obj;
        if (motionevent != null)
            viewholder = mRecyclerView.getChildViewHolder(motionevent);
        if (true) goto _L4; else goto _L3
_L3:
    }

    private void getSelectedDxDy(float af[]) {
        if ((mSelectedFlags & 0xc) != 0)
            af[0] = (mSelectedStartX + mDx) - (float)mSelected.itemView.getLeft();
        else
            af[0] = ViewCompat.getTranslationX(mSelected.itemView);
        if ((mSelectedFlags & 3) != 0)
            af[1] = (mSelectedStartY + mDy) - (float)mSelected.itemView.getTop();
        else
            af[1] = ViewCompat.getTranslationY(mSelected.itemView);
    }

    private static boolean hitTest(View view, float f, float f1, float f2, float f3) {
        boolean flag;
        if (f >= f2 && f <= (float)view.getWidth() + f2 && f1 >= f3 && f1 <= (float)view.getHeight() + f3)
            flag = true;
        else
            flag = false;
        return flag;
    }

    private void initGestureDetector() {
        if (mGestureDetector == null)
            mGestureDetector = new GestureDetectorCompat(mRecyclerView.getContext(), new ItemTouchHelperGestureListener());
    }

    private void releaseVelocityTracker() {
        if (mVelocityTracker != null) {
            mVelocityTracker.recycle();
            mVelocityTracker = null;
        }
    }

    private void setupCallbacks() {
        mSlop = ViewConfiguration.get(mRecyclerView.getContext()).getScaledTouchSlop();
        mRecyclerView.addItemDecoration(this);
        mRecyclerView.addOnItemTouchListener(mOnItemTouchListener);
        mRecyclerView.addOnChildAttachStateChangeListener(this);
        initGestureDetector();
    }

    private int swipeIfNecessary(android.support.v7.widget.RecyclerView.ViewHolder viewholder) {
        boolean flag = false;
        if (mActionState != 2) goto _L2; else goto _L1
_L1:
        int i = ((flag) ? 1 : 0);
_L4:
        return i;
_L2:
        int k = mCallback.getMovementFlags(mRecyclerView, viewholder);
        int j = (mCallback.convertToAbsoluteDirection(k, ViewCompat.getLayoutDirection(mRecyclerView)) & 0xff00) >> 8;
        i = ((flag) ? 1 : 0);
        if (j != 0) {
            k = (k & 0xff00) >> 8;
            if (Math.abs(mDx) > Math.abs(mDy)) {
                i = checkHorizontalSwipe(viewholder, j);
                if (i > 0) {
                    if ((k & i) == 0)
                        i = Callback.convertToRelativeDirection(i, ViewCompat.getLayoutDirection(mRecyclerView));
                } else {
                    j = checkVerticalSwipe(viewholder, j);
                    i = ((flag) ? 1 : 0);
                    if (j > 0)
                        i = j;
                }
            } else {
                i = checkVerticalSwipe(viewholder, j);
                if (i <= 0) {
                    j = checkHorizontalSwipe(viewholder, j);
                    i = ((flag) ? 1 : 0);
                    if (j > 0)
                        if ((k & j) == 0)
                            i = Callback.convertToRelativeDirection(j, ViewCompat.getLayoutDirection(mRecyclerView));
                        else
                            i = j;
                }
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void attachToRecyclerView(RecyclerView recyclerview) {
        if (mRecyclerView != recyclerview) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (mRecyclerView != null)
            destroyCallbacks();
        mRecyclerView = recyclerview;
        if (mRecyclerView != null) {
            recyclerview = recyclerview.getResources();
            mSwipeEscapeVelocity = recyclerview.getDimension(android.support.v7.recyclerview.R.dimen.item_touch_helper_swipe_escape_velocity);
            mMaxSwipeVelocity = recyclerview.getDimension(android.support.v7.recyclerview.R.dimen.item_touch_helper_swipe_escape_max_velocity);
            setupCallbacks();
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    boolean checkSelectForSwipe(int i, MotionEvent motionevent, int j) {
        boolean flag;
        boolean flag1;
        flag1 = false;
        flag = flag1;
        if (mSelected != null) goto _L2; else goto _L1
_L1:
        flag = flag1;
        if (i != 2) goto _L2; else goto _L3
_L3:
        flag = flag1;
        if (mActionState == 2) goto _L2; else goto _L4
_L4:
        if (mCallback.isItemViewSwipeEnabled()) goto _L6; else goto _L5
_L5:
        flag = flag1;
_L2:
        return flag;
_L6:
        float f;
        float f1;
        float f2;
        float f3;
        android.support.v7.widget.RecyclerView.ViewHolder viewholder;
        flag = flag1;
        if (mRecyclerView.getScrollState() == 1)
            continue; /* Loop/switch isn't completed */
        viewholder = findSwipedView(motionevent);
        flag = flag1;
        if (viewholder == null)
            continue; /* Loop/switch isn't completed */
        i = (mCallback.getAbsoluteMovementFlags(mRecyclerView, viewholder) & 0xff00) >> 8;
        flag = flag1;
        if (i == 0)
            continue; /* Loop/switch isn't completed */
        f = motionevent.getX(j);
        f1 = motionevent.getY(j);
        f -= mInitialTouchX;
        f2 = f1 - mInitialTouchY;
        f3 = Math.abs(f);
        f1 = Math.abs(f2);
        if (f3 < (float)mSlop) {
            flag = flag1;
            if (f1 < (float)mSlop)
                continue; /* Loop/switch isn't completed */
        }
        if (f3 <= f1) goto _L8; else goto _L7
_L7:
        if (f < 0.0F) {
            flag = flag1;
            if ((i & 4) == 0)
                continue; /* Loop/switch isn't completed */
        }
        if (f > 0.0F) {
            flag = flag1;
            if ((i & 8) == 0)
                continue; /* Loop/switch isn't completed */
        }
_L10:
        mDy = 0.0F;
        mDx = 0.0F;
        mActivePointerId = motionevent.getPointerId(0);
        select(viewholder, 1);
        flag = true;
        continue; /* Loop/switch isn't completed */
_L8:
        if (f2 >= 0.0F)
            continue; /* Loop/switch isn't completed */
        flag = flag1;
        if ((i & 1) == 0)
            continue; /* Loop/switch isn't completed */
        if (f2 <= 0.0F || (i & 2) != 0) goto _L10; else goto _L9
_L9:
        flag = flag1;
        if (true) goto _L2; else goto _L11
_L11:
    }

    int endRecoverAnimation(android.support.v7.widget.RecyclerView.ViewHolder viewholder, boolean flag) {
        int i = mRecoverAnimations.size() - 1;
_L3:
        RecoverAnimation recoveranimation;
        if (i < 0)
            break MISSING_BLOCK_LABEL_90;
        recoveranimation = (RecoverAnimation)mRecoverAnimations.get(i);
        if (recoveranimation.mViewHolder != viewholder) goto _L2; else goto _L1
_L1:
        recoveranimation.mOverridden = recoveranimation.mOverridden | flag;
        if (!recoveranimation.mEnded)
            recoveranimation.cancel();
        mRecoverAnimations.remove(i);
        i = recoveranimation.mAnimationType;
_L4:
        return i;
_L2:
        i--;
          goto _L3
        i = 0;
          goto _L4
    }

    RecoverAnimation findAnimation(MotionEvent motionevent) {
        if (!mRecoverAnimations.isEmpty()) goto _L2; else goto _L1
_L1:
        motionevent = null;
_L4:
        return motionevent;
_L2:
        View view = findChildView(motionevent);
        for (int i = mRecoverAnimations.size() - 1; i >= 0; i--) {
            RecoverAnimation recoveranimation = (RecoverAnimation)mRecoverAnimations.get(i);
            motionevent = recoveranimation;
            if (recoveranimation.mViewHolder.itemView == view)
                continue; /* Loop/switch isn't completed */
        }

        motionevent = null;
        if (true) goto _L4; else goto _L3
_L3:
    }

    View findChildView(MotionEvent motionevent) {
        float f;
        float f1;
        f = motionevent.getX();
        f1 = motionevent.getY();
        if (mSelected == null) goto _L2; else goto _L1
_L1:
        motionevent = mSelected.itemView;
        if (!hitTest(motionevent, f, f1, mSelectedStartX + mDx, mSelectedStartY + mDy)) goto _L2; else goto _L3
_L3:
        return motionevent;
_L2:
        for (int i = mRecoverAnimations.size() - 1; i >= 0; i--) {
            RecoverAnimation recoveranimation = (RecoverAnimation)mRecoverAnimations.get(i);
            motionevent = recoveranimation.mViewHolder.itemView;
            if (hitTest(motionevent, f, f1, recoveranimation.mX, recoveranimation.mY))
                continue; /* Loop/switch isn't completed */
        }

        motionevent = mRecyclerView.findChildViewUnder(f, f1);
        if (true) goto _L3; else goto _L4
_L4:
    }

    public void getItemOffsets(Rect rect, View view, RecyclerView recyclerview, android.support.v7.widget.RecyclerView.State state) {
        rect.setEmpty();
    }

    boolean hasRunningRecoverAnim() {
        int i;
        int j;
        j = mRecoverAnimations.size();
        i = 0;
_L3:
        if (i >= j)
            break MISSING_BLOCK_LABEL_46;
        if (((RecoverAnimation)mRecoverAnimations.get(i)).mEnded) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        i++;
          goto _L3
        flag = false;
          goto _L4
    }

    void moveIfNecessary(android.support.v7.widget.RecyclerView.ViewHolder viewholder) {
_L2:
        return;
        if (mRecyclerView.isLayoutRequested() || mActionState != 2) goto _L2; else goto _L1
_L1:
        float f = mCallback.getMoveThreshold(viewholder);
        int k = (int)(mSelectedStartX + mDx);
        int l = (int)(mSelectedStartY + mDy);
        if ((float)Math.abs(l - viewholder.itemView.getTop()) >= (float)viewholder.itemView.getHeight() * f || (float)Math.abs(k - viewholder.itemView.getLeft()) >= f * (float)viewholder.itemView.getWidth()) {
            Object obj = findSwapTargets(viewholder);
            if (((List) (obj)).size() != 0) {
                obj = mCallback.chooseDropTarget(viewholder, ((List) (obj)), k, l);
                if (obj == null) {
                    mSwapTargets.clear();
                    mDistances.clear();
                } else {
                    int i = ((android.support.v7.widget.RecyclerView.ViewHolder) (obj)).getAdapterPosition();
                    int j = viewholder.getAdapterPosition();
                    if (mCallback.onMove(mRecyclerView, viewholder, ((android.support.v7.widget.RecyclerView.ViewHolder) (obj))))
                        mCallback.onMoved(mRecyclerView, viewholder, j, ((android.support.v7.widget.RecyclerView.ViewHolder) (obj)), i, k, l);
                }
            }
        }
        if (true) goto _L2; else goto _L3
_L3:
    }

    void obtainVelocityTracker() {
        if (mVelocityTracker != null)
            mVelocityTracker.recycle();
        mVelocityTracker = VelocityTracker.obtain();
    }

    public void onChildViewAttachedToWindow(View view) {
    }

    public void onChildViewDetachedFromWindow(View view) {
        removeChildDrawingOrderCallbackIfNecessary(view);
        view = mRecyclerView.getChildViewHolder(view);
        if (view != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (mSelected != null && view == mSelected) {
            select(null, 0);
        } else {
            endRecoverAnimation(view, false);
            if (mPendingCleanup.remove(((android.support.v7.widget.RecyclerView.ViewHolder) (view)).itemView))
                mCallback.clearView(mRecyclerView, view);
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void onDraw(Canvas canvas, RecyclerView recyclerview, android.support.v7.widget.RecyclerView.State state) {
        float f = 0.0F;
        mOverdrawChildPosition = -1;
        float f1;
        if (mSelected != null) {
            getSelectedDxDy(mTmpPosition);
            f1 = mTmpPosition[0];
            f = mTmpPosition[1];
        } else {
            f1 = 0.0F;
        }
        mCallback.onDraw(canvas, recyclerview, mSelected, mRecoverAnimations, mActionState, f1, f);
    }

    public void onDrawOver(Canvas canvas, RecyclerView recyclerview, android.support.v7.widget.RecyclerView.State state) {
        float f = 0.0F;
        float f1;
        if (mSelected != null) {
            getSelectedDxDy(mTmpPosition);
            f1 = mTmpPosition[0];
            f = mTmpPosition[1];
        } else {
            f1 = 0.0F;
        }
        mCallback.onDrawOver(canvas, recyclerview, mSelected, mRecoverAnimations, mActionState, f1, f);
    }

    void postDispatchSwipe(final RecoverAnimation anim, final int swipeDir) {
        mRecyclerView.post(new Runnable() {

            final ItemTouchHelper this$0;
            final RecoverAnimation val$anim;
            final int val$swipeDir;

            public void run() {
                if (mRecyclerView != null && mRecyclerView.isAttachedToWindow() && !anim.mOverridden && anim.mViewHolder.getAdapterPosition() != -1) {
                    android.support.v7.widget.RecyclerView.ItemAnimator itemanimator = mRecyclerView.getItemAnimator();
                    if ((itemanimator == null || !itemanimator.isRunning(null)) && !hasRunningRecoverAnim())
                        mCallback.onSwiped(anim.mViewHolder, swipeDir);
                    else
                        mRecyclerView.post(this);
                }
            }

             {
                this$0 = ItemTouchHelper.this;
                anim = recoveranimation;
                swipeDir = i;
                super();
            }
        }
);
    }

    void removeChildDrawingOrderCallbackIfNecessary(View view) {
        if (view == mOverdrawChild) {
            mOverdrawChild = null;
            if (mChildDrawingOrderCallback != null)
                mRecyclerView.setChildDrawingOrderCallback(null);
        }
    }

    boolean scrollIfNecessary() {
        boolean flag = false;
        if (mSelected != null) goto _L2; else goto _L1
_L1:
        mDragScrollStartTimeInMs = 0x0L;
_L11:
        return flag;
_L2:
        int i;
        int j;
        int k;
        long l1 = System.currentTimeMillis();
        long l;
        android.support.v7.widget.RecyclerView.LayoutManager layoutmanager;
        if (mDragScrollStartTimeInMs == 0x0L)
            l = 0L;
        else
            l = l1 - mDragScrollStartTimeInMs;
        layoutmanager = mRecyclerView.getLayoutManager();
        if (mTmpRect == null)
            mTmpRect = new Rect();
        layoutmanager.calculateItemDecorationsForChild(mSelected.itemView, mTmpRect);
        if (!layoutmanager.canScrollHorizontally()) goto _L4; else goto _L3
_L3:
        j = (int)(mSelectedStartX + mDx);
        i = j - mTmpRect.left - mRecyclerView.getPaddingLeft();
        if (mDx >= 0.0F || i >= 0) goto _L6; else goto _L5
_L5:
        if (!layoutmanager.canScrollVertically()) goto _L8; else goto _L7
_L7:
        k = (int)(mSelectedStartY + mDy);
        j = k - mTmpRect.top - mRecyclerView.getPaddingTop();
        if (mDy >= 0.0F || j >= 0) goto _L10; else goto _L9
_L9:
        if (i != 0)
            i = mCallback.interpolateOutOfBoundsScroll(mRecyclerView, mSelected.itemView.getWidth(), i, mRecyclerView.getWidth(), l);
        if (j != 0)
            j = mCallback.interpolateOutOfBoundsScroll(mRecyclerView, mSelected.itemView.getHeight(), j, mRecyclerView.getHeight(), l);
        if (i != 0 || j != 0) {
            if (mDragScrollStartTimeInMs == 0x0L)
                mDragScrollStartTimeInMs = l1;
            mRecyclerView.scrollBy(i, j);
            flag = true;
        } else {
            mDragScrollStartTimeInMs = 0x0L;
        }
          goto _L11
_L6:
        if (mDx <= 0.0F) goto _L4; else goto _L12
_L12:
        j = (j + mSelected.itemView.getWidth() + mTmpRect.right) - (mRecyclerView.getWidth() - mRecyclerView.getPaddingRight());
        i = j;
        if (j > 0) goto _L5; else goto _L4
_L4:
        i = 0;
          goto _L5
_L10:
        if (mDy <= 0.0F) goto _L8; else goto _L13
_L13:
        k = (k + mSelected.itemView.getHeight() + mTmpRect.bottom) - (mRecyclerView.getHeight() - mRecyclerView.getPaddingBottom());
        j = k;
        if (k > 0) goto _L9; else goto _L8
_L8:
        j = 0;
          goto _L9
    }

    void select(android.support.v7.widget.RecyclerView.ViewHolder viewholder, int i) {
        if (viewholder != mSelected || i != mActionState) goto _L2; else goto _L1
_L1:
        return;
_L2:
        final int final_i;
        int j;
        int k;
        mDragScrollStartTimeInMs = 0x0L;
        k = mActionState;
        endRecoverAnimation(viewholder, true);
        mActionState = i;
        if (i == 2) {
            mOverdrawChild = viewholder.itemView;
            addChildDrawingOrderCallback();
        }
        final_i = 0;
        j = 0;
        if (mSelected == null) goto _L4; else goto _L3
_L3:
        float f;
        float f1;
        final Object final_viewholder;
        final_viewholder = mSelected;
        if (((android.support.v7.widget.RecyclerView.ViewHolder) (final_viewholder)).itemView.getParent() == null)
            break MISSING_BLOCK_LABEL_512;
        float f2;
        float f3;
        if (k == 2)
            j = 0;
        else
            j = swipeIfNecessary(((android.support.v7.widget.RecyclerView.ViewHolder) (final_viewholder)));
        releaseVelocityTracker();
        j;
        JVM INSTR lookupswitch 6: default 164
    //                   1: 472
    //                   2: 472
    //                   4: 449
    //                   8: 449
    //                   16: 449
    //                   32: 449;
           goto _L5 _L6 _L6 _L7 _L7 _L7 _L7
_L5:
        f = 0.0F;
        f1 = 0.0F;
_L8:
        if (k == 2)
            final_i = 8;
        else
        if (j > 0)
            final_i = 2;
        else
            final_i = 4;
        getSelectedDxDy(mTmpPosition);
        f3 = mTmpPosition[0];
        f2 = mTmpPosition[1];
        final_viewholder = new RecoverAnimation(k, f3, f2, f, f1, j, ((android.support.v7.widget.RecyclerView.ViewHolder) (final_viewholder))) {

            final ItemTouchHelper this$0;
            final android.support.v7.widget.RecyclerView.ViewHolder val$prevSelected;
            final int val$swipeDir;

            public void onAnimationEnd(ValueAnimatorCompat valueanimatorcompat) {
                super.onAnimationEnd(valueanimatorcompat);
                if (!mOverridden) goto _L2; else goto _L1
_L1:
                return;
_L2:
                if (swipeDir > 0)
                    break; /* Loop/switch isn't completed */
                mCallback.clearView(mRecyclerView, prevSelected);
_L4:
                if (mOverdrawChild == prevSelected.itemView)
                    removeChildDrawingOrderCallbackIfNecessary(prevSelected.itemView);
                if (true) goto _L1; else goto _L3
_L3:
                mPendingCleanup.add(prevSelected.itemView);
                mIsPendingCleanup = true;
                if (swipeDir > 0)
                    postDispatchSwipe(this, swipeDir);
                  goto _L4
                if (true) goto _L1; else goto _L5
_L5:
            }

             {
                this$0 = ItemTouchHelper.this;
                swipeDir = k;
                prevSelected = viewholder1;
                super(final_viewholder, final_i, j, f, f1, f2, f3);
            }
        }
;
        ((RecoverAnimation) (final_viewholder)).setDuration(mCallback.getAnimationDuration(mRecyclerView, final_i, f - f3, f1 - f2));
        mRecoverAnimations.add(final_viewholder);
        ((RecoverAnimation) (final_viewholder)).start();
        final_i = 1;
_L9:
        mSelected = null;
_L4:
        if (viewholder != null) {
            mSelectedFlags = (mCallback.getAbsoluteMovementFlags(mRecyclerView, viewholder) & (1 << i * 8 + 8) - 1) >> mActionState * 8;
            mSelectedStartX = viewholder.itemView.getLeft();
            mSelectedStartY = viewholder.itemView.getTop();
            mSelected = viewholder;
            if (i == 2)
                mSelected.itemView.performHapticFeedback(0);
        }
        viewholder = mRecyclerView.getParent();
        if (viewholder != null) {
            boolean flag;
            if (mSelected != null)
                flag = true;
            else
                flag = false;
            viewholder.requestDisallowInterceptTouchEvent(flag);
        }
        if (final_i == 0)
            mRecyclerView.getLayoutManager().requestSimpleAnimationsInNextLayout();
        mCallback.onSelectedChanged(mSelected, mActionState);
        mRecyclerView.invalidate();
          goto _L1
_L7:
        f1 = 0.0F;
        f = Math.signum(mDx) * (float)mRecyclerView.getWidth();
          goto _L8
_L6:
        f = 0.0F;
        f1 = Math.signum(mDy) * (float)mRecyclerView.getHeight();
          goto _L8
        removeChildDrawingOrderCallbackIfNecessary(((android.support.v7.widget.RecyclerView.ViewHolder) (final_viewholder)).itemView);
        mCallback.clearView(mRecyclerView, ((android.support.v7.widget.RecyclerView.ViewHolder) (final_viewholder)));
        final_i = j;
          goto _L9
    }

    public void startDrag(android.support.v7.widget.RecyclerView.ViewHolder viewholder) {
        if (!mCallback.hasDragFlag(mRecyclerView, viewholder))
            Log.e("ItemTouchHelper", "Start drag has been called but swiping is not enabled");
        else
        if (viewholder.itemView.getParent() != mRecyclerView) {
            Log.e("ItemTouchHelper", "Start drag has been called with a view holder which is not a child of the RecyclerView which is controlled by this ItemTouchHelper.");
        } else {
            obtainVelocityTracker();
            mDy = 0.0F;
            mDx = 0.0F;
            select(viewholder, 2);
        }
    }

    public void startSwipe(android.support.v7.widget.RecyclerView.ViewHolder viewholder) {
        if (!mCallback.hasSwipeFlag(mRecyclerView, viewholder))
            Log.e("ItemTouchHelper", "Start swipe has been called but dragging is not enabled");
        else
        if (viewholder.itemView.getParent() != mRecyclerView) {
            Log.e("ItemTouchHelper", "Start swipe has been called with a view holder which is not a child of the RecyclerView controlled by this ItemTouchHelper.");
        } else {
            obtainVelocityTracker();
            mDy = 0.0F;
            mDx = 0.0F;
            select(viewholder, 1);
        }
    }

    void updateDxDy(MotionEvent motionevent, int i, int j) {
        float f1 = motionevent.getX(j);
        float f = motionevent.getY(j);
        mDx = f1 - mInitialTouchX;
        mDy = f - mInitialTouchY;
        if ((i & 4) == 0)
            mDx = Math.max(0.0F, mDx);
        if ((i & 8) == 0)
            mDx = Math.min(0.0F, mDx);
        if ((i & 1) == 0)
            mDy = Math.max(0.0F, mDy);
        if ((i & 2) == 0)
            mDy = Math.min(0.0F, mDy);
    }

    // Unreferenced inner class android/support/v7/widget/helper/ItemTouchHelper$RecoverAnimation$1

/* anonymous class */
    class RecoverAnimation._cls1
        implements AnimatorUpdateListenerCompat {

        final RecoverAnimation this$1;
        final ItemTouchHelper val$this$0;

        public void onAnimationUpdate(ValueAnimatorCompat valueanimatorcompat) {
            setFraction(valueanimatorcompat.getAnimatedFraction());
        }

             {
                this$1 = final_recoveranimation;
                this$0 = ItemTouchHelper.this;
                super();
            }
    }

}
