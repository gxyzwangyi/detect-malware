// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v7.widget;

import android.content.Context;
import android.util.DisplayMetrics;
import android.view.View;
import android.view.animation.DecelerateInterpolator;
import android.widget.Scroller;

// Referenced classes of package android.support.v7.widget:
//            RecyclerView, LinearSmoothScroller

public abstract class SnapHelper extends RecyclerView.OnFlingListener {

    static final float MILLISECONDS_PER_INCH = 100F;
    private Scroller mGravityScroller;
    RecyclerView mRecyclerView;
    private final RecyclerView.OnScrollListener mScrollListener = new RecyclerView.OnScrollListener() {

        boolean mScrolled;
        final SnapHelper this$0;

        public void onScrollStateChanged(RecyclerView recyclerview, int i) {
            super.onScrollStateChanged(recyclerview, i);
            if (i == 0 && mScrolled) {
                mScrolled = false;
                snapToTargetExistingView();
            }
        }

        public void onScrolled(RecyclerView recyclerview, int i, int j) {
            if (i != 0 || j != 0)
                mScrolled = true;
        }

             {
                this$0 = SnapHelper.this;
                super();
                mScrolled = false;
            }
    }
;

    public SnapHelper() {
    }

    private LinearSmoothScroller createSnapScroller(RecyclerView.LayoutManager layoutmanager) {
        if (!(layoutmanager instanceof RecyclerView.SmoothScroller.ScrollVectorProvider))
            layoutmanager = null;
        else
            layoutmanager = new LinearSmoothScroller(mRecyclerView.getContext()) {

                final SnapHelper this$0;

                protected float calculateSpeedPerPixel(DisplayMetrics displaymetrics) {
                    return 100F / (float)displaymetrics.densityDpi;
                }

                protected void onTargetFound(View view, RecyclerView.State state, RecyclerView.SmoothScroller.Action action) {
                    view = calculateDistanceToFinalSnap(mRecyclerView.getLayoutManager(), view);
                    int j = view[0];
                    int i = view[1];
                    int k = calculateTimeForDeceleration(Math.max(Math.abs(j), Math.abs(i)));
                    if (k > 0)
                        action.update(j, i, k, mDecelerateInterpolator);
                }

             {
                this$0 = SnapHelper.this;
                super(context);
            }
            }
;
        return layoutmanager;
    }

    private void destroyCallbacks() {
        mRecyclerView.removeOnScrollListener(mScrollListener);
        mRecyclerView.setOnFlingListener(null);
    }

    private void setupCallbacks() {
        if (mRecyclerView.getOnFlingListener() != null) {
            throw new IllegalStateException("An instance of OnFlingListener already set.");
        } else {
            mRecyclerView.addOnScrollListener(mScrollListener);
            mRecyclerView.setOnFlingListener(this);
            return;
        }
    }

    private boolean snapFromFling(RecyclerView.LayoutManager layoutmanager, int i, int j) {
        boolean flag1 = false;
        if (layoutmanager instanceof RecyclerView.SmoothScroller.ScrollVectorProvider) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        LinearSmoothScroller linearsmoothscroller = createSnapScroller(layoutmanager);
        flag = flag1;
        if (linearsmoothscroller != null) {
            i = findTargetSnapPosition(layoutmanager, i, j);
            flag = flag1;
            if (i != -1) {
                linearsmoothscroller.setTargetPosition(i);
                layoutmanager.startSmoothScroll(linearsmoothscroller);
                flag = true;
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void attachToRecyclerView(RecyclerView recyclerview) {
        if (mRecyclerView != recyclerview) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (mRecyclerView != null)
            destroyCallbacks();
        mRecyclerView = recyclerview;
        if (mRecyclerView != null) {
            setupCallbacks();
            mGravityScroller = new Scroller(mRecyclerView.getContext(), new DecelerateInterpolator());
            snapToTargetExistingView();
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    public abstract int[] calculateDistanceToFinalSnap(RecyclerView.LayoutManager layoutmanager, View view);

    public int[] calculateScrollDistance(int i, int j) {
        mGravityScroller.fling(0, 0, i, j, 0x80000000, 0x7fffffff, 0x80000000, 0x7fffffff);
        return (new int[] {
            mGravityScroller.getFinalX(), mGravityScroller.getFinalY()
        });
    }

    public abstract View findSnapView(RecyclerView.LayoutManager layoutmanager);

    public abstract int findTargetSnapPosition(RecyclerView.LayoutManager layoutmanager, int i, int j);

    public boolean onFling(int i, int j) {
        boolean flag1;
        RecyclerView.LayoutManager layoutmanager;
        flag1 = false;
        layoutmanager = mRecyclerView.getLayoutManager();
        if (layoutmanager != null) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        flag = flag1;
        if (mRecyclerView.getAdapter() == null)
            continue; /* Loop/switch isn't completed */
        int k = mRecyclerView.getMinFlingVelocity();
        if (Math.abs(j) <= k) {
            flag = flag1;
            if (Math.abs(i) <= k)
                continue; /* Loop/switch isn't completed */
        }
        flag = flag1;
        if (snapFromFling(layoutmanager, i, j))
            flag = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    void snapToTargetExistingView() {
        if (mRecyclerView != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        RecyclerView.LayoutManager layoutmanager = mRecyclerView.getLayoutManager();
        if (layoutmanager != null) {
            View view = findSnapView(layoutmanager);
            if (view != null) {
                int ai[] = calculateDistanceToFinalSnap(layoutmanager, view);
                if (ai[0] != 0 || ai[1] != 0)
                    mRecyclerView.smoothScrollBy(ai[0], ai[1]);
            }
        }
        if (true) goto _L1; else goto _L3
_L3:
    }
}
