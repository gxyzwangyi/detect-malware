// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v7.widget;

import android.content.Context;
import android.graphics.Rect;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.util.*;
import android.view.View;
import java.util.Arrays;

// Referenced classes of package android.support.v7.widget:
//            LinearLayoutManager, OrientationHelper, RecyclerView

public class GridLayoutManager extends LinearLayoutManager {
    public static final class DefaultSpanSizeLookup extends SpanSizeLookup {

        public int getSpanIndex(int i, int j) {
            return i % j;
        }

        public int getSpanSize(int i) {
            return 1;
        }

        public DefaultSpanSizeLookup() {
        }
    }

    public static class LayoutParams extends RecyclerView.LayoutParams {

        public static final int INVALID_SPAN_ID = -1;
        int mSpanIndex;
        int mSpanSize;

        public int getSpanIndex() {
            return mSpanIndex;
        }

        public int getSpanSize() {
            return mSpanSize;
        }

        public LayoutParams(int i, int j) {
            super(i, j);
            mSpanIndex = -1;
            mSpanSize = 0;
        }

        public LayoutParams(Context context, AttributeSet attributeset) {
            super(context, attributeset);
            mSpanIndex = -1;
            mSpanSize = 0;
        }

        public LayoutParams(RecyclerView.LayoutParams layoutparams) {
            super(layoutparams);
            mSpanIndex = -1;
            mSpanSize = 0;
        }

        public LayoutParams(android.view.ViewGroup.LayoutParams layoutparams) {
            super(layoutparams);
            mSpanIndex = -1;
            mSpanSize = 0;
        }

        public LayoutParams(android.view.ViewGroup.MarginLayoutParams marginlayoutparams) {
            super(marginlayoutparams);
            mSpanIndex = -1;
            mSpanSize = 0;
        }
    }

    public static abstract class SpanSizeLookup {

        private boolean mCacheSpanIndices;
        final SparseIntArray mSpanIndexCache = new SparseIntArray();

        int findReferenceIndexFromCache(int i) {
            int j = 0;
            for (int k = mSpanIndexCache.size() - 1; j <= k;) {
                int l = j + k >>> 1;
                if (mSpanIndexCache.keyAt(l) < i)
                    j = l + 1;
                else
                    k = l - 1;
            }

            i = j - 1;
            if (i >= 0 && i < mSpanIndexCache.size())
                i = mSpanIndexCache.keyAt(i);
            else
                i = -1;
            return i;
        }

        int getCachedSpanIndex(int i, int j) {
            if (mCacheSpanIndices) goto _L2; else goto _L1
_L1:
            int k = getSpanIndex(i, j);
_L4:
            return k;
_L2:
            int l = mSpanIndexCache.get(i, -1);
            k = l;
            if (l == -1) {
                k = getSpanIndex(i, j);
                mSpanIndexCache.put(i, k);
            }
            if (true) goto _L4; else goto _L3
_L3:
        }

        public int getSpanGroupIndex(int i, int j) {
            int l1 = getSpanSize(i);
            int i1 = 0;
            int k = 0;
            int l = 0;
            while (i1 < i)  {
                int j1 = getSpanSize(i1);
                l += j1;
                if (l == j) {
                    l = k + 1;
                    k = 0;
                } else
                if (l > j) {
                    l = k + 1;
                    k = j1;
                } else {
                    int k1 = l;
                    l = k;
                    k = k1;
                }
                j1 = i1 + 1;
                i1 = k;
                k = l;
                l = i1;
                i1 = j1;
            }
            i = k;
            if (l + l1 > j)
                i = k + 1;
            return i;
        }

        public int getSpanIndex(int i, int j) {
            boolean flag;
            int k1;
            flag = false;
            k1 = getSpanSize(i);
            if (k1 != j) goto _L2; else goto _L1
_L1:
            i = ((flag) ? 1 : 0);
_L4:
            return i;
_L2:
            int k;
            int l;
            if (!mCacheSpanIndices || mSpanIndexCache.size() <= 0)
                break; /* Loop/switch isn't completed */
            l = findReferenceIndexFromCache(i);
            if (l < 0)
                break; /* Loop/switch isn't completed */
            k = mSpanIndexCache.get(l) + getSpanSize(l);
            l++;
_L5:
            while (l < i)  {
                int i1 = getSpanSize(l);
                int j1 = k + i1;
                if (j1 == j) {
                    k = 0;
                } else {
                    k = i1;
                    if (j1 <= j)
                        k = j1;
                }
                l++;
            }
            i = ((flag) ? 1 : 0);
            if (k + k1 <= j)
                i = k;
            if (true) goto _L4; else goto _L3
_L3:
            l = 0;
            k = 0;
              goto _L5
            if (true) goto _L4; else goto _L6
_L6:
        }

        public abstract int getSpanSize(int i);

        public void invalidateSpanIndexCache() {
            mSpanIndexCache.clear();
        }

        public boolean isSpanIndexCacheEnabled() {
            return mCacheSpanIndices;
        }

        public void setSpanIndexCacheEnabled(boolean flag) {
            mCacheSpanIndices = flag;
        }

        public SpanSizeLookup() {
            mCacheSpanIndices = false;
        }
    }


    private static final boolean DEBUG = false;
    public static final int DEFAULT_SPAN_COUNT = -1;
    private static final String TAG = "GridLayoutManager";
    int mCachedBorders[];
    final Rect mDecorInsets;
    boolean mPendingSpanCountChange;
    final SparseIntArray mPreLayoutSpanIndexCache;
    final SparseIntArray mPreLayoutSpanSizeCache;
    View mSet[];
    int mSpanCount;
    SpanSizeLookup mSpanSizeLookup;

    public GridLayoutManager(Context context, int i) {
        super(context);
        mPendingSpanCountChange = false;
        mSpanCount = -1;
        mPreLayoutSpanSizeCache = new SparseIntArray();
        mPreLayoutSpanIndexCache = new SparseIntArray();
        mSpanSizeLookup = new DefaultSpanSizeLookup();
        mDecorInsets = new Rect();
        setSpanCount(i);
    }

    public GridLayoutManager(Context context, int i, int j, boolean flag) {
        super(context, j, flag);
        mPendingSpanCountChange = false;
        mSpanCount = -1;
        mPreLayoutSpanSizeCache = new SparseIntArray();
        mPreLayoutSpanIndexCache = new SparseIntArray();
        mSpanSizeLookup = new DefaultSpanSizeLookup();
        mDecorInsets = new Rect();
        setSpanCount(i);
    }

    public GridLayoutManager(Context context, AttributeSet attributeset, int i, int j) {
        super(context, attributeset, i, j);
        mPendingSpanCountChange = false;
        mSpanCount = -1;
        mPreLayoutSpanSizeCache = new SparseIntArray();
        mPreLayoutSpanIndexCache = new SparseIntArray();
        mSpanSizeLookup = new DefaultSpanSizeLookup();
        mDecorInsets = new Rect();
        setSpanCount(getProperties(context, attributeset, i, j).spanCount);
    }

    private void assignSpans(RecyclerView.Recycler recycler, RecyclerView.State state, int i, int j, boolean flag) {
        int k;
        int l;
        if (flag) {
            k = 1;
            boolean flag1 = false;
            j = i;
            i = ((flag1) ? 1 : 0);
        } else {
            j = -1;
            i--;
            k = -1;
        }
        l = 0;
        for (; i != j; i += k) {
            View view = mSet[i];
            LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
            layoutparams.mSpanSize = getSpanSize(recycler, state, getPosition(view));
            layoutparams.mSpanIndex = l;
            l += layoutparams.mSpanSize;
        }

    }

    private void cachePreLayoutSpanMapping() {
        int j = getChildCount();
        for (int i = 0; i < j; i++) {
            LayoutParams layoutparams = (LayoutParams)getChildAt(i).getLayoutParams();
            int k = layoutparams.getViewLayoutPosition();
            mPreLayoutSpanSizeCache.put(k, layoutparams.getSpanSize());
            mPreLayoutSpanIndexCache.put(k, layoutparams.getSpanIndex());
        }

    }

    private void calculateItemBorders(int i) {
        mCachedBorders = calculateItemBorders(mCachedBorders, mSpanCount, i);
    }

    static int[] calculateItemBorders(int ai[], int i, int j) {
        boolean flag;
        int ai1[];
label0:
        {
            flag = false;
            if (ai != null && ai.length == i + 1) {
                ai1 = ai;
                if (ai[ai.length - 1] == j)
                    break label0;
            }
            ai1 = new int[i + 1];
        }
        ai1[0] = 0;
        int j1 = j / i;
        int k1 = j % i;
        int l = 1;
        int k = 0;
        j = ((flag) ? 1 : 0);
        while (l <= i)  {
            j += k1;
            int i1;
            if (j > 0 && i - j < k1) {
                i1 = j1 + 1;
                j -= i;
            } else {
                i1 = j1;
            }
            k += i1;
            ai1[l] = k;
            l++;
        }
        return ai1;
    }

    private void clearPreLayoutSpanMappingCache() {
        mPreLayoutSpanSizeCache.clear();
        mPreLayoutSpanIndexCache.clear();
    }

    private void ensureAnchorIsInCorrectSpan(RecyclerView.Recycler recycler, RecyclerView.State state, LinearLayoutManager.AnchorInfo anchorinfo, int i) {
        boolean flag = true;
        if (i != 1)
            flag = false;
        i = getSpanIndex(recycler, state, anchorinfo.mPosition);
        if (flag) {
            for (; i > 0 && anchorinfo.mPosition > 0; i = getSpanIndex(recycler, state, anchorinfo.mPosition))
                anchorinfo.mPosition = anchorinfo.mPosition - 1;

        } else {
            int l = state.getItemCount();
            int j = anchorinfo.mPosition;
            do {
                if (j >= l - 1)
                    break;
                int k = getSpanIndex(recycler, state, j + 1);
                if (k <= i)
                    break;
                j++;
                i = k;
            } while (true);
            anchorinfo.mPosition = j;
        }
    }

    private void ensureViewSet() {
        if (mSet == null || mSet.length != mSpanCount)
            mSet = new View[mSpanCount];
    }

    private int getSpanGroupIndex(RecyclerView.Recycler recycler, RecyclerView.State state, int i) {
        if (!state.isPreLayout()) {
            i = mSpanSizeLookup.getSpanGroupIndex(i, mSpanCount);
        } else {
            int j = recycler.convertPreLayoutPositionToPostLayout(i);
            if (j == -1) {
                Log.w("GridLayoutManager", (new StringBuilder()).append("Cannot find span size for pre layout position. ").append(i).toString());
                i = 0;
            } else {
                i = mSpanSizeLookup.getSpanGroupIndex(j, mSpanCount);
            }
        }
        return i;
    }

    private int getSpanIndex(RecyclerView.Recycler recycler, RecyclerView.State state, int i) {
        if (state.isPreLayout()) goto _L2; else goto _L1
_L1:
        int j = mSpanSizeLookup.getCachedSpanIndex(i, mSpanCount);
_L4:
        return j;
_L2:
        int k = mPreLayoutSpanIndexCache.get(i, -1);
        j = k;
        if (k == -1) {
            j = recycler.convertPreLayoutPositionToPostLayout(i);
            if (j == -1) {
                Log.w("GridLayoutManager", (new StringBuilder()).append("Cannot find span size for pre layout position. It is not cached, not in the adapter. Pos:").append(i).toString());
                j = 0;
            } else {
                j = mSpanSizeLookup.getCachedSpanIndex(j, mSpanCount);
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    private int getSpanSize(RecyclerView.Recycler recycler, RecyclerView.State state, int i) {
        if (state.isPreLayout()) goto _L2; else goto _L1
_L1:
        int j = mSpanSizeLookup.getSpanSize(i);
_L4:
        return j;
_L2:
        int k = mPreLayoutSpanSizeCache.get(i, -1);
        j = k;
        if (k == -1) {
            j = recycler.convertPreLayoutPositionToPostLayout(i);
            if (j == -1) {
                Log.w("GridLayoutManager", (new StringBuilder()).append("Cannot find span size for pre layout position. It is not cached, not in the adapter. Pos:").append(i).toString());
                j = 1;
            } else {
                j = mSpanSizeLookup.getSpanSize(j);
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    private void guessMeasurement(float f, int i) {
        calculateItemBorders(Math.max(Math.round((float)mSpanCount * f), i));
    }

    private void measureChild(View view, int i, boolean flag) {
        LayoutParams layoutparams = (LayoutParams)view.getLayoutParams();
        Rect rect = layoutparams.mDecorInsets;
        int k = rect.top + rect.bottom + layoutparams.topMargin + layoutparams.bottomMargin;
        int l = rect.left;
        int j = rect.right;
        int i1 = layoutparams.leftMargin;
        j = layoutparams.rightMargin + (j + l + i1);
        l = getSpaceForSpanRange(layoutparams.mSpanIndex, layoutparams.mSpanSize);
        if (mOrientation == 1) {
            j = getChildMeasureSpec(l, i, j, layoutparams.width, false);
            i = getChildMeasureSpec(mOrientationHelper.getTotalSpace(), getHeightMode(), k, layoutparams.height, true);
        } else {
            i = getChildMeasureSpec(l, i, k, layoutparams.height, false);
            j = getChildMeasureSpec(mOrientationHelper.getTotalSpace(), getWidthMode(), j, layoutparams.width, true);
        }
        measureChildWithDecorationsAndMargin(view, j, i, flag);
    }

    private void measureChildWithDecorationsAndMargin(View view, int i, int j, boolean flag) {
        RecyclerView.LayoutParams layoutparams = (RecyclerView.LayoutParams)view.getLayoutParams();
        if (flag)
            flag = shouldReMeasureChild(view, i, j, layoutparams);
        else
            flag = shouldMeasureChild(view, i, j, layoutparams);
        if (flag)
            view.measure(i, j);
    }

    private void updateMeasurements() {
        int i;
        if (getOrientation() == 1)
            i = getWidth() - getPaddingRight() - getPaddingLeft();
        else
            i = getHeight() - getPaddingBottom() - getPaddingTop();
        calculateItemBorders(i);
    }

    public boolean checkLayoutParams(RecyclerView.LayoutParams layoutparams) {
        return layoutparams instanceof LayoutParams;
    }

    View findReferenceChild(RecyclerView.Recycler recycler, RecyclerView.State state, int i, int j, int k) {
        int i1;
        int j1;
        View view;
        View view1;
        View view2;
        view1 = null;
        ensureLayoutState();
        i1 = mOrientationHelper.getStartAfterPadding();
        j1 = mOrientationHelper.getEndAfterPadding();
        int l;
        int k1;
        if (j > i)
            l = 1;
        else
            l = -1;
        view = null;
        if (i == j)
            break; /* Loop/switch isn't completed */
        view2 = getChildAt(i);
        k1 = getPosition(view2);
        if (k1 < 0 || k1 >= k)
            break MISSING_BLOCK_LABEL_216;
        if (getSpanIndex(recycler, state, k1) != 0) {
            view2 = view1;
            view1 = view;
            view = view2;
        } else {
label0:
            {
                if (!((RecyclerView.LayoutParams)view2.getLayoutParams()).isItemRemoved())
                    break label0;
                if (view != null)
                    break MISSING_BLOCK_LABEL_216;
                view = view1;
                view1 = view2;
            }
        }
_L4:
        i += l;
        view2 = view1;
        view1 = view;
        view = view2;
        if (true) goto _L2; else goto _L1
_L2:
        break MISSING_BLOCK_LABEL_37;
        View view4;
        if (mOrientationHelper.getDecoratedStart(view2) < j1) {
            view4 = view2;
            if (mOrientationHelper.getDecoratedEnd(view2) >= i1)
                break MISSING_BLOCK_LABEL_206;
        }
        if (view1 != null)
            break MISSING_BLOCK_LABEL_216;
        view1 = view;
        view = view2;
        continue; /* Loop/switch isn't completed */
_L1:
        if (view1 == null)
            view1 = view;
        view4 = view1;
        return view4;
        View view3 = view;
        view = view1;
        view1 = view3;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public RecyclerView.LayoutParams generateDefaultLayoutParams() {
        LayoutParams layoutparams;
        if (mOrientation == 0)
            layoutparams = new LayoutParams(-2, -1);
        else
            layoutparams = new LayoutParams(-1, -2);
        return layoutparams;
    }

    public RecyclerView.LayoutParams generateLayoutParams(Context context, AttributeSet attributeset) {
        return new LayoutParams(context, attributeset);
    }

    public RecyclerView.LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams layoutparams) {
        if (layoutparams instanceof android.view.ViewGroup.MarginLayoutParams)
            layoutparams = new LayoutParams((android.view.ViewGroup.MarginLayoutParams)layoutparams);
        else
            layoutparams = new LayoutParams(layoutparams);
        return layoutparams;
    }

    public int getColumnCountForAccessibility(RecyclerView.Recycler recycler, RecyclerView.State state) {
        int i;
        if (mOrientation == 1)
            i = mSpanCount;
        else
        if (state.getItemCount() < 1)
            i = 0;
        else
            i = getSpanGroupIndex(recycler, state, state.getItemCount() - 1) + 1;
        return i;
    }

    public int getRowCountForAccessibility(RecyclerView.Recycler recycler, RecyclerView.State state) {
        int i;
        if (mOrientation == 0)
            i = mSpanCount;
        else
        if (state.getItemCount() < 1)
            i = 0;
        else
            i = getSpanGroupIndex(recycler, state, state.getItemCount() - 1) + 1;
        return i;
    }

    int getSpaceForSpanRange(int i, int j) {
        if (mOrientation == 1 && isLayoutRTL())
            i = mCachedBorders[mSpanCount - i] - mCachedBorders[mSpanCount - i - j];
        else
            i = mCachedBorders[i + j] - mCachedBorders[i];
        return i;
    }

    public int getSpanCount() {
        return mSpanCount;
    }

    public SpanSizeLookup getSpanSizeLookup() {
        return mSpanSizeLookup;
    }

    void layoutChunk(RecyclerView.Recycler recycler, RecyclerView.State state, LinearLayoutManager.LayoutState layoutstate, LinearLayoutManager.LayoutChunkResult layoutchunkresult) {
        int i;
        boolean flag;
        int j1;
        int k1;
        int l1;
        int i2;
        int k3;
        boolean flag2;
        k3 = mOrientationHelper.getModeInOther();
        int i3;
        if (k3 != 0x40000000)
            flag = true;
        else
            flag = false;
        if (getChildCount() > 0)
            k1 = mCachedBorders[mSpanCount];
        else
            k1 = 0;
        if (flag)
            updateMeasurements();
        if (layoutstate.mItemDirection == 1)
            flag2 = true;
        else
            flag2 = false;
        i2 = 0;
        i3 = 0;
        i = mSpanCount;
        l1 = i2;
        j1 = i3;
        if (!flag2) {
            i = getSpanIndex(recycler, state, layoutstate.mCurrentPosition) + getSpanSize(recycler, state, layoutstate.mCurrentPosition);
            j1 = i3;
            l1 = i2;
        }
_L6:
        if (l1 >= mSpanCount || !layoutstate.hasMore(state) || i <= 0) goto _L2; else goto _L1
_L1:
        i3 = layoutstate.mCurrentPosition;
        i2 = getSpanSize(recycler, state, i3);
        if (i2 > mSpanCount)
            throw new IllegalArgumentException((new StringBuilder()).append("Item at position ").append(i3).append(" requires ").append(i2).append(" spans but GridLayoutManager has only ").append(mSpanCount).append(" spans.").toString());
        i -= i2;
        if (i >= 0) goto _L3; else goto _L2
_L2:
        View view;
        if (l1 == 0) {
            layoutchunkresult.mFinished = true;
        } else {
            assignSpans(recycler, state, l1, j1, flag2);
            j1 = 0;
            float f = 0.0F;
            int j = 0;
            while (j1 < l1)  {
                recycler = mSet[j1];
                float f1;
                int j2;
                int j3;
                if (layoutstate.mScrapList == null) {
                    if (flag2)
                        addView(recycler);
                    else
                        addView(recycler, 0);
                } else
                if (flag2)
                    addDisappearingView(recycler);
                else
                    addDisappearingView(recycler, 0);
                calculateItemDecorationsForChild(recycler, mDecorInsets);
                measureChild(recycler, k3, false);
                j3 = mOrientationHelper.getDecoratedMeasurement(recycler);
                j2 = j;
                if (j3 > j)
                    j2 = j3;
                state = (LayoutParams)recycler.getLayoutParams();
                f1 = ((float)mOrientationHelper.getDecoratedMeasurementInOther(recycler) * 1.0F) / (float)((LayoutParams) (state)).mSpanSize;
                if (f1 > f)
                    f = f1;
                j1++;
                j = j2;
            }
            j1 = j;
            if (flag) {
                guessMeasurement(f, k1);
                j = 0;
                int k = 0;
                do {
                    j1 = j;
                    if (k >= l1)
                        break;
                    recycler = mSet[k];
                    measureChild(recycler, 0x40000000, true);
                    j1 = mOrientationHelper.getDecoratedMeasurement(recycler);
                    if (j1 > j)
                        j = j1;
                    k++;
                } while (true);
            }
            j = 0;
            while (j < l1)  {
                recycler = mSet[j];
                if (mOrientationHelper.getDecoratedMeasurement(recycler) != j1) {
                    LayoutParams layoutparams = (LayoutParams)recycler.getLayoutParams();
                    state = layoutparams.mDecorInsets;
                    k1 = ((Rect) (state)).top + ((Rect) (state)).bottom + layoutparams.topMargin + layoutparams.bottomMargin;
                    int l = ((Rect) (state)).left;
                    l = ((Rect) (state)).right + l + layoutparams.leftMargin + layoutparams.rightMargin;
                    int k2 = getSpaceForSpanRange(layoutparams.mSpanIndex, layoutparams.mSpanSize);
                    if (mOrientation == 1) {
                        l = getChildMeasureSpec(k2, 0x40000000, l, layoutparams.width, false);
                        k1 = android.view.View.MeasureSpec.makeMeasureSpec(j1 - k1, 0x40000000);
                    } else {
                        l = android.view.View.MeasureSpec.makeMeasureSpec(j1 - l, 0x40000000);
                        k1 = getChildMeasureSpec(k2, 0x40000000, k1, layoutparams.height, false);
                    }
                    measureChildWithDecorationsAndMargin(recycler, l, k1, true);
                }
                j++;
            }
            layoutchunkresult.mConsumed = j1;
            k1 = 0;
            int i1;
            int l2;
            boolean flag1;
            if (mOrientation == 1) {
                if (layoutstate.mLayoutDirection == -1) {
                    k1 = layoutstate.mOffset;
                    j = k1 - j1;
                    i1 = 0;
                    j1 = 0;
                } else {
                    j = layoutstate.mOffset;
                    k1 = j + j1;
                    i1 = 0;
                    j1 = 0;
                }
            } else
            if (layoutstate.mLayoutDirection == -1) {
                j = layoutstate.mOffset;
                i1 = j;
                j1 = j - j1;
                j = 0;
            } else {
                l2 = layoutstate.mOffset;
                i1 = j1 + l2;
                j = 0;
                j1 = l2;
            }
            l2 = k1;
            k1 = j1;
            flag1 = false;
            j1 = l2;
            l2 = j;
            j = k1;
            k1 = ((flag1) ? 1 : 0);
            while (k1 < l1)  {
                state = mSet[k1];
                recycler = (LayoutParams)state.getLayoutParams();
                if (mOrientation == 1) {
                    if (isLayoutRTL()) {
                        i1 = getPaddingLeft() + mCachedBorders[mSpanCount - ((LayoutParams) (recycler)).mSpanIndex];
                        j = i1 - mOrientationHelper.getDecoratedMeasurementInOther(state);
                    } else {
                        j = getPaddingLeft() + mCachedBorders[((LayoutParams) (recycler)).mSpanIndex];
                        i1 = j + mOrientationHelper.getDecoratedMeasurementInOther(state);
                    }
                } else {
                    l2 = getPaddingTop() + mCachedBorders[((LayoutParams) (recycler)).mSpanIndex];
                    j1 = l2 + mOrientationHelper.getDecoratedMeasurementInOther(state);
                }
                layoutDecoratedWithMargins(state, j, l2, i1, j1);
                if (recycler.isItemRemoved() || recycler.isItemChanged())
                    layoutchunkresult.mIgnoreConsumed = true;
                layoutchunkresult.mFocusable = layoutchunkresult.mFocusable | state.isFocusable();
                k1++;
            }
            Arrays.fill(mSet, null);
        }
        return;
_L3:
        if ((view = layoutstate.next(recycler)) == null) goto _L2; else goto _L4
_L4:
        j1 += i2;
        mSet[l1] = view;
        l1++;
        if (true) goto _L6; else goto _L5
_L5:
    }

    void onAnchorReady(RecyclerView.Recycler recycler, RecyclerView.State state, LinearLayoutManager.AnchorInfo anchorinfo, int i) {
        super.onAnchorReady(recycler, state, anchorinfo, i);
        updateMeasurements();
        if (state.getItemCount() > 0 && !state.isPreLayout())
            ensureAnchorIsInCorrectSpan(recycler, state, anchorinfo, i);
        ensureViewSet();
    }

    public View onFocusSearchFailed(View view, int i, RecyclerView.Recycler recycler, RecyclerView.State state) {
        View view1 = findContainingItemView(view);
        if (view1 != null) goto _L2; else goto _L1
_L1:
        recycler = null;
_L4:
        return recycler;
_L2:
        int j;
        byte byte1;
        boolean flag;
        int l1;
        int j2;
        int k2;
        LayoutParams layoutparams = (LayoutParams)view1.getLayoutParams();
        j2 = layoutparams.mSpanIndex;
        k2 = layoutparams.mSpanIndex + layoutparams.mSpanSize;
        if (super.onFocusSearchFailed(view, i, recycler, state) == null) {
            recycler = null;
            continue; /* Loop/switch isn't completed */
        }
        byte byte0;
        int k1;
        boolean flag3;
        if (convertFocusDirectionToLayoutDirection(i) == 1)
            flag3 = true;
        else
            flag3 = false;
        if (flag3 != mShouldReverseLayout)
            i = 1;
        else
            i = 0;
        if (i != 0) {
            i = getChildCount() - 1;
            byte1 = -1;
            k1 = -1;
        } else {
            k1 = getChildCount();
            i = 0;
            byte1 = 1;
        }
        if (mOrientation == 1 && isLayoutRTL())
            flag = true;
        else
            flag = false;
        view = null;
        byte0 = -1;
        j = 0;
        l1 = i;
        i = byte0;
_L7:
label0:
        {
            if (l1 != k1) {
                state = getChildAt(l1);
                if (state != view1)
                    break label0;
            }
            recycler = view;
        }
        if (true) goto _L4; else goto _L3
_L3:
        if (state.isFocusable()) goto _L6; else goto _L5
_L5:
        int k = j;
        j = i;
        i = k;
_L9:
        l1 += byte1;
        int l = j;
        j = i;
        i = l;
          goto _L7
_L6:
        int l2;
        int i3;
        LayoutParams layoutparams1;
        layoutparams1 = (LayoutParams)state.getLayoutParams();
        i3 = layoutparams1.mSpanIndex;
        l2 = layoutparams1.mSpanIndex + layoutparams1.mSpanSize;
        if (i3 != j2)
            break; /* Loop/switch isn't completed */
        recycler = state;
        if (l2 == k2) goto _L4; else goto _L8
_L8:
        boolean flag2 = false;
        int i1;
        if (view == null) {
            i1 = 1;
        } else {
            i1 = Math.max(i3, j2);
            int i2 = Math.min(l2, k2) - i1;
            if (i2 > j) {
                i1 = 1;
            } else {
                i1 = ((flag2) ? 1 : 0);
                if (i2 == j) {
                    boolean flag1;
                    if (i3 > i)
                        flag1 = true;
                    else
                        flag1 = false;
                    i1 = ((flag2) ? 1 : 0);
                    if (flag == flag1)
                        i1 = 1;
                }
            }
        }
        if (i1 != 0) {
            j = layoutparams1.mSpanIndex;
            i = Math.min(l2, k2) - Math.max(i3, j2);
            view = state;
        } else {
            int j1 = i;
            i = j;
            j = j1;
        }
          goto _L9
    }

    public void onInitializeAccessibilityNodeInfoForItem(RecyclerView.Recycler recycler, RecyclerView.State state, View view, AccessibilityNodeInfoCompat accessibilitynodeinfocompat) {
        android.view.ViewGroup.LayoutParams layoutparams = view.getLayoutParams();
        if (!(layoutparams instanceof LayoutParams)) {
            super.onInitializeAccessibilityNodeInfoForItem(view, accessibilitynodeinfocompat);
        } else {
            view = (LayoutParams)layoutparams;
            int i = getSpanGroupIndex(recycler, state, view.getViewLayoutPosition());
            if (mOrientation == 0) {
                int l = view.getSpanIndex();
                int j = view.getSpanSize();
                boolean flag;
                if (mSpanCount > 1 && view.getSpanSize() == mSpanCount)
                    flag = true;
                else
                    flag = false;
                accessibilitynodeinfocompat.setCollectionItemInfo(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.obtain(l, j, i, 1, flag, false));
            } else {
                int k = view.getSpanIndex();
                int i1 = view.getSpanSize();
                boolean flag1;
                if (mSpanCount > 1 && view.getSpanSize() == mSpanCount)
                    flag1 = true;
                else
                    flag1 = false;
                accessibilitynodeinfocompat.setCollectionItemInfo(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.obtain(i, 1, k, i1, flag1, false));
            }
        }
    }

    public void onItemsAdded(RecyclerView recyclerview, int i, int j) {
        mSpanSizeLookup.invalidateSpanIndexCache();
    }

    public void onItemsChanged(RecyclerView recyclerview) {
        mSpanSizeLookup.invalidateSpanIndexCache();
    }

    public void onItemsMoved(RecyclerView recyclerview, int i, int j, int k) {
        mSpanSizeLookup.invalidateSpanIndexCache();
    }

    public void onItemsRemoved(RecyclerView recyclerview, int i, int j) {
        mSpanSizeLookup.invalidateSpanIndexCache();
    }

    public void onItemsUpdated(RecyclerView recyclerview, int i, int j, Object obj) {
        mSpanSizeLookup.invalidateSpanIndexCache();
    }

    public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) {
        if (state.isPreLayout())
            cachePreLayoutSpanMapping();
        super.onLayoutChildren(recycler, state);
        clearPreLayoutSpanMappingCache();
    }

    public void onLayoutCompleted(RecyclerView.State state) {
        super.onLayoutCompleted(state);
        mPendingSpanCountChange = false;
    }

    public int scrollHorizontallyBy(int i, RecyclerView.Recycler recycler, RecyclerView.State state) {
        updateMeasurements();
        ensureViewSet();
        return super.scrollHorizontallyBy(i, recycler, state);
    }

    public int scrollVerticallyBy(int i, RecyclerView.Recycler recycler, RecyclerView.State state) {
        updateMeasurements();
        ensureViewSet();
        return super.scrollVerticallyBy(i, recycler, state);
    }

    public void setMeasuredDimension(Rect rect, int i, int j) {
        if (mCachedBorders == null)
            super.setMeasuredDimension(rect, i, j);
        int k = getPaddingLeft();
        int k1 = getPaddingRight() + k;
        int j1 = getPaddingTop() + getPaddingBottom();
        if (mOrientation == 1) {
            int l = chooseSize(j, j1 + rect.height(), getMinimumHeight());
            j = chooseSize(i, k1 + mCachedBorders[mCachedBorders.length - 1], getMinimumWidth());
            i = l;
        } else {
            int i1 = chooseSize(i, k1 + rect.width(), getMinimumWidth());
            i = chooseSize(j, j1 + mCachedBorders[mCachedBorders.length - 1], getMinimumHeight());
            j = i1;
        }
        setMeasuredDimension(j, i);
    }

    public void setSpanCount(int i) {
        if (i != mSpanCount) {
            mPendingSpanCountChange = true;
            if (i < 1)
                throw new IllegalArgumentException((new StringBuilder()).append("Span count should be at least 1. Provided ").append(i).toString());
            mSpanCount = i;
            mSpanSizeLookup.invalidateSpanIndexCache();
            requestLayout();
        }
    }

    public void setSpanSizeLookup(SpanSizeLookup spansizelookup) {
        mSpanSizeLookup = spansizelookup;
    }

    public void setStackFromEnd(boolean flag) {
        if (flag) {
            throw new UnsupportedOperationException("GridLayoutManager does not support stack from end. Consider using reverse layout");
        } else {
            super.setStackFromEnd(false);
            return;
        }
    }

    public boolean supportsPredictiveItemAnimations() {
        boolean flag;
        if (mPendingSavedState == null && !mPendingSpanCountChange)
            flag = true;
        else
            flag = false;
        return flag;
    }
}
