// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v7.widget;

import android.content.*;
import android.content.pm.*;
import android.database.DataSetObservable;
import android.os.AsyncTask;
import android.support.v4.os.AsyncTaskCompat;
import android.text.TextUtils;
import android.util.Log;
import android.util.Xml;
import java.io.*;
import java.math.BigDecimal;
import java.util.*;
import org.xmlpull.v1.*;

class ActivityChooserModel extends DataSetObservable {
    public static interface ActivityChooserModelClient {

        public abstract void setActivityChooserModel(ActivityChooserModel activitychoosermodel);
    }

    public final class ActivityResolveInfo
        implements Comparable {

        public final ResolveInfo resolveInfo;
        final ActivityChooserModel this$0;
        public float weight;

        public int compareTo(ActivityResolveInfo activityresolveinfo) {
            return Float.floatToIntBits(activityresolveinfo.weight) - Float.floatToIntBits(weight);
        }

        public volatile int compareTo(Object obj) {
            return compareTo((ActivityResolveInfo)obj);
        }

        public boolean equals(Object obj) {
            boolean flag = true;
            if (this != obj) goto _L2; else goto _L1
_L1:
            return flag;
_L2:
            if (obj == null)
                flag = false;
            else
            if (getClass() != obj.getClass()) {
                flag = false;
            } else {
                obj = (ActivityResolveInfo)obj;
                if (Float.floatToIntBits(weight) != Float.floatToIntBits(((ActivityResolveInfo) (obj)).weight))
                    flag = false;
            }
            if (true) goto _L1; else goto _L3
_L3:
        }

        public int hashCode() {
            return Float.floatToIntBits(weight) + 31;
        }

        public String toString() {
            StringBuilder stringbuilder = new StringBuilder();
            stringbuilder.append("[");
            stringbuilder.append("resolveInfo:").append(resolveInfo.toString());
            stringbuilder.append("; weight:").append(new BigDecimal(weight));
            stringbuilder.append("]");
            return stringbuilder.toString();
        }

        public ActivityResolveInfo(ResolveInfo resolveinfo) {
            this$0 = ActivityChooserModel.this;
            Object();
            resolveInfo = resolveinfo;
        }
    }

    public static interface ActivitySorter {

        public abstract void sort(Intent intent, List list, List list1);
    }

    private final class DefaultSorter
        implements ActivitySorter {

        private static final float WEIGHT_DECAY_COEFFICIENT = 0.95F;
        private final Map mPackageNameToActivityMap = new HashMap();
        final ActivityChooserModel this$0;

        public void sort(Intent intent, List list, List list1) {
            intent = mPackageNameToActivityMap;
            intent.clear();
            int k = list.size();
            for (int i = 0; i < k; i++) {
                ActivityResolveInfo activityresolveinfo = (ActivityResolveInfo)list.get(i);
                activityresolveinfo.weight = 0.0F;
                intent.put(new ComponentName(activityresolveinfo.resolveInfo.activityInfo.packageName, activityresolveinfo.resolveInfo.activityInfo.name), activityresolveinfo);
            }

            int j = list1.size();
            float f = 1.0F;
            for (j--; j >= 0; j--) {
                HistoricalRecord historicalrecord = (HistoricalRecord)list1.get(j);
                ActivityResolveInfo activityresolveinfo1 = (ActivityResolveInfo)intent.get(historicalrecord.activity);
                if (activityresolveinfo1 != null) {
                    float f1 = activityresolveinfo1.weight;
                    activityresolveinfo1.weight = historicalrecord.weight * f + f1;
                    f = 0.95F * f;
                }
            }

            Collections.sort(list);
        }

        DefaultSorter() {
            this$0 = ActivityChooserModel.this;
            Object();
        }
    }

    public static final class HistoricalRecord {

        public final ComponentName activity;
        public final long time;
        public final float weight;

        public boolean equals(Object obj) {
            boolean flag = true;
            if (this != obj) goto _L2; else goto _L1
_L1:
            return flag;
_L2:
            if (obj == null) {
                flag = false;
                continue; /* Loop/switch isn't completed */
            }
            if (getClass() != obj.getClass()) {
                flag = false;
                continue; /* Loop/switch isn't completed */
            }
            obj = (HistoricalRecord)obj;
            if (activity == null) {
                if (((HistoricalRecord) (obj)).activity != null) {
                    flag = false;
                    continue; /* Loop/switch isn't completed */
                }
            } else
            if (!activity.equals(((HistoricalRecord) (obj)).activity)) {
                flag = false;
                continue; /* Loop/switch isn't completed */
            }
            if (time != ((HistoricalRecord) (obj)).time)
                flag = false;
            else
            if (Float.floatToIntBits(weight) != Float.floatToIntBits(((HistoricalRecord) (obj)).weight))
                flag = false;
            if (true) goto _L1; else goto _L3
_L3:
        }

        public int hashCode() {
            int i;
            if (activity == null)
                i = 0;
            else
                i = activity.hashCode();
            return ((i + 31) * 31 + (int)(time ^ time >>> 32)) * 31 + Float.floatToIntBits(weight);
        }

        public String toString() {
            StringBuilder stringbuilder = new StringBuilder();
            stringbuilder.append("[");
            stringbuilder.append("; activity:").append(activity);
            stringbuilder.append("; time:").append(time);
            stringbuilder.append("; weight:").append(new BigDecimal(weight));
            stringbuilder.append("]");
            return stringbuilder.toString();
        }

        public HistoricalRecord(ComponentName componentname, long l, float f) {
            activity = componentname;
            time = l;
            weight = f;
        }

        public HistoricalRecord(String s, long l, float f) {
            HistoricalRecord(ComponentName.unflattenFromString(s), l, f);
        }
    }

    public static interface OnChooseActivityListener {

        public abstract boolean onChooseActivity(ActivityChooserModel activitychoosermodel, Intent intent);
    }

    private final class PersistHistoryAsyncTask extends AsyncTask {

        final ActivityChooserModel this$0;

        public volatile Object doInBackground(Object aobj[]) {
            return doInBackground(aobj);
        }

        public transient Void doInBackground(Object aobj[]) {
            int i;
            List list;
            Object obj1;
            i = 0;
            list = (List)aobj[0];
            obj1 = (String)aobj[1];
            aobj = mContext.openFileOutput(((String) (obj1)), 0);
            XmlSerializer xmlserializer = Xml.newSerializer();
            int j;
            xmlserializer.setOutput(((java.io.OutputStream) (aobj)), null);
            xmlserializer.startDocument("UTF-8", Boolean.valueOf(true));
            xmlserializer.startTag(null, "historical-records");
            j = list.size();
_L2:
            if (i >= j)
                break; /* Loop/switch isn't completed */
            obj1 = (HistoricalRecord)list.remove(0);
            xmlserializer.startTag(null, "historical-record");
            xmlserializer.attribute(null, "activity", ((HistoricalRecord) (obj1)).activity.flattenToString());
            xmlserializer.attribute(null, "time", String.valueOf(((HistoricalRecord) (obj1)).time));
            xmlserializer.attribute(null, "weight", String.valueOf(((HistoricalRecord) (obj1)).weight));
            xmlserializer.endTag(null, "historical-record");
            i++;
            if (true) goto _L2; else goto _L1
            aobj;
            Log.e(ActivityChooserModel.LOG_TAG, (new StringBuilder()).append("Error writing historical record file: ").append(((String) (obj1))).toString(), ((Throwable) (aobj)));
_L4:
            return null;
_L1:
            xmlserializer.endTag(null, "historical-records");
            xmlserializer.endDocument();
            mCanReadHistoricalData = true;
            if (aobj != null)
                try {
                    ((FileOutputStream) (aobj)).close();
                }
                // Misplaced declaration of an exception variable
                catch (Object aobj[]) { }
            continue; /* Loop/switch isn't completed */
            Object obj;
            obj;
            String s1 = ActivityChooserModel.LOG_TAG;
            StringBuilder stringbuilder1 = JVM INSTR new #127 <Class StringBuilder>;
            stringbuilder1.StringBuilder();
            Log.e(s1, stringbuilder1.append("Error writing historical record file: ").append(mHistoryFileName).toString(), ((Throwable) (obj)));
            mCanReadHistoricalData = true;
            if (aobj != null)
                try {
                    ((FileOutputStream) (aobj)).close();
                }
                // Misplaced declaration of an exception variable
                catch (Object aobj[]) { }
            continue; /* Loop/switch isn't completed */
            IllegalStateException illegalstateexception;
            illegalstateexception;
            String s = ActivityChooserModel.LOG_TAG;
            StringBuilder stringbuilder = JVM INSTR new #127 <Class StringBuilder>;
            stringbuilder.StringBuilder();
            Log.e(s, stringbuilder.append("Error writing historical record file: ").append(mHistoryFileName).toString(), illegalstateexception);
            mCanReadHistoricalData = true;
            if (aobj != null)
                try {
                    ((FileOutputStream) (aobj)).close();
                }
                // Misplaced declaration of an exception variable
                catch (Object aobj[]) { }
            continue; /* Loop/switch isn't completed */
            s;
            String s2 = ActivityChooserModel.LOG_TAG;
            StringBuilder stringbuilder2 = JVM INSTR new #127 <Class StringBuilder>;
            stringbuilder2.StringBuilder();
            Log.e(s2, stringbuilder2.append("Error writing historical record file: ").append(mHistoryFileName).toString(), s);
            mCanReadHistoricalData = true;
            if (aobj != null)
                try {
                    ((FileOutputStream) (aobj)).close();
                }
                // Misplaced declaration of an exception variable
                catch (Object aobj[]) { }
            if (true) goto _L4; else goto _L3
_L3:
            s;
            mCanReadHistoricalData = true;
            if (aobj != null)
                try {
                    ((FileOutputStream) (aobj)).close();
                }
                // Misplaced declaration of an exception variable
                catch (Object aobj[]) { }
            throw s;
        }

        PersistHistoryAsyncTask() {
            this$0 = ActivityChooserModel.this;
            AsyncTask();
        }
    }


    static final String ATTRIBUTE_ACTIVITY = "activity";
    static final String ATTRIBUTE_TIME = "time";
    static final String ATTRIBUTE_WEIGHT = "weight";
    static final boolean DEBUG = false;
    private static final int DEFAULT_ACTIVITY_INFLATION = 5;
    private static final float DEFAULT_HISTORICAL_RECORD_WEIGHT = 1F;
    public static final String DEFAULT_HISTORY_FILE_NAME = "activity_choser_model_history.xml";
    public static final int DEFAULT_HISTORY_MAX_LENGTH = 50;
    private static final String HISTORY_FILE_EXTENSION = ".xml";
    private static final int INVALID_INDEX = -1;
    static final String LOG_TAG = android/support/v7/widget/ActivityChooserModel.getSimpleName();
    static final String TAG_HISTORICAL_RECORD = "historical-record";
    static final String TAG_HISTORICAL_RECORDS = "historical-records";
    private static final Map sDataModelRegistry = new HashMap();
    private static final Object sRegistryLock = new Object();
    private final List mActivities = new ArrayList();
    private OnChooseActivityListener mActivityChoserModelPolicy;
    private ActivitySorter mActivitySorter;
    boolean mCanReadHistoricalData;
    final Context mContext;
    private final List mHistoricalRecords = new ArrayList();
    private boolean mHistoricalRecordsChanged;
    final String mHistoryFileName;
    private int mHistoryMaxSize;
    private final Object mInstanceLock = new Object();
    private Intent mIntent;
    private boolean mReadShareHistoryCalled;
    private boolean mReloadActivities;

    private ActivityChooserModel(Context context, String s) {
        mActivitySorter = new DefaultSorter();
        mHistoryMaxSize = 50;
        mCanReadHistoricalData = true;
        mReadShareHistoryCalled = false;
        mHistoricalRecordsChanged = true;
        mReloadActivities = false;
        mContext = context.getApplicationContext();
        if (!TextUtils.isEmpty(s) && !s.endsWith(".xml"))
            mHistoryFileName = (new StringBuilder()).append(s).append(".xml").toString();
        else
            mHistoryFileName = s;
    }

    private boolean addHistoricalRecord(HistoricalRecord historicalrecord) {
        boolean flag = mHistoricalRecords.add(historicalrecord);
        if (flag) {
            mHistoricalRecordsChanged = true;
            pruneExcessiveHistoricalRecordsIfNeeded();
            persistHistoricalDataIfNeeded();
            sortActivitiesIfNeeded();
            notifyChanged();
        }
        return flag;
    }

    private void ensureConsistentState() {
        boolean flag1 = loadActivitiesIfNeeded();
        boolean flag = readHistoricalDataIfNeeded();
        pruneExcessiveHistoricalRecordsIfNeeded();
        if (flag1 | flag) {
            sortActivitiesIfNeeded();
            notifyChanged();
        }
    }

    public static ActivityChooserModel get(Context context, String s) {
        Object obj = sRegistryLock;
        obj;
        JVM INSTR monitorenter ;
        ActivityChooserModel activitychoosermodel1 = (ActivityChooserModel)sDataModelRegistry.get(s);
        ActivityChooserModel activitychoosermodel;
        activitychoosermodel = activitychoosermodel1;
        if (activitychoosermodel1 != null)
            break MISSING_BLOCK_LABEL_48;
        activitychoosermodel = JVM INSTR new #2   <Class ActivityChooserModel>;
        activitychoosermodel.ActivityChooserModel(context, s);
        sDataModelRegistry.put(s, activitychoosermodel);
        obj;
        JVM INSTR monitorexit ;
        return activitychoosermodel;
        context;
        obj;
        JVM INSTR monitorexit ;
        throw context;
    }

    private boolean loadActivitiesIfNeeded() {
        boolean flag1 = false;
        boolean flag = flag1;
        if (mReloadActivities) {
            flag = flag1;
            if (mIntent != null) {
                mReloadActivities = false;
                mActivities.clear();
                List list = mContext.getPackageManager().queryIntentActivities(mIntent, 0);
                int j = list.size();
                for (int i = 0; i < j; i++) {
                    ResolveInfo resolveinfo = (ResolveInfo)list.get(i);
                    mActivities.add(new ActivityResolveInfo(resolveinfo));
                }

                flag = true;
            }
        }
        return flag;
    }

    private void persistHistoricalDataIfNeeded() {
        if (!mReadShareHistoryCalled)
            throw new IllegalStateException("No preceding call to #readHistoricalData");
        if (mHistoricalRecordsChanged) goto _L2; else goto _L1
_L1:
        return;
_L2:
        mHistoricalRecordsChanged = false;
        if (!TextUtils.isEmpty(mHistoryFileName))
            AsyncTaskCompat.executeParallel(new PersistHistoryAsyncTask(), new Object[] {
                new ArrayList(mHistoricalRecords), mHistoryFileName
            });
        if (true) goto _L1; else goto _L3
_L3:
    }

    private void pruneExcessiveHistoricalRecordsIfNeeded() {
        int j = mHistoricalRecords.size() - mHistoryMaxSize;
        if (j > 0) {
            mHistoricalRecordsChanged = true;
            int i = 0;
            while (i < j)  {
                HistoricalRecord historicalrecord = (HistoricalRecord)mHistoricalRecords.remove(0);
                i++;
            }
        }
    }

    private boolean readHistoricalDataIfNeeded() {
        boolean flag = true;
        if (mCanReadHistoricalData && mHistoricalRecordsChanged && !TextUtils.isEmpty(mHistoryFileName)) {
            mCanReadHistoricalData = false;
            mReadShareHistoryCalled = true;
            readHistoricalDataImpl();
        } else {
            flag = false;
        }
        return flag;
    }

    private void readHistoricalDataImpl() {
        Object obj = mContext.openFileInput(mHistoryFileName);
        XmlPullParser xmlpullparser;
        xmlpullparser = Xml.newPullParser();
        xmlpullparser.setInput(((java.io.InputStream) (obj)), "UTF-8");
        int i = 0;
_L1:
        if (i == 1 || i == 2)
            break MISSING_BLOCK_LABEL_53;
        i = xmlpullparser.next();
          goto _L1
        if (!"historical-records".equals(xmlpullparser.getName())) {
            XmlPullParserException xmlpullparserexception = JVM INSTR new #262 <Class XmlPullParserException>;
            xmlpullparserexception.XmlPullParserException("Share records file does not start with historical-records tag.");
            throw xmlpullparserexception;
        }
          goto _L2
        Object obj1;
        obj1;
        String s1 = LOG_TAG;
        StringBuilder stringbuilder1 = JVM INSTR new #157 <Class StringBuilder>;
        stringbuilder1.StringBuilder();
        Log.e(s1, stringbuilder1.append("Error reading historical recrod file: ").append(mHistoryFileName).toString(), ((Throwable) (obj1)));
        if (obj == null)
            break MISSING_BLOCK_LABEL_137;
        ((FileInputStream) (obj)).close();
_L6:
        return;
_L2:
        Object obj2;
        obj2 = mHistoricalRecords;
        ((List) (obj2)).clear();
_L4:
        i = xmlpullparser.next();
        if (i == 1) {
            if (obj != null)
                try {
                    ((FileInputStream) (obj)).close();
                }
                // Misplaced declaration of an exception variable
                catch (Object obj) { }
            continue; /* Loop/switch isn't completed */
        }
        if (i == 3 || i == 4) goto _L4; else goto _L3
_L3:
        if (!"historical-record".equals(xmlpullparser.getName())) {
            XmlPullParserException xmlpullparserexception1 = JVM INSTR new #262 <Class XmlPullParserException>;
            xmlpullparserexception1.XmlPullParserException("Share records file not well-formed.");
            throw xmlpullparserexception1;
        }
        break MISSING_BLOCK_LABEL_284;
        IOException ioexception2;
        ioexception2;
        obj2 = LOG_TAG;
        StringBuilder stringbuilder = JVM INSTR new #157 <Class StringBuilder>;
        stringbuilder.StringBuilder();
        Log.e(((String) (obj2)), stringbuilder.append("Error reading historical recrod file: ").append(mHistoryFileName).toString(), ioexception2);
        if (obj != null)
            try {
                ((FileInputStream) (obj)).close();
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) { }
        continue; /* Loop/switch isn't completed */
        String s = xmlpullparser.getAttributeValue(null, "activity");
        long l = Long.parseLong(xmlpullparser.getAttributeValue(null, "time"));
        float f = Float.parseFloat(xmlpullparser.getAttributeValue(null, "weight"));
        HistoricalRecord historicalrecord = JVM INSTR new #18  <Class ActivityChooserModel$HistoricalRecord>;
        historicalrecord.HistoricalRecord(s, l, f);
        ((List) (obj2)).add(historicalrecord);
          goto _L4
        s;
        IOException ioexception;
        if (obj != null)
            try {
                ((FileInputStream) (obj)).close();
            }
            catch (IOException ioexception1) { }
        throw s;
        ioexception;
        continue; /* Loop/switch isn't completed */
        FileNotFoundException filenotfoundexception;
        filenotfoundexception;
        if (true) goto _L6; else goto _L5
_L5:
    }

    private boolean sortActivitiesIfNeeded() {
        boolean flag;
        if (mActivitySorter != null && mIntent != null && !mActivities.isEmpty() && !mHistoricalRecords.isEmpty()) {
            mActivitySorter.sort(mIntent, mActivities, Collections.unmodifiableList(mHistoricalRecords));
            flag = true;
        } else {
            flag = false;
        }
        return flag;
    }

    public Intent chooseActivity(int i) {
        Object obj1 = mInstanceLock;
        obj1;
        JVM INSTR monitorenter ;
        if (mIntent != null) goto _L2; else goto _L1
_L1:
        Object obj = null;
_L4:
        return ((Intent) (obj));
_L2:
        ComponentName componentname;
        ensureConsistentState();
        obj = (ActivityResolveInfo)mActivities.get(i);
        componentname = JVM INSTR new #346 <Class ComponentName>;
        componentname.ComponentName(((ActivityResolveInfo) (obj)).resolveInfo.activityInfo.packageName, ((ActivityResolveInfo) (obj)).resolveInfo.activityInfo.name);
        obj = JVM INSTR new #367 <Class Intent>;
        ((Intent) (obj)).Intent(mIntent);
        ((Intent) (obj)).setComponent(componentname);
        if (mActivityChoserModelPolicy == null)
            break MISSING_BLOCK_LABEL_127;
        Intent intent = JVM INSTR new #367 <Class Intent>;
        intent.Intent(((Intent) (obj)));
        if (!mActivityChoserModelPolicy.onChooseActivity(this, intent))
            break MISSING_BLOCK_LABEL_127;
        obj1;
        JVM INSTR monitorexit ;
        obj = null;
        continue; /* Loop/switch isn't completed */
        HistoricalRecord historicalrecord = JVM INSTR new #18  <Class ActivityChooserModel$HistoricalRecord>;
        historicalrecord.HistoricalRecord(componentname, System.currentTimeMillis(), 1.0F);
        addHistoricalRecord(historicalrecord);
        obj1;
        JVM INSTR monitorexit ;
        if (true) goto _L4; else goto _L3
_L3:
        Exception exception;
        exception;
        obj1;
        JVM INSTR monitorexit ;
        throw exception;
    }

    public ResolveInfo getActivity(int i) {
        ResolveInfo resolveinfo;
        synchronized (mInstanceLock) {
            ensureConsistentState();
            resolveinfo = ((ActivityResolveInfo)mActivities.get(i)).resolveInfo;
        }
        return resolveinfo;
        exception;
        obj;
        JVM INSTR monitorexit ;
        throw exception;
    }

    public int getActivityCount() {
        int i;
        synchronized (mInstanceLock) {
            ensureConsistentState();
            i = mActivities.size();
        }
        return i;
        exception;
        obj;
        JVM INSTR monitorexit ;
        throw exception;
    }

    public int getActivityIndex(ResolveInfo resolveinfo) {
        Object obj = mInstanceLock;
        obj;
        JVM INSTR monitorenter ;
        int j;
        List list;
        ensureConsistentState();
        list = mActivities;
        j = list.size();
        int i = 0;
_L8:
        if (i >= j) goto _L2; else goto _L1
_L1:
        if (((ActivityResolveInfo)list.get(i)).resolveInfo != resolveinfo) goto _L4; else goto _L3
_L3:
        obj;
        JVM INSTR monitorexit ;
_L6:
        return i;
_L4:
        i++;
        continue; /* Loop/switch isn't completed */
_L2:
        i = -1;
        obj;
        JVM INSTR monitorexit ;
        if (true) goto _L6; else goto _L5
_L5:
        resolveinfo;
        obj;
        JVM INSTR monitorexit ;
        throw resolveinfo;
        if (true) goto _L8; else goto _L7
_L7:
    }

    public ResolveInfo getDefaultActivity() {
        Object obj = mInstanceLock;
        obj;
        JVM INSTR monitorenter ;
        ensureConsistentState();
        if (mActivities.isEmpty()) goto _L2; else goto _L1
_L1:
        ResolveInfo resolveinfo = ((ActivityResolveInfo)mActivities.get(0)).resolveInfo;
_L4:
        return resolveinfo;
_L2:
        obj;
        JVM INSTR monitorexit ;
        resolveinfo = null;
        if (true) goto _L4; else goto _L3
_L3:
        Exception exception;
        exception;
        obj;
        JVM INSTR monitorexit ;
        throw exception;
    }

    public int getHistoryMaxSize() {
        int i;
        synchronized (mInstanceLock) {
            i = mHistoryMaxSize;
        }
        return i;
        exception;
        obj;
        JVM INSTR monitorexit ;
        throw exception;
    }

    public int getHistorySize() {
        int i;
        synchronized (mInstanceLock) {
            ensureConsistentState();
            i = mHistoricalRecords.size();
        }
        return i;
        exception;
        obj;
        JVM INSTR monitorexit ;
        throw exception;
    }

    public Intent getIntent() {
        Intent intent;
        synchronized (mInstanceLock) {
            intent = mIntent;
        }
        return intent;
        exception;
        obj;
        JVM INSTR monitorexit ;
        throw exception;
    }

    public void setActivitySorter(ActivitySorter activitysorter) {
        Object obj = mInstanceLock;
        obj;
        JVM INSTR monitorenter ;
        if (mActivitySorter != activitysorter) goto _L2; else goto _L1
_L1:
        return;
_L2:
        mActivitySorter = activitysorter;
        if (sortActivitiesIfNeeded())
            notifyChanged();
        if (true) goto _L1; else goto _L3
_L3:
        activitysorter;
        obj;
        JVM INSTR monitorexit ;
        throw activitysorter;
    }

    public void setDefaultActivity(int i) {
        Object obj = mInstanceLock;
        obj;
        JVM INSTR monitorenter ;
        ActivityResolveInfo activityresolveinfo;
        Object obj1;
        ensureConsistentState();
        obj1 = (ActivityResolveInfo)mActivities.get(i);
        activityresolveinfo = (ActivityResolveInfo)mActivities.get(0);
        if (activityresolveinfo == null)
            break MISSING_BLOCK_LABEL_120;
        float f = (activityresolveinfo.weight - ((ActivityResolveInfo) (obj1)).weight) + 5F;
_L1:
        ComponentName componentname = JVM INSTR new #346 <Class ComponentName>;
        componentname.ComponentName(((ActivityResolveInfo) (obj1)).resolveInfo.activityInfo.packageName, ((ActivityResolveInfo) (obj1)).resolveInfo.activityInfo.name);
        obj1 = JVM INSTR new #18  <Class ActivityChooserModel$HistoricalRecord>;
        ((HistoricalRecord) (obj1)).HistoricalRecord(componentname, System.currentTimeMillis(), f);
        addHistoricalRecord(((HistoricalRecord) (obj1)));
        obj;
        JVM INSTR monitorexit ;
        return;
        f = 1.0F;
          goto _L1
        Exception exception;
        exception;
        obj;
        JVM INSTR monitorexit ;
        throw exception;
    }

    public void setHistoryMaxSize(int i) {
        Object obj = mInstanceLock;
        obj;
        JVM INSTR monitorenter ;
        if (mHistoryMaxSize != i) goto _L2; else goto _L1
_L1:
        return;
_L2:
        mHistoryMaxSize = i;
        pruneExcessiveHistoricalRecordsIfNeeded();
        if (sortActivitiesIfNeeded())
            notifyChanged();
        if (true) goto _L1; else goto _L3
_L3:
        Exception exception;
        exception;
        obj;
        JVM INSTR monitorexit ;
        throw exception;
    }

    public void setIntent(Intent intent) {
        Object obj = mInstanceLock;
        obj;
        JVM INSTR monitorenter ;
        if (mIntent != intent) goto _L2; else goto _L1
_L1:
        return;
_L2:
        mIntent = intent;
        mReloadActivities = true;
        ensureConsistentState();
        if (true) goto _L1; else goto _L3
_L3:
        intent;
        obj;
        JVM INSTR monitorexit ;
        throw intent;
    }

    public void setOnChooseActivityListener(OnChooseActivityListener onchooseactivitylistener) {
        synchronized (mInstanceLock) {
            mActivityChoserModelPolicy = onchooseactivitylistener;
        }
        return;
        onchooseactivitylistener;
        obj;
        JVM INSTR monitorexit ;
        throw onchooseactivitylistener;
    }

}
