// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v7.widget;

import android.graphics.Rect;
import android.view.View;

public abstract class OrientationHelper {

    public static final int HORIZONTAL = 0;
    private static final int INVALID_SIZE = 0x80000000;
    public static final int VERTICAL = 1;
    private int mLastTotalSpace;
    protected final RecyclerView.LayoutManager mLayoutManager;
    final Rect mTmpRect;

    private OrientationHelper(RecyclerView.LayoutManager layoutmanager) {
        mLastTotalSpace = 0x80000000;
        mTmpRect = new Rect();
        mLayoutManager = layoutmanager;
    }


    public static OrientationHelper createHorizontalHelper(RecyclerView.LayoutManager layoutmanager) {
        return new OrientationHelper(layoutmanager) {

            public int getDecoratedEnd(View view) {
                RecyclerView.LayoutParams layoutparams = (RecyclerView.LayoutParams)view.getLayoutParams();
                int i = mLayoutManager.getDecoratedRight(view);
                return layoutparams.rightMargin + i;
            }

            public int getDecoratedMeasurement(View view) {
                RecyclerView.LayoutParams layoutparams = (RecyclerView.LayoutParams)view.getLayoutParams();
                int j = mLayoutManager.getDecoratedMeasuredWidth(view);
                int i = layoutparams.leftMargin;
                return layoutparams.rightMargin + (j + i);
            }

            public int getDecoratedMeasurementInOther(View view) {
                RecyclerView.LayoutParams layoutparams = (RecyclerView.LayoutParams)view.getLayoutParams();
                int i = mLayoutManager.getDecoratedMeasuredHeight(view);
                int j = layoutparams.topMargin;
                return layoutparams.bottomMargin + (i + j);
            }

            public int getDecoratedStart(View view) {
                RecyclerView.LayoutParams layoutparams = (RecyclerView.LayoutParams)view.getLayoutParams();
                return mLayoutManager.getDecoratedLeft(view) - layoutparams.leftMargin;
            }

            public int getEnd() {
                return mLayoutManager.getWidth();
            }

            public int getEndAfterPadding() {
                return mLayoutManager.getWidth() - mLayoutManager.getPaddingRight();
            }

            public int getEndPadding() {
                return mLayoutManager.getPaddingRight();
            }

            public int getMode() {
                return mLayoutManager.getWidthMode();
            }

            public int getModeInOther() {
                return mLayoutManager.getHeightMode();
            }

            public int getStartAfterPadding() {
                return mLayoutManager.getPaddingLeft();
            }

            public int getTotalSpace() {
                return mLayoutManager.getWidth() - mLayoutManager.getPaddingLeft() - mLayoutManager.getPaddingRight();
            }

            public int getTransformedEndWithDecoration(View view) {
                mLayoutManager.getTransformedBoundingBox(view, true, mTmpRect);
                return mTmpRect.right;
            }

            public int getTransformedStartWithDecoration(View view) {
                mLayoutManager.getTransformedBoundingBox(view, true, mTmpRect);
                return mTmpRect.left;
            }

            public void offsetChild(View view, int i) {
                view.offsetLeftAndRight(i);
            }

            public void offsetChildren(int i) {
                mLayoutManager.offsetChildrenHorizontal(i);
            }

        }
;
    }

    public static OrientationHelper createOrientationHelper(RecyclerView.LayoutManager layoutmanager, int i) {
        i;
        JVM INSTR tableswitch 0 1: default 24
    //                   0 34
    //                   1 41;
           goto _L1 _L2 _L3
_L1:
        throw new IllegalArgumentException("invalid orientation");
_L2:
        layoutmanager = createHorizontalHelper(layoutmanager);
_L5:
        return layoutmanager;
_L3:
        layoutmanager = createVerticalHelper(layoutmanager);
        if (true) goto _L5; else goto _L4
_L4:
    }

    public static OrientationHelper createVerticalHelper(RecyclerView.LayoutManager layoutmanager) {
        return new OrientationHelper(layoutmanager) {

            public int getDecoratedEnd(View view) {
                RecyclerView.LayoutParams layoutparams = (RecyclerView.LayoutParams)view.getLayoutParams();
                int i = mLayoutManager.getDecoratedBottom(view);
                return layoutparams.bottomMargin + i;
            }

            public int getDecoratedMeasurement(View view) {
                RecyclerView.LayoutParams layoutparams = (RecyclerView.LayoutParams)view.getLayoutParams();
                int j = mLayoutManager.getDecoratedMeasuredHeight(view);
                int i = layoutparams.topMargin;
                return layoutparams.bottomMargin + (j + i);
            }

            public int getDecoratedMeasurementInOther(View view) {
                RecyclerView.LayoutParams layoutparams = (RecyclerView.LayoutParams)view.getLayoutParams();
                int i = mLayoutManager.getDecoratedMeasuredWidth(view);
                int j = layoutparams.leftMargin;
                return layoutparams.rightMargin + (i + j);
            }

            public int getDecoratedStart(View view) {
                RecyclerView.LayoutParams layoutparams = (RecyclerView.LayoutParams)view.getLayoutParams();
                return mLayoutManager.getDecoratedTop(view) - layoutparams.topMargin;
            }

            public int getEnd() {
                return mLayoutManager.getHeight();
            }

            public int getEndAfterPadding() {
                return mLayoutManager.getHeight() - mLayoutManager.getPaddingBottom();
            }

            public int getEndPadding() {
                return mLayoutManager.getPaddingBottom();
            }

            public int getMode() {
                return mLayoutManager.getHeightMode();
            }

            public int getModeInOther() {
                return mLayoutManager.getWidthMode();
            }

            public int getStartAfterPadding() {
                return mLayoutManager.getPaddingTop();
            }

            public int getTotalSpace() {
                return mLayoutManager.getHeight() - mLayoutManager.getPaddingTop() - mLayoutManager.getPaddingBottom();
            }

            public int getTransformedEndWithDecoration(View view) {
                mLayoutManager.getTransformedBoundingBox(view, true, mTmpRect);
                return mTmpRect.bottom;
            }

            public int getTransformedStartWithDecoration(View view) {
                mLayoutManager.getTransformedBoundingBox(view, true, mTmpRect);
                return mTmpRect.top;
            }

            public void offsetChild(View view, int i) {
                view.offsetTopAndBottom(i);
            }

            public void offsetChildren(int i) {
                mLayoutManager.offsetChildrenVertical(i);
            }

        }
;
    }

    public abstract int getDecoratedEnd(View view);

    public abstract int getDecoratedMeasurement(View view);

    public abstract int getDecoratedMeasurementInOther(View view);

    public abstract int getDecoratedStart(View view);

    public abstract int getEnd();

    public abstract int getEndAfterPadding();

    public abstract int getEndPadding();

    public abstract int getMode();

    public abstract int getModeInOther();

    public abstract int getStartAfterPadding();

    public abstract int getTotalSpace();

    public int getTotalSpaceChange() {
        int i;
        if (0x80000000 == mLastTotalSpace)
            i = 0;
        else
            i = getTotalSpace() - mLastTotalSpace;
        return i;
    }

    public abstract int getTransformedEndWithDecoration(View view);

    public abstract int getTransformedStartWithDecoration(View view);

    public abstract void offsetChild(View view, int i);

    public abstract void offsetChildren(int i);

    public void onLayoutComplete() {
        mLastTotalSpace = getTotalSpace();
    }
}
