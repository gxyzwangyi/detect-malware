// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v7.app;

import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.res.*;
import android.graphics.Rect;
import android.media.AudioManager;
import android.os.*;
import android.support.v4.app.NavUtils;
import android.support.v4.os.ParcelableCompat;
import android.support.v4.os.ParcelableCompatCreatorCallbacks;
import android.support.v4.view.*;
import android.support.v4.widget.PopupWindowCompat;
import android.support.v7.content.res.AppCompatResources;
import android.support.v7.view.*;
import android.support.v7.view.menu.*;
import android.support.v7.widget.*;
import android.text.TextUtils;
import android.util.*;
import android.view.*;
import android.widget.*;

// Referenced classes of package android.support.v7.app:
//            AppCompatDelegateImplBase, ToolbarActionBar, AppCompatViewInflater, WindowDecorActionBar, 
//            ActionBar, AppCompatCallback

class AppCompatDelegateImplV9 extends AppCompatDelegateImplBase
    implements LayoutInflaterFactory, android.support.v7.view.menu.MenuBuilder.Callback {
    private final class ActionMenuPresenterCallback
        implements android.support.v7.view.menu.MenuPresenter.Callback {

        final AppCompatDelegateImplV9 this$0;

        public void onCloseMenu(MenuBuilder menubuilder, boolean flag) {
            checkCloseActionMenu(menubuilder);
        }

        public boolean onOpenSubMenu(MenuBuilder menubuilder) {
            android.view.Window.Callback callback = getWindowCallback();
            if (callback != null)
                callback.onMenuOpened(108, menubuilder);
            return true;
        }

        ActionMenuPresenterCallback() {
            this$0 = AppCompatDelegateImplV9.this;
            super();
        }
    }

    class ActionModeCallbackWrapperV9
        implements android.support.v7.view.ActionMode.Callback {

        private android.support.v7.view.ActionMode.Callback mWrapped;
        final AppCompatDelegateImplV9 this$0;

        public boolean onActionItemClicked(ActionMode actionmode, MenuItem menuitem) {
            return mWrapped.onActionItemClicked(actionmode, menuitem);
        }

        public boolean onCreateActionMode(ActionMode actionmode, Menu menu) {
            return mWrapped.onCreateActionMode(actionmode, menu);
        }

        public void onDestroyActionMode(ActionMode actionmode) {
            mWrapped.onDestroyActionMode(actionmode);
            if (mActionModePopup != null)
                mWindow.getDecorView().removeCallbacks(mShowActionModePopup);
            if (mActionModeView != null) {
                endOnGoingFadeAnimation();
                mFadeAnim = ViewCompat.animate(mActionModeView).alpha(0.0F);
                mFadeAnim.setListener(new ViewPropertyAnimatorListenerAdapter() {

                    final ActionModeCallbackWrapperV9 this$1;

                    public void onAnimationEnd(View view) {
                        mActionModeView.setVisibility(8);
                        if (mActionModePopup == null) goto _L2; else goto _L1
_L1:
                        mActionModePopup.dismiss();
_L4:
                        mActionModeView.removeAllViews();
                        mFadeAnim.setListener(null);
                        mFadeAnim = null;
                        return;
_L2:
                        if (mActionModeView.getParent() instanceof View)
                            ViewCompat.requestApplyInsets((View)mActionModeView.getParent());
                        if (true) goto _L4; else goto _L3
_L3:
                    }

             {
                this$1 = ActionModeCallbackWrapperV9.this;
                super();
            }
                }
);
            }
            if (mAppCompatCallback != null)
                mAppCompatCallback.onSupportActionModeFinished(mActionMode);
            mActionMode = null;
        }

        public boolean onPrepareActionMode(ActionMode actionmode, Menu menu) {
            return mWrapped.onPrepareActionMode(actionmode, menu);
        }

        public ActionModeCallbackWrapperV9(android.support.v7.view.ActionMode.Callback callback) {
            this$0 = AppCompatDelegateImplV9.this;
            super();
            mWrapped = callback;
        }
    }

    private class ListMenuDecorView extends ContentFrameLayout {

        final AppCompatDelegateImplV9 this$0;

        private boolean isOutOfBounds(int i, int j) {
            boolean flag;
            if (i < -5 || j < -5 || i > getWidth() + 5 || j > getHeight() + 5)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public boolean dispatchKeyEvent(KeyEvent keyevent) {
            boolean flag;
            if (AppCompatDelegateImplV9.this.dispatchKeyEvent(keyevent) || super.dispatchKeyEvent(keyevent))
                flag = true;
            else
                flag = false;
            return flag;
        }

        public boolean onInterceptTouchEvent(MotionEvent motionevent) {
            boolean flag;
            if (motionevent.getAction() == 0 && isOutOfBounds((int)motionevent.getX(), (int)motionevent.getY())) {
                closePanel(0);
                flag = true;
            } else {
                flag = super.onInterceptTouchEvent(motionevent);
            }
            return flag;
        }

        public void setBackgroundResource(int i) {
            setBackgroundDrawable(AppCompatResources.getDrawable(getContext(), i));
        }

        public ListMenuDecorView(Context context) {
            this$0 = AppCompatDelegateImplV9.this;
            super(context);
        }
    }

    protected static final class PanelFeatureState {

        int background;
        View createdPanelView;
        ViewGroup decorView;
        int featureId;
        Bundle frozenActionViewState;
        Bundle frozenMenuState;
        int gravity;
        boolean isHandled;
        boolean isOpen;
        boolean isPrepared;
        ListMenuPresenter listMenuPresenter;
        Context listPresenterContext;
        MenuBuilder menu;
        public boolean qwertyMode;
        boolean refreshDecorView;
        boolean refreshMenuContent;
        View shownPanelView;
        boolean wasLastOpen;
        int windowAnimations;
        int x;
        int y;

        void applyFrozenState() {
            if (menu != null && frozenMenuState != null) {
                menu.restorePresenterStates(frozenMenuState);
                frozenMenuState = null;
            }
        }

        public void clearMenuPresenters() {
            if (menu != null)
                menu.removeMenuPresenter(listMenuPresenter);
            listMenuPresenter = null;
        }

        MenuView getListMenuView(android.support.v7.view.menu.MenuPresenter.Callback callback) {
            if (menu == null) {
                callback = null;
            } else {
                if (listMenuPresenter == null) {
                    listMenuPresenter = new ListMenuPresenter(listPresenterContext, android.support.v7.appcompat.R.layout.abc_list_menu_item_layout);
                    listMenuPresenter.setCallback(callback);
                    menu.addMenuPresenter(listMenuPresenter);
                }
                callback = listMenuPresenter.getMenuView(decorView);
            }
            return callback;
        }

        public boolean hasPanelItems() {
            boolean flag1 = true;
            if (shownPanelView != null) goto _L2; else goto _L1
_L1:
            boolean flag = false;
_L4:
            return flag;
_L2:
            flag = flag1;
            if (createdPanelView == null) {
                flag = flag1;
                if (listMenuPresenter.getAdapter().getCount() <= 0)
                    flag = false;
            }
            if (true) goto _L4; else goto _L3
_L3:
        }

        void onRestoreInstanceState(Parcelable parcelable) {
            parcelable = (SavedState)parcelable;
            featureId = ((SavedState) (parcelable)).featureId;
            wasLastOpen = ((SavedState) (parcelable)).isOpen;
            frozenMenuState = ((SavedState) (parcelable)).menuState;
            shownPanelView = null;
            decorView = null;
        }

        Parcelable onSaveInstanceState() {
            SavedState savedstate = new SavedState();
            savedstate.featureId = featureId;
            savedstate.isOpen = isOpen;
            if (menu != null) {
                savedstate.menuState = new Bundle();
                menu.savePresenterStates(savedstate.menuState);
            }
            return savedstate;
        }

        void setMenu(MenuBuilder menubuilder) {
            if (menubuilder != menu) goto _L2; else goto _L1
_L1:
            return;
_L2:
            if (menu != null)
                menu.removeMenuPresenter(listMenuPresenter);
            menu = menubuilder;
            if (menubuilder != null && listMenuPresenter != null)
                menubuilder.addMenuPresenter(listMenuPresenter);
            if (true) goto _L1; else goto _L3
_L3:
        }

        void setStyle(Context context) {
            TypedValue typedvalue = new TypedValue();
            android.content.res.Resources.Theme theme = context.getResources().newTheme();
            theme.setTo(context.getTheme());
            theme.resolveAttribute(android.support.v7.appcompat.R.attr.actionBarPopupTheme, typedvalue, true);
            if (typedvalue.resourceId != 0)
                theme.applyStyle(typedvalue.resourceId, true);
            theme.resolveAttribute(android.support.v7.appcompat.R.attr.panelMenuListTheme, typedvalue, true);
            if (typedvalue.resourceId != 0)
                theme.applyStyle(typedvalue.resourceId, true);
            else
                theme.applyStyle(android.support.v7.appcompat.R.style.Theme_AppCompat_CompactMenu, true);
            context = new ContextThemeWrapper(context, 0);
            context.getTheme().setTo(theme);
            listPresenterContext = context;
            context = context.obtainStyledAttributes(android.support.v7.appcompat.R.styleable.AppCompatTheme);
            background = context.getResourceId(android.support.v7.appcompat.R.styleable.AppCompatTheme_panelBackground, 0);
            windowAnimations = context.getResourceId(android.support.v7.appcompat.R.styleable.AppCompatTheme_android_windowAnimationStyle, 0);
            context.recycle();
        }

        PanelFeatureState(int i) {
            featureId = i;
            refreshDecorView = false;
        }
    }

    private static class PanelFeatureState.SavedState
        implements Parcelable {

        public static final android.os.Parcelable.Creator CREATOR = ParcelableCompat.newCreator(new ParcelableCompatCreatorCallbacks() {

            public PanelFeatureState.SavedState createFromParcel(Parcel parcel, ClassLoader classloader) {
                return PanelFeatureState.SavedState.readFromParcel(parcel, classloader);
            }

            public volatile Object createFromParcel(Parcel parcel, ClassLoader classloader) {
                return createFromParcel(parcel, classloader);
            }

            public PanelFeatureState.SavedState[] newArray(int i) {
                return new PanelFeatureState.SavedState[i];
            }

            public volatile Object[] newArray(int i) {
                return newArray(i);
            }

        }
);
        int featureId;
        boolean isOpen;
        Bundle menuState;

        static PanelFeatureState.SavedState readFromParcel(Parcel parcel, ClassLoader classloader) {
            boolean flag = true;
            PanelFeatureState.SavedState savedstate = new PanelFeatureState.SavedState();
            savedstate.featureId = parcel.readInt();
            if (parcel.readInt() != 1)
                flag = false;
            savedstate.isOpen = flag;
            if (savedstate.isOpen)
                savedstate.menuState = parcel.readBundle(classloader);
            return savedstate;
        }

        public int describeContents() {
            return 0;
        }

        public void writeToParcel(Parcel parcel, int i) {
            parcel.writeInt(featureId);
            if (isOpen)
                i = 1;
            else
                i = 0;
            parcel.writeInt(i);
            if (isOpen)
                parcel.writeBundle(menuState);
        }


        PanelFeatureState.SavedState() {
        }
    }

    private final class PanelMenuPresenterCallback
        implements android.support.v7.view.menu.MenuPresenter.Callback {

        final AppCompatDelegateImplV9 this$0;

        public void onCloseMenu(MenuBuilder menubuilder, boolean flag) {
            MenuBuilder menubuilder1 = menubuilder.getRootMenu();
            boolean flag1;
            AppCompatDelegateImplV9 appcompatdelegateimplv9;
            if (menubuilder1 != menubuilder)
                flag1 = true;
            else
                flag1 = false;
            appcompatdelegateimplv9 = AppCompatDelegateImplV9.this;
            if (flag1)
                menubuilder = menubuilder1;
            menubuilder = appcompatdelegateimplv9.findMenuPanel(menubuilder);
            if (menubuilder != null)
                if (flag1) {
                    callOnPanelClosed(((PanelFeatureState) (menubuilder)).featureId, menubuilder, menubuilder1);
                    closePanel(menubuilder, true);
                } else {
                    closePanel(menubuilder, flag);
                }
        }

        public boolean onOpenSubMenu(MenuBuilder menubuilder) {
            if (menubuilder == null && mHasActionBar) {
                android.view.Window.Callback callback = getWindowCallback();
                if (callback != null && !isDestroyed())
                    callback.onMenuOpened(108, menubuilder);
            }
            return true;
        }

        PanelMenuPresenterCallback() {
            this$0 = AppCompatDelegateImplV9.this;
            super();
        }
    }


    private ActionMenuPresenterCallback mActionMenuPresenterCallback;
    ActionMode mActionMode;
    PopupWindow mActionModePopup;
    ActionBarContextView mActionModeView;
    private AppCompatViewInflater mAppCompatViewInflater;
    private boolean mClosingActionMenu;
    private DecorContentParent mDecorContentParent;
    private boolean mEnableDefaultActionBarUp;
    ViewPropertyAnimatorCompat mFadeAnim;
    private boolean mFeatureIndeterminateProgress;
    private boolean mFeatureProgress;
    int mInvalidatePanelMenuFeatures;
    boolean mInvalidatePanelMenuPosted;
    private final Runnable mInvalidatePanelMenuRunnable = new Runnable() {

        final AppCompatDelegateImplV9 this$0;

        public void run() {
            if ((mInvalidatePanelMenuFeatures & 1) != 0)
                doInvalidatePanelMenu(0);
            if ((mInvalidatePanelMenuFeatures & 0x1000) != 0)
                doInvalidatePanelMenu(108);
            mInvalidatePanelMenuPosted = false;
            mInvalidatePanelMenuFeatures = 0;
        }

             {
                this$0 = AppCompatDelegateImplV9.this;
                super();
            }
    }
;
    private boolean mLongPressBackDown;
    private PanelMenuPresenterCallback mPanelMenuPresenterCallback;
    private PanelFeatureState mPanels[];
    private PanelFeatureState mPreparedPanel;
    Runnable mShowActionModePopup;
    private View mStatusGuard;
    private ViewGroup mSubDecor;
    private boolean mSubDecorInstalled;
    private Rect mTempRect1;
    private Rect mTempRect2;
    private TextView mTitleView;

    AppCompatDelegateImplV9(Context context, Window window, AppCompatCallback appcompatcallback) {
        super(context, window, appcompatcallback);
        mFadeAnim = null;
    }

    private void applyFixedSizeWindow() {
        ContentFrameLayout contentframelayout = (ContentFrameLayout)mSubDecor.findViewById(0x1020002);
        Object obj = mWindow.getDecorView();
        contentframelayout.setDecorPadding(((View) (obj)).getPaddingLeft(), ((View) (obj)).getPaddingTop(), ((View) (obj)).getPaddingRight(), ((View) (obj)).getPaddingBottom());
        obj = mContext.obtainStyledAttributes(android.support.v7.appcompat.R.styleable.AppCompatTheme);
        ((TypedArray) (obj)).getValue(android.support.v7.appcompat.R.styleable.AppCompatTheme_windowMinWidthMajor, contentframelayout.getMinWidthMajor());
        ((TypedArray) (obj)).getValue(android.support.v7.appcompat.R.styleable.AppCompatTheme_windowMinWidthMinor, contentframelayout.getMinWidthMinor());
        if (((TypedArray) (obj)).hasValue(android.support.v7.appcompat.R.styleable.AppCompatTheme_windowFixedWidthMajor))
            ((TypedArray) (obj)).getValue(android.support.v7.appcompat.R.styleable.AppCompatTheme_windowFixedWidthMajor, contentframelayout.getFixedWidthMajor());
        if (((TypedArray) (obj)).hasValue(android.support.v7.appcompat.R.styleable.AppCompatTheme_windowFixedWidthMinor))
            ((TypedArray) (obj)).getValue(android.support.v7.appcompat.R.styleable.AppCompatTheme_windowFixedWidthMinor, contentframelayout.getFixedWidthMinor());
        if (((TypedArray) (obj)).hasValue(android.support.v7.appcompat.R.styleable.AppCompatTheme_windowFixedHeightMajor))
            ((TypedArray) (obj)).getValue(android.support.v7.appcompat.R.styleable.AppCompatTheme_windowFixedHeightMajor, contentframelayout.getFixedHeightMajor());
        if (((TypedArray) (obj)).hasValue(android.support.v7.appcompat.R.styleable.AppCompatTheme_windowFixedHeightMinor))
            ((TypedArray) (obj)).getValue(android.support.v7.appcompat.R.styleable.AppCompatTheme_windowFixedHeightMinor, contentframelayout.getFixedHeightMinor());
        ((TypedArray) (obj)).recycle();
        contentframelayout.requestLayout();
    }

    private ViewGroup createSubDecor() {
        Object obj = mContext.obtainStyledAttributes(android.support.v7.appcompat.R.styleable.AppCompatTheme);
        if (!((TypedArray) (obj)).hasValue(android.support.v7.appcompat.R.styleable.AppCompatTheme_windowActionBar)) {
            ((TypedArray) (obj)).recycle();
            throw new IllegalStateException("You need to use a Theme.AppCompat theme (or descendant) with this activity.");
        }
        if (((TypedArray) (obj)).getBoolean(android.support.v7.appcompat.R.styleable.AppCompatTheme_windowNoTitle, false))
            requestWindowFeature(1);
        else
        if (((TypedArray) (obj)).getBoolean(android.support.v7.appcompat.R.styleable.AppCompatTheme_windowActionBar, false))
            requestWindowFeature(108);
        if (((TypedArray) (obj)).getBoolean(android.support.v7.appcompat.R.styleable.AppCompatTheme_windowActionBarOverlay, false))
            requestWindowFeature(109);
        if (((TypedArray) (obj)).getBoolean(android.support.v7.appcompat.R.styleable.AppCompatTheme_windowActionModeOverlay, false))
            requestWindowFeature(10);
        mIsFloating = ((TypedArray) (obj)).getBoolean(android.support.v7.appcompat.R.styleable.AppCompatTheme_android_windowIsFloating, false);
        ((TypedArray) (obj)).recycle();
        mWindow.getDecorView();
        obj = LayoutInflater.from(mContext);
        ViewGroup viewgroup;
        ContentFrameLayout contentframelayout;
        if (!mWindowNoTitle) {
            if (mIsFloating) {
                obj = (ViewGroup)((LayoutInflater) (obj)).inflate(android.support.v7.appcompat.R.layout.abc_dialog_title_material, null);
                mOverlayActionBar = false;
                mHasActionBar = false;
            } else
            if (mHasActionBar) {
                obj = new TypedValue();
                mContext.getTheme().resolveAttribute(android.support.v7.appcompat.R.attr.actionBarTheme, ((TypedValue) (obj)), true);
                if (((TypedValue) (obj)).resourceId != 0)
                    obj = new ContextThemeWrapper(mContext, ((TypedValue) (obj)).resourceId);
                else
                    obj = mContext;
                obj = (ViewGroup)LayoutInflater.from(((Context) (obj))).inflate(android.support.v7.appcompat.R.layout.abc_screen_toolbar, null);
                mDecorContentParent = (DecorContentParent)((ViewGroup) (obj)).findViewById(android.support.v7.appcompat.R.id.decor_content_parent);
                mDecorContentParent.setWindowCallback(getWindowCallback());
                if (mOverlayActionBar)
                    mDecorContentParent.initFeature(109);
                if (mFeatureProgress)
                    mDecorContentParent.initFeature(2);
                if (mFeatureIndeterminateProgress)
                    mDecorContentParent.initFeature(5);
            } else {
                obj = null;
            }
        } else {
            if (mOverlayActionMode)
                obj = (ViewGroup)((LayoutInflater) (obj)).inflate(android.support.v7.appcompat.R.layout.abc_screen_simple_overlay_action_mode, null);
            else
                obj = (ViewGroup)((LayoutInflater) (obj)).inflate(android.support.v7.appcompat.R.layout.abc_screen_simple, null);
            if (android.os.Build.VERSION.SDK_INT >= 21)
                ViewCompat.setOnApplyWindowInsetsListener(((View) (obj)), new OnApplyWindowInsetsListener() {

                    final AppCompatDelegateImplV9 this$0;

                    public WindowInsetsCompat onApplyWindowInsets(View view1, WindowInsetsCompat windowinsetscompat) {
                        int j = windowinsetscompat.getSystemWindowInsetTop();
                        int i = updateStatusGuard(j);
                        WindowInsetsCompat windowinsetscompat1 = windowinsetscompat;
                        if (j != i)
                            windowinsetscompat1 = windowinsetscompat.replaceSystemWindowInsets(windowinsetscompat.getSystemWindowInsetLeft(), i, windowinsetscompat.getSystemWindowInsetRight(), windowinsetscompat.getSystemWindowInsetBottom());
                        return ViewCompat.onApplyWindowInsets(view1, windowinsetscompat1);
                    }

             {
                this$0 = AppCompatDelegateImplV9.this;
                super();
            }
                }
);
            else
                ((FitWindowsViewGroup)obj).setOnFitSystemWindowsListener(new android.support.v7.widget.FitWindowsViewGroup.OnFitSystemWindowsListener() {

                    final AppCompatDelegateImplV9 this$0;

                    public void onFitSystemWindows(Rect rect) {
                        rect.top = updateStatusGuard(rect.top);
                    }

             {
                this$0 = AppCompatDelegateImplV9.this;
                super();
            }
                }
);
        }
        if (obj == null)
            throw new IllegalArgumentException((new StringBuilder()).append("AppCompat does not support the current theme features: { windowActionBar: ").append(mHasActionBar).append(", windowActionBarOverlay: ").append(mOverlayActionBar).append(", android:windowIsFloating: ").append(mIsFloating).append(", windowActionModeOverlay: ").append(mOverlayActionMode).append(", windowNoTitle: ").append(mWindowNoTitle).append(" }").toString());
        if (mDecorContentParent == null)
            mTitleView = (TextView)((ViewGroup) (obj)).findViewById(android.support.v7.appcompat.R.id.title);
        ViewUtils.makeOptionalFitsSystemWindows(((View) (obj)));
        contentframelayout = (ContentFrameLayout)((ViewGroup) (obj)).findViewById(android.support.v7.appcompat.R.id.action_bar_activity_content);
        viewgroup = (ViewGroup)mWindow.findViewById(0x1020002);
        if (viewgroup != null) {
            View view;
            for (; viewgroup.getChildCount() > 0; contentframelayout.addView(view)) {
                view = viewgroup.getChildAt(0);
                viewgroup.removeViewAt(0);
            }

            viewgroup.setId(-1);
            contentframelayout.setId(0x1020002);
            if (viewgroup instanceof FrameLayout)
                ((FrameLayout)viewgroup).setForeground(null);
        }
        mWindow.setContentView(((View) (obj)));
        contentframelayout.setAttachListener(new android.support.v7.widget.ContentFrameLayout.OnAttachListener() {

            final AppCompatDelegateImplV9 this$0;

            public void onAttachedFromWindow() {
            }

            public void onDetachedFromWindow() {
                dismissPopups();
            }

             {
                this$0 = AppCompatDelegateImplV9.this;
                super();
            }
        }
);
        return ((ViewGroup) (obj));
    }

    private void ensureSubDecor() {
        if (!mSubDecorInstalled) {
            mSubDecor = createSubDecor();
            Object obj = getTitle();
            if (!TextUtils.isEmpty(((CharSequence) (obj))))
                onTitleChanged(((CharSequence) (obj)));
            applyFixedSizeWindow();
            onSubDecorInstalled(mSubDecor);
            mSubDecorInstalled = true;
            obj = getPanelState(0, false);
            if (!isDestroyed() && (obj == null || ((PanelFeatureState) (obj)).menu == null))
                invalidatePanelMenu(108);
        }
    }

    private boolean initializePanelContent(PanelFeatureState panelfeaturestate) {
        boolean flag = true;
        if (panelfeaturestate.createdPanelView != null)
            panelfeaturestate.shownPanelView = panelfeaturestate.createdPanelView;
        else
        if (panelfeaturestate.menu == null) {
            flag = false;
        } else {
            if (mPanelMenuPresenterCallback == null)
                mPanelMenuPresenterCallback = new PanelMenuPresenterCallback();
            panelfeaturestate.shownPanelView = (View)panelfeaturestate.getListMenuView(mPanelMenuPresenterCallback);
            if (panelfeaturestate.shownPanelView != null)
                flag = true;
            else
                flag = false;
        }
        return flag;
    }

    private boolean initializePanelDecor(PanelFeatureState panelfeaturestate) {
        panelfeaturestate.setStyle(getActionBarThemedContext());
        panelfeaturestate.decorView = new ListMenuDecorView(panelfeaturestate.listPresenterContext);
        panelfeaturestate.gravity = 81;
        return true;
    }

    private boolean initializePanelMenu(PanelFeatureState panelfeaturestate) {
        Context context = mContext;
        if (panelfeaturestate.featureId != 0 && panelfeaturestate.featureId != 108 || mDecorContentParent == null) goto _L2; else goto _L1
_L1:
        Object obj;
        TypedValue typedvalue = new TypedValue();
        android.content.res.Resources.Theme theme1 = context.getTheme();
        theme1.resolveAttribute(android.support.v7.appcompat.R.attr.actionBarTheme, typedvalue, true);
        obj = null;
        android.content.res.Resources.Theme theme;
        if (typedvalue.resourceId != 0) {
            obj = context.getResources().newTheme();
            ((android.content.res.Resources.Theme) (obj)).setTo(theme1);
            ((android.content.res.Resources.Theme) (obj)).applyStyle(typedvalue.resourceId, true);
            ((android.content.res.Resources.Theme) (obj)).resolveAttribute(android.support.v7.appcompat.R.attr.actionBarWidgetTheme, typedvalue, true);
        } else {
            theme1.resolveAttribute(android.support.v7.appcompat.R.attr.actionBarWidgetTheme, typedvalue, true);
        }
        theme = ((android.content.res.Resources.Theme) (obj));
        if (typedvalue.resourceId != 0) {
            theme = ((android.content.res.Resources.Theme) (obj));
            if (obj == null) {
                theme = context.getResources().newTheme();
                theme.setTo(theme1);
            }
            theme.applyStyle(typedvalue.resourceId, true);
        }
        if (theme == null) goto _L2; else goto _L3
_L3:
        obj = new ContextThemeWrapper(context, 0);
        ((Context) (obj)).getTheme().setTo(theme);
_L5:
        obj = new MenuBuilder(((Context) (obj)));
        ((MenuBuilder) (obj)).setCallback(this);
        panelfeaturestate.setMenu(((MenuBuilder) (obj)));
        return true;
_L2:
        obj = context;
        if (true) goto _L5; else goto _L4
_L4:
    }

    private void invalidatePanelMenu(int i) {
        mInvalidatePanelMenuFeatures = mInvalidatePanelMenuFeatures | 1 << i;
        if (!mInvalidatePanelMenuPosted) {
            ViewCompat.postOnAnimation(mWindow.getDecorView(), mInvalidatePanelMenuRunnable);
            mInvalidatePanelMenuPosted = true;
        }
    }

    private boolean onKeyDownPanel(int i, KeyEvent keyevent) {
        if (keyevent.getRepeatCount() != 0) goto _L2; else goto _L1
_L1:
        PanelFeatureState panelfeaturestate = getPanelState(i, true);
        if (panelfeaturestate.isOpen) goto _L2; else goto _L3
_L3:
        boolean flag = preparePanel(panelfeaturestate, keyevent);
_L5:
        return flag;
_L2:
        flag = false;
        if (true) goto _L5; else goto _L4
_L4:
    }

    private boolean onKeyUpPanel(int i, KeyEvent keyevent) {
        boolean flag1 = true;
        if (mActionMode == null) goto _L2; else goto _L1
_L1:
        boolean flag = false;
_L5:
        return flag;
_L2:
        PanelFeatureState panelfeaturestate = getPanelState(i, true);
        if (i != 0 || mDecorContentParent == null || !mDecorContentParent.canShowOverflowMenu() || ViewConfigurationCompat.hasPermanentMenuKey(ViewConfiguration.get(mContext))) goto _L4; else goto _L3
_L3:
        if (!mDecorContentParent.isOverflowMenuShowing()) {
            if (isDestroyed() || !preparePanel(panelfeaturestate, keyevent))
                break MISSING_BLOCK_LABEL_232;
            flag = mDecorContentParent.showOverflowMenu();
        } else {
            flag = mDecorContentParent.hideOverflowMenu();
        }
_L6:
        if (flag) {
            keyevent = (AudioManager)mContext.getSystemService("audio");
            if (keyevent != null)
                keyevent.playSoundEffect(0);
            else
                Log.w("AppCompatDelegate", "Couldn't get audio manager");
        }
        if (true) goto _L5; else goto _L4
_L4:
        if (panelfeaturestate.isOpen || panelfeaturestate.isHandled) {
            flag = panelfeaturestate.isOpen;
            closePanel(panelfeaturestate, true);
        } else {
            if (!panelfeaturestate.isPrepared)
                break MISSING_BLOCK_LABEL_232;
            if (panelfeaturestate.refreshMenuContent) {
                panelfeaturestate.isPrepared = false;
                flag = preparePanel(panelfeaturestate, keyevent);
            } else {
                flag = true;
            }
            if (!flag)
                break MISSING_BLOCK_LABEL_232;
            openPanel(panelfeaturestate, keyevent);
            flag = flag1;
        }
          goto _L6
        flag = false;
          goto _L6
    }

    private void openPanel(PanelFeatureState panelfeaturestate, KeyEvent keyevent) {
        byte byte0 = -1;
        if (!panelfeaturestate.isOpen && !isDestroyed()) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (panelfeaturestate.featureId != 0) goto _L4; else goto _L3
_L3:
        Object obj = mContext;
        boolean flag;
        boolean flag1;
        if ((((Context) (obj)).getResources().getConfiguration().screenLayout & 0xf) == 4)
            flag = true;
        else
            flag = false;
        if (((Context) (obj)).getApplicationInfo().targetSdkVersion >= 11)
            flag1 = true;
        else
            flag1 = false;
        if (flag && flag1) goto _L1; else goto _L4
_L4:
label0:
        {
            obj = getWindowCallback();
            if (obj == null || ((android.view.Window.Callback) (obj)).onMenuOpened(panelfeaturestate.featureId, panelfeaturestate.menu))
                break label0;
            closePanel(panelfeaturestate, true);
        }
          goto _L1
        WindowManager windowmanager = (WindowManager)mContext.getSystemService("window");
        if (windowmanager == null || !preparePanel(panelfeaturestate, keyevent)) goto _L1; else goto _L5
_L5:
        if (panelfeaturestate.decorView != null && !panelfeaturestate.refreshDecorView) goto _L7; else goto _L6
_L6:
        if (panelfeaturestate.decorView != null) goto _L9; else goto _L8
_L8:
        if (!initializePanelDecor(panelfeaturestate) || panelfeaturestate.decorView == null) goto _L1; else goto _L10
_L10:
        if (!initializePanelContent(panelfeaturestate) || !panelfeaturestate.hasPanelItems()) goto _L1; else goto _L11
_L11:
        int i;
        keyevent = panelfeaturestate.shownPanelView.getLayoutParams();
        if (keyevent == null)
            keyevent = new android.view.ViewGroup.LayoutParams(-2, -2);
        i = panelfeaturestate.background;
        panelfeaturestate.decorView.setBackgroundResource(i);
        ViewParent viewparent = panelfeaturestate.shownPanelView.getParent();
        if (viewparent != null && (viewparent instanceof ViewGroup))
            ((ViewGroup)viewparent).removeView(panelfeaturestate.shownPanelView);
        panelfeaturestate.decorView.addView(panelfeaturestate.shownPanelView, keyevent);
        if (!panelfeaturestate.shownPanelView.hasFocus())
            panelfeaturestate.shownPanelView.requestFocus();
        i = -2;
_L15:
        panelfeaturestate.isHandled = false;
        keyevent = new android.view.WindowManager.LayoutParams(i, -2, panelfeaturestate.x, panelfeaturestate.y, 1002, 0x820000, -3);
        keyevent.gravity = panelfeaturestate.gravity;
        keyevent.windowAnimations = panelfeaturestate.windowAnimations;
        windowmanager.addView(panelfeaturestate.decorView, keyevent);
        panelfeaturestate.isOpen = true;
          goto _L1
_L9:
        if (panelfeaturestate.refreshDecorView && panelfeaturestate.decorView.getChildCount() > 0)
            panelfeaturestate.decorView.removeAllViews();
          goto _L10
_L7:
        if (panelfeaturestate.createdPanelView == null) goto _L13; else goto _L12
_L12:
        keyevent = panelfeaturestate.createdPanelView.getLayoutParams();
        if (keyevent == null) goto _L13; else goto _L14
_L14:
        i = byte0;
        if (((android.view.ViewGroup.LayoutParams) (keyevent)).width == -1) goto _L15; else goto _L13
_L13:
        i = -2;
          goto _L15
    }

    private boolean performPanelShortcut(PanelFeatureState panelfeaturestate, int i, KeyEvent keyevent, int j) {
        boolean flag;
        boolean flag2;
        flag2 = false;
        flag = false;
        if (!keyevent.isSystem()) goto _L2; else goto _L1
_L1:
        flag2 = flag;
_L4:
        return flag2;
_L2:
        boolean flag1;
label0:
        {
            if (!panelfeaturestate.isPrepared) {
                flag1 = flag2;
                if (!preparePanel(panelfeaturestate, keyevent))
                    break label0;
            }
            flag1 = flag2;
            if (panelfeaturestate.menu != null)
                flag1 = panelfeaturestate.menu.performShortcut(i, keyevent, j);
        }
        flag2 = flag1;
        if (flag1) {
            flag2 = flag1;
            if ((j & 1) == 0) {
                flag2 = flag1;
                if (mDecorContentParent == null) {
                    closePanel(panelfeaturestate, true);
                    flag2 = flag1;
                }
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    private boolean preparePanel(PanelFeatureState panelfeaturestate, KeyEvent keyevent) {
        boolean flag2 = false;
        if (!isDestroyed()) goto _L2; else goto _L1
_L1:
        boolean flag1 = flag2;
_L4:
        return flag1;
_L2:
        if (panelfeaturestate.isPrepared) {
            flag1 = true;
            continue; /* Loop/switch isn't completed */
        }
        if (mPreparedPanel != null && mPreparedPanel != panelfeaturestate)
            closePanel(mPreparedPanel, false);
        android.view.Window.Callback callback = getWindowCallback();
        if (callback != null)
            panelfeaturestate.createdPanelView = callback.onCreatePanelView(panelfeaturestate.featureId);
        boolean flag;
        if (panelfeaturestate.featureId == 0 || panelfeaturestate.featureId == 108)
            flag = true;
        else
            flag = false;
        if (flag && mDecorContentParent != null)
            mDecorContentParent.setMenuPrepared();
        if (panelfeaturestate.createdPanelView == null && (!flag || !(peekSupportActionBar() instanceof ToolbarActionBar))) {
            if (panelfeaturestate.menu == null || panelfeaturestate.refreshMenuContent) {
                if (panelfeaturestate.menu == null) {
                    flag1 = flag2;
                    if (!initializePanelMenu(panelfeaturestate))
                        continue; /* Loop/switch isn't completed */
                    flag1 = flag2;
                    if (panelfeaturestate.menu == null)
                        continue; /* Loop/switch isn't completed */
                }
                if (flag && mDecorContentParent != null) {
                    if (mActionMenuPresenterCallback == null)
                        mActionMenuPresenterCallback = new ActionMenuPresenterCallback();
                    mDecorContentParent.setMenu(panelfeaturestate.menu, mActionMenuPresenterCallback);
                }
                panelfeaturestate.menu.stopDispatchingItemsChanged();
                if (!callback.onCreatePanelMenu(panelfeaturestate.featureId, panelfeaturestate.menu)) {
                    panelfeaturestate.setMenu(null);
                    flag1 = flag2;
                    if (flag) {
                        flag1 = flag2;
                        if (mDecorContentParent != null) {
                            mDecorContentParent.setMenu(null, mActionMenuPresenterCallback);
                            flag1 = flag2;
                        }
                    }
                    continue; /* Loop/switch isn't completed */
                }
                panelfeaturestate.refreshMenuContent = false;
            }
            panelfeaturestate.menu.stopDispatchingItemsChanged();
            if (panelfeaturestate.frozenActionViewState != null) {
                panelfeaturestate.menu.restoreActionViewStates(panelfeaturestate.frozenActionViewState);
                panelfeaturestate.frozenActionViewState = null;
            }
            if (!callback.onPreparePanel(0, panelfeaturestate.createdPanelView, panelfeaturestate.menu)) {
                if (flag && mDecorContentParent != null)
                    mDecorContentParent.setMenu(null, mActionMenuPresenterCallback);
                panelfeaturestate.menu.startDispatchingItemsChanged();
                flag1 = flag2;
                continue; /* Loop/switch isn't completed */
            }
            int i;
            if (keyevent != null)
                i = keyevent.getDeviceId();
            else
                i = -1;
            if (KeyCharacterMap.load(i).getKeyboardType() != 1)
                flag1 = true;
            else
                flag1 = false;
            panelfeaturestate.qwertyMode = flag1;
            panelfeaturestate.menu.setQwertyMode(panelfeaturestate.qwertyMode);
            panelfeaturestate.menu.startDispatchingItemsChanged();
        }
        panelfeaturestate.isPrepared = true;
        panelfeaturestate.isHandled = false;
        mPreparedPanel = panelfeaturestate;
        flag1 = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    private void reopenMenu(MenuBuilder menubuilder, boolean flag) {
        if (mDecorContentParent == null || !mDecorContentParent.canShowOverflowMenu() || ViewConfigurationCompat.hasPermanentMenuKey(ViewConfiguration.get(mContext)) && !mDecorContentParent.isOverflowMenuShowPending()) goto _L2; else goto _L1
_L1:
        android.view.Window.Callback callback = getWindowCallback();
        if (mDecorContentParent.isOverflowMenuShowing() && flag) goto _L4; else goto _L3
_L3:
        if (callback != null && !isDestroyed()) {
            if (mInvalidatePanelMenuPosted && (mInvalidatePanelMenuFeatures & 1) != 0) {
                mWindow.getDecorView().removeCallbacks(mInvalidatePanelMenuRunnable);
                mInvalidatePanelMenuRunnable.run();
            }
            menubuilder = getPanelState(0, true);
            if (((PanelFeatureState) (menubuilder)).menu != null && !((PanelFeatureState) (menubuilder)).refreshMenuContent && callback.onPreparePanel(0, ((PanelFeatureState) (menubuilder)).createdPanelView, ((PanelFeatureState) (menubuilder)).menu)) {
                callback.onMenuOpened(108, ((PanelFeatureState) (menubuilder)).menu);
                mDecorContentParent.showOverflowMenu();
            }
        }
_L6:
        return;
_L4:
        mDecorContentParent.hideOverflowMenu();
        if (!isDestroyed())
            callback.onPanelClosed(108, getPanelState(0, true).menu);
        continue; /* Loop/switch isn't completed */
_L2:
        menubuilder = getPanelState(0, true);
        menubuilder.refreshDecorView = true;
        closePanel(menubuilder, false);
        openPanel(menubuilder, null);
        if (true) goto _L6; else goto _L5
_L5:
    }

    private int sanitizeWindowFeatureId(int i) {
        if (i != 8) goto _L2; else goto _L1
_L1:
        int j;
        Log.i("AppCompatDelegate", "You should now use the AppCompatDelegate.FEATURE_SUPPORT_ACTION_BAR id when requesting this feature.");
        j = 108;
_L4:
        return j;
_L2:
        j = i;
        if (i == 9) {
            Log.i("AppCompatDelegate", "You should now use the AppCompatDelegate.FEATURE_SUPPORT_ACTION_BAR_OVERLAY id when requesting this feature.");
            j = 109;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    private boolean shouldInheritContext(ViewParent viewparent) {
        if (viewparent != null) goto _L2; else goto _L1
_L1:
        boolean flag = false;
_L4:
        return flag;
_L2:
        View view = mWindow.getDecorView();
        do {
            if (viewparent == null) {
                flag = true;
            } else {
label0:
                {
                    if (viewparent != view && (viewparent instanceof View) && !ViewCompat.isAttachedToWindow((View)viewparent))
                        break label0;
                    flag = false;
                }
            }
            if (true)
                continue;
            viewparent = viewparent.getParent();
        } while (true);
        if (true) goto _L4; else goto _L3
_L3:
    }

    private void throwFeatureRequestIfSubDecorInstalled() {
        if (mSubDecorInstalled)
            throw new AndroidRuntimeException("Window feature must be requested before adding content");
        else
            return;
    }

    public void addContentView(View view, android.view.ViewGroup.LayoutParams layoutparams) {
        ensureSubDecor();
        ((ViewGroup)mSubDecor.findViewById(0x1020002)).addView(view, layoutparams);
        mOriginalWindowCallback.onContentChanged();
    }

    View callActivityOnCreateView(View view, String s, Context context, AttributeSet attributeset) {
        if (!(mOriginalWindowCallback instanceof android.view.LayoutInflater.Factory)) goto _L2; else goto _L1
_L1:
        view = ((android.view.LayoutInflater.Factory)mOriginalWindowCallback).onCreateView(s, context, attributeset);
        if (view == null) goto _L2; else goto _L3
_L3:
        return view;
_L2:
        view = null;
        if (true) goto _L3; else goto _L4
_L4:
    }

    void callOnPanelClosed(int i, PanelFeatureState panelfeaturestate, Menu menu) {
        PanelFeatureState panelfeaturestate2;
        Object obj;
        panelfeaturestate2 = panelfeaturestate;
        obj = menu;
        if (menu == null) {
            PanelFeatureState panelfeaturestate1 = panelfeaturestate;
            if (panelfeaturestate == null) {
                panelfeaturestate1 = panelfeaturestate;
                if (i >= 0) {
                    panelfeaturestate1 = panelfeaturestate;
                    if (i < mPanels.length)
                        panelfeaturestate1 = mPanels[i];
                }
            }
            panelfeaturestate2 = panelfeaturestate1;
            obj = menu;
            if (panelfeaturestate1 != null) {
                obj = panelfeaturestate1.menu;
                panelfeaturestate2 = panelfeaturestate1;
            }
        }
        break MISSING_BLOCK_LABEL_67;
        if ((panelfeaturestate2 == null || panelfeaturestate2.isOpen) && !isDestroyed())
            mOriginalWindowCallback.onPanelClosed(i, ((Menu) (obj)));
        return;
    }

    void checkCloseActionMenu(MenuBuilder menubuilder) {
        if (!mClosingActionMenu) {
            mClosingActionMenu = true;
            mDecorContentParent.dismissPopups();
            android.view.Window.Callback callback = getWindowCallback();
            if (callback != null && !isDestroyed())
                callback.onPanelClosed(108, menubuilder);
            mClosingActionMenu = false;
        }
    }

    void closePanel(int i) {
        closePanel(getPanelState(i, true), true);
    }

    void closePanel(PanelFeatureState panelfeaturestate, boolean flag) {
        if (!flag || panelfeaturestate.featureId != 0 || mDecorContentParent == null || !mDecorContentParent.isOverflowMenuShowing()) goto _L2; else goto _L1
_L1:
        checkCloseActionMenu(panelfeaturestate.menu);
_L4:
        return;
_L2:
        WindowManager windowmanager = (WindowManager)mContext.getSystemService("window");
        if (windowmanager != null && panelfeaturestate.isOpen && panelfeaturestate.decorView != null) {
            windowmanager.removeView(panelfeaturestate.decorView);
            if (flag)
                callOnPanelClosed(panelfeaturestate.featureId, panelfeaturestate, null);
        }
        panelfeaturestate.isPrepared = false;
        panelfeaturestate.isHandled = false;
        panelfeaturestate.isOpen = false;
        panelfeaturestate.shownPanelView = null;
        panelfeaturestate.refreshDecorView = true;
        if (mPreparedPanel == panelfeaturestate)
            mPreparedPanel = null;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public View createView(View view, String s, Context context, AttributeSet attributeset) {
        boolean flag;
        boolean flag1;
        if (android.os.Build.VERSION.SDK_INT < 21)
            flag = true;
        else
            flag = false;
        if (mAppCompatViewInflater == null)
            mAppCompatViewInflater = new AppCompatViewInflater();
        if (flag && shouldInheritContext((ViewParent)view))
            flag1 = true;
        else
            flag1 = false;
        return mAppCompatViewInflater.createView(view, s, context, attributeset, flag1, flag, true, VectorEnabledTintResources.shouldBeUsed());
    }

    void dismissPopups() {
        if (mDecorContentParent != null)
            mDecorContentParent.dismissPopups();
        if (mActionModePopup != null) {
            mWindow.getDecorView().removeCallbacks(mShowActionModePopup);
            PanelFeatureState panelfeaturestate;
            if (mActionModePopup.isShowing())
                try {
                    mActionModePopup.dismiss();
                }
                catch (IllegalArgumentException illegalargumentexception) { }
            mActionModePopup = null;
        }
        endOnGoingFadeAnimation();
        panelfeaturestate = getPanelState(0, false);
        if (panelfeaturestate != null && panelfeaturestate.menu != null)
            panelfeaturestate.menu.close();
    }

    boolean dispatchKeyEvent(KeyEvent keyevent) {
        boolean flag = true;
        boolean flag1 = true;
        if (keyevent.getKeyCode() != 82 || !mOriginalWindowCallback.dispatchKeyEvent(keyevent)) {
            int i = keyevent.getKeyCode();
            if (keyevent.getAction() != 0)
                flag = false;
            if (flag)
                flag1 = onKeyDown(i, keyevent);
            else
                flag1 = onKeyUp(i, keyevent);
        }
        return flag1;
    }

    void doInvalidatePanelMenu(int i) {
        PanelFeatureState panelfeaturestate = getPanelState(i, true);
        if (panelfeaturestate.menu != null) {
            Bundle bundle = new Bundle();
            panelfeaturestate.menu.saveActionViewStates(bundle);
            if (bundle.size() > 0)
                panelfeaturestate.frozenActionViewState = bundle;
            panelfeaturestate.menu.stopDispatchingItemsChanged();
            panelfeaturestate.menu.clear();
        }
        panelfeaturestate.refreshMenuContent = true;
        panelfeaturestate.refreshDecorView = true;
        if ((i == 108 || i == 0) && mDecorContentParent != null) {
            PanelFeatureState panelfeaturestate1 = getPanelState(0, false);
            if (panelfeaturestate1 != null) {
                panelfeaturestate1.isPrepared = false;
                preparePanel(panelfeaturestate1, null);
            }
        }
    }

    void endOnGoingFadeAnimation() {
        if (mFadeAnim != null)
            mFadeAnim.cancel();
    }

    PanelFeatureState findMenuPanel(Menu menu) {
        int j;
        PanelFeatureState apanelfeaturestate[] = mPanels;
        int i;
        PanelFeatureState panelfeaturestate;
        if (apanelfeaturestate != null)
            i = apanelfeaturestate.length;
        else
            i = 0;
        j = 0;
_L3:
        if (j >= i)
            break MISSING_BLOCK_LABEL_58;
        panelfeaturestate = apanelfeaturestate[j];
        if (panelfeaturestate == null || panelfeaturestate.menu != menu) goto _L2; else goto _L1
_L1:
        menu = panelfeaturestate;
_L4:
        return menu;
_L2:
        j++;
          goto _L3
        menu = null;
          goto _L4
    }

    public View findViewById(int i) {
        ensureSubDecor();
        return mWindow.findViewById(i);
    }

    protected PanelFeatureState getPanelState(int i, boolean flag) {
        PanelFeatureState apanelfeaturestate[];
label0:
        {
            PanelFeatureState apanelfeaturestate1[] = mPanels;
            if (apanelfeaturestate1 != null) {
                apanelfeaturestate = apanelfeaturestate1;
                if (apanelfeaturestate1.length > i)
                    break label0;
            }
            apanelfeaturestate = new PanelFeatureState[i + 1];
            if (apanelfeaturestate1 != null)
                System.arraycopy(apanelfeaturestate1, 0, apanelfeaturestate, 0, apanelfeaturestate1.length);
            mPanels = apanelfeaturestate;
        }
        PanelFeatureState panelfeaturestate1 = apanelfeaturestate[i];
        PanelFeatureState panelfeaturestate;
        if (panelfeaturestate1 == null) {
            panelfeaturestate1 = new PanelFeatureState(i);
            apanelfeaturestate[i] = panelfeaturestate1;
            panelfeaturestate = panelfeaturestate1;
        } else {
            panelfeaturestate = panelfeaturestate1;
        }
        return panelfeaturestate;
    }

    ViewGroup getSubDecor() {
        return mSubDecor;
    }

    public boolean hasWindowFeature(int i) {
        i = sanitizeWindowFeatureId(i);
        i;
        JVM INSTR lookupswitch 6: default 64
    //                   1: 115
    //                   2: 99
    //                   5: 107
    //                   10: 91
    //                   108: 75
    //                   109: 83;
           goto _L1 _L2 _L3 _L4 _L5 _L6 _L7
_L1:
        boolean flag = mWindow.hasFeature(i);
_L9:
        return flag;
_L6:
        flag = mHasActionBar;
        continue; /* Loop/switch isn't completed */
_L7:
        flag = mOverlayActionBar;
        continue; /* Loop/switch isn't completed */
_L5:
        flag = mOverlayActionMode;
        continue; /* Loop/switch isn't completed */
_L3:
        flag = mFeatureProgress;
        continue; /* Loop/switch isn't completed */
_L4:
        flag = mFeatureIndeterminateProgress;
        continue; /* Loop/switch isn't completed */
_L2:
        flag = mWindowNoTitle;
        if (true) goto _L9; else goto _L8
_L8:
    }

    public void initWindowDecorActionBar() {
        ensureSubDecor();
        if (mHasActionBar && mActionBar == null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (!(mOriginalWindowCallback instanceof Activity))
            break; /* Loop/switch isn't completed */
        mActionBar = new WindowDecorActionBar((Activity)mOriginalWindowCallback, mOverlayActionBar);
_L5:
        if (mActionBar != null)
            mActionBar.setDefaultDisplayHomeAsUpEnabled(mEnableDefaultActionBarUp);
        if (true) goto _L1; else goto _L3
_L3:
        if (!(mOriginalWindowCallback instanceof Dialog)) goto _L5; else goto _L4
_L4:
        mActionBar = new WindowDecorActionBar((Dialog)mOriginalWindowCallback);
          goto _L5
    }

    public void installViewFactory() {
        LayoutInflater layoutinflater = LayoutInflater.from(mContext);
        if (layoutinflater.getFactory() != null) goto _L2; else goto _L1
_L1:
        LayoutInflaterCompat.setFactory(layoutinflater, this);
_L4:
        return;
_L2:
        if (!(LayoutInflaterCompat.getFactory(layoutinflater) instanceof AppCompatDelegateImplV9))
            Log.i("AppCompatDelegate", "The Activity's LayoutInflater already has a Factory installed so we can not install AppCompat's");
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void invalidateOptionsMenu() {
        ActionBar actionbar = getSupportActionBar();
        if (actionbar == null || !actionbar.invalidateOptionsMenu())
            invalidatePanelMenu(0);
    }

    boolean onBackPressed() {
        boolean flag = true;
        if (mActionMode == null) goto _L2; else goto _L1
_L1:
        mActionMode.finish();
_L4:
        return flag;
_L2:
        ActionBar actionbar = getSupportActionBar();
        if (actionbar == null || !actionbar.collapseActionView())
            flag = false;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void onConfigurationChanged(Configuration configuration) {
        if (mHasActionBar && mSubDecorInstalled) {
            ActionBar actionbar = getSupportActionBar();
            if (actionbar != null)
                actionbar.onConfigurationChanged(configuration);
        }
        AppCompatDrawableManager.get().onConfigurationChanged(mContext);
        applyDayNight();
    }

    public void onCreate(Bundle bundle) {
        if ((mOriginalWindowCallback instanceof Activity) && NavUtils.getParentActivityName((Activity)mOriginalWindowCallback) != null) {
            bundle = peekSupportActionBar();
            if (bundle == null)
                mEnableDefaultActionBarUp = true;
            else
                bundle.setDefaultDisplayHomeAsUpEnabled(true);
        }
    }

    public final View onCreateView(View view, String s, Context context, AttributeSet attributeset) {
        View view1 = callActivityOnCreateView(view, s, context, attributeset);
        if (view1 != null)
            view = view1;
        else
            view = createView(view, s, context, attributeset);
        return view;
    }

    public void onDestroy() {
        super.onDestroy();
        if (mActionBar != null)
            mActionBar.onDestroy();
    }

    boolean onKeyDown(int i, KeyEvent keyevent) {
        boolean flag;
        boolean flag2;
        flag2 = true;
        flag = true;
        i;
        JVM INSTR lookupswitch 2: default 32
    //                   4: 61
    //                   82: 51;
           goto _L1 _L2 _L3
_L1:
        if (android.os.Build.VERSION.SDK_INT < 11)
            onKeyShortcut(i, keyevent);
        flag = false;
_L4:
        return flag;
_L3:
        onKeyDownPanel(0, keyevent);
        if (true) goto _L4; else goto _L2
_L2:
        boolean flag1;
        if ((keyevent.getFlags() & 0x80) != 0)
            flag1 = flag2;
        else
            flag1 = false;
        mLongPressBackDown = flag1;
        if (true) goto _L1; else goto _L5
_L5:
    }

    boolean onKeyShortcut(int i, KeyEvent keyevent) {
        boolean flag1;
        ActionBar actionbar;
        flag1 = true;
        actionbar = getSupportActionBar();
        if (actionbar == null || !actionbar.onKeyShortcut(i, keyevent)) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        if (mPreparedPanel != null && performPanelShortcut(mPreparedPanel, keyevent.getKeyCode(), keyevent, 1)) {
            flag = flag1;
            if (mPreparedPanel != null) {
                mPreparedPanel.isHandled = true;
                flag = flag1;
            }
            continue; /* Loop/switch isn't completed */
        }
        if (mPreparedPanel == null) {
            PanelFeatureState panelfeaturestate = getPanelState(0, true);
            preparePanel(panelfeaturestate, keyevent);
            boolean flag2 = performPanelShortcut(panelfeaturestate, keyevent.getKeyCode(), keyevent, 1);
            panelfeaturestate.isPrepared = false;
            flag = flag1;
            if (flag2)
                continue; /* Loop/switch isn't completed */
        }
        flag = false;
        if (true) goto _L4; else goto _L3
_L3:
    }

    boolean onKeyUp(int i, KeyEvent keyevent) {
        boolean flag1 = true;
        i;
        JVM INSTR lookupswitch 2: default 32
    //                   4: 49
    //                   82: 36;
           goto _L1 _L2 _L3
_L1:
        boolean flag = false;
_L4:
        return flag;
_L3:
        onKeyUpPanel(0, keyevent);
        flag = flag1;
          goto _L4
_L2:
        boolean flag2 = mLongPressBackDown;
        mLongPressBackDown = false;
        keyevent = getPanelState(0, false);
        if (keyevent == null || !((PanelFeatureState) (keyevent)).isOpen)
            continue; /* Loop/switch isn't completed */
        flag = flag1;
        if (!flag2) {
            closePanel(keyevent, true);
            flag = flag1;
        }
          goto _L4
        if (!onBackPressed()) goto _L1; else goto _L5
_L5:
        flag = flag1;
          goto _L4
        if (true) goto _L1; else goto _L6
_L6:
    }

    public boolean onMenuItemSelected(MenuBuilder menubuilder, MenuItem menuitem) {
        android.view.Window.Callback callback = getWindowCallback();
        if (callback == null || isDestroyed()) goto _L2; else goto _L1
_L1:
        menubuilder = findMenuPanel(menubuilder.getRootMenu());
        if (menubuilder == null) goto _L2; else goto _L3
_L3:
        boolean flag = callback.onMenuItemSelected(((PanelFeatureState) (menubuilder)).featureId, menuitem);
_L5:
        return flag;
_L2:
        flag = false;
        if (true) goto _L5; else goto _L4
_L4:
    }

    public void onMenuModeChange(MenuBuilder menubuilder) {
        reopenMenu(menubuilder, true);
    }

    boolean onMenuOpened(int i, Menu menu) {
        boolean flag1 = true;
        boolean flag;
        if (i == 108) {
            menu = getSupportActionBar();
            flag = flag1;
            if (menu != null) {
                menu.dispatchMenuVisibilityChanged(true);
                flag = flag1;
            }
        } else {
            flag = false;
        }
        return flag;
    }

    void onPanelClosed(int i, Menu menu) {
        if (i != 108) goto _L2; else goto _L1
_L1:
        menu = getSupportActionBar();
        if (menu != null)
            menu.dispatchMenuVisibilityChanged(false);
_L4:
        return;
_L2:
        if (i == 0) {
            menu = getPanelState(i, true);
            if (((PanelFeatureState) (menu)).isOpen)
                closePanel(menu, false);
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void onPostCreate(Bundle bundle) {
        ensureSubDecor();
    }

    public void onPostResume() {
        ActionBar actionbar = getSupportActionBar();
        if (actionbar != null)
            actionbar.setShowHideAnimationEnabled(true);
    }

    public void onStop() {
        ActionBar actionbar = getSupportActionBar();
        if (actionbar != null)
            actionbar.setShowHideAnimationEnabled(false);
    }

    void onSubDecorInstalled(ViewGroup viewgroup) {
    }

    void onTitleChanged(CharSequence charsequence) {
        if (mDecorContentParent == null) goto _L2; else goto _L1
_L1:
        mDecorContentParent.setWindowTitle(charsequence);
_L4:
        return;
_L2:
        if (peekSupportActionBar() != null)
            peekSupportActionBar().setWindowTitle(charsequence);
        else
        if (mTitleView != null)
            mTitleView.setText(charsequence);
        if (true) goto _L4; else goto _L3
_L3:
    }

    public boolean requestWindowFeature(int i) {
        boolean flag;
        flag = false;
        i = sanitizeWindowFeatureId(i);
        if (!mWindowNoTitle || i != 108) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        if (mHasActionBar && i == 1)
            mHasActionBar = false;
        switch (i) {
        default:
            flag = mWindow.requestFeature(i);
            break;

        case 108: // 'l'
            throwFeatureRequestIfSubDecorInstalled();
            mHasActionBar = true;
            flag = true;
            break;

        case 109: // 'm'
            throwFeatureRequestIfSubDecorInstalled();
            mOverlayActionBar = true;
            flag = true;
            break;

        case 10: // '\n'
            throwFeatureRequestIfSubDecorInstalled();
            mOverlayActionMode = true;
            flag = true;
            break;

        case 2: // '\002'
            throwFeatureRequestIfSubDecorInstalled();
            mFeatureProgress = true;
            flag = true;
            break;

        case 5: // '\005'
            throwFeatureRequestIfSubDecorInstalled();
            mFeatureIndeterminateProgress = true;
            flag = true;
            break;

        case 1: // '\001'
            throwFeatureRequestIfSubDecorInstalled();
            mWindowNoTitle = true;
            flag = true;
            break;
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void setContentView(int i) {
        ensureSubDecor();
        ViewGroup viewgroup = (ViewGroup)mSubDecor.findViewById(0x1020002);
        viewgroup.removeAllViews();
        LayoutInflater.from(mContext).inflate(i, viewgroup);
        mOriginalWindowCallback.onContentChanged();
    }

    public void setContentView(View view) {
        ensureSubDecor();
        ViewGroup viewgroup = (ViewGroup)mSubDecor.findViewById(0x1020002);
        viewgroup.removeAllViews();
        viewgroup.addView(view);
        mOriginalWindowCallback.onContentChanged();
    }

    public void setContentView(View view, android.view.ViewGroup.LayoutParams layoutparams) {
        ensureSubDecor();
        ViewGroup viewgroup = (ViewGroup)mSubDecor.findViewById(0x1020002);
        viewgroup.removeAllViews();
        viewgroup.addView(view, layoutparams);
        mOriginalWindowCallback.onContentChanged();
    }

    public void setSupportActionBar(Toolbar toolbar) {
        if (mOriginalWindowCallback instanceof Activity) {
            ActionBar actionbar = getSupportActionBar();
            if (actionbar instanceof WindowDecorActionBar)
                throw new IllegalStateException("This Activity already has an action bar supplied by the window decor. Do not request Window.FEATURE_SUPPORT_ACTION_BAR and set windowActionBar to false in your theme to use a Toolbar instead.");
            mMenuInflater = null;
            if (actionbar != null)
                actionbar.onDestroy();
            if (toolbar != null) {
                toolbar = new ToolbarActionBar(toolbar, ((Activity)mContext).getTitle(), mAppCompatWindowCallback);
                mActionBar = toolbar;
                mWindow.setCallback(toolbar.getWrappedWindowCallback());
            } else {
                mActionBar = null;
                mWindow.setCallback(mAppCompatWindowCallback);
            }
            invalidateOptionsMenu();
        }
    }

    final boolean shouldAnimateActionModeView() {
        boolean flag;
        if (mSubDecorInstalled && mSubDecor != null && ViewCompat.isLaidOut(mSubDecor))
            flag = true;
        else
            flag = false;
        return flag;
    }

    public ActionMode startSupportActionMode(android.support.v7.view.ActionMode.Callback callback) {
        if (callback == null)
            throw new IllegalArgumentException("ActionMode callback can not be null.");
        if (mActionMode != null)
            mActionMode.finish();
        ActionModeCallbackWrapperV9 actionmodecallbackwrapperv9 = new ActionModeCallbackWrapperV9(callback);
        callback = getSupportActionBar();
        if (callback != null) {
            mActionMode = callback.startActionMode(actionmodecallbackwrapperv9);
            if (mActionMode != null && mAppCompatCallback != null)
                mAppCompatCallback.onSupportActionModeStarted(mActionMode);
        }
        if (mActionMode == null)
            mActionMode = startSupportActionModeFromWindow(actionmodecallbackwrapperv9);
        return mActionMode;
    }

    ActionMode startSupportActionModeFromWindow(android.support.v7.view.ActionMode.Callback callback) {
        endOnGoingFadeAnimation();
        if (mActionMode != null)
            mActionMode.finish();
        Object obj = callback;
        if (!(callback instanceof ActionModeCallbackWrapperV9))
            obj = new ActionModeCallbackWrapperV9(callback);
        int i;
        boolean flag;
        Object obj1;
        android.content.res.Resources.Theme theme;
        if (mAppCompatCallback != null && !isDestroyed())
            try {
                callback = mAppCompatCallback.onWindowStartingSupportActionMode(((android.support.v7.view.ActionMode.Callback) (obj)));
            }
            // Misplaced declaration of an exception variable
            catch (android.support.v7.view.ActionMode.Callback callback) {
                callback = null;
            }
        else
            callback = null;
        if (callback == null) goto _L2; else goto _L1
_L1:
        mActionMode = callback;
_L4:
        if (mActionMode != null && mAppCompatCallback != null)
            mAppCompatCallback.onSupportActionModeStarted(mActionMode);
        return mActionMode;
_L2:
        if (mActionModeView == null)
            if (mIsFloating) {
                obj1 = new TypedValue();
                callback = mContext.getTheme();
                callback.resolveAttribute(android.support.v7.appcompat.R.attr.actionBarTheme, ((TypedValue) (obj1)), true);
                if (((TypedValue) (obj1)).resourceId != 0) {
                    theme = mContext.getResources().newTheme();
                    theme.setTo(callback);
                    theme.applyStyle(((TypedValue) (obj1)).resourceId, true);
                    callback = new ContextThemeWrapper(mContext, 0);
                    callback.getTheme().setTo(theme);
                } else {
                    callback = mContext;
                }
                mActionModeView = new ActionBarContextView(callback);
                mActionModePopup = new PopupWindow(callback, null, android.support.v7.appcompat.R.attr.actionModePopupWindowStyle);
                PopupWindowCompat.setWindowLayoutType(mActionModePopup, 2);
                mActionModePopup.setContentView(mActionModeView);
                mActionModePopup.setWidth(-1);
                callback.getTheme().resolveAttribute(android.support.v7.appcompat.R.attr.actionBarSize, ((TypedValue) (obj1)), true);
                i = TypedValue.complexToDimensionPixelSize(((TypedValue) (obj1)).data, callback.getResources().getDisplayMetrics());
                mActionModeView.setContentHeight(i);
                mActionModePopup.setHeight(-2);
                mShowActionModePopup = new Runnable() {

                    final AppCompatDelegateImplV9 this$0;

                    public void run() {
                        mActionModePopup.showAtLocation(mActionModeView, 55, 0, 0);
                        endOnGoingFadeAnimation();
                        if (shouldAnimateActionModeView()) {
                            ViewCompat.setAlpha(mActionModeView, 0.0F);
                            mFadeAnim = ViewCompat.animate(mActionModeView).alpha(1.0F);
                            mFadeAnim.setListener(new ViewPropertyAnimatorListenerAdapter() {

                                final _cls5 this$1;

                                public void onAnimationEnd(View view) {
                                    ViewCompat.setAlpha(mActionModeView, 1.0F);
                                    mFadeAnim.setListener(null);
                                    mFadeAnim = null;
                                }

                                public void onAnimationStart(View view) {
                                    mActionModeView.setVisibility(0);
                                }

             {
                this$1 = _cls5.this;
                super();
            }
                            }
);
                        } else {
                            ViewCompat.setAlpha(mActionModeView, 1.0F);
                            mActionModeView.setVisibility(0);
                        }
                    }

             {
                this$0 = AppCompatDelegateImplV9.this;
                super();
            }
                }
;
            } else {
                callback = (ViewStubCompat)mSubDecor.findViewById(android.support.v7.appcompat.R.id.action_mode_bar_stub);
                if (callback != null) {
                    callback.setLayoutInflater(LayoutInflater.from(getActionBarThemedContext()));
                    mActionModeView = (ActionBarContextView)callback.inflate();
                }
            }
        if (mActionModeView == null)
            continue; /* Loop/switch isn't completed */
        endOnGoingFadeAnimation();
        mActionModeView.killMode();
        callback = mActionModeView.getContext();
        obj1 = mActionModeView;
        if (mActionModePopup == null)
            flag = true;
        else
            flag = false;
        callback = new StandaloneActionMode(callback, ((ActionBarContextView) (obj1)), ((android.support.v7.view.ActionMode.Callback) (obj)), flag);
        if (((android.support.v7.view.ActionMode.Callback) (obj)).onCreateActionMode(callback, callback.getMenu())) {
            callback.invalidate();
            mActionModeView.initForMode(callback);
            mActionMode = callback;
            if (shouldAnimateActionModeView()) {
                ViewCompat.setAlpha(mActionModeView, 0.0F);
                mFadeAnim = ViewCompat.animate(mActionModeView).alpha(1.0F);
                mFadeAnim.setListener(new ViewPropertyAnimatorListenerAdapter() {

                    final AppCompatDelegateImplV9 this$0;

                    public void onAnimationEnd(View view) {
                        ViewCompat.setAlpha(mActionModeView, 1.0F);
                        mFadeAnim.setListener(null);
                        mFadeAnim = null;
                    }

                    public void onAnimationStart(View view) {
                        mActionModeView.setVisibility(0);
                        mActionModeView.sendAccessibilityEvent(32);
                        if (mActionModeView.getParent() != null)
                            ViewCompat.requestApplyInsets((View)mActionModeView.getParent());
                    }

             {
                this$0 = AppCompatDelegateImplV9.this;
                super();
            }
                }
);
            } else {
                ViewCompat.setAlpha(mActionModeView, 1.0F);
                mActionModeView.setVisibility(0);
                mActionModeView.sendAccessibilityEvent(32);
                if (mActionModeView.getParent() != null)
                    ViewCompat.requestApplyInsets((View)mActionModeView.getParent());
            }
            if (mActionModePopup != null)
                mWindow.getDecorView().post(mShowActionModePopup);
            continue; /* Loop/switch isn't completed */
        }
        mActionMode = null;
        if (true) goto _L4; else goto _L3
_L3:
    }

    int updateStatusGuard(int i) {
        int k = 1;
        boolean flag = true;
        boolean flag1 = false;
        int j;
        if (mActionModeView != null && (mActionModeView.getLayoutParams() instanceof android.view.ViewGroup.MarginLayoutParams)) {
            Object obj = (android.view.ViewGroup.MarginLayoutParams)mActionModeView.getLayoutParams();
            if (mActionModeView.isShown()) {
                if (mTempRect1 == null) {
                    mTempRect1 = new Rect();
                    mTempRect2 = new Rect();
                }
                Rect rect = mTempRect1;
                Rect rect1 = mTempRect2;
                rect.set(0, i, 0, 0);
                ViewUtils.computeFitSystemWindows(mSubDecor, rect, rect1);
                if (rect1.top == 0)
                    j = i;
                else
                    j = 0;
                if (((android.view.ViewGroup.MarginLayoutParams) (obj)).topMargin != j) {
                    obj.topMargin = i;
                    if (mStatusGuard == null) {
                        mStatusGuard = new View(mContext);
                        mStatusGuard.setBackgroundColor(mContext.getResources().getColor(android.support.v7.appcompat.R.color.abc_input_method_navigation_guard));
                        mSubDecor.addView(mStatusGuard, -1, new android.view.ViewGroup.LayoutParams(-1, i));
                        j = 1;
                    } else {
                        android.view.ViewGroup.LayoutParams layoutparams = mStatusGuard.getLayoutParams();
                        if (layoutparams.height != i) {
                            layoutparams.height = i;
                            mStatusGuard.setLayoutParams(layoutparams);
                        }
                        j = 1;
                    }
                } else {
                    j = 0;
                }
                if (mStatusGuard == null)
                    flag = false;
                k = i;
                if (!mOverlayActionMode) {
                    k = i;
                    if (flag)
                        k = 0;
                }
                i = k;
                k = j;
                j = ((flag) ? 1 : 0);
            } else
            if (((android.view.ViewGroup.MarginLayoutParams) (obj)).topMargin != 0) {
                obj.topMargin = 0;
                j = 0;
            } else {
                k = 0;
                j = 0;
            }
            if (k != 0)
                mActionModeView.setLayoutParams(((android.view.ViewGroup.LayoutParams) (obj)));
        } else {
            j = 0;
        }
        if (mStatusGuard != null) {
            obj = mStatusGuard;
            if (j != 0)
                j = ((flag1) ? 1 : 0);
            else
                j = 8;
            ((View) (obj)).setVisibility(j);
        }
        return i;
    }
}
