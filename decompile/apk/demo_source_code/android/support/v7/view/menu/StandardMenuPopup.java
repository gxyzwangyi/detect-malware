// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v7.view.menu;

import android.content.Context;
import android.content.res.Resources;
import android.os.Parcelable;
import android.support.v7.widget.MenuPopupWindow;
import android.util.DisplayMetrics;
import android.view.*;
import android.widget.*;

// Referenced classes of package android.support.v7.view.menu:
//            MenuPopup, MenuPresenter, MenuAdapter, MenuBuilder, 
//            SubMenuBuilder, MenuPopupHelper

final class StandardMenuPopup extends MenuPopup
    implements MenuPresenter, android.view.View.OnKeyListener, android.widget.AdapterView.OnItemClickListener, android.widget.PopupWindow.OnDismissListener {

    private final MenuAdapter mAdapter;
    private View mAnchorView;
    private int mContentWidth;
    private final Context mContext;
    private int mDropDownGravity;
    private final android.view.ViewTreeObserver.OnGlobalLayoutListener mGlobalLayoutListener = new android.view.ViewTreeObserver.OnGlobalLayoutListener() {

        final StandardMenuPopup this$0;

        public void onGlobalLayout() {
            if (isShowing() && !mPopup.isModal()) {
                View view1 = mShownAnchorView;
                if (view1 == null || !view1.isShown())
                    dismiss();
                else
                    mPopup.show();
            }
        }

             {
                this$0 = StandardMenuPopup.this;
                super();
            }
    }
;
    private boolean mHasContentWidth;
    private final MenuBuilder mMenu;
    private android.widget.PopupWindow.OnDismissListener mOnDismissListener;
    private final boolean mOverflowOnly;
    final MenuPopupWindow mPopup;
    private final int mPopupMaxWidth;
    private final int mPopupStyleAttr;
    private final int mPopupStyleRes;
    private MenuPresenter.Callback mPresenterCallback;
    private boolean mShowTitle;
    View mShownAnchorView;
    private ViewTreeObserver mTreeObserver;
    private boolean mWasDismissed;

    public StandardMenuPopup(Context context, MenuBuilder menubuilder, View view, int i, int j, boolean flag) {
        mDropDownGravity = 0;
        mContext = context;
        mMenu = menubuilder;
        mOverflowOnly = flag;
        mAdapter = new MenuAdapter(menubuilder, LayoutInflater.from(context), mOverflowOnly);
        mPopupStyleAttr = i;
        mPopupStyleRes = j;
        Resources resources = context.getResources();
        mPopupMaxWidth = Math.max(resources.getDisplayMetrics().widthPixels / 2, resources.getDimensionPixelSize(android.support.v7.appcompat.R.dimen.abc_config_prefDialogWidth));
        mAnchorView = view;
        mPopup = new MenuPopupWindow(mContext, null, mPopupStyleAttr, mPopupStyleRes);
        menubuilder.addMenuPresenter(this, context);
    }

    private boolean tryShow() {
        boolean flag1 = true;
        if (!isShowing())
            if (mWasDismissed || mAnchorView == null) {
                flag1 = false;
            } else {
                mShownAnchorView = mAnchorView;
                mPopup.setOnDismissListener(this);
                mPopup.setOnItemClickListener(this);
                mPopup.setModal(true);
                Object obj = mShownAnchorView;
                boolean flag;
                if (mTreeObserver == null)
                    flag = true;
                else
                    flag = false;
                mTreeObserver = ((View) (obj)).getViewTreeObserver();
                if (flag)
                    mTreeObserver.addOnGlobalLayoutListener(mGlobalLayoutListener);
                mPopup.setAnchorView(((View) (obj)));
                mPopup.setDropDownGravity(mDropDownGravity);
                if (!mHasContentWidth) {
                    mContentWidth = measureIndividualMenuWidth(mAdapter, null, mContext, mPopupMaxWidth);
                    mHasContentWidth = true;
                }
                mPopup.setContentWidth(mContentWidth);
                mPopup.setInputMethodMode(2);
                mPopup.setEpicenterBounds(getEpicenterBounds());
                mPopup.show();
                obj = mPopup.getListView();
                ((ListView) (obj)).setOnKeyListener(this);
                if (mShowTitle && mMenu.getHeaderTitle() != null) {
                    FrameLayout framelayout = (FrameLayout)LayoutInflater.from(mContext).inflate(android.support.v7.appcompat.R.layout.abc_popup_menu_header_item_layout, ((android.view.ViewGroup) (obj)), false);
                    TextView textview = (TextView)framelayout.findViewById(0x1020016);
                    if (textview != null)
                        textview.setText(mMenu.getHeaderTitle());
                    framelayout.setEnabled(false);
                    ((ListView) (obj)).addHeaderView(framelayout, null, false);
                }
                mPopup.setAdapter(mAdapter);
                mPopup.show();
            }
        return flag1;
    }

    public void addMenu(MenuBuilder menubuilder) {
    }

    public void dismiss() {
        if (isShowing())
            mPopup.dismiss();
    }

    public boolean flagActionItems() {
        return false;
    }

    public ListView getListView() {
        return mPopup.getListView();
    }

    public boolean isShowing() {
        boolean flag;
        if (!mWasDismissed && mPopup.isShowing())
            flag = true;
        else
            flag = false;
        return flag;
    }

    public void onCloseMenu(MenuBuilder menubuilder, boolean flag) {
        if (menubuilder == mMenu) goto _L2; else goto _L1
_L1:
        return;
_L2:
        dismiss();
        if (mPresenterCallback != null)
            mPresenterCallback.onCloseMenu(menubuilder, flag);
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void onDismiss() {
        mWasDismissed = true;
        mMenu.close();
        if (mTreeObserver != null) {
            if (!mTreeObserver.isAlive())
                mTreeObserver = mShownAnchorView.getViewTreeObserver();
            mTreeObserver.removeGlobalOnLayoutListener(mGlobalLayoutListener);
            mTreeObserver = null;
        }
        if (mOnDismissListener != null)
            mOnDismissListener.onDismiss();
    }

    public boolean onKey(View view, int i, KeyEvent keyevent) {
        boolean flag = true;
        if (keyevent.getAction() == 1 && i == 82)
            dismiss();
        else
            flag = false;
        return flag;
    }

    public void onRestoreInstanceState(Parcelable parcelable) {
    }

    public Parcelable onSaveInstanceState() {
        return null;
    }

    public boolean onSubMenuSelected(SubMenuBuilder submenubuilder) {
        if (!submenubuilder.hasVisibleItems()) goto _L2; else goto _L1
_L1:
        MenuPopupHelper menupopuphelper;
        menupopuphelper = new MenuPopupHelper(mContext, submenubuilder, mShownAnchorView, mOverflowOnly, mPopupStyleAttr, mPopupStyleRes);
        menupopuphelper.setPresenterCallback(mPresenterCallback);
        menupopuphelper.setForceShowIcon(MenuPopup.shouldPreserveIconSpacing(submenubuilder));
        menupopuphelper.setOnDismissListener(mOnDismissListener);
        mOnDismissListener = null;
        mMenu.close(false);
        if (!menupopuphelper.tryShow(mPopup.getHorizontalOffset(), mPopup.getVerticalOffset())) goto _L2; else goto _L3
_L3:
        boolean flag;
        if (mPresenterCallback != null)
            mPresenterCallback.onOpenSubMenu(submenubuilder);
        flag = true;
_L5:
        return flag;
_L2:
        flag = false;
        if (true) goto _L5; else goto _L4
_L4:
    }

    public void setAnchorView(View view) {
        mAnchorView = view;
    }

    public void setCallback(MenuPresenter.Callback callback) {
        mPresenterCallback = callback;
    }

    public void setForceShowIcon(boolean flag) {
        mAdapter.setForceShowIcon(flag);
    }

    public void setGravity(int i) {
        mDropDownGravity = i;
    }

    public void setHorizontalOffset(int i) {
        mPopup.setHorizontalOffset(i);
    }

    public void setOnDismissListener(android.widget.PopupWindow.OnDismissListener ondismisslistener) {
        mOnDismissListener = ondismisslistener;
    }

    public void setShowTitle(boolean flag) {
        mShowTitle = flag;
    }

    public void setVerticalOffset(int i) {
        mPopup.setVerticalOffset(i);
    }

    public void show() {
        if (!tryShow())
            throw new IllegalStateException("StandardMenuPopup cannot be used without an anchor");
        else
            return;
    }

    public void updateMenuView(boolean flag) {
        mHasContentWidth = false;
        if (mAdapter != null)
            mAdapter.notifyDataSetChanged();
    }
}
