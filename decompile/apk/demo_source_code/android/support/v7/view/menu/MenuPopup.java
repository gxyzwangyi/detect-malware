// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v7.view.menu;

import android.content.Context;
import android.graphics.Rect;
import android.view.*;
import android.widget.*;

// Referenced classes of package android.support.v7.view.menu:
//            MenuPresenter, ShowableListMenu, MenuBuilder, MenuAdapter, 
//            MenuItemImpl, MenuView

abstract class MenuPopup
    implements MenuPresenter, ShowableListMenu, android.widget.AdapterView.OnItemClickListener {

    private Rect mEpicenterBounds;

    MenuPopup() {
    }

    protected static int measureIndividualMenuWidth(ListAdapter listadapter, ViewGroup viewgroup, Context context, int i) {
        int j;
        int k;
        int i1;
        int k1;
        int l1;
        int i2;
        View view;
        i2 = android.view.View.MeasureSpec.makeMeasureSpec(0, 0);
        l1 = android.view.View.MeasureSpec.makeMeasureSpec(0, 0);
        k1 = listadapter.getCount();
        k = 0;
        i1 = 0;
        view = null;
        j = 0;
_L5:
        if (k >= k1) goto _L2; else goto _L1
_L1:
        int l;
        int j1 = listadapter.getItemViewType(k);
        l = i1;
        if (j1 != i1) {
            l = j1;
            view = null;
        }
        if (viewgroup == null)
            viewgroup = new FrameLayout(context);
        view = listadapter.getView(k, view, viewgroup);
        view.measure(i2, l1);
        i1 = view.getMeasuredWidth();
        if (i1 < i) goto _L4; else goto _L3
_L3:
        return i;
_L4:
        if (i1 > j)
            j = i1;
        k++;
        i1 = l;
          goto _L5
_L2:
        i = j;
          goto _L3
    }

    protected static boolean shouldPreserveIconSpacing(MenuBuilder menubuilder) {
        boolean flag1 = false;
        int j = menubuilder.size();
        int i = 0;
        do {
label0:
            {
                boolean flag = flag1;
                if (i < j) {
                    MenuItem menuitem = menubuilder.getItem(i);
                    if (!menuitem.isVisible() || menuitem.getIcon() == null)
                        break label0;
                    flag = true;
                }
                return flag;
            }
            i++;
        } while (true);
    }

    protected static MenuAdapter toMenuAdapter(ListAdapter listadapter) {
        if (listadapter instanceof HeaderViewListAdapter)
            listadapter = (MenuAdapter)((HeaderViewListAdapter)listadapter).getWrappedAdapter();
        else
            listadapter = (MenuAdapter)listadapter;
        return listadapter;
    }

    public abstract void addMenu(MenuBuilder menubuilder);

    protected boolean closeMenuOnSubMenuOpened() {
        return true;
    }

    public boolean collapseItemActionView(MenuBuilder menubuilder, MenuItemImpl menuitemimpl) {
        return false;
    }

    public boolean expandItemActionView(MenuBuilder menubuilder, MenuItemImpl menuitemimpl) {
        return false;
    }

    public Rect getEpicenterBounds() {
        return mEpicenterBounds;
    }

    public int getId() {
        return 0;
    }

    public MenuView getMenuView(ViewGroup viewgroup) {
        throw new UnsupportedOperationException("MenuPopups manage their own views");
    }

    public void initForMenu(Context context, MenuBuilder menubuilder) {
    }

    public void onItemClick(AdapterView adapterview, View view, int i, long l) {
        view = (ListAdapter)adapterview.getAdapter();
        adapterview = toMenuAdapter(view).mAdapterMenu;
        view = (MenuItem)view.getItem(i);
        if (closeMenuOnSubMenuOpened())
            i = 0;
        else
            i = 4;
        adapterview.performItemAction(view, this, i);
    }

    public abstract void setAnchorView(View view);

    public void setEpicenterBounds(Rect rect) {
        mEpicenterBounds = rect;
    }

    public abstract void setForceShowIcon(boolean flag);

    public abstract void setGravity(int i);

    public abstract void setHorizontalOffset(int i);

    public abstract void setOnDismissListener(android.widget.PopupWindow.OnDismissListener ondismisslistener);

    public abstract void setShowTitle(boolean flag);

    public abstract void setVerticalOffset(int i);
}
