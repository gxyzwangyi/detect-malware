// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v7.util;

import android.util.SparseArray;
import java.lang.reflect.Array;

class TileList {
    public static class Tile {

        public int mItemCount;
        public final Object mItems[];
        Tile mNext;
        public int mStartPosition;

        boolean containsPosition(int i) {
            boolean flag;
            if (mStartPosition <= i && i < mStartPosition + mItemCount)
                flag = true;
            else
                flag = false;
            return flag;
        }

        Object getByPosition(int i) {
            return mItems[i - mStartPosition];
        }

        public Tile(Class class1, int i) {
            mItems = (Object[])(Object[])Array.newInstance(class1, i);
        }
    }


    Tile mLastAccessedTile;
    final int mTileSize;
    private final SparseArray mTiles = new SparseArray(10);

    public TileList(int i) {
        mTileSize = i;
    }

    public Tile addOrReplace(Tile tile) {
        int i = mTiles.indexOfKey(tile.mStartPosition);
        if (i >= 0) goto _L2; else goto _L1
_L1:
        Tile tile1;
        mTiles.put(tile.mStartPosition, tile);
        tile1 = null;
_L4:
        return tile1;
_L2:
        Tile tile2 = (Tile)mTiles.valueAt(i);
        mTiles.setValueAt(i, tile);
        tile1 = tile2;
        if (mLastAccessedTile == tile2) {
            mLastAccessedTile = tile;
            tile1 = tile2;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void clear() {
        mTiles.clear();
    }

    public Tile getAtIndex(int i) {
        return (Tile)mTiles.valueAt(i);
    }

    public Object getItemAt(int i) {
        if (mLastAccessedTile != null && mLastAccessedTile.containsPosition(i)) goto _L2; else goto _L1
_L1:
        int j;
        j = mTileSize;
        j = mTiles.indexOfKey(i - i % j);
        if (j >= 0) goto _L4; else goto _L3
_L3:
        Object obj = null;
_L6:
        return obj;
_L4:
        mLastAccessedTile = (Tile)mTiles.valueAt(j);
_L2:
        obj = mLastAccessedTile.getByPosition(i);
        if (true) goto _L6; else goto _L5
_L5:
    }

    public Tile removeAtPos(int i) {
        Tile tile = (Tile)mTiles.get(i);
        if (mLastAccessedTile == tile)
            mLastAccessedTile = null;
        mTiles.delete(i);
        return tile;
    }

    public int size() {
        return mTiles.size();
    }
}
