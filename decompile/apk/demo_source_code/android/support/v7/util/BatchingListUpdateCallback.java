// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v7.util;


// Referenced classes of package android.support.v7.util:
//            ListUpdateCallback

public class BatchingListUpdateCallback
    implements ListUpdateCallback {

    private static final int TYPE_ADD = 1;
    private static final int TYPE_CHANGE = 3;
    private static final int TYPE_NONE = 0;
    private static final int TYPE_REMOVE = 2;
    int mLastEventCount;
    Object mLastEventPayload;
    int mLastEventPosition;
    int mLastEventType;
    final ListUpdateCallback mWrapped;

    public BatchingListUpdateCallback(ListUpdateCallback listupdatecallback) {
        mLastEventType = 0;
        mLastEventPosition = -1;
        mLastEventCount = -1;
        mLastEventPayload = null;
        mWrapped = listupdatecallback;
    }

    public void dispatchLastEvent() {
        if (mLastEventType != 0) goto _L2; else goto _L1
_L1:
        return;
_L2:
        mLastEventType;
        JVM INSTR tableswitch 1 3: default 40
    //                   1 53
    //                   2 73
    //                   3 93;
           goto _L3 _L4 _L5 _L6
_L6:
        break MISSING_BLOCK_LABEL_93;
_L3:
        break; /* Loop/switch isn't completed */
_L4:
        break; /* Loop/switch isn't completed */
_L8:
        mLastEventPayload = null;
        mLastEventType = 0;
        if (true) goto _L1; else goto _L7
_L7:
        mWrapped.onInserted(mLastEventPosition, mLastEventCount);
          goto _L8
_L5:
        mWrapped.onRemoved(mLastEventPosition, mLastEventCount);
          goto _L8
        mWrapped.onChanged(mLastEventPosition, mLastEventCount, mLastEventPayload);
          goto _L8
    }

    public void onChanged(int i, int j, Object obj) {
        if (mLastEventType == 3 && i <= mLastEventPosition + mLastEventCount && i + j >= mLastEventPosition && mLastEventPayload == obj) {
            int l = mLastEventPosition;
            int k = mLastEventCount;
            mLastEventPosition = Math.min(i, mLastEventPosition);
            mLastEventCount = Math.max(l + k, i + j) - mLastEventPosition;
        } else {
            dispatchLastEvent();
            mLastEventPosition = i;
            mLastEventCount = j;
            mLastEventPayload = obj;
            mLastEventType = 3;
        }
    }

    public void onInserted(int i, int j) {
        if (mLastEventType == 1 && i >= mLastEventPosition && i <= mLastEventPosition + mLastEventCount) {
            mLastEventCount = mLastEventCount + j;
            mLastEventPosition = Math.min(i, mLastEventPosition);
        } else {
            dispatchLastEvent();
            mLastEventPosition = i;
            mLastEventCount = j;
            mLastEventType = 1;
        }
    }

    public void onMoved(int i, int j) {
        dispatchLastEvent();
        mWrapped.onMoved(i, j);
    }

    public void onRemoved(int i, int j) {
        if (mLastEventType == 2 && mLastEventPosition >= i && mLastEventPosition <= i + j) {
            mLastEventCount = mLastEventCount + j;
            mLastEventPosition = i;
        } else {
            dispatchLastEvent();
            mLastEventPosition = i;
            mLastEventCount = j;
            mLastEventType = 2;
        }
    }
}
