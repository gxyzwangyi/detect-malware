// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v7.content.res;

import android.content.Context;
import android.content.res.*;
import android.graphics.drawable.Drawable;
import android.support.v4.content.ContextCompat;
import android.support.v7.widget.AppCompatDrawableManager;
import android.util.*;
import java.util.WeakHashMap;

// Referenced classes of package android.support.v7.content.res:
//            AppCompatColorStateListInflater

public final class AppCompatResources {
    private static class ColorStateListCacheEntry {

        final Configuration configuration;
        final ColorStateList value;

        ColorStateListCacheEntry(ColorStateList colorstatelist, Configuration configuration1) {
            value = colorstatelist;
            configuration = configuration1;
        }
    }


    private static final String LOG_TAG = "AppCompatResources";
    private static final ThreadLocal TL_TYPED_VALUE = new ThreadLocal();
    private static final Object sColorStateCacheLock = new Object();
    private static final WeakHashMap sColorStateCaches = new WeakHashMap(0);

    private AppCompatResources() {
    }

    private static void addColorStateListToCache(Context context, int i, ColorStateList colorstatelist) {
        Object obj = sColorStateCacheLock;
        obj;
        JVM INSTR monitorenter ;
        SparseArray sparsearray1 = (SparseArray)sColorStateCaches.get(context);
        SparseArray sparsearray;
        sparsearray = sparsearray1;
        if (sparsearray1 != null)
            break MISSING_BLOCK_LABEL_45;
        sparsearray = JVM INSTR new #49  <Class SparseArray>;
        sparsearray.SparseArray();
        sColorStateCaches.put(context, sparsearray);
        ColorStateListCacheEntry colorstatelistcacheentry = JVM INSTR new #6   <Class AppCompatResources$ColorStateListCacheEntry>;
        colorstatelistcacheentry.ColorStateListCacheEntry(colorstatelist, context.getResources().getConfiguration());
        sparsearray.append(i, colorstatelistcacheentry);
        obj;
        JVM INSTR monitorexit ;
        return;
        context;
        obj;
        JVM INSTR monitorexit ;
        throw context;
    }

    private static ColorStateList getCachedColorStateList(Context context, int i) {
        Object obj = sColorStateCacheLock;
        obj;
        JVM INSTR monitorenter ;
        SparseArray sparsearray = (SparseArray)sColorStateCaches.get(context);
        if (sparsearray == null) goto _L2; else goto _L1
_L1:
        if (sparsearray.size() <= 0) goto _L2; else goto _L3
_L3:
        ColorStateListCacheEntry colorstatelistcacheentry = (ColorStateListCacheEntry)sparsearray.get(i);
        if (colorstatelistcacheentry == null) goto _L2; else goto _L4
_L4:
        if (!colorstatelistcacheentry.configuration.equals(context.getResources().getConfiguration())) goto _L6; else goto _L5
_L5:
        context = colorstatelistcacheentry.value;
        obj;
        JVM INSTR monitorexit ;
_L8:
        return context;
_L6:
        sparsearray.remove(i);
_L2:
        obj;
        JVM INSTR monitorexit ;
        context = null;
        if (true) goto _L8; else goto _L7
_L7:
        context;
        obj;
        JVM INSTR monitorexit ;
        throw context;
    }

    public static ColorStateList getColorStateList(Context context, int i) {
        if (android.os.Build.VERSION.SDK_INT < 23) goto _L2; else goto _L1
_L1:
        ColorStateList colorstatelist = context.getColorStateList(i);
_L4:
        return colorstatelist;
_L2:
        ColorStateList colorstatelist1 = getCachedColorStateList(context, i);
        colorstatelist = colorstatelist1;
        if (colorstatelist1 == null) {
            colorstatelist = inflateColorStateList(context, i);
            if (colorstatelist != null)
                addColorStateListToCache(context, i, colorstatelist);
            else
                colorstatelist = ContextCompat.getColorStateList(context, i);
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static Drawable getDrawable(Context context, int i) {
        return AppCompatDrawableManager.get().getDrawable(context, i);
    }

    private static TypedValue getTypedValue() {
        TypedValue typedvalue1 = (TypedValue)TL_TYPED_VALUE.get();
        TypedValue typedvalue = typedvalue1;
        if (typedvalue1 == null) {
            typedvalue = new TypedValue();
            TL_TYPED_VALUE.set(typedvalue);
        }
        return typedvalue;
    }

    private static ColorStateList inflateColorStateList(Context context, int i) {
        Object obj = null;
        if (isColorInt(context, i)) {
            context = obj;
        } else {
            Resources resources = context.getResources();
            android.content.res.XmlResourceParser xmlresourceparser = resources.getXml(i);
            try {
                context = AppCompatColorStateListInflater.createFromXml(resources, xmlresourceparser, context.getTheme());
            }
            // Misplaced declaration of an exception variable
            catch (Context context) {
                Log.e("AppCompatResources", "Failed to inflate ColorStateList, leaving it to the framework", context);
                context = obj;
            }
        }
        return context;
    }

    private static boolean isColorInt(Context context, int i) {
        boolean flag = true;
        context = context.getResources();
        TypedValue typedvalue = getTypedValue();
        context.getValue(i, typedvalue, true);
        if (typedvalue.type < 28 || typedvalue.type > 31)
            flag = false;
        return flag;
    }

}
