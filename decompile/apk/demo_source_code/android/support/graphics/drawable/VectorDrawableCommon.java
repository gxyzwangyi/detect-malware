// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.graphics.drawable;

import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.*;
import android.graphics.drawable.Drawable;
import android.support.v4.graphics.drawable.DrawableCompat;
import android.support.v4.graphics.drawable.TintAwareDrawable;
import android.util.AttributeSet;

abstract class VectorDrawableCommon extends Drawable
    implements TintAwareDrawable {

    Drawable mDelegateDrawable;

    VectorDrawableCommon() {
    }

    static TypedArray obtainAttributes(Resources resources, android.content.res.Resources.Theme theme, AttributeSet attributeset, int ai[]) {
        if (theme == null)
            resources = resources.obtainAttributes(attributeset, ai);
        else
            resources = theme.obtainStyledAttributes(attributeset, ai, 0, 0);
        return resources;
    }

    public void applyTheme(android.content.res.Resources.Theme theme) {
        if (mDelegateDrawable != null)
            DrawableCompat.applyTheme(mDelegateDrawable, theme);
    }

    public void clearColorFilter() {
        if (mDelegateDrawable != null)
            mDelegateDrawable.clearColorFilter();
        else
            super.clearColorFilter();
    }

    public ColorFilter getColorFilter() {
        ColorFilter colorfilter;
        if (mDelegateDrawable != null)
            colorfilter = DrawableCompat.getColorFilter(mDelegateDrawable);
        else
            colorfilter = null;
        return colorfilter;
    }

    public Drawable getCurrent() {
        Drawable drawable;
        if (mDelegateDrawable != null)
            drawable = mDelegateDrawable.getCurrent();
        else
            drawable = super.getCurrent();
        return drawable;
    }

    public int getLayoutDirection() {
        if (mDelegateDrawable != null)
            DrawableCompat.getLayoutDirection(mDelegateDrawable);
        return 0;
    }

    public int getMinimumHeight() {
        int i;
        if (mDelegateDrawable != null)
            i = mDelegateDrawable.getMinimumHeight();
        else
            i = super.getMinimumHeight();
        return i;
    }

    public int getMinimumWidth() {
        int i;
        if (mDelegateDrawable != null)
            i = mDelegateDrawable.getMinimumWidth();
        else
            i = super.getMinimumWidth();
        return i;
    }

    public boolean getPadding(Rect rect) {
        boolean flag;
        if (mDelegateDrawable != null)
            flag = mDelegateDrawable.getPadding(rect);
        else
            flag = super.getPadding(rect);
        return flag;
    }

    public int[] getState() {
        int ai[];
        if (mDelegateDrawable != null)
            ai = mDelegateDrawable.getState();
        else
            ai = super.getState();
        return ai;
    }

    public Region getTransparentRegion() {
        Region region;
        if (mDelegateDrawable != null)
            region = mDelegateDrawable.getTransparentRegion();
        else
            region = super.getTransparentRegion();
        return region;
    }

    public boolean isAutoMirrored() {
        if (mDelegateDrawable != null)
            DrawableCompat.isAutoMirrored(mDelegateDrawable);
        return false;
    }

    public void jumpToCurrentState() {
        if (mDelegateDrawable != null)
            DrawableCompat.jumpToCurrentState(mDelegateDrawable);
    }

    protected void onBoundsChange(Rect rect) {
        if (mDelegateDrawable != null)
            mDelegateDrawable.setBounds(rect);
        else
            super.onBoundsChange(rect);
    }

    protected boolean onLevelChange(int i) {
        boolean flag;
        if (mDelegateDrawable != null)
            flag = mDelegateDrawable.setLevel(i);
        else
            flag = super.onLevelChange(i);
        return flag;
    }

    public void setAutoMirrored(boolean flag) {
        if (mDelegateDrawable != null)
            DrawableCompat.setAutoMirrored(mDelegateDrawable, flag);
    }

    public void setChangingConfigurations(int i) {
        if (mDelegateDrawable != null)
            mDelegateDrawable.setChangingConfigurations(i);
        else
            super.setChangingConfigurations(i);
    }

    public void setColorFilter(int i, android.graphics.PorterDuff.Mode mode) {
        if (mDelegateDrawable != null)
            mDelegateDrawable.setColorFilter(i, mode);
        else
            super.setColorFilter(i, mode);
    }

    public void setFilterBitmap(boolean flag) {
        if (mDelegateDrawable != null)
            mDelegateDrawable.setFilterBitmap(flag);
    }

    public void setHotspot(float f, float f1) {
        if (mDelegateDrawable != null)
            DrawableCompat.setHotspot(mDelegateDrawable, f, f1);
    }

    public void setHotspotBounds(int i, int j, int k, int l) {
        if (mDelegateDrawable != null)
            DrawableCompat.setHotspotBounds(mDelegateDrawable, i, j, k, l);
    }

    public boolean setState(int ai[]) {
        boolean flag;
        if (mDelegateDrawable != null)
            flag = mDelegateDrawable.setState(ai);
        else
            flag = super.setState(ai);
        return flag;
    }
}
