// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.graphics.drawable;

import android.animation.*;
import android.content.Context;
import android.content.res.*;
import android.graphics.*;
import android.graphics.drawable.*;
import android.support.v4.content.res.ResourcesCompat;
import android.support.v4.graphics.drawable.DrawableCompat;
import android.support.v4.util.ArrayMap;
import android.util.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

// Referenced classes of package android.support.graphics.drawable:
//            VectorDrawableCommon, VectorDrawableCompat, AndroidResources

public class AnimatedVectorDrawableCompat extends VectorDrawableCommon
    implements Animatable {
    private static class AnimatedVectorDrawableCompatState extends android.graphics.drawable.Drawable.ConstantState {

        ArrayList mAnimators;
        int mChangingConfigurations;
        ArrayMap mTargetNameMap;
        VectorDrawableCompat mVectorDrawable;

        public int getChangingConfigurations() {
            return mChangingConfigurations;
        }

        public Drawable newDrawable() {
            throw new IllegalStateException("No constant state support for SDK < 23.");
        }

        public Drawable newDrawable(Resources resources) {
            throw new IllegalStateException("No constant state support for SDK < 23.");
        }

        public AnimatedVectorDrawableCompatState(Context context, AnimatedVectorDrawableCompatState animatedvectordrawablecompatstate, android.graphics.drawable.Drawable.Callback callback, Resources resources) {
            int i = 0;
            super();
            if (animatedvectordrawablecompatstate != null) {
                mChangingConfigurations = animatedvectordrawablecompatstate.mChangingConfigurations;
                if (animatedvectordrawablecompatstate.mVectorDrawable != null) {
                    context = animatedvectordrawablecompatstate.mVectorDrawable.getConstantState();
                    int j;
                    if (resources != null)
                        mVectorDrawable = (VectorDrawableCompat)context.newDrawable(resources);
                    else
                        mVectorDrawable = (VectorDrawableCompat)context.newDrawable();
                    mVectorDrawable = (VectorDrawableCompat)mVectorDrawable.mutate();
                    mVectorDrawable.setCallback(callback);
                    mVectorDrawable.setBounds(animatedvectordrawablecompatstate.mVectorDrawable.getBounds());
                    mVectorDrawable.setAllowCaching(false);
                }
                if (animatedvectordrawablecompatstate.mAnimators != null) {
                    j = animatedvectordrawablecompatstate.mAnimators.size();
                    mAnimators = new ArrayList(j);
                    mTargetNameMap = new ArrayMap(j);
                    for (; i < j; i++) {
                        callback = (Animator)animatedvectordrawablecompatstate.mAnimators.get(i);
                        context = callback.clone();
                        callback = (String)animatedvectordrawablecompatstate.mTargetNameMap.get(callback);
                        context.setTarget(mVectorDrawable.getTargetByName(callback));
                        mAnimators.add(context);
                        mTargetNameMap.put(context, callback);
                    }

                }
            }
        }
    }

    private static class AnimatedVectorDrawableDelegateState extends android.graphics.drawable.Drawable.ConstantState {

        private final android.graphics.drawable.Drawable.ConstantState mDelegateState;

        public boolean canApplyTheme() {
            return mDelegateState.canApplyTheme();
        }

        public int getChangingConfigurations() {
            return mDelegateState.getChangingConfigurations();
        }

        public Drawable newDrawable() {
            AnimatedVectorDrawableCompat animatedvectordrawablecompat = new AnimatedVectorDrawableCompat();
            animatedvectordrawablecompat.mDelegateDrawable = mDelegateState.newDrawable();
            animatedvectordrawablecompat.mDelegateDrawable.setCallback(animatedvectordrawablecompat.mCallback);
            return animatedvectordrawablecompat;
        }

        public Drawable newDrawable(Resources resources) {
            AnimatedVectorDrawableCompat animatedvectordrawablecompat = new AnimatedVectorDrawableCompat();
            animatedvectordrawablecompat.mDelegateDrawable = mDelegateState.newDrawable(resources);
            animatedvectordrawablecompat.mDelegateDrawable.setCallback(animatedvectordrawablecompat.mCallback);
            return animatedvectordrawablecompat;
        }

        public Drawable newDrawable(Resources resources, android.content.res.Resources.Theme theme) {
            AnimatedVectorDrawableCompat animatedvectordrawablecompat = new AnimatedVectorDrawableCompat();
            animatedvectordrawablecompat.mDelegateDrawable = mDelegateState.newDrawable(resources, theme);
            animatedvectordrawablecompat.mDelegateDrawable.setCallback(animatedvectordrawablecompat.mCallback);
            return animatedvectordrawablecompat;
        }

        public AnimatedVectorDrawableDelegateState(android.graphics.drawable.Drawable.ConstantState constantstate) {
            mDelegateState = constantstate;
        }
    }


    private static final String ANIMATED_VECTOR = "animated-vector";
    private static final boolean DBG_ANIMATION_VECTOR_DRAWABLE = false;
    private static final String LOGTAG = "AnimatedVDCompat";
    private static final String TARGET = "target";
    private AnimatedVectorDrawableCompatState mAnimatedVectorState;
    private ArgbEvaluator mArgbEvaluator;
    AnimatedVectorDrawableDelegateState mCachedConstantStateDelegate;
    final android.graphics.drawable.Drawable.Callback mCallback;
    private Context mContext;

    AnimatedVectorDrawableCompat() {
        this(null, null, null);
    }

    private AnimatedVectorDrawableCompat(Context context) {
        this(context, null, null);
    }

    private AnimatedVectorDrawableCompat(Context context, AnimatedVectorDrawableCompatState animatedvectordrawablecompatstate, Resources resources) {
        mArgbEvaluator = null;
        mCallback = new android.graphics.drawable.Drawable.Callback() {

            final AnimatedVectorDrawableCompat this$0;

            public void invalidateDrawable(Drawable drawable) {
                invalidateSelf();
            }

            public void scheduleDrawable(Drawable drawable, Runnable runnable, long l) {
                scheduleSelf(runnable, l);
            }

            public void unscheduleDrawable(Drawable drawable, Runnable runnable) {
                unscheduleSelf(runnable);
            }

             {
                this$0 = AnimatedVectorDrawableCompat.this;
                super();
            }
        }
;
        mContext = context;
        if (animatedvectordrawablecompatstate != null)
            mAnimatedVectorState = animatedvectordrawablecompatstate;
        else
            mAnimatedVectorState = new AnimatedVectorDrawableCompatState(context, animatedvectordrawablecompatstate, mCallback, resources);
    }

    public static AnimatedVectorDrawableCompat create(Context context, int i) {
        if (android.os.Build.VERSION.SDK_INT < 23) goto _L2; else goto _L1
_L1:
        AnimatedVectorDrawableCompat animatedvectordrawablecompat = new AnimatedVectorDrawableCompat(context);
        animatedvectordrawablecompat.mDelegateDrawable = ResourcesCompat.getDrawable(context.getResources(), i, context.getTheme());
        animatedvectordrawablecompat.mDelegateDrawable.setCallback(animatedvectordrawablecompat.mCallback);
        animatedvectordrawablecompat.mCachedConstantStateDelegate = new AnimatedVectorDrawableDelegateState(animatedvectordrawablecompat.mDelegateDrawable.getConstantState());
        context = animatedvectordrawablecompat;
_L3:
        return context;
_L2:
        Object obj = context.getResources();
        AttributeSet attributeset;
        obj = ((Resources) (obj)).getXml(i);
        attributeset = Xml.asAttributeSet(((XmlPullParser) (obj)));
label0:
        {
            do
                i = ((XmlPullParser) (obj)).next();
            while (i != 2 && i != 1);
            if (i == 2)
                break label0;
            try {
                context = JVM INSTR new #71  <Class XmlPullParserException>;
                context.XmlPullParserException("No start tag found");
                throw context;
            }
            // Misplaced declaration of an exception variable
            catch (Context context) {
                Log.e("AnimatedVDCompat", "parser error", context);
            }
            // Misplaced declaration of an exception variable
            catch (Context context) {
                Log.e("AnimatedVDCompat", "parser error", context);
            }
            context = null;
        }
          goto _L3
        context = createFromXmlInner(context, context.getResources(), ((XmlPullParser) (obj)), attributeset, context.getTheme());
          goto _L3
    }

    public static AnimatedVectorDrawableCompat createFromXmlInner(Context context, Resources resources, XmlPullParser xmlpullparser, AttributeSet attributeset, android.content.res.Resources.Theme theme) {
        context = new AnimatedVectorDrawableCompat(context);
        context.inflate(resources, xmlpullparser, attributeset, theme);
        return context;
    }

    private boolean isStarted() {
        ArrayList arraylist = mAnimatedVectorState.mAnimators;
        if (arraylist != null) goto _L2; else goto _L1
_L1:
        boolean flag = false;
_L4:
        return flag;
_L2:
        int j = arraylist.size();
        int i = 0;
        do {
            if (i >= j)
                break;
            if (((Animator)arraylist.get(i)).isRunning()) {
                flag = true;
                continue; /* Loop/switch isn't completed */
            }
            i++;
        } while (true);
        flag = false;
        if (true) goto _L4; else goto _L3
_L3:
    }

    static TypedArray obtainAttributes(Resources resources, android.content.res.Resources.Theme theme, AttributeSet attributeset, int ai[]) {
        if (theme == null)
            resources = resources.obtainAttributes(attributeset, ai);
        else
            resources = theme.obtainStyledAttributes(attributeset, ai, 0, 0);
        return resources;
    }

    private void setupAnimatorsForTarget(String s, Animator animator) {
        animator.setTarget(mAnimatedVectorState.mVectorDrawable.getTargetByName(s));
        if (android.os.Build.VERSION.SDK_INT < 21)
            setupColorAnimator(animator);
        if (mAnimatedVectorState.mAnimators == null) {
            mAnimatedVectorState.mAnimators = new ArrayList();
            mAnimatedVectorState.mTargetNameMap = new ArrayMap();
        }
        mAnimatedVectorState.mAnimators.add(animator);
        mAnimatedVectorState.mTargetNameMap.put(animator, s);
    }

    private void setupColorAnimator(Animator animator) {
        if (animator instanceof AnimatorSet) {
            ArrayList arraylist = ((AnimatorSet)animator).getChildAnimations();
            if (arraylist != null) {
                for (int i = 0; i < arraylist.size(); i++)
                    setupColorAnimator((Animator)arraylist.get(i));

            }
        }
        if (animator instanceof ObjectAnimator) {
            ObjectAnimator objectanimator = (ObjectAnimator)animator;
            animator = objectanimator.getPropertyName();
            if ("fillColor".equals(animator) || "strokeColor".equals(animator)) {
                if (mArgbEvaluator == null)
                    mArgbEvaluator = new ArgbEvaluator();
                objectanimator.setEvaluator(mArgbEvaluator);
            }
        }
    }

    public void applyTheme(android.content.res.Resources.Theme theme) {
        if (mDelegateDrawable != null)
            DrawableCompat.applyTheme(mDelegateDrawable, theme);
    }

    public boolean canApplyTheme() {
        boolean flag;
        if (mDelegateDrawable != null)
            flag = DrawableCompat.canApplyTheme(mDelegateDrawable);
        else
            flag = false;
        return flag;
    }

    public volatile void clearColorFilter() {
        super.clearColorFilter();
    }

    public void draw(Canvas canvas) {
        if (mDelegateDrawable == null) goto _L2; else goto _L1
_L1:
        mDelegateDrawable.draw(canvas);
_L4:
        return;
_L2:
        mAnimatedVectorState.mVectorDrawable.draw(canvas);
        if (isStarted())
            invalidateSelf();
        if (true) goto _L4; else goto _L3
_L3:
    }

    public int getAlpha() {
        int i;
        if (mDelegateDrawable != null)
            i = DrawableCompat.getAlpha(mDelegateDrawable);
        else
            i = mAnimatedVectorState.mVectorDrawable.getAlpha();
        return i;
    }

    public int getChangingConfigurations() {
        int i;
        if (mDelegateDrawable != null)
            i = mDelegateDrawable.getChangingConfigurations();
        else
            i = super.getChangingConfigurations() | mAnimatedVectorState.mChangingConfigurations;
        return i;
    }

    public volatile ColorFilter getColorFilter() {
        return super.getColorFilter();
    }

    public android.graphics.drawable.Drawable.ConstantState getConstantState() {
        AnimatedVectorDrawableDelegateState animatedvectordrawabledelegatestate;
        if (mDelegateDrawable != null)
            animatedvectordrawabledelegatestate = new AnimatedVectorDrawableDelegateState(mDelegateDrawable.getConstantState());
        else
            animatedvectordrawabledelegatestate = null;
        return animatedvectordrawabledelegatestate;
    }

    public volatile Drawable getCurrent() {
        return super.getCurrent();
    }

    public int getIntrinsicHeight() {
        int i;
        if (mDelegateDrawable != null)
            i = mDelegateDrawable.getIntrinsicHeight();
        else
            i = mAnimatedVectorState.mVectorDrawable.getIntrinsicHeight();
        return i;
    }

    public int getIntrinsicWidth() {
        int i;
        if (mDelegateDrawable != null)
            i = mDelegateDrawable.getIntrinsicWidth();
        else
            i = mAnimatedVectorState.mVectorDrawable.getIntrinsicWidth();
        return i;
    }

    public volatile int getLayoutDirection() {
        return super.getLayoutDirection();
    }

    public volatile int getMinimumHeight() {
        return super.getMinimumHeight();
    }

    public volatile int getMinimumWidth() {
        return super.getMinimumWidth();
    }

    public int getOpacity() {
        int i;
        if (mDelegateDrawable != null)
            i = mDelegateDrawable.getOpacity();
        else
            i = mAnimatedVectorState.mVectorDrawable.getOpacity();
        return i;
    }

    public volatile boolean getPadding(Rect rect) {
        return super.getPadding(rect);
    }

    public volatile int[] getState() {
        return super.getState();
    }

    public volatile Region getTransparentRegion() {
        return super.getTransparentRegion();
    }

    public void inflate(Resources resources, XmlPullParser xmlpullparser, AttributeSet attributeset) {
        inflate(resources, xmlpullparser, attributeset, null);
    }

    public void inflate(Resources resources, XmlPullParser xmlpullparser, AttributeSet attributeset, android.content.res.Resources.Theme theme) {
        if (mDelegateDrawable != null) {
            DrawableCompat.inflate(mDelegateDrawable, resources, xmlpullparser, attributeset, theme);
        } else {
            int i = xmlpullparser.getEventType();
            while (i != 1)  {
                if (i == 2) {
                    Object obj = xmlpullparser.getName();
                    if ("animated-vector".equals(obj)) {
                        obj = obtainAttributes(resources, theme, attributeset, AndroidResources.styleable_AnimatedVectorDrawable);
                        i = ((TypedArray) (obj)).getResourceId(0, 0);
                        if (i != 0) {
                            VectorDrawableCompat vectordrawablecompat = VectorDrawableCompat.create(resources, i, theme);
                            vectordrawablecompat.setAllowCaching(false);
                            vectordrawablecompat.setCallback(mCallback);
                            if (mAnimatedVectorState.mVectorDrawable != null)
                                mAnimatedVectorState.mVectorDrawable.setCallback(null);
                            mAnimatedVectorState.mVectorDrawable = vectordrawablecompat;
                        }
                        ((TypedArray) (obj)).recycle();
                    } else
                    if ("target".equals(obj)) {
label0:
                        {
                            TypedArray typedarray = resources.obtainAttributes(attributeset, AndroidResources.styleable_AnimatedVectorDrawableTarget);
                            String s = typedarray.getString(0);
                            int j = typedarray.getResourceId(1, 0);
                            if (j != 0) {
                                if (mContext == null)
                                    break label0;
                                setupAnimatorsForTarget(s, AnimatorInflater.loadAnimator(mContext, j));
                            }
                            typedarray.recycle();
                        }
                    }
                }
                i = xmlpullparser.next();
            }
        }
        return;
        throw new IllegalStateException("Context can't be null when inflating animators");
    }

    public volatile boolean isAutoMirrored() {
        return super.isAutoMirrored();
    }

    public boolean isRunning() {
        if (mDelegateDrawable == null) goto _L2; else goto _L1
_L1:
        boolean flag = ((AnimatedVectorDrawable)mDelegateDrawable).isRunning();
_L4:
        return flag;
_L2:
        ArrayList arraylist = mAnimatedVectorState.mAnimators;
        int j = arraylist.size();
        int i = 0;
        do {
            if (i >= j)
                break;
            if (((Animator)arraylist.get(i)).isRunning()) {
                flag = true;
                continue; /* Loop/switch isn't completed */
            }
            i++;
        } while (true);
        flag = false;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public boolean isStateful() {
        boolean flag;
        if (mDelegateDrawable != null)
            flag = mDelegateDrawable.isStateful();
        else
            flag = mAnimatedVectorState.mVectorDrawable.isStateful();
        return flag;
    }

    public volatile void jumpToCurrentState() {
        super.jumpToCurrentState();
    }

    public Drawable mutate() {
        if (mDelegateDrawable != null) {
            mDelegateDrawable.mutate();
            return this;
        } else {
            throw new IllegalStateException("Mutate() is not supported for older platform");
        }
    }

    protected void onBoundsChange(Rect rect) {
        if (mDelegateDrawable != null)
            mDelegateDrawable.setBounds(rect);
        else
            mAnimatedVectorState.mVectorDrawable.setBounds(rect);
    }

    protected boolean onLevelChange(int i) {
        boolean flag;
        if (mDelegateDrawable != null)
            flag = mDelegateDrawable.setLevel(i);
        else
            flag = mAnimatedVectorState.mVectorDrawable.setLevel(i);
        return flag;
    }

    protected boolean onStateChange(int ai[]) {
        boolean flag;
        if (mDelegateDrawable != null)
            flag = mDelegateDrawable.setState(ai);
        else
            flag = mAnimatedVectorState.mVectorDrawable.setState(ai);
        return flag;
    }

    public void setAlpha(int i) {
        if (mDelegateDrawable != null)
            mDelegateDrawable.setAlpha(i);
        else
            mAnimatedVectorState.mVectorDrawable.setAlpha(i);
    }

    public volatile void setAutoMirrored(boolean flag) {
        super.setAutoMirrored(flag);
    }

    public volatile void setChangingConfigurations(int i) {
        super.setChangingConfigurations(i);
    }

    public volatile void setColorFilter(int i, android.graphics.PorterDuff.Mode mode) {
        super.setColorFilter(i, mode);
    }

    public void setColorFilter(ColorFilter colorfilter) {
        if (mDelegateDrawable != null)
            mDelegateDrawable.setColorFilter(colorfilter);
        else
            mAnimatedVectorState.mVectorDrawable.setColorFilter(colorfilter);
    }

    public volatile void setFilterBitmap(boolean flag) {
        super.setFilterBitmap(flag);
    }

    public volatile void setHotspot(float f, float f1) {
        super.setHotspot(f, f1);
    }

    public volatile void setHotspotBounds(int i, int j, int k, int l) {
        super.setHotspotBounds(i, j, k, l);
    }

    public volatile boolean setState(int ai[]) {
        return super.setState(ai);
    }

    public void setTint(int i) {
        if (mDelegateDrawable != null)
            DrawableCompat.setTint(mDelegateDrawable, i);
        else
            mAnimatedVectorState.mVectorDrawable.setTint(i);
    }

    public void setTintList(ColorStateList colorstatelist) {
        if (mDelegateDrawable != null)
            DrawableCompat.setTintList(mDelegateDrawable, colorstatelist);
        else
            mAnimatedVectorState.mVectorDrawable.setTintList(colorstatelist);
    }

    public void setTintMode(android.graphics.PorterDuff.Mode mode) {
        if (mDelegateDrawable != null)
            DrawableCompat.setTintMode(mDelegateDrawable, mode);
        else
            mAnimatedVectorState.mVectorDrawable.setTintMode(mode);
    }

    public boolean setVisible(boolean flag, boolean flag1) {
        if (mDelegateDrawable != null) {
            flag = mDelegateDrawable.setVisible(flag, flag1);
        } else {
            mAnimatedVectorState.mVectorDrawable.setVisible(flag, flag1);
            flag = super.setVisible(flag, flag1);
        }
        return flag;
    }

    public void start() {
        if (mDelegateDrawable == null) goto _L2; else goto _L1
_L1:
        ((AnimatedVectorDrawable)mDelegateDrawable).start();
_L4:
        return;
_L2:
        if (!isStarted()) {
            ArrayList arraylist = mAnimatedVectorState.mAnimators;
            int j = arraylist.size();
            for (int i = 0; i < j; i++)
                ((Animator)arraylist.get(i)).start();

            invalidateSelf();
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void stop() {
        if (mDelegateDrawable != null) {
            ((AnimatedVectorDrawable)mDelegateDrawable).stop();
        } else {
            ArrayList arraylist = mAnimatedVectorState.mAnimators;
            int j = arraylist.size();
            int i = 0;
            while (i < j)  {
                ((Animator)arraylist.get(i)).end();
                i++;
            }
        }
    }
}
