// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.multidex;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.pm.ApplicationInfo;
import android.util.Log;
import java.io.*;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.*;

// Referenced classes of package android.support.multidex:
//            ZipUtil

final class MultiDexExtractor {

    private static final int BUFFER_SIZE = 16384;
    private static final String DEX_PREFIX = "classes";
    private static final String DEX_SUFFIX = ".dex";
    private static final String EXTRACTED_NAME_EXT = ".classes";
    private static final String EXTRACTED_SUFFIX = ".zip";
    private static final String KEY_CRC = "crc";
    private static final String KEY_DEX_NUMBER = "dex.number";
    private static final String KEY_TIME_STAMP = "timestamp";
    private static final int MAX_EXTRACT_ATTEMPTS = 3;
    private static final long NO_VALUE = -1L;
    private static final String PREFS_FILE = "multidex.version";
    private static final String TAG = "MultiDex";
    private static Method sApplyMethod = android/content/SharedPreferences$Editor.getMethod("apply", new Class[0]);

    MultiDexExtractor() {
    }

    private static void apply(android.content.SharedPreferences.Editor editor) {
        if (sApplyMethod == null)
            break MISSING_BLOCK_LABEL_20;
        sApplyMethod.invoke(editor, new Object[0]);
_L1:
        return;
        Object obj;
        obj;
_L2:
        editor.commit();
          goto _L1
        obj;
          goto _L2
    }

    private static void closeQuietly(Closeable closeable) {
        closeable.close();
_L1:
        return;
        closeable;
        Log.w("MultiDex", "Failed to close resource", closeable);
          goto _L1
    }

    private static void extract(ZipFile zipfile, ZipEntry zipentry, File file, String s) {
        zipfile = zipfile.getInputStream(zipentry);
        s = File.createTempFile(s, ".zip", file.getParentFile());
        Log.i("MultiDex", (new StringBuilder()).append("Extracting ").append(s.getPath()).toString());
        Object obj;
        obj = JVM INSTR new #137 <Class ZipOutputStream>;
        BufferedOutputStream bufferedoutputstream = JVM INSTR new #139 <Class BufferedOutputStream>;
        FileOutputStream fileoutputstream = JVM INSTR new #141 <Class FileOutputStream>;
        fileoutputstream.FileOutputStream(s);
        bufferedoutputstream.BufferedOutputStream(fileoutputstream);
        ((ZipOutputStream) (obj)).ZipOutputStream(bufferedoutputstream);
        int i;
        ZipEntry zipentry1 = JVM INSTR new #150 <Class ZipEntry>;
        zipentry1.ZipEntry("classes.dex");
        zipentry1.setTime(zipentry.getTime());
        ((ZipOutputStream) (obj)).putNextEntry(zipentry1);
        zipentry = new byte[16384];
        i = zipfile.read(zipentry);
_L1:
        if (i == -1)
            break MISSING_BLOCK_LABEL_146;
        ((ZipOutputStream) (obj)).write(zipentry, 0, i);
        i = zipfile.read(zipentry);
          goto _L1
        ((ZipOutputStream) (obj)).closeEntry();
        ((ZipOutputStream) (obj)).close();
        zipentry = JVM INSTR new #117 <Class StringBuilder>;
        zipentry.StringBuilder();
        Log.i("MultiDex", zipentry.append("Renaming to ").append(file.getPath()).toString());
        if (!s.renameTo(file)) {
            zipentry = JVM INSTR new #84  <Class IOException>;
            obj = JVM INSTR new #117 <Class StringBuilder>;
            ((StringBuilder) (obj)).StringBuilder();
            zipentry.IOException(((StringBuilder) (obj)).append("Failed to rename \"").append(s.getAbsolutePath()).append("\" to \"").append(file.getAbsolutePath()).append("\"").toString());
            throw zipentry;
        }
        break MISSING_BLOCK_LABEL_268;
        zipentry;
        closeQuietly(zipfile);
        s.delete();
        throw zipentry;
        zipentry;
        ((ZipOutputStream) (obj)).close();
        throw zipentry;
        closeQuietly(zipfile);
        s.delete();
        return;
    }

    private static SharedPreferences getMultiDexPreferences(Context context) {
        int i;
        if (android.os.Build.VERSION.SDK_INT < 11)
            i = 0;
        else
            i = 4;
        return context.getSharedPreferences("multidex.version", i);
    }

    private static long getTimeStamp(File file) {
        long l1 = file.lastModified();
        long l = l1;
        if (l1 == -1L)
            l = l1 - 1L;
        return l;
    }

    private static long getZipCrc(File file) {
        long l1 = ZipUtil.getZipCrc(file);
        long l = l1;
        if (l1 == -1L)
            l = l1 - 1L;
        return l;
    }

    private static boolean isModified(Context context, File file, long l) {
        context = getMultiDexPreferences(context);
        boolean flag;
        if (context.getLong("timestamp", -1L) != getTimeStamp(file) || context.getLong("crc", -1L) != l)
            flag = true;
        else
            flag = false;
        return flag;
    }

    static List load(Context context, ApplicationInfo applicationinfo, File file, boolean flag) {
        long l;
        File file1;
        Log.i("MultiDex", (new StringBuilder()).append("MultiDexExtractor.load(").append(applicationinfo.sourceDir).append(", ").append(flag).append(")").toString());
        file1 = new File(applicationinfo.sourceDir);
        l = getZipCrc(file1);
        if (flag || isModified(context, file1, l)) goto _L2; else goto _L1
_L1:
        try {
            applicationinfo = loadExistingExtractions(context, file1, file);
        }
        // Misplaced declaration of an exception variable
        catch (ApplicationInfo applicationinfo) {
            Log.w("MultiDex", "Failed to reload existing extracted secondary dex files, falling back to fresh extraction", applicationinfo);
            applicationinfo = performExtractions(file1, file);
            putStoredApkInfo(context, getTimeStamp(file1), l, applicationinfo.size() + 1);
            context = applicationinfo;
            continue; /* Loop/switch isn't completed */
        }
        context = applicationinfo;
_L4:
        Log.i("MultiDex", (new StringBuilder()).append("load found ").append(context.size()).append(" secondary dex files").toString());
        return context;
_L2:
        Log.i("MultiDex", "Detected that extraction must be performed.");
        applicationinfo = performExtractions(file1, file);
        putStoredApkInfo(context, getTimeStamp(file1), l, applicationinfo.size() + 1);
        context = applicationinfo;
        if (true) goto _L4; else goto _L3
_L3:
    }

    private static List loadExistingExtractions(Context context, File file, File file1) {
        Log.i("MultiDex", "loading existing secondary dex files");
        file = (new StringBuilder()).append(file.getName()).append(".classes").toString();
        int j = getMultiDexPreferences(context).getInt("dex.number", 1);
        context = new ArrayList(j);
        for (int i = 2; i <= j; i++) {
            File file2 = new File(file1, (new StringBuilder()).append(file).append(i).append(".zip").toString());
            if (file2.isFile()) {
                context.add(file2);
                if (!verifyZipFile(file2)) {
                    Log.i("MultiDex", (new StringBuilder()).append("Invalid zip file: ").append(file2).toString());
                    throw new IOException("Invalid ZIP file.");
                }
            } else {
                throw new IOException((new StringBuilder()).append("Missing extracted secondary dex file '").append(file2.getPath()).append("'").toString());
            }
        }

        return context;
    }

    private static void mkdirChecked(File file) {
        file.mkdir();
        if (!file.isDirectory()) {
            File file1 = file.getParentFile();
            if (file1 == null)
                Log.e("MultiDex", (new StringBuilder()).append("Failed to create dir ").append(file.getPath()).append(". Parent file is null.").toString());
            else
                Log.e("MultiDex", (new StringBuilder()).append("Failed to create dir ").append(file.getPath()).append(". parent file is a dir ").append(file1.isDirectory()).append(", a file ").append(file1.isFile()).append(", exists ").append(file1.exists()).append(", readable ").append(file1.canRead()).append(", writable ").append(file1.canWrite()).toString());
            throw new IOException((new StringBuilder()).append("Failed to create cache directory ").append(file.getPath()).toString());
        } else {
            return;
        }
    }

    private static List performExtractions(File file, File file1) {
        ZipFile zipfile;
        ArrayList arraylist;
        String s;
        s = (new StringBuilder()).append(file.getName()).append(".classes").toString();
        prepareDexDir(file1, s);
        arraylist = new ArrayList();
        zipfile = new ZipFile(file);
        file = JVM INSTR new #117 <Class StringBuilder>;
        file.StringBuilder();
        file = zipfile.getEntry(file.append("classes").append(2).append(".dex").toString());
        int j = 2;
_L4:
        if (file == null)
            break; /* Loop/switch isn't completed */
        File file2;
        Object obj = JVM INSTR new #117 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        obj = ((StringBuilder) (obj)).append(s).append(j).append(".zip").toString();
        file2 = JVM INSTR new #107 <Class File>;
        file2.File(file1, ((String) (obj)));
        arraylist.add(file2);
        obj = JVM INSTR new #117 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        Log.i("MultiDex", ((StringBuilder) (obj)).append("Extraction is needed for file ").append(file2).toString());
        int i;
        boolean flag;
        flag = false;
        i = 0;
_L2:
        if (i >= 3 || flag)
            break; /* Loop/switch isn't completed */
        i++;
        StringBuilder stringbuilder1;
        extract(zipfile, file, file2, s);
        flag = verifyZipFile(file2);
        StringBuilder stringbuilder = JVM INSTR new #117 <Class StringBuilder>;
        stringbuilder.StringBuilder();
        stringbuilder1 = stringbuilder.append("Extraction ");
        Object obj1;
        if (flag)
            obj1 = "success";
        else
            obj1 = "failed";
        Log.i("MultiDex", stringbuilder1.append(((String) (obj1))).append(" - length ").append(file2.getAbsolutePath()).append(": ").append(file2.length()).toString());
        if (flag)
            continue; /* Loop/switch isn't completed */
        file2.delete();
        if (file2.exists()) {
            obj1 = JVM INSTR new #117 <Class StringBuilder>;
            ((StringBuilder) (obj1)).StringBuilder();
            Log.w("MultiDex", ((StringBuilder) (obj1)).append("Failed to delete corrupted secondary dex '").append(file2.getPath()).append("'").toString());
        }
        if (true) goto _L2; else goto _L1
_L1:
        if (flag)
            break MISSING_BLOCK_LABEL_417;
        file = JVM INSTR new #84  <Class IOException>;
        file1 = JVM INSTR new #117 <Class StringBuilder>;
        file1.StringBuilder();
        file.IOException(file1.append("Could not create zip file ").append(file2.getAbsolutePath()).append(" for secondary dex (").append(j).append(")").toString());
        throw file;
        file;
        try {
            zipfile.close();
        }
        // Misplaced declaration of an exception variable
        catch (File file1) {
            Log.w("MultiDex", "Failed to close resource", file1);
        }
        throw file;
        j++;
        file = JVM INSTR new #117 <Class StringBuilder>;
        file.StringBuilder();
        file = zipfile.getEntry(file.append("classes").append(j).append(".dex").toString());
        if (true) goto _L4; else goto _L3
_L3:
        try {
            zipfile.close();
        }
        // Misplaced declaration of an exception variable
        catch (File file) {
            Log.w("MultiDex", "Failed to close resource", file);
        }
        return arraylist;
    }

    private static void prepareDexDir(File file, String s) {
        mkdirChecked(file.getParentFile());
        mkdirChecked(file);
        s = file.listFiles(new FileFilter(s) {

            final String val$extractedFilePrefix;

            public boolean accept(File file1) {
                boolean flag;
                if (!file1.getName().startsWith(extractedFilePrefix))
                    flag = true;
                else
                    flag = false;
                return flag;
            }

             {
                extractedFilePrefix = s;
                super();
            }
        }
);
        if (s == null) {
            Log.w("MultiDex", (new StringBuilder()).append("Failed to list secondary dex dir content (").append(file.getPath()).append(").").toString());
        } else {
            int j = s.length;
            int i = 0;
            while (i < j)  {
                file = s[i];
                Log.i("MultiDex", (new StringBuilder()).append("Trying to delete old file ").append(file.getPath()).append(" of size ").append(file.length()).toString());
                if (!file.delete())
                    Log.w("MultiDex", (new StringBuilder()).append("Failed to delete old file ").append(file.getPath()).toString());
                else
                    Log.i("MultiDex", (new StringBuilder()).append("Deleted old file ").append(file.getPath()).toString());
                i++;
            }
        }
    }

    private static void putStoredApkInfo(Context context, long l, long l1, int i) {
        context = getMultiDexPreferences(context).edit();
        context.putLong("timestamp", l);
        context.putLong("crc", l1);
        context.putInt("dex.number", i);
        apply(context);
    }

    static boolean verifyZipFile(File file) {
        ZipFile zipfile;
        zipfile = JVM INSTR new #101 <Class ZipFile>;
        zipfile.ZipFile(file);
        zipfile.close();
        boolean flag = true;
_L2:
        return flag;
        IOException ioexception;
        ioexception;
        try {
            StringBuilder stringbuilder = JVM INSTR new #117 <Class StringBuilder>;
            stringbuilder.StringBuilder();
            Log.w("MultiDex", stringbuilder.append("Failed to close zip file: ").append(file.getAbsolutePath()).toString());
        }
        catch (ZipException zipexception) {
            Log.w("MultiDex", (new StringBuilder()).append("File ").append(file.getAbsolutePath()).append(" is not a valid zip file.").toString(), zipexception);
        }
        catch (IOException ioexception1) {
            Log.w("MultiDex", (new StringBuilder()).append("Got an IOException trying to open zip file: ").append(file.getAbsolutePath()).toString(), ioexception1);
        }
        flag = false;
        if (true) goto _L2; else goto _L1
_L1:
    }

    static  {
_L1:
        return;
        NoSuchMethodException nosuchmethodexception;
        nosuchmethodexception;
        sApplyMethod = null;
          goto _L1
    }
}
