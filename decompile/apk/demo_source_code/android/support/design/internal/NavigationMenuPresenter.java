// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.design.internal;

import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.os.Parcelable;
import android.support.v4.view.ViewCompat;
import android.support.v4.view.WindowInsetsCompat;
import android.support.v7.view.menu.*;
import android.util.SparseArray;
import android.view.*;
import android.widget.LinearLayout;
import android.widget.TextView;
import java.util.ArrayList;
import java.util.Iterator;

// Referenced classes of package android.support.design.internal:
//            NavigationMenuView, ParcelableSparseArray, NavigationMenuItemView

public class NavigationMenuPresenter
    implements MenuPresenter {
    private static class HeaderViewHolder extends ViewHolder {

        public HeaderViewHolder(View view) {
            super(view);
        }
    }

    private class NavigationMenuAdapter extends android.support.v7.widget.RecyclerView.Adapter {

        private static final String STATE_ACTION_VIEWS = "android:menu:action_views";
        private static final String STATE_CHECKED_ITEM = "android:menu:checked";
        private static final int VIEW_TYPE_HEADER = 3;
        private static final int VIEW_TYPE_NORMAL = 0;
        private static final int VIEW_TYPE_SEPARATOR = 2;
        private static final int VIEW_TYPE_SUBHEADER = 1;
        private MenuItemImpl mCheckedItem;
        private final ArrayList mItems = new ArrayList();
        private boolean mUpdateSuspended;
        final NavigationMenuPresenter this$0;

        private void appendTransparentIconIfMissing(int i, int j) {
            for (; i < j; i++)
                ((NavigationMenuTextItem)mItems.get(i)).needsEmptyIcon = true;

        }

        private void prepareMenuItems() {
            if (!mUpdateSuspended) goto _L2; else goto _L1
_L1:
            return;
_L2:
            mUpdateSuspended = true;
            mItems.clear();
            mItems.add(new NavigationMenuHeaderItem());
            int j = -1;
            int i = 0;
            boolean flag2 = false;
            int k1 = mMenu.getVisibleItems().size();
            int i1 = 0;
            while (i1 < k1)  {
                Object obj = (MenuItemImpl)mMenu.getVisibleItems().get(i1);
                if (((MenuItemImpl) (obj)).isChecked())
                    setCheckedItem(((MenuItemImpl) (obj)));
                if (((MenuItemImpl) (obj)).isCheckable())
                    ((MenuItemImpl) (obj)).setExclusiveCheckable(false);
                int k;
                if (((MenuItemImpl) (obj)).hasSubMenu()) {
                    SubMenu submenu = ((MenuItemImpl) (obj)).getSubMenu();
                    if (submenu.hasVisibleItems()) {
                        if (i1 != 0)
                            mItems.add(new NavigationMenuSeparatorItem(mPaddingSeparator, 0));
                        mItems.add(new NavigationMenuTextItem(((MenuItemImpl) (obj))));
                        boolean flag = false;
                        int l1 = mItems.size();
                        int i2 = submenu.size();
                        for (int j1 = 0; j1 < i2;) {
                            MenuItemImpl menuitemimpl = (MenuItemImpl)submenu.getItem(j1);
                            boolean flag1 = flag;
                            if (menuitemimpl.isVisible()) {
                                flag1 = flag;
                                if (!flag) {
                                    flag1 = flag;
                                    if (menuitemimpl.getIcon() != null)
                                        flag1 = true;
                                }
                                if (menuitemimpl.isCheckable())
                                    menuitemimpl.setExclusiveCheckable(false);
                                if (((MenuItemImpl) (obj)).isChecked())
                                    setCheckedItem(((MenuItemImpl) (obj)));
                                mItems.add(new NavigationMenuTextItem(menuitemimpl));
                            }
                            j1++;
                            flag = flag1;
                        }

                        if (flag)
                            appendTransparentIconIfMissing(l1, mItems.size());
                    }
                    byte byte0 = j;
                    j = i;
                    i = byte0;
                } else {
                    int l = ((MenuItemImpl) (obj)).getGroupId();
                    if (l != j) {
                        j = mItems.size();
                        boolean flag3;
                        if (((MenuItemImpl) (obj)).getIcon() != null)
                            flag3 = true;
                        else
                            flag3 = false;
                        flag2 = flag3;
                        i = j;
                        if (i1 != 0) {
                            i = j + 1;
                            mItems.add(new NavigationMenuSeparatorItem(mPaddingSeparator, mPaddingSeparator));
                            flag2 = flag3;
                        }
                    } else
                    if (!flag2 && ((MenuItemImpl) (obj)).getIcon() != null) {
                        flag2 = true;
                        appendTransparentIconIfMissing(i, mItems.size());
                    }
                    obj = new NavigationMenuTextItem(((MenuItemImpl) (obj)));
                    obj.needsEmptyIcon = flag2;
                    mItems.add(obj);
                    j = i;
                    i = l;
                }
                i1++;
                k = i;
                i = j;
                j = k;
            }
            mUpdateSuspended = false;
            if (true) goto _L1; else goto _L3
_L3:
        }

        public Bundle createInstanceState() {
            Bundle bundle = new Bundle();
            if (mCheckedItem != null)
                bundle.putInt("android:menu:checked", mCheckedItem.getItemId());
            SparseArray sparsearray = new SparseArray();
            Iterator iterator = mItems.iterator();
            do {
                if (!iterator.hasNext())
                    break;
                Object obj = (NavigationMenuItem)iterator.next();
                if (obj instanceof NavigationMenuTextItem) {
                    MenuItemImpl menuitemimpl = ((NavigationMenuTextItem)obj).getMenuItem();
                    if (menuitemimpl != null)
                        obj = menuitemimpl.getActionView();
                    else
                        obj = null;
                    if (obj != null) {
                        ParcelableSparseArray parcelablesparsearray = new ParcelableSparseArray();
                        ((View) (obj)).saveHierarchyState(parcelablesparsearray);
                        sparsearray.put(menuitemimpl.getItemId(), parcelablesparsearray);
                    }
                }
            } while (true);
            bundle.putSparseParcelableArray("android:menu:action_views", sparsearray);
            return bundle;
        }

        public int getItemCount() {
            return mItems.size();
        }

        public long getItemId(int i) {
            return (long)i;
        }

        public int getItemViewType(int i) {
            NavigationMenuItem navigationmenuitem = (NavigationMenuItem)mItems.get(i);
            if (navigationmenuitem instanceof NavigationMenuSeparatorItem)
                i = 2;
            else
            if (navigationmenuitem instanceof NavigationMenuHeaderItem)
                i = 3;
            else
            if (navigationmenuitem instanceof NavigationMenuTextItem) {
                if (((NavigationMenuTextItem)navigationmenuitem).getMenuItem().hasSubMenu())
                    i = 1;
                else
                    i = 0;
            } else {
                throw new RuntimeException("Unknown item type.");
            }
            return i;
        }

        public void onBindViewHolder(ViewHolder viewholder, int i) {
            getItemViewType(i);
            JVM INSTR tableswitch 0 2: default 32
        //                       0 33
        //                       1 164
        //                       2 194;
               goto _L1 _L2 _L3 _L4
_L1:
            return;
_L2:
            NavigationMenuItemView navigationmenuitemview = (NavigationMenuItemView)viewholder.itemView;
            navigationmenuitemview.setIconTintList(mIconTintList);
            if (mTextAppearanceSet)
                navigationmenuitemview.setTextAppearance(navigationmenuitemview.getContext(), mTextAppearance);
            if (mTextColor != null)
                navigationmenuitemview.setTextColor(mTextColor);
            if (mItemBackground != null)
                viewholder = mItemBackground.getConstantState().newDrawable();
            else
                viewholder = null;
            navigationmenuitemview.setBackgroundDrawable(viewholder);
            viewholder = (NavigationMenuTextItem)mItems.get(i);
            navigationmenuitemview.setNeedsEmptyIcon(((NavigationMenuTextItem) (viewholder)).needsEmptyIcon);
            navigationmenuitemview.initialize(viewholder.getMenuItem(), 0);
            continue; /* Loop/switch isn't completed */
_L3:
            ((TextView)viewholder.itemView).setText(((NavigationMenuTextItem)mItems.get(i)).getMenuItem().getTitle());
            continue; /* Loop/switch isn't completed */
_L4:
            NavigationMenuSeparatorItem navigationmenuseparatoritem = (NavigationMenuSeparatorItem)mItems.get(i);
            viewholder.itemView.setPadding(0, navigationmenuseparatoritem.getPaddingTop(), 0, navigationmenuseparatoritem.getPaddingBottom());
            if (true) goto _L1; else goto _L5
_L5:
        }

        public volatile void onBindViewHolder(android.support.v7.widget.RecyclerView.ViewHolder viewholder, int i) {
            onBindViewHolder((ViewHolder)viewholder, i);
        }

        public ViewHolder onCreateViewHolder(ViewGroup viewgroup, int i) {
            i;
            JVM INSTR tableswitch 0 3: default 32
        //                       0 36
        //                       1 62
        //                       2 81
        //                       3 100;
               goto _L1 _L2 _L3 _L4 _L5
_L1:
            viewgroup = null;
_L7:
            return viewgroup;
_L2:
            viewgroup = new NormalViewHolder(mLayoutInflater, viewgroup, mOnClickListener);
            continue; /* Loop/switch isn't completed */
_L3:
            viewgroup = new SubheaderViewHolder(mLayoutInflater, viewgroup);
            continue; /* Loop/switch isn't completed */
_L4:
            viewgroup = new SeparatorViewHolder(mLayoutInflater, viewgroup);
            continue; /* Loop/switch isn't completed */
_L5:
            viewgroup = new HeaderViewHolder(mHeaderLayout);
            if (true) goto _L7; else goto _L6
_L6:
        }

        public volatile android.support.v7.widget.RecyclerView.ViewHolder onCreateViewHolder(ViewGroup viewgroup, int i) {
            return onCreateViewHolder(viewgroup, i);
        }

        public void onViewRecycled(ViewHolder viewholder) {
            if (viewholder instanceof NormalViewHolder)
                ((NavigationMenuItemView)viewholder.itemView).recycle();
        }

        public volatile void onViewRecycled(android.support.v7.widget.RecyclerView.ViewHolder viewholder) {
            onViewRecycled((ViewHolder)viewholder);
        }

        public void restoreInstanceState(Bundle bundle) {
            int i = bundle.getInt("android:menu:checked", 0);
            if (i != 0) {
                mUpdateSuspended = true;
                Iterator iterator = mItems.iterator();
                do {
                    if (!iterator.hasNext())
                        break;
                    Object obj = (NavigationMenuItem)iterator.next();
                    if (!(obj instanceof NavigationMenuTextItem))
                        continue;
                    obj = ((NavigationMenuTextItem)obj).getMenuItem();
                    if (obj == null || ((MenuItemImpl) (obj)).getItemId() != i)
                        continue;
                    setCheckedItem(((MenuItemImpl) (obj)));
                    break;
                } while (true);
                mUpdateSuspended = false;
                prepareMenuItems();
            }
            SparseArray sparsearray = bundle.getSparseParcelableArray("android:menu:action_views");
            Iterator iterator1 = mItems.iterator();
            do {
                if (!iterator1.hasNext())
                    break;
                bundle = (NavigationMenuItem)iterator1.next();
                if (bundle instanceof NavigationMenuTextItem) {
                    MenuItemImpl menuitemimpl = ((NavigationMenuTextItem)bundle).getMenuItem();
                    if (menuitemimpl != null)
                        bundle = menuitemimpl.getActionView();
                    else
                        bundle = null;
                    if (bundle != null)
                        bundle.restoreHierarchyState((SparseArray)sparsearray.get(menuitemimpl.getItemId()));
                }
            } while (true);
        }

        public void setCheckedItem(MenuItemImpl menuitemimpl) {
            if (mCheckedItem != menuitemimpl && menuitemimpl.isCheckable()) {
                if (mCheckedItem != null)
                    mCheckedItem.setChecked(false);
                mCheckedItem = menuitemimpl;
                menuitemimpl.setChecked(true);
            }
        }

        public void setUpdateSuspended(boolean flag) {
            mUpdateSuspended = flag;
        }

        public void update() {
            prepareMenuItems();
            notifyDataSetChanged();
        }

        NavigationMenuAdapter() {
            this$0 = NavigationMenuPresenter.this;
            super();
            prepareMenuItems();
        }
    }

    private static class NavigationMenuHeaderItem
        implements NavigationMenuItem {

        NavigationMenuHeaderItem() {
        }
    }

    private static interface NavigationMenuItem {
    }

    private static class NavigationMenuSeparatorItem
        implements NavigationMenuItem {

        private final int mPaddingBottom;
        private final int mPaddingTop;

        public int getPaddingBottom() {
            return mPaddingBottom;
        }

        public int getPaddingTop() {
            return mPaddingTop;
        }

        public NavigationMenuSeparatorItem(int i, int j) {
            mPaddingTop = i;
            mPaddingBottom = j;
        }
    }

    private static class NavigationMenuTextItem
        implements NavigationMenuItem {

        private final MenuItemImpl mMenuItem;
        boolean needsEmptyIcon;

        public MenuItemImpl getMenuItem() {
            return mMenuItem;
        }

        NavigationMenuTextItem(MenuItemImpl menuitemimpl) {
            mMenuItem = menuitemimpl;
        }
    }

    private static class NormalViewHolder extends ViewHolder {

        public NormalViewHolder(LayoutInflater layoutinflater, ViewGroup viewgroup, android.view.View.OnClickListener onclicklistener) {
            super(layoutinflater.inflate(android.support.design.R.layout.design_navigation_item, viewgroup, false));
            itemView.setOnClickListener(onclicklistener);
        }
    }

    private static class SeparatorViewHolder extends ViewHolder {

        public SeparatorViewHolder(LayoutInflater layoutinflater, ViewGroup viewgroup) {
            super(layoutinflater.inflate(android.support.design.R.layout.design_navigation_item_separator, viewgroup, false));
        }
    }

    private static class SubheaderViewHolder extends ViewHolder {

        public SubheaderViewHolder(LayoutInflater layoutinflater, ViewGroup viewgroup) {
            super(layoutinflater.inflate(android.support.design.R.layout.design_navigation_item_subheader, viewgroup, false));
        }
    }

    private static abstract class ViewHolder extends android.support.v7.widget.RecyclerView.ViewHolder {

        public ViewHolder(View view) {
            super(view);
        }
    }


    private static final String STATE_ADAPTER = "android:menu:adapter";
    private static final String STATE_HIERARCHY = "android:menu:list";
    NavigationMenuAdapter mAdapter;
    private android.support.v7.view.menu.MenuPresenter.Callback mCallback;
    LinearLayout mHeaderLayout;
    ColorStateList mIconTintList;
    private int mId;
    Drawable mItemBackground;
    LayoutInflater mLayoutInflater;
    MenuBuilder mMenu;
    private NavigationMenuView mMenuView;
    final android.view.View.OnClickListener mOnClickListener = new android.view.View.OnClickListener() {

        final NavigationMenuPresenter this$0;

        public void onClick(View view) {
            view = (NavigationMenuItemView)view;
            setUpdateSuspended(true);
            view = view.getItemData();
            boolean flag = mMenu.performItemAction(view, NavigationMenuPresenter.this, 0);
            if (view != null && view.isCheckable() && flag)
                mAdapter.setCheckedItem(view);
            setUpdateSuspended(false);
            updateMenuView(false);
        }

             {
                this$0 = NavigationMenuPresenter.this;
                super();
            }
    }
;
    int mPaddingSeparator;
    private int mPaddingTopDefault;
    int mTextAppearance;
    boolean mTextAppearanceSet;
    ColorStateList mTextColor;

    public NavigationMenuPresenter() {
    }

    public void addHeaderView(View view) {
        mHeaderLayout.addView(view);
        mMenuView.setPadding(0, 0, 0, mMenuView.getPaddingBottom());
    }

    public boolean collapseItemActionView(MenuBuilder menubuilder, MenuItemImpl menuitemimpl) {
        return false;
    }

    public void dispatchApplyWindowInsets(WindowInsetsCompat windowinsetscompat) {
        int i = windowinsetscompat.getSystemWindowInsetTop();
        if (mPaddingTopDefault != i) {
            mPaddingTopDefault = i;
            if (mHeaderLayout.getChildCount() == 0)
                mMenuView.setPadding(0, mPaddingTopDefault, 0, mMenuView.getPaddingBottom());
        }
        ViewCompat.dispatchApplyWindowInsets(mHeaderLayout, windowinsetscompat);
    }

    public boolean expandItemActionView(MenuBuilder menubuilder, MenuItemImpl menuitemimpl) {
        return false;
    }

    public boolean flagActionItems() {
        return false;
    }

    public int getHeaderCount() {
        return mHeaderLayout.getChildCount();
    }

    public View getHeaderView(int i) {
        return mHeaderLayout.getChildAt(i);
    }

    public int getId() {
        return mId;
    }

    public Drawable getItemBackground() {
        return mItemBackground;
    }

    public ColorStateList getItemTextColor() {
        return mTextColor;
    }

    public ColorStateList getItemTintList() {
        return mIconTintList;
    }

    public MenuView getMenuView(ViewGroup viewgroup) {
        if (mMenuView == null) {
            mMenuView = (NavigationMenuView)mLayoutInflater.inflate(android.support.design.R.layout.design_navigation_menu, viewgroup, false);
            if (mAdapter == null)
                mAdapter = new NavigationMenuAdapter();
            mHeaderLayout = (LinearLayout)mLayoutInflater.inflate(android.support.design.R.layout.design_navigation_item_header, mMenuView, false);
            mMenuView.setAdapter(mAdapter);
        }
        return mMenuView;
    }

    public View inflateHeaderView(int i) {
        View view = mLayoutInflater.inflate(i, mHeaderLayout, false);
        addHeaderView(view);
        return view;
    }

    public void initForMenu(Context context, MenuBuilder menubuilder) {
        mLayoutInflater = LayoutInflater.from(context);
        mMenu = menubuilder;
        mPaddingSeparator = context.getResources().getDimensionPixelOffset(android.support.design.R.dimen.design_navigation_separator_vertical_padding);
    }

    public void onCloseMenu(MenuBuilder menubuilder, boolean flag) {
        if (mCallback != null)
            mCallback.onCloseMenu(menubuilder, flag);
    }

    public void onRestoreInstanceState(Parcelable parcelable) {
        if (parcelable instanceof Bundle) {
            Bundle bundle = (Bundle)parcelable;
            parcelable = bundle.getSparseParcelableArray("android:menu:list");
            if (parcelable != null)
                mMenuView.restoreHierarchyState(parcelable);
            parcelable = bundle.getBundle("android:menu:adapter");
            if (parcelable != null)
                mAdapter.restoreInstanceState(parcelable);
        }
    }

    public Parcelable onSaveInstanceState() {
        Bundle bundle;
        if (android.os.Build.VERSION.SDK_INT >= 11) {
            Bundle bundle1 = new Bundle();
            if (mMenuView != null) {
                SparseArray sparsearray = new SparseArray();
                mMenuView.saveHierarchyState(sparsearray);
                bundle1.putSparseParcelableArray("android:menu:list", sparsearray);
            }
            bundle = bundle1;
            if (mAdapter != null) {
                bundle1.putBundle("android:menu:adapter", mAdapter.createInstanceState());
                bundle = bundle1;
            }
        } else {
            bundle = null;
        }
        return bundle;
    }

    public boolean onSubMenuSelected(SubMenuBuilder submenubuilder) {
        return false;
    }

    public void removeHeaderView(View view) {
        mHeaderLayout.removeView(view);
        if (mHeaderLayout.getChildCount() == 0)
            mMenuView.setPadding(0, mPaddingTopDefault, 0, mMenuView.getPaddingBottom());
    }

    public void setCallback(android.support.v7.view.menu.MenuPresenter.Callback callback) {
        mCallback = callback;
    }

    public void setCheckedItem(MenuItemImpl menuitemimpl) {
        mAdapter.setCheckedItem(menuitemimpl);
    }

    public void setId(int i) {
        mId = i;
    }

    public void setItemBackground(Drawable drawable) {
        mItemBackground = drawable;
        updateMenuView(false);
    }

    public void setItemIconTintList(ColorStateList colorstatelist) {
        mIconTintList = colorstatelist;
        updateMenuView(false);
    }

    public void setItemTextAppearance(int i) {
        mTextAppearance = i;
        mTextAppearanceSet = true;
        updateMenuView(false);
    }

    public void setItemTextColor(ColorStateList colorstatelist) {
        mTextColor = colorstatelist;
        updateMenuView(false);
    }

    public void setUpdateSuspended(boolean flag) {
        if (mAdapter != null)
            mAdapter.setUpdateSuspended(flag);
    }

    public void updateMenuView(boolean flag) {
        if (mAdapter != null)
            mAdapter.update();
    }
}
