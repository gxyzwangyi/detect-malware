// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.design.widget;

import android.content.Context;
import android.graphics.Rect;
import android.support.v4.view.*;
import android.util.AttributeSet;
import android.view.View;
import java.util.List;

// Referenced classes of package android.support.design.widget:
//            ViewOffsetBehavior, MathUtils, CoordinatorLayout

abstract class HeaderScrollingViewBehavior extends ViewOffsetBehavior {

    private int mOverlayTop;
    final Rect mTempRect1;
    final Rect mTempRect2;
    private int mVerticalLayoutGap;

    public HeaderScrollingViewBehavior() {
        mTempRect1 = new Rect();
        mTempRect2 = new Rect();
        mVerticalLayoutGap = 0;
    }

    public HeaderScrollingViewBehavior(Context context, AttributeSet attributeset) {
        super(context, attributeset);
        mTempRect1 = new Rect();
        mTempRect2 = new Rect();
        mVerticalLayoutGap = 0;
    }

    private static int resolveGravity(int i) {
        int j = i;
        if (i == 0)
            j = 0x800033;
        return j;
    }

    abstract View findFirstDependency(List list);

    final int getOverlapPixelsForOffset(View view) {
        int i = 0;
        if (mOverlayTop != 0)
            i = MathUtils.constrain((int)(getOverlapRatioForOffset(view) * (float)mOverlayTop), 0, mOverlayTop);
        return i;
    }

    float getOverlapRatioForOffset(View view) {
        return 1.0F;
    }

    public final int getOverlayTop() {
        return mOverlayTop;
    }

    int getScrollRange(View view) {
        return view.getMeasuredHeight();
    }

    final int getVerticalLayoutGap() {
        return mVerticalLayoutGap;
    }

    protected void layoutChild(CoordinatorLayout coordinatorlayout, View view, int i) {
        View view1 = findFirstDependency(coordinatorlayout.getDependencies(view));
        if (view1 != null) {
            CoordinatorLayout.LayoutParams layoutparams = (CoordinatorLayout.LayoutParams)view.getLayoutParams();
            Rect rect = mTempRect1;
            rect.set(coordinatorlayout.getPaddingLeft() + layoutparams.leftMargin, view1.getBottom() + layoutparams.topMargin, coordinatorlayout.getWidth() - coordinatorlayout.getPaddingRight() - layoutparams.rightMargin, (coordinatorlayout.getHeight() + view1.getBottom()) - coordinatorlayout.getPaddingBottom() - layoutparams.bottomMargin);
            WindowInsetsCompat windowinsetscompat = coordinatorlayout.getLastWindowInsets();
            if (windowinsetscompat != null && ViewCompat.getFitsSystemWindows(coordinatorlayout) && !ViewCompat.getFitsSystemWindows(view)) {
                rect.left = rect.left + windowinsetscompat.getSystemWindowInsetLeft();
                rect.right = rect.right - windowinsetscompat.getSystemWindowInsetRight();
            }
            coordinatorlayout = mTempRect2;
            GravityCompat.apply(resolveGravity(layoutparams.gravity), view.getMeasuredWidth(), view.getMeasuredHeight(), rect, coordinatorlayout, i);
            i = getOverlapPixelsForOffset(view1);
            view.layout(((Rect) (coordinatorlayout)).left, ((Rect) (coordinatorlayout)).top - i, ((Rect) (coordinatorlayout)).right, ((Rect) (coordinatorlayout)).bottom - i);
            mVerticalLayoutGap = ((Rect) (coordinatorlayout)).top - view1.getBottom();
        } else {
            super.layoutChild(coordinatorlayout, view, i);
            mVerticalLayoutGap = 0;
        }
    }

    public boolean onMeasureChild(CoordinatorLayout coordinatorlayout, View view, int i, int j, int k, int l) {
        int l1 = view.getLayoutParams().height;
        if (l1 != -1 && l1 != -2) goto _L2; else goto _L1
_L1:
        View view1 = findFirstDependency(coordinatorlayout.getDependencies(view));
        if (view1 == null) goto _L2; else goto _L3
_L3:
        if (!ViewCompat.getFitsSystemWindows(view1) || ViewCompat.getFitsSystemWindows(view)) goto _L5; else goto _L4
_L4:
        ViewCompat.setFitsSystemWindows(view, true);
        if (!ViewCompat.getFitsSystemWindows(view)) goto _L5; else goto _L6
_L6:
        boolean flag;
        view.requestLayout();
        flag = true;
_L8:
        return flag;
_L5:
        int i1 = android.view.View.MeasureSpec.getSize(k);
        k = i1;
        if (i1 == 0)
            k = coordinatorlayout.getHeight();
        int k1 = view1.getMeasuredHeight();
        int j1 = getScrollRange(view1);
        if (l1 == -1)
            i1 = 0x40000000;
        else
            i1 = 0x80000000;
        coordinatorlayout.onMeasureChild(view, i, j, android.view.View.MeasureSpec.makeMeasureSpec(j1 + (k - k1), i1), l);
        flag = true;
        continue; /* Loop/switch isn't completed */
_L2:
        flag = false;
        if (true) goto _L8; else goto _L7
_L7:
    }

    public final void setOverlayTop(int i) {
        mOverlayTop = i;
    }
}
