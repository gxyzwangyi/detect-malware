// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.design.widget;

import android.content.Context;
import android.content.res.*;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.support.v4.content.res.ConfigurationHelper;
import android.support.v4.view.ViewCompat;
import android.support.v7.widget.AppCompatImageHelper;
import android.util.AttributeSet;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import java.lang.annotation.Annotation;
import java.util.List;

// Referenced classes of package android.support.design.widget:
//            VisibilityAwareImageButton, ThemeUtils, ViewUtils, FloatingActionButtonImpl, 
//            FloatingActionButtonLollipop, FloatingActionButtonIcs, FloatingActionButtonGingerbread, BottomSheetBehavior, 
//            CoordinatorLayout, ViewGroupUtils, AppBarLayout, ShadowViewDelegate

public class FloatingActionButton extends VisibilityAwareImageButton {
    public static class Behavior extends CoordinatorLayout.Behavior {

        private static final boolean AUTO_HIDE_DEFAULT = true;
        private boolean mAutoHideEnabled;
        private OnVisibilityChangedListener mInternalAutoHideListener;
        private Rect mTmpRect;

        private static boolean isBottomSheet(View view) {
            view = view.getLayoutParams();
            boolean flag;
            if (view instanceof CoordinatorLayout.LayoutParams)
                flag = ((CoordinatorLayout.LayoutParams)view).getBehavior() instanceof BottomSheetBehavior;
            else
                flag = false;
            return flag;
        }

        private void offsetIfNeeded(CoordinatorLayout coordinatorlayout, FloatingActionButton floatingactionbutton) {
            int j;
            Rect rect;
            j = 0;
            rect = floatingactionbutton.mShadowPadding;
            if (rect == null || rect.centerX() <= 0 || rect.centerY() <= 0) goto _L2; else goto _L1
_L1:
            CoordinatorLayout.LayoutParams layoutparams = (CoordinatorLayout.LayoutParams)floatingactionbutton.getLayoutParams();
            int i;
            if (floatingactionbutton.getRight() >= coordinatorlayout.getWidth() - layoutparams.rightMargin)
                i = rect.right;
            else
            if (floatingactionbutton.getLeft() <= layoutparams.leftMargin)
                i = -rect.left;
            else
                i = 0;
            if (floatingactionbutton.getBottom() < coordinatorlayout.getHeight() - layoutparams.bottomMargin) goto _L4; else goto _L3
_L3:
            j = rect.bottom;
_L6:
            if (j != 0)
                ViewCompat.offsetTopAndBottom(floatingactionbutton, j);
            if (i != 0)
                ViewCompat.offsetLeftAndRight(floatingactionbutton, i);
_L2:
            return;
_L4:
            if (floatingactionbutton.getTop() <= layoutparams.topMargin)
                j = -rect.top;
            if (true) goto _L6; else goto _L5
_L5:
        }

        private boolean shouldUpdateVisibility(View view, FloatingActionButton floatingactionbutton) {
            CoordinatorLayout.LayoutParams layoutparams = (CoordinatorLayout.LayoutParams)floatingactionbutton.getLayoutParams();
            boolean flag;
            if (!mAutoHideEnabled)
                flag = false;
            else
            if (layoutparams.getAnchorId() != view.getId())
                flag = false;
            else
            if (floatingactionbutton.getUserSetVisibility() != 0)
                flag = false;
            else
                flag = true;
            return flag;
        }

        private boolean updateFabVisibilityForAppBarLayout(CoordinatorLayout coordinatorlayout, AppBarLayout appbarlayout, FloatingActionButton floatingactionbutton) {
            boolean flag = false;
            if (shouldUpdateVisibility(appbarlayout, floatingactionbutton)) {
                if (mTmpRect == null)
                    mTmpRect = new Rect();
                Rect rect = mTmpRect;
                ViewGroupUtils.getDescendantRect(coordinatorlayout, appbarlayout, rect);
                if (rect.bottom <= appbarlayout.getMinimumHeightForVisibleOverlappingContent())
                    floatingactionbutton.hide(mInternalAutoHideListener, false);
                else
                    floatingactionbutton.show(mInternalAutoHideListener, false);
                flag = true;
            }
            return flag;
        }

        private boolean updateFabVisibilityForBottomSheet(View view, FloatingActionButton floatingactionbutton) {
            boolean flag;
            if (!shouldUpdateVisibility(view, floatingactionbutton)) {
                flag = false;
            } else {
                CoordinatorLayout.LayoutParams layoutparams = (CoordinatorLayout.LayoutParams)floatingactionbutton.getLayoutParams();
                int j = view.getTop();
                int i = floatingactionbutton.getHeight() / 2;
                if (j < layoutparams.topMargin + i)
                    floatingactionbutton.hide(mInternalAutoHideListener, false);
                else
                    floatingactionbutton.show(mInternalAutoHideListener, false);
                flag = true;
            }
            return flag;
        }

        public boolean getInsetDodgeRect(CoordinatorLayout coordinatorlayout, FloatingActionButton floatingactionbutton, Rect rect) {
            coordinatorlayout = floatingactionbutton.mShadowPadding;
            rect.set(floatingactionbutton.getLeft() + ((Rect) (coordinatorlayout)).left, floatingactionbutton.getTop() + ((Rect) (coordinatorlayout)).top, floatingactionbutton.getRight() - ((Rect) (coordinatorlayout)).right, floatingactionbutton.getBottom() - ((Rect) (coordinatorlayout)).bottom);
            return true;
        }

        public volatile boolean getInsetDodgeRect(CoordinatorLayout coordinatorlayout, View view, Rect rect) {
            return getInsetDodgeRect(coordinatorlayout, (FloatingActionButton)view, rect);
        }

        public boolean isAutoHideEnabled() {
            return mAutoHideEnabled;
        }

        public void onAttachedToLayoutParams(CoordinatorLayout.LayoutParams layoutparams) {
            if (layoutparams.dodgeInsetEdges == 0)
                layoutparams.dodgeInsetEdges = 80;
        }

        public boolean onDependentViewChanged(CoordinatorLayout coordinatorlayout, FloatingActionButton floatingactionbutton, View view) {
            if (!(view instanceof AppBarLayout)) goto _L2; else goto _L1
_L1:
            updateFabVisibilityForAppBarLayout(coordinatorlayout, (AppBarLayout)view, floatingactionbutton);
_L4:
            return false;
_L2:
            if (isBottomSheet(view))
                updateFabVisibilityForBottomSheet(view, floatingactionbutton);
            if (true) goto _L4; else goto _L3
_L3:
        }

        public volatile boolean onDependentViewChanged(CoordinatorLayout coordinatorlayout, View view, View view1) {
            return onDependentViewChanged(coordinatorlayout, (FloatingActionButton)view, view1);
        }

        public boolean onLayoutChild(CoordinatorLayout coordinatorlayout, FloatingActionButton floatingactionbutton, int i) {
            List list = coordinatorlayout.getDependencies(floatingactionbutton);
            int k = list.size();
            int j = 0;
            do {
label0:
                {
                    if (j < k) {
                        View view = (View)list.get(j);
                        if ((view instanceof AppBarLayout) ? !updateFabVisibilityForAppBarLayout(coordinatorlayout, (AppBarLayout)view, floatingactionbutton) : !isBottomSheet(view) || !updateFabVisibilityForBottomSheet(view, floatingactionbutton))
                            break label0;
                    }
                    coordinatorlayout.onLayoutChild(floatingactionbutton, i);
                    offsetIfNeeded(coordinatorlayout, floatingactionbutton);
                    return true;
                }
                j++;
            } while (true);
        }

        public volatile boolean onLayoutChild(CoordinatorLayout coordinatorlayout, View view, int i) {
            return onLayoutChild(coordinatorlayout, (FloatingActionButton)view, i);
        }

        public void setAutoHideEnabled(boolean flag) {
            mAutoHideEnabled = flag;
        }

        void setInternalAutoHideListener(OnVisibilityChangedListener onvisibilitychangedlistener) {
            mInternalAutoHideListener = onvisibilitychangedlistener;
        }

        public Behavior() {
            mAutoHideEnabled = true;
        }

        public Behavior(Context context, AttributeSet attributeset) {
            super(context, attributeset);
            context = context.obtainStyledAttributes(attributeset, android.support.design.R.styleable.FloatingActionButton_Behavior_Layout);
            mAutoHideEnabled = context.getBoolean(android.support.design.R.styleable.FloatingActionButton_Behavior_Layout_behavior_autoHide, true);
            context.recycle();
        }
    }

    public static abstract class OnVisibilityChangedListener {

        public void onHidden(FloatingActionButton floatingactionbutton) {
        }

        public void onShown(FloatingActionButton floatingactionbutton) {
        }

        public OnVisibilityChangedListener() {
        }
    }

    private class ShadowDelegateImpl
        implements ShadowViewDelegate {

        final FloatingActionButton this$0;

        public float getRadius() {
            return (float)getSizeDimension() / 2.0F;
        }

        public boolean isCompatPaddingEnabled() {
            return mCompatPadding;
        }

        public void setBackgroundDrawable(Drawable drawable) {
            VisibilityAwareImageButton.this.setBackgroundDrawable(drawable);
        }

        public void setShadowPadding(int i, int j, int k, int l) {
            mShadowPadding.set(i, j, k, l);
            setPadding(mImagePadding + i, mImagePadding + j, mImagePadding + k, mImagePadding + l);
        }

        ShadowDelegateImpl() {
            this$0 = FloatingActionButton.this;
            super();
        }
    }

    public static interface Size
        extends Annotation {
    }


    private static final int AUTO_MINI_LARGEST_SCREEN_WIDTH = 470;
    private static final String LOG_TAG = "FloatingActionButton";
    public static final int SIZE_AUTO = -1;
    public static final int SIZE_MINI = 1;
    public static final int SIZE_NORMAL = 0;
    private ColorStateList mBackgroundTint;
    private android.graphics.PorterDuff.Mode mBackgroundTintMode;
    private int mBorderWidth;
    boolean mCompatPadding;
    private AppCompatImageHelper mImageHelper;
    int mImagePadding;
    private FloatingActionButtonImpl mImpl;
    private int mMaxImageSize;
    private int mRippleColor;
    final Rect mShadowPadding;
    private int mSize;
    private final Rect mTouchArea;

    public FloatingActionButton(Context context) {
        this(context, null);
    }

    public FloatingActionButton(Context context, AttributeSet attributeset) {
        this(context, attributeset, 0);
    }

    public FloatingActionButton(Context context, AttributeSet attributeset, int i) {
        super(context, attributeset, i);
        mShadowPadding = new Rect();
        mTouchArea = new Rect();
        ThemeUtils.checkAppCompatTheme(context);
        context = context.obtainStyledAttributes(attributeset, android.support.design.R.styleable.FloatingActionButton, i, android.support.design.R.style.Widget_Design_FloatingActionButton);
        mBackgroundTint = context.getColorStateList(android.support.design.R.styleable.FloatingActionButton_backgroundTint);
        mBackgroundTintMode = ViewUtils.parseTintMode(context.getInt(android.support.design.R.styleable.FloatingActionButton_backgroundTintMode, -1), null);
        mRippleColor = context.getColor(android.support.design.R.styleable.FloatingActionButton_rippleColor, 0);
        mSize = context.getInt(android.support.design.R.styleable.FloatingActionButton_fabSize, -1);
        mBorderWidth = context.getDimensionPixelSize(android.support.design.R.styleable.FloatingActionButton_borderWidth, 0);
        float f = context.getDimension(android.support.design.R.styleable.FloatingActionButton_elevation, 0.0F);
        float f1 = context.getDimension(android.support.design.R.styleable.FloatingActionButton_pressedTranslationZ, 0.0F);
        mCompatPadding = context.getBoolean(android.support.design.R.styleable.FloatingActionButton_useCompatPadding, false);
        context.recycle();
        mImageHelper = new AppCompatImageHelper(this);
        mImageHelper.loadFromAttributes(attributeset, i);
        mMaxImageSize = (int)getResources().getDimension(android.support.design.R.dimen.design_fab_image_size);
        getImpl().setBackgroundDrawable(mBackgroundTint, mBackgroundTintMode, mRippleColor, mBorderWidth);
        getImpl().setElevation(f);
        getImpl().setPressedTranslationZ(f1);
    }

    private FloatingActionButtonImpl createImpl() {
        int i = android.os.Build.VERSION.SDK_INT;
        Object obj;
        if (i >= 21)
            obj = new FloatingActionButtonLollipop(this, new ShadowDelegateImpl(), ViewUtils.DEFAULT_ANIMATOR_CREATOR);
        else
        if (i >= 14)
            obj = new FloatingActionButtonIcs(this, new ShadowDelegateImpl(), ViewUtils.DEFAULT_ANIMATOR_CREATOR);
        else
            obj = new FloatingActionButtonGingerbread(this, new ShadowDelegateImpl(), ViewUtils.DEFAULT_ANIMATOR_CREATOR);
        return ((FloatingActionButtonImpl) (obj));
    }

    private FloatingActionButtonImpl getImpl() {
        if (mImpl == null)
            mImpl = createImpl();
        return mImpl;
    }

    private int getSizeDimension(int i) {
        Resources resources = getResources();
        i;
        JVM INSTR tableswitch -1 1: default 32
    //                   -1 42
    //                   0 32
    //                   1 77;
           goto _L1 _L2 _L1 _L3
_L1:
        i = resources.getDimensionPixelSize(android.support.design.R.dimen.design_fab_size_normal);
_L5:
        return i;
_L2:
        if (Math.max(ConfigurationHelper.getScreenWidthDp(resources), ConfigurationHelper.getScreenHeightDp(resources)) < 470)
            i = getSizeDimension(1);
        else
            i = getSizeDimension(0);
        continue; /* Loop/switch isn't completed */
_L3:
        i = resources.getDimensionPixelSize(android.support.design.R.dimen.design_fab_size_mini);
        if (true) goto _L5; else goto _L4
_L4:
    }

    private static int resolveAdjustedSize(int i, int j) {
        int k;
        int l;
        l = android.view.View.MeasureSpec.getMode(j);
        k = android.view.View.MeasureSpec.getSize(j);
        j = i;
        l;
        JVM INSTR lookupswitch 3: default 48
    //                   -2147483648: 52
    //                   0: 50
    //                   1073741824: 61;
           goto _L1 _L2 _L3 _L4
_L3:
        break; /* Loop/switch isn't completed */
_L1:
        j = i;
_L6:
        return j;
_L2:
        j = Math.min(i, k);
        continue; /* Loop/switch isn't completed */
_L4:
        j = k;
        if (true) goto _L6; else goto _L5
_L5:
    }

    private FloatingActionButtonImpl.InternalVisibilityChangedListener wrapOnVisibilityChangedListener(final OnVisibilityChangedListener listener) {
        if (listener == null)
            listener = null;
        else
            listener = new FloatingActionButtonImpl.InternalVisibilityChangedListener() {

                final FloatingActionButton this$0;
                final OnVisibilityChangedListener val$listener;

                public void onHidden() {
                    listener.onHidden(FloatingActionButton.this);
                }

                public void onShown() {
                    listener.onShown(FloatingActionButton.this);
                }

             {
                this$0 = FloatingActionButton.this;
                listener = onvisibilitychangedlistener;
                super();
            }
            }
;
        return listener;
    }

    protected void drawableStateChanged() {
        super.drawableStateChanged();
        getImpl().onDrawableStateChanged(getDrawableState());
    }

    public ColorStateList getBackgroundTintList() {
        return mBackgroundTint;
    }

    public android.graphics.PorterDuff.Mode getBackgroundTintMode() {
        return mBackgroundTintMode;
    }

    public float getCompatElevation() {
        return getImpl().getElevation();
    }

    public Drawable getContentBackground() {
        return getImpl().getContentBackground();
    }

    public boolean getContentRect(Rect rect) {
        boolean flag = false;
        if (ViewCompat.isLaidOut(this)) {
            rect.set(0, 0, getWidth(), getHeight());
            rect.left = rect.left + mShadowPadding.left;
            rect.top = rect.top + mShadowPadding.top;
            rect.right = rect.right - mShadowPadding.right;
            rect.bottom = rect.bottom - mShadowPadding.bottom;
            flag = true;
        }
        return flag;
    }

    public int getSize() {
        return mSize;
    }

    int getSizeDimension() {
        return getSizeDimension(mSize);
    }

    public boolean getUseCompatPadding() {
        return mCompatPadding;
    }

    public void hide() {
        hide(null);
    }

    public void hide(OnVisibilityChangedListener onvisibilitychangedlistener) {
        hide(onvisibilitychangedlistener, true);
    }

    void hide(OnVisibilityChangedListener onvisibilitychangedlistener, boolean flag) {
        getImpl().hide(wrapOnVisibilityChangedListener(onvisibilitychangedlistener), flag);
    }

    public void jumpDrawablesToCurrentState() {
        super.jumpDrawablesToCurrentState();
        getImpl().jumpDrawableToCurrentState();
    }

    protected void onAttachedToWindow() {
        super.onAttachedToWindow();
        getImpl().onAttachedToWindow();
    }

    protected void onDetachedFromWindow() {
        super.onDetachedFromWindow();
        getImpl().onDetachedFromWindow();
    }

    protected void onMeasure(int i, int j) {
        int k = getSizeDimension();
        mImagePadding = (k - mMaxImageSize) / 2;
        getImpl().updatePadding();
        i = Math.min(resolveAdjustedSize(k, i), resolveAdjustedSize(k, j));
        setMeasuredDimension(mShadowPadding.left + i + mShadowPadding.right, i + mShadowPadding.top + mShadowPadding.bottom);
    }

    public boolean onTouchEvent(MotionEvent motionevent) {
        boolean flag;
        if (getContentRect(mTouchArea) && !mTouchArea.contains((int)motionevent.getX(), (int)motionevent.getY()))
            flag = false;
        else
            flag = super.onTouchEvent(motionevent);
        return flag;
    }

    public void setBackgroundColor(int i) {
        Log.i("FloatingActionButton", "Setting a custom background is not supported.");
    }

    public void setBackgroundDrawable(Drawable drawable) {
        Log.i("FloatingActionButton", "Setting a custom background is not supported.");
    }

    public void setBackgroundResource(int i) {
        Log.i("FloatingActionButton", "Setting a custom background is not supported.");
    }

    public void setBackgroundTintList(ColorStateList colorstatelist) {
        if (mBackgroundTint != colorstatelist) {
            mBackgroundTint = colorstatelist;
            getImpl().setBackgroundTintList(colorstatelist);
        }
    }

    public void setBackgroundTintMode(android.graphics.PorterDuff.Mode mode) {
        if (mBackgroundTintMode != mode) {
            mBackgroundTintMode = mode;
            getImpl().setBackgroundTintMode(mode);
        }
    }

    public void setCompatElevation(float f) {
        getImpl().setElevation(f);
    }

    public void setImageResource(int i) {
        mImageHelper.setImageResource(i);
    }

    public void setRippleColor(int i) {
        if (mRippleColor != i) {
            mRippleColor = i;
            getImpl().setRippleColor(i);
        }
    }

    public void setSize(int i) {
        if (i != mSize) {
            mSize = i;
            requestLayout();
        }
    }

    public void setUseCompatPadding(boolean flag) {
        if (mCompatPadding != flag) {
            mCompatPadding = flag;
            getImpl().onCompatShadowChanged();
        }
    }

    public volatile void setVisibility(int i) {
        super.setVisibility(i);
    }

    public void show() {
        show(null);
    }

    public void show(OnVisibilityChangedListener onvisibilitychangedlistener) {
        show(onvisibilitychangedlistener, true);
    }

    void show(OnVisibilityChangedListener onvisibilitychangedlistener, boolean flag) {
        getImpl().show(wrapOnVisibilityChangedListener(onvisibilitychangedlistener), flag);
    }

}
