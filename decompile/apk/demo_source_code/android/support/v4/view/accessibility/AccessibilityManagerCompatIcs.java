// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v4.view.accessibility;

import android.view.accessibility.AccessibilityManager;
import java.util.List;

class AccessibilityManagerCompatIcs {
    static interface AccessibilityStateChangeListenerBridge {

        public abstract void onAccessibilityStateChanged(boolean flag);
    }

    public static class AccessibilityStateChangeListenerWrapper
        implements android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener {

        Object mListener;
        AccessibilityStateChangeListenerBridge mListenerBridge;

        public boolean equals(Object obj) {
            boolean flag = true;
            if (this != obj) goto _L2; else goto _L1
_L1:
            return flag;
_L2:
            if (obj == null || getClass() != obj.getClass()) {
                flag = false;
            } else {
                obj = (AccessibilityStateChangeListenerWrapper)obj;
                if (mListener == null) {
                    if (((AccessibilityStateChangeListenerWrapper) (obj)).mListener != null)
                        flag = false;
                } else {
                    flag = mListener.equals(((AccessibilityStateChangeListenerWrapper) (obj)).mListener);
                }
            }
            if (true) goto _L1; else goto _L3
_L3:
        }

        public int hashCode() {
            int i;
            if (mListener == null)
                i = 0;
            else
                i = mListener.hashCode();
            return i;
        }

        public void onAccessibilityStateChanged(boolean flag) {
            mListenerBridge.onAccessibilityStateChanged(flag);
        }

        public AccessibilityStateChangeListenerWrapper(Object obj, AccessibilityStateChangeListenerBridge accessibilitystatechangelistenerbridge) {
            mListener = obj;
            mListenerBridge = accessibilitystatechangelistenerbridge;
        }
    }


    AccessibilityManagerCompatIcs() {
    }

    public static boolean addAccessibilityStateChangeListener(AccessibilityManager accessibilitymanager, AccessibilityStateChangeListenerWrapper accessibilitystatechangelistenerwrapper) {
        return accessibilitymanager.addAccessibilityStateChangeListener(accessibilitystatechangelistenerwrapper);
    }

    public static List getEnabledAccessibilityServiceList(AccessibilityManager accessibilitymanager, int i) {
        return accessibilitymanager.getEnabledAccessibilityServiceList(i);
    }

    public static List getInstalledAccessibilityServiceList(AccessibilityManager accessibilitymanager) {
        return accessibilitymanager.getInstalledAccessibilityServiceList();
    }

    public static boolean isTouchExplorationEnabled(AccessibilityManager accessibilitymanager) {
        return accessibilitymanager.isTouchExplorationEnabled();
    }

    public static boolean removeAccessibilityStateChangeListener(AccessibilityManager accessibilitymanager, AccessibilityStateChangeListenerWrapper accessibilitystatechangelistenerwrapper) {
        return accessibilitymanager.removeAccessibilityStateChangeListener(accessibilitystatechangelistenerwrapper);
    }
}
