// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v4.view.accessibility;

import android.os.Bundle;
import java.util.ArrayList;
import java.util.List;

// Referenced classes of package android.support.v4.view.accessibility:
//            AccessibilityNodeInfoCompat, AccessibilityNodeProviderCompatJellyBean, AccessibilityNodeProviderCompatKitKat

public class AccessibilityNodeProviderCompat {
    static interface AccessibilityNodeProviderImpl {

        public abstract Object newAccessibilityNodeProviderBridge(AccessibilityNodeProviderCompat accessibilitynodeprovidercompat);
    }

    private static class AccessibilityNodeProviderJellyBeanImpl extends AccessibilityNodeProviderStubImpl {

        public Object newAccessibilityNodeProviderBridge(AccessibilityNodeProviderCompat accessibilitynodeprovidercompat) {
            return AccessibilityNodeProviderCompatJellyBean.newAccessibilityNodeProviderBridge(accessibilitynodeprovidercompat. new AccessibilityNodeProviderCompatJellyBean.AccessibilityNodeInfoBridge() {

                final AccessibilityNodeProviderJellyBeanImpl this$0;
                final AccessibilityNodeProviderCompat val$compat;

                public Object createAccessibilityNodeInfo(int i) {
                    Object obj = compat.createAccessibilityNodeInfo(i);
                    if (obj == null)
                        obj = null;
                    else
                        obj = ((AccessibilityNodeInfoCompat) (obj)).getInfo();
                    return obj;
                }

                public List findAccessibilityNodeInfosByText(String s, int i) {
                    List list = compat.findAccessibilityNodeInfosByText(s, i);
                    if (list == null) {
                        s = null;
                    } else {
                        s = new ArrayList();
                        int j = list.size();
                        i = 0;
                        while (i < j)  {
                            s.add(((AccessibilityNodeInfoCompat)list.get(i)).getInfo());
                            i++;
                        }
                    }
                    return s;
                }

                public boolean performAction(int i, int j, Bundle bundle) {
                    return compat.performAction(i, j, bundle);
                }

             {
                this$0 = final_accessibilitynodeproviderjellybeanimpl;
                compat = AccessibilityNodeProviderCompat.this;
                super();
            }
            }
);
        }

        AccessibilityNodeProviderJellyBeanImpl() {
        }
    }

    private static class AccessibilityNodeProviderKitKatImpl extends AccessibilityNodeProviderStubImpl {

        public Object newAccessibilityNodeProviderBridge(AccessibilityNodeProviderCompat accessibilitynodeprovidercompat) {
            return AccessibilityNodeProviderCompatKitKat.newAccessibilityNodeProviderBridge(accessibilitynodeprovidercompat. new AccessibilityNodeProviderCompatKitKat.AccessibilityNodeInfoBridge() {

                final AccessibilityNodeProviderKitKatImpl this$0;
                final AccessibilityNodeProviderCompat val$compat;

                public Object createAccessibilityNodeInfo(int i) {
                    Object obj = compat.createAccessibilityNodeInfo(i);
                    if (obj == null)
                        obj = null;
                    else
                        obj = ((AccessibilityNodeInfoCompat) (obj)).getInfo();
                    return obj;
                }

                public List findAccessibilityNodeInfosByText(String s, int i) {
                    List list = compat.findAccessibilityNodeInfosByText(s, i);
                    if (list == null) {
                        s = null;
                    } else {
                        s = new ArrayList();
                        int j = list.size();
                        i = 0;
                        while (i < j)  {
                            s.add(((AccessibilityNodeInfoCompat)list.get(i)).getInfo());
                            i++;
                        }
                    }
                    return s;
                }

                public Object findFocus(int i) {
                    Object obj = compat.findFocus(i);
                    if (obj == null)
                        obj = null;
                    else
                        obj = ((AccessibilityNodeInfoCompat) (obj)).getInfo();
                    return obj;
                }

                public boolean performAction(int i, int j, Bundle bundle) {
                    return compat.performAction(i, j, bundle);
                }

             {
                this$0 = final_accessibilitynodeproviderkitkatimpl;
                compat = AccessibilityNodeProviderCompat.this;
                super();
            }
            }
);
        }

        AccessibilityNodeProviderKitKatImpl() {
        }
    }

    static class AccessibilityNodeProviderStubImpl
        implements AccessibilityNodeProviderImpl {

        public Object newAccessibilityNodeProviderBridge(AccessibilityNodeProviderCompat accessibilitynodeprovidercompat) {
            return null;
        }

        AccessibilityNodeProviderStubImpl() {
        }
    }


    public static final int HOST_VIEW_ID = -1;
    private static final AccessibilityNodeProviderImpl IMPL;
    private final Object mProvider;

    public AccessibilityNodeProviderCompat() {
        mProvider = IMPL.newAccessibilityNodeProviderBridge(this);
    }

    public AccessibilityNodeProviderCompat(Object obj) {
        mProvider = obj;
    }

    public AccessibilityNodeInfoCompat createAccessibilityNodeInfo(int i) {
        return null;
    }

    public List findAccessibilityNodeInfosByText(String s, int i) {
        return null;
    }

    public AccessibilityNodeInfoCompat findFocus(int i) {
        return null;
    }

    public Object getProvider() {
        return mProvider;
    }

    public boolean performAction(int i, int j, Bundle bundle) {
        return false;
    }

    static  {
        if (android.os.Build.VERSION.SDK_INT >= 19)
            IMPL = new AccessibilityNodeProviderKitKatImpl();
        else
        if (android.os.Build.VERSION.SDK_INT >= 16)
            IMPL = new AccessibilityNodeProviderJellyBeanImpl();
        else
            IMPL = new AccessibilityNodeProviderStubImpl();
    }
}
