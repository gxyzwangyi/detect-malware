// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v4.view.animation;

import android.graphics.Path;
import android.graphics.PathMeasure;
import android.view.animation.Interpolator;

class PathInterpolatorGingerbread
    implements Interpolator {

    private static final float PRECISION = 0.002F;
    private final float mX[];
    private final float mY[];

    public PathInterpolatorGingerbread(float f, float f1) {
        this(createQuad(f, f1));
    }

    public PathInterpolatorGingerbread(float f, float f1, float f2, float f3) {
        this(createCubic(f, f1, f2, f3));
    }

    public PathInterpolatorGingerbread(Path path) {
        path = new PathMeasure(path, false);
        float f = path.getLength();
        int j = (int)(f / 0.002F) + 1;
        mX = new float[j];
        mY = new float[j];
        float af[] = new float[2];
        for (int i = 0; i < j; i++) {
            path.getPosTan(((float)i * f) / (float)(j - 1), af, null);
            mX[i] = af[0];
            mY[i] = af[1];
        }

    }

    private static Path createCubic(float f, float f1, float f2, float f3) {
        Path path = new Path();
        path.moveTo(0.0F, 0.0F);
        path.cubicTo(f, f1, f2, f3, 1.0F, 1.0F);
        return path;
    }

    private static Path createQuad(float f, float f1) {
        Path path = new Path();
        path.moveTo(0.0F, 0.0F);
        path.quadTo(f, f1, 1.0F, 1.0F);
        return path;
    }

    public float getInterpolation(float f) {
        float f1 = 1.0F;
        if (f > 0.0F) goto _L2; else goto _L1
_L1:
        f1 = 0.0F;
_L4:
        return f1;
_L2:
        if (f < 1.0F) {
            int j = 0;
            int i;
            for (i = mX.length - 1; i - j > 1;) {
                int k = (j + i) / 2;
                if (f < mX[k])
                    i = k;
                else
                    j = k;
            }

            f1 = mX[i] - mX[j];
            if (f1 == 0.0F) {
                f1 = mY[j];
            } else {
                f = (f - mX[j]) / f1;
                f1 = mY[j];
                f1 = f * (mY[i] - f1) + f1;
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }
}
