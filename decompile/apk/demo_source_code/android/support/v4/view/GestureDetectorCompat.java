// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v4.view;

import android.content.Context;
import android.os.Handler;
import android.os.Message;
import android.view.*;

// Referenced classes of package android.support.v4.view:
//            MotionEventCompat, VelocityTrackerCompat

public final class GestureDetectorCompat {
    static interface GestureDetectorCompatImpl {

        public abstract boolean isLongpressEnabled();

        public abstract boolean onTouchEvent(MotionEvent motionevent);

        public abstract void setIsLongpressEnabled(boolean flag);

        public abstract void setOnDoubleTapListener(android.view.GestureDetector.OnDoubleTapListener ondoubletaplistener);
    }

    static class GestureDetectorCompatImplBase
        implements GestureDetectorCompatImpl {

        private static final int DOUBLE_TAP_TIMEOUT = ViewConfiguration.getDoubleTapTimeout();
        private static final int LONGPRESS_TIMEOUT = ViewConfiguration.getLongPressTimeout();
        private static final int LONG_PRESS = 2;
        private static final int SHOW_PRESS = 1;
        private static final int TAP = 3;
        private static final int TAP_TIMEOUT = ViewConfiguration.getTapTimeout();
        private boolean mAlwaysInBiggerTapRegion;
        private boolean mAlwaysInTapRegion;
        MotionEvent mCurrentDownEvent;
        boolean mDeferConfirmSingleTap;
        android.view.GestureDetector.OnDoubleTapListener mDoubleTapListener;
        private int mDoubleTapSlopSquare;
        private float mDownFocusX;
        private float mDownFocusY;
        private final Handler mHandler;
        private boolean mInLongPress;
        private boolean mIsDoubleTapping;
        private boolean mIsLongpressEnabled;
        private float mLastFocusX;
        private float mLastFocusY;
        final android.view.GestureDetector.OnGestureListener mListener;
        private int mMaximumFlingVelocity;
        private int mMinimumFlingVelocity;
        private MotionEvent mPreviousUpEvent;
        boolean mStillDown;
        private int mTouchSlopSquare;
        private VelocityTracker mVelocityTracker;

        private void cancel() {
            mHandler.removeMessages(1);
            mHandler.removeMessages(2);
            mHandler.removeMessages(3);
            mVelocityTracker.recycle();
            mVelocityTracker = null;
            mIsDoubleTapping = false;
            mStillDown = false;
            mAlwaysInTapRegion = false;
            mAlwaysInBiggerTapRegion = false;
            mDeferConfirmSingleTap = false;
            if (mInLongPress)
                mInLongPress = false;
        }

        private void cancelTaps() {
            mHandler.removeMessages(1);
            mHandler.removeMessages(2);
            mHandler.removeMessages(3);
            mIsDoubleTapping = false;
            mAlwaysInTapRegion = false;
            mAlwaysInBiggerTapRegion = false;
            mDeferConfirmSingleTap = false;
            if (mInLongPress)
                mInLongPress = false;
        }

        private void init(Context context) {
            if (context == null)
                throw new IllegalArgumentException("Context must not be null");
            if (mListener == null) {
                throw new IllegalArgumentException("OnGestureListener must not be null");
            } else {
                mIsLongpressEnabled = true;
                context = ViewConfiguration.get(context);
                int j = context.getScaledTouchSlop();
                int i = context.getScaledDoubleTapSlop();
                mMinimumFlingVelocity = context.getScaledMinimumFlingVelocity();
                mMaximumFlingVelocity = context.getScaledMaximumFlingVelocity();
                mTouchSlopSquare = j * j;
                mDoubleTapSlopSquare = i * i;
                return;
            }
        }

        private boolean isConsideredDoubleTap(MotionEvent motionevent, MotionEvent motionevent1, MotionEvent motionevent2) {
            boolean flag1 = false;
            if (mAlwaysInBiggerTapRegion) goto _L2; else goto _L1
_L1:
            boolean flag = flag1;
_L4:
            return flag;
_L2:
            flag = flag1;
            if (motionevent2.getEventTime() - motionevent1.getEventTime() <= (long)DOUBLE_TAP_TIMEOUT) {
                int i = (int)motionevent.getX() - (int)motionevent2.getX();
                int j = (int)motionevent.getY() - (int)motionevent2.getY();
                flag = flag1;
                if (i * i + j * j < mDoubleTapSlopSquare)
                    flag = true;
            }
            if (true) goto _L4; else goto _L3
_L3:
        }

        void dispatchLongPress() {
            mHandler.removeMessages(3);
            mDeferConfirmSingleTap = false;
            mInLongPress = true;
            mListener.onLongPress(mCurrentDownEvent);
        }

        public boolean isLongpressEnabled() {
            return mIsLongpressEnabled;
        }

        public boolean onTouchEvent(MotionEvent motionevent) {
            float f3;
            float f6;
            int i2;
            boolean flag1;
            boolean flag2;
            flag2 = false;
            int j2 = motionevent.getAction();
            if (mVelocityTracker == null)
                mVelocityTracker = VelocityTracker.obtain();
            mVelocityTracker.addMovement(motionevent);
            float f;
            boolean flag;
            int l;
            int k1;
            if ((j2 & 0xff) == 6)
                flag = true;
            else
                flag = false;
            if (flag)
                l = MotionEventCompat.getActionIndex(motionevent);
            else
                l = -1;
            i2 = motionevent.getPointerCount();
            k1 = 0;
            f = 0.0F;
            f3 = 0.0F;
            while (k1 < i2)  {
                if (l != k1) {
                    f3 += motionevent.getX(k1);
                    f += motionevent.getY(k1);
                }
                k1++;
            }
            int i;
            if (flag)
                i = i2 - 1;
            else
                i = i2;
            f3 /= i;
            f6 = f / (float)i;
            flag1 = flag2;
            j2 & 0xff;
            JVM INSTR tableswitch 0 6: default 200
        //                       0 399
        //                       1 896
        //                       2 665
        //                       3 1170
        //                       4 204
        //                       5 214
        //                       6 247;
               goto _L1 _L2 _L3 _L4 _L5 _L6 _L7 _L8
_L6:
            break; /* Loop/switch isn't completed */
_L1:
            flag1 = flag2;
_L22:
            return flag1;
_L7:
            mLastFocusX = f3;
            mDownFocusX = f3;
            mLastFocusY = f6;
            mDownFocusY = f6;
            cancelTaps();
            flag1 = flag2;
            continue; /* Loop/switch isn't completed */
_L8:
            float f1;
            float f4;
            int j;
            int i1;
            mLastFocusX = f3;
            mDownFocusX = f3;
            mLastFocusY = f6;
            mDownFocusY = f6;
            mVelocityTracker.computeCurrentVelocity(1000, mMaximumFlingVelocity);
            i1 = MotionEventCompat.getActionIndex(motionevent);
            j = motionevent.getPointerId(i1);
            f1 = VelocityTrackerCompat.getXVelocity(mVelocityTracker, j);
            f4 = VelocityTrackerCompat.getYVelocity(mVelocityTracker, j);
            j = 0;
_L10:
            flag1 = flag2;
            if (j >= i2)
                continue; /* Loop/switch isn't completed */
            if (j != i1)
                break; /* Loop/switch isn't completed */
_L12:
            j++;
            if (true) goto _L10; else goto _L9
_L9:
            int l1;
            l1 = motionevent.getPointerId(j);
            f3 = VelocityTrackerCompat.getXVelocity(mVelocityTracker, l1);
            if (VelocityTrackerCompat.getYVelocity(mVelocityTracker, l1) * f4 + f3 * f1 >= 0.0F) goto _L12; else goto _L11
_L11:
            mVelocityTracker.clear();
            flag1 = flag2;
            continue; /* Loop/switch isn't completed */
_L2:
            if (mDoubleTapListener == null) goto _L14; else goto _L13
_L13:
            flag1 = mHandler.hasMessages(3);
            if (flag1)
                mHandler.removeMessages(3);
            if (mCurrentDownEvent == null || mPreviousUpEvent == null || !flag1 || !isConsideredDoubleTap(mCurrentDownEvent, mPreviousUpEvent, motionevent)) goto _L16; else goto _L15
_L15:
            mIsDoubleTapping = true;
            j = mDoubleTapListener.onDoubleTap(mCurrentDownEvent) | false | mDoubleTapListener.onDoubleTapEvent(motionevent);
_L17:
            mLastFocusX = f3;
            mDownFocusX = f3;
            mLastFocusY = f6;
            mDownFocusY = f6;
            if (mCurrentDownEvent != null)
                mCurrentDownEvent.recycle();
            mCurrentDownEvent = MotionEvent.obtain(motionevent);
            mAlwaysInTapRegion = true;
            mAlwaysInBiggerTapRegion = true;
            mStillDown = true;
            mInLongPress = false;
            mDeferConfirmSingleTap = false;
            if (mIsLongpressEnabled) {
                mHandler.removeMessages(2);
                mHandler.sendEmptyMessageAtTime(2, mCurrentDownEvent.getDownTime() + (long)TAP_TIMEOUT + (long)LONGPRESS_TIMEOUT);
            }
            mHandler.sendEmptyMessageAtTime(1, mCurrentDownEvent.getDownTime() + (long)TAP_TIMEOUT);
            flag1 = j | mListener.onDown(motionevent);
            continue; /* Loop/switch isn't completed */
_L16:
            mHandler.sendEmptyMessageDelayed(3, DOUBLE_TAP_TIMEOUT);
_L14:
            j = 0;
            if (true) goto _L17; else goto _L4
_L4:
            flag1 = flag2;
            if (mInLongPress)
                continue; /* Loop/switch isn't completed */
            float f5 = mLastFocusX - f3;
            float f2 = mLastFocusY - f6;
            if (mIsDoubleTapping) {
                flag1 = false | mDoubleTapListener.onDoubleTapEvent(motionevent);
                continue; /* Loop/switch isn't completed */
            }
            if (mAlwaysInTapRegion) {
                int k = (int)(f3 - mDownFocusX);
                int j1 = (int)(f6 - mDownFocusY);
                k = k * k + j1 * j1;
                VelocityTracker velocitytracker;
                MotionEvent motionevent1;
                if (k > mTouchSlopSquare) {
                    flag1 = mListener.onScroll(mCurrentDownEvent, motionevent, f5, f2);
                    mLastFocusX = f3;
                    mLastFocusY = f6;
                    mAlwaysInTapRegion = false;
                    mHandler.removeMessages(3);
                    mHandler.removeMessages(1);
                    mHandler.removeMessages(2);
                } else {
                    flag1 = false;
                }
                if (k > mTouchSlopSquare)
                    mAlwaysInBiggerTapRegion = false;
                continue; /* Loop/switch isn't completed */
            }
            if (Math.abs(f5) < 1.0F) {
                flag1 = flag2;
                if (Math.abs(f2) < 1.0F)
                    continue; /* Loop/switch isn't completed */
            }
            flag1 = mListener.onScroll(mCurrentDownEvent, motionevent, f5, f2);
            mLastFocusX = f3;
            mLastFocusY = f6;
            continue; /* Loop/switch isn't completed */
_L3:
            mStillDown = false;
            motionevent1 = MotionEvent.obtain(motionevent);
            if (!mIsDoubleTapping) goto _L19; else goto _L18
_L18:
            flag1 = mDoubleTapListener.onDoubleTapEvent(motionevent) | false;
_L20:
            if (mPreviousUpEvent != null)
                mPreviousUpEvent.recycle();
            mPreviousUpEvent = motionevent1;
            if (mVelocityTracker != null) {
                mVelocityTracker.recycle();
                mVelocityTracker = null;
            }
            mIsDoubleTapping = false;
            mDeferConfirmSingleTap = false;
            mHandler.removeMessages(1);
            mHandler.removeMessages(2);
            continue; /* Loop/switch isn't completed */
_L19:
            if (mInLongPress) {
                mHandler.removeMessages(3);
                mInLongPress = false;
                flag1 = false;
            } else
            if (mAlwaysInTapRegion) {
                flag2 = mListener.onSingleTapUp(motionevent);
                flag1 = flag2;
                if (mDeferConfirmSingleTap) {
                    flag1 = flag2;
                    if (mDoubleTapListener != null) {
                        mDoubleTapListener.onSingleTapConfirmed(motionevent);
                        flag1 = flag2;
                    }
                }
            } else {
                velocitytracker = mVelocityTracker;
                k = motionevent.getPointerId(0);
                velocitytracker.computeCurrentVelocity(1000, mMaximumFlingVelocity);
                f2 = VelocityTrackerCompat.getYVelocity(velocitytracker, k);
                f3 = VelocityTrackerCompat.getXVelocity(velocitytracker, k);
                if (Math.abs(f2) > (float)mMinimumFlingVelocity || Math.abs(f3) > (float)mMinimumFlingVelocity)
                    flag1 = mListener.onFling(mCurrentDownEvent, motionevent, f3, f2);
                else
                    flag1 = false;
            }
            if (true) goto _L20; else goto _L5
_L5:
            cancel();
            flag1 = flag2;
            if (true) goto _L22; else goto _L21
_L21:
        }

        public void setIsLongpressEnabled(boolean flag) {
            mIsLongpressEnabled = flag;
        }

        public void setOnDoubleTapListener(android.view.GestureDetector.OnDoubleTapListener ondoubletaplistener) {
            mDoubleTapListener = ondoubletaplistener;
        }


        public GestureDetectorCompatImplBase(Context context, android.view.GestureDetector.OnGestureListener ongesturelistener, Handler handler) {
            if (handler != null)
                mHandler = new GestureHandler(handler);
            else
                mHandler = new GestureHandler();
            mListener = ongesturelistener;
            if (ongesturelistener instanceof android.view.GestureDetector.OnDoubleTapListener)
                setOnDoubleTapListener((android.view.GestureDetector.OnDoubleTapListener)ongesturelistener);
            init(context);
        }
    }

    private class GestureDetectorCompatImplBase.GestureHandler extends Handler {

        final GestureDetectorCompatImplBase this$0;

        public void handleMessage(Message message) {
            message.what;
            JVM INSTR tableswitch 1 3: default 32
        //                       1 59
        //                       2 79
        //                       3 89;
               goto _L1 _L2 _L3 _L4
_L1:
            throw new RuntimeException((new StringBuilder()).append("Unknown message ").append(message).toString());
_L2:
            mListener.onShowPress(mCurrentDownEvent);
_L6:
            return;
_L3:
            dispatchLongPress();
            continue; /* Loop/switch isn't completed */
_L4:
            if (mDoubleTapListener != null)
                if (!mStillDown)
                    mDoubleTapListener.onSingleTapConfirmed(mCurrentDownEvent);
                else
                    mDeferConfirmSingleTap = true;
            if (true) goto _L6; else goto _L5
_L5:
        }

        GestureDetectorCompatImplBase.GestureHandler() {
            this$0 = GestureDetectorCompatImplBase.this;
            super();
        }

        GestureDetectorCompatImplBase.GestureHandler(Handler handler) {
            this$0 = GestureDetectorCompatImplBase.this;
            super(handler.getLooper());
        }
    }

    static class GestureDetectorCompatImplJellybeanMr2
        implements GestureDetectorCompatImpl {

        private final GestureDetector mDetector;

        public boolean isLongpressEnabled() {
            return mDetector.isLongpressEnabled();
        }

        public boolean onTouchEvent(MotionEvent motionevent) {
            return mDetector.onTouchEvent(motionevent);
        }

        public void setIsLongpressEnabled(boolean flag) {
            mDetector.setIsLongpressEnabled(flag);
        }

        public void setOnDoubleTapListener(android.view.GestureDetector.OnDoubleTapListener ondoubletaplistener) {
            mDetector.setOnDoubleTapListener(ondoubletaplistener);
        }

        public GestureDetectorCompatImplJellybeanMr2(Context context, android.view.GestureDetector.OnGestureListener ongesturelistener, Handler handler) {
            mDetector = new GestureDetector(context, ongesturelistener, handler);
        }
    }


    private final GestureDetectorCompatImpl mImpl;

    public GestureDetectorCompat(Context context, android.view.GestureDetector.OnGestureListener ongesturelistener) {
        this(context, ongesturelistener, null);
    }

    public GestureDetectorCompat(Context context, android.view.GestureDetector.OnGestureListener ongesturelistener, Handler handler) {
        if (android.os.Build.VERSION.SDK_INT > 17)
            mImpl = new GestureDetectorCompatImplJellybeanMr2(context, ongesturelistener, handler);
        else
            mImpl = new GestureDetectorCompatImplBase(context, ongesturelistener, handler);
    }

    public boolean isLongpressEnabled() {
        return mImpl.isLongpressEnabled();
    }

    public boolean onTouchEvent(MotionEvent motionevent) {
        return mImpl.onTouchEvent(motionevent);
    }

    public void setIsLongpressEnabled(boolean flag) {
        mImpl.setIsLongpressEnabled(flag);
    }

    public void setOnDoubleTapListener(android.view.GestureDetector.OnDoubleTapListener ondoubletaplistener) {
        mImpl.setOnDoubleTapListener(ondoubletaplistener);
    }
}
