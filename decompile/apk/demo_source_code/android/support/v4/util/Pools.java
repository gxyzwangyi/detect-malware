// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v4.util;


public final class Pools {
    public static interface Pool {

        public abstract Object acquire();

        public abstract boolean release(Object obj);
    }

    public static class SimplePool
        implements Pool {

        private final Object mPool[];
        private int mPoolSize;

        private boolean isInPool(Object obj) {
            boolean flag1 = false;
            int i = 0;
            do {
label0:
                {
                    boolean flag = flag1;
                    if (i < mPoolSize) {
                        if (mPool[i] != obj)
                            break label0;
                        flag = true;
                    }
                    return flag;
                }
                i++;
            } while (true);
        }

        public Object acquire() {
            Object obj;
            if (mPoolSize > 0) {
                int i = mPoolSize - 1;
                obj = mPool[i];
                mPool[i] = null;
                mPoolSize = mPoolSize - 1;
            } else {
                obj = null;
            }
            return obj;
        }

        public boolean release(Object obj) {
            if (isInPool(obj))
                throw new IllegalStateException("Already in the pool!");
            boolean flag;
            if (mPoolSize < mPool.length) {
                mPool[mPoolSize] = obj;
                mPoolSize = mPoolSize + 1;
                flag = true;
            } else {
                flag = false;
            }
            return flag;
        }

        public SimplePool(int i) {
            if (i <= 0) {
                throw new IllegalArgumentException("The max pool size must be > 0");
            } else {
                mPool = new Object[i];
                return;
            }
        }
    }

    public static class SynchronizedPool extends SimplePool {

        private final Object mLock = new Object();

        public Object acquire() {
            Object obj1;
            synchronized (mLock) {
                obj1 = super.acquire();
            }
            return obj1;
            exception;
            obj;
            JVM INSTR monitorexit ;
            throw exception;
        }

        public boolean release(Object obj) {
            boolean flag;
            synchronized (mLock) {
                flag = super.release(obj);
            }
            return flag;
            obj;
            obj1;
            JVM INSTR monitorexit ;
            throw obj;
        }

        public SynchronizedPool(int i) {
            super(i);
        }
    }


    private Pools() {
    }
}
