// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v4.util;


class ContainerHelpers {

    static final int EMPTY_INTS[] = new int[0];
    static final long EMPTY_LONGS[] = new long[0];
    static final Object EMPTY_OBJECTS[] = new Object[0];

    ContainerHelpers() {
    }

    static int binarySearch(int ai[], int i, int j) {
        i = l;
_L2:
        return i;
        int l = 0;
        int k = i - 1;
        for (i = l; i <= k;) {
            l = i + k >>> 1;
            int i1 = ai[l];
            if (i1 < j) {
                i = l + 1;
            } else {
label0:
                {
                    if (i1 <= j)
                        break label0;
                    k = l - 1;
                }
            }
        }

        i = ~i;
        if (true) goto _L2; else goto _L1
_L1:
    }

    static int binarySearch(long al[], int i, long l) {
        i = k;
_L2:
        return i;
        int k = 0;
        int j = i - 1;
        for (i = k; i <= j;) {
            k = i + j >>> 1;
            long l1 = al[k];
            if (l1 < l) {
                i = k + 1;
            } else {
label0:
                {
                    if (l1 <= l)
                        break label0;
                    j = k - 1;
                }
            }
        }

        i = ~i;
        if (true) goto _L2; else goto _L1
_L1:
    }

    public static boolean equal(Object obj, Object obj1) {
        boolean flag;
        if (obj == obj1 || obj != null && obj.equals(obj1))
            flag = true;
        else
            flag = false;
        return flag;
    }

    public static int idealByteArraySize(int i) {
        int k = 4;
        do {
label0:
            {
                int j = i;
                if (k < 32) {
                    if (i > (1 << k) - 12)
                        break label0;
                    j = (1 << k) - 12;
                }
                return j;
            }
            k++;
        } while (true);
    }

    public static int idealIntArraySize(int i) {
        return idealByteArraySize(i * 4) / 4;
    }

    public static int idealLongArraySize(int i) {
        return idealByteArraySize(i * 8) / 8;
    }

}
