// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v4.text.util;

import android.support.v4.util.PatternsCompat;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.method.LinkMovementMethod;
import android.text.style.URLSpan;
import android.text.util.Linkify;
import android.webkit.WebView;
import android.widget.TextView;
import java.io.UnsupportedEncodingException;
import java.lang.annotation.Annotation;
import java.net.URLEncoder;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class LinkifyCompat {
    private static class LinkSpec {

        int end;
        URLSpan frameworkAddedSpan;
        int start;
        String url;

        LinkSpec() {
        }
    }

    public static interface LinkifyMask
        extends Annotation {
    }


    private static final Comparator COMPARATOR = new Comparator() {

        public final int compare(LinkSpec linkspec, LinkSpec linkspec1) {
            byte byte0 = -1;
            if (linkspec.start >= linkspec1.start) goto _L2; else goto _L1
_L1:
            return byte0;
_L2:
            if (linkspec.start > linkspec1.start)
                byte0 = 1;
            else
            if (linkspec.end < linkspec1.end)
                byte0 = 1;
            else
            if (linkspec.end <= linkspec1.end)
                byte0 = 0;
            if (true) goto _L1; else goto _L3
_L3:
        }

        public volatile int compare(Object obj, Object obj1) {
            return compare((LinkSpec)obj, (LinkSpec)obj1);
        }

    }
;
    private static final String EMPTY_STRING[] = new String[0];

    private LinkifyCompat() {
    }

    private static void addLinkMovementMethod(TextView textview) {
        android.text.method.MovementMethod movementmethod = textview.getMovementMethod();
        if ((movementmethod == null || !(movementmethod instanceof LinkMovementMethod)) && textview.getLinksClickable())
            textview.setMovementMethod(LinkMovementMethod.getInstance());
    }

    public static final void addLinks(TextView textview, Pattern pattern, String s) {
        addLinks(textview, pattern, s, null, null, null);
    }

    public static final void addLinks(TextView textview, Pattern pattern, String s, android.text.util.Linkify.MatchFilter matchfilter, android.text.util.Linkify.TransformFilter transformfilter) {
        addLinks(textview, pattern, s, null, matchfilter, transformfilter);
    }

    public static final void addLinks(TextView textview, Pattern pattern, String s, String as[], android.text.util.Linkify.MatchFilter matchfilter, android.text.util.Linkify.TransformFilter transformfilter) {
        SpannableString spannablestring = SpannableString.valueOf(textview.getText());
        if (addLinks(((Spannable) (spannablestring)), pattern, s, as, matchfilter, transformfilter)) {
            textview.setText(spannablestring);
            addLinkMovementMethod(textview);
        }
    }

    public static final boolean addLinks(Spannable spannable, int i) {
        boolean flag;
        if (i == 0) {
            flag = false;
        } else {
            URLSpan aurlspan[] = (URLSpan[])spannable.getSpans(0, spannable.length(), android/text/style/URLSpan);
            for (int j = aurlspan.length - 1; j >= 0; j--)
                spannable.removeSpan(aurlspan[j]);

            if ((i & 4) != 0)
                Linkify.addLinks(spannable, 4);
            ArrayList arraylist = new ArrayList();
            if ((i & 1) != 0) {
                Pattern pattern = PatternsCompat.AUTOLINK_WEB_URL;
                android.text.util.Linkify.MatchFilter matchfilter = Linkify.sUrlMatchFilter;
                gatherLinks(arraylist, spannable, pattern, new String[] {
                    "http://", "https://", "rtsp://"
                }, matchfilter, null);
            }
            if ((i & 2) != 0)
                gatherLinks(arraylist, spannable, PatternsCompat.AUTOLINK_EMAIL_ADDRESS, new String[] {
                    "mailto:"
                }, null, null);
            if ((i & 8) != 0)
                gatherMapLinks(arraylist, spannable);
            pruneOverlaps(arraylist, spannable);
            if (arraylist.size() == 0) {
                flag = false;
            } else {
                Iterator iterator = arraylist.iterator();
                do {
                    if (!iterator.hasNext())
                        break;
                    LinkSpec linkspec = (LinkSpec)iterator.next();
                    if (linkspec.frameworkAddedSpan == null)
                        applyLink(linkspec.url, linkspec.start, linkspec.end, spannable);
                } while (true);
                flag = true;
            }
        }
        return flag;
    }

    public static final boolean addLinks(Spannable spannable, Pattern pattern, String s) {
        return addLinks(spannable, pattern, s, null, null, null);
    }

    public static final boolean addLinks(Spannable spannable, Pattern pattern, String s, android.text.util.Linkify.MatchFilter matchfilter, android.text.util.Linkify.TransformFilter transformfilter) {
        return addLinks(spannable, pattern, s, null, matchfilter, transformfilter);
    }

    public static final boolean addLinks(Spannable spannable, Pattern pattern, String s, String as[], android.text.util.Linkify.MatchFilter matchfilter, android.text.util.Linkify.TransformFilter transformfilter) {
        String s1;
label0:
        {
            s1 = s;
            if (s == null)
                s1 = "";
            if (as != null) {
                s = as;
                if (as.length >= 1)
                    break label0;
            }
            s = EMPTY_STRING;
        }
        String as1[] = new String[s.length + 1];
        as1[0] = s1.toLowerCase(Locale.ROOT);
        int i = 0;
        while (i < s.length)  {
            as = s[i];
            if (as == null)
                as = "";
            else
                as = as.toLowerCase(Locale.ROOT);
            as1[i + 1] = as;
            i++;
        }
        pattern = pattern.matcher(spannable);
        boolean flag = false;
        do {
            if (!pattern.find())
                break;
            int j = pattern.start();
            int k = pattern.end();
            boolean flag1;
            if (matchfilter != null)
                flag1 = matchfilter.acceptMatch(spannable, j, k);
            else
                flag1 = true;
            if (flag1) {
                applyLink(makeUrl(pattern.group(0), as1, pattern, transformfilter), j, k, spannable);
                flag = true;
            }
        } while (true);
        return flag;
    }

    public static final boolean addLinks(TextView textview, int i) {
        boolean flag;
        if (i == 0) {
            flag = false;
        } else {
            Object obj = textview.getText();
            if (obj instanceof Spannable) {
                if (addLinks((Spannable)obj, i)) {
                    addLinkMovementMethod(textview);
                    flag = true;
                } else {
                    flag = false;
                }
            } else {
                obj = SpannableString.valueOf(((CharSequence) (obj)));
                if (addLinks(((Spannable) (obj)), i)) {
                    addLinkMovementMethod(textview);
                    textview.setText(((CharSequence) (obj)));
                    flag = true;
                } else {
                    flag = false;
                }
            }
        }
        return flag;
    }

    private static void applyLink(String s, int i, int j, Spannable spannable) {
        spannable.setSpan(new URLSpan(s), i, j, 33);
    }

    private static void gatherLinks(ArrayList arraylist, Spannable spannable, Pattern pattern, String as[], android.text.util.Linkify.MatchFilter matchfilter, android.text.util.Linkify.TransformFilter transformfilter) {
        pattern = pattern.matcher(spannable);
        do {
            if (!pattern.find())
                break;
            int i = pattern.start();
            int j = pattern.end();
            if (matchfilter == null || matchfilter.acceptMatch(spannable, i, j)) {
                LinkSpec linkspec = new LinkSpec();
                linkspec.url = makeUrl(pattern.group(0), as, pattern, transformfilter);
                linkspec.start = i;
                linkspec.end = j;
                arraylist.add(linkspec);
            }
        } while (true);
    }

    private static final void gatherMapLinks(ArrayList arraylist, Spannable spannable) {
        int i;
        spannable = spannable.toString();
        i = 0;
_L6:
        String s = WebView.findAddress(spannable);
        if (s == null) goto _L2; else goto _L1
_L1:
        int j = spannable.indexOf(s);
        if (j >= 0) goto _L3; else goto _L2
_L2:
        return;
_L3:
        int k;
        LinkSpec linkspec;
        linkspec = JVM INSTR new #8   <Class LinkifyCompat$LinkSpec>;
        linkspec.LinkSpec();
        k = s.length() + j;
        linkspec.start = j + i;
        linkspec.end = i + k;
        spannable = spannable.substring(k);
        i += k;
        s = URLEncoder.encode(s, "UTF-8");
        StringBuilder stringbuilder = JVM INSTR new #263 <Class StringBuilder>;
        stringbuilder.StringBuilder();
        linkspec.url = stringbuilder.append("geo:0,0?q=").append(s).toString();
        arraylist.add(linkspec);
        continue; /* Loop/switch isn't completed */
        arraylist;
        if (true) goto _L2; else goto _L4
_L4:
        UnsupportedEncodingException unsupportedencodingexception;
        unsupportedencodingexception;
        if (true) goto _L6; else goto _L5
_L5:
    }

    private static String makeUrl(String s, String as[], Matcher matcher, android.text.util.Linkify.TransformFilter transformfilter) {
        boolean flag1 = true;
        boolean flag;
        int i;
        if (transformfilter != null)
            matcher = transformfilter.transformUrl(matcher, s);
        else
            matcher = s;
        i = 0;
        if (i >= as.length)
            break MISSING_BLOCK_LABEL_153;
        if (!matcher.regionMatches(true, 0, as[i], 0, as[i].length())) goto _L2; else goto _L1
_L1:
        s = matcher;
        flag = flag1;
        if (!matcher.regionMatches(false, 0, as[i], 0, as[i].length())) {
            s = (new StringBuilder()).append(as[i]).append(matcher.substring(as[i].length())).toString();
            flag = flag1;
        }
_L4:
        matcher = s;
        if (!flag) {
            matcher = s;
            if (as.length > 0)
                matcher = (new StringBuilder()).append(as[0]).append(s).toString();
        }
        return matcher;
_L2:
        i++;
        break MISSING_BLOCK_LABEL_19;
        flag = false;
        s = matcher;
        if (true) goto _L4; else goto _L3
_L3:
    }

    private static final void pruneOverlaps(ArrayList arraylist, Spannable spannable) {
        int k = 0;
        URLSpan aurlspan[] = (URLSpan[])spannable.getSpans(0, spannable.length(), android/text/style/URLSpan);
        for (int i = 0; i < aurlspan.length; i++) {
            LinkSpec linkspec = new LinkSpec();
            linkspec.frameworkAddedSpan = aurlspan[i];
            linkspec.start = spannable.getSpanStart(aurlspan[i]);
            linkspec.end = spannable.getSpanEnd(aurlspan[i]);
            arraylist.add(linkspec);
        }

        Collections.sort(arraylist, COMPARATOR);
        int l = arraylist.size();
        do {
            if (k >= l - 1)
                break;
            Object obj = (LinkSpec)arraylist.get(k);
            LinkSpec linkspec1 = (LinkSpec)arraylist.get(k + 1);
            if (((LinkSpec) (obj)).start <= linkspec1.start && ((LinkSpec) (obj)).end > linkspec1.start) {
                int j;
                if (linkspec1.end <= ((LinkSpec) (obj)).end)
                    j = k + 1;
                else
                if (((LinkSpec) (obj)).end - ((LinkSpec) (obj)).start > linkspec1.end - linkspec1.start)
                    j = k + 1;
                else
                if (((LinkSpec) (obj)).end - ((LinkSpec) (obj)).start < linkspec1.end - linkspec1.start)
                    j = k;
                else
                    j = -1;
                if (j != -1) {
                    obj = ((LinkSpec)arraylist.get(j)).frameworkAddedSpan;
                    if (obj != null)
                        spannable.removeSpan(obj);
                    arraylist.remove(j);
                    l--;
                    continue;
                }
            }
            k++;
        } while (true);
    }

}
