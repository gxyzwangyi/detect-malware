// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v4.content;

import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.graphics.drawable.Drawable;
import android.os.*;
import android.support.v4.os.BuildCompat;
import android.util.Log;
import android.util.TypedValue;
import java.io.File;

// Referenced classes of package android.support.v4.content:
//            ContextCompatApi24, ContextCompatApi21, ContextCompatApi23, ContextCompatKitKat, 
//            ContextCompatHoneycomb, ContextCompatJellybean

public class ContextCompat {

    private static final String DIR_ANDROID = "Android";
    private static final String DIR_OBB = "obb";
    private static final String TAG = "ContextCompat";
    private static final Object sLock = new Object();
    private static TypedValue sTempValue;

    public ContextCompat() {
    }

    private static transient File buildPath(File file, String as[]) {
        int j = as.length;
        int i = 0;
        while (i < j)  {
            String s = as[i];
            if (file == null)
                file = new File(s);
            else
            if (s != null)
                file = new File(file, s);
            i++;
        }
        return file;
    }

    public static int checkSelfPermission(Context context, String s) {
        if (s == null)
            throw new IllegalArgumentException("permission is null");
        else
            return context.checkPermission(s, Process.myPid(), Process.myUid());
    }

    public static Context createDeviceEncryptedStorageContext(Context context) {
        return createDeviceProtectedStorageContext(context);
    }

    public static Context createDeviceProtectedStorageContext(Context context) {
        if (BuildCompat.isAtLeastN())
            context = ContextCompatApi24.createDeviceProtectedStorageContext(context);
        else
            context = null;
        return context;
    }

    private static File createFilesDir(File file) {
        android/support/v4/content/ContextCompat;
        JVM INSTR monitorenter ;
        Object obj = file;
        if (file.exists()) goto _L2; else goto _L1
_L1:
        obj = file;
        if (file.mkdirs()) goto _L2; else goto _L3
_L3:
        boolean flag = file.exists();
        if (!flag) goto _L5; else goto _L4
_L4:
        obj = file;
_L2:
        android/support/v4/content/ContextCompat;
        JVM INSTR monitorexit ;
        return ((File) (obj));
_L5:
        obj = JVM INSTR new #86  <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        Log.w("ContextCompat", ((StringBuilder) (obj)).append("Unable to create files subdir ").append(file.getPath()).toString());
        obj = null;
        if (true) goto _L2; else goto _L6
_L6:
        file;
        throw file;
    }

    public static File getCodeCacheDir(Context context) {
        if (android.os.Build.VERSION.SDK_INT >= 21)
            context = ContextCompatApi21.getCodeCacheDir(context);
        else
            context = createFilesDir(new File(context.getApplicationInfo().dataDir, "code_cache"));
        return context;
    }

    public static final int getColor(Context context, int i) {
        if (android.os.Build.VERSION.SDK_INT >= 23)
            i = ContextCompatApi23.getColor(context, i);
        else
            i = context.getResources().getColor(i);
        return i;
    }

    public static final ColorStateList getColorStateList(Context context, int i) {
        if (android.os.Build.VERSION.SDK_INT >= 23)
            context = ContextCompatApi23.getColorStateList(context, i);
        else
            context = context.getResources().getColorStateList(i);
        return context;
    }

    public static File getDataDir(Context context) {
        if (BuildCompat.isAtLeastN()) {
            context = ContextCompatApi24.getDataDir(context);
        } else {
            context = context.getApplicationInfo().dataDir;
            if (context != null)
                context = new File(context);
            else
                context = null;
        }
        return context;
    }

    public static final Drawable getDrawable(Context context, int i) {
        int j = android.os.Build.VERSION.SDK_INT;
        if (j >= 21)
            context = ContextCompatApi21.getDrawable(context, i);
        else
        if (j >= 16) {
            context = context.getResources().getDrawable(i);
        } else {
            synchronized (sLock) {
                if (sTempValue == null) {
                    TypedValue typedvalue = JVM INSTR new #174 <Class TypedValue>;
                    typedvalue.TypedValue();
                    sTempValue = typedvalue;
                }
                context.getResources().getValue(i, sTempValue, true);
                i = sTempValue.resourceId;
            }
            context = context.getResources().getDrawable(i);
        }
        return context;
        context;
        obj;
        JVM INSTR monitorexit ;
        throw context;
    }

    public static File[] getExternalCacheDirs(Context context) {
        if (android.os.Build.VERSION.SDK_INT >= 19) {
            context = ContextCompatKitKat.getExternalCacheDirs(context);
        } else {
            File afile[] = new File[1];
            afile[0] = context.getExternalCacheDir();
            context = afile;
        }
        return context;
    }

    public static File[] getExternalFilesDirs(Context context, String s) {
        if (android.os.Build.VERSION.SDK_INT >= 19) {
            context = ContextCompatKitKat.getExternalFilesDirs(context, s);
        } else {
            File afile[] = new File[1];
            afile[0] = context.getExternalFilesDir(s);
            context = afile;
        }
        return context;
    }

    public static final File getNoBackupFilesDir(Context context) {
        if (android.os.Build.VERSION.SDK_INT >= 21)
            context = ContextCompatApi21.getNoBackupFilesDir(context);
        else
            context = createFilesDir(new File(context.getApplicationInfo().dataDir, "no_backup"));
        return context;
    }

    public static File[] getObbDirs(Context context) {
        int i = android.os.Build.VERSION.SDK_INT;
        if (i >= 19) {
            context = ContextCompatKitKat.getObbDirs(context);
        } else {
            if (i >= 11)
                context = ContextCompatHoneycomb.getObbDir(context);
            else
                context = buildPath(Environment.getExternalStorageDirectory(), new String[] {
                    "Android", "obb", context.getPackageName()
                });
            context = (new File[] {
                context
            });
        }
        return context;
    }

    public static boolean isDeviceEncryptedStorage(Context context) {
        return isDeviceProtectedStorage(context);
    }

    public static boolean isDeviceProtectedStorage(Context context) {
        boolean flag;
        if (BuildCompat.isAtLeastN())
            flag = ContextCompatApi24.isDeviceProtectedStorage(context);
        else
            flag = false;
        return flag;
    }

    public static boolean startActivities(Context context, Intent aintent[]) {
        return startActivities(context, aintent, null);
    }

    public static boolean startActivities(Context context, Intent aintent[], Bundle bundle) {
        boolean flag = true;
        int i = android.os.Build.VERSION.SDK_INT;
        if (i >= 16)
            ContextCompatJellybean.startActivities(context, aintent, bundle);
        else
        if (i >= 11)
            ContextCompatHoneycomb.startActivities(context, aintent);
        else
            flag = false;
        return flag;
    }

}
