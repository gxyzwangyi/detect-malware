// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v4.provider;

import android.content.ContentResolver;
import android.content.Context;
import android.database.Cursor;
import android.net.Uri;
import android.provider.DocumentsContract;
import android.text.TextUtils;
import android.util.Log;

class DocumentsContractApi19 {

    private static final String TAG = "DocumentFile";

    DocumentsContractApi19() {
    }

    public static boolean canRead(Context context, Uri uri) {
        boolean flag;
        flag = false;
        break MISSING_BLOCK_LABEL_2;
        if (context.checkCallingOrSelfUriPermission(uri, 1) == 0 && !TextUtils.isEmpty(getRawType(context, uri)))
            flag = true;
        return flag;
    }

    public static boolean canWrite(Context context, Uri uri) {
        boolean flag1 = false;
        if (context.checkCallingOrSelfUriPermission(uri, 2) == 0) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        String s = getRawType(context, uri);
        int i = queryForInt(context, uri, "flags", 0);
        flag = flag1;
        if (!TextUtils.isEmpty(s))
            if ((i & 4) != 0)
                flag = true;
            else
            if ("vnd.android.document/directory".equals(s) && (i & 8) != 0) {
                flag = true;
            } else {
                flag = flag1;
                if (!TextUtils.isEmpty(s)) {
                    flag = flag1;
                    if ((i & 2) != 0)
                        flag = true;
                }
            }
        if (true) goto _L4; else goto _L3
_L3:
    }

    private static void closeQuietly(AutoCloseable autocloseable) {
        if (autocloseable == null)
            break MISSING_BLOCK_LABEL_10;
        autocloseable.close();
_L2:
        return;
        autocloseable;
        throw autocloseable;
        autocloseable;
        if (true) goto _L2; else goto _L1
_L1:
    }

    public static boolean delete(Context context, Uri uri) {
        return DocumentsContract.deleteDocument(context.getContentResolver(), uri);
    }

    public static boolean exists(Context context, Uri uri) {
        context = context.getContentResolver();
        uri = context.query(uri, new String[] {
            "document_id"
        }, null, null, null);
        context = uri;
        int i = uri.getCount();
        boolean flag;
        if (i > 0)
            flag = true;
        else
            flag = false;
        closeQuietly(uri);
_L1:
        return flag;
        Exception exception;
        exception;
        uri = null;
_L4:
        context = uri;
        StringBuilder stringbuilder = JVM INSTR new #87  <Class StringBuilder>;
        context = uri;
        stringbuilder.StringBuilder();
        context = uri;
        Log.w("DocumentFile", stringbuilder.append("Failed query: ").append(exception).toString());
        closeQuietly(uri);
        flag = false;
          goto _L1
        uri;
        context = null;
_L3:
        closeQuietly(context);
        throw uri;
        uri;
        if (true) goto _L3; else goto _L2
_L2:
        exception;
          goto _L4
    }

    public static String getName(Context context, Uri uri) {
        return queryForString(context, uri, "_display_name", null);
    }

    private static String getRawType(Context context, Uri uri) {
        return queryForString(context, uri, "mime_type", null);
    }

    public static String getType(Context context, Uri uri) {
        uri = getRawType(context, uri);
        context = uri;
        if ("vnd.android.document/directory".equals(uri))
            context = null;
        return context;
    }

    public static boolean isDirectory(Context context, Uri uri) {
        return "vnd.android.document/directory".equals(getRawType(context, uri));
    }

    public static boolean isDocumentUri(Context context, Uri uri) {
        return DocumentsContract.isDocumentUri(context, uri);
    }

    public static boolean isFile(Context context, Uri uri) {
        context = getRawType(context, uri);
        boolean flag;
        if ("vnd.android.document/directory".equals(context) || TextUtils.isEmpty(context))
            flag = false;
        else
            flag = true;
        return flag;
    }

    public static long lastModified(Context context, Uri uri) {
        return queryForLong(context, uri, "last_modified", 0L);
    }

    public static long length(Context context, Uri uri) {
        return queryForLong(context, uri, "_size", 0L);
    }

    private static int queryForInt(Context context, Uri uri, String s, int i) {
        return (int)queryForLong(context, uri, s, i);
    }

    private static long queryForLong(Context context, Uri uri, String s, long l) {
        context = context.getContentResolver();
        uri = context.query(uri, new String[] {
            s
        }, null, null, null);
        context = uri;
        if (!uri.moveToFirst()) goto _L2; else goto _L1
_L1:
        context = uri;
        if (uri.isNull(0)) goto _L2; else goto _L3
_L3:
        context = uri;
        long l1 = uri.getLong(0);
        l = l1;
        closeQuietly(uri);
_L4:
        return l;
_L2:
        closeQuietly(uri);
          goto _L4
        s;
        uri = null;
_L7:
        context = uri;
        StringBuilder stringbuilder = JVM INSTR new #87  <Class StringBuilder>;
        context = uri;
        stringbuilder.StringBuilder();
        context = uri;
        Log.w("DocumentFile", stringbuilder.append("Failed query: ").append(s).toString());
        closeQuietly(uri);
          goto _L4
        uri;
        context = null;
_L6:
        closeQuietly(context);
        throw uri;
        uri;
        if (true) goto _L6; else goto _L5
_L5:
        s;
          goto _L7
    }

    private static String queryForString(Context context, Uri uri, String s, String s1) {
        context = context.getContentResolver();
        uri = context.query(uri, new String[] {
            s
        }, null, null, null);
        context = uri;
        if (!uri.moveToFirst()) goto _L2; else goto _L1
_L1:
        context = uri;
        if (uri.isNull(0)) goto _L2; else goto _L3
_L3:
        context = uri;
        s = uri.getString(0);
        context = s;
        closeQuietly(uri);
_L4:
        return context;
_L2:
        closeQuietly(uri);
        context = s1;
          goto _L4
        s;
        uri = null;
_L7:
        context = uri;
        StringBuilder stringbuilder = JVM INSTR new #87  <Class StringBuilder>;
        context = uri;
        stringbuilder.StringBuilder();
        context = uri;
        Log.w("DocumentFile", stringbuilder.append("Failed query: ").append(s).toString());
        closeQuietly(uri);
        context = s1;
          goto _L4
        uri;
        context = null;
_L6:
        closeQuietly(context);
        throw uri;
        uri;
        if (true) goto _L6; else goto _L5
_L5:
        s;
          goto _L7
    }
}
