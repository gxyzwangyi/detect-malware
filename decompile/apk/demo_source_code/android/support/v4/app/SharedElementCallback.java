// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package android.support.v4.app;

import android.content.Context;
import android.graphics.*;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.os.Parcelable;
import android.view.View;
import android.widget.ImageView;
import java.util.List;
import java.util.Map;

public abstract class SharedElementCallback {
    public static interface OnSharedElementsReadyListener {

        public abstract void onSharedElementsReady();
    }


    private static final String BUNDLE_SNAPSHOT_BITMAP = "sharedElement:snapshot:bitmap";
    private static final String BUNDLE_SNAPSHOT_IMAGE_MATRIX = "sharedElement:snapshot:imageMatrix";
    private static final String BUNDLE_SNAPSHOT_IMAGE_SCALETYPE = "sharedElement:snapshot:imageScaleType";
    private static int MAX_IMAGE_SIZE = 0x100000;
    private Matrix mTempMatrix;

    public SharedElementCallback() {
    }

    private static Bitmap createDrawableBitmap(Drawable drawable) {
        int i = drawable.getIntrinsicWidth();
        int j = drawable.getIntrinsicHeight();
        if (i <= 0 || j <= 0) {
            drawable = null;
        } else {
            float f = Math.min(1.0F, (float)MAX_IMAGE_SIZE / (float)(i * j));
            if ((drawable instanceof BitmapDrawable) && f == 1.0F) {
                drawable = ((BitmapDrawable)drawable).getBitmap();
            } else {
                i = (int)((float)i * f);
                int l = (int)((float)j * f);
                Bitmap bitmap = Bitmap.createBitmap(i, l, android.graphics.Bitmap.Config.ARGB_8888);
                Canvas canvas = new Canvas(bitmap);
                Rect rect = drawable.getBounds();
                int j1 = rect.left;
                int i1 = rect.top;
                j = rect.right;
                int k = rect.bottom;
                drawable.setBounds(0, 0, i, l);
                drawable.draw(canvas);
                drawable.setBounds(j1, i1, j, k);
                drawable = bitmap;
            }
        }
        return drawable;
    }

    public Parcelable onCaptureSharedElementSnapshot(View view, Matrix matrix, RectF rectf) {
        if (!(view instanceof ImageView)) goto _L2; else goto _L1
_L1:
        Object obj;
        ImageView imageview;
        Object obj2;
        imageview = (ImageView)view;
        obj = imageview.getDrawable();
        obj2 = imageview.getBackground();
        if (obj == null || obj2 != null) goto _L2; else goto _L3
_L3:
        obj2 = createDrawableBitmap(((Drawable) (obj)));
        if (obj2 == null) goto _L2; else goto _L4
_L4:
        obj = new Bundle();
        ((Bundle) (obj)).putParcelable("sharedElement:snapshot:bitmap", ((Parcelable) (obj2)));
        ((Bundle) (obj)).putString("sharedElement:snapshot:imageScaleType", imageview.getScaleType().toString());
        if (imageview.getScaleType() == android.widget.ImageView.ScaleType.MATRIX) {
            matrix = imageview.getImageMatrix();
            view = new float[9];
            matrix.getValues(view);
            ((Bundle) (obj)).putFloatArray("sharedElement:snapshot:imageMatrix", view);
        }
_L6:
        return ((Parcelable) (obj));
_L2:
        int i = Math.round(rectf.width());
        int j = Math.round(rectf.height());
        Object obj1 = null;
        obj = obj1;
        if (i > 0) {
            obj = obj1;
            if (j > 0) {
                float f = Math.min(1.0F, (float)MAX_IMAGE_SIZE / (float)(i * j));
                i = (int)((float)i * f);
                j = (int)((float)j * f);
                if (mTempMatrix == null)
                    mTempMatrix = new Matrix();
                mTempMatrix.set(matrix);
                mTempMatrix.postTranslate(-rectf.left, -rectf.top);
                mTempMatrix.postScale(f, f);
                obj = Bitmap.createBitmap(i, j, android.graphics.Bitmap.Config.ARGB_8888);
                matrix = new Canvas(((Bitmap) (obj)));
                matrix.concat(mTempMatrix);
                view.draw(matrix);
            }
        }
        if (true) goto _L6; else goto _L5
_L5:
    }

    public View onCreateSnapshotView(Context context, Parcelable parcelable) {
        Object obj = null;
        if (!(parcelable instanceof Bundle)) goto _L2; else goto _L1
_L1:
        Bitmap bitmap;
        parcelable = (Bundle)parcelable;
        bitmap = (Bitmap)parcelable.getParcelable("sharedElement:snapshot:bitmap");
        if (bitmap != null) goto _L4; else goto _L3
_L3:
        context = obj;
_L6:
        return context;
_L4:
        context = new ImageView(context);
        context.setImageBitmap(bitmap);
        context.setScaleType(android.widget.ImageView.ScaleType.valueOf(parcelable.getString("sharedElement:snapshot:imageScaleType")));
        if (context.getScaleType() == android.widget.ImageView.ScaleType.MATRIX) {
            float af[] = parcelable.getFloatArray("sharedElement:snapshot:imageMatrix");
            parcelable = new Matrix();
            parcelable.setValues(af);
            context.setImageMatrix(parcelable);
        }
        continue; /* Loop/switch isn't completed */
_L2:
        if (parcelable instanceof Bitmap) {
            parcelable = (Bitmap)parcelable;
            context = new ImageView(context);
            context.setImageBitmap(parcelable);
        } else {
            context = null;
        }
        if (true) goto _L6; else goto _L5
_L5:
    }

    public void onMapSharedElements(List list, Map map) {
    }

    public void onRejectSharedElements(List list) {
    }

    public void onSharedElementEnd(List list, List list1, List list2) {
    }

    public void onSharedElementStart(List list, List list1, List list2) {
    }

    public void onSharedElementsArrived(List list, List list1, OnSharedElementsReadyListener onsharedelementsreadylistener) {
        onsharedelementsreadylistener.onSharedElementsReady();
    }

}
