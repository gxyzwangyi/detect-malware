// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package sun.security.b;

import java.io.IOException;
import java.io.OutputStream;
import java.security.cert.CertificateException;
import java.util.Date;
import java.util.Hashtable;
import sun.misc.HexDumpEncoder;
import sun.security.util.*;
import sun.security.x509.g;

public class a
    implements e {

    static final ObjectIdentifier a[];
    public static final ObjectIdentifier b;
    public static final ObjectIdentifier c;
    public static final ObjectIdentifier d;
    public static final ObjectIdentifier e;
    public static final ObjectIdentifier f;
    public static final ObjectIdentifier g;
    public static final ObjectIdentifier h;
    public static final ObjectIdentifier i;
    public static final ObjectIdentifier j;
    public static final ObjectIdentifier k;
    public static final ObjectIdentifier l;
    public static final ObjectIdentifier m;
    public static final ObjectIdentifier n;
    public static final ObjectIdentifier o;
    private static final d p = sun.security.util.d.a("jar");
    private static final Hashtable q;
    private static final Hashtable r;
    private static final Byte s[][];
    private static final Class t[];
    private static final boolean u[] = {
        0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 
        1, 0, 0, 0, 1, 1, 1, 1
    };
    private int v;
    private Object w;

    public ObjectIdentifier a() {
        return a[v];
    }

    public void a(OutputStream outputstream) {
        int i1;
        boolean flag;
        i k1;
        flag = false;
        i1 = 0;
        k1 = new i();
        k1.a(a());
        v;
        JVM INSTR tableswitch 1 17: default 108
    //                   1 139
    //                   2 139
    //                   3 206
    //                   4 242
    //                   5 281
    //                   6 317
    //                   7 337
    //                   8 373
    //                   9 442
    //                   10 453
    //                   11 464
    //                   12 464
    //                   13 475
    //                   14 486
    //                   15 540
    //                   16 551
    //                   17 562;
           goto _L1 _L2 _L2 _L3 _L4 _L5 _L6 _L7 _L8 _L9 _L10 _L11 _L11 _L12 _L13 _L14 _L15 _L16
_L1:
        i l1 = new i();
        l1.a((byte)48, k1.toByteArray());
        outputstream.write(l1.toByteArray());
        return;
_L2:
        String as[] = (String[])(String[])w;
        i ai1[] = new i[as.length];
        for (; i1 < as.length; i1++) {
            ai1[i1] = new i();
            ai1[i1].b(as[i1]);
        }

        k1.a((byte)49, ai1);
        continue; /* Loop/switch isn't completed */
_L3:
        i i2 = new i();
        i2.a((ObjectIdentifier)w);
        k1.a((byte)49, i2.toByteArray());
        continue; /* Loop/switch isn't completed */
_L4:
        i j2 = new i();
        j2.b((byte[])(byte[])w);
        k1.a((byte)49, j2.toByteArray());
        continue; /* Loop/switch isn't completed */
_L5:
        i k2 = new i();
        k2.a((Date)w);
        k1.a((byte)49, k2.toByteArray());
        continue; /* Loop/switch isn't completed */
_L6:
        k1.a((byte)49, (e[])(e[])w);
        continue; /* Loop/switch isn't completed */
_L7:
        i l2 = new i();
        l2.a((String)w);
        k1.a((byte)49, l2.toByteArray());
        continue; /* Loop/switch isn't completed */
_L8:
        String as1[] = (String[])(String[])w;
        i ai[] = new i[as1.length];
        for (int j1 = ((flag) ? 1 : 0); j1 < as1.length; j1++) {
            ai[j1] = new i();
            ai[j1].a(as1[j1]);
        }

        k1.a((byte)49, ai);
        continue; /* Loop/switch isn't completed */
_L9:
        throw new IOException("PKCS9 extended-certificate attribute not supported.");
_L10:
        throw new IOException("PKCS9 IssuerAndSerialNumberattribute not supported.");
_L11:
        throw new IOException("PKCS9 RSA DSI attributes11 and 12, not supported.");
_L12:
        throw new IOException("PKCS9 attribute #13 not supported.");
_L13:
        i i3 = new i();
        g g1 = (g)w;
        try {
            g1.a(i3, true);
        }
        // Misplaced declaration of an exception variable
        catch (OutputStream outputstream) {
            throw new IOException(outputstream.toString());
        }
        k1.a((byte)49, i3.toByteArray());
        continue; /* Loop/switch isn't completed */
_L14:
        throw new IOException("PKCS9 attribute #15 not supported.");
_L15:
        throw new IOException("PKCS9 SigningCertificate attribute not supported.");
_L16:
        k1.a((byte)49, (byte[])(byte[])w);
        if (true) goto _L1; else goto _L17
_L17:
    }

    public String toString() {
        StringBuffer stringbuffer = new StringBuffer(100);
        stringbuffer.append("[");
        stringbuffer.append((String)r.get(a[v]));
        stringbuffer.append(": ");
        Object obj;
        if (u[v]) {
            if (w instanceof byte[])
                stringbuffer.append((new HexDumpEncoder()).encodeBuffer((byte[])(byte[])w));
            else
                stringbuffer.append(w.toString());
            stringbuffer.append("]");
            obj = stringbuffer.toString();
        } else {
            obj = ((Object) ((Object[])(Object[])w));
            boolean flag = true;
            int i1 = 0;
            while (i1 < obj.length)  {
                if (flag)
                    flag = false;
                else
                    stringbuffer.append(", ");
                stringbuffer.append(obj[i1].toString());
                i1++;
            }
            obj = stringbuffer.toString();
        }
        return ((String) (obj));
    }

    static  {
        a = new ObjectIdentifier[18];
        for (int i1 = 1; i1 < a.length - 2; i1++)
            a[i1] = ObjectIdentifier.a(new int[] {
                1, 2, 840, 0x1bb8d, 1, 9, i1
            });

        a[a.length - 2] = ObjectIdentifier.a(new int[] {
            1, 2, 840, 0x1bb8d, 1, 9, 16, 2, 12
        });
        a[a.length - 1] = ObjectIdentifier.a(new int[] {
            1, 2, 840, 0x1bb8d, 1, 9, 16, 2, 14
        });
        b = a[1];
        c = a[2];
        d = a[3];
        e = a[4];
        f = a[5];
        g = a[6];
        h = a[7];
        i = a[8];
        j = a[9];
        k = a[10];
        l = a[14];
        m = a[15];
        n = a[16];
        o = a[17];
        q = new Hashtable(18);
        q.put("emailaddress", a[1]);
        q.put("unstructuredname", a[2]);
        q.put("contenttype", a[3]);
        q.put("messagedigest", a[4]);
        q.put("signingtime", a[5]);
        q.put("countersignature", a[6]);
        q.put("challengepassword", a[7]);
        q.put("unstructuredaddress", a[8]);
        q.put("extendedcertificateattributes", a[9]);
        q.put("issuerandserialnumber", a[10]);
        q.put("rsaproprietary", a[11]);
        q.put("rsaproprietary", a[12]);
        q.put("signingdescription", a[13]);
        q.put("extensionrequest", a[14]);
        q.put("smimecapability", a[15]);
        q.put("signingcertificate", a[16]);
        q.put("signaturetimestamptoken", a[17]);
        r = new Hashtable(16);
        r.put(a[1], "EmailAddress");
        r.put(a[2], "UnstructuredName");
        r.put(a[3], "ContentType");
        r.put(a[4], "MessageDigest");
        r.put(a[5], "SigningTime");
        r.put(a[6], "Countersignature");
        r.put(a[7], "ChallengePassword");
        r.put(a[8], "UnstructuredAddress");
        r.put(a[9], "ExtendedCertificateAttributes");
        r.put(a[10], "IssuerAndSerialNumber");
        r.put(a[11], "RSAProprietary");
        r.put(a[12], "RSAProprietary");
        r.put(a[13], "SMIMESigningDesc");
        r.put(a[14], "ExtensionRequest");
        r.put(a[15], "SMIMECapability");
        r.put(a[16], "SigningCertificate");
        r.put(a[17], "SignatureTimestampToken");
        Byte abyte[] = {
            new Byte((byte)22)
        };
        Byte byte3 = new Byte((byte)22);
        Byte abyte1[] = {
            new Byte((byte)6)
        };
        Byte abyte2[] = {
            new Byte((byte)4)
        };
        Byte byte2 = new Byte((byte)23);
        Byte byte7 = new Byte((byte)48);
        Byte abyte3[] = {
            new Byte((byte)19), new Byte((byte)20)
        };
        Byte abyte4[] = {
            new Byte((byte)19), new Byte((byte)20)
        };
        Byte byte1 = new Byte((byte)49);
        Byte byte4 = new Byte((byte)48);
        Byte abyte5[] = {
            new Byte((byte)48)
        };
        Byte byte5 = new Byte((byte)48);
        Byte abyte6[] = {
            new Byte((byte)48)
        };
        Byte byte6 = new Byte((byte)48);
        s = (new Byte[][] {
            null, abyte, new Byte[] {
                byte3
            }, abyte1, abyte2, new Byte[] {
                byte2
            }, new Byte[] {
                byte7
            }, abyte3, abyte4, new Byte[] {
                byte1
            }, 
            new Byte[] {
                byte4
            }, null, null, null, abyte5, new Byte[] {
                byte5
            }, abyte6, new Byte[] {
                byte6
            }
        });
        t = new Class[18];
        try {
            Class class1 = Class.forName("[Ljava.lang.String;");
            t[0] = null;
            t[1] = class1;
            t[2] = class1;
            t[3] = Class.forName("sun.security.util.ObjectIdentifier");
            t[4] = Class.forName("[B");
            t[5] = Class.forName("java.util.Date");
            t[6] = Class.forName("[Lsun.security.b.c;");
            t[7] = Class.forName("java.lang.String");
            t[8] = class1;
            t[9] = null;
            t[10] = null;
            t[11] = null;
            t[12] = null;
            t[13] = null;
            t[14] = Class.forName("sun.security.x509.g");
            t[15] = null;
            t[16] = null;
            t[17] = Class.forName("[B");
        }
        catch (ClassNotFoundException classnotfoundexception) {
            throw new ExceptionInInitializerError(classnotfoundexception.toString());
        }
    }
}
