// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package sun.security.x509;

import java.io.OutputStream;
import java.util.*;
import sun.security.util.ObjectIdentifier;
import sun.security.util.i;

// Referenced classes of package sun.security.x509:
//            r, e, aa

public class q extends r
    implements e {

    private static final Map d;
    private static final int e[] = {
        2, 5, 29, 37, 0
    };
    private static final int f[] = {
        1, 3, 6, 1, 5, 5, 7, 3, 1
    };
    private static final int g[] = {
        1, 3, 6, 1, 5, 5, 7, 3, 2
    };
    private static final int h[] = {
        1, 3, 6, 1, 5, 5, 7, 3, 3
    };
    private static final int i[] = {
        1, 3, 6, 1, 5, 5, 7, 3, 4
    };
    private static final int j[] = {
        1, 3, 6, 1, 5, 5, 7, 3, 5
    };
    private static final int k[] = {
        1, 3, 6, 1, 5, 5, 7, 3, 6
    };
    private static final int l[] = {
        1, 3, 6, 1, 5, 5, 7, 3, 7
    };
    private static final int m[] = {
        1, 3, 6, 1, 5, 5, 7, 3, 8
    };
    private static final int n[] = {
        1, 3, 6, 1, 5, 5, 7, 3, 9
    };
    private Vector o;

    private void f() {
        if (o == null || o.isEmpty()) {
            c = null;
        } else {
            i k1 = new i();
            i j1 = new i();
            for (int i1 = 0; i1 < o.size(); i1++)
                j1.a((ObjectIdentifier)o.elementAt(i1));

            k1.a((byte)48, j1);
            c = k1.toByteArray();
        }
    }

    public String a() {
        return "ExtendedKeyUsage";
    }

    public void a(OutputStream outputstream) {
        i i1 = new i();
        if (c == null) {
            a = aa.t;
            b = false;
            f();
        }
        super.a(i1);
        outputstream.write(i1.toByteArray());
    }

    public List b() {
        ArrayList arraylist = new ArrayList(o.size());
        for (Iterator iterator = o.iterator(); iterator.hasNext(); arraylist.add(((ObjectIdentifier)iterator.next()).toString()));
        return arraylist;
    }

    public String toString() {
        String s;
        if (o == null) {
            s = "";
        } else {
            s = "  ";
            Iterator iterator = o.iterator();
            boolean flag = true;
            while (iterator.hasNext())  {
                ObjectIdentifier objectidentifier = (ObjectIdentifier)iterator.next();
                String s1 = s;
                if (!flag)
                    s1 = (new StringBuilder()).append(s).append("\n  ").toString();
                s = (String)d.get(objectidentifier);
                if (s != null)
                    s = (new StringBuilder()).append(s1).append(s).toString();
                else
                    s = (new StringBuilder()).append(s1).append(objectidentifier.toString()).toString();
                flag = false;
            }
            s = (new StringBuilder()).append(super.toString()).append("ExtendedKeyUsages [\n").append(s).append("\n]\n").toString();
        }
        return s;
    }

    static  {
        d = new HashMap();
        d.put(ObjectIdentifier.a(e), "anyExtendedKeyUsage");
        d.put(ObjectIdentifier.a(f), "serverAuth");
        d.put(ObjectIdentifier.a(g), "clientAuth");
        d.put(ObjectIdentifier.a(h), "codeSigning");
        d.put(ObjectIdentifier.a(i), "emailProtection");
        d.put(ObjectIdentifier.a(j), "ipsecEndSystem");
        d.put(ObjectIdentifier.a(k), "ipsecTunnel");
        d.put(ObjectIdentifier.a(l), "ipsecUser");
        d.put(ObjectIdentifier.a(m), "timeStamping");
        d.put(ObjectIdentifier.a(n), "OCSPSigning");
    }
}
