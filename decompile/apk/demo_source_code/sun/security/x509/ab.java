// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package sun.security.x509;

import java.io.IOException;
import java.io.StringReader;
import java.util.*;
import sun.security.util.i;

// Referenced classes of package sun.security.x509:
//            ah, a, b

public class ab {

    final a a[];
    private volatile String b;

    public ab(String s, Map map) {
        ArrayList arraylist = new ArrayList(3);
        int k = s.indexOf('+');
        int i1 = 0;
        int j = 0;
        int l = 0;
        int j1;
        for (; k >= 0; k = j1) {
            j1 = ah.a(s, i1, k) + j;
            i1 = l;
            j = j1;
            if (k > 0) {
                i1 = l;
                j = j1;
                if (s.charAt(k - 1) != '\\') {
                    i1 = l;
                    j = j1;
                    if (j1 != 1) {
                        String s1 = s.substring(l, k);
                        if (s1.length() == 0)
                            throw new IOException((new StringBuilder()).append("empty AVA in RDN \"").append(s).append("\"").toString());
                        arraylist.add(new a(new StringReader(s1), map));
                        i1 = k + 1;
                        j = 0;
                    }
                }
            }
            k++;
            j1 = s.indexOf('+', k);
            l = i1;
            i1 = k;
        }

        String s2 = s.substring(l);
        if (s2.length() == 0) {
            throw new IOException((new StringBuilder()).append("empty AVA in RDN \"").append(s).append("\"").toString());
        } else {
            arraylist.add(new a(new StringReader(s2), map));
            a = (a[])arraylist.toArray(new a[arraylist.size()]);
            return;
        }
    }

    private String a(boolean flag, Map map) {
        int j = 0;
        if (a.length == 1) {
            if (flag)
                map = a[0].a();
            else
                map = a[0].a(map);
        } else {
            StringBuilder stringbuilder = new StringBuilder();
            if (!flag) {
                for (; j < a.length; j++) {
                    if (j > 0)
                        stringbuilder.append('+');
                    stringbuilder.append(a[j].a(map));
                }

            } else {
                map = new ArrayList(a.length);
                for (int k = 0; k < a.length; k++)
                    map.add(a[k]);

                Collections.sort(map, sun.security.x509.b.a());
                for (int l = 0; l < map.size(); l++) {
                    if (l > 0)
                        stringbuilder.append('+');
                    stringbuilder.append(((a)map.get(l)).a());
                }

            }
            map = stringbuilder.toString();
        }
        return map;
    }

    public String a(Map map) {
        return a(false, map);
    }

    public String a(boolean flag) {
        if (flag) goto _L2; else goto _L1
_L1:
        String s = a(false, Collections.emptyMap());
_L4:
        return s;
_L2:
        String s1 = b;
        s = s1;
        if (s1 == null) {
            s = a(true, Collections.emptyMap());
            b = s;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    void a(i j) {
        j.a((byte)49, a);
    }

    public boolean equals(Object obj) {
        boolean flag = true;
        if (this != obj)
            if (!(obj instanceof ab)) {
                flag = false;
            } else {
                obj = (ab)obj;
                if (a.length != ((ab) (obj)).a.length)
                    flag = false;
                else
                    flag = a(true).equals(((ab) (obj)).a(true));
            }
        return flag;
    }

    public int hashCode() {
        return a(true).hashCode();
    }

    public String toString() {
        int j = 0;
        Object obj;
        if (a.length == 1) {
            obj = a[0].toString();
        } else {
            obj = new StringBuilder();
            for (; j < a.length; j++) {
                if (j != 0)
                    ((StringBuilder) (obj)).append(" + ");
                ((StringBuilder) (obj)).append(a[j].toString());
            }

            obj = ((StringBuilder) (obj)).toString();
        }
        return ((String) (obj));
    }
}
