// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package sun.security.x509;

import java.security.cert.CertificateException;
import java.util.HashMap;
import java.util.Map;
import sun.security.util.ObjectIdentifier;

// Referenced classes of package sun.security.x509:
//            aa

public class y {
    private static class a {

        final ObjectIdentifier a;
        final String b;
        final String c;
        private volatile Class d;

        Class a() {
            Class class1;
            Class class2;
            try {
                class2 = d;
            }
            catch (ClassNotFoundException classnotfoundexception) {
                throw (CertificateException)(new CertificateException((new StringBuilder()).append("Could not load class: ").append(classnotfoundexception).toString())).initCause(classnotfoundexception);
            }
            class1 = class2;
            if (class2 != null)
                break MISSING_BLOCK_LABEL_24;
            class1 = Class.forName(c);
            d = class1;
            return class1;
        }

        a(String s, ObjectIdentifier objectidentifier, String s1) {
            b = s;
            a = objectidentifier;
            c = s1;
        }
    }


    private static final int a[] = {
        2, 16, 840, 1, 0x1bc42, 1, 1
    };
    private static final Map b = new HashMap();
    private static final Map c = new HashMap();

    public static String a(ObjectIdentifier objectidentifier) {
        objectidentifier = (a)b.get(objectidentifier);
        if (objectidentifier == null)
            objectidentifier = null;
        else
            objectidentifier = ((a) (objectidentifier)).b;
        return objectidentifier;
    }

    private static void a(String s, ObjectIdentifier objectidentifier, String s1) {
        s1 = new a(s, objectidentifier, s1);
        b.put(objectidentifier, s1);
        c.put(s, s1);
    }

    public static Class b(ObjectIdentifier objectidentifier) {
        objectidentifier = (a)b.get(objectidentifier);
        if (objectidentifier == null)
            objectidentifier = null;
        else
            objectidentifier = objectidentifier.a();
        return objectidentifier;
    }

    static  {
        a("x509.info.extensions.SubjectKeyIdentifier", aa.b, "sun.security.x509.SubjectKeyIdentifierExtension");
        a("x509.info.extensions.KeyUsage", aa.c, "sun.security.x509.KeyUsageExtension");
        a("x509.info.extensions.PrivateKeyUsage", aa.d, "sun.security.x509.PrivateKeyUsageExtension");
        a("x509.info.extensions.SubjectAlternativeName", aa.g, "sun.security.x509.SubjectAlternativeNameExtension");
        a("x509.info.extensions.IssuerAlternativeName", aa.h, "sun.security.x509.IssuerAlternativeNameExtension");
        a("x509.info.extensions.BasicConstraints", aa.j, "sun.security.x509.BasicConstraintsExtension");
        a("x509.info.extensions.CRLNumber", aa.n, "sun.security.x509.CRLNumberExtension");
        a("x509.info.extensions.CRLReasonCode", aa.q, "sun.security.x509.CRLReasonCodeExtension");
        a("x509.info.extensions.NameConstraints", aa.k, "sun.security.x509.NameConstraintsExtension");
        a("x509.info.extensions.PolicyMappings", aa.f, "sun.security.x509.PolicyMappingsExtension");
        a("x509.info.extensions.AuthorityKeyIdentifier", aa.a, "sun.security.x509.AuthorityKeyIdentifierExtension");
        a("x509.info.extensions.PolicyConstraints", aa.l, "sun.security.x509.PolicyConstraintsExtension");
        a("x509.info.extensions.NetscapeCertType", ObjectIdentifier.a(new int[] {
            2, 16, 840, 1, 0x1bc42, 1, 1
        }), "sun.security.x509.NetscapeCertTypeExtension");
        a("x509.info.extensions.CertificatePolicies", aa.e, "sun.security.x509.CertificatePoliciesExtension");
        a("x509.info.extensions.ExtendedKeyUsage", aa.t, "sun.security.x509.ExtendedKeyUsageExtension");
        a("x509.info.extensions.InhibitAnyPolicy", aa.u, "sun.security.x509.InhibitAnyPolicyExtension");
        a("x509.info.extensions.CRLDistributionPoints", aa.m, "sun.security.x509.CRLDistributionPointsExtension");
        a("x509.info.extensions.CertificateIssuer", aa.v, "sun.security.x509.CertificateIssuerExtension");
        a("x509.info.extensions.AuthorityInfoAccess", aa.w, "sun.security.x509.AuthorityInfoAccessExtension");
        a("x509.info.extensions.IssuingDistributionPoint", aa.o, "sun.security.x509.IssuingDistributionPointExtension");
        a("x509.info.extensions.DeltaCRLIndicator", aa.p, "sun.security.x509.DeltaCRLIndicatorExtension");
        a("x509.info.extensions.FreshestCRL", aa.y, "sun.security.x509.FreshestCRLExtension");
    }
}
