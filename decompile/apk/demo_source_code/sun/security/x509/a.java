// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package sun.security.x509;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.Reader;
import java.security.AccessController;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import sun.security.util.ObjectIdentifier;
import sun.security.util.d;
import sun.security.util.e;
import sun.security.util.i;
import sun.security.util.j;

// Referenced classes of package sun.security.x509:
//            c, ah

public class a
    implements e {

    private static final d c = sun.security.util.d.a("x509", "\t[AVA]");
    private static final boolean d = ((Boolean)AccessController.doPrivileged(new sun.security.a.a("com.sun.security.preserveOldDCEncoding"))).booleanValue();
    final ObjectIdentifier a;
    final j b;

    a(Reader reader, int k, Map map) {
        int l;
        StringBuilder stringbuilder;
label0:
        {
            super();
            stringbuilder = new StringBuilder();
            do {
                l = a(reader, "Incorrect AVA format");
                if (l == 61) {
                    a = sun.security.x509.c.a(stringbuilder.toString(), k, map);
                    stringbuilder.setLength(0);
                    if (k != 3)
                        break;
                    int i1 = reader.read();
                    l = i1;
                    if (i1 == 32)
                        throw new IOException("Incorrect AVA RFC2253 format - leading space must be escaped");
                    break label0;
                }
                stringbuilder.append((char)l);
            } while (true);
            do
                l = reader.read();
            while (l == 32 || l == 10);
        }
        if (l == -1)
            b = new j("");
        else
        if (l == 35)
            b = a(reader, k);
        else
        if (l == 34 && k != 3)
            b = a(reader, stringbuilder);
        else
            b = a(reader, l, k, stringbuilder);
    }

    a(Reader reader, Map map) {
        this(reader, 1, map);
    }

    private static int a(Reader reader, String s) {
        int k = reader.read();
        if (k == -1)
            throw new IOException(s);
        else
            return k;
    }

    private static Byte a(int k, Reader reader) {
        if ("0123456789ABCDEF".indexOf(Character.toUpperCase((char)k)) < 0) goto _L2; else goto _L1
_L1:
        int l = a(reader, "unexpected EOF - escaped hex value must include two valid digits");
        if ("0123456789ABCDEF".indexOf(Character.toUpperCase((char)l)) < 0) goto _L4; else goto _L3
_L3:
        reader = new Byte((byte)((Character.digit((char)k, 16) << 4) + Character.digit((char)l, 16)));
_L6:
        return reader;
_L4:
        throw new IOException("escaped hex value must include two valid digits");
_L2:
        reader = null;
        if (true) goto _L6; else goto _L5
_L5:
    }

    private String a(int k, Map map) {
        return sun.security.x509.c.a(a, k, map);
    }

    private String a(String s) {
        boolean flag;
        StringBuilder stringbuilder;
        stringbuilder = new StringBuilder(40);
        stringbuilder.append(s);
        stringbuilder.append("=");
        char c1;
        int k;
        boolean flag1;
        int l;
        boolean flag3;
        int i1;
        boolean flag4;
        byte abyte0[];
        String s1;
        try {
            s1 = b.b();
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            throw new IllegalArgumentException("DER Value conversion");
        }
        if (s1 != null) goto _L2; else goto _L1
_L1:
        s = b.j();
        stringbuilder.append('#');
        k = 0;
_L4:
        if (k >= s.length)
            break; /* Loop/switch isn't completed */
        stringbuilder.append("0123456789ABCDEF".charAt(s[k] >> 4 & 0xf));
        stringbuilder.append("0123456789ABCDEF".charAt(s[k] & 0xf));
        k++;
        if (true) goto _L4; else goto _L3
_L2:
        s = JVM INSTR new #55  <Class StringBuilder>;
        s.StringBuilder();
        l = 0;
        flag = false;
        flag3 = false;
_L9:
        if (l >= s1.length())
            break MISSING_BLOCK_LABEL_400;
        c1 = s1.charAt(l);
        if (!j.a(c1) && ",+=\n<>#;\\\"".indexOf(c1) < 0) goto _L6; else goto _L5
_L5:
        if (flag)
            break MISSING_BLOCK_LABEL_188;
        if (l == 0 && (c1 == ' ' || c1 == '\n'))
            break MISSING_BLOCK_LABEL_186;
        if (",+=\n<>#;\\\"".indexOf(c1) < 0)
            break MISSING_BLOCK_LABEL_188;
        flag = true;
        if (c1 == ' ' || c1 == '\n') goto _L8; else goto _L7
_L7:
        if (c1 != '"' && c1 != '\\')
            break MISSING_BLOCK_LABEL_219;
        s.append('\\');
        flag1 = false;
_L10:
        s.append(c1);
        flag3 = flag;
_L12:
        l++;
        flag = flag3;
        flag3 = flag1;
          goto _L9
_L8:
        flag1 = flag;
        if (!flag) {
            flag1 = flag;
            if (flag3)
                flag1 = true;
        }
        flag = flag1;
        flag1 = true;
          goto _L10
_L6:
        if (c == null || !sun.security.util.d.b("ava"))
            break MISSING_BLOCK_LABEL_374;
        flag4 = false;
        abyte0 = Character.toString(c1).getBytes("UTF8");
        i1 = 0;
_L13:
        flag1 = flag4;
        flag3 = flag;
        if (i1 >= abyte0.length) goto _L12; else goto _L11
_L11:
        s.append('\\');
        s.append(Character.toUpperCase(Character.forDigit(abyte0[i1] >>> 4 & 0xf, 16)));
        s.append(Character.toUpperCase(Character.forDigit(abyte0[i1] & 0xf, 16)));
        i1++;
          goto _L13
        flag1 = false;
        s.append(c1);
        flag3 = flag;
          goto _L12
        boolean flag2 = flag;
        char c2;
        if (s.length() <= 0)
            break MISSING_BLOCK_LABEL_442;
        c2 = s.charAt(s.length() - 1);
        if (c2 != ' ') {
            flag2 = flag;
            if (c2 != '\n')
                break MISSING_BLOCK_LABEL_442;
        }
        flag2 = true;
        if (!flag2)
            break MISSING_BLOCK_LABEL_491;
        StringBuilder stringbuilder1 = JVM INSTR new #55  <Class StringBuilder>;
        stringbuilder1.StringBuilder();
        stringbuilder.append(stringbuilder1.append("\"").append(s.toString()).append("\"").toString());
_L3:
        return stringbuilder.toString();
        stringbuilder.append(s.toString());
          goto _L3
    }

    private static String a(List list) {
        int l = list.size();
        byte abyte0[] = new byte[l];
        for (int k = 0; k < l; k++)
            abyte0[k] = ((Byte)list.get(k)).byteValue();

        return new String(abyte0, "UTF8");
    }

    private static j a(Reader reader, int k) {
        int l = 0;
        ByteArrayOutputStream bytearrayoutputstream = new ByteArrayOutputStream();
        byte byte0 = 0;
        do {
            int i1 = reader.read();
            if (a(i1, k)) {
                if (l == 0)
                    throw new IOException("AVA parse, zero hex digits");
                break;
            }
            int j1 = "0123456789ABCDEF".indexOf(Character.toUpperCase((char)i1));
            if (j1 == -1)
                throw new IOException((new StringBuilder()).append("AVA parse, invalid hex digit: ").append((char)i1).toString());
            if (l % 2 == 1) {
                byte0 = (byte)(byte0 * 16 + (byte)j1);
                bytearrayoutputstream.write(byte0);
            } else {
                byte0 = (byte)j1;
            }
            l++;
        } while (true);
        if (l % 2 == 1)
            throw new IOException("AVA parse, odd number of hex digits");
        else
            return new j(bytearrayoutputstream.toByteArray());
    }

    private j a(Reader reader, int k, int l, StringBuilder stringbuilder) {
        int i1;
        int j1;
        boolean flag2;
        ArrayList arraylist;
        arraylist = new ArrayList();
        boolean flag = false;
        flag2 = true;
        j1 = 1;
        i1 = k;
        k = ((flag) ? 1 : 0);
_L9:
        int j2 = 0;
        if (i1 != 92) goto _L2; else goto _L1
_L1:
        Byte byte1;
        i1 = 1;
        j2 = a(reader, "Invalid trailing backslash");
        byte1 = a(j2, reader);
        if (byte1 == null) goto _L4; else goto _L3
_L3:
        boolean flag1 = false;
        arraylist.add(byte1);
        i1 = reader.read();
        j1 = k;
        k = ((flag1) ? 1 : 0);
_L7:
        if (!a(i1, l))
            break MISSING_BLOCK_LABEL_670;
        if (l == 3 && j1 > 0)
            throw new IOException("Incorrect AVA RFC2253 format - trailing space must be escaped");
        break; /* Loop/switch isn't completed */
_L4:
        int k1;
        int i2;
        if (l == 1 && ",=\n+<>#;\\\" ".indexOf((char)j2) == -1 || l == 2 && ",+=\n<>#;".indexOf((char)j2) == -1 && j2 != 92 && j2 != 34)
            throw new IOException((new StringBuilder()).append("Invalid escaped character in AVA: '").append((char)j2).append("'").toString());
        i2 = i1;
        k1 = j2;
        if (l == 3)
            if (j2 == 32) {
                i2 = i1;
                k1 = j2;
                if (!flag2) {
                    i2 = i1;
                    k1 = j2;
                    if (!a(reader))
                        throw new IOException("Invalid escaped space character in AVA.  Only a leading or trailing space character can be escaped.");
                }
            } else
            if (j2 == 35) {
                i2 = i1;
                k1 = j2;
                if (!flag2)
                    throw new IOException("Invalid escaped '#' character in AVA.  Only a leading '#' can be escaped.");
            } else {
                i2 = i1;
                k1 = j2;
                if (",+\"\\<>;".indexOf((char)j2) == -1)
                    throw new IOException((new StringBuilder()).append("Invalid escaped character in AVA: '").append((char)j2).append("'").toString());
            }
          goto _L5
_L2:
        i2 = j2;
        k1 = i1;
        if (l == 3) {
            i2 = j2;
            k1 = i1;
            if (",+\"\\<>;".indexOf((char)i1) != -1)
                throw new IOException((new StringBuilder()).append("Character '").append((char)i1).append("' in AVA appears without escape").toString());
        }
_L5:
        i1 = k;
        if (arraylist.size() > 0) {
            for (i1 = 0; i1 < k; i1++)
                stringbuilder.append(" ");

            i1 = 0;
            stringbuilder.append(a(((List) (arraylist))));
            arraylist.clear();
        }
        boolean flag3 = j.a((char)k1);
        if (k1 == 32 && i2 == 0) {
            k = i1 + 1;
        } else {
            for (k = 0; k < i1; k++)
                stringbuilder.append(" ");

            k = 0;
            stringbuilder.append((char)k1);
        }
        i1 = reader.read();
        k1 = flag3 & j1;
        j1 = k;
        k = k1;
        if (true) goto _L7; else goto _L6
_L6:
        if (arraylist.size() > 0) {
            stringbuilder.append(a(((List) (arraylist))));
            arraylist.clear();
        }
        if (a.a(sun.security.b.a.b) || a.a(ah.o) && !d)
            reader = new j((byte)22, stringbuilder.toString());
        else
        if (k != 0)
            reader = new j(stringbuilder.toString());
        else
            reader = new j((byte)12, stringbuilder.toString());
        return reader;
        int l1 = k;
        flag2 = false;
        k = j1;
        j1 = l1;
        if (true) goto _L9; else goto _L8
_L8:
    }

    private j a(Reader reader, StringBuilder stringbuilder) {
        int k = a(reader, "Quoted string did not end in quote");
        ArrayList arraylist = new ArrayList();
        boolean flag = true;
        do {
            if (k == 34)
                break;
            int l = k;
            if (k == 92) {
                k = a(reader, "Quoted string did not end in quote");
                Byte byte1 = a(k, reader);
                if (byte1 != null) {
                    arraylist.add(byte1);
                    k = reader.read();
                    flag = false;
                    continue;
                }
                l = k;
                if (k != 92) {
                    l = k;
                    if (k != 34) {
                        l = k;
                        if (",+=\n<>#;".indexOf((char)k) < 0)
                            throw new IOException((new StringBuilder()).append("Invalid escaped character in AVA: ").append((char)k).toString());
                    }
                }
            }
            if (arraylist.size() > 0) {
                stringbuilder.append(a(((List) (arraylist))));
                arraylist.clear();
            }
            flag &= j.a((char)l);
            stringbuilder.append((char)l);
            k = a(reader, "Quoted string did not end in quote");
        } while (true);
        if (arraylist.size() > 0) {
            stringbuilder.append(a(((List) (arraylist))));
            arraylist.clear();
        }
        do
            k = reader.read();
        while (k == 10 || k == 32);
        if (k != -1)
            throw new IOException("AVA had characters other than whitespace after terminating quote");
        if (a.a(sun.security.b.a.b) || a.a(ah.o) && !d)
            reader = new j((byte)22, stringbuilder.toString().trim());
        else
        if (flag)
            reader = new j(stringbuilder.toString().trim());
        else
            reader = new j((byte)12, stringbuilder.toString().trim());
        return reader;
    }

    private static boolean a(int k, int l) {
        boolean flag;
        boolean flag1;
        flag1 = true;
        flag = flag1;
        k;
        JVM INSTR lookupswitch 5: default 56
    //                   -1: 58
    //                   43: 58
    //                   44: 58
    //                   59: 60
    //                   62: 60;
           goto _L1 _L2 _L2 _L2 _L3 _L3
_L2:
        break MISSING_BLOCK_LABEL_58;
_L1:
        flag = false;
_L5:
        return flag;
_L3:
        flag = flag1;
        if (l == 3)
            flag = false;
        if (true) goto _L5; else goto _L4
_L4:
    }

    private static boolean a(Reader reader) {
        boolean flag;
        boolean flag1;
        flag1 = true;
        flag = true;
        if (reader.markSupported()) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        reader.mark(9999);
_L4:
        int k;
        k = reader.read();
        if (k != -1)
            continue; /* Loop/switch isn't completed */
        flag = flag1;
_L6:
        reader.reset();
          goto _L1
        if (k == 32) goto _L4; else goto _L3
_L3:
        if (k != 92)
            break MISSING_BLOCK_LABEL_65;
        if (reader.read() == 32) goto _L4; else goto _L5
_L5:
        flag = false;
          goto _L6
        flag = false;
          goto _L6
    }

    private static boolean a(j j1, boolean flag) {
        boolean flag1 = true;
        if (!flag) goto _L2; else goto _L1
_L1:
        flag = flag1;
        switch (j1.a) {
        default:
            flag = false;
            break;

        case 12: // '\f'
        case 19: // '\023'
            break;
        }
_L4:
        return flag;
_L2:
        flag = flag1;
        switch (j1.a) {
        default:
            flag = false;
            break;

        case 12: // '\f'
        case 19: // '\023'
        case 20: // '\024'
        case 22: // '\026'
        case 27: // '\033'
        case 30: // '\036'
            break;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public String a() {
        int k = 0;
        Object obj = new StringBuilder(40);
        ((StringBuilder) (obj)).append(a(3, Collections.emptyMap()));
        ((StringBuilder) (obj)).append('=');
        if (((StringBuilder) (obj)).charAt(0) >= '0' && ((StringBuilder) (obj)).charAt(0) <= '9' || !a(b, true)) {
            byte abyte0[];
            try {
                abyte0 = b.j();
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) {
                throw new IllegalArgumentException("DER Value conversion");
            }
            ((StringBuilder) (obj)).append('#');
            for (; k < abyte0.length; k++) {
                byte byte0 = abyte0[k];
                ((StringBuilder) (obj)).append(Character.forDigit(byte0 >>> 4 & 0xf, 16));
                ((StringBuilder) (obj)).append(Character.forDigit(byte0 & 0xf, 16));
            }

        } else {
            int i1;
            boolean flag;
            StringBuilder stringbuilder;
            String s;
            try {
                s = new String(b.c(), "UTF8");
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) {
                throw new IllegalArgumentException("DER Value conversion");
            }
            stringbuilder = new StringBuilder();
            i1 = 0;
            flag = false;
            while (i1 < s.length())  {
                char c1 = s.charAt(i1);
                int l;
                if (j.a(c1) || ",+<>;\"\\".indexOf(c1) >= 0 || i1 == 0 && c1 == '#') {
                    if (i1 == 0 && c1 == '#' || ",+<>;\"\\".indexOf(c1) >= 0)
                        stringbuilder.append('\\');
                    if (!Character.isWhitespace(c1)) {
                        stringbuilder.append(c1);
                        l = 0;
                    } else {
                        l = ((flag) ? 1 : 0);
                        if (!flag) {
                            stringbuilder.append(c1);
                            l = 1;
                        }
                    }
                } else
                if (c != null && sun.security.util.d.b("ava")) {
                    byte abyte1[];
                    try {
                        abyte1 = Character.toString(c1).getBytes("UTF8");
                    }
                    // Misplaced declaration of an exception variable
                    catch (Object obj) {
                        throw new IllegalArgumentException("DER Value conversion");
                    }
                    for (l = 0; l < abyte1.length; l++) {
                        stringbuilder.append('\\');
                        stringbuilder.append(Character.forDigit(abyte1[l] >>> 4 & 0xf, 16));
                        stringbuilder.append(Character.forDigit(abyte1[l] & 0xf, 16));
                    }

                    l = 0;
                } else {
                    stringbuilder.append(c1);
                    l = 0;
                }
                i1++;
                flag = l;
            }
            ((StringBuilder) (obj)).append(stringbuilder.toString().trim());
        }
        return ((StringBuilder) (obj)).toString().toUpperCase(Locale.US).toLowerCase(Locale.US);
    }

    public String a(Map map) {
        int k;
        boolean flag;
        StringBuilder stringbuilder;
        flag = false;
        k = 0;
        stringbuilder = new StringBuilder(100);
        stringbuilder.append(a(3, map));
        stringbuilder.append('=');
        if ((stringbuilder.charAt(0) < '0' || stringbuilder.charAt(0) > '9') && a(b, false)) goto _L2; else goto _L1
_L1:
        try {
            map = b.j();
        }
        // Misplaced declaration of an exception variable
        catch (Map map) {
            throw new IllegalArgumentException("DER Value conversion");
        }
        stringbuilder.append('#');
        for (; k < map.length; k++) {
            byte byte0 = map[k];
            stringbuilder.append(Character.forDigit(byte0 >>> 4 & 0xf, 16));
            stringbuilder.append(Character.forDigit(byte0 & 0xf, 16));
        }

          goto _L3
_L2:
        StringBuilder stringbuilder1;
        StringBuilder stringbuilder2;
        try {
            map = new String(b.c(), "UTF8");
        }
        // Misplaced declaration of an exception variable
        catch (Map map) {
            throw new IllegalArgumentException("DER Value conversion");
        }
        stringbuilder2 = new StringBuilder();
        k = 0;
        while (k < map.length())  {
            char c1 = map.charAt(k);
            if (j.a(c1) || ",=+<>#;\"\\".indexOf(c1) >= 0) {
                if (",=+<>#;\"\\".indexOf(c1) >= 0)
                    stringbuilder2.append('\\');
                stringbuilder2.append(c1);
            } else
            if (c != null && sun.security.util.d.b("ava")) {
                int l;
                byte abyte0[];
                try {
                    abyte0 = Character.toString(c1).getBytes("UTF8");
                }
                // Misplaced declaration of an exception variable
                catch (Map map) {
                    throw new IllegalArgumentException("DER Value conversion");
                }
                l = 0;
                while (l < abyte0.length)  {
                    stringbuilder2.append('\\');
                    stringbuilder2.append(Character.toUpperCase(Character.forDigit(abyte0[l] >>> 4 & 0xf, 16)));
                    stringbuilder2.append(Character.toUpperCase(Character.forDigit(abyte0[l] & 0xf, 16)));
                    l++;
                }
            } else {
                stringbuilder2.append(c1);
            }
            k++;
        }
        map = stringbuilder2.toString().toCharArray();
        stringbuilder1 = new StringBuilder();
        k = 0;
_L12:
        if (k < map.length && (map[k] == ' ' || map[k] == '\r')) goto _L5; else goto _L4
_L4:
        int i1 = map.length - 1;
_L10:
        int j1 = ((flag) ? 1 : 0);
        if (i1 < 0) goto _L7; else goto _L6
_L6:
        if (map[i1] == ' ' || map[i1] == '\r') goto _L8; else goto _L7
_L7:
        for (j1 = ((flag) ? 1 : 0); j1 < map.length; j1++) {
            char c2 = map[j1];
            if (j1 < k || j1 > i1)
                stringbuilder1.append('\\');
            stringbuilder1.append(c2);
        }

        break; /* Loop/switch isn't completed */
_L5:
        k++;
        continue; /* Loop/switch isn't completed */
_L8:
        i1--;
        if (true) goto _L10; else goto _L9
_L9:
        stringbuilder.append(stringbuilder1.toString());
_L3:
        return stringbuilder.toString();
        if (true) goto _L12; else goto _L11
_L11:
    }

    public void a(OutputStream outputstream) {
        i k = new i();
        i l = new i();
        k.a(a);
        b.a(k);
        l.a((byte)48, k);
        outputstream.write(l.toByteArray());
    }

    boolean b() {
        return sun.security.x509.c.a(a, 3);
    }

    public boolean equals(Object obj) {
        boolean flag;
        if (this == obj)
            flag = true;
        else
        if (!(obj instanceof a)) {
            flag = false;
        } else {
            obj = (a)obj;
            flag = a().equals(((a) (obj)).a());
        }
        return flag;
    }

    public int hashCode() {
        return a().hashCode();
    }

    public String toString() {
        return a(a(1, Collections.emptyMap()));
    }

}
