// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package sun.security.x509;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import sun.security.b.a;
import sun.security.util.ObjectIdentifier;

// Referenced classes of package sun.security.x509:
//            ah

class c {

    private static final Map a = new HashMap();
    private static final Map b = new HashMap();
    private String c;
    private ObjectIdentifier d;
    private boolean e;
    private boolean f;

    private c(String s, ObjectIdentifier objectidentifier, boolean flag, boolean flag1) {
        c = s;
        d = objectidentifier;
        e = flag;
        f = flag1;
        a.put(objectidentifier, this);
        b.put(s, this);
    }

    static String a(ObjectIdentifier objectidentifier, int i, Map map) {
        String s = objectidentifier.toString();
        map = (String)map.get(s);
        if (map == null) {
            objectidentifier = (c)a.get(objectidentifier);
            char c1;
            if (objectidentifier != null && objectidentifier.a(i))
                objectidentifier = ((c) (objectidentifier)).c;
            else
            if (i == 3)
                objectidentifier = s;
            else
                objectidentifier = (new StringBuilder()).append("OID.").append(s).toString();
        } else {
            if (map.length() == 0)
                throw new IllegalArgumentException("keyword cannot be empty");
            objectidentifier = map.trim();
            i = objectidentifier.charAt(0);
            if (i < 65 || i > 122 || i > 90 && i < 97)
                throw new IllegalArgumentException("keyword does not start with letter");
            i = 1;
            while (i < objectidentifier.length())  {
                c1 = objectidentifier.charAt(i);
                if ((c1 < 'A' || c1 > 'z' || c1 > 'Z' && c1 < 'a') && (c1 < '0' || c1 > '9') && c1 != '_')
                    throw new IllegalArgumentException("keyword character is not a letter, digit, or underscore");
                i++;
            }
        }
        return objectidentifier;
    }

    static ObjectIdentifier a(String s, int i, Map map) {
        s = s.toUpperCase();
        if (i == 3) {
            if (s.startsWith(" ") || s.endsWith(" "))
                throw new IOException((new StringBuilder()).append("Invalid leading or trailing space in keyword \"").append(s).append("\"").toString());
        } else {
            s = s.trim();
        }
        map = (String)map.get(s);
        if (map != null) goto _L2; else goto _L1
_L1:
        map = (c)b.get(s);
        if (map == null || !map.a(i)) goto _L4; else goto _L3
_L3:
        s = ((c) (map)).d;
_L6:
        return s;
_L2:
        s = new ObjectIdentifier(map);
        continue; /* Loop/switch isn't completed */
_L4:
        if (i == 2) {
            if (!s.startsWith("OID."))
                throw new IOException((new StringBuilder()).append("Invalid RFC1779 keyword: ").append(s).toString());
            map = s.substring(4);
        } else {
            map = s;
            if (i == 1) {
                map = s;
                if (s.startsWith("OID."))
                    map = s.substring(4);
            }
        }
        if (map.length() == 0)
            break; /* Loop/switch isn't completed */
        i = map.charAt(0);
        if (i < 48 || i > 57)
            break; /* Loop/switch isn't completed */
        i = 1;
_L7:
        if (i == 0)
            throw new IOException((new StringBuilder()).append("Invalid keyword \"").append(map).append("\"").toString());
        s = new ObjectIdentifier(map);
        if (true) goto _L6; else goto _L5
_L5:
        i = 0;
          goto _L7
        if (true) goto _L6; else goto _L8
_L8:
    }

    private boolean a(int i) {
        i;
        JVM INSTR tableswitch 1 3: default 28
    //                   1 70
    //                   2 55
    //                   3 62;
           goto _L1 _L2 _L3 _L4
_L1:
        throw new IllegalArgumentException((new StringBuilder()).append("Invalid standard ").append(i).toString());
_L3:
        boolean flag = e;
_L6:
        return flag;
_L4:
        flag = f;
        continue; /* Loop/switch isn't completed */
_L2:
        flag = true;
        if (true) goto _L6; else goto _L5
_L5:
    }

    static boolean a(ObjectIdentifier objectidentifier, int i) {
        objectidentifier = (c)a.get(objectidentifier);
        boolean flag;
        if (objectidentifier == null)
            flag = false;
        else
            flag = objectidentifier.a(i);
        return flag;
    }

    static  {
        new c("CN", sun.security.x509.ah.a, true, true);
        new c("C", ah.b, true, true);
        new c("L", ah.c, true, true);
        new c("S", ah.f, false, false);
        new c("ST", ah.f, true, true);
        new c("O", ah.d, true, true);
        new c("OU", ah.e, true, true);
        new c("T", ah.h, false, false);
        new c("IP", ah.n, false, false);
        new c("STREET", ah.g, true, true);
        new c("DC", ah.o, false, true);
        new c("DNQUALIFIER", ah.i, false, false);
        new c("DNQ", ah.i, false, false);
        new c("SURNAME", ah.j, false, false);
        new c("GIVENNAME", ah.k, false, false);
        new c("INITIALS", ah.l, false, false);
        new c("GENERATION", ah.m, false, false);
        new c("EMAIL", a.b, false, false);
        new c("EMAILADDRESS", a.b, false, false);
        new c("UID", ah.p, false, true);
        new c("SERIALNUMBER", ah.q, false, false);
    }
}
