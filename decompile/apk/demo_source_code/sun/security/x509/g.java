// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package sun.security.x509;

import java.io.IOException;
import java.io.OutputStream;
import java.security.cert.CertificateException;
import java.util.*;
import sun.security.util.*;

// Referenced classes of package sun.security.x509:
//            e, r

public class g
    implements e {

    private static final d a = sun.security.util.d.a("x509");
    private static Class e[] = {
        java/lang/Boolean, java/lang/Object
    };
    private Hashtable b;
    private boolean c;
    private Map d;

    public g() {
        b = new Hashtable();
        c = false;
    }

    public Object a(String s) {
        Object obj = b.get(s);
        if (obj == null)
            throw new IOException((new StringBuilder()).append("No extension found with name ").append(s).toString());
        else
            return obj;
    }

    public String a() {
        return "extensions";
    }

    public void a(OutputStream outputstream) {
        a(outputstream, false);
    }

    public void a(OutputStream outputstream, boolean flag) {
        i i1 = new i();
        Object aobj[] = b.values().toArray();
        int k = 0;
        while (k < aobj.length)  {
            if (aobj[k] instanceof e)
                ((e)aobj[k]).a(i1);
            else
            if (aobj[k] instanceof r)
                ((r)aobj[k]).a(i1);
            else
                throw new CertificateException("Illegal extension object");
            k++;
        }
        i l = new i();
        l.a((byte)48, i1);
        if (!flag) {
            i j1 = new i();
            j1.a(j.a((byte)-128, true, (byte)3), l);
            l = j1;
        }
        outputstream.write(l.toByteArray());
    }

    public void a(String s, Object obj) {
        if (obj instanceof r) {
            b.put(s, (r)obj);
            return;
        } else {
            throw new IOException("Unknown extension type.");
        }
    }

    public Collection b() {
        return b.values();
    }

    public Map c() {
        Map map;
        if (d == null)
            map = Collections.emptyMap();
        else
            map = d;
        return map;
    }

    public boolean d() {
        return c;
    }

    public boolean equals(Object obj) {
        if (this != obj) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        if (!(obj instanceof g)) {
            flag = false;
            continue; /* Loop/switch isn't completed */
        }
        Object aobj[] = ((g)obj).b().toArray();
        int l = aobj.length;
        if (l != b.size()) {
            flag = false;
            continue; /* Loop/switch isn't completed */
        }
        String s = null;
        int k = 0;
        do {
            if (k >= l)
                break;
            if (aobj[k] instanceof e)
                s = ((e)aobj[k]).a();
            r r1 = (r)aobj[k];
            if (s == null)
                s = r1.d().toString();
            r r2 = (r)b.get(s);
            if (r2 == null) {
                flag = false;
                continue; /* Loop/switch isn't completed */
            }
            if (!r2.equals(r1)) {
                flag = false;
                continue; /* Loop/switch isn't completed */
            }
            k++;
        } while (true);
        flag = c().equals(((g)obj).c());
        if (true) goto _L4; else goto _L3
_L3:
    }

    public int hashCode() {
        return b.hashCode() + c().hashCode();
    }

    public String toString() {
        return b.toString();
    }

}
