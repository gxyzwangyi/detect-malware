// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package sun.security.x509;

import java.io.*;
import java.security.*;
import java.util.*;
import sun.security.util.*;

public class AlgorithmId
    implements Serializable, e {

    public static final ObjectIdentifier A;
    public static final ObjectIdentifier B;
    public static final ObjectIdentifier C;
    public static final ObjectIdentifier D = a(new int[] {
        1, 2, 840, 10045, 4, 3
    });
    public static final ObjectIdentifier E;
    public static final ObjectIdentifier F;
    public static final ObjectIdentifier G;
    public static final ObjectIdentifier H;
    public static ObjectIdentifier I;
    public static ObjectIdentifier J;
    private static boolean N = false;
    private static Map O;
    private static final Map P;
    private static final int Q[] = {
        1, 2, 840, 0x1bb8d, 1, 3, 1
    };
    private static final int R[] = {
        1, 2, 840, 10046, 2, 1
    };
    private static final int S[] = {
        1, 3, 14, 3, 2, 12
    };
    private static final int T[] = {
        1, 2, 840, 10040, 4, 1
    };
    private static final int U[] = {
        1, 2, 5, 8, 1, 1
    };
    private static final int V[] = {
        1, 2, 840, 0x1bb8d, 1, 1, 1
    };
    private static final int W[] = {
        1, 2, 840, 0x1bb8d, 1, 1, 2
    };
    private static final int X[] = {
        1, 2, 840, 0x1bb8d, 1, 1, 4
    };
    private static final int Y[] = {
        1, 2, 840, 0x1bb8d, 1, 1, 5
    };
    private static final int Z[] = {
        1, 3, 14, 3, 2, 29
    };
    private static final int aa[] = {
        1, 2, 840, 0x1bb8d, 1, 1, 11
    };
    private static final int ab[] = {
        1, 2, 840, 0x1bb8d, 1, 1, 12
    };
    private static final int ac[] = {
        1, 2, 840, 0x1bb8d, 1, 1, 13
    };
    private static final int ad[] = {
        1, 3, 14, 3, 2, 13
    };
    private static final int ae[] = {
        1, 3, 14, 3, 2, 27
    };
    private static final int af[] = {
        1, 2, 840, 10040, 4, 3
    };
    public static final ObjectIdentifier b;
    public static final ObjectIdentifier c;
    public static final ObjectIdentifier d;
    public static final ObjectIdentifier e;
    public static final ObjectIdentifier f;
    public static final ObjectIdentifier g;
    public static final ObjectIdentifier h;
    public static final ObjectIdentifier i;
    public static final ObjectIdentifier j;
    public static final ObjectIdentifier k;
    public static final ObjectIdentifier l;
    public static final ObjectIdentifier m;
    public static final ObjectIdentifier n;
    public static final ObjectIdentifier o;
    public static final ObjectIdentifier p;
    public static final ObjectIdentifier q;
    public static final ObjectIdentifier r;
    public static final ObjectIdentifier s;
    public static final ObjectIdentifier t;
    public static final ObjectIdentifier u;
    public static final ObjectIdentifier v;
    public static final ObjectIdentifier w;
    public static final ObjectIdentifier x;
    public static final ObjectIdentifier y;
    public static final ObjectIdentifier z;
    private ObjectIdentifier K;
    private AlgorithmParameters L;
    private boolean M;
    protected j a;

    public AlgorithmId() {
        M = true;
    }

    public AlgorithmId(ObjectIdentifier objectidentifier) {
        M = true;
        K = objectidentifier;
    }

    private AlgorithmId(ObjectIdentifier objectidentifier, j j1) {
        M = true;
        K = objectidentifier;
        a = j1;
        if (a != null)
            a();
    }

    private static transient ObjectIdentifier a(int ai[]) {
        return ObjectIdentifier.a(ai);
    }

    public static AlgorithmId a(String s1) {
        Object obj;
        try {
            obj = b(s1);
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            throw new NoSuchAlgorithmException((new StringBuilder()).append("Invalid ObjectIdentifier ").append(s1).toString());
        }
        if (obj == null)
            throw new NoSuchAlgorithmException((new StringBuilder()).append("unrecognized algorithm name: ").append(s1).toString());
        else
            return new AlgorithmId(((ObjectIdentifier) (obj)));
    }

    public static AlgorithmId a(j j1) {
        Object obj = null;
        Object obj1 = null;
        if (j1.a != 48)
            throw new IOException("algid parse error, not a sequence");
        h h1 = j1.k();
        ObjectIdentifier objectidentifier = h1.a();
        if (h1.f() == 0) {
            j1 = obj1;
        } else {
            j j2 = h1.b();
            if (j2.a == 5) {
                j1 = obj;
                if (j2.l() != 0)
                    throw new IOException("invalid NULL");
            } else {
                j1 = j2;
            }
            if (h1.f() != 0)
                throw new IOException("Invalid AlgorithmIdentifier: extra data");
        }
        return new AlgorithmId(objectidentifier, j1);
    }

    private static ObjectIdentifier b(String s1) {
        if (s1.indexOf('.') == -1) goto _L2; else goto _L1
_L1:
        if (s1.startsWith("OID."))
            s1 = new ObjectIdentifier(s1.substring("OID.".length()));
        else
            s1 = new ObjectIdentifier(s1);
_L4:
        return s1;
_L2:
        if (s1.equalsIgnoreCase("MD5")) {
            s1 = c;
            continue; /* Loop/switch isn't completed */
        }
        if (s1.equalsIgnoreCase("MD2")) {
            s1 = b;
            continue; /* Loop/switch isn't completed */
        }
        if (s1.equalsIgnoreCase("SHA") || s1.equalsIgnoreCase("SHA1") || s1.equalsIgnoreCase("SHA-1")) {
            s1 = d;
            continue; /* Loop/switch isn't completed */
        }
        if (s1.equalsIgnoreCase("SHA-256") || s1.equalsIgnoreCase("SHA256")) {
            s1 = e;
            continue; /* Loop/switch isn't completed */
        }
        if (s1.equalsIgnoreCase("SHA-384") || s1.equalsIgnoreCase("SHA384")) {
            s1 = f;
            continue; /* Loop/switch isn't completed */
        }
        if (s1.equalsIgnoreCase("SHA-512") || s1.equalsIgnoreCase("SHA512")) {
            s1 = g;
            continue; /* Loop/switch isn't completed */
        }
        if (s1.equalsIgnoreCase("RSA")) {
            s1 = n;
            continue; /* Loop/switch isn't completed */
        }
        if (s1.equalsIgnoreCase("Diffie-Hellman") || s1.equalsIgnoreCase("DH")) {
            s1 = h;
            continue; /* Loop/switch isn't completed */
        }
        if (s1.equalsIgnoreCase("DSA")) {
            s1 = j;
            continue; /* Loop/switch isn't completed */
        }
        if (s1.equalsIgnoreCase("EC")) {
            s1 = l;
            continue; /* Loop/switch isn't completed */
        }
        if (s1.equalsIgnoreCase("MD5withRSA") || s1.equalsIgnoreCase("MD5/RSA")) {
            s1 = p;
            continue; /* Loop/switch isn't completed */
        }
        if (s1.equalsIgnoreCase("MD2withRSA") || s1.equalsIgnoreCase("MD2/RSA")) {
            s1 = o;
            continue; /* Loop/switch isn't completed */
        }
        if (s1.equalsIgnoreCase("SHAwithDSA") || s1.equalsIgnoreCase("SHA1withDSA") || s1.equalsIgnoreCase("SHA/DSA") || s1.equalsIgnoreCase("SHA1/DSA") || s1.equalsIgnoreCase("DSAWithSHA1") || s1.equalsIgnoreCase("DSS") || s1.equalsIgnoreCase("SHA-1/DSA")) {
            s1 = x;
            continue; /* Loop/switch isn't completed */
        }
        if (s1.equalsIgnoreCase("SHA1WithRSA") || s1.equalsIgnoreCase("SHA1/RSA")) {
            s1 = q;
            continue; /* Loop/switch isn't completed */
        }
        if (s1.equalsIgnoreCase("SHA1withECDSA") || s1.equalsIgnoreCase("ECDSA")) {
            s1 = y;
            continue; /* Loop/switch isn't completed */
        }
        if (N)
            break MISSING_BLOCK_LABEL_635;
        Provider aprovider[] = Security.getProviders();
        int i1 = 0;
        do {
label0:
            {
                if (i1 >= aprovider.length)
                    break label0;
                Enumeration enumeration = aprovider[i1].keys();
                do {
                    int j1;
                    String s3;
label1:
                    {
label2:
                        {
                            do {
                                do {
                                    if (!enumeration.hasMoreElements())
                                        break label2;
                                    s3 = (String)enumeration.nextElement();
                                } while (!s3.toUpperCase().startsWith("ALG.ALIAS"));
                                j1 = s3.toUpperCase().indexOf("OID.", 0);
                            } while (j1 == -1);
                            j1 += "OID.".length();
                            if (j1 != s3.length())
                                break label1;
                        }
                        i1++;
                    }
                    if (true)
                        break;
                    if (O == null)
                        O = new HashMap();
                    String s2 = s3.substring(j1);
                    s3 = aprovider[i1].getProperty(s3).toUpperCase();
                    if (O.get(s3) == null)
                        O.put(s3, new ObjectIdentifier(s2));
                } while (true);
            }
        } while (true);
        N = true;
        s1 = (ObjectIdentifier)O.get(s1.toUpperCase());
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected void a() {
        String s1 = K.toString();
        L = AlgorithmParameters.getInstance(s1);
        L.init(a.j());
_L2:
        return;
        NoSuchAlgorithmException nosuchalgorithmexception;
        nosuchalgorithmexception;
        L = null;
        if (true) goto _L2; else goto _L1
_L1:
    }

    public void a(OutputStream outputstream) {
        i j1 = new i();
        i i1 = new i();
        j1.a(K);
        if (!M)
            if (L != null)
                a = new j(L.getEncoded());
            else
                a = null;
        if (a == null)
            j1.a();
        else
            j1.a(a);
        i1.a((byte)48, j1);
        outputstream.write(i1.toByteArray());
    }

    public final void a(i i1) {
        a(((OutputStream) (i1)));
    }

    public final boolean a(ObjectIdentifier objectidentifier) {
        return K.a(objectidentifier);
    }

    public boolean a(AlgorithmId algorithmid) {
        boolean flag1 = true;
        boolean flag;
        if (a == null) {
            if (algorithmid.a == null)
                flag = true;
            else
                flag = false;
        } else {
            flag = a.a(algorithmid.a);
        }
        if (K.a(algorithmid.K) && flag)
            flag = flag1;
        else
            flag = false;
        return flag;
    }

    public final ObjectIdentifier b() {
        return K;
    }

    public String c() {
        Object obj1 = (String)P.get(K);
        if (obj1 == null) goto _L2; else goto _L1
_L1:
        return ((String) (obj1));
_L2:
        Object obj;
        obj = obj1;
        if (a == null)
            break MISSING_BLOCK_LABEL_104;
        obj = obj1;
        if (!K.a(D))
            break MISSING_BLOCK_LABEL_104;
        String s1;
        obj = JVM INSTR new #300 <Class j>;
        ((j) (obj)).j(d());
        s1 = a(((j) (obj))).c();
        obj = s1;
        if (s1.equals("SHA"))
            obj = "SHA1";
        try {
            StringBuilder stringbuilder = JVM INSTR new #279 <Class StringBuilder>;
            stringbuilder.StringBuilder();
            obj = stringbuilder.append(((String) (obj))).append("withECDSA").toString();
        }
        catch (IOException ioexception) {
            ioexception = ((IOException) (obj1));
        }
        obj1 = obj;
        if (obj == null)
            obj1 = K.toString();
        if (true) goto _L1; else goto _L3
_L3:
    }

    public byte[] d() {
        byte abyte0[];
        if (a == null)
            abyte0 = null;
        else
            abyte0 = a.j();
        return abyte0;
    }

    protected String e() {
        String s1;
        if (a == null)
            s1 = "";
        else
        if (L != null)
            s1 = L.toString();
        else
            s1 = ", params unparsed";
        return s1;
    }

    public boolean equals(Object obj) {
        boolean flag;
        if (this == obj)
            flag = true;
        else
        if (obj instanceof AlgorithmId)
            flag = a((AlgorithmId)obj);
        else
        if (obj instanceof ObjectIdentifier)
            flag = a((ObjectIdentifier)obj);
        else
            flag = false;
        return flag;
    }

    public int hashCode() {
        StringBuilder stringbuilder = new StringBuilder();
        stringbuilder.append(K.toString());
        stringbuilder.append(e());
        return stringbuilder.toString().hashCode();
    }

    public String toString() {
        return (new StringBuilder()).append(c()).append(e()).toString();
    }

    static  {
        b = ObjectIdentifier.a(new int[] {
            1, 2, 840, 0x1bb8d, 2, 2
        });
        c = ObjectIdentifier.a(new int[] {
            1, 2, 840, 0x1bb8d, 2, 5
        });
        d = ObjectIdentifier.a(new int[] {
            1, 3, 14, 3, 2, 26
        });
        e = ObjectIdentifier.a(new int[] {
            2, 16, 840, 1, 101, 3, 4, 2, 1
        });
        f = ObjectIdentifier.a(new int[] {
            2, 16, 840, 1, 101, 3, 4, 2, 2
        });
        g = ObjectIdentifier.a(new int[] {
            2, 16, 840, 1, 101, 3, 4, 2, 3
        });
        l = a(new int[] {
            1, 2, 840, 10045, 2, 1
        });
        y = a(new int[] {
            1, 2, 840, 10045, 4, 1
        });
        z = a(new int[] {
            1, 2, 840, 10045, 4, 3, 1
        });
        A = a(new int[] {
            1, 2, 840, 10045, 4, 3, 2
        });
        B = a(new int[] {
            1, 2, 840, 10045, 4, 3, 3
        });
        C = a(new int[] {
            1, 2, 840, 10045, 4, 3, 4
        });
        E = ObjectIdentifier.a(new int[] {
            1, 2, 840, 0x1bb8d, 1, 5, 3
        });
        F = ObjectIdentifier.a(new int[] {
            1, 2, 840, 0x1bb8d, 1, 5, 6
        });
        G = ObjectIdentifier.a(new int[] {
            1, 2, 840, 0x1bb8d, 1, 5, 10
        });
        H = ObjectIdentifier.a(new int[] {
            1, 2, 840, 0x1bb8d, 1, 5, 11
        });
        I = ObjectIdentifier.a(new int[] {
            1, 2, 840, 0x1bb8d, 1, 12, 1, 3
        });
        J = ObjectIdentifier.a(new int[] {
            1, 2, 840, 0x1bb8d, 1, 12, 1, 6
        });
        h = ObjectIdentifier.a(Q);
        i = ObjectIdentifier.a(R);
        k = ObjectIdentifier.a(S);
        j = ObjectIdentifier.a(T);
        m = ObjectIdentifier.a(U);
        n = ObjectIdentifier.a(V);
        o = ObjectIdentifier.a(W);
        p = ObjectIdentifier.a(X);
        q = ObjectIdentifier.a(Y);
        r = ObjectIdentifier.a(Z);
        s = ObjectIdentifier.a(aa);
        t = ObjectIdentifier.a(ab);
        u = ObjectIdentifier.a(ac);
        v = ObjectIdentifier.a(ad);
        w = ObjectIdentifier.a(ae);
        x = ObjectIdentifier.a(af);
        P = new HashMap();
        P.put(c, "MD5");
        P.put(b, "MD2");
        P.put(d, "SHA");
        P.put(e, "SHA256");
        P.put(f, "SHA384");
        P.put(g, "SHA512");
        P.put(n, "RSA");
        P.put(m, "RSA");
        P.put(h, "Diffie-Hellman");
        P.put(i, "Diffie-Hellman");
        P.put(j, "DSA");
        P.put(k, "DSA");
        P.put(l, "EC");
        P.put(y, "SHA1withECDSA");
        P.put(z, "SHA224withECDSA");
        P.put(A, "SHA256withECDSA");
        P.put(B, "SHA384withECDSA");
        P.put(C, "SHA512withECDSA");
        P.put(p, "MD5withRSA");
        P.put(o, "MD2withRSA");
        P.put(x, "SHA1withDSA");
        P.put(w, "SHA1withDSA");
        P.put(v, "SHA1withDSA");
        P.put(q, "SHA1withRSA");
        P.put(r, "SHA1withRSA");
        P.put(s, "SHA256withRSA");
        P.put(t, "SHA384withRSA");
        P.put(u, "SHA512withRSA");
        P.put(E, "PBEWithMD5AndDES");
        P.put(F, "PBEWithMD5AndRC2");
        P.put(G, "PBEWithSHA1AndDES");
        P.put(H, "PBEWithSHA1AndRC2");
        P.put(I, "PBEWithSHA1AndDESede");
        P.put(J, "PBEWithSHA1AndRC2_40");
    }
}
