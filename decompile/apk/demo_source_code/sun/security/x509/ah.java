// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package sun.security.x509;

import java.security.Principal;
import java.util.*;
import javax.security.auth.x500.X500Principal;
import sun.security.util.ObjectIdentifier;
import sun.security.util.i;

// Referenced classes of package sun.security.x509:
//            t, ab

public class ah
    implements Principal, t {

    private static final int A[] = {
        2, 5, 4, 6
    };
    private static final int B[] = {
        2, 5, 4, 7
    };
    private static final int C[] = {
        2, 5, 4, 8
    };
    private static final int D[] = {
        2, 5, 4, 9
    };
    private static final int E[] = {
        2, 5, 4, 10
    };
    private static final int F[] = {
        2, 5, 4, 11
    };
    private static final int G[] = {
        2, 5, 4, 12
    };
    private static final int H[] = {
        2, 5, 4, 42
    };
    private static final int I[] = {
        2, 5, 4, 43
    };
    private static final int J[] = {
        2, 5, 4, 44
    };
    private static final int K[] = {
        2, 5, 4, 46
    };
    private static final int L[] = {
        1, 3, 6, 1, 4, 1, 42, 2, 11, 2, 
        1
    };
    private static final int M[] = {
        0, 9, 2342, 0x124f92c, 100, 1, 25
    };
    private static final int N[] = {
        0, 9, 2342, 0x124f92c, 100, 1, 1
    };
    public static final ObjectIdentifier a = a(ObjectIdentifier.a(x));
    public static final ObjectIdentifier b = a(ObjectIdentifier.a(A));
    public static final ObjectIdentifier c = a(ObjectIdentifier.a(B));
    public static final ObjectIdentifier d = a(ObjectIdentifier.a(E));
    public static final ObjectIdentifier e = a(ObjectIdentifier.a(F));
    public static final ObjectIdentifier f = a(ObjectIdentifier.a(C));
    public static final ObjectIdentifier g = a(ObjectIdentifier.a(D));
    public static final ObjectIdentifier h = a(ObjectIdentifier.a(G));
    public static final ObjectIdentifier i = a(ObjectIdentifier.a(K));
    public static final ObjectIdentifier j = a(ObjectIdentifier.a(y));
    public static final ObjectIdentifier k = a(ObjectIdentifier.a(H));
    public static final ObjectIdentifier l = a(ObjectIdentifier.a(I));
    public static final ObjectIdentifier m = a(ObjectIdentifier.a(J));
    public static final ObjectIdentifier n = a(ObjectIdentifier.a(L));
    public static final ObjectIdentifier o = a(ObjectIdentifier.a(M));
    public static final ObjectIdentifier p = a(ObjectIdentifier.a(N));
    public static final ObjectIdentifier q = a(ObjectIdentifier.a(z));
    private static final Map w = new HashMap();
    private static final int x[] = {
        2, 5, 4, 3
    };
    private static final int y[] = {
        2, 5, 4, 4
    };
    private static final int z[] = {
        2, 5, 4, 5
    };
    private String r;
    private String s;
    private String t;
    private ab u[];
    private X500Principal v;

    public ah(String s1) {
        this(s1, Collections.emptyMap());
    }

    public ah(String s1, Map map) {
        a(s1, map);
    }

    static int a(String s1, int i1, int j1) {
        int i2 = 0;
        for (int k1 = i1; k1 < j1;) {
            int l1;
label0:
            {
                if (s1.charAt(k1) != '"' || k1 != i1) {
                    l1 = i2;
                    if (s1.charAt(k1) != '"')
                        break label0;
                    l1 = i2;
                    if (s1.charAt(k1 - 1) == '\\')
                        break label0;
                }
                l1 = i2 + 1;
            }
            k1++;
            i2 = l1;
        }

        return i2;
    }

    static ObjectIdentifier a(ObjectIdentifier objectidentifier) {
        ObjectIdentifier objectidentifier1 = (ObjectIdentifier)w.get(objectidentifier);
        if (objectidentifier1 != null)
            objectidentifier = objectidentifier1;
        else
            w.put(objectidentifier, objectidentifier);
        return objectidentifier;
    }

    private void a(String s1, Map map) {
        if (s1 == null || s1.length() == 0) {
            u = new ab[0];
        } else {
            ArrayList arraylist = new ArrayList();
            int j1 = s1.indexOf(',');
            int i1 = s1.indexOf(';');
            int i2 = 0;
            int k1 = 0;
            int l1 = 0;
            while (j1 >= 0 || i1 >= 0)  {
                int j2;
                if (i1 >= 0)
                    if (j1 < 0)
                        j1 = i1;
                    else
                        j1 = Math.min(j1, i1);
                j2 = a(s1, i2, j1) + k1;
                i1 = j2;
                k1 = l1;
                if (j1 >= 0) {
                    i1 = j2;
                    k1 = l1;
                    if (j2 != 1) {
                        i1 = j2;
                        k1 = l1;
                        if (!a(j1, i2, s1)) {
                            arraylist.add(new ab(s1.substring(l1, j1), map));
                            k1 = j1 + 1;
                            i1 = 0;
                        }
                    }
                }
                i2 = j1 + 1;
                j1 = s1.indexOf(',', i2);
                l1 = s1.indexOf(';', i2);
                j2 = i1;
                i1 = l1;
                l1 = k1;
                k1 = j2;
            }
            arraylist.add(new ab(s1.substring(l1), map));
            Collections.reverse(arraylist);
            u = (ab[])arraylist.toArray(new ab[arraylist.size()]);
        }
    }

    private static boolean a(int i1, int j1, String s1) {
        boolean flag;
        flag = true;
        break MISSING_BLOCK_LABEL_3;
        if ((i1 != 1 || s1.charAt(i1 - 1) != '\\') && (i1 <= 1 || s1.charAt(i1 - 1) != '\\' || s1.charAt(i1 - 2) == '\\'))
            if (i1 > 1 && s1.charAt(i1 - 1) == '\\' && s1.charAt(i1 - 2) == '\\') {
                i1--;
                int k1;
                int l1;
                for (k1 = 0; i1 >= j1; k1 = l1) {
                    l1 = k1;
                    if (s1.charAt(i1) == '\\')
                        l1 = k1 + 1;
                    i1--;
                }

                if (k1 % 2 != 0)
                    flag = true;
                else
                    flag = false;
            } else {
                flag = false;
            }
        return flag;
    }

    private boolean a(ah ah1) {
        boolean flag1 = false;
        if (this != ah1) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        flag = flag1;
        if (ah1 == null)
            continue; /* Loop/switch isn't completed */
        if (ah1.u.length == 0) {
            flag = true;
            continue; /* Loop/switch isn't completed */
        }
        flag = flag1;
        if (u.length == 0)
            continue; /* Loop/switch isn't completed */
        flag = flag1;
        if (u.length < ah1.u.length)
            continue; /* Loop/switch isn't completed */
        for (int i1 = 0; i1 < ah1.u.length; i1++) {
            flag = flag1;
            if (!u[i1].equals(ah1.u[i1]))
                continue; /* Loop/switch isn't completed */
        }

        flag = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    private String b(Map map) {
        if (u.length == 0) {
            map = "";
        } else {
            StringBuilder stringbuilder = new StringBuilder(48);
            for (int i1 = u.length - 1; i1 >= 0; i1--) {
                if (i1 < u.length - 1)
                    stringbuilder.append(',');
                stringbuilder.append(u[i1].a(map));
            }

            map = stringbuilder.toString();
        }
        return map;
    }

    private void e() {
        if (u.length == 1) {
            r = u[0].toString();
        } else {
            StringBuilder stringbuilder = new StringBuilder(48);
            if (u != null) {
                for (int i1 = u.length - 1; i1 >= 0; i1--) {
                    if (i1 != u.length - 1)
                        stringbuilder.append(", ");
                    stringbuilder.append(u[i1].toString());
                }

            }
            r = stringbuilder.toString();
        }
    }

    public int a() {
        return 4;
    }

    public int a(t t1) {
        byte byte0;
        byte0 = -1;
        break MISSING_BLOCK_LABEL_2;
        if (t1 != null && t1.a() == 4) {
            t1 = (ah)t1;
            if (t1.equals(this))
                byte0 = 0;
            else
            if (((ah) (t1)).u.length == 0)
                byte0 = 2;
            else
            if (u.length == 0)
                byte0 = 1;
            else
            if (t1.a(this))
                byte0 = 1;
            else
            if (a(((ah) (t1))))
                byte0 = 2;
            else
                byte0 = 3;
        }
        return byte0;
    }

    public String a(Map map) {
        if (map.isEmpty()) {
            if (s != null) {
                map = s;
            } else {
                s = b(map);
                map = s;
            }
        } else {
            map = b(map);
        }
        return map;
    }

    public void a(i i1) {
        i k1 = new i();
        for (int j1 = 0; j1 < u.length; j1++)
            u[j1].a(k1);

        i1.a((byte)48, k1);
    }

    public String b() {
        return a(Collections.emptyMap());
    }

    public String c() {
        Object obj;
        if (t != null)
            obj = t;
        else
        if (u.length == 0) {
            t = "";
            obj = t;
        } else {
            obj = new StringBuilder(48);
            for (int i1 = u.length - 1; i1 >= 0; i1--) {
                if (i1 < u.length - 1)
                    ((StringBuilder) (obj)).append(',');
                ((StringBuilder) (obj)).append(u[i1].a(true));
            }

            t = ((StringBuilder) (obj)).toString();
            obj = t;
        }
        return ((String) (obj));
    }

    public X500Principal d() {
        if (v == null)
            try {
                if (r == null)
                    e();
                X500Principal x500principal = JVM INSTR new #297 <Class X500Principal>;
                x500principal.X500Principal(r);
                v = x500principal;
            }
            catch (Exception exception) {
                throw new RuntimeException("Unexpected exception", exception);
            }
        return v;
    }

    public boolean equals(Object obj) {
        boolean flag1 = false;
        if (this != obj) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        flag = flag1;
        if (!(obj instanceof ah))
            continue; /* Loop/switch isn't completed */
        ah ah1 = (ah)obj;
        if (t != null && ah1.t != null) {
            flag = t.equals(ah1.t);
            continue; /* Loop/switch isn't completed */
        }
        int j1 = u.length;
        flag = flag1;
        if (j1 != ah1.u.length)
            continue; /* Loop/switch isn't completed */
        for (int i1 = 0; i1 < j1; i1++) {
            obj = u[i1];
            ab ab1 = ah1.u[i1];
            flag = flag1;
            if (((ab) (obj)).a.length != ab1.a.length)
                continue; /* Loop/switch isn't completed */
        }

        flag = c().equals(ah1.c());
        if (true) goto _L4; else goto _L3
_L3:
    }

    public String getName() {
        return toString();
    }

    public int hashCode() {
        return c().hashCode();
    }

    public String toString() {
        if (r == null)
            e();
        return r;
    }

}
