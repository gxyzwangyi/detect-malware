// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package sun.security.util;

import java.io.*;
import sun.misc.IOUtils;

// Referenced classes of package sun.security.util:
//            g, h, f, ObjectIdentifier, 
//            i

public class j {

    public byte a;
    protected g b;
    public final h c;
    private int d;

    public j(byte byte0, String s) {
        c = a(byte0, s);
    }

    public j(String s) {
        int i1;
        boolean flag;
        flag = false;
        super();
        i1 = 0;
_L3:
        if (i1 >= s.length())
            break MISSING_BLOCK_LABEL_61;
        if (a(s.charAt(i1))) goto _L2; else goto _L1
_L1:
        i1 = ((flag) ? 1 : 0);
_L4:
        byte byte0;
        if (i1 != 0)
            byte0 = 19;
        else
            byte0 = 12;
        c = a(byte0, s);
        return;
_L2:
        i1++;
          goto _L3
        i1 = 1;
          goto _L4
    }

    j(g g1) {
        a = (byte)g1.read();
        byte byte0 = (byte)g1.read();
        d = sun.security.util.h.a(byte0 & 0xff, g1);
        if (d == -1) {
            Object obj = g1.a();
            int i1 = ((g) (obj)).available();
            byte abyte0[] = new byte[i1 + 2];
            abyte0[0] = a;
            abyte0[1] = byte0;
            obj = new DataInputStream(((InputStream) (obj)));
            ((DataInputStream) (obj)).readFully(abyte0, 2, i1);
            ((DataInputStream) (obj)).close();
            g g2 = new g((new f()).a(abyte0));
            if (a != g2.read())
                throw new IOException("Indefinite length encoding not supported");
            d = sun.security.util.h.a(g2);
            b = g2.a();
            b.a(d);
            c = new h(b);
            g1.skip(d + 2);
        } else {
            b = g1.a();
            b.a(d);
            c = new h(b);
            g1.skip(d);
        }
    }

    public j(byte abyte0[]) {
        c = a(true, new ByteArrayInputStream(abyte0));
    }

    public static byte a(byte byte0, boolean flag, byte byte1) {
        byte byte3 = (byte)(byte0 | byte1);
        byte byte2 = byte3;
        if (flag)
            byte2 = (byte)(byte3 | 0x20);
        return byte2;
    }

    private h a(byte byte0, String s) {
        a = byte0;
        byte0;
        JVM INSTR lookupswitch 6: default 64
    //                   12: 133
    //                   19: 74
    //                   20: 121
    //                   22: 74
    //                   27: 74
    //                   30: 127;
           goto _L1 _L2 _L3 _L4 _L3 _L3 _L5
_L1:
        throw new IllegalArgumentException("Unsupported DER string type");
_L3:
        String s1 = "ASCII";
_L7:
        s = s.getBytes(s1);
        d = s.length;
        b = new g(s);
        s = new h(b);
        s.a(0x7fffffff);
        return s;
_L4:
        s1 = "ISO-8859-1";
        continue; /* Loop/switch isn't completed */
_L5:
        s1 = "UnicodeBigUnmarked";
        continue; /* Loop/switch isn't completed */
_L2:
        s1 = "UTF8";
        if (true) goto _L7; else goto _L6
_L6:
    }

    private h a(boolean flag, InputStream inputstream) {
        a = (byte)inputstream.read();
        byte byte0 = (byte)inputstream.read();
        d = sun.security.util.h.a(byte0 & 0xff, inputstream);
        Object obj = inputstream;
        if (d == -1) {
            int i1 = inputstream.available();
            obj = new byte[i1 + 2];
            obj[0] = a;
            obj[1] = byte0;
            inputstream = new DataInputStream(inputstream);
            inputstream.readFully(((byte []) (obj)), 2, i1);
            inputstream.close();
            obj = new ByteArrayInputStream((new f()).a(((byte []) (obj))));
            if (a != ((InputStream) (obj)).read())
                throw new IOException("Indefinite length encoding not supported");
            d = sun.security.util.h.a(((InputStream) (obj)));
        }
        if (d == 0) {
            inputstream = null;
        } else {
            if (flag && ((InputStream) (obj)).available() != d)
                throw new IOException("extra data given to DerValue constructor");
            b = new g(IOUtils.readFully(((InputStream) (obj)), d, true));
            inputstream = new h(b);
        }
        return inputstream;
    }

    public static boolean a(char c1) {
        boolean flag1 = true;
        if (c1 < 'a') goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
        if (c1 <= 'z') goto _L3; else goto _L2
_L2:
        if (c1 < 'A') goto _L5; else goto _L4
_L4:
        flag = flag1;
        if (c1 <= 'Z') goto _L3; else goto _L5
_L5:
        if (c1 < '0' || c1 > '9') goto _L7; else goto _L6
_L6:
        flag = flag1;
_L3:
        return flag;
_L7:
        flag = flag1;
        switch (c1) {
        default:
            flag = false;
            break;

        case 32: // ' '
        case 39: // '\''
        case 40: // '('
        case 41: // ')'
        case 43: // '+'
        case 44: // ','
        case 45: // '-'
        case 46: // '.'
        case 47: // '/'
        case 58: // ':'
        case 61: // '='
        case 63: // '?'
            break;
        }
        if (true) goto _L3; else goto _L8
_L8:
    }

    private static boolean a(j j1, j j2) {
        h h1 = j1.c;
        h1;
        JVM INSTR monitorenter ;
        boolean flag;
        synchronized (j2.c) {
            j1.c.e();
            j2.c.e();
            flag = j1.b.a(j2.b);
        }
        h1;
        JVM INSTR monitorexit ;
        return flag;
        j1;
        h2;
        JVM INSTR monitorexit ;
        throw j1;
        j1;
        h1;
        JVM INSTR monitorexit ;
        throw j1;
    }

    public ObjectIdentifier a() {
        if (a != 6)
            throw new IOException((new StringBuilder()).append("DerValue.getOID, not an OID ").append(a).toString());
        else
            return new ObjectIdentifier(b);
    }

    public void a(i i1) {
        i1.write(a);
        i1.b(d);
        if (d <= 0) goto _L2; else goto _L1
_L1:
        byte abyte0[] = new byte[d];
        h h1 = c;
        h1;
        JVM INSTR monitorenter ;
        b.reset();
        if (b.read(abyte0) != d) {
            i1 = JVM INSTR new #81  <Class IOException>;
            i1.IOException("short DER value read (encode)");
            throw i1;
        }
        break MISSING_BLOCK_LABEL_76;
        i1;
        h1;
        JVM INSTR monitorexit ;
        throw i1;
        i1.write(abyte0);
        h1;
        JVM INSTR monitorexit ;
_L2:
    }

    public boolean a(j j1) {
        boolean flag = true;
        if (this != j1) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        if (a != j1.a)
            flag = false;
        else
        if (c != j1.c)
            if (System.identityHashCode(c) > System.identityHashCode(j1.c))
                flag = a(this, j1);
            else
                flag = a(j1, this);
        if (true) goto _L1; else goto _L3
_L3:
    }

    public String b() {
        String s;
        if (a == 12)
            s = h();
        else
        if (a == 19)
            s = d();
        else
        if (a == 20)
            s = e();
        else
        if (a == 22)
            s = f();
        else
        if (a == 30)
            s = g();
        else
        if (a == 27)
            s = i();
        else
            s = null;
        return s;
    }

    public byte[] c() {
        byte abyte0[] = new byte[d];
        synchronized (c) {
            c.e();
            c.a(abyte0);
        }
        return abyte0;
        exception;
        h1;
        JVM INSTR monitorexit ;
        throw exception;
    }

    public String d() {
        if (a != 19)
            throw new IOException((new StringBuilder()).append("DerValue.getPrintableString, not a string ").append(a).toString());
        else
            return new String(c(), "ASCII");
    }

    public String e() {
        if (a != 20)
            throw new IOException((new StringBuilder()).append("DerValue.getT61String, not T61 ").append(a).toString());
        else
            return new String(c(), "ISO-8859-1");
    }

    public boolean equals(Object obj) {
        boolean flag;
        if (obj instanceof j)
            flag = a((j)obj);
        else
            flag = false;
        return flag;
    }

    public String f() {
        if (a != 22)
            throw new IOException((new StringBuilder()).append("DerValue.getIA5String, not IA5 ").append(a).toString());
        else
            return new String(c(), "ASCII");
    }

    public String g() {
        if (a != 30)
            throw new IOException((new StringBuilder()).append("DerValue.getBMPString, not BMP ").append(a).toString());
        else
            return new String(c(), "UnicodeBigUnmarked");
    }

    public String h() {
        if (a != 12)
            throw new IOException((new StringBuilder()).append("DerValue.getUTF8String, not UTF-8 ").append(a).toString());
        else
            return new String(c(), "UTF8");
    }

    public int hashCode() {
        return toString().hashCode();
    }

    public String i() {
        if (a != 27)
            throw new IOException((new StringBuilder()).append("DerValue.getGeneralString, not GeneralString ").append(a).toString());
        else
            return new String(c(), "ASCII");
    }

    public byte[] j() {
        i i1 = new i();
        a(i1);
        c.e();
        return i1.toByteArray();
    }

    public h k() {
        if (a == 48 || a == 49)
            return new h(b);
        else
            throw new IOException((new StringBuilder()).append("toDerInputStream rejects tag type ").append(a).toString());
    }

    public int l() {
        return d;
    }

    public String toString() {
        Object obj;
        String s;
        try {
            s = b();
        }
        catch (IOException ioexception) {
            throw new IllegalArgumentException("misformatted DER value");
        }
        if (s == null) goto _L2; else goto _L1
_L1:
        obj = JVM INSTR new #146 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        obj = ((StringBuilder) (obj)).append("\"").append(s).append("\"").toString();
_L3:
        return ((String) (obj));
_L2:
        if (a != 5)
            break MISSING_BLOCK_LABEL_52;
        obj = "[DerValue, null]";
          goto _L3
label0:
        {
            if (a != 6)
                break label0;
            obj = JVM INSTR new #146 <Class StringBuilder>;
            ((StringBuilder) (obj)).StringBuilder();
            obj = ((StringBuilder) (obj)).append("OID.").append(a()).toString();
        }
          goto _L3
        obj = JVM INSTR new #146 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        obj = ((StringBuilder) (obj)).append("[DerValue, tag = ").append(a).append(", length = ").append(d).append("]").toString();
          goto _L3
    }
}
