// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package sun.security.util;

import java.io.ByteArrayOutputStream;

public class a {

    private static final byte c[][];
    private byte a[];
    private int b;

    public a(int i) {
        if (i < 0) {
            throw new IllegalArgumentException("Negative length for BitArray");
        } else {
            b = i;
            a = new byte[((i + 8) - 1) / 8];
            return;
        }
    }

    public a(int i, byte abyte0[]) {
        if (i < 0)
            throw new IllegalArgumentException("Negative length for BitArray");
        if (abyte0.length * 8 < i)
            throw new IllegalArgumentException("Byte array too short to represent bit array of given length");
        b = i;
        int j = ((i + 8) - 1) / 8;
        i = (byte)(255 << j * 8 - i);
        a = new byte[j];
        System.arraycopy(abyte0, 0, a, 0, j);
        if (j > 0) {
            abyte0 = a;
            j--;
            abyte0[j] = (byte)(i & abyte0[j]);
        }
    }

    private a(a a1) {
        b = a1.b;
        a = (byte[])a1.a.clone();
    }

    public a(boolean aflag[]) {
        b = aflag.length;
        a = new byte[(b + 7) / 8];
        for (int i = 0; i < b; i++)
            a(i, aflag[i]);

    }

    private static int b(int i) {
        return i / 8;
    }

    private static int c(int i) {
        return 1 << 7 - i % 8;
    }

    public int a() {
        return b;
    }

    public void a(int i, boolean flag) {
        if (i < 0 || i >= b)
            throw new ArrayIndexOutOfBoundsException(Integer.toString(i));
        int j = b(i);
        i = c(i);
        if (flag) {
            byte abyte0[] = a;
            abyte0[j] = (byte)(i | abyte0[j]);
        } else {
            byte abyte1[] = a;
            abyte1[j] = (byte)(~i & abyte1[j]);
        }
    }

    public boolean a(int i) {
        if (i < 0 || i >= b)
            throw new ArrayIndexOutOfBoundsException(Integer.toString(i));
        boolean flag;
        if ((a[b(i)] & c(i)) != 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public byte[] b() {
        return (byte[])a.clone();
    }

    public boolean[] c() {
        boolean aflag[] = new boolean[b];
        for (int i = 0; i < b; i++)
            aflag[i] = a(i);

        return aflag;
    }

    public Object clone() {
        return new a(this);
    }

    public a d() {
        int i = b - 1;
_L3:
        if (i < 0)
            break MISSING_BLOCK_LABEL_52;
        if (!a(i)) goto _L2; else goto _L1
_L1:
        a a1 = new a(i + 1, a.a.a.a(a, (i + 8) / 8));
_L4:
        return a1;
_L2:
        i--;
          goto _L3
        a1 = new a(1);
          goto _L4
    }

    public boolean equals(Object obj) {
        boolean flag1 = false;
        if (obj != this) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        flag = flag1;
        if (obj == null)
            continue; /* Loop/switch isn't completed */
        flag = flag1;
        if (!(obj instanceof a))
            continue; /* Loop/switch isn't completed */
        obj = (a)obj;
        flag = flag1;
        if (((a) (obj)).b != b)
            continue; /* Loop/switch isn't completed */
        for (int i = 0; i < a.length; i++) {
            flag = flag1;
            if (a[i] != ((a) (obj)).a[i])
                continue; /* Loop/switch isn't completed */
        }

        flag = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public int hashCode() {
        int j = 0;
        int i = 0;
        for (; j < a.length; j++)
            i = i * 31 + a[j];

        return b ^ i;
    }

    public String toString() {
        ByteArrayOutputStream bytearrayoutputstream = new ByteArrayOutputStream();
        int i = 0;
        while (i < a.length - 1)  {
            bytearrayoutputstream.write(c[a[i] >> 4 & 0xf], 0, 4);
            bytearrayoutputstream.write(c[a[i] & 0xf], 0, 4);
            if (i % 8 == 7)
                bytearrayoutputstream.write(10);
            else
                bytearrayoutputstream.write(32);
            i++;
        }
        i = (a.length - 1) * 8;
        while (i < b)  {
            byte byte0;
            if (a(i))
                byte0 = 49;
            else
                byte0 = 48;
            bytearrayoutputstream.write(byte0);
            i++;
        }
        return new String(bytearrayoutputstream.toByteArray());
    }

    static  {
        byte abyte0[] = {
            48, 48, 48, 48
        };
        byte abyte1[] = {
            48, 48, 48, 49
        };
        byte abyte2[] = {
            48, 48, 49, 49
        };
        byte abyte3[] = {
            48, 49, 48, 48
        };
        byte abyte4[] = {
            48, 49, 49, 49
        };
        byte abyte5[] = {
            49, 48, 48, 48
        };
        byte abyte6[] = {
            49, 48, 48, 49
        };
        byte abyte7[] = {
            49, 49, 49, 49
        };
        c = (new byte[][] {
            abyte0, abyte1, new byte[] {
                48, 48, 49, 48
            }, abyte2, abyte3, new byte[] {
                48, 49, 48, 49
            }, new byte[] {
                48, 49, 49, 48
            }, abyte4, abyte5, abyte6, 
            new byte[] {
                49, 48, 49, 48
            }, new byte[] {
                49, 48, 49, 49
            }, new byte[] {
                49, 49, 48, 48
            }, new byte[] {
                49, 49, 48, 49
            }, new byte[] {
                49, 49, 49, 48
            }, abyte7
        });
    }
}
