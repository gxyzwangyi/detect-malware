// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package sun.security.util;

import java.io.PrintStream;
import java.math.BigInteger;
import java.security.AccessController;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import sun.security.a.b;

public class d {

    private static String b;
    private static final char c[];
    private String a;

    public d() {
    }

    public static String a(BigInteger biginteger) {
        biginteger = biginteger.toString(16);
        StringBuffer stringbuffer = new StringBuffer(biginteger.length() * 2);
        int i;
        Object obj;
        if (biginteger.startsWith("-")) {
            stringbuffer.append("   -");
            biginteger = biginteger.substring(1);
        } else {
            stringbuffer.append("    ");
        }
        obj = biginteger;
        if (biginteger.length() % 2 != 0)
            obj = (new StringBuilder()).append("0").append(biginteger).toString();
        i = 0;
        do {
            if (i >= ((String) (obj)).length())
                break;
            stringbuffer.append(((String) (obj)).substring(i, i + 2));
            int j = i + 2;
            i = j;
            if (j != ((String) (obj)).length())
                if (j % 64 == 0) {
                    stringbuffer.append("\n    ");
                    i = j;
                } else {
                    i = j;
                    if (j % 8 == 0) {
                        stringbuffer.append(" ");
                        i = j;
                    }
                }
        } while (true);
        return stringbuffer.toString();
    }

    public static d a(String s) {
        return a(s, s);
    }

    public static d a(String s, String s1) {
        if (b(s)) {
            s = new d();
            s.a = s1;
        } else {
            s = null;
        }
        return s;
    }

    public static void a() {
        System.err.println();
        System.err.println("all           turn on all debugging");
        System.err.println("access        print all checkPermission results");
        System.err.println("combiner      SubjectDomainCombiner debugging");
        System.err.println("gssloginconfig");
        System.err.println("configfile    JAAS ConfigFile loading");
        System.err.println("configparser  JAAS ConfigFile parsing");
        System.err.println("              GSS LoginConfigImpl debugging");
        System.err.println("jar           jar verification");
        System.err.println("logincontext  login context results");
        System.err.println("policy        loading and granting");
        System.err.println("provider      security provider debugging");
        System.err.println("scl           permissions SecureClassLoader assigns");
        System.err.println();
        System.err.println("The following can be used with access:");
        System.err.println();
        System.err.println("stack         include stack trace");
        System.err.println("domain        dump all domains in context");
        System.err.println("failure       before throwing exception, dump stack");
        System.err.println("              and domain that didn't have permission");
        System.err.println();
        System.err.println("The following can be used with stack and domain:");
        System.err.println();
        System.err.println("permission=<classname>");
        System.err.println("              only dump output if specified permission");
        System.err.println("              is being checked");
        System.err.println("codebase=<URL>");
        System.err.println("              only dump output if specified codebase");
        System.err.println("              is being checked");
        System.err.println();
        System.err.println("Note: Separate multiple options with a comma");
        System.exit(0);
    }

    public static boolean b(String s) {
        boolean flag1 = true;
        if (b != null) goto _L2; else goto _L1
_L1:
        boolean flag = false;
_L4:
        return flag;
_L2:
        flag = flag1;
        if (b.indexOf("all") == -1) {
            flag = flag1;
            if (b.indexOf(s) == -1)
                flag = false;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    private static String c(String s) {
        if (s != null) {
            StringBuffer stringbuffer = new StringBuffer();
            s = new StringBuffer(s);
            s = Pattern.compile((new StringBuilder()).append("[Pp][Ee][Rr][Mm][Ii][Ss][Ss][Ii][Oo][Nn]=").append("[a-zA-Z_$][a-zA-Z0-9_$]*([.][a-zA-Z_$][a-zA-Z0-9_$]*)*").toString()).matcher(s);
            Object obj = new StringBuffer();
            for (; s.find(); s.appendReplacement(((StringBuffer) (obj)), "")) {
                stringbuffer.append(s.group().replaceFirst("[Pp][Ee][Rr][Mm][Ii][Ss][Ss][Ii][Oo][Nn]=", "permission="));
                stringbuffer.append("  ");
            }

            s.appendTail(((StringBuffer) (obj)));
            obj = Pattern.compile((new StringBuilder()).append("[Cc][Oo][Dd][Ee][Bb][Aa][Ss][Ee]=").append("[^, ;]*").toString()).matcher(((CharSequence) (obj)));
            s = new StringBuffer();
            for (; ((Matcher) (obj)).find(); ((Matcher) (obj)).appendReplacement(s, "")) {
                stringbuffer.append(((Matcher) (obj)).group().replaceFirst("[Cc][Oo][Dd][Ee][Bb][Aa][Ss][Ee]=", "codebase="));
                stringbuffer.append("  ");
            }

            ((Matcher) (obj)).appendTail(s);
            stringbuffer.append(s.toString().toLowerCase());
            s = stringbuffer.toString();
        } else {
            s = null;
        }
        return s;
    }

    static  {
        String s;
        b = (String)AccessController.doPrivileged(new b("java.security.debug"));
        s = (String)AccessController.doPrivileged(new b("java.security.auth.debug"));
        if (b != null) goto _L2; else goto _L1
_L1:
        b = s;
_L4:
        if (b != null) {
            b = c(b);
            if (b.equals("help"))
                a();
        }
        c = "0123456789abcdef".toCharArray();
        return;
_L2:
        if (s != null)
            b = (new StringBuilder()).append(b).append(",").append(s).toString();
        if (true) goto _L4; else goto _L3
_L3:
    }
}
