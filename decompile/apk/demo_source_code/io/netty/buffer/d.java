// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.buffer;

import io.netty.util.IllegalReferenceCountException;
import io.netty.util.i;
import io.netty.util.internal.PlatformDependent;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;

// Referenced classes of package io.netty.buffer:
//            a, h

public abstract class d extends a {

    private static final AtomicIntegerFieldUpdater d;
    private volatile int e;

    protected d(int i) {
        super(i);
        e = 1;
    }

    public h A() {
        int i;
        do {
            i = e;
            if (i == 0)
                throw new IllegalReferenceCountException(0, 1);
            if (i == 0x7fffffff)
                throw new IllegalReferenceCountException(0x7fffffff, 1);
        } while (!d.compareAndSet(this, i, i + 1));
        return this;
    }

    public boolean B() {
        boolean flag = true;
        int i;
        do {
            i = e;
            if (i == 0)
                throw new IllegalReferenceCountException(0, -1);
        } while (!d.compareAndSet(this, i, i - 1));
        if (i == 1)
            D();
        else
            flag = false;
        return flag;
    }

    public i C() {
        return A();
    }

    protected abstract void D();

    protected final void w(int i) {
        e = i;
    }

    public int z() {
        return e;
    }

    static  {
        AtomicIntegerFieldUpdater atomicintegerfieldupdater1 = PlatformDependent.b(io/netty/buffer/d, "e");
        AtomicIntegerFieldUpdater atomicintegerfieldupdater = atomicintegerfieldupdater1;
        if (atomicintegerfieldupdater1 == null)
            atomicintegerfieldupdater = AtomicIntegerFieldUpdater.newUpdater(io/netty/buffer/d, "e");
        d = atomicintegerfieldupdater;
    }
}
