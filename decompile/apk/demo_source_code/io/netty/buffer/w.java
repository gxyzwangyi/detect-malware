// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.buffer;


// Referenced classes of package io.netty.buffer:
//            t

final class w {

    static final boolean f;
    final t a;
    w b;
    w c;
    boolean d;
    int e;
    private final int g;
    private final int h;
    private final int i;
    private final long j[];
    private int k;
    private int l;
    private int m;
    private int n;

    w(int i1) {
        a = null;
        g = -1;
        h = -1;
        e = -1;
        i = i1;
        j = null;
    }

    w(w w1, t t, int i1, int j1, int k1, int l1) {
        a = t;
        g = i1;
        h = j1;
        i = k1;
        j = new long[k1 >>> 10];
        a(w1, l1);
    }

    private int a(int i1, long l1) {
        int j1;
        int k1;
        k1 = k;
        j1 = 0;
_L3:
        if (j1 >= 64)
            break MISSING_BLOCK_LABEL_50;
        if ((1L & l1) != 0L) goto _L2; else goto _L1
_L1:
        i1 = j1 | i1 << 6;
        if (i1 >= k1)
            break MISSING_BLOCK_LABEL_50;
_L4:
        return i1;
_L2:
        l1 >>>= 1;
        j1++;
          goto _L3
        i1 = -1;
          goto _L4
    }

    private void a(int i1) {
        m = i1;
    }

    private void a(w w1) {
        if (!f && (b != null || c != null)) {
            throw new AssertionError();
        } else {
            b = w1;
            c = w1.c;
            c.b = this;
            w1.c = this;
            return;
        }
    }

    private long b(int i1) {
        return 0x0L | (long)i1 << 32 | (long)g;
    }

    private void b() {
        if (!f && (b == null || c == null)) {
            throw new AssertionError();
        } else {
            b.c = c;
            c.b = b;
            c = null;
            b = null;
            return;
        }
    }

    private int c() {
        int i1 = m;
        if (i1 >= 0)
            m = -1;
        else
            i1 = d();
        return i1;
    }

    private int d() {
        int i1;
        int j1;
        long al[];
        al = j;
        j1 = l;
        i1 = 0;
_L3:
        long l1;
        if (i1 >= j1)
            break MISSING_BLOCK_LABEL_48;
        l1 = al[i1];
        if ((-1L ^ l1) == 0L) goto _L2; else goto _L1
_L1:
        i1 = a(i1, l1);
_L4:
        return i1;
_L2:
        i1++;
          goto _L3
        i1 = -1;
          goto _L4
    }

    long a() {
        long l1;
        if (e == 0)
            l1 = b(0);
        else
        if (n == 0 || !d) {
            l1 = -1L;
        } else {
            int i1 = c();
            int j1 = i1 >>> 6;
            int k1 = i1 & 0x3f;
            if (!f && (j[j1] >>> k1 & 1L) != 0L)
                throw new AssertionError();
            long al[] = j;
            al[j1] = al[j1] | 1L << k1;
            j1 = n - 1;
            n = j1;
            if (j1 == 0)
                b();
            l1 = b(i1);
        }
        return l1;
    }

    void a(w w1, int i1) {
        boolean flag = false;
        d = true;
        e = i1;
        if (i1 != 0) {
            i1 = i / i1;
            n = i1;
            k = i1;
            m = 0;
            l = k >>> 6;
            i1 = ((flag) ? 1 : 0);
            if ((k & 0x3f) != 0) {
                l = l + 1;
                i1 = ((flag) ? 1 : 0);
            }
            for (; i1 < l; i1++)
                j[i1] = 0L;

        }
        a(w1);
    }

    boolean b(w w1, int i1) {
        boolean flag1 = true;
        if (e != 0) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        int j1 = i1 >>> 6;
        int k1 = i1 & 0x3f;
        if (!f && (j[j1] >>> k1 & 1L) == 0L)
            throw new AssertionError();
        long al[] = j;
        al[j1] = al[j1] ^ 1L << k1;
        a(i1);
        i1 = n;
        n = i1 + 1;
        if (i1 == 0) {
            a(w1);
            flag = flag1;
        } else {
            flag = flag1;
            if (n == k) {
                flag = flag1;
                if (b != c) {
                    d = false;
                    b();
                    flag = false;
                }
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public String toString() {
        String s;
        if (!d)
            s = (new StringBuilder()).append("(").append(g).append(": not in use)").toString();
        else
            s = (new StringBuilder()).append(String.valueOf('(')).append(g).append(": ").append(k - n).append('/').append(k).append(", offset: ").append(h).append(", length: ").append(i).append(", elemSize: ").append(e).append(')').toString();
        return s;
    }

    static  {
        boolean flag;
        if (!io/netty/buffer/w.desiredAssertionStatus())
            flag = true;
        else
            flag = false;
        f = flag;
    }
}
