// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.buffer;

import io.netty.util.Recycler;
import io.netty.util.concurrent.l;
import io.netty.util.e;
import io.netty.util.internal.PlatformDependent;
import io.netty.util.internal.logging.b;
import io.netty.util.internal.logging.c;
import io.netty.util.internal.n;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.nio.charset.CharacterCodingException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.CoderResult;
import java.util.Locale;

// Referenced classes of package io.netty.buffer:
//            al, z, i, h, 
//            l, am, ao

public final class m {
    private static final class a {

        private static final char a[];
        private static final char b[];
        private static final String c[];
        private static final String d[];
        private static final String e[];
        private static final String f[];

        static String a(h h1, int j, int k) {
            return b(h1, j, k);
        }

        private static String b(h h1, int j, int k) {
            if (k < 0)
                throw new IllegalArgumentException((new StringBuilder()).append("length: ").append(k).toString());
            if (k == 0) {
                h1 = "";
            } else {
                char ac[] = new char[k << 1];
                int j1 = 0;
                for (int i1 = j; i1 < j + k;) {
                    System.arraycopy(b, h1.h(i1) << 1, ac, j1, 2);
                    i1++;
                    j1 += 2;
                }

                h1 = new String(ac);
            }
            return h1;
        }

        static  {
            boolean flag = false;
            a = new char[256];
            b = new char[1024];
            c = new String[16];
            d = new String[4096];
            e = new String[256];
            f = new String[16];
            char ac[] = "0123456789abcdef".toCharArray();
            for (int j = 0; j < 256; j++) {
                b[j << 1] = ac[j >>> 4 & 0xf];
                b[(j << 1) + 1] = ac[j & 0xf];
            }

            for (int k = 0; k < c.length; k++) {
                int j2 = c.length - k;
                StringBuilder stringbuilder = new StringBuilder(j2 * 3);
                for (int l1 = 0; l1 < j2; l1++)
                    stringbuilder.append("   ");

                c[k] = stringbuilder.toString();
            }

            for (int i1 = 0; i1 < d.length; i1++) {
                StringBuilder stringbuilder1 = new StringBuilder(12);
                stringbuilder1.append(io.netty.util.internal.m.a);
                stringbuilder1.append(Long.toHexString((long)(i1 << 4) & 0xffffffffL | 0x0L));
                stringbuilder1.setCharAt(stringbuilder1.length() - 9, '|');
                stringbuilder1.append('|');
                d[i1] = stringbuilder1.toString();
            }

            for (int j1 = 0; j1 < e.length; j1++)
                e[j1] = (new StringBuilder()).append(' ').append(io.netty.util.internal.m.a(j1)).toString();

            int k1 = 0;
            int i2;
            do {
                i2 = ((flag) ? 1 : 0);
                if (k1 >= f.length)
                    break;
                int k2 = f.length - k1;
                StringBuilder stringbuilder2 = new StringBuilder(k2);
                for (i2 = 0; i2 < k2; i2++)
                    stringbuilder2.append(' ');

                f[k1] = stringbuilder2.toString();
                k1++;
            } while (true);
            while (i2 < a.length)  {
                if (i2 <= 31 || i2 >= 127)
                    a[i2] = '.';
                else
                    a[i2] = (char)i2;
                i2++;
            }
        }
    }

    static final class b extends am {

        private static final Recycler d = new Recycler() {

            protected b a(io.netty.util.Recycler.b b1) {
                return new b(b1);
            }

            protected Object b(io.netty.util.Recycler.b b1) {
                return a(b1);
            }

        }
;
        private final io.netty.util.Recycler.b e;

        static b E() {
            b b1 = (b)d.a();
            b1.w(1);
            return b1;
        }

        protected void D() {
            if (H() > io.netty.buffer.m.b()) {
                super.D();
            } else {
                d();
                d.a(this, e);
            }
        }


        private b(io.netty.util.Recycler.b b1) {
            super(io.netty.buffer.al.b, 256, 0x7fffffff);
            e = b1;
        }

    }

    static final class c extends ao {

        private static final Recycler e = new Recycler() {

            protected c a(io.netty.util.Recycler.b b1) {
                return new c(b1);
            }

            protected Object b(io.netty.util.Recycler.b b1) {
                return a(b1);
            }

        }
;
        private final io.netty.util.Recycler.b f;

        static c E() {
            c c1 = (c)e.a();
            c1.w(1);
            return c1;
        }

        protected void D() {
            if (H() > io.netty.buffer.m.b()) {
                super.D();
            } else {
                d();
                e.a(this, f);
            }
        }


        private c(io.netty.util.Recycler.b b1) {
            super(io.netty.buffer.al.b, 256, 0x7fffffff);
            f = b1;
        }

    }


    static final i a;
    private static final io.netty.util.internal.logging.b b;
    private static final l c = new l() {

        protected CharBuffer a() {
            return CharBuffer.allocate(1024);
        }

        protected Object b() {
            return a();
        }

    }
;
    private static final int d;
    private static final int e;
    private static final int f;
    private static final io.netty.buffer.l g = new io.netty.buffer.l() {

        public boolean a(byte byte0) {
            boolean flag;
            if (byte0 >= 0)
                flag = true;
            else
                flag = false;
            return flag;
        }

    }
;

    private m() {
    }

    public static int a(int j) {
        return Integer.reverseBytes(j);
    }

    public static long a(long l1) {
        return Long.reverseBytes(l1);
    }

    public static h a() {
        Object obj;
        if (e <= 0)
            obj = null;
        else
        if (PlatformDependent.f())
            obj = c.E();
        else
            obj = b.E();
        return ((h) (obj));
    }

    static h a(i j, boolean flag, CharBuffer charbuffer, Charset charset) {
        charset = io.netty.util.e.a(charset);
        int k = (int)((double)charbuffer.remaining() * (double)charset.maxBytesPerChar());
        int i1;
        ByteBuffer bytebuffer;
        if (flag)
            j = j.c(k);
        else
            j = j.a(k);
        bytebuffer = j.m(0, k);
        i1 = bytebuffer.position();
        charbuffer = charset.encode(charbuffer, bytebuffer, true);
        if (!charbuffer.isUnderflow())
            charbuffer.throwException();
        charbuffer = charset.flush(bytebuffer);
        if (!charbuffer.isUnderflow())
            charbuffer.throwException();
        k = j.c();
        j.c((bytebuffer.position() + k) - i1);
        return j;
        charbuffer;
        charset = JVM INSTR new #210 <Class IllegalStateException>;
        charset.IllegalStateException(charbuffer);
        throw charset;
        charbuffer;
        j.B();
        throw charbuffer;
    }

    public static String a(h h1) {
        return a(h1, h1.b(), h1.f());
    }

    public static String a(h h1, int j, int k) {
        return a.a(h1, j, k);
    }

    static String a(h h1, int j, int k, Charset charset) {
        if (k != 0) goto _L2; else goto _L1
_L1:
        h1 = "";
_L4:
        return h1;
_L2:
        CharsetDecoder charsetdecoder;
        charsetdecoder = io.netty.util.e.b(charset);
        int i1 = (int)((double)k * (double)charsetdecoder.maxCharsPerByte());
        charset = (CharBuffer)c.d();
        if (charset.length() < i1) {
            CharBuffer charbuffer = CharBuffer.allocate(i1);
            charset = charbuffer;
            if (i1 <= d) {
                c.b(charbuffer);
                charset = charbuffer;
            }
        } else {
            charset.clear();
        }
        if (h1.h_() != 1)
            break; /* Loop/switch isn't completed */
        a(charsetdecoder, h1.m(j, k), ((CharBuffer) (charset)));
_L5:
        h1 = charset.flip().toString();
        if (true) goto _L4; else goto _L3
_L3:
        h h2 = h1.I().c(k);
        h2.a(h1, j, k);
        a(charsetdecoder, h2.m(0, k), ((CharBuffer) (charset)));
        h2.B();
          goto _L5
        h1;
        h2.B();
        throw h1;
    }

    public static short a(short word0) {
        return Short.reverseBytes(word0);
    }

    private static void a(CharsetDecoder charsetdecoder, ByteBuffer bytebuffer, CharBuffer charbuffer) {
        try {
            bytebuffer = charsetdecoder.decode(bytebuffer, charbuffer, true);
            if (!bytebuffer.isUnderflow())
                bytebuffer.throwException();
            charsetdecoder = charsetdecoder.flush(charbuffer);
            if (!charsetdecoder.isUnderflow())
                charsetdecoder.throwException();
            return;
        }
        // Misplaced declaration of an exception variable
        catch (CharsetDecoder charsetdecoder) {
            throw new IllegalStateException(charsetdecoder);
        }
    }

    public static boolean a(h h1, h h2) {
        int k2 = h1.f();
        if (k2 == h2.f()) goto _L2; else goto _L1
_L1:
        boolean flag = false;
_L4:
        return flag;
_L2:
        int j = k2 >>> 3;
        int k = h1.b();
        int l1 = h2.b();
        if (h1.J() == h2.J()) {
            int i2 = j;
            int i1 = k;
            do {
                j = l1;
                k = i1;
                if (i2 <= 0)
                    break;
                if (h1.o(i1) != h2.o(l1)) {
                    flag = false;
                    continue; /* Loop/switch isn't completed */
                }
                i2--;
                l1 += 8;
                i1 += 8;
            } while (true);
        } else {
            int j2 = j;
            int j1 = k;
            do {
                j = l1;
                k = j1;
                if (j2 <= 0)
                    break;
                if (h1.o(j1) != a(h2.o(l1))) {
                    flag = false;
                    continue; /* Loop/switch isn't completed */
                }
                j2--;
                l1 += 8;
                j1 += 8;
            } while (true);
        }
        l1 = k2 & 7;
        int k1 = k;
        k = l1;
        do {
            if (k <= 0)
                break;
            if (h1.f(k1) != h2.f(j)) {
                flag = false;
                continue; /* Loop/switch isn't completed */
            }
            k1++;
            j++;
            k--;
        } while (true);
        flag = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    static int b() {
        return e;
    }

    public static int b(h h1) {
        int j2 = h1.f();
        int i2 = j2 >>> 2;
        int k1 = h1.b();
        int j1;
        int l1;
        if (h1.J() == ByteOrder.BIG_ENDIAN) {
            int j = 1;
            do {
                l1 = k1;
                j1 = j;
                if (i2 <= 0)
                    break;
                j1 = h1.l(k1);
                i2--;
                k1 += 4;
                j = j1 + j * 31;
            } while (true);
        } else {
            int k = 1;
            do {
                l1 = k1;
                j1 = k;
                if (i2 <= 0)
                    break;
                j1 = a(h1.l(k1));
                i2--;
                k1 += 4;
                k = j1 + k * 31;
            } while (true);
        }
        int i1 = j1;
        k1 = j2 & 3;
        for (j1 = l1; k1 > 0; j1++) {
            byte byte0 = h1.f(j1);
            k1--;
            i1 = byte0 + i1 * 31;
        }

        j1 = i1;
        if (i1 == 0)
            j1 = 1;
        return j1;
    }

    public static int b(h h1, h h2) {
        int j;
        int k;
        int j1;
        int i2;
        int j2;
        int k2;
        i2 = h1.f();
        j2 = h2.f();
        k2 = Math.min(i2, j2);
        j = k2 >>> 2;
        k = h1.b();
        j1 = h2.b();
        if (h1.J() != h2.J()) goto _L2; else goto _L1
_L1:
        int l1 = j;
_L5:
        int i1;
        j = j1;
        i1 = k;
        if (l1 <= 0) goto _L4; else goto _L3
_L3:
        long l2 = h1.n(k);
        long l4 = h2.n(j1);
        if (l2 > l4) {
            j = 1;
        } else {
label0:
            {
                if (l2 >= l4)
                    break label0;
                j = -1;
            }
        }
_L7:
        return j;
        l1--;
        j1 += 4;
        k += 4;
          goto _L5
_L2:
        l1 = j;
_L8:
        j = j1;
        i1 = k;
        if (l1 <= 0) goto _L4; else goto _L6
_L6:
        long l3 = h1.n(k);
        long l5 = (long)a(h2.l(j1)) & 0xffffffffL;
        if (l3 > l5) {
            j = 1;
        } else {
label1:
            {
                if (l3 >= l5)
                    break label1;
                j = -1;
            }
        }
          goto _L7
        l1--;
        j1 += 4;
        k += 4;
          goto _L8
_L4:
        k = i1;
        i1 = j;
        int k1 = k2 & 3;
        j = k;
        k = k1;
_L9:
        if (k <= 0)
            break MISSING_BLOCK_LABEL_261;
        short word0 = h1.h(j);
        short word1 = h2.h(i1);
        if (word0 > word1) {
            j = 1;
        } else {
label2:
            {
                if (word0 >= word1)
                    break label2;
                j = -1;
            }
        }
          goto _L7
        j++;
        i1++;
        k--;
          goto _L9
        j = i2 - j2;
          goto _L7
    }

    static  {
        b = io.netty.util.internal.logging.c.a(io/netty/buffer/m);
        f = (int)io.netty.util.e.a(e.d).maxBytesPerChar();
        String s = n.a("io.netty.allocator.type", "unpooled").toLowerCase(Locale.US).trim();
        Object obj;
        if ("unpooled".equals(s)) {
            obj = io.netty.buffer.al.b;
            b.b("-Dio.netty.allocator.type: {}", s);
        } else
        if ("pooled".equals(s)) {
            obj = io.netty.buffer.z.b;
            b.b("-Dio.netty.allocator.type: {}", s);
        } else {
            obj = io.netty.buffer.al.b;
            b.b("-Dio.netty.allocator.type: unpooled (unknown: {})", s);
        }
        a = ((i) (obj));
        e = n.a("io.netty.threadLocalDirectBufferSize", 0x10000);
        b.b("-Dio.netty.threadLocalDirectBufferSize: {}", Integer.valueOf(e));
        d = n.a("io.netty.maxThreadLocalCharBufferSize", 16384);
        b.b("-Dio.netty.maxThreadLocalCharBufferSize: {}", Integer.valueOf(d));
    }
}
