// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.buffer;

import io.netty.util.concurrent.l;
import io.netty.util.internal.PlatformDependent;
import io.netty.util.internal.logging.b;
import io.netty.util.internal.logging.c;
import io.netty.util.internal.n;
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

// Referenced classes of package io.netty.buffer:
//            b, PoolArena, x, an, 
//            as, am, h

public class z extends io.netty.buffer.b {
    final class a extends l {

        final z a;

        private PoolArena a(PoolArena apoolarena[]) {
            if (apoolarena != null && apoolarena.length != 0) goto _L2; else goto _L1
_L1:
            PoolArena poolarena1 = null;
_L4:
            return poolarena1;
_L2:
            PoolArena poolarena = apoolarena[0];
            int i1 = 1;
            do {
                poolarena1 = poolarena;
                if (i1 >= apoolarena.length)
                    continue;
                PoolArena poolarena2 = apoolarena[i1];
                poolarena1 = poolarena;
                if (poolarena2.h.get() < poolarena.h.get())
                    poolarena1 = poolarena2;
                i1++;
                poolarena = poolarena1;
            } while (true);
            if (true) goto _L4; else goto _L3
_L3:
        }

        protected x a() {
            this;
            JVM INSTR monitorenter ;
            x x1 = new x(a(z.a(a)), a(io.netty.buffer.z.b(a)), io.netty.buffer.z.c(a), z.d(a), z.e(a), z.f(), z.g());
            this;
            JVM INSTR monitorexit ;
            return x1;
            Exception exception;
            exception;
            throw exception;
        }

        protected void a(x x1) {
            x1.a();
        }

        protected volatile void a(Object obj) {
            a((x)obj);
        }

        protected Object b() {
            return a();
        }

        a() {
            a = z.this;
            super();
        }
    }


    public static final z b = new z(PlatformDependent.h());
    private static final b c;
    private static final int d;
    private static final int e;
    private static final int f;
    private static final int g;
    private static final int h;
    private static final int i;
    private static final int j;
    private static final int k;
    private static final int l;
    private final PoolArena m[];
    private final PoolArena n[];
    private final int o;
    private final int p;
    private final int q;
    private final List r;
    private final List s;
    private final a t;

    public z() {
        this(false);
    }

    public z(boolean flag) {
        this(flag, d, e, f, g);
    }

    public z(boolean flag, int i1, int j1, int k1, int l1) {
        this(flag, i1, j1, k1, l1, h, i, j);
    }

    public z(boolean flag, int i1, int j1, int k1, int l1, int i2, int j2, 
            int k2) {
        super(flag);
        t = new a();
        o = i2;
        p = j2;
        q = k2;
        j2 = f(k1, l1);
        if (i1 < 0)
            throw new IllegalArgumentException((new StringBuilder()).append("nHeapArena: ").append(i1).append(" (expected: >= 0)").toString());
        if (j1 < 0)
            throw new IllegalArgumentException((new StringBuilder()).append("nDirectArea: ").append(j1).append(" (expected: >= 0)").toString());
        i2 = i(k1);
        if (i1 > 0) {
            m = h(i1);
            ArrayList arraylist1 = new ArrayList(m.length);
            for (i1 = 0; i1 < m.length; i1++) {
                PoolArena.b b1 = new PoolArena.b(this, k1, l1, i2, j2);
                m[i1] = b1;
                arraylist1.add(b1);
            }

            r = Collections.unmodifiableList(arraylist1);
        } else {
            m = null;
            r = Collections.emptyList();
        }
        if (j1 > 0) {
            n = h(j1);
            ArrayList arraylist = new ArrayList(n.length);
            for (i1 = 0; i1 < n.length; i1++) {
                PoolArena.a a1 = new PoolArena.a(this, k1, l1, i2, j2);
                n[i1] = a1;
                arraylist.add(a1);
            }

            s = Collections.unmodifiableList(arraylist);
        } else {
            n = null;
            s = Collections.emptyList();
        }
    }

    static PoolArena[] a(z z1) {
        return z1.m;
    }

    static PoolArena[] b(z z1) {
        return z1.n;
    }

    static int c(z z1) {
        return z1.o;
    }

    static int d(z z1) {
        return z1.p;
    }

    static int e(z z1) {
        return z1.q;
    }

    static int f() {
        return k;
    }

    private static int f(int i1, int j1) {
        if (j1 > 14)
            throw new IllegalArgumentException((new StringBuilder()).append("maxOrder: ").append(j1).append(" (expected: 0-14)").toString());
        int l1 = j1;
        int k1 = i1;
        for (; l1 > 0; l1--) {
            if (k1 > 0x20000000)
                throw new IllegalArgumentException(String.format("pageSize (%d) << maxOrder (%d) must not exceed %d", new Object[] {
                    Integer.valueOf(i1), Integer.valueOf(j1), Integer.valueOf(0x40000000)
                }));
            k1 <<= 1;
        }

        return k1;
    }

    static int g() {
        return l;
    }

    private static PoolArena[] h(int i1) {
        return new PoolArena[i1];
    }

    private static int i(int i1) {
        if (i1 < 4096)
            throw new IllegalArgumentException((new StringBuilder()).append("pageSize: ").append(i1).append(" (expected: ").append(4096).append(")").toString());
        if ((i1 - 1 & i1) != 0)
            throw new IllegalArgumentException((new StringBuilder()).append("pageSize: ").append(i1).append(" (expected: power of 2)").toString());
        else
            return 31 - Integer.numberOfLeadingZeros(i1);
    }

    protected h d(int i1, int j1) {
        Object obj = (x)t.d();
        PoolArena poolarena = ((x) (obj)).a;
        if (poolarena != null)
            obj = poolarena.a(((x) (obj)), i1, j1);
        else
            obj = new an(this, i1, j1);
        return a(((h) (obj)));
    }

    public boolean d() {
        boolean flag;
        if (n != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    protected h e(int i1, int j1) {
        Object obj = (x)t.d();
        PoolArena poolarena = ((x) (obj)).b;
        if (poolarena != null)
            obj = poolarena.a(((x) (obj)), i1, j1);
        else
        if (PlatformDependent.f())
            obj = as.a(this, i1, j1);
        else
            obj = new am(this, i1, j1);
        return a(((h) (obj)));
    }

    final x e() {
        return (x)t.d();
    }

    static  {
        c = io.netty.util.internal.logging.c.a(io/netty/buffer/z);
        int i1 = io.netty.util.internal.n.a("io.netty.allocator.pageSize", 8192);
        Throwable throwable = null;
        int j1;
        Throwable throwable1;
        Runtime runtime;
        try {
            i(i1);
        }
        // Misplaced declaration of an exception variable
        catch (Throwable throwable) {
            i1 = 8192;
        }
        f = i1;
        i1 = io.netty.util.internal.n.a("io.netty.allocator.maxOrder", 11);
        throwable1 = null;
        try {
            f(f, i1);
        }
        // Misplaced declaration of an exception variable
        catch (Throwable throwable1) {
            i1 = 11;
        }
        g = i1;
        runtime = Runtime.getRuntime();
        j1 = runtime.availableProcessors() * 2;
        i1 = f << g;
        d = Math.max(0, io.netty.util.internal.n.a("io.netty.allocator.numHeapArenas", (int)Math.min(j1, runtime.maxMemory() / (long)i1 / 2L / 3L)));
        e = Math.max(0, io.netty.util.internal.n.a("io.netty.allocator.numDirectArenas", (int)Math.min(j1, PlatformDependent.i() / (long)i1 / 2L / 3L)));
        h = io.netty.util.internal.n.a("io.netty.allocator.tinyCacheSize", 512);
        i = io.netty.util.internal.n.a("io.netty.allocator.smallCacheSize", 256);
        j = io.netty.util.internal.n.a("io.netty.allocator.normalCacheSize", 64);
        k = io.netty.util.internal.n.a("io.netty.allocator.maxCachedBufferCapacity", 32768);
        l = io.netty.util.internal.n.a("io.netty.allocator.cacheTrimInterval", 8192);
        if (c.b()) {
            c.b("-Dio.netty.allocator.numHeapArenas: {}", Integer.valueOf(d));
            c.b("-Dio.netty.allocator.numDirectArenas: {}", Integer.valueOf(e));
            if (throwable == null)
                c.b("-Dio.netty.allocator.pageSize: {}", Integer.valueOf(f));
            else
                c.b("-Dio.netty.allocator.pageSize: {}", Integer.valueOf(f), throwable);
            if (throwable1 == null)
                c.b("-Dio.netty.allocator.maxOrder: {}", Integer.valueOf(g));
            else
                c.b("-Dio.netty.allocator.maxOrder: {}", Integer.valueOf(g), throwable1);
            c.b("-Dio.netty.allocator.chunkSize: {}", Integer.valueOf(f << g));
            c.b("-Dio.netty.allocator.tinyCacheSize: {}", Integer.valueOf(h));
            c.b("-Dio.netty.allocator.smallCacheSize: {}", Integer.valueOf(i));
            c.b("-Dio.netty.allocator.normalCacheSize: {}", Integer.valueOf(j));
            c.b("-Dio.netty.allocator.maxCachedBufferCapacity: {}", Integer.valueOf(k));
            c.b("-Dio.netty.allocator.cacheTrimInterval: {}", Integer.valueOf(l));
        }
    }
}
