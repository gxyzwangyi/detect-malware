// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.buffer;

import io.netty.util.Recycler;
import io.netty.util.internal.PlatformDependent;
import io.netty.util.internal.h;
import io.netty.util.internal.logging.b;
import io.netty.util.internal.logging.c;
import io.netty.util.l;
import java.util.Queue;
import java.util.concurrent.atomic.AtomicInteger;

// Referenced classes of package io.netty.buffer:
//            PoolArena, y, t

final class x {
    private static abstract class a {

        private static final Recycler e = new Recycler() {

            protected a.a a(io.netty.util.Recycler.b b1) {
                return new a.a(b1);
            }

            protected Object b(io.netty.util.Recycler.b b1) {
                return a(b1);
            }

        }
;
        private final int a;
        private final Queue b;
        private final PoolArena.SizeClass c;
        private int d;

        private int a(int i1) {
            int j1 = 0;
            do {
                if (j1 >= i1)
                    break;
                a a1 = (a)b.poll();
                if (a1 == null)
                    break;
                a(a1);
                j1++;
            } while (true);
            return j1;
        }

        private void a(a a1) {
            t t1 = a1.b;
            long l1 = a1.c;
            a1.a();
            t1.a.a(t1, l1, c);
        }

        private static a b(t t1, long l1) {
            a a1 = (a)e.a();
            a1.b = t1;
            a1.c = l1;
            return a1;
        }

        static Recycler c() {
            return e;
        }

        public final int a() {
            return a(0x7fffffff);
        }

        protected abstract void a(t t1, long l1, y y, int i1);

        public final boolean a(t t1, long l1) {
            t1 = b(t1, l1);
            boolean flag = b.offer(t1);
            if (!flag)
                t1.a();
            return flag;
        }

        public final boolean a(y y, int i1) {
            a a1 = (a)b.poll();
            boolean flag;
            if (a1 == null) {
                flag = false;
            } else {
                a(a1.b, a1.c, y, i1);
                a1.a();
                d = d + 1;
                flag = true;
            }
            return flag;
        }

        public final void b() {
            int i1 = a - d;
            d = 0;
            if (i1 > 0)
                a(i1);
        }


        a(int i1, PoolArena.SizeClass sizeclass) {
            a = io.netty.util.internal.h.a(i1);
            b = PlatformDependent.c(a);
            c = sizeclass;
        }
    }

    static final class a.a {

        final io.netty.util.Recycler.b a;
        t b;
        long c;

        void a() {
            b = null;
            c = -1L;
            io.netty.buffer.a.c().a(this, a);
        }

        a.a(io.netty.util.Recycler.b b1) {
            c = -1L;
            a = b1;
        }
    }

    private static final class b extends a {

        protected void a(t t1, long l1, y y, int i1) {
            t1.a(y, l1, i1);
        }

        b(int i1) {
            super(i1, io.netty.buffer.PoolArena.SizeClass.c);
        }
    }

    private static final class c extends a {

        protected void a(t t1, long l1, y y, int i1) {
            t1.b(y, l1, i1);
        }

        c(int i1, PoolArena.SizeClass sizeclass) {
            super(i1, sizeclass);
        }
    }


    private static final io.netty.util.internal.logging.b c = io.netty.util.internal.logging.c.a(io/netty/buffer/x);
    final PoolArena a;
    final PoolArena b;
    private final a d[];
    private final a e[];
    private final a f[];
    private final a g[];
    private final a h[];
    private final a i[];
    private final int j;
    private final int k;
    private final int l;
    private int m;
    private final Thread n = Thread.currentThread();
    private final Runnable o = new Runnable() {

        final x a;

        public void run() {
            x.a(a);
        }

             {
                a = x.this;
                super();
            }
    }
;

    x(PoolArena poolarena, PoolArena poolarena1, int i1, int j1, int k1, int l1, int i2) {
        if (l1 < 0)
            throw new IllegalArgumentException((new StringBuilder()).append("maxCachedBufferCapacity: ").append(l1).append(" (expected: >= 0)").toString());
        if (i2 < 1)
            throw new IllegalArgumentException((new StringBuilder()).append("freeSweepAllocationThreshold: ").append(i2).append(" (expected: > 0)").toString());
        l = i2;
        a = poolarena;
        b = poolarena1;
        if (poolarena1 != null) {
            f = a(i1, 32, PoolArena.SizeClass.a);
            g = a(j1, poolarena1.g, io.netty.buffer.PoolArena.SizeClass.b);
            j = a(poolarena1.c);
            i = a(k1, l1, poolarena1);
            poolarena1.h.getAndIncrement();
        } else {
            f = null;
            g = null;
            i = null;
            j = -1;
        }
        if (poolarena != null) {
            d = a(i1, 32, PoolArena.SizeClass.a);
            e = a(j1, poolarena.g, io.netty.buffer.PoolArena.SizeClass.b);
            k = a(poolarena.c);
            h = a(k1, l1, poolarena);
            poolarena.h.getAndIncrement();
        } else {
            d = null;
            e = null;
            h = null;
            k = -1;
        }
        io.netty.util.l.a(n, o);
    }

    private static int a(int i1) {
        boolean flag = false;
        int j1 = i1;
        for (i1 = ((flag) ? 1 : 0); j1 > 1; i1++)
            j1 >>= 1;

        return i1;
    }

    private static int a(a a1) {
        int i1;
        if (a1 == null)
            i1 = 0;
        else
            i1 = a1.a();
        return i1;
    }

    private static int a(a aa[]) {
        int i1;
        int k1;
        i1 = 0;
        k1 = 0;
        if (aa != null) goto _L2; else goto _L1
_L1:
        return k1;
_L2:
        int l1 = aa.length;
        int j1 = 0;
        do {
            k1 = i1;
            if (j1 >= l1)
                continue;
            k1 = a(aa[j1]);
            j1++;
            i1 = k1 + i1;
        } while (true);
        if (true) goto _L1; else goto _L3
_L3:
    }

    private a a(PoolArena poolarena, int i1) {
        i1 = PoolArena.a(i1);
        if (poolarena.a())
            poolarena = a(f, i1);
        else
            poolarena = a(d, i1);
        return poolarena;
    }

    private a a(PoolArena poolarena, int i1, PoolArena.SizeClass sizeclass) {
        static class _cls2 {

            static final int a[];

            static  {
                a = new int[PoolArena.SizeClass.values().length];
                NoSuchFieldError nosuchfielderror;
                try {
                    a[io.netty.buffer.PoolArena.SizeClass.c.ordinal()] = 1;
                }
                catch (NoSuchFieldError nosuchfielderror2) { }
                try {
                    a[io.netty.buffer.PoolArena.SizeClass.b.ordinal()] = 2;
                }
                catch (NoSuchFieldError nosuchfielderror1) { }
                a[PoolArena.SizeClass.a.ordinal()] = 3;
_L2:
                return;
                nosuchfielderror;
                if (true) goto _L2; else goto _L1
_L1:
            }
        }

        _cls2.a[sizeclass.ordinal()];
        JVM INSTR tableswitch 1 3: default 36
    //                   1 44
    //                   2 53
    //                   3 63;
           goto _L1 _L2 _L3 _L4
_L1:
        throw new Error();
_L2:
        poolarena = c(poolarena, i1);
_L6:
        return poolarena;
_L3:
        poolarena = b(poolarena, i1);
        continue; /* Loop/switch isn't completed */
_L4:
        poolarena = a(poolarena, i1);
        if (true) goto _L6; else goto _L5
_L5:
    }

    private static a a(a aa[], int i1) {
        if (aa == null || i1 > aa.length - 1)
            aa = null;
        else
            aa = aa[i1];
        return aa;
    }

    static void a(x x1) {
        x1.c();
    }

    private boolean a(a a1, y y, int i1) {
        boolean flag = false;
        if (a1 != null) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        flag = a1.a(y, i1);
        i1 = m + 1;
        m = i1;
        if (i1 >= l) {
            m = 0;
            b();
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    private static a[] a(int i1, int j1, PoolArena.SizeClass sizeclass) {
        if (i1 > 0) {
            a aa[] = new a[j1];
            for (j1 = 0; j1 < aa.length; j1++)
                aa[j1] = new c(i1, sizeclass);

            sizeclass = aa;
        } else {
            sizeclass = null;
        }
        return sizeclass;
    }

    private static a[] a(int i1, int j1, PoolArena poolarena) {
        if (i1 > 0) {
            poolarena = new a[Math.max(1, a(Math.min(poolarena.e, j1) / poolarena.c) + 1)];
            for (j1 = 0; j1 < poolarena.length; j1++)
                poolarena[j1] = new b(i1);

        } else {
            poolarena = null;
        }
        return poolarena;
    }

    private a b(PoolArena poolarena, int i1) {
        i1 = io.netty.buffer.PoolArena.b(i1);
        if (poolarena.a())
            poolarena = a(g, i1);
        else
            poolarena = a(e, i1);
        return poolarena;
    }

    private static void b(a a1) {
        if (a1 != null)
            a1.b();
    }

    private static void b(a aa[]) {
        if (aa != null) {
            int j1 = aa.length;
            int i1 = 0;
            while (i1 < j1)  {
                b(aa[i1]);
                i1++;
            }
        }
    }

    private a c(PoolArena poolarena, int i1) {
        if (poolarena.a()) {
            i1 = a(i1 >> j);
            poolarena = a(i, i1);
        } else {
            i1 = a(i1 >> k);
            poolarena = a(h, i1);
        }
        return poolarena;
    }

    private void c() {
        int i1 = a(f) + a(g) + a(i) + a(d) + a(e) + a(h);
        if (i1 > 0 && c.b())
            c.b("Freed {} thread-local buffer(s) from thread: {}", Integer.valueOf(i1), n.getName());
        if (b != null)
            b.h.getAndDecrement();
        if (a != null)
            a.h.getAndDecrement();
    }

    void a() {
        io.netty.util.l.b(n, o);
        c();
    }

    boolean a(PoolArena poolarena, t t, long l1, int i1, PoolArena.SizeClass sizeclass) {
        poolarena = a(poolarena, i1, sizeclass);
        boolean flag;
        if (poolarena == null)
            flag = false;
        else
            flag = poolarena.a(t, l1);
        return flag;
    }

    boolean a(PoolArena poolarena, y y, int i1, int j1) {
        return a(a(poolarena, j1), y, i1);
    }

    void b() {
        b(f);
        b(g);
        b(i);
        b(d);
        b(e);
        b(h);
    }

    boolean b(PoolArena poolarena, y y, int i1, int j1) {
        return a(b(poolarena, j1), y, i1);
    }

    boolean c(PoolArena poolarena, y y, int i1, int j1) {
        return a(c(poolarena, j1), y, i1);
    }

}
