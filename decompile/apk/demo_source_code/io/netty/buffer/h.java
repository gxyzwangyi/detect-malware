// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.buffer;

import io.netty.util.i;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.channels.GatheringByteChannel;
import java.nio.channels.ScatteringByteChannel;
import java.nio.charset.Charset;

// Referenced classes of package io.netty.buffer:
//            i, l

public abstract class h
    implements i, Comparable {

    public h() {
    }

    public abstract h A();

    public i C() {
        return A();
    }

    public abstract int H();

    public abstract io.netty.buffer.i I();

    public abstract ByteOrder J();

    public abstract h K();

    public abstract boolean L();

    public abstract boolean M();

    public abstract byte[] N();

    public abstract int O();

    public abstract boolean P();

    public abstract long Q();

    public abstract int a();

    public abstract int a(int j, GatheringByteChannel gatheringbytechannel, int i1);

    public abstract int a(int j, ScatteringByteChannel scatteringbytechannel, int i1);

    public abstract int a(int j, boolean flag);

    public abstract int a(l l1);

    public abstract int a(GatheringByteChannel gatheringbytechannel, int j);

    public abstract int a(ScatteringByteChannel scatteringbytechannel, int j);

    public abstract h a(int j);

    public abstract h a(int j, int i1);

    public abstract h a(int j, long l1);

    public abstract h a(int j, h h1, int i1, int j1);

    public abstract h a(int j, ByteBuffer bytebuffer);

    public abstract h a(int j, byte abyte0[]);

    public abstract h a(int j, byte abyte0[], int i1, int j1);

    public abstract h a(h h1);

    public abstract h a(h h1, int j, int i1);

    public abstract h a(ByteBuffer bytebuffer);

    public abstract h a(ByteOrder byteorder);

    public abstract h a(byte abyte0[]);

    public abstract h a(byte abyte0[], int j, int i1);

    public abstract String a(Charset charset);

    public abstract h a_(int j, int i1);

    public abstract int b();

    public abstract int b(h h1);

    public abstract h b(int j);

    public abstract h b(int j, int i1);

    public abstract h b(int j, h h1, int i1, int j1);

    public abstract h b(int j, ByteBuffer bytebuffer);

    public abstract h b(int j, byte abyte0[], int i1, int j1);

    public abstract h b(byte abyte0[]);

    public abstract h b(byte abyte0[], int j, int i1);

    public abstract ByteBuffer[] b_(int j, int i1);

    public abstract int c();

    public abstract h c(int j);

    public int compareTo(Object obj) {
        return b((h)obj);
    }

    public abstract h d();

    public abstract h d(int j, int i1);

    public abstract h e(int j);

    public abstract boolean e();

    public abstract boolean equals(Object obj);

    public abstract byte f(int j);

    public abstract int f();

    public abstract h f(int j, int i1);

    public abstract int g();

    public abstract h h();

    public abstract h h(int j, int i1);

    public abstract short h(int j);

    public abstract int h_();

    public abstract int hashCode();

    public abstract h i();

    public abstract h i(int j, int i1);

    public abstract short i(int j);

    public abstract int k(int j);

    public abstract h k();

    public abstract int l(int j);

    public abstract h l();

    public abstract ByteBuffer m(int j, int i1);

    public abstract byte n();

    public abstract long n(int j);

    public abstract ByteBuffer n(int j, int i1);

    public abstract long o(int j);

    public abstract short o();

    public abstract short p();

    public abstract int q();

    public abstract h q(int j);

    public abstract long r();

    public abstract h r(int j);

    public abstract h s();

    public abstract h s(int j);

    public abstract h t();

    public abstract h t(int j);

    public abstract String toString();

    public abstract h u();

    public abstract ByteBuffer v();

    public abstract ByteBuffer[] w();
}
