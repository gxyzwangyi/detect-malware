// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.buffer;

import io.netty.util.internal.*;
import java.nio.*;

// Referenced classes of package io.netty.buffer:
//            aq, ao, a, i, 
//            h

final class as {

    static final boolean a;
    private static final boolean b = PlatformDependent.g();

    static byte a(long l) {
        return PlatformDependent.a(l);
    }

    static byte a(byte abyte0[], int j) {
        return PlatformDependent.a(abyte0, j);
    }

    static ao a(i j, int l, int i1) {
        if (PlatformDependent.m())
            j = new aq(j, l, i1);
        else
            j = new ao(j, l, i1);
        return j;
    }

    static io.netty.buffer.h a(a a1, long l, int j, int i1) {
        a1.j(j, i1);
        io.netty.buffer.h h1 = a1.I().c(i1, a1.a());
        if (i1 != 0)
            if (h1.P()) {
                PlatformDependent.a(l, h1.Q(), i1);
                h1.a(0, i1);
            } else {
                h1.a(a1, j, i1);
            }
        return h1;
    }

    static void a(long l, int j) {
        PlatformDependent.a(l, (byte)j);
    }

    static void a(long l, long l1) {
        if (b) {
            if (!a)
                l1 = Long.reverseBytes(l1);
            PlatformDependent.a(l, l1);
        } else {
            PlatformDependent.a(l, (byte)(int)(l1 >>> 56));
            PlatformDependent.a(1L + l, (byte)(int)(l1 >>> 48));
            PlatformDependent.a(2L + l, (byte)(int)(l1 >>> 40));
            PlatformDependent.a(3L + l, (byte)(int)(l1 >>> 32));
            PlatformDependent.a(4L + l, (byte)(int)(l1 >>> 24));
            PlatformDependent.a(5L + l, (byte)(int)(l1 >>> 16));
            PlatformDependent.a(6L + l, (byte)(int)(l1 >>> 8));
            PlatformDependent.a(7L + l, (byte)(int)l1);
        }
    }

    static void a(a a1, long l, int j, io.netty.buffer.h h1, int i1, int j1) {
        a1.j(j, j1);
        k.a(h1, "dst");
        if (h.a(i1, j1, h1.H()))
            throw new IndexOutOfBoundsException((new StringBuilder()).append("dstIndex: ").append(i1).toString());
        if (h1.P()) {
            long l1 = h1.Q();
            PlatformDependent.a(l, (long)i1 + l1, j1);
        } else
        if (h1.M())
            PlatformDependent.a(l, h1.N(), h1.O() + i1, j1);
        else
            h1.b(i1, a1, j, j1);
    }

    static void a(a a1, long l, int j, ByteBuffer bytebuffer) {
        a1.u(j);
        j = Math.min(a1.H() - j, bytebuffer.remaining());
        if (j != 0)
            if (bytebuffer.isDirect()) {
                if (bytebuffer.isReadOnly())
                    throw new ReadOnlyBufferException();
                long l1 = PlatformDependent.b(bytebuffer);
                PlatformDependent.a(l, (long)bytebuffer.position() + l1, j);
                bytebuffer.position(bytebuffer.position() + j);
            } else
            if (bytebuffer.hasArray()) {
                PlatformDependent.a(l, bytebuffer.array(), bytebuffer.arrayOffset() + bytebuffer.position(), j);
                bytebuffer.position(bytebuffer.position() + j);
            } else {
                bytebuffer.put(a1.v());
            }
    }

    static void a(a a1, long l, int j, byte abyte0[], int i1, int j1) {
        a1.j(j, j1);
        k.a(abyte0, "dst");
        if (h.a(i1, j1, abyte0.length))
            throw new IndexOutOfBoundsException((new StringBuilder()).append("dstIndex: ").append(i1).toString());
        if (j1 != 0)
            PlatformDependent.a(l, abyte0, i1, j1);
    }

    static void a(byte abyte0[], int j, int l) {
        PlatformDependent.a(abyte0, j, (byte)l);
    }

    static void a(byte abyte0[], int j, long l) {
        if (b) {
            if (!a)
                l = Long.reverseBytes(l);
            PlatformDependent.a(abyte0, j, l);
        } else {
            PlatformDependent.a(abyte0, j, (byte)(int)(l >>> 56));
            PlatformDependent.a(abyte0, j + 1, (byte)(int)(l >>> 48));
            PlatformDependent.a(abyte0, j + 2, (byte)(int)(l >>> 40));
            PlatformDependent.a(abyte0, j + 3, (byte)(int)(l >>> 32));
            PlatformDependent.a(abyte0, j + 4, (byte)(int)(l >>> 24));
            PlatformDependent.a(abyte0, j + 5, (byte)(int)(l >>> 16));
            PlatformDependent.a(abyte0, j + 6, (byte)(int)(l >>> 8));
            PlatformDependent.a(abyte0, j + 7, (byte)(int)l);
        }
    }

    static short b(long l) {
        short word0;
        if (b) {
            word0 = PlatformDependent.b(l);
            if (!a)
                word0 = Short.reverseBytes(word0);
        } else {
            word0 = (short)(PlatformDependent.a(l) << 8 | PlatformDependent.a(1L + l) & 0xff);
        }
        return word0;
    }

    static short b(byte abyte0[], int j) {
        short word0;
        if (b) {
            word0 = PlatformDependent.b(abyte0, j);
            if (!a)
                word0 = Short.reverseBytes(word0);
        } else {
            word0 = (short)(PlatformDependent.a(abyte0, j) << 8 | PlatformDependent.a(abyte0, j + 1) & 0xff);
        }
        return word0;
    }

    static void b(long l, int j) {
        if (b) {
            short word0;
            if (a)
                word0 = (short)j;
            else
                word0 = Short.reverseBytes((short)j);
            PlatformDependent.a(l, word0);
        } else {
            PlatformDependent.a(l, (byte)(j >>> 8));
            PlatformDependent.a(1L + l, (byte)j);
        }
    }

    static void b(a a1, long l, int j, int i1) {
        if (i1 != 0) {
            a1.j(j, i1);
            PlatformDependent.a(l, i1, (byte)0);
        }
    }

    static void b(a a1, long l, int j, io.netty.buffer.h h1, int i1, int j1) {
        a1.j(j, j1);
        k.a(h1, "src");
        if (h.a(i1, j1, h1.H()))
            throw new IndexOutOfBoundsException((new StringBuilder()).append("srcIndex: ").append(i1).toString());
        if (j1 != 0)
            if (h1.P())
                PlatformDependent.a(h1.Q() + (long)i1, l, j1);
            else
            if (h1.M())
                PlatformDependent.a(h1.N(), h1.O() + i1, l, j1);
            else
                h1.a(i1, a1, j, j1);
    }

    static void b(a a1, long l, int j, ByteBuffer bytebuffer) {
        a1.j(j, bytebuffer.remaining());
        j = bytebuffer.remaining();
        if (j != 0)
            if (bytebuffer.isDirect()) {
                PlatformDependent.a(PlatformDependent.b(bytebuffer) + (long)bytebuffer.position(), l, bytebuffer.remaining());
                bytebuffer.position(bytebuffer.position() + j);
            } else {
label0:
                {
                    if (!bytebuffer.hasArray())
                        break label0;
                    PlatformDependent.a(bytebuffer.array(), bytebuffer.arrayOffset() + bytebuffer.position(), l, j);
                    bytebuffer.position(bytebuffer.position() + j);
                }
            }
_L2:
        return;
        a1 = a1.I().c(j);
        byte abyte0[] = a1.N();
        bytebuffer.get(abyte0, a1.O(), j);
        PlatformDependent.a(abyte0, a1.O(), l, j);
        a1.B();
        if (true) goto _L2; else goto _L1
_L1:
        bytebuffer;
        a1.B();
        throw bytebuffer;
    }

    static void b(a a1, long l, int j, byte abyte0[], int i1, int j1) {
        a1.j(j, j1);
        if (j1 != 0)
            PlatformDependent.a(abyte0, i1, l, j1);
    }

    static void b(byte abyte0[], int j, int l) {
        if (b) {
            short word0;
            if (a)
                word0 = (short)l;
            else
                word0 = Short.reverseBytes((short)l);
            PlatformDependent.a(abyte0, j, word0);
        } else {
            PlatformDependent.a(abyte0, j, (byte)(l >>> 8));
            PlatformDependent.a(abyte0, j + 1, (byte)l);
        }
    }

    static int c(long l) {
        int j;
        if (b) {
            j = PlatformDependent.c(l);
            if (!a)
                j = Integer.reverseBytes(j);
        } else {
            j = PlatformDependent.a(l) << 24 | (PlatformDependent.a(1L + l) & 0xff) << 16 | (PlatformDependent.a(2L + l) & 0xff) << 8 | PlatformDependent.a(3L + l) & 0xff;
        }
        return j;
    }

    static int c(byte abyte0[], int j) {
        if (b) {
            j = PlatformDependent.c(abyte0, j);
            if (!a)
                j = Integer.reverseBytes(j);
        } else {
            j = PlatformDependent.a(abyte0, j) << 24 | (PlatformDependent.a(abyte0, j + 1) & 0xff) << 16 | (PlatformDependent.a(abyte0, j + 2) & 0xff) << 8 | PlatformDependent.a(abyte0, j + 3) & 0xff;
        }
        return j;
    }

    static void c(long l, int j) {
        if (b) {
            if (!a)
                j = Integer.reverseBytes(j);
            PlatformDependent.a(l, j);
        } else {
            PlatformDependent.a(l, (byte)(j >>> 24));
            PlatformDependent.a(1L + l, (byte)(j >>> 16));
            PlatformDependent.a(2L + l, (byte)(j >>> 8));
            PlatformDependent.a(3L + l, (byte)j);
        }
    }

    static void c(byte abyte0[], int j, int l) {
        if (b) {
            if (!a)
                l = Integer.reverseBytes(l);
            PlatformDependent.a(abyte0, j, l);
        } else {
            PlatformDependent.a(abyte0, j, (byte)(l >>> 24));
            PlatformDependent.a(abyte0, j + 1, (byte)(l >>> 16));
            PlatformDependent.a(abyte0, j + 2, (byte)(l >>> 8));
            PlatformDependent.a(abyte0, j + 3, (byte)l);
        }
    }

    static long d(long l) {
        if (b) {
            l = PlatformDependent.d(l);
            if (!a)
                l = Long.reverseBytes(l);
        } else {
            l = (long)PlatformDependent.a(l) << 56 | ((long)PlatformDependent.a(1L + l) & 255L) << 48 | ((long)PlatformDependent.a(2L + l) & 255L) << 40 | ((long)PlatformDependent.a(3L + l) & 255L) << 32 | ((long)PlatformDependent.a(4L + l) & 255L) << 24 | ((long)PlatformDependent.a(5L + l) & 255L) << 16 | ((long)PlatformDependent.a(6L + l) & 255L) << 8 | (long)PlatformDependent.a(7L + l) & 255L;
        }
        return l;
    }

    static long d(byte abyte0[], int j) {
        long l;
        if (b) {
            l = PlatformDependent.d(abyte0, j);
            if (!a)
                l = Long.reverseBytes(l);
        } else {
            l = (long)PlatformDependent.a(abyte0, j) << 56 | ((long)PlatformDependent.a(abyte0, j + 1) & 255L) << 48 | ((long)PlatformDependent.a(abyte0, j + 2) & 255L) << 40 | ((long)PlatformDependent.a(abyte0, j + 3) & 255L) << 32 | ((long)PlatformDependent.a(abyte0, j + 4) & 255L) << 24 | ((long)PlatformDependent.a(abyte0, j + 5) & 255L) << 16 | ((long)PlatformDependent.a(abyte0, j + 6) & 255L) << 8 | (long)PlatformDependent.a(abyte0, j + 7) & 255L;
        }
        return l;
    }

    static void d(byte abyte0[], int j, int l) {
        if (l != 0)
            PlatformDependent.a(abyte0, j, l, (byte)0);
    }

    static  {
        boolean flag;
        if (ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN)
            flag = true;
        else
            flag = false;
        a = flag;
    }
}
