// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.buffer;

import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.nio.charset.Charset;

// Referenced classes of package io.netty.buffer:
//            al, i, r, h, 
//            ae, m, an, ar, 
//            n

public final class ak {

    public static final ByteOrder a;
    public static final ByteOrder b;
    public static final h c;
    static final boolean d;
    private static final i e;

    private ak() {
    }

    public static h a(int j) {
        return e.c(j);
    }

    public static h a(h h1) {
        if (h1.J() == a)
            h1 = new ae(h1);
        else
            h1 = (new ae(h1.a(a))).a(b);
        return h1;
    }

    public static h a(CharSequence charsequence, Charset charset) {
        if (charsequence == null)
            throw new NullPointerException("string");
        if (charsequence instanceof CharBuffer)
            charsequence = a((CharBuffer)charsequence, charset);
        else
            charsequence = a(CharBuffer.wrap(charsequence), charset);
        return charsequence;
    }

    private static h a(CharBuffer charbuffer, Charset charset) {
        return m.a(e, true, charbuffer, charset);
    }

    public static h a(byte abyte0[]) {
        if (abyte0.length == 0)
            abyte0 = c;
        else
            abyte0 = new an(e, abyte0, abyte0.length);
        return abyte0;
    }

    public static h b(int j) {
        return e.d(j);
    }

    public static h b(h h1) {
        return new ar(h1);
    }

    public static h b(byte abyte0[]) {
        if (abyte0.length == 0)
            abyte0 = c;
        else
            abyte0 = a((byte[])abyte0.clone());
        return abyte0;
    }

    public static n c(int j) {
        return new n(e, false, j);
    }

    static  {
        boolean flag;
        if (!io/netty/buffer/ak.desiredAssertionStatus())
            flag = true;
        else
            flag = false;
        d = flag;
        e = al.b;
        a = ByteOrder.BIG_ENDIAN;
        b = ByteOrder.LITTLE_ENDIAN;
        c = e.a(0, 0);
        if (!d && !(c instanceof r))
            throw new AssertionError("EMPTY_BUFFER must be an EmptyByteBuf.");
    }
}
