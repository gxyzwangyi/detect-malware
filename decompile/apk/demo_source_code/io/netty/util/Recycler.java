// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util;

import io.netty.util.concurrent.l;
import io.netty.util.internal.h;
import io.netty.util.internal.logging.b;
import io.netty.util.internal.logging.c;
import io.netty.util.internal.n;
import java.lang.ref.WeakReference;
import java.util.Arrays;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.atomic.AtomicInteger;

public abstract class Recycler {
    private static final class WeakOrderQueue {

        static final boolean a;
        private Link b;
        private Link c;
        private WeakOrderQueue d;
        private final WeakReference e;
        private final int f;
        private final AtomicInteger g;

        static WeakOrderQueue a(WeakOrderQueue weakorderqueue) {
            return weakorderqueue.d;
        }

        static WeakOrderQueue a(WeakOrderQueue weakorderqueue, WeakOrderQueue weakorderqueue1) {
            weakorderqueue.d = weakorderqueue1;
            return weakorderqueue1;
        }

        static WeakOrderQueue a(c c1, Thread thread) {
            if (a(c1.c, io.netty.util.Recycler.c()))
                c1 = new WeakOrderQueue(c1, thread);
            else
                c1 = null;
            return c1;
        }

        private void a(int i1) {
            if (!a && i1 < 0) {
                throw new AssertionError();
            } else {
                g.addAndGet(i1);
                return;
            }
        }

        private static boolean a(AtomicInteger atomicinteger, int i1) {
            if (!a && i1 < 0)
                throw new AssertionError();
_L2:
            int j1;
            boolean flag;
            j1 = atomicinteger.get();
            if (j1 >= i1)
                continue; /* Loop/switch isn't completed */
            flag = false;
_L3:
            return flag;
            if (!atomicinteger.compareAndSet(j1, j1 - i1)) goto _L2; else goto _L1
_L1:
            flag = true;
              goto _L3
            if (true) goto _L2; else goto _L4
_L4:
        }

        static WeakReference b(WeakOrderQueue weakorderqueue) {
            return weakorderqueue.e;
        }

        void a(a a1) {
            int i1;
            int j1;
            Link link;
            Link link1;
            a.a(a1, f);
            link1 = c;
            j1 = link1.get();
            i1 = j1;
            link = link1;
            if (j1 != io.netty.util.Recycler.c()) goto _L2; else goto _L1
_L1:
            if (a(g, io.netty.util.Recycler.c())) goto _L4; else goto _L3
_L3:
            return;
_L4:
            link = Link.a(link1, new Link());
            c = link;
            i1 = link.get();
_L2:
            Link.a(link)[i1] = a1;
            a.a(a1, null);
            link.lazySet(i1 + 1);
            if (true) goto _L3; else goto _L5
_L5:
        }

        boolean a() {
            boolean flag;
            if (io.netty.util.Link.b(c) != c.get())
                flag = true;
            else
                flag = false;
            return flag;
        }

        boolean a(c c1) {
            Link link1 = b;
            if (link1 != null) goto _L2; else goto _L1
_L1:
            boolean flag = false;
_L8:
            return flag;
_L2:
            int i1;
            int j1;
            int k1;
            Link link;
            a aa[];
            a aa1[];
            link = link1;
            if (io.netty.util.Link.b(link1) == io.netty.util.Recycler.c()) {
                if (io.netty.util.Link.c(link1) == null) {
                    flag = false;
                    continue; /* Loop/switch isn't completed */
                }
                link = io.netty.util.Link.c(link1);
                b = link;
            }
            j1 = io.netty.util.Link.b(link);
            int l1 = link.get();
            i1 = l1 - j1;
            if (i1 == 0) {
                flag = false;
                continue; /* Loop/switch isn't completed */
            }
            k1 = io.netty.util.c.b(c1);
            int i2 = i1 + k1;
            i1 = l1;
            if (i2 > c.a(c1).length)
                i1 = Math.min((c1.a(i2) + j1) - k1, l1);
            if (j1 == i1)
                break MISSING_BLOCK_LABEL_279;
            aa1 = Link.a(link);
            aa = c.a(c1);
_L4:
            a a1;
            if (j1 >= i1)
                break MISSING_BLOCK_LABEL_228;
            a1 = aa1[j1];
            if (io.netty.util.a.c(a1) != 0)
                break; /* Loop/switch isn't completed */
            io.netty.util.a.b(a1, a.d(a1));
_L6:
            a.a(a1, c1);
            aa[k1] = a1;
            aa1[j1] = null;
            j1++;
            k1++;
            if (true) goto _L4; else goto _L3
_L3:
            if (io.netty.util.a.c(a1) == a.d(a1)) goto _L6; else goto _L5
_L5:
            throw new IllegalStateException("recycled already");
            c.a(c1, k1);
            if (i1 == io.netty.util.Recycler.c() && io.netty.util.Link.c(link) != null) {
                a(io.netty.util.Recycler.c());
                b = io.netty.util.Link.c(link);
            }
            Link.a(link, i1);
            flag = true;
            continue; /* Loop/switch isn't completed */
            flag = false;
            if (true) goto _L8; else goto _L7
_L7:
        }

        protected void finalize() {
            super.finalize();
            for (Link link = b; link != null; link = io.netty.util.Link.c(link))
                a(io.netty.util.Recycler.c());

            break MISSING_BLOCK_LABEL_55;
            Exception exception;
            exception;
            for (Link link1 = b; link1 != null; link1 = io.netty.util.Link.c(link1))
                a(io.netty.util.Recycler.c());

            throw exception;
        }

        static  {
            boolean flag;
            if (!io/netty/util/Recycler.desiredAssertionStatus())
                flag = true;
            else
                flag = false;
            a = flag;
        }

        private WeakOrderQueue(c c1, Thread thread) {
            f = Recycler.d().getAndIncrement();
            Link link = new Link();
            c = link;
            b = link;
            e = new WeakReference(thread);
            c1;
            JVM INSTR monitorenter ;
            d = io.netty.util.c.c(c1);
            c.a(c1, this);
            c1;
            JVM INSTR monitorexit ;
            g = c1.c;
            return;
            thread;
            c1;
            JVM INSTR monitorexit ;
            throw thread;
        }
    }

    private static final class WeakOrderQueue.Link extends AtomicInteger {

        private final a a[];
        private int b;
        private WeakOrderQueue.Link c;

        static int a(WeakOrderQueue.Link link, int i1) {
            link.b = i1;
            return i1;
        }

        static WeakOrderQueue.Link a(WeakOrderQueue.Link link, WeakOrderQueue.Link link1) {
            link.c = link1;
            return link1;
        }

        static a[] a(WeakOrderQueue.Link link) {
            return link.a;
        }

        static int b(WeakOrderQueue.Link link) {
            return link.b;
        }

        static WeakOrderQueue.Link c(WeakOrderQueue.Link link) {
            return link.c;
        }

        private WeakOrderQueue.Link() {
            a = new a[io.netty.util.Recycler.c()];
        }

    }

    static final class a
        implements b {

        private int a;
        private int b;
        private c c;
        private Object d;

        static int a(a a1, int i1) {
            a1.a = i1;
            return i1;
        }

        static c a(a a1, c c1) {
            a1.c = c1;
            return c1;
        }

        static Object a(a a1) {
            return a1.d;
        }

        static Object a(a a1, Object obj) {
            a1.d = obj;
            return obj;
        }

        static int b(a a1, int i1) {
            a1.b = i1;
            return i1;
        }

        static c b(a a1) {
            return a1.c;
        }

        static int c(a a1) {
            return a1.b;
        }

        static int d(a a1) {
            return a1.a;
        }

        public void a() {
            Thread thread = Thread.currentThread();
            if (thread != c.b) goto _L2; else goto _L1
_L1:
            c.a(this);
_L4:
            return;
_L2:
            Map map = (Map)io.netty.util.Recycler.b().d();
            WeakOrderQueue weakorderqueue1 = (WeakOrderQueue)map.get(c);
            WeakOrderQueue weakorderqueue = weakorderqueue1;
            if (weakorderqueue1 == null) {
                weakorderqueue = WeakOrderQueue.a(c, thread);
                if (weakorderqueue == null)
                    continue; /* Loop/switch isn't completed */
                map.put(c, weakorderqueue);
            }
            weakorderqueue.a(this);
            if (true) goto _L4; else goto _L3
_L3:
        }

        a(c c1) {
            c = c1;
        }
    }

    public static interface b {
    }

    static final class c {

        final Recycler a;
        final Thread b;
        final AtomicInteger c;
        private a d[];
        private final int e;
        private int f;
        private volatile WeakOrderQueue g;
        private WeakOrderQueue h;
        private WeakOrderQueue i;

        static int a(c c1, int i1) {
            c1.f = i1;
            return i1;
        }

        static WeakOrderQueue a(c c1, WeakOrderQueue weakorderqueue) {
            c1.g = weakorderqueue;
            return weakorderqueue;
        }

        static a[] a(c c1) {
            return c1.d;
        }

        static int b(c c1) {
            return c1.f;
        }

        static WeakOrderQueue c(c c1) {
            return c1.g;
        }

        int a(int i1) {
            int j1 = d.length;
            int l1 = e;
            int k1;
            do {
                k1 = j1 << 1;
                if (k1 >= i1)
                    break;
                j1 = k1;
            } while (k1 < l1);
            i1 = Math.min(k1, l1);
            if (i1 != d.length)
                d = (a[])Arrays.copyOf(d, i1);
            return i1;
        }

        a a() {
            int i1;
            int j1;
            j1 = f;
            i1 = j1;
            if (j1 != 0) goto _L2; else goto _L1
_L1:
            if (b()) goto _L4; else goto _L3
_L3:
            a a1 = null;
_L6:
            return a1;
_L4:
            i1 = f;
_L2:
            i1--;
            a1 = d[i1];
            d[i1] = null;
            if (a.d(a1) != io.netty.util.a.c(a1))
                throw new IllegalStateException("recycled multiple times");
            io.netty.util.a.b(a1, 0);
            a.a(a1, 0);
            f = i1;
            if (true) goto _L6; else goto _L5
_L5:
        }

        void a(a a1) {
            if ((io.netty.util.a.c(a1) | a.d(a1)) != 0)
                throw new IllegalStateException("recycled already");
            io.netty.util.a.b(a1, a.a(a1, Recycler.f()));
            int i1 = f;
            if (i1 < e) {
                if (i1 == d.length)
                    d = (a[])Arrays.copyOf(d, Math.min(i1 << 1, e));
                d[i1] = a1;
                f = i1 + 1;
            }
        }

        boolean b() {
            boolean flag;
            if (c()) {
                flag = true;
            } else {
                i = null;
                h = g;
                flag = false;
            }
            return flag;
        }

        boolean c() {
            boolean flag1;
            WeakOrderQueue weakorderqueue;
            WeakOrderQueue weakorderqueue1;
            flag1 = false;
            weakorderqueue1 = h;
            weakorderqueue = weakorderqueue1;
            if (weakorderqueue1 != null) goto _L2; else goto _L1
_L1:
            weakorderqueue1 = g;
            weakorderqueue = weakorderqueue1;
            if (weakorderqueue1 != null) goto _L2; else goto _L3
_L3:
            return flag1;
_L2:
            boolean flag;
            weakorderqueue1 = i;
            flag = false;
_L9:
            if (!weakorderqueue.a(this)) goto _L5; else goto _L4
_L4:
            WeakOrderQueue weakorderqueue3;
            flag1 = true;
            weakorderqueue3 = weakorderqueue;
_L7:
            i = weakorderqueue1;
            h = weakorderqueue3;
              goto _L3
_L5:
            WeakOrderQueue weakorderqueue2;
            weakorderqueue2 = WeakOrderQueue.a(weakorderqueue);
            if (io.netty.util.WeakOrderQueue.b(weakorderqueue).get() == null) {
                flag1 = flag;
                if (weakorderqueue.a())
                    do {
                        flag1 = flag;
                        if (!weakorderqueue.a(this))
                            break;
                        flag = true;
                    } while (true);
                weakorderqueue = weakorderqueue1;
                flag = flag1;
                if (weakorderqueue1 != null) {
                    WeakOrderQueue.a(weakorderqueue1, weakorderqueue2);
                    flag = flag1;
                    weakorderqueue = weakorderqueue1;
                }
            }
            weakorderqueue1 = weakorderqueue;
            flag1 = flag;
            weakorderqueue3 = weakorderqueue2;
            if (weakorderqueue2 == null) goto _L7; else goto _L6
_L6:
            weakorderqueue1 = weakorderqueue;
            flag1 = flag;
            weakorderqueue3 = weakorderqueue2;
            if (flag) goto _L7; else goto _L8
_L8:
            weakorderqueue1 = weakorderqueue;
            weakorderqueue = weakorderqueue2;
              goto _L9
        }

        a d() {
            return new a(this);
        }

        c(Recycler recycler, Thread thread, int i1, int j1) {
            a = recycler;
            b = thread;
            e = i1;
            c = new AtomicInteger(Math.max(i1 / j1, io.netty.util.Recycler.c()));
            d = new a[Math.min(Recycler.e(), i1)];
        }
    }


    private static final io.netty.util.internal.logging.b a;
    private static final b b = new b() {

    }
;
    private static final AtomicInteger c;
    private static final int d;
    private static final int e;
    private static final int f;
    private static final int g;
    private static final int h;
    private static final l l = new l() {

        protected Map a() {
            return new WeakHashMap();
        }

        protected Object b() {
            return a();
        }

    }
;
    private final int i;
    private final int j;
    private final l k;

    protected Recycler() {
        this(e);
    }

    protected Recycler(int i1) {
        this(i1, g);
    }

    protected Recycler(int i1, int j1) {
        k = new l() {

            final Recycler a;

            protected c a() {
                return new c(a, Thread.currentThread(), Recycler.a(a), io.netty.util.Recycler.b(a));
            }

            protected Object b() {
                return a();
            }

             {
                a = Recycler.this;
                super();
            }
        }
;
        if (i1 <= 0) {
            i = 0;
            j = 1;
        } else {
            i = i1;
            j = Math.max(1, j1);
        }
    }

    static int a(Recycler recycler) {
        return recycler.i;
    }

    static int b(Recycler recycler) {
        return recycler.j;
    }

    static l b() {
        return l;
    }

    static int c() {
        return h;
    }

    static AtomicInteger d() {
        return c;
    }

    static int e() {
        return f;
    }

    static int f() {
        return d;
    }

    public final Object a() {
        Object obj;
        if (i == 0) {
            obj = b(b);
        } else {
            c c1 = (c)k.d();
            obj = c1.a();
            if (obj == null) {
                obj = c1.d();
                a.a(((a) (obj)), b(((b) (obj))));
            }
            obj = a.a(((a) (obj)));
        }
        return obj;
    }

    public final boolean a(Object obj, b b1) {
        boolean flag = false;
        if (b1 != b) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        b1 = (a)b1;
        if (io.netty.util.a.b(b1).a == this) {
            if (obj != a.a(b1))
                throw new IllegalArgumentException("o does not belong to handle");
            b1.a();
            flag = true;
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    protected abstract Object b(b b1);

    static  {
        int i1 = 32768;
        a = io.netty.util.internal.logging.c.a(io/netty/util/Recycler);
        c = new AtomicInteger(0x80000000);
        d = c.getAndIncrement();
        int j1 = n.a("io.netty.recycler.maxCapacity.default", 32768);
        if (j1 >= 0)
            i1 = j1;
        e = i1;
        g = Math.max(2, n.a("io.netty.recycler.maxSharedCapacityFactor", 2));
        h = io.netty.util.internal.h.a(Math.max(n.a("io.netty.recycler.linkCapacity", 16), 16));
        if (a.b())
            if (e == 0) {
                a.a("-Dio.netty.recycler.maxCapacity.default: disabled");
                a.a("-Dio.netty.recycler.maxSharedCapacityFactor: disabled");
                a.a("-Dio.netty.recycler.linkCapacity: disabled");
            } else {
                a.b("-Dio.netty.recycler.maxCapacity.default: {}", Integer.valueOf(e));
                a.b("-Dio.netty.recycler.maxSharedCapacityFactor: {}", Integer.valueOf(g));
                a.b("-Dio.netty.recycler.linkCapacity: {}", Integer.valueOf(h));
            }
        f = Math.min(e, 256);
    }
}
