// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util;

import io.netty.util.internal.k;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.CodingErrorAction;
import java.util.Map;

public final class e {

    public static final Charset a = Charset.forName("UTF-16");
    public static final Charset b = Charset.forName("UTF-16BE");
    public static final Charset c = Charset.forName("UTF-16LE");
    public static final Charset d = Charset.forName("UTF-8");
    public static final Charset e = Charset.forName("ISO-8859-1");
    public static final Charset f = Charset.forName("US-ASCII");

    public static CharsetEncoder a(Charset charset) {
        k.a(charset, "charset");
        Map map = io.netty.util.internal.e.b().f();
        CharsetEncoder charsetencoder = (CharsetEncoder)map.get(charset);
        if (charsetencoder != null) {
            charsetencoder.reset().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE);
            charset = charsetencoder;
        } else {
            CharsetEncoder charsetencoder1 = a(charset, CodingErrorAction.REPLACE, CodingErrorAction.REPLACE);
            map.put(charset, charsetencoder1);
            charset = charsetencoder1;
        }
        return charset;
    }

    public static CharsetEncoder a(Charset charset, CodingErrorAction codingerroraction, CodingErrorAction codingerroraction1) {
        k.a(charset, "charset");
        charset = charset.newEncoder();
        charset.onMalformedInput(codingerroraction).onUnmappableCharacter(codingerroraction1);
        return charset;
    }

    public static CharsetDecoder b(Charset charset) {
        k.a(charset, "charset");
        Map map = io.netty.util.internal.e.b().g();
        CharsetDecoder charsetdecoder = (CharsetDecoder)map.get(charset);
        if (charsetdecoder != null) {
            charsetdecoder.reset().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE);
            charset = charsetdecoder;
        } else {
            CharsetDecoder charsetdecoder1 = b(charset, CodingErrorAction.REPLACE, CodingErrorAction.REPLACE);
            map.put(charset, charsetdecoder1);
            charset = charsetdecoder1;
        }
        return charset;
    }

    public static CharsetDecoder b(Charset charset, CodingErrorAction codingerroraction, CodingErrorAction codingerroraction1) {
        k.a(charset, "charset");
        charset = charset.newDecoder();
        charset.onMalformedInput(codingerroraction).onUnmappableCharacter(codingerroraction1);
        return charset;
    }

}
