// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util;

import io.netty.util.internal.PlatformDependent;
import java.util.concurrent.atomic.*;

// Referenced classes of package io.netty.util:
//            d, c, b

public class DefaultAttributeMap
    implements d {
    private static final class DefaultAttribute extends AtomicReference
        implements b {

        static final boolean a;
        private final DefaultAttribute b;
        private final c c;
        private DefaultAttribute d;
        private DefaultAttribute e;
        private volatile boolean f;

        static DefaultAttribute a(DefaultAttribute defaultattribute) {
            return defaultattribute.e;
        }

        static DefaultAttribute a(DefaultAttribute defaultattribute, DefaultAttribute defaultattribute1) {
            defaultattribute.e = defaultattribute1;
            return defaultattribute1;
        }

        static DefaultAttribute b(DefaultAttribute defaultattribute, DefaultAttribute defaultattribute1) {
            defaultattribute.d = defaultattribute1;
            return defaultattribute1;
        }

        static c b(DefaultAttribute defaultattribute) {
            return defaultattribute.c;
        }

        static boolean c(DefaultAttribute defaultattribute) {
            return defaultattribute.f;
        }

        static  {
            boolean flag;
            if (!io/netty/util/DefaultAttributeMap.desiredAssertionStatus())
                flag = true;
            else
                flag = false;
            a = flag;
        }

        DefaultAttribute() {
            b = this;
            c = null;
        }

        DefaultAttribute(DefaultAttribute defaultattribute, c c1) {
            b = defaultattribute;
            c = c1;
        }
    }


    private static final AtomicReferenceFieldUpdater a;
    private volatile AtomicReferenceArray b;

    public DefaultAttributeMap() {
    }

    private static int b(c c1) {
        return c1.b() & 3;
    }

    public b a(c c1) {
        int i;
        DefaultAttribute defaultattribute;
        Object obj;
        DefaultAttribute defaultattribute1;
        if (c1 == null)
            throw new NullPointerException("key");
        obj = b;
        if (obj == null) {
            obj = new AtomicReferenceArray(4);
            if (!a.compareAndSet(this, null, obj))
                obj = b;
        }
        i = b(c1);
        defaultattribute1 = (DefaultAttribute)((AtomicReferenceArray) (obj)).get(i);
        defaultattribute = defaultattribute1;
        if (defaultattribute1 != null) goto _L2; else goto _L1
_L1:
        defaultattribute1 = new DefaultAttribute();
        defaultattribute = new DefaultAttribute(defaultattribute1, c1);
        DefaultAttribute.a(defaultattribute1, defaultattribute);
        DefaultAttribute.b(defaultattribute, defaultattribute1);
        if (!((AtomicReferenceArray) (obj)).compareAndSet(i, null, defaultattribute1)) goto _L4; else goto _L3
_L3:
        c1 = defaultattribute;
_L8:
        return c1;
_L4:
        defaultattribute = (DefaultAttribute)((AtomicReferenceArray) (obj)).get(i);
_L2:
        defaultattribute;
        JVM INSTR monitorenter ;
        obj = defaultattribute;
_L6:
        defaultattribute1 = DefaultAttribute.a(((DefaultAttribute) (obj)));
        if (defaultattribute1 != null)
            break MISSING_BLOCK_LABEL_191;
        defaultattribute1 = JVM INSTR new #8   <Class DefaultAttributeMap$DefaultAttribute>;
        defaultattribute1.DefaultAttribute(defaultattribute, c1);
        DefaultAttribute.a(((DefaultAttribute) (obj)), defaultattribute1);
        DefaultAttribute.b(defaultattribute1, ((DefaultAttribute) (obj)));
        defaultattribute;
        JVM INSTR monitorexit ;
        c1 = defaultattribute1;
        continue; /* Loop/switch isn't completed */
        if (DefaultAttribute.b(defaultattribute1) != c1 || DefaultAttribute.c(defaultattribute1))
            break MISSING_BLOCK_LABEL_216;
        defaultattribute;
        JVM INSTR monitorexit ;
        c1 = defaultattribute1;
        continue; /* Loop/switch isn't completed */
        obj = defaultattribute1;
        if (true) goto _L6; else goto _L5
_L5:
        c1;
        defaultattribute;
        JVM INSTR monitorexit ;
        throw c1;
        if (true) goto _L8; else goto _L7
_L7:
    }

    static  {
        AtomicReferenceFieldUpdater atomicreferencefieldupdater1 = PlatformDependent.a(io/netty/util/DefaultAttributeMap, "b");
        AtomicReferenceFieldUpdater atomicreferencefieldupdater = atomicreferencefieldupdater1;
        if (atomicreferencefieldupdater1 == null)
            atomicreferencefieldupdater = AtomicReferenceFieldUpdater.newUpdater(io/netty/util/DefaultAttributeMap, java/util/concurrent/atomic/AtomicReferenceArray, "b");
        a = atomicreferencefieldupdater;
    }
}
