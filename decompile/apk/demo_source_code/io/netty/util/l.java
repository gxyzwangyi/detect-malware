// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util;

import io.netty.util.concurrent.h;
import io.netty.util.internal.PlatformDependent;
import io.netty.util.internal.logging.b;
import io.netty.util.internal.logging.c;
import io.netty.util.internal.m;
import io.netty.util.internal.n;
import java.util.*;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.atomic.AtomicBoolean;

public final class l {
    private static final class a {

        final Thread a;
        final Runnable b;
        final boolean c;

        public boolean equals(Object obj) {
            boolean flag = true;
            if (obj != this) goto _L2; else goto _L1
_L1:
            return flag;
_L2:
            if (!(obj instanceof a)) {
                flag = false;
            } else {
                obj = (a)obj;
                if (a != ((a) (obj)).a || b != ((a) (obj)).b)
                    flag = false;
            }
            if (true) goto _L1; else goto _L3
_L3:
        }

        public int hashCode() {
            return a.hashCode() ^ b.hashCode();
        }

        a(Thread thread, Runnable runnable, boolean flag) {
            a = thread;
            b = runnable;
            c = flag;
        }
    }

    private static final class b
        implements Runnable {

        static final boolean a;
        private final List b;

        private void a() {
            do {
                a a1 = (a)l.a().poll();
                if (a1 == null)
                    return;
                if (a1.c)
                    b.add(a1);
                else
                    b.remove(a1);
            } while (true);
        }

        private void b() {
            List list = b;
            for (int i = 0; i < list.size();) {
                a a1 = (a)list.get(i);
                if (!a1.a.isAlive()) {
                    list.remove(i);
                    try {
                        a1.b.run();
                    }
                    catch (Throwable throwable) {
                        io.netty.util.l.c().b("Thread death watcher task raised an exception:", throwable);
                    }
                } else {
                    i++;
                }
            }

        }

        public void run() {
            do {
                do {
                    a();
                    b();
                    a();
                    b();
                    boolean flag;
                    try {
                        Thread.sleep(1000L);
                    }
                    catch (InterruptedException interruptedexception) { }
                } while (!b.isEmpty() || !l.a().isEmpty());
                flag = io.netty.util.l.b().compareAndSet(true, false);
                if (!a && !flag)
                    throw new AssertionError();
                while (l.a().isEmpty() || !io.netty.util.l.b().compareAndSet(false, true)) 
                    return;
            } while (true);
        }

        static  {
            boolean flag;
            if (!io/netty/util/l.desiredAssertionStatus())
                flag = true;
            else
                flag = false;
            a = flag;
        }

        private b() {
            b = new ArrayList();
        }

    }


    static final ThreadFactory a;
    private static final io.netty.util.internal.logging.b b = io.netty.util.internal.logging.c.a(io/netty/util/l);
    private static final Queue c = PlatformDependent.n();
    private static final b d = new b();
    private static final AtomicBoolean e = new AtomicBoolean();
    private static volatile Thread f;

    private l() {
    }

    static Queue a() {
        return c;
    }

    public static void a(Thread thread, Runnable runnable) {
        if (thread == null)
            throw new NullPointerException("thread");
        if (runnable == null)
            throw new NullPointerException("task");
        if (!thread.isAlive()) {
            throw new IllegalArgumentException("thread must be alive.");
        } else {
            a(thread, runnable, true);
            return;
        }
    }

    private static void a(Thread thread, Runnable runnable, boolean flag) {
        c.add(new a(thread, runnable, flag));
        if (e.compareAndSet(false, true)) {
            thread = a.newThread(d);
            thread.start();
            f = thread;
        }
    }

    static AtomicBoolean b() {
        return e;
    }

    public static void b(Thread thread, Runnable runnable) {
        if (thread == null)
            throw new NullPointerException("thread");
        if (runnable == null) {
            throw new NullPointerException("task");
        } else {
            a(thread, runnable, false);
            return;
        }
    }

    static io.netty.util.internal.logging.b c() {
        return b;
    }

    static  {
        String s = "threadDeathWatcher";
        String s1 = n.b("io.netty.serviceThreadPrefix");
        if (!m.a(s1))
            s = (new StringBuilder()).append(s1).append("threadDeathWatcher").toString();
        a = new h(s, true, 1, null);
    }
}
