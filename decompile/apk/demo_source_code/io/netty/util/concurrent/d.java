// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util.concurrent;

import io.netty.util.internal.k;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.concurrent.*;

// Referenced classes of package io.netty.util.concurrent:
//            a, af, ae

public abstract class d extends a {

    static final boolean d;
    Queue c;

    public d() {
    }

    private static boolean a(Queue queue) {
        boolean flag;
        if (queue == null || queue.isEmpty())
            flag = true;
        else
            flag = false;
        return flag;
    }

    protected static long m() {
        return af.c();
    }

    ae a(af af1) {
        if (f())
            n().add(af1);
        else
            execute(new Runnable(af1) {

                final af a;
                final d b;

                public void run() {
                    b.n().add(a);
                }

             {
                b = d.this;
                a = af1;
                super();
            }
            }
);
        return af1;
    }

    public ae a(Runnable runnable, long l, long l1, TimeUnit timeunit) {
        k.a(runnable, "command");
        k.a(timeunit, "unit");
        if (l < 0L)
            throw new IllegalArgumentException(String.format("initialDelay: %d (expected: >= 0)", new Object[] {
                Long.valueOf(l)
            }));
        if (l1 <= 0L)
            throw new IllegalArgumentException(String.format("period: %d (expected: > 0)", new Object[] {
                Long.valueOf(l1)
            }));
        else
            return a(new af(this, Executors.callable(runnable, null), af.a(timeunit.toNanos(l)), timeunit.toNanos(l1)));
    }

    public ae a(Runnable runnable, long l, TimeUnit timeunit) {
        k.a(runnable, "command");
        k.a(timeunit, "unit");
        if (l < 0L)
            throw new IllegalArgumentException(String.format("delay: %d (expected: >= 0)", new Object[] {
                Long.valueOf(l)
            }));
        else
            return a(new af(this, runnable, null, af.a(timeunit.toNanos(l))));
    }

    public ae a(Callable callable, long l, TimeUnit timeunit) {
        k.a(callable, "callable");
        k.a(timeunit, "unit");
        if (l < 0L)
            throw new IllegalArgumentException(String.format("delay: %d (expected: >= 0)", new Object[] {
                Long.valueOf(l)
            }));
        else
            return a(new af(this, callable, af.a(timeunit.toNanos(l))));
    }

    protected final Runnable a(long l) {
        if (!d && !f())
            throw new AssertionError();
        Queue queue = c;
        Object obj;
        if (queue == null)
            obj = null;
        else
            obj = (af)queue.peek();
        if (obj == null)
            obj = null;
        else
        if (((af) (obj)).d() <= l)
            queue.remove();
        else
            obj = null;
        return ((Runnable) (obj));
    }

    public ae b(Runnable runnable, long l, long l1, TimeUnit timeunit) {
        k.a(runnable, "command");
        k.a(timeunit, "unit");
        if (l < 0L)
            throw new IllegalArgumentException(String.format("initialDelay: %d (expected: >= 0)", new Object[] {
                Long.valueOf(l)
            }));
        if (l1 <= 0L)
            throw new IllegalArgumentException(String.format("delay: %d (expected: > 0)", new Object[] {
                Long.valueOf(l1)
            }));
        else
            return a(new af(this, Executors.callable(runnable, null), af.a(timeunit.toNanos(l)), -timeunit.toNanos(l1)));
    }

    final void b(af af1) {
        if (f())
            n().remove(af1);
        else
            execute(new Runnable(af1) {

                final af a;
                final d b;

                public void run() {
                    b.b(a);
                }

             {
                b = d.this;
                a = af1;
                super();
            }
            }
);
    }

    protected void d() {
        if (!d && !f())
            throw new AssertionError();
        Queue queue = c;
        if (!a(queue)) {
            af aaf[] = (af[])queue.toArray(new af[queue.size()]);
            int j = aaf.length;
            for (int i = 0; i < j; i++)
                aaf[i].a(false);

            queue.clear();
        }
    }

    Queue n() {
        if (c == null)
            c = new PriorityQueue();
        return c;
    }

    protected final long o() {
        Object obj = c;
        long l;
        if (obj == null)
            obj = null;
        else
            obj = (af)((Queue) (obj)).peek();
        if (obj == null)
            l = -1L;
        else
            l = Math.max(0L, ((af) (obj)).d() - m());
        return l;
    }

    final af p() {
        Object obj = c;
        if (obj == null)
            obj = null;
        else
            obj = (af)((Queue) (obj)).peek();
        return ((af) (obj));
    }

    protected final boolean q() {
        Object obj = c;
        boolean flag;
        if (obj == null)
            obj = null;
        else
            obj = (af)((Queue) (obj)).peek();
        if (obj != null && ((af) (obj)).d() <= m())
            flag = true;
        else
            flag = false;
        return flag;
    }

    public ScheduledFuture schedule(Runnable runnable, long l, TimeUnit timeunit) {
        return a(runnable, l, timeunit);
    }

    public ScheduledFuture schedule(Callable callable, long l, TimeUnit timeunit) {
        return a(callable, l, timeunit);
    }

    public ScheduledFuture scheduleAtFixedRate(Runnable runnable, long l, long l1, TimeUnit timeunit) {
        return a(runnable, l, l1, timeunit);
    }

    public ScheduledFuture scheduleWithFixedDelay(Runnable runnable, long l, long l1, TimeUnit timeunit) {
        return b(runnable, l, l1, timeunit);
    }

    static  {
        boolean flag;
        if (!io/netty/util/concurrent/d.desiredAssertionStatus())
            flag = true;
        else
            flag = false;
        d = flag;
    }
}
