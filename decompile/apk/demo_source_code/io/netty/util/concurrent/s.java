// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util.concurrent;

import io.netty.util.internal.logging.b;
import io.netty.util.internal.logging.c;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.concurrent.TimeUnit;

// Referenced classes of package io.netty.util.concurrent:
//            a, k, r, l, 
//            n

public final class s extends a {

    public static final s a = new s();
    private static final b b = io.netty.util.internal.logging.c.a(io/netty/util/concurrent/s);
    private static final l c = new l() {

        protected Queue a() {
            return new ArrayDeque();
        }

        protected Object b() {
            return a();
        }

    }
;
    private static final l d = new l() {

        protected Boolean a() {
            return Boolean.valueOf(false);
        }

        protected Object b() {
            return a();
        }

    }
;
    private final n e;

    private s() {
        e = new k(r.a, new UnsupportedOperationException());
    }

    public n a(long l1, long l2, TimeUnit timeunit) {
        return e();
    }

    public boolean a(Thread thread) {
        return true;
    }

    public boolean awaitTermination(long l1, TimeUnit timeunit) {
        return false;
    }

    public n e() {
        return e;
    }

    public void execute(Runnable runnable) {
        if (runnable == null)
            throw new NullPointerException("command");
        if (((Boolean)d.d()).booleanValue()) goto _L2; else goto _L1
_L1:
        d.b(Boolean.valueOf(true));
        runnable.run();
        runnable = (Queue)c.d();
        do {
            Runnable runnable1 = (Runnable)runnable.poll();
            if (runnable1 == null)
                break;
            try {
                runnable1.run();
            }
            catch (Throwable throwable) {
                b.c("Throwable caught while executing Runnable {}", runnable1, throwable);
            }
        } while (true);
        d.b(Boolean.valueOf(false));
_L4:
        return;
        Throwable throwable1;
        throwable1;
        b.c("Throwable caught while executing Runnable {}", runnable, throwable1);
        Queue queue1 = (Queue)c.d();
        do {
            runnable = (Runnable)queue1.poll();
            if (runnable == null)
                break;
            try {
                runnable.run();
            }
            catch (Throwable throwable2) {
                b.c("Throwable caught while executing Runnable {}", runnable, throwable2);
            }
        } while (true);
        d.b(Boolean.valueOf(false));
        continue; /* Loop/switch isn't completed */
        Exception exception;
        exception;
        Queue queue = (Queue)c.d();
        do {
            Runnable runnable2 = (Runnable)queue.poll();
            if (runnable2 != null) {
                try {
                    runnable2.run();
                }
                // Misplaced declaration of an exception variable
                catch (Runnable runnable) {
                    b.c("Throwable caught while executing Runnable {}", runnable2, runnable);
                }
            } else {
                d.b(Boolean.valueOf(false));
                throw exception;
            }
        } while (true);
_L2:
        ((Queue)c.d()).add(runnable);
        if (true) goto _L4; else goto _L3
_L3:
    }

    public boolean f() {
        return true;
    }

    public boolean isShutdown() {
        return false;
    }

    public boolean isTerminated() {
        return false;
    }

    public void shutdown() {
    }

}
