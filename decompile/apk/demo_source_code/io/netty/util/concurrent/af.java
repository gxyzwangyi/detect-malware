// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util.concurrent;

import java.util.Queue;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicLong;

// Referenced classes of package io.netty.util.concurrent:
//            ab, ae, d, i

final class af extends ab
    implements ae {

    static final boolean b;
    private static final AtomicLong c = new AtomicLong();
    private static final long d = System.nanoTime();
    private final long e;
    private long f;
    private final long g;

    af(d d1, Runnable runnable, Object obj, long l) {
        this(d1, a(runnable, obj), l);
    }

    af(d d1, Callable callable, long l) {
        super(d1, callable);
        e = c.getAndIncrement();
        f = l;
        g = 0L;
    }

    af(d d1, Callable callable, long l, long l1) {
        super(d1, callable);
        e = c.getAndIncrement();
        if (l1 == 0L) {
            throw new IllegalArgumentException("period: 0 (expected: != 0)");
        } else {
            f = l;
            g = l1;
            return;
        }
    }

    static long a(long l) {
        return c() + l;
    }

    static long c() {
        return System.nanoTime() - d;
    }

    public int a(Delayed delayed) {
        byte byte0 = -1;
        if (this != delayed) goto _L2; else goto _L1
_L1:
        int j = 0;
_L4:
        return j;
_L2:
        delayed = (af)delayed;
        long l = d() - delayed.d();
        j = byte0;
        if (l >= 0L)
            if (l > 0L) {
                j = 1;
            } else {
                j = byte0;
                if (e >= ((af) (delayed)).e) {
                    if (e == ((af) (delayed)).e)
                        throw new Error();
                    j = 1;
                }
            }
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected i a() {
        return super.a();
    }

    boolean a(boolean flag) {
        return super.cancel(flag);
    }

    public long b(long l) {
        return Math.max(0L, d() - (l - d));
    }

    public boolean cancel(boolean flag) {
        flag = super.cancel(flag);
        if (flag)
            ((d)a()).b(this);
        return flag;
    }

    public int compareTo(Object obj) {
        return a((Delayed)obj);
    }

    public long d() {
        return f;
    }

    public long e() {
        return Math.max(0L, d() - c());
    }

    public long getDelay(TimeUnit timeunit) {
        return timeunit.convert(e(), TimeUnit.NANOSECONDS);
    }

    protected StringBuilder q() {
        StringBuilder stringbuilder = super.q();
        stringbuilder.setCharAt(stringbuilder.length() - 1, ',');
        return stringbuilder.append(" id: ").append(e).append(", deadline: ").append(f).append(", period: ").append(g).append(')');
    }

    public void run() {
        if (!b && !a().f())
            throw new AssertionError();
        if (g != 0L) goto _L2; else goto _L1
_L1:
        if (b())
            c(a.call());
_L4:
        return;
_L2:
        if (isCancelled()) goto _L4; else goto _L3
_L3:
        a.call();
        if (a().isShutdown()) goto _L4; else goto _L5
_L5:
        long l = g;
        if (l <= 0L)
            break MISSING_BLOCK_LABEL_155;
        f = l + f;
_L7:
        if (isCancelled()) goto _L4; else goto _L6
_L6:
        Object obj = ((d)a()).c;
        if (b || obj != null)
            break MISSING_BLOCK_LABEL_167;
        try {
            obj = JVM INSTR new #161 <Class AssertionError>;
            ((AssertionError) (obj)).AssertionError();
            throw obj;
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            a(((Throwable) (obj)));
        }
          goto _L4
        f = c() - l;
          goto _L7
        ((Queue) (obj)).add(this);
          goto _L4
    }

    static  {
        boolean flag;
        if (!io/netty/util/concurrent/af.desiredAssertionStatus())
            flag = true;
        else
            flag = false;
        b = flag;
    }
}
