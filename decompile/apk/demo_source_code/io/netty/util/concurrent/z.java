// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util.concurrent;

import io.netty.util.internal.k;

// Referenced classes of package io.netty.util.concurrent:
//            y, p, n

public final class z {

    private int a;
    private int b;
    private boolean c;
    private y d;
    private Throwable e;
    private final p f = new p() {

        final z a;

        public void a(n n1) {
            z.a(a);
            if (!n1.g_() && z.b(a) == null)
                z.a(a, n1.j());
            if (z.c(a) == z.d(a) && z.e(a))
                z.f(a);
        }

             {
                a = z.this;
                super();
            }
    }
;

    public z() {
    }

    static int a(z z1) {
        int i = z1.b + 1;
        z1.b = i;
        return i;
    }

    static Throwable a(z z1, Throwable throwable) {
        z1.e = throwable;
        return throwable;
    }

    private boolean a() {
        boolean flag;
        if (e == null)
            flag = d.b(null);
        else
            flag = d.b(e);
        return flag;
    }

    static Throwable b(z z1) {
        return z1.e;
    }

    private void b() {
        if (c)
            throw new IllegalStateException("Adding promises is not allowed after finished adding");
        else
            return;
    }

    static int c(z z1) {
        return z1.b;
    }

    static int d(z z1) {
        return z1.a;
    }

    static boolean e(z z1) {
        return z1.c;
    }

    static boolean f(z z1) {
        return z1.a();
    }

    public void a(y y1) {
        b();
        a = a + 1;
        y1.g(f);
    }

    public void b(y y1) {
        if (c)
            throw new IllegalStateException("Already finished");
        c = true;
        d = (y)k.a(y1, "aggregatePromise");
        if (b == a)
            a();
    }
}
