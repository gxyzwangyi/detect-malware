// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util.concurrent;

import io.netty.util.internal.logging.b;
import io.netty.util.internal.logging.c;
import java.util.Queue;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicBoolean;

// Referenced classes of package io.netty.util.concurrent:
//            d, af, h, k, 
//            n

public final class r extends d {
    final class a
        implements Runnable {

        static final boolean a;
        final r b;

        public void run() {
            do {
                Object obj;
                do {
                    do {
                        obj = b.a();
                        if (obj == null)
                            break;
                        boolean flag;
                        try {
                            ((Runnable) (obj)).run();
                        }
                        catch (Throwable throwable) {
                            io.netty.util.concurrent.r.b().b("Unexpected exception from the global event executor: ", throwable);
                        }
                    } while (obj != b.e);
                    obj = b.c;
                } while (!b.b.isEmpty() || obj != null && ((Queue) (obj)).size() != 1);
                flag = r.a(b).compareAndSet(true, false);
                if (!a && !flag)
                    throw new AssertionError();
                while (b.b.isEmpty() && (obj == null || ((Queue) (obj)).size() == 1) || !r.a(b).compareAndSet(false, true)) 
                    return;
            } while (true);
        }

        static  {
            boolean flag;
            if (!io/netty/util/concurrent/r.desiredAssertionStatus())
                flag = true;
            else
                flag = false;
            a = flag;
        }

        a() {
            b = r.this;
            super();
        }
    }


    public static final r a = new r();
    private static final b h = c.a(io/netty/util/concurrent/r);
    private static final long i;
    final BlockingQueue b = new LinkedBlockingQueue();
    final af e;
    final ThreadFactory f = new h(io.netty.util.concurrent.h.a(getClass()), false, 5, null);
    volatile Thread g;
    private final a j = new a();
    private final AtomicBoolean k = new AtomicBoolean();
    private final n l = new k(this, new UnsupportedOperationException());

    private r() {
        e = new af(this, Executors.callable(new Runnable() {

            final r a;

            public void run() {
            }

             {
                a = r.this;
                super();
            }
        }
, null), af.a(i), -i);
        n().add(e);
    }

    static AtomicBoolean a(r r1) {
        return r1.k;
    }

    private void a(Runnable runnable) {
        if (runnable == null) {
            throw new NullPointerException("task");
        } else {
            b.add(runnable);
            return;
        }
    }

    static b b() {
        return h;
    }

    private void g() {
        long l1 = d.m();
        for (Runnable runnable = a(l1); runnable != null; runnable = a(l1))
            b.add(runnable);

    }

    private void h() {
        if (k.compareAndSet(false, true)) {
            Thread thread = f.newThread(j);
            g = thread;
            thread.start();
        }
    }

    public n a(long l1, long l2, TimeUnit timeunit) {
        return e();
    }

    Runnable a() {
        BlockingQueue blockingqueue = b;
_L4:
        Object obj = p();
        if (obj != null) goto _L2; else goto _L1
_L1:
        try {
            obj = (Runnable)blockingqueue.take();
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            obj = null;
        }
_L3:
        return ((Runnable) (obj));
_L2:
        long l1;
        l1 = ((af) (obj)).e();
        if (l1 <= 0L)
            break MISSING_BLOCK_LABEL_97;
        Runnable runnable = (Runnable)blockingqueue.poll(l1, TimeUnit.NANOSECONDS);
_L5:
        obj = runnable;
        if (runnable == null) {
            g();
            obj = (Runnable)blockingqueue.poll();
        }
        if (obj == null) goto _L4; else goto _L3
        InterruptedException interruptedexception;
        interruptedexception;
        interruptedexception = null;
          goto _L3
        runnable = (Runnable)blockingqueue.poll();
          goto _L5
    }

    public boolean a(Thread thread) {
        boolean flag;
        if (thread == g)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean awaitTermination(long l1, TimeUnit timeunit) {
        return false;
    }

    public n e() {
        return l;
    }

    public void execute(Runnable runnable) {
        if (runnable == null)
            throw new NullPointerException("task");
        a(runnable);
        if (!f())
            h();
    }

    public boolean isShutdown() {
        return false;
    }

    public boolean isTerminated() {
        return false;
    }

    public void shutdown() {
        throw new UnsupportedOperationException();
    }

    static  {
        i = TimeUnit.SECONDS.toNanos(1L);
    }
}
