// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util.concurrent;

import io.netty.util.internal.PlatformDependent;
import io.netty.util.internal.k;
import io.netty.util.internal.logging.b;
import io.netty.util.internal.logging.c;
import io.netty.util.internal.n;
import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;

// Referenced classes of package io.netty.util.concurrent:
//            d, v, g, r, 
//            ac, af, j, ah, 
//            y, n, i

public abstract class ag extends d
    implements v {
    private static final class a
        implements ah {

        private final Thread a;

        a(Thread thread) {
            a = thread;
        }
    }


    private static final b a = io.netty.util.internal.logging.c.a(io/netty/util/concurrent/ag);
    private static final Runnable b = new Runnable() {

        public void run() {
        }

    }
;
    static final int e = Math.max(16, io.netty.util.internal.n.a("io.netty.eventexecutor.maxPendingTasks", 0x7fffffff));
    static final boolean f;
    private static final AtomicIntegerFieldUpdater g;
    private static final long w;
    private final j h;
    private final Queue i;
    private final Thread j;
    private final ah k;
    private final Semaphore l = new Semaphore(0);
    private final Set m = new LinkedHashSet();
    private final boolean n;
    private final int o;
    private final ac p;
    private long q;
    private volatile int r;
    private volatile long s;
    private volatile long t;
    private long u;
    private final y v;

    protected ag(j j1, ThreadFactory threadfactory, boolean flag, int i1, ac ac1) {
        r = 1;
        v = new g(r.a);
        if (threadfactory == null) {
            throw new NullPointerException("threadFactory");
        } else {
            h = j1;
            n = flag;
            j = threadfactory.newThread(new Runnable() {

                final ag a;

                public void run() {
                    a.u();
                    a.h();
                    int k1;
                    do
                        k1 = ag.z().get(a);
                    while (k1 < 3 && !ag.z().compareAndSet(a, k1, 3));
                    if (ag.a(a) == 0L)
                        ag.y().d((new StringBuilder()).append("Buggy ").append(io/netty/util/concurrent/i.getSimpleName()).append(" implementation; ").append(io/netty/util/concurrent/ag.getSimpleName()).append(".confirmShutdown() must be called ").append("before run() implementation terminates.").toString());
                    boolean flag1;
                    do
                        flag1 = a.w();
                    while (!flag1);
                    a.i();
                    ag.z().set(a, 5);
                    io.netty.util.concurrent.ag.b(a).release();
                    if (!io.netty.util.concurrent.ag.c(a).isEmpty())
                        ag.y().c((new StringBuilder()).append("An event executor terminated with non-empty task queue (").append(io.netty.util.concurrent.ag.c(a).size()).append(')').toString());
                    ag.d(a).a(null);
_L2:
                    return;
                    Object obj;
                    obj;
                    ag.z().set(a, 5);
                    io.netty.util.concurrent.ag.b(a).release();
                    if (!io.netty.util.concurrent.ag.c(a).isEmpty())
                        ag.y().c((new StringBuilder()).append("An event executor terminated with non-empty task queue (").append(io.netty.util.concurrent.ag.c(a).size()).append(')').toString());
                    ag.d(a).a(null);
                    throw obj;
                    obj;
                    a.i();
                    ag.z().set(a, 5);
                    io.netty.util.concurrent.ag.b(a).release();
                    if (!io.netty.util.concurrent.ag.c(a).isEmpty())
                        ag.y().c((new StringBuilder()).append("An event executor terminated with non-empty task queue (").append(io.netty.util.concurrent.ag.c(a).size()).append(')').toString());
                    ag.d(a).a(null);
                    throw obj;
                    obj;
                    ag.z().set(a, 5);
                    io.netty.util.concurrent.ag.b(a).release();
                    if (!io.netty.util.concurrent.ag.c(a).isEmpty())
                        ag.y().c((new StringBuilder()).append("An event executor terminated with non-empty task queue (").append(io.netty.util.concurrent.ag.c(a).size()).append(')').toString());
                    ag.d(a).a(null);
                    throw obj;
                    obj;
                    ag.y().b("Unexpected exception from an event executor: ", ((Throwable) (obj)));
                    int l1;
                    do
                        l1 = ag.z().get(a);
                    while (l1 < 3 && !ag.z().compareAndSet(a, l1, 3));
                    do
                        flag1 = a.w();
                    while (!flag1);
                    a.i();
                    ag.z().set(a, 5);
                    io.netty.util.concurrent.ag.b(a).release();
                    if (!io.netty.util.concurrent.ag.c(a).isEmpty())
                        ag.y().c((new StringBuilder()).append("An event executor terminated with non-empty task queue (").append(io.netty.util.concurrent.ag.c(a).size()).append(')').toString());
                    ag.d(a).a(null);
                    if (true) goto _L2; else goto _L1
_L1:
                    obj;
                    ag.z().set(a, 5);
                    io.netty.util.concurrent.ag.b(a).release();
                    if (!io.netty.util.concurrent.ag.c(a).isEmpty())
                        ag.y().c((new StringBuilder()).append("An event executor terminated with non-empty task queue (").append(io.netty.util.concurrent.ag.c(a).size()).append(')').toString());
                    ag.d(a).a(null);
                    throw obj;
                    obj;
                    a.i();
                    ag.z().set(a, 5);
                    io.netty.util.concurrent.ag.b(a).release();
                    if (!io.netty.util.concurrent.ag.c(a).isEmpty())
                        ag.y().c((new StringBuilder()).append("An event executor terminated with non-empty task queue (").append(io.netty.util.concurrent.ag.c(a).size()).append(')').toString());
                    ag.d(a).a(null);
                    throw obj;
                    obj;
                    ag.z().set(a, 5);
                    io.netty.util.concurrent.ag.b(a).release();
                    if (!io.netty.util.concurrent.ag.c(a).isEmpty())
                        ag.y().c((new StringBuilder()).append("An event executor terminated with non-empty task queue (").append(io.netty.util.concurrent.ag.c(a).size()).append(')').toString());
                    ag.d(a).a(null);
                    throw obj;
                    obj;
                    do
                        l1 = ag.z().get(a);
                    while (l1 < 3 && !ag.z().compareAndSet(a, l1, 3));
                    do
                        flag1 = a.w();
                    while (!flag1);
                    a.i();
                    ag.z().set(a, 5);
                    io.netty.util.concurrent.ag.b(a).release();
                    if (!io.netty.util.concurrent.ag.c(a).isEmpty())
                        ag.y().c((new StringBuilder()).append("An event executor terminated with non-empty task queue (").append(io.netty.util.concurrent.ag.c(a).size()).append(')').toString());
                    ag.d(a).a(null);
                    throw obj;
                    obj;
                    ag.z().set(a, 5);
                    io.netty.util.concurrent.ag.b(a).release();
                    if (!io.netty.util.concurrent.ag.c(a).isEmpty())
                        ag.y().c((new StringBuilder()).append("An event executor terminated with non-empty task queue (").append(io.netty.util.concurrent.ag.c(a).size()).append(')').toString());
                    ag.d(a).a(null);
                    throw obj;
                    obj;
                    a.i();
                    ag.z().set(a, 5);
                    io.netty.util.concurrent.ag.b(a).release();
                    if (!io.netty.util.concurrent.ag.c(a).isEmpty())
                        ag.y().c((new StringBuilder()).append("An event executor terminated with non-empty task queue (").append(io.netty.util.concurrent.ag.c(a).size()).append(')').toString());
                    ag.d(a).a(null);
                    throw obj;
                    obj;
                    ag.z().set(a, 5);
                    io.netty.util.concurrent.ag.b(a).release();
                    if (!io.netty.util.concurrent.ag.c(a).isEmpty())
                        ag.y().c((new StringBuilder()).append("An event executor terminated with non-empty task queue (").append(io.netty.util.concurrent.ag.c(a).size()).append(')').toString());
                    ag.d(a).a(null);
                    throw obj;
                }

             {
                a = ag.this;
                super();
            }
            }
);
            k = new a(j);
            o = Math.max(16, i1);
            i = r();
            p = (ac)io.netty.util.internal.k.a(ac1, "rejectedHandler");
            return;
        }
    }

    static long a(ag ag1) {
        return ag1.u;
    }

    private void a(String s1) {
        if (f())
            throw new RejectedExecutionException((new StringBuilder()).append("Calling ").append(s1).append(" from within the EventLoop is not allowed").toString());
        else
            return;
    }

    private boolean a() {
        long l1;
        Runnable runnable;
        l1 = io.netty.util.concurrent.d.m();
        runnable = a(l1);
_L3:
        if (runnable == null)
            break MISSING_BLOCK_LABEL_59;
        if (i.offer(runnable)) goto _L2; else goto _L1
_L1:
        boolean flag;
        n().add((af)runnable);
        flag = false;
_L4:
        return flag;
_L2:
        runnable = a(l1);
          goto _L3
        flag = true;
          goto _L4
    }

    static Semaphore b(ag ag1) {
        return ag1.l;
    }

    static Queue c(ag ag1) {
        return ag1.i;
    }

    static y d(ag ag1) {
        return ag1.v;
    }

    private boolean g() {
        boolean flag = false;
_L5:
        Object obj;
        if (m.isEmpty())
            break MISSING_BLOCK_LABEL_91;
        obj = new ArrayList(m);
        m.clear();
        obj = ((List) (obj)).iterator();
_L2:
        Runnable runnable;
        if (!((Iterator) (obj)).hasNext())
            continue; /* Loop/switch isn't completed */
        runnable = (Runnable)((Iterator) (obj)).next();
        runnable.run();
_L3:
        flag = true;
        if (true) goto _L2; else goto _L1
_L1:
        continue; /* Loop/switch isn't completed */
        Throwable throwable;
        throwable;
        a.b("Shutdown hook raised an exception.", throwable);
          goto _L3
        Exception exception;
        exception;
        throw exception;
        if (flag)
            q = io.netty.util.concurrent.af.c();
        return flag;
        if (true) goto _L5; else goto _L4
_L4:
    }

    private void k() {
        if (g.get(this) == 1 && g.compareAndSet(this, 1, 2))
            j.start();
    }

    protected static void x() {
        throw new RejectedExecutionException("event executor terminated");
    }

    static b y() {
        return a;
    }

    static AtomicIntegerFieldUpdater z() {
        return g;
    }

    public io.netty.util.concurrent.n a(long l1, long l2, TimeUnit timeunit) {
        if (l1 < 0L)
            throw new IllegalArgumentException((new StringBuilder()).append("quietPeriod: ").append(l1).append(" (expected >= 0)").toString());
        if (l2 < l1)
            throw new IllegalArgumentException((new StringBuilder()).append("timeout: ").append(l2).append(" (expected >= quietPeriod (").append(l1).append("))").toString());
        if (timeunit == null)
            throw new NullPointerException("unit");
        if (!v()) goto _L2; else goto _L1
_L1:
        timeunit = e();
_L8:
        return timeunit;
_L2:
        boolean flag1 = f();
_L4:
        int i1;
        boolean flag;
        int j1;
        if (v()) {
            timeunit = e();
            continue; /* Loop/switch isn't completed */
        }
        j1 = g.get(this);
        if (!flag1)
            break; /* Loop/switch isn't completed */
        i1 = 3;
        flag = true;
_L6:
        if (g.compareAndSet(this, j1, i1)) {
            s = timeunit.toNanos(l1);
            t = timeunit.toNanos(l2);
            if (j1 == 1)
                j.start();
            if (flag)
                a(flag1);
            timeunit = e();
            continue; /* Loop/switch isn't completed */
        }
        if (true) goto _L4; else goto _L3
_L3:
        switch (j1) {
        default:
            flag = false;
            i1 = j1;
            break;

        case 1: // '\001'
        case 2: // '\002'
            i1 = 3;
            flag = true;
            break;
        }
        if (true) goto _L6; else goto _L5
_L5:
        if (true) goto _L8; else goto _L7
_L7:
    }

    protected Queue a(int i1) {
        return new LinkedBlockingQueue(i1);
    }

    protected void a(boolean flag) {
        if (!flag || g.get(this) == 3)
            i.offer(b);
    }

    protected boolean a(Runnable runnable) {
        return true;
    }

    public boolean a(Thread thread) {
        boolean flag;
        if (thread == j)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean awaitTermination(long l1, TimeUnit timeunit) {
        if (timeunit == null)
            throw new NullPointerException("unit");
        if (f())
            throw new IllegalStateException("cannot await termination of the current thread");
        if (l.tryAcquire(l1, timeunit))
            l.release();
        return isTerminated();
    }

    public int b() {
        return i.size();
    }

    protected boolean b(long l1) {
        Object obj;
        a();
        obj = j();
        if (obj != null) goto _L2; else goto _L1
_L1:
        boolean flag = false;
_L3:
        return flag;
_L2:
        long l2;
        long l4;
        l4 = io.netty.util.concurrent.af.c();
        l2 = 0L;
_L5:
        long l3;
        try {
            ((Runnable) (obj)).run();
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            a.b("A task raised an exception.", ((Throwable) (obj)));
        }
        l3 = 1L + l2;
        if ((63L & l3) != 0L)
            break MISSING_BLOCK_LABEL_96;
        l2 = io.netty.util.concurrent.af.c();
        if (l2 < l4 + l1)
            break MISSING_BLOCK_LABEL_96;
        l1 = l2;
_L4:
        q = l1;
        flag = true;
          goto _L3
label0:
        {
            obj = j();
            if (obj != null)
                break label0;
            l1 = io.netty.util.concurrent.af.c();
        }
          goto _L4
        l2 = l3;
          goto _L5
    }

    protected long c(long l1) {
        af af1 = p();
        if (af1 == null)
            l1 = w;
        else
            l1 = af1.b(l1);
        return l1;
    }

    protected void c(Runnable runnable) {
        if (runnable == null)
            throw new NullPointerException("task");
        if (!d(runnable))
            p.a(runnable, this);
    }

    final boolean d(Runnable runnable) {
        if (isShutdown())
            x();
        return i.offer(runnable);
    }

    public io.netty.util.concurrent.n e() {
        return v;
    }

    protected boolean e(Runnable runnable) {
        if (runnable == null)
            throw new NullPointerException("task");
        else
            return i.remove(runnable);
    }

    public void execute(Runnable runnable) {
        boolean flag;
        if (runnable == null)
            throw new NullPointerException("task");
        flag = f();
        if (!flag) goto _L2; else goto _L1
_L1:
        c(runnable);
_L4:
        if (!n && a(runnable))
            a(flag);
        return;
_L2:
        k();
        c(runnable);
        if (isShutdown() && e(runnable))
            x();
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected abstract void h();

    protected void i() {
    }

    public List invokeAll(Collection collection) {
        a("invokeAll");
        return super.invokeAll(collection);
    }

    public List invokeAll(Collection collection, long l1, TimeUnit timeunit) {
        a("invokeAll");
        return super.invokeAll(collection, l1, timeunit);
    }

    public Object invokeAny(Collection collection) {
        a("invokeAny");
        return super.invokeAny(collection);
    }

    public Object invokeAny(Collection collection, long l1, TimeUnit timeunit) {
        a("invokeAny");
        return super.invokeAny(collection, l1, timeunit);
    }

    public boolean isShutdown() {
        boolean flag;
        if (g.get(this) >= 4)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean isTerminated() {
        boolean flag;
        if (g.get(this) == 5)
            flag = true;
        else
            flag = false;
        return flag;
    }

    protected Runnable j() {
        if (!f && !f())
            throw new AssertionError();
        Runnable runnable;
        do
            runnable = (Runnable)i.poll();
        while (runnable == b);
        return runnable;
    }

    protected Queue r() {
        return a(o);
    }

    protected boolean s() {
        if (!f && !f())
            throw new AssertionError();
        boolean flag;
        if (!i.isEmpty())
            flag = true;
        else
            flag = false;
        return flag;
    }

    public void shutdown() {
        if (!isShutdown()) goto _L2; else goto _L1
_L1:
        return;
_L2:
        boolean flag1 = f();
_L4:
        int i1;
        boolean flag;
        int j1;
        if (v())
            continue; /* Loop/switch isn't completed */
        j1 = g.get(this);
        if (!flag1)
            break; /* Loop/switch isn't completed */
        i1 = 4;
        flag = true;
_L6:
        if (g.compareAndSet(this, j1, i1)) {
            if (j1 == 1)
                j.start();
            if (flag)
                a(flag1);
            continue; /* Loop/switch isn't completed */
        }
        if (true) goto _L4; else goto _L3
_L3:
        switch (j1) {
        default:
            flag = false;
            i1 = j1;
            break;

        case 1: // '\001'
        case 2: // '\002'
        case 3: // '\003'
            i1 = 4;
            flag = true;
            break;
        }
        if (true) goto _L6; else goto _L5
_L5:
        if (true) goto _L1; else goto _L7
_L7:
    }

    protected boolean t() {
_L2:
        boolean flag = a();
        Runnable runnable1 = j();
        Runnable runnable = runnable1;
        if (runnable1 == null) {
            flag = false;
        } else {
            do {
                Runnable runnable2;
                try {
                    runnable.run();
                }
                catch (Throwable throwable) {
                    a.b("A task raised an exception.", throwable);
                }
                runnable2 = j();
                runnable = runnable2;
            } while (runnable2 != null);
            if (!flag)
                continue; /* Loop/switch isn't completed */
            q = io.netty.util.concurrent.af.c();
            flag = true;
        }
        return flag;
        if (true) goto _L2; else goto _L1
_L1:
    }

    protected void u() {
        q = io.netty.util.concurrent.af.c();
    }

    public boolean v() {
        boolean flag;
        if (g.get(this) >= 3)
            flag = true;
        else
            flag = false;
        return flag;
    }

    protected boolean w() {
        boolean flag = false;
        if (v()) {
            if (!f())
                throw new IllegalStateException("must be invoked from an event loop");
            d();
            if (u == 0L)
                u = io.netty.util.concurrent.af.c();
            if (t() || g()) {
                if (isShutdown())
                    flag = true;
                else
                    a(true);
            } else {
                long l1 = io.netty.util.concurrent.af.c();
                if (isShutdown() || l1 - u > t)
                    flag = true;
                else
                if (l1 - q <= s) {
                    a(true);
                    try {
                        Thread.sleep(100L);
                    }
                    catch (InterruptedException interruptedexception) { }
                } else {
                    flag = true;
                }
            }
        }
        return flag;
    }

    static  {
        boolean flag;
        AtomicIntegerFieldUpdater atomicintegerfieldupdater;
        AtomicIntegerFieldUpdater atomicintegerfieldupdater1;
        if (!io/netty/util/concurrent/ag.desiredAssertionStatus())
            flag = true;
        else
            flag = false;
        f = flag;
        atomicintegerfieldupdater1 = PlatformDependent.b(io/netty/util/concurrent/ag, "r");
        atomicintegerfieldupdater = atomicintegerfieldupdater1;
        if (atomicintegerfieldupdater1 == null)
            atomicintegerfieldupdater = AtomicIntegerFieldUpdater.newUpdater(io/netty/util/concurrent/ag, "r");
        g = atomicintegerfieldupdater;
        w = TimeUnit.SECONDS.toNanos(1L);
    }
}
