// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util.concurrent;

import java.util.*;
import java.util.concurrent.*;

// Referenced classes of package io.netty.util.concurrent:
//            i, n, ab, ae

public abstract class a extends AbstractExecutorService
    implements i {

    private final Set a = Collections.singleton(this);

    public a() {
    }

    public ae a(Runnable runnable, long l1, long l2, TimeUnit timeunit) {
        throw new UnsupportedOperationException();
    }

    public ae a(Runnable runnable, long l1, TimeUnit timeunit) {
        throw new UnsupportedOperationException();
    }

    public ae a(Callable callable, long l1, TimeUnit timeunit) {
        throw new UnsupportedOperationException();
    }

    public n a(Runnable runnable, Object obj) {
        return (n)super.submit(runnable, obj);
    }

    public n a(Callable callable) {
        return (n)super.submit(callable);
    }

    public ae b(Runnable runnable, long l1, long l2, TimeUnit timeunit) {
        throw new UnsupportedOperationException();
    }

    public n b(Runnable runnable) {
        return (n)super.submit(runnable);
    }

    public i c() {
        return this;
    }

    public boolean f() {
        return a(Thread.currentThread());
    }

    public Iterator iterator() {
        return a.iterator();
    }

    public n l() {
        return a(2L, 15L, TimeUnit.SECONDS);
    }

    protected final RunnableFuture newTaskFor(Runnable runnable, Object obj) {
        return new ab(this, runnable, obj);
    }

    protected final RunnableFuture newTaskFor(Callable callable) {
        return new ab(this, callable);
    }

    public ScheduledFuture schedule(Runnable runnable, long l1, TimeUnit timeunit) {
        return a(runnable, l1, timeunit);
    }

    public ScheduledFuture schedule(Callable callable, long l1, TimeUnit timeunit) {
        return a(callable, l1, timeunit);
    }

    public ScheduledFuture scheduleAtFixedRate(Runnable runnable, long l1, long l2, TimeUnit timeunit) {
        return a(runnable, l1, l2, timeunit);
    }

    public ScheduledFuture scheduleWithFixedDelay(Runnable runnable, long l1, long l2, TimeUnit timeunit) {
        return b(runnable, l1, l2, timeunit);
    }

    public abstract void shutdown();

    public List shutdownNow() {
        shutdown();
        return Collections.emptyList();
    }

    public Future submit(Runnable runnable) {
        return b(runnable);
    }

    public Future submit(Runnable runnable, Object obj) {
        return a(runnable, obj);
    }

    public Future submit(Callable callable) {
        return a(callable);
    }
}
