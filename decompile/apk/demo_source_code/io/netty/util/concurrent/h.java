// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util.concurrent;

import io.netty.util.internal.m;
import java.util.Locale;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.atomic.AtomicInteger;

// Referenced classes of package io.netty.util.concurrent:
//            m, l

public class h
    implements ThreadFactory {
    private static final class a
        implements Runnable {

        private final Runnable a;

        public void run() {
            a.run();
            l.c();
            return;
            Exception exception;
            exception;
            l.c();
            throw exception;
        }

        a(Runnable runnable) {
            a = runnable;
        }
    }


    private static final AtomicInteger b = new AtomicInteger();
    protected final ThreadGroup a;
    private final AtomicInteger c;
    private final String d;
    private final boolean e;
    private final int f;

    public h(Class class1) {
        this(class1, false, 5);
    }

    public h(Class class1, int i) {
        this(class1, false, i);
    }

    public h(Class class1, boolean flag, int i) {
        this(a(class1), flag, i);
    }

    public h(String s, boolean flag, int i) {
        ThreadGroup threadgroup;
        if (System.getSecurityManager() == null)
            threadgroup = Thread.currentThread().getThreadGroup();
        else
            threadgroup = System.getSecurityManager().getThreadGroup();
        this(s, flag, i, threadgroup);
    }

    public h(String s, boolean flag, int i, ThreadGroup threadgroup) {
        c = new AtomicInteger();
        if (s == null)
            throw new NullPointerException("poolName");
        if (i < 1 || i > 10) {
            throw new IllegalArgumentException((new StringBuilder()).append("priority: ").append(i).append(" (expected: Thread.MIN_PRIORITY <= priority <= Thread.MAX_PRIORITY)").toString());
        } else {
            d = (new StringBuilder()).append(s).append('-').append(b.incrementAndGet()).append('-').toString();
            e = flag;
            f = i;
            a = threadgroup;
            return;
        }
    }

    public static String a(Class class1) {
        String s;
        if (class1 == null)
            throw new NullPointerException("poolType");
        s = m.a(class1);
        s.length();
        JVM INSTR tableswitch 0 1: default 44
    //                   0 102
    //                   1 108;
           goto _L1 _L2 _L3
_L1:
        class1 = s;
        if (!Character.isUpperCase(s.charAt(0)))
            break; /* Loop/switch isn't completed */
        class1 = s;
        if (Character.isLowerCase(s.charAt(1)))
            class1 = (new StringBuilder()).append(Character.toLowerCase(s.charAt(0))).append(s.substring(1)).toString();
_L5:
        return class1;
_L2:
        class1 = "unknown";
        continue; /* Loop/switch isn't completed */
_L3:
        class1 = s.toLowerCase(Locale.US);
        if (true) goto _L5; else goto _L4
_L4:
    }

    protected Thread a(Runnable runnable, String s) {
        return new io.netty.util.concurrent.m(a, runnable, s);
    }

    public Thread newThread(Runnable runnable) {
        Thread thread = a(new a(runnable), (new StringBuilder()).append(d).append(c.incrementAndGet()).toString());
        if (!thread.isDaemon()) goto _L2; else goto _L1
_L1:
        if (!e)
            thread.setDaemon(false);
_L4:
        if (thread.getPriority() != f)
            thread.setPriority(f);
_L5:
        return thread;
_L2:
        if (!e) goto _L4; else goto _L3
_L3:
        thread.setDaemon(true);
          goto _L4
        runnable;
          goto _L5
    }

}
