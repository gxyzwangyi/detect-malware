// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util.concurrent;

import java.util.concurrent.Callable;
import java.util.concurrent.RunnableFuture;

// Referenced classes of package io.netty.util.concurrent:
//            g, i, y

class ab extends g
    implements RunnableFuture {
    private static final class a
        implements Callable {

        final Runnable a;
        final Object b;

        public Object call() {
            a.run();
            return b;
        }

        public String toString() {
            return (new StringBuilder()).append("Callable(task: ").append(a).append(", result: ").append(b).append(')').toString();
        }

        a(Runnable runnable, Object obj) {
            a = runnable;
            b = obj;
        }
    }


    protected final Callable a;

    ab(i i, Runnable runnable, Object obj) {
        this(i, a(runnable, obj));
    }

    ab(i i, Callable callable) {
        super(i);
        a = callable;
    }

    static Callable a(Runnable runnable, Object obj) {
        return new a(runnable, obj);
    }

    public final y a(Object obj) {
        throw new IllegalStateException();
    }

    protected final y a(Throwable throwable) {
        super.c(throwable);
        return this;
    }

    protected final boolean b() {
        return super.f_();
    }

    public final boolean b(Object obj) {
        return false;
    }

    public final boolean b(Throwable throwable) {
        return false;
    }

    protected final y c(Object obj) {
        super.a(obj);
        return this;
    }

    public final y c(Throwable throwable) {
        throw new IllegalStateException();
    }

    public final boolean equals(Object obj) {
        boolean flag;
        if (this == obj)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public final boolean f_() {
        throw new IllegalStateException();
    }

    public final int hashCode() {
        return System.identityHashCode(this);
    }

    protected StringBuilder q() {
        StringBuilder stringbuilder = super.q();
        stringbuilder.setCharAt(stringbuilder.length() - 1, ',');
        return stringbuilder.append(" task: ").append(a).append(')');
    }

    public void run() {
        if (b())
            c(a.call());
_L1:
        return;
        Throwable throwable;
        throwable;
        a(throwable);
          goto _L1
    }
}
