// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util;

import io.netty.util.internal.PlatformDependent;
import io.netty.util.internal.logging.b;
import io.netty.util.internal.logging.c;
import io.netty.util.internal.n;
import java.lang.reflect.Constructor;
import java.security.AccessController;
import java.security.PrivilegedAction;

// Referenced classes of package io.netty.util:
//            ResourceLeakDetector

public abstract class k {
    private static final class a extends k {

        private final Constructor a;

        private static Constructor a(String s) {
            Object obj = Class.forName(s, true, PlatformDependent.p());
            if (!io/netty/util/ResourceLeakDetector.isAssignableFrom(((Class) (obj)))) goto _L2; else goto _L1
_L1:
            obj = ((Class) (obj)).getConstructor(new Class[] {
                java/lang/Class, Integer.TYPE, Long.TYPE
            });
            s = ((String) (obj));
_L4:
            return s;
_L2:
            try {
                io.netty.util.k.b().d("Class {} does not inherit from ResourceLeakDetector.", s);
            }
            catch (Throwable throwable) {
                io.netty.util.k.b().e("Could not load custom resource leak detector class provided: {}", s, throwable);
            }
            s = null;
            if (true) goto _L4; else goto _L3
_L3:
        }

        public ResourceLeakDetector a(Class class1, int i, long l) {
            if (a == null) goto _L2; else goto _L1
_L1:
            ResourceLeakDetector resourceleakdetector;
            resourceleakdetector = (ResourceLeakDetector)a.newInstance(new Object[] {
                class1, Integer.valueOf(i), Long.valueOf(l)
            });
            io.netty.util.k.b().b("Loaded custom ResourceLeakDetector: {}", a.getDeclaringClass().getName());
            class1 = resourceleakdetector;
_L4:
            return class1;
            Throwable throwable;
            throwable;
            io.netty.util.k.b().c("Could not load custom resource leak detector provided: {} with the given resource: {}", new Object[] {
                a.getDeclaringClass().getName(), class1, throwable
            });
_L2:
            class1 = new ResourceLeakDetector(class1, i, l);
            io.netty.util.k.b().b("Loaded default ResourceLeakDetector: {}", class1);
            if (true) goto _L4; else goto _L3
_L3:
        }

        a() {
            Object obj;
            try {
                obj = JVM INSTR new #7   <Class k$a$1>;
                ((_cls1) (obj))._cls1(this);
                obj = (String)AccessController.doPrivileged(((PrivilegedAction) (obj)));
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) {
                io.netty.util.k.b().c("Could not access System property: io.netty.customResourceLeakDetector", ((Throwable) (obj)));
                obj = null;
            }
            if (obj == null)
                obj = null;
            else
                obj = a(((String) (obj)));
            a = ((Constructor) (obj));
        }
    }


    private static final b a = c.a(io/netty/util/k);
    private static volatile k b = new a();

    public k() {
    }

    public static k a() {
        return b;
    }

    static b b() {
        return a;
    }

    public final ResourceLeakDetector a(Class class1) {
        return a(class1, 128, 0xffffffffL);
    }

    public abstract ResourceLeakDetector a(Class class1, int i, long l);


    // Unreferenced inner class io/netty/util/k$a$1

/* anonymous class */
    class a._cls1
        implements PrivilegedAction {

        final a a;

        public String a() {
            return n.b("io.netty.customResourceLeakDetector");
        }

        public Object run() {
            return a();
        }

             {
                a = a1;
                super();
            }
    }

}
