// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util;

import io.netty.util.internal.PlatformDependent;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;

// Referenced classes of package io.netty.util:
//            i, IllegalReferenceCountException

public abstract class a
    implements i {

    private static final AtomicIntegerFieldUpdater a;
    private volatile int b;

    public a() {
        b = 1;
    }

    public final boolean B() {
        boolean flag = true;
        int j;
        do {
            j = b;
            if (j == 0)
                throw new IllegalReferenceCountException(0, -1);
        } while (!a.compareAndSet(this, j, j - 1));
        if (j == 1)
            e();
        else
            flag = false;
        return flag;
    }

    public i C() {
        int j;
        do {
            j = b;
            if (j == 0 || j == 0x7fffffff)
                throw new IllegalReferenceCountException(j, 1);
        } while (!a.compareAndSet(this, j, j + 1));
        return this;
    }

    protected abstract void e();

    public final int z() {
        return b;
    }

    static  {
        AtomicIntegerFieldUpdater atomicintegerfieldupdater1 = PlatformDependent.b(io/netty/util/a, "b");
        AtomicIntegerFieldUpdater atomicintegerfieldupdater = atomicintegerfieldupdater1;
        if (atomicintegerfieldupdater1 == null)
            atomicintegerfieldupdater = AtomicIntegerFieldUpdater.newUpdater(io/netty/util/a, "b");
        a = atomicintegerfieldupdater;
    }
}
