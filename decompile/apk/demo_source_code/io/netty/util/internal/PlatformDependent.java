// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util.internal;

import io.netty.util.e;
import io.netty.util.internal.chmv8.ConcurrentHashMapV8;
import io.netty.util.internal.chmv8.LongAdderV8;
import io.netty.util.internal.logging.b;
import io.netty.util.internal.logging.c;
import io.netty.util.internal.shaded.org.jctools.queues.atomic.d;
import io.netty.util.internal.shaded.org.jctools.queues.k;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.Method;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.List;
import java.util.Locale;
import java.util.Queue;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

// Referenced classes of package io.netty.util.internal:
//            n, l, OutOfDirectMemoryError, f, 
//            g

public final class PlatformDependent {
    private static final class AtomicLongCounter extends AtomicLong
        implements g {

        public void a() {
            incrementAndGet();
        }

        public void a(long l1) {
            addAndGet(l1);
        }

        private AtomicLongCounter() {
        }

    }


    public static final boolean a;
    static final boolean b;
    private static final b c;
    private static final Pattern d = Pattern.compile("\\s*-XX:MaxDirectMemorySize\\s*=\\s*([0-9]+)\\s*([kKmMgG]?)\\s*$");
    private static final boolean e = r();
    private static final boolean f = s();
    private static volatile Boolean g;
    private static final int h;
    private static final boolean i;
    private static final boolean j;
    private static final boolean k;
    private static final boolean l;
    private static final long m = x();
    private static final long n = w();
    private static final boolean o = y();
    private static final File p = z();
    private static final int q = A();
    private static final int r = B();
    private static final boolean s;
    private static final AtomicLong t;
    private static final long u;

    private PlatformDependent() {
    }

    private static int A() {
        int i1 = io.netty.util.internal.n.a("io.netty.bitMode", 0);
        if (i1 <= 0) goto _L2; else goto _L1
_L1:
        c.b("-Dio.netty.bitMode: {}", Integer.valueOf(i1));
_L10:
        return i1;
_L2:
        i1 = io.netty.util.internal.n.a("sun.arch.data.model", 0);
        if (i1 <= 0) goto _L4; else goto _L3
_L3:
        c.b("-Dio.netty.bitMode: {} (sun.arch.data.model)", Integer.valueOf(i1));
          goto _L5
_L4:
        i1 = io.netty.util.internal.n.a("com.ibm.vm.bitmode", 0);
        if (i1 <= 0) goto _L7; else goto _L6
_L6:
        c.b("-Dio.netty.bitMode: {} (com.ibm.vm.bitmode)", Integer.valueOf(i1));
          goto _L5
_L7:
        Object obj = io.netty.util.internal.n.a("os.arch", "").toLowerCase(Locale.US).trim();
        if (!"amd64".equals(obj) && !"x86_64".equals(obj)) goto _L9; else goto _L8
_L8:
        i1 = 64;
_L11:
        if (i1 > 0)
            c.b("-Dio.netty.bitMode: {} (os.arch: {})", Integer.valueOf(i1), obj);
        obj = io.netty.util.internal.n.a("java.vm.name", "").toLowerCase(Locale.US);
        obj = Pattern.compile("([1-9][0-9]+)-?bit").matcher(((CharSequence) (obj)));
        if (((Matcher) (obj)).find())
            i1 = Integer.parseInt(((Matcher) (obj)).group(1));
        else
            i1 = 64;
_L5:
        if (true) goto _L10; else goto _L9
_L9:
        if ("i386".equals(obj) || "i486".equals(obj) || "i586".equals(obj) || "i686".equals(obj))
            i1 = 32;
          goto _L11
    }

    private static int B() {
        int i1;
        if (!f())
            i1 = -1;
        else
            i1 = io.netty.util.internal.l.g();
        return i1;
    }

    public static byte a(long l1) {
        return io.netty.util.internal.l.a(l1);
    }

    public static byte a(byte abyte0[], int i1) {
        return io.netty.util.internal.l.a(abyte0, i1);
    }

    static int a(String s1) {
        s1 = s1.split("\\.");
        int ai[] = new int[s1.length];
        for (int i1 = 0; i1 < s1.length; i1++)
            ai[i1] = Integer.parseInt(s1[i1]);

        int j1;
        if (ai[0] == 1) {
            if (!b && ai[1] < 6)
                throw new AssertionError();
            j1 = ai[1];
        } else {
            j1 = ai[0];
        }
        return j1;
    }

    public static ClassLoader a(Class class1) {
        return io.netty.util.internal.l.a(class1);
    }

    public static ByteBuffer a(int i1) {
        if (!b && !s)
            throw new AssertionError();
        d(i1);
        ByteBuffer bytebuffer;
        try {
            bytebuffer = io.netty.util.internal.l.a(i1);
        }
        catch (Throwable throwable) {
            e(i1);
            a(throwable);
            throwable = null;
        }
        return bytebuffer;
    }

    public static ByteBuffer a(ByteBuffer bytebuffer, int i1) {
        if (!b && !s)
            throw new AssertionError();
        int j1 = i1 - bytebuffer.capacity();
        d(j1);
        try {
            bytebuffer = io.netty.util.internal.l.a(bytebuffer, i1);
        }
        // Misplaced declaration of an exception variable
        catch (ByteBuffer bytebuffer) {
            e(j1);
            a(((Throwable) (bytebuffer)));
            bytebuffer = null;
        }
        return bytebuffer;
    }

    public static AtomicReferenceFieldUpdater a(Class class1, String s1) {
        if (!f()) goto _L2; else goto _L1
_L1:
        class1 = io.netty.util.internal.l.a(class1, s1);
_L4:
        return class1;
        class1;
_L2:
        class1 = null;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static void a(long l1, byte byte0) {
        io.netty.util.internal.l.a(l1, byte0);
    }

    public static void a(long l1, int i1) {
        io.netty.util.internal.l.a(l1, i1);
    }

    public static void a(long l1, long l2) {
        io.netty.util.internal.l.a(l1, l2);
    }

    public static void a(long l1, long l2, byte byte0) {
        io.netty.util.internal.l.a(l1, l2, byte0);
    }

    public static void a(long l1, long l2, long l3) {
        io.netty.util.internal.l.a(l1, l2, l3);
    }

    public static void a(long l1, short word0) {
        io.netty.util.internal.l.a(l1, word0);
    }

    public static void a(long l1, byte abyte0[], int i1, long l2) {
        long l3 = n;
        io.netty.util.internal.l.a(null, l1, abyte0, (long)i1 + l3, l2);
    }

    public static void a(Throwable throwable) {
        if (f())
            io.netty.util.internal.l.a(throwable);
        else
            b(throwable);
    }

    public static void a(ByteBuffer bytebuffer) {
        if (f() && !a())
            io.netty.util.internal.l.a(bytebuffer);
    }

    public static void a(byte abyte0[], int i1, byte byte0) {
        io.netty.util.internal.l.a(abyte0, i1, byte0);
    }

    public static void a(byte abyte0[], int i1, int j1) {
        io.netty.util.internal.l.a(abyte0, i1, j1);
    }

    public static void a(byte abyte0[], int i1, long l1) {
        io.netty.util.internal.l.a(abyte0, i1, l1);
    }

    public static void a(byte abyte0[], int i1, long l1, byte byte0) {
        long l2 = n;
        io.netty.util.internal.l.a(abyte0, (long)i1 + l2, l1, byte0);
    }

    public static void a(byte abyte0[], int i1, long l1, long l2) {
        io.netty.util.internal.l.a(abyte0, n + (long)i1, null, l1, l2);
    }

    public static void a(byte abyte0[], int i1, short word0) {
        io.netty.util.internal.l.a(abyte0, i1, word0);
    }

    public static boolean a() {
        return e;
    }

    public static long b(ByteBuffer bytebuffer) {
        return io.netty.util.internal.l.b(bytebuffer);
    }

    private static File b(String s1) {
        Object obj = null;
        if (s1 != null) goto _L2; else goto _L1
_L1:
        s1 = obj;
_L4:
        return s1;
_L2:
        File file = new File(s1);
        file.mkdirs();
        s1 = obj;
        if (file.isDirectory())
            try {
                s1 = file.getAbsoluteFile();
            }
            // Misplaced declaration of an exception variable
            catch (String s1) {
                s1 = file;
            }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static Queue b(int i1) {
        Object obj;
        if (f())
            obj = new k(1024, Math.max(Math.min(i1, 0x40000000), 2048), true);
        else
            obj = new d();
        return ((Queue) (obj));
    }

    public static AtomicIntegerFieldUpdater b(Class class1, String s1) {
        if (!f()) goto _L2; else goto _L1
_L1:
        class1 = io.netty.util.internal.l.b(class1, s1);
_L4:
        return class1;
        class1;
_L2:
        class1 = null;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static short b(long l1) {
        return io.netty.util.internal.l.b(l1);
    }

    public static short b(byte abyte0[], int i1) {
        return io.netty.util.internal.l.b(abyte0, i1);
    }

    private static void b(Throwable throwable) {
        throw throwable;
    }

    public static boolean b() {
        return f;
    }

    public static int c(long l1) {
        return io.netty.util.internal.l.c(l1);
    }

    public static int c(byte abyte0[], int i1) {
        return io.netty.util.internal.l.c(abyte0, i1);
    }

    public static Queue c(int i1) {
        Object obj;
        if (f())
            obj = new io.netty.util.internal.shaded.org.jctools.queues.d(i1);
        else
            obj = new io.netty.util.internal.shaded.org.jctools.queues.atomic.c(i1);
        return ((Queue) (obj));
    }

    public static AtomicLongFieldUpdater c(Class class1, String s1) {
        if (!f()) goto _L2; else goto _L1
_L1:
        class1 = io.netty.util.internal.l.c(class1, s1);
_L4:
        return class1;
        class1;
_L2:
        class1 = null;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static void c(ByteBuffer bytebuffer) {
        if (!b && !s) {
            throw new AssertionError();
        } else {
            int i1 = bytebuffer.capacity();
            io.netty.util.internal.l.e(io.netty.util.internal.l.b(bytebuffer));
            e(i1);
            return;
        }
    }

    public static boolean c() {
        if (g != null) goto _L2; else goto _L1
_L1:
        io/netty/util/internal/PlatformDependent;
        JVM INSTR monitorenter ;
        if (g == null)
            g = Boolean.valueOf(t());
        io/netty/util/internal/PlatformDependent;
        JVM INSTR monitorexit ;
_L2:
        return g.booleanValue();
        Exception exception;
        exception;
        io/netty/util/internal/PlatformDependent;
        JVM INSTR monitorexit ;
        throw exception;
    }

    public static int d() {
        return h;
    }

    public static long d(long l1) {
        return io.netty.util.internal.l.d(l1);
    }

    public static long d(byte abyte0[], int i1) {
        return io.netty.util.internal.l.d(abyte0, i1);
    }

    private static void d(int i1) {
        long l1;
        long l2;
        if (t != null)
            do {
                l2 = t.get();
                l1 = (long)i1 + l2;
                if (l1 > u)
                    throw new OutOfDirectMemoryError((new StringBuilder()).append("failed to allocate ").append(i1).append(" byte(s) of direct memory (used: ").append(l2).append(", max: ").append(u).append(')').toString());
            } while (!t.compareAndSet(l2, l1));
    }

    private static void e(int i1) {
        if (t != null) {
            long l1 = t.addAndGet(-i1);
            if (!b && l1 < 0L)
                throw new AssertionError();
        }
    }

    public static boolean e() {
        return i;
    }

    public static boolean f() {
        return j;
    }

    public static boolean g() {
        return io.netty.util.internal.l.a();
    }

    public static boolean h() {
        return l;
    }

    public static long i() {
        return m;
    }

    public static boolean j() {
        return o;
    }

    public static ConcurrentMap k() {
        Object obj;
        if (k)
            obj = new ConcurrentHashMapV8();
        else
            obj = new ConcurrentHashMap();
        return ((ConcurrentMap) (obj));
    }

    public static g l() {
        Object obj;
        if (j)
            obj = new LongAdderV8();
        else
            obj = new AtomicLongCounter();
        return ((g) (obj));
    }

    public static boolean m() {
        return s;
    }

    public static Queue n() {
        return b(0x100000);
    }

    public static ClassLoader o() {
        return io.netty.util.internal.l.e();
    }

    public static ClassLoader p() {
        return io.netty.util.internal.l.f();
    }

    static int q() {
        int i1;
        try {
            PrivilegedAction privilegedaction = JVM INSTR new #6   <Class PlatformDependent$1>;
            privilegedaction._cls1();
            i1 = a((String)AccessController.doPrivileged(privilegedaction));
        }
        catch (SecurityException securityexception) {
            c.a("security exception while reading java.specification.version", securityexception);
            i1 = 6;
        }
        return i1;
    }

    private static boolean r() {
        boolean flag = false;
        Class.forName("android.app.Application", false, p());
        flag = true;
_L2:
        if (flag)
            c.a("Platform: Android");
        return flag;
        Throwable throwable;
        throwable;
        if (true) goto _L2; else goto _L1
_L1:
    }

    private static boolean s() {
        boolean flag = io.netty.util.internal.n.a("os.name", "").toLowerCase(Locale.US).contains("win");
        if (flag)
            c.a("Platform: Windows");
        return flag;
    }

    private static boolean t() {
        String s1 = null;
        if (!b()) goto _L2; else goto _L1
_L1:
        boolean flag = false;
_L7:
        return flag;
_L2:
        int i1;
        int j1;
        Pattern pattern;
        String as[];
        as = new String[4];
        as[0] = "/usr/bin/id";
        as[1] = "/bin/id";
        as[2] = "/usr/xpg4/bin/id";
        as[3] = "id";
        pattern = Pattern.compile("^(?:0|[1-9][0-9]*)$");
        j1 = as.length;
        i1 = 0;
_L9:
        if (i1 >= j1) goto _L4; else goto _L3
_L3:
        Object obj = as[i1];
        obj = Runtime.getRuntime().exec(new String[] {
            obj, "-u"
        });
        Object obj1;
        obj1 = JVM INSTR new #586 <Class BufferedReader>;
        InputStreamReader inputstreamreader = JVM INSTR new #588 <Class InputStreamReader>;
        inputstreamreader.InputStreamReader(((Process) (obj)).getInputStream(), e.f);
        ((BufferedReader) (obj1)).BufferedReader(inputstreamreader);
        Object obj2;
        obj2 = ((BufferedReader) (obj1)).readLine();
        ((BufferedReader) (obj1)).close();
_L15:
        int k1 = ((Process) (obj)).waitFor();
        if (k1 != 0)
            obj2 = null;
        InterruptedException interruptedexception;
        if (obj1 != null)
            try {
                ((BufferedReader) (obj1)).close();
            }
            // Misplaced declaration of an exception variable
            catch (Object obj1) { }
        obj1 = obj2;
        if (obj == null)
            break MISSING_BLOCK_LABEL_178;
        ((Process) (obj)).destroy();
        obj1 = obj2;
_L8:
        if (obj1 == null || !pattern.matcher(((CharSequence) (obj1))).matches()) goto _L6; else goto _L5
_L5:
        c.b("UID: {}", obj1);
        flag = "0".equals(obj1);
          goto _L7
        obj;
        obj = null;
        obj1 = null;
_L19:
        if (obj != null)
            try {
                ((BufferedReader) (obj)).close();
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) { }
        if (obj1 == null)
            break MISSING_BLOCK_LABEL_661;
        ((Process) (obj1)).destroy();
        obj1 = null;
          goto _L8
        obj;
        obj1 = null;
          goto _L8
        obj1;
        obj = null;
        obj2 = s1;
_L18:
        if (obj2 != null)
            try {
                ((BufferedReader) (obj2)).close();
            }
            // Misplaced declaration of an exception variable
            catch (Object obj2) { }
        if (obj != null)
            try {
                ((Process) (obj)).destroy();
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) { }
        throw obj1;
_L6:
        i1++;
          goto _L9
_L4:
        c.a("Could not determine the current UID using /usr/bin/id; attempting to bind at privileged ports.");
        pattern = Pattern.compile(".*(?:denied|not.*permitted).*");
        i1 = 1023;
_L14:
        if (i1 <= 0) goto _L11; else goto _L10
_L10:
        obj1 = JVM INSTR new #630 <Class ServerSocket>;
        ((ServerSocket) (obj1)).ServerSocket();
        obj = obj1;
        ((ServerSocket) (obj1)).setReuseAddress(true);
        obj = obj1;
        obj2 = JVM INSTR new #637 <Class InetSocketAddress>;
        obj = obj1;
        ((InetSocketAddress) (obj2)).InetSocketAddress(i1);
        obj = obj1;
        ((ServerSocket) (obj1)).bind(((java.net.SocketAddress) (obj2)));
        obj = obj1;
        if (!c.b())
            break MISSING_BLOCK_LABEL_412;
        obj = obj1;
        c.b("UID: 0 (succeded to bind at port {})", Integer.valueOf(i1));
        if (obj1 != null)
            try {
                ((ServerSocket) (obj1)).close();
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) { }
        flag = true;
          goto _L7
        obj2;
        obj1 = null;
_L17:
        obj = obj1;
        s1 = ((Exception) (obj2)).getMessage();
        obj2 = s1;
        if (s1 == null)
            obj2 = "";
        obj = obj1;
        flag = pattern.matcher(((String) (obj2)).toLowerCase()).matches();
        if (!flag) goto _L13; else goto _L12
_L12:
        if (obj1 != null)
            try {
                ((ServerSocket) (obj1)).close();
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) { }
_L11:
        c.a("UID: non-root (failed to bind at any privileged ports)");
        flag = false;
          goto _L7
_L13:
        if (obj1 != null)
            try {
                ((ServerSocket) (obj1)).close();
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) { }
        i1--;
          goto _L14
        obj1;
        obj = null;
_L16:
        if (obj != null)
            try {
                ((ServerSocket) (obj)).close();
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) { }
        throw obj1;
        interruptedexception;
          goto _L15
        obj;
        obj1 = obj2;
          goto _L8
        obj1;
          goto _L16
        obj2;
          goto _L17
        obj1;
        obj2 = s1;
          goto _L18
        Object obj3;
        obj3;
        Object obj6 = obj1;
        obj1 = obj3;
        obj3 = obj6;
          goto _L18
        obj1;
        Object obj4 = null;
        obj1 = obj;
        obj = obj4;
          goto _L19
        obj4;
        Object obj5 = obj;
        obj = obj1;
        obj1 = obj5;
          goto _L19
        obj1 = null;
          goto _L8
    }

    private static int u() {
        int i1;
        if (a())
            i1 = 6;
        else
            i1 = q();
        c.b("Java version: {}", Integer.valueOf(i1));
        return i1;
    }

    private static boolean v() {
        boolean flag;
        boolean flag1;
        flag1 = false;
        flag = io.netty.util.internal.n.a("io.netty.noUnsafe", false);
        c.b("-Dio.netty.noUnsafe: {}", Boolean.valueOf(flag));
        if (!a()) goto _L2; else goto _L1
_L1:
        c.a("sun.misc.Unsafe: unavailable (Android)");
        flag = flag1;
_L4:
        return flag;
_L2:
        if (flag) {
            c.a("sun.misc.Unsafe: unavailable (io.netty.noUnsafe)");
            flag = flag1;
            continue; /* Loop/switch isn't completed */
        }
        if (io.netty.util.internal.n.a("io.netty.tryUnsafe"))
            flag = io.netty.util.internal.n.a("io.netty.tryUnsafe", true);
        else
            flag = io.netty.util.internal.n.a("org.jboss.netty.tryUnsafe", true);
        if (!flag) {
            c.a("sun.misc.Unsafe: unavailable (io.netty.tryUnsafe/org.jboss.netty.tryUnsafe)");
            flag = flag1;
            continue; /* Loop/switch isn't completed */
        }
        b b1;
        flag = io.netty.util.internal.l.b();
        b1 = c;
        String s1;
        if (flag)
            s1 = "available";
        else
            s1 = "unavailable";
        try {
            b1.b("sun.misc.Unsafe: {}", s1);
        }
        catch (Throwable throwable) {
            flag = flag1;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    private static long w() {
        long l1;
        if (!f())
            l1 = -1L;
        else
            l1 = io.netty.util.internal.l.d();
        return l1;
    }

    private static long x() {
        long l1;
        try {
            l1 = ((Number)Class.forName("sun.misc.VM", true, p()).getDeclaredMethod("maxDirectMemory", new Class[0]).invoke(null, new Object[0])).longValue();
        }
        catch (Throwable throwable) {
            l1 = 0L;
        }
        if (l1 <= 0L) goto _L2; else goto _L1
_L1:
        return l1;
_L2:
        int i1;
        Object obj;
        Object obj1 = Class.forName("java.lang.management.ManagementFactory", true, p());
        obj = Class.forName("java.lang.management.RuntimeMXBean", true, p());
        obj1 = ((Class) (obj1)).getDeclaredMethod("getRuntimeMXBean", new Class[0]).invoke(null, new Object[0]);
        obj = (List)((Class) (obj)).getDeclaredMethod("getInputArguments", new Class[0]).invoke(obj1, new Object[0]);
        i1 = ((List) (obj)).size() - 1;
_L4:
        if (i1 < 0)
            break; /* Loop/switch isn't completed */
        Matcher matcher;
        matcher = d.matcher((CharSequence)((List) (obj)).get(i1));
        if (matcher.matches())
            break MISSING_BLOCK_LABEL_169;
        i1--;
        if (true) goto _L4; else goto _L3
        long l2 = Long.parseLong(matcher.group(1));
        l1 = l2;
        i1 = matcher.group(2).charAt(0);
        i1;
        JVM INSTR lookupswitch 6: default 252
    //                   71: 301
    //                   75: 283
    //                   77: 292
    //                   103: 301
    //                   107: 283
    //                   109: 292;
           goto _L3 _L5 _L6 _L7 _L5 _L6 _L7
_L3:
        Throwable throwable1;
        if (l1 <= 0L) {
            l1 = Runtime.getRuntime().maxMemory();
            c.b("maxDirectMemory: {} bytes (maybe)", Long.valueOf(l1));
        } else {
            c.b("maxDirectMemory: {} bytes", Long.valueOf(l1));
        }
        if (true) goto _L1; else goto _L6
_L6:
        l1 *= 1024L;
          goto _L3
_L7:
        l1 *= 0x100000L;
          goto _L3
_L5:
        l1 *= 0x40000000L;
          goto _L3
        throwable1;
          goto _L3
        throwable1;
          goto _L3
    }

    private static boolean y() {
        boolean flag = false;
        if (!a()) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        boolean flag1 = io.netty.util.internal.n.a("io.netty.noJavassist", false);
        c.b("-Dio.netty.noJavassist: {}", Boolean.valueOf(flag1));
        if (flag1) {
            c.a("Javassist: unavailable (io.netty.noJavassist)");
            continue; /* Loop/switch isn't completed */
        }
        io.netty.util.internal.f.a(java/lang/Object, a(io/netty/util/internal/PlatformDependent));
        c.a("Javassist: available");
        flag = true;
        continue; /* Loop/switch isn't completed */
        Throwable throwable;
        throwable;
        c.a("Javassist: unavailable");
        c.a("You don't have Javassist in your class path or you don't have enough permission to load dynamically generated classes.  Please check the configuration for better performance.");
        if (true) goto _L1; else goto _L3
_L3:
    }

    private static File z() {
        Object obj = b(io.netty.util.internal.n.b("io.netty.tmpdir"));
        if (obj == null) goto _L2; else goto _L1
_L1:
        c.b("-Dio.netty.tmpdir: {}", obj);
_L5:
        return ((File) (obj));
_L2:
        obj = b(io.netty.util.internal.n.b("java.io.tmpdir"));
        if (obj == null) goto _L4; else goto _L3
_L3:
        c.b("-Dio.netty.tmpdir: {} (java.io.tmpdir)", obj);
          goto _L5
        obj;
_L7:
        String s1;
        if (b())
            obj = new File("C:\\Windows\\Temp");
        else
            obj = new File("/tmp");
        c.c("Failed to get the temporary directory; falling back to: {}", obj);
          goto _L5
_L4:
        if (!b())
            break MISSING_BLOCK_LABEL_226;
        obj = b(System.getenv("TEMP"));
        if (obj == null)
            break MISSING_BLOCK_LABEL_125;
        c.b("-Dio.netty.tmpdir: {} (%TEMP%)", obj);
          goto _L5
        s1 = System.getenv("USERPROFILE");
        if (s1 == null) goto _L7; else goto _L6
_L6:
        obj = JVM INSTR new #462 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        obj = b(((StringBuilder) (obj)).append(s1).append("\\AppData\\Local\\Temp").toString());
        if (obj == null)
            break MISSING_BLOCK_LABEL_181;
        c.b("-Dio.netty.tmpdir: {} (%USERPROFILE%\\AppData\\Local\\Temp)", obj);
          goto _L5
        obj = JVM INSTR new #462 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        obj = b(((StringBuilder) (obj)).append(s1).append("\\Local Settings\\Temp").toString());
        if (obj == null) goto _L7; else goto _L8
_L8:
        c.b("-Dio.netty.tmpdir: {} (%USERPROFILE%\\Local Settings\\Temp)", obj);
          goto _L5
        obj = b(System.getenv("TMPDIR"));
        if (obj == null) goto _L7; else goto _L9
_L9:
        c.b("-Dio.netty.tmpdir: {} ($TMPDIR)", obj);
          goto _L5
    }

    static  {
        boolean flag;
        long l1;
        if (!io/netty/util/internal/PlatformDependent.desiredAssertionStatus())
            flag = true;
        else
            flag = false;
        b = flag;
        c = io.netty.util.internal.logging.c.a(io/netty/util/internal/PlatformDependent);
        h = u();
        if (!a())
            flag = true;
        else
            flag = false;
        i = flag;
        j = v();
        if (j && h < 8)
            flag = true;
        else
            flag = false;
        k = flag;
        if (j && !io.netty.util.internal.n.a("io.netty.noPreferDirect", false))
            flag = true;
        else
            flag = false;
        l = flag;
        if (ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN)
            flag = true;
        else
            flag = false;
        a = flag;
        if (c.b()) {
            b b1 = c;
            if (!l)
                flag = true;
            else
                flag = false;
            b1.b("-Dio.netty.noPreferDirect: {}", Boolean.valueOf(flag));
        }
        if (!f() && !a())
            c.b("Your platform does not provide complete low-level API for accessing direct buffers reliably. Unless explicitly requested, heap buffer will always be preferred to avoid potential system unstability.");
        l1 = io.netty.util.internal.n.a("io.netty.maxDirectMemory", -1L);
        if (l1 == 0L || !f() || !io.netty.util.internal.l.c()) {
            s = false;
            t = null;
        } else {
            s = true;
            if (l1 < 0L) {
                l1 = x();
                if (l1 <= 0L)
                    t = null;
                else
                    t = new AtomicLong();
            } else {
                t = new AtomicLong();
            }
        }
        u = l1;
        c.b("io.netty.maxDirectMemory: {} bytes", Long.valueOf(l1));
    }

    // Unreferenced inner class io/netty/util/internal/PlatformDependent$1

/* anonymous class */
    static final class _cls1
        implements PrivilegedAction {

        public String a() {
            return System.getProperty("java.specification.version");
        }

        public Object run() {
            return a();
        }

    }

}
