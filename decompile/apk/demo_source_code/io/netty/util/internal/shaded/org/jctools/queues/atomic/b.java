// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util.internal.shaded.org.jctools.queues.atomic;

import java.util.AbstractQueue;
import java.util.Iterator;
import java.util.concurrent.atomic.AtomicReference;

// Referenced classes of package io.netty.util.internal.shaded.org.jctools.queues.atomic:
//            LinkedQueueAtomicNode

abstract class b extends AbstractQueue {

    private final AtomicReference a = new AtomicReference();
    private final AtomicReference b = new AtomicReference();

    public b() {
    }

    protected final LinkedQueueAtomicNode a() {
        return (LinkedQueueAtomicNode)a.get();
    }

    protected final LinkedQueueAtomicNode a(LinkedQueueAtomicNode linkedqueueatomicnode) {
        return (LinkedQueueAtomicNode)a.getAndSet(linkedqueueatomicnode);
    }

    protected Object a(LinkedQueueAtomicNode linkedqueueatomicnode, LinkedQueueAtomicNode linkedqueueatomicnode1) {
        Object obj = linkedqueueatomicnode1.a();
        linkedqueueatomicnode.a(linkedqueueatomicnode);
        b(linkedqueueatomicnode1);
        return obj;
    }

    protected final LinkedQueueAtomicNode b() {
        return (LinkedQueueAtomicNode)b.get();
    }

    protected final void b(LinkedQueueAtomicNode linkedqueueatomicnode) {
        b.lazySet(linkedqueueatomicnode);
    }

    protected final LinkedQueueAtomicNode c() {
        return (LinkedQueueAtomicNode)b.get();
    }

    public final boolean isEmpty() {
        boolean flag;
        if (b() == a())
            flag = true;
        else
            flag = false;
        return flag;
    }

    public final Iterator iterator() {
        throw new UnsupportedOperationException();
    }

    public final int size() {
        LinkedQueueAtomicNode linkedqueueatomicnode1 = b();
        LinkedQueueAtomicNode linkedqueueatomicnode3 = a();
        int i;
        LinkedQueueAtomicNode linkedqueueatomicnode;
        for (i = 0; linkedqueueatomicnode1 != linkedqueueatomicnode3 && linkedqueueatomicnode1 != null && i < 0x7fffffff; linkedqueueatomicnode1 = linkedqueueatomicnode) {
            LinkedQueueAtomicNode linkedqueueatomicnode2 = linkedqueueatomicnode1.c();
            linkedqueueatomicnode = linkedqueueatomicnode2;
            if (linkedqueueatomicnode2 == linkedqueueatomicnode1)
                linkedqueueatomicnode = b();
            i++;
        }

        return i;
    }
}
