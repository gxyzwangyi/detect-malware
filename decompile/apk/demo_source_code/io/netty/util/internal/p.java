// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util.internal;

import java.lang.reflect.*;
import java.util.HashMap;
import java.util.Map;

// Referenced classes of package io.netty.util.internal:
//            j, e, PlatformDependent, f

public abstract class p {
    private static final class a extends p {

        private final Class a;

        public boolean a(Object obj) {
            return a.isInstance(obj);
        }

        a(Class class1) {
            a = class1;
        }
    }


    private static final p a = new j();
    private static final Object b = new Object();

    protected p() {
    }

    public static p a(Class class1) {
        p p1;
        Object obj;
        Map map;
        map = e.b().k();
        p1 = (p)map.get(class1);
        obj = p1;
        if (p1 != null) goto _L2; else goto _L1
_L1:
        if (class1 != java/lang/Object) goto _L4; else goto _L3
_L3:
        p1 = a;
_L6:
        obj = p1;
        if (p1 == null)
            obj = new a(class1);
        map.put(class1, obj);
_L2:
        return ((p) (obj));
_L4:
        if (PlatformDependent.j())
            try {
                p1 = f.a(class1);
                p1.a(b);
            }
            catch (IllegalAccessError illegalaccesserror) {
                illegalaccesserror = null;
            }
            catch (Exception exception) {
                exception = null;
            }
        if (true) goto _L6; else goto _L5
_L5:
    }

    public static p a(Object obj, Class class1, String s) {
        Object obj3 = e.b().l();
        Object obj2 = obj.getClass();
        Object obj1 = (Map)((Map) (obj3)).get(obj2);
        if (obj1 == null) {
            obj1 = new HashMap();
            ((Map) (obj3)).put(obj2, obj1);
        }
        obj3 = (p)((Map) (obj1)).get(s);
        obj2 = obj3;
        if (obj3 == null) {
            obj2 = a(b(obj, class1, s));
            ((Map) (obj1)).put(s, obj2);
        }
        return ((p) (obj2));
    }

    private static Class a(Class class1, String s) {
        throw new IllegalStateException((new StringBuilder()).append("cannot determine the type of the type parameter '").append(s).append("': ").append(class1).toString());
    }

    private static Class b(Object obj, Class class1, String s) {
        Class class2;
        class2 = obj.getClass();
        obj = class2;
_L7:
        if (((Class) (obj)).getSuperclass() != class1) goto _L2; else goto _L1
_L1:
        int i;
        TypeVariable atypevariable[];
        atypevariable = ((Class) (obj)).getSuperclass().getTypeParameters();
        i = 0;
_L5:
        if (i >= atypevariable.length)
            break MISSING_BLOCK_LABEL_324;
        if (!s.equals(atypevariable[i].getName())) goto _L4; else goto _L3
_L4:
        i++;
          goto _L5
_L3:
        if (i < 0)
            throw new IllegalStateException((new StringBuilder()).append("unknown type parameter '").append(s).append("': ").append(class1).toString());
        obj = ((Class) (obj)).getGenericSuperclass();
        if (!(obj instanceof ParameterizedType)) {
            obj = java/lang/Object;
        } else {
            class1 = ((ParameterizedType)obj).getActualTypeArguments()[i];
            obj = class1;
            if (class1 instanceof ParameterizedType)
                obj = ((ParameterizedType)class1).getRawType();
            if (obj instanceof Class) {
                obj = (Class)obj;
            } else {
label0:
                {
                    if (!(obj instanceof GenericArrayType))
                        break label0;
                    java.lang.reflect.Type type = ((GenericArrayType)obj).getGenericComponentType();
                    class1 = type;
                    if (type instanceof ParameterizedType)
                        class1 = ((ParameterizedType)type).getRawType();
                    if (!(class1 instanceof Class))
                        break label0;
                    obj = Array.newInstance((Class)class1, 0).getClass();
                }
            }
        }
_L6:
        return ((Class) (obj));
label1:
        {
            if (!(obj instanceof TypeVariable))
                break MISSING_BLOCK_LABEL_290;
            obj = (TypeVariable)obj;
            if (((TypeVariable) (obj)).getGenericDeclaration() instanceof Class)
                break label1;
            obj = java/lang/Object;
        }
          goto _L6
label2:
        {
            class1 = (Class)((TypeVariable) (obj)).getGenericDeclaration();
            s = ((TypeVariable) (obj)).getName();
            if (!class1.isAssignableFrom(class2))
                break label2;
            obj = class2;
        }
          goto _L7
        obj = java/lang/Object;
          goto _L6
        obj = a(class2, s);
          goto _L6
_L2:
        Class class3;
        class3 = ((Class) (obj)).getSuperclass();
        obj = class3;
        if (class3 != null) goto _L7; else goto _L8
_L8:
        obj = a(class2, s);
          goto _L6
        i = -1;
          goto _L3
    }

    public abstract boolean a(Object obj);

}
