// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util.internal;

import io.netty.util.internal.logging.b;
import io.netty.util.internal.logging.c;
import java.security.*;
import java.util.Random;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicLong;

// Referenced classes of package io.netty.util.internal:
//            n, e

public final class ThreadLocalRandom extends Random {

    private static final b b = io.netty.util.internal.logging.c.a(io/netty/util/internal/ThreadLocalRandom);
    private static final AtomicLong c = new AtomicLong();
    private static volatile long d;
    boolean a;
    private long e;

    ThreadLocalRandom() {
        super(d());
        a = true;
    }

    public static long a() {
        io/netty/util/internal/ThreadLocalRandom;
        JVM INSTR monitorenter ;
        long l1 = d;
        long l;
        l = l1;
        if (l1 != 0L)
            break MISSING_BLOCK_LABEL_26;
        l = n.a("io.netty.initialSeedUniquifier", 0L);
        d = l;
        if (l != 0L) goto _L2; else goto _L1
_L1:
        Object obj;
        obj = JVM INSTR new #6   <Class ThreadLocalRandom$1>;
        ((_cls1) (obj))._cls1();
        if (!((Boolean)AccessController.doPrivileged(((PrivilegedAction) (obj)))).booleanValue()) goto _L4; else goto _L3
_L3:
        long l3;
        LinkedBlockingQueue linkedblockingqueue;
        linkedblockingqueue = JVM INSTR new #70  <Class LinkedBlockingQueue>;
        linkedblockingqueue.LinkedBlockingQueue();
        obj = JVM INSTR new #8   <Class ThreadLocalRandom$2>;
        ((_cls2) (obj))._cls2("initialSeedUniquifierGenerator", linkedblockingqueue);
        ((Thread) (obj)).setDaemon(true);
        ((Thread) (obj)).start();
        Thread.UncaughtExceptionHandler uncaughtexceptionhandler = JVM INSTR new #10  <Class ThreadLocalRandom$3>;
        uncaughtexceptionhandler._cls3();
        ((Thread) (obj)).setUncaughtExceptionHandler(uncaughtexceptionhandler);
        l1 = System.nanoTime();
        l3 = TimeUnit.SECONDS.toNanos(3L);
_L8:
        long l2 = (l3 + l1) - System.nanoTime();
        if (l2 > 0L) goto _L6; else goto _L5
_L5:
        ((Thread) (obj)).interrupt();
        b.c("Failed to generate a seed from SecureRandom within {} seconds. Not enough entrophy?", Long.valueOf(3L));
        boolean flag = false;
_L9:
        l1 = l ^ 0x33bae119L ^ Long.reverse(System.nanoTime());
        l = l1;
        if (!flag)
            break MISSING_BLOCK_LABEL_195;
        Thread.currentThread().interrupt();
        ((Thread) (obj)).interrupt();
        l = l1;
_L10:
        d = l;
_L2:
        io/netty/util/internal/ThreadLocalRandom;
        JVM INSTR monitorexit ;
        return l;
_L6:
        Long long1 = (Long)linkedblockingqueue.poll(l2, TimeUnit.NANOSECONDS);
        if (long1 == null) goto _L8; else goto _L7
_L7:
        l1 = long1.longValue();
        l = l1;
        flag = false;
          goto _L9
        InterruptedException interruptedexception;
        interruptedexception;
        b.c("Failed to generate a seed from SecureRandom due to an InterruptedException.");
        flag = true;
          goto _L9
_L4:
        l1 = a(System.currentTimeMillis());
        l = a(System.nanoTime());
        l = l1 ^ l;
          goto _L10
        Exception exception;
        exception;
        throw exception;
          goto _L9
    }

    private static long a(long l) {
        l = (l >>> 33 ^ l) * 0xed558ccdL;
        l = (l ^ l >>> 33) * 0x1a85ec53L;
        return l ^ l >>> 33;
    }

    public static ThreadLocalRandom b() {
        return io.netty.util.internal.e.b().j();
    }

    static b c() {
        return b;
    }

    private static long d() {
        long l2 = System.nanoTime();
        do {
            long l1 = c.get();
            long l;
            long l3;
            if (l1 != 0L)
                l = l1;
            else
                l = a();
            l3 = 0xad33fdb5L * l;
        } while (!c.compareAndSet(l1, l3));
        if (l1 == 0L && b.b())
            b.a(String.format("-Dio.netty.initialSeedUniquifier: 0x%016x (took %d ms)", new Object[] {
                Long.valueOf(l), Long.valueOf(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - l2))
            }));
        return System.nanoTime() ^ l3;
    }

    protected int next(int i) {
        e = e * 0xdeece66dL + 11L & 0xffffffffL;
        return (int)(e >>> 48 - i);
    }

    public void setSeed(long l) {
        if (a) {
            throw new UnsupportedOperationException();
        } else {
            e = (0xdeece66dL ^ l) & 0xffffffffL;
            return;
        }
    }


    // Unreferenced inner class io/netty/util/internal/ThreadLocalRandom$1

/* anonymous class */
    static final class _cls1
        implements PrivilegedAction {

        public Boolean a() {
            return Boolean.valueOf(n.a("java.util.secureRandomSeed", false));
        }

        public Object run() {
            return a();
        }

    }


    // Unreferenced inner class io/netty/util/internal/ThreadLocalRandom$2

/* anonymous class */
    static final class _cls2 extends Thread {

        final BlockingQueue a;

        public void run() {
            byte abyte0[] = (new SecureRandom()).generateSeed(8);
            long l3 = abyte0[0];
            long l7 = abyte0[1];
            long l6 = abyte0[2];
            long l2 = abyte0[3];
            long l5 = abyte0[4];
            long l = abyte0[5];
            long l4 = abyte0[6];
            long l1 = abyte0[7];
            a.add(Long.valueOf(l1 & 255L | ((l3 & 255L) << 56 | (l7 & 255L) << 48 | (l6 & 255L) << 40 | (l2 & 255L) << 32 | (l5 & 255L) << 24 | (l & 255L) << 16 | (l4 & 255L) << 8)));
        }

             {
                a = blockingqueue;
                super(s);
            }
    }


    // Unreferenced inner class io/netty/util/internal/ThreadLocalRandom$3

/* anonymous class */
    static final class _cls3
        implements Thread.UncaughtExceptionHandler {

        public void uncaughtException(Thread thread, Throwable throwable) {
            io.netty.util.internal.ThreadLocalRandom.c().b("An exception has been raised by {}", thread.getName(), throwable);
        }

    }

}
