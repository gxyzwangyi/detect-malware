// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util.internal;

import io.netty.util.concurrent.m;
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

// Referenced classes of package io.netty.util.internal:
//            q, ThreadLocalRandom, d

public final class e extends q {

    public static final Object a = new Object();

    private e() {
        super(p());
    }

    public static e a() {
        Object obj = Thread.currentThread();
        if (obj instanceof m)
            obj = ((m)obj).a();
        else
            obj = (e)b.get();
        return ((e) (obj));
    }

    private static e a(m m1) {
        e e2 = m1.a();
        e e1 = e2;
        if (e2 == null) {
            e1 = new e();
            m1.a(e1);
        }
        return e1;
    }

    public static e b() {
        Object obj = Thread.currentThread();
        if (obj instanceof m)
            obj = a((m)obj);
        else
            obj = o();
        return ((e) (obj));
    }

    private void b(int i1, Object obj) {
        Object aobj[] = d;
        int j1 = aobj.length;
        int k1 = i1 >>> 1 | i1;
        k1 |= k1 >>> 2;
        k1 |= k1 >>> 4;
        k1 |= k1 >>> 8;
        aobj = Arrays.copyOf(aobj, (k1 | k1 >>> 16) + 1);
        Arrays.fill(aobj, j1, aobj.length, a);
        aobj[i1] = obj;
        d = aobj;
    }

    public static void c() {
        Thread thread = Thread.currentThread();
        if (thread instanceof m)
            ((m)thread).a(null);
        else
            b.remove();
    }

    public static int d() {
        int i1 = c.getAndIncrement();
        if (i1 < 0) {
            c.decrementAndGet();
            throw new IllegalStateException("too many thread-local indexed variables");
        } else {
            return i1;
        }
    }

    private static e o() {
        ThreadLocal threadlocal = q.b;
        e e2 = (e)threadlocal.get();
        e e1 = e2;
        if (e2 == null) {
            e1 = new e();
            threadlocal.set(e1);
        }
        return e1;
    }

    private static Object[] p() {
        Object aobj[] = new Object[32];
        Arrays.fill(aobj, a);
        return aobj;
    }

    public ArrayList a(int i1) {
        ArrayList arraylist = n;
        if (arraylist == null) {
            arraylist = new ArrayList(i1);
        } else {
            arraylist.clear();
            arraylist.ensureCapacity(i1);
        }
        return arraylist;
    }

    public void a(d d1) {
        g = d1;
    }

    public boolean a(int i1, Object obj) {
        boolean flag = true;
        Object aobj[] = d;
        if (i1 < aobj.length) {
            Object obj1 = aobj[i1];
            aobj[i1] = obj;
            if (obj1 != a)
                flag = false;
        } else {
            b(i1, obj);
        }
        return flag;
    }

    public void b(int i1) {
        e = i1;
    }

    public Object c(int i1) {
        Object aobj[] = d;
        Object obj;
        if (i1 < aobj.length)
            obj = aobj[i1];
        else
            obj = a;
        return obj;
    }

    public Object d(int i1) {
        Object aobj[] = d;
        Object obj;
        if (i1 < aobj.length) {
            obj = aobj[i1];
            aobj[i1] = a;
        } else {
            obj = a;
        }
        return obj;
    }

    public StringBuilder e() {
        StringBuilder stringbuilder = k;
        if (stringbuilder == null) {
            stringbuilder = new StringBuilder(512);
            k = stringbuilder;
        } else {
            stringbuilder.setLength(0);
        }
        return stringbuilder;
    }

    public Map f() {
        Map map = l;
        Object obj = map;
        if (map == null) {
            obj = new IdentityHashMap();
            l = ((Map) (obj));
        }
        return ((Map) (obj));
    }

    public Map g() {
        Map map = m;
        Object obj = map;
        if (map == null) {
            obj = new IdentityHashMap();
            m = ((Map) (obj));
        }
        return ((Map) (obj));
    }

    public ArrayList h() {
        return a(8);
    }

    public int i() {
        return e;
    }

    public ThreadLocalRandom j() {
        ThreadLocalRandom threadlocalrandom1 = h;
        ThreadLocalRandom threadlocalrandom = threadlocalrandom1;
        if (threadlocalrandom1 == null) {
            threadlocalrandom = new ThreadLocalRandom();
            h = threadlocalrandom;
        }
        return threadlocalrandom;
    }

    public Map k() {
        Map map = i;
        Object obj = map;
        if (map == null) {
            obj = new IdentityHashMap();
            i = ((Map) (obj));
        }
        return ((Map) (obj));
    }

    public Map l() {
        Map map = j;
        Object obj = map;
        if (map == null) {
            obj = new IdentityHashMap();
            j = ((Map) (obj));
        }
        return ((Map) (obj));
    }

    public d m() {
        return g;
    }

    public Map n() {
        Map map = f;
        Object obj = map;
        if (map == null) {
            obj = new WeakHashMap(4);
            f = ((Map) (obj));
        }
        return ((Map) (obj));
    }

}
