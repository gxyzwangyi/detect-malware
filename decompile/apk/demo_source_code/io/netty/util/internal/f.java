// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util.internal;

import io.netty.util.internal.logging.b;
import io.netty.util.internal.logging.c;
import java.lang.reflect.Method;
import javassist.*;

// Referenced classes of package io.netty.util.internal:
//            j, PlatformDependent, p

public final class f {

    private static final b a = c.a(io/netty/util/internal/f);
    private static final ClassPool b;

    private f() {
    }

    public static p a(Class class1) {
        ClassLoader classloader1 = PlatformDependent.o();
        ClassLoader classloader = classloader1;
        if (classloader1 == null)
            classloader = PlatformDependent.p();
        return a(class1, classloader);
    }

    public static p a(Class class1, ClassLoader classloader) {
        String s;
        String s1;
        s1 = b(class1);
        s = (new StringBuilder()).append("io.netty.util.internal.__matchers__.").append(s1).append("Matcher").toString();
        p p1 = (p)Class.forName(s, true, classloader).newInstance();
        class1 = p1;
_L1:
        return class1;
        Exception exception;
        exception;
        try {
            Object obj = b.getAndRename(io/netty/util/internal/j.getName(), s);
            ((CtClass) (obj)).setModifiers(((CtClass) (obj)).getModifiers() | 0x10);
            CtMethod ctmethod = ((CtClass) (obj)).getDeclaredMethod("match");
            StringBuilder stringbuilder = JVM INSTR new #63  <Class StringBuilder>;
            stringbuilder.StringBuilder();
            ctmethod.setBody(stringbuilder.append("{ return $1 instanceof ").append(s1).append("; }").toString());
            byte abyte0[] = ((CtClass) (obj)).toBytecode();
            ((CtClass) (obj)).detach();
            obj = java/lang/ClassLoader.getDeclaredMethod("defineClass", new Class[] {
                java/lang/String, [B, Integer.TYPE, Integer.TYPE
            });
            ((Method) (obj)).setAccessible(true);
            classloader = (Class)((Method) (obj)).invoke(classloader, new Object[] {
                s, abyte0, Integer.valueOf(0), Integer.valueOf(abyte0.length)
            });
        }
        // Misplaced declaration of an exception variable
        catch (Class class1) {
            throw class1;
        }
        // Misplaced declaration of an exception variable
        catch (Class class1) {
            throw new RuntimeException(class1);
        }
        if (class1 == java/lang/Object)
            break MISSING_BLOCK_LABEL_224;
        a.b("Generated: {}", classloader.getName());
        class1 = (p)classloader.newInstance();
          goto _L1
    }

    private static String b(Class class1) {
        if (class1.isArray())
            class1 = (new StringBuilder()).append(b(class1.getComponentType())).append("[]").toString();
        else
            class1 = class1.getName();
        return class1;
    }

    static  {
        b = new ClassPool(true);
        b.appendClassPath(new ClassClassPath(io/netty/util/internal/j));
    }
}
