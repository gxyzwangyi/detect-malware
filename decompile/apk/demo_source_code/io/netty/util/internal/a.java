// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util.internal;

import java.util.Arrays;

public final class a
    implements Appendable, CharSequence {

    private char a[];
    private int b;

    public a(int i) {
        if (i < 1) {
            throw new IllegalArgumentException((new StringBuilder()).append("length: ").append(i).append(" (length: >= 1)").toString());
        } else {
            a = new char[i];
            return;
        }
    }

    private a(char ac[]) {
        if (ac.length < 1) {
            throw new IllegalArgumentException((new StringBuilder()).append("length: ").append(ac.length).append(" (length: >= 1)").toString());
        } else {
            a = ac;
            b = ac.length;
            return;
        }
    }

    private static char[] a(char ac[], int i, int j) {
        int k = ac.length;
        int l;
        do {
            l = k << 1;
            if (l < 0)
                throw new IllegalStateException();
            k = l;
        } while (i > l);
        char ac1[] = new char[l];
        System.arraycopy(ac, 0, ac1, 0, j);
        return ac1;
    }

    private void b() {
        char ac[] = a;
        int i = ac.length << 1;
        if (i < 0) {
            throw new IllegalStateException();
        } else {
            a = new char[i];
            System.arraycopy(ac, 0, a, 0, ac.length);
            return;
        }
    }

    public char a(int i) {
        return a[i];
    }

    public a a(char c) {
        int i;
        char ac[];
        ac = a;
        i = b;
        b = i + 1;
        ac[i] = c;
_L2:
        return this;
        IndexOutOfBoundsException indexoutofboundsexception;
        indexoutofboundsexception;
        b();
        a[b - 1] = c;
        if (true) goto _L2; else goto _L1
_L1:
    }

    public a a(int i, int j) {
        return new a(Arrays.copyOfRange(a, i, j));
    }

    public a a(CharSequence charsequence) {
        return a(charsequence, 0, charsequence.length());
    }

    public a a(CharSequence charsequence, int i, int j) {
        if (charsequence.length() < j)
            throw new IndexOutOfBoundsException();
        int l = j - i;
        if (l > a.length - b)
            a = a(a, b + l, b);
        int k = i;
        if (charsequence instanceof a) {
            System.arraycopy(((a)charsequence).a, i, a, b, l);
            b = l + b;
        } else {
            while (k < j)  {
                char ac[] = a;
                i = b;
                b = i + 1;
                ac[i] = charsequence.charAt(k);
                k++;
            }
        }
        return this;
    }

    public void a() {
        b = 0;
    }

    public Appendable append(char c) {
        return a(c);
    }

    public Appendable append(CharSequence charsequence) {
        return a(charsequence);
    }

    public Appendable append(CharSequence charsequence, int i, int j) {
        return a(charsequence, i, j);
    }

    public String b(int i, int j) {
        return new String(a, i, j - i);
    }

    public char charAt(int i) {
        if (i > b)
            throw new IndexOutOfBoundsException();
        else
            return a[i];
    }

    public int length() {
        return b;
    }

    public CharSequence subSequence(int i, int j) {
        return a(i, j);
    }

    public String toString() {
        return new String(a, 0, b);
    }
}
