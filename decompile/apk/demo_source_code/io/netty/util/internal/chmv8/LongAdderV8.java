// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util.internal.chmv8;

import io.netty.util.internal.g;
import java.io.Serializable;

// Referenced classes of package io.netty.util.internal.chmv8:
//            Striped64

public class LongAdderV8 extends Striped64
    implements g, Serializable {

    public LongAdderV8() {
    }

    final long a(long l, long l1) {
        return l + l1;
    }

    public void a() {
        a(1L);
    }

    public void a(long l) {
label0:
        {
            boolean flag1 = true;
            Striped64.a aa[] = d;
            if (aa == null) {
                long l1 = e;
                if (b(l1, l1 + l))
                    break label0;
            }
            int ai[] = (int[])a.get();
            boolean flag = flag1;
            if (ai != null) {
                flag = flag1;
                if (aa != null) {
                    int i = aa.length;
                    flag = flag1;
                    if (i >= 1) {
                        Striped64.a a1 = aa[i - 1 & ai[0]];
                        flag = flag1;
                        if (a1 != null) {
                            long l2 = a1.a;
                            flag = a1.a(l2, l2 + l);
                            if (flag)
                                break label0;
                        }
                    }
                }
            }
            a(l, ai, flag);
        }
    }

    public long b() {
        long l = e;
        Striped64.a aa[] = d;
        long l1 = l;
        if (aa != null) {
            int j = aa.length;
            int i = 0;
            do {
                l1 = l;
                if (i >= j)
                    break;
                Striped64.a a1 = aa[i];
                l1 = l;
                if (a1 != null)
                    l1 = l + a1.a;
                i++;
                l = l1;
            } while (true);
        }
        return l1;
    }

    public double doubleValue() {
        return (double)b();
    }

    public float floatValue() {
        return (float)b();
    }

    public int intValue() {
        return (int)b();
    }

    public long longValue() {
        return b();
    }

    public String toString() {
        return Long.toString(b());
    }
}
