// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util.internal.chmv8;

import io.netty.util.internal.d;
import io.netty.util.internal.e;
import java.io.ObjectStreamField;
import java.io.Serializable;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.security.AccessController;
import java.security.PrivilegedActionException;
import java.security.PrivilegedExceptionAction;
import java.util.Arrays;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.ReentrantLock;
import sun.misc.Unsafe;

public class ConcurrentHashMapV8
    implements Serializable, ConcurrentMap {
    static abstract class CollectionView
        implements Serializable, Collection {

        final ConcurrentHashMapV8 a;

        public final void clear() {
            a.clear();
        }

        public abstract boolean contains(Object obj);

        public final boolean containsAll(Collection collection) {
            if (collection == this) goto _L2; else goto _L1
_L1:
            Iterator iterator1 = collection.iterator();
_L5:
            if (!iterator1.hasNext()) goto _L2; else goto _L3
_L3:
            collection = ((Collection) (iterator1.next()));
            if (collection != null && contains(collection)) goto _L5; else goto _L4
_L4:
            boolean flag = false;
_L7:
            return flag;
_L2:
            flag = true;
            if (true) goto _L7; else goto _L6
_L6:
        }

        public final boolean isEmpty() {
            return a.isEmpty();
        }

        public abstract Iterator iterator();

        public final boolean removeAll(Collection collection) {
            boolean flag = false;
            Iterator iterator1 = iterator();
            do {
                if (!iterator1.hasNext())
                    break;
                if (collection.contains(iterator1.next())) {
                    iterator1.remove();
                    flag = true;
                }
            } while (true);
            return flag;
        }

        public final boolean retainAll(Collection collection) {
            boolean flag = false;
            Iterator iterator1 = iterator();
            do {
                if (!iterator1.hasNext())
                    break;
                if (!collection.contains(iterator1.next())) {
                    iterator1.remove();
                    flag = true;
                }
            } while (true);
            return flag;
        }

        public final int size() {
            return a.size();
        }

        public final Object[] toArray() {
            long l1 = a.b();
            if (l1 > 0x7ffffff7L)
                throw new OutOfMemoryError("Required array size too large");
            int i1 = (int)l1;
            Object aobj[] = new Object[i1];
            int j1 = 0;
            Iterator iterator1 = iterator();
            while (iterator1.hasNext())  {
                Object obj = iterator1.next();
                if (j1 == i1) {
                    if (i1 >= 0x7ffffff7)
                        throw new OutOfMemoryError("Required array size too large");
                    if (i1 >= 0x3ffffffb)
                        i1 = 0x7ffffff7;
                    else
                        i1 += (i1 >>> 1) + 1;
                    aobj = Arrays.copyOf(aobj, i1);
                }
                aobj[j1] = obj;
                j1++;
            }
            if (j1 != i1)
                aobj = Arrays.copyOf(aobj, j1);
            return aobj;
        }

        public final Object[] toArray(Object aobj[]) {
            int i1;
            int j1;
            Object aobj1[];
            long l1 = a.b();
            if (l1 > 0x7ffffff7L)
                throw new OutOfMemoryError("Required array size too large");
            i1 = (int)l1;
            Iterator iterator1;
            if (aobj.length >= i1)
                aobj1 = aobj;
            else
                aobj1 = (Object[])(Object[])Array.newInstance(((Object) (aobj)).getClass().getComponentType(), i1);
            i1 = aobj1.length;
            iterator1 = iterator();
            j1 = 0;
            while (iterator1.hasNext())  {
                Object obj = iterator1.next();
                if (j1 == i1) {
                    if (i1 >= 0x7ffffff7)
                        throw new OutOfMemoryError("Required array size too large");
                    if (i1 >= 0x3ffffffb)
                        i1 = 0x7ffffff7;
                    else
                        i1 += (i1 >>> 1) + 1;
                    aobj1 = Arrays.copyOf(aobj1, i1);
                }
                aobj1[j1] = obj;
                j1++;
            }
            if (aobj != aobj1 || j1 >= i1) goto _L2; else goto _L1
_L1:
            aobj1[j1] = null;
            aobj = aobj1;
_L4:
            return aobj;
_L2:
            aobj = aobj1;
            if (j1 != i1)
                aobj = Arrays.copyOf(aobj1, j1);
            if (true) goto _L4; else goto _L3
_L3:
        }

        public final String toString() {
            Iterator iterator1;
            StringBuilder stringbuilder;
            stringbuilder = new StringBuilder();
            stringbuilder.append('[');
            iterator1 = iterator();
            if (!iterator1.hasNext()) goto _L2; else goto _L1
_L1:
            Object obj1 = iterator1.next();
            Object obj = obj1;
            if (obj1 == this)
                obj = "(this Collection)";
            stringbuilder.append(obj);
            if (iterator1.hasNext()) goto _L3; else goto _L2
_L2:
            return stringbuilder.append(']').toString();
_L3:
            stringbuilder.append(',').append(' ');
            if (true) goto _L1; else goto _L4
_L4:
        }

        CollectionView(ConcurrentHashMapV8 concurrenthashmapv8) {
            a = concurrenthashmapv8;
        }
    }

    static final class EntrySetView extends CollectionView
        implements Serializable, Set {

        public boolean a(java.util.Map.Entry entry) {
            boolean flag = false;
            if (a.a(entry.getKey(), entry.getValue(), false) == null)
                flag = true;
            return flag;
        }

        public boolean add(Object obj) {
            return a((java.util.Map.Entry)obj);
        }

        public boolean addAll(Collection collection) {
            collection = collection.iterator();
            boolean flag = false;
            do {
                if (!collection.hasNext())
                    break;
                if (a((java.util.Map.Entry)collection.next()))
                    flag = true;
            } while (true);
            return flag;
        }

        public boolean contains(Object obj) {
            if (!(obj instanceof java.util.Map.Entry)) goto _L2; else goto _L1
_L1:
            Object obj1;
            obj1 = (java.util.Map.Entry)obj;
            obj = ((java.util.Map.Entry) (obj1)).getKey();
            if (obj == null) goto _L2; else goto _L3
_L3:
            obj = a.get(obj);
            if (obj == null) goto _L2; else goto _L4
_L4:
            obj1 = ((java.util.Map.Entry) (obj1)).getValue();
            if (obj1 == null || obj1 != obj && !obj1.equals(obj)) goto _L2; else goto _L5
_L5:
            boolean flag = true;
_L7:
            return flag;
_L2:
            flag = false;
            if (true) goto _L7; else goto _L6
_L6:
        }

        public final boolean equals(Object obj) {
            if (!(obj instanceof Set)) goto _L2; else goto _L1
_L1:
            obj = (Set)obj;
            if (obj != this && (!containsAll(((Collection) (obj))) || !((Set) (obj)).containsAll(this))) goto _L2; else goto _L3
_L3:
            boolean flag = true;
_L5:
            return flag;
_L2:
            flag = false;
            if (true) goto _L5; else goto _L4
_L4:
        }

        public final int hashCode() {
            int j1 = 0;
            int i1 = 0;
            g ag[] = a.b;
            if (ag != null) {
                h h1 = new h(ag, ag.length, 0, ag.length);
                do {
                    g g1 = h1.b();
                    j1 = i1;
                    if (g1 == null)
                        break;
                    i1 += g1.hashCode();
                } while (true);
            }
            return j1;
        }

        public Iterator iterator() {
            ConcurrentHashMapV8 concurrenthashmapv8 = a;
            g ag[] = concurrenthashmapv8.b;
            int i1;
            if (ag == null)
                i1 = 0;
            else
                i1 = ag.length;
            return new c(ag, i1, 0, i1, concurrenthashmapv8);
        }

        public boolean remove(Object obj) {
            if (!(obj instanceof java.util.Map.Entry)) goto _L2; else goto _L1
_L1:
            Object obj1;
            obj1 = (java.util.Map.Entry)obj;
            obj = ((java.util.Map.Entry) (obj1)).getKey();
            if (obj == null) goto _L2; else goto _L3
_L3:
            obj1 = ((java.util.Map.Entry) (obj1)).getValue();
            if (obj1 == null || !a.remove(obj, obj1)) goto _L2; else goto _L4
_L4:
            boolean flag = true;
_L6:
            return flag;
_L2:
            flag = false;
            if (true) goto _L6; else goto _L5
_L5:
        }

        EntrySetView(ConcurrentHashMapV8 concurrenthashmapv8) {
            super(concurrenthashmapv8);
        }
    }

    public static class KeySetView extends CollectionView
        implements Serializable, Set {

        private final Object b;

        public boolean add(Object obj) {
            boolean flag = true;
            Object obj1 = b;
            if (obj1 == null)
                throw new UnsupportedOperationException();
            if (a.a(obj, obj1, true) != null)
                flag = false;
            return flag;
        }

        public boolean addAll(Collection collection) {
            boolean flag = false;
            Object obj = b;
            if (obj == null)
                throw new UnsupportedOperationException();
            collection = collection.iterator();
            do {
                if (!collection.hasNext())
                    break;
                Object obj1 = collection.next();
                if (a.a(obj1, obj, true) == null)
                    flag = true;
            } while (true);
            return flag;
        }

        public boolean contains(Object obj) {
            return a.containsKey(obj);
        }

        public boolean equals(Object obj) {
            if (!(obj instanceof Set)) goto _L2; else goto _L1
_L1:
            obj = (Set)obj;
            if (obj != this && (!containsAll(((Collection) (obj))) || !((Set) (obj)).containsAll(this))) goto _L2; else goto _L3
_L3:
            boolean flag = true;
_L5:
            return flag;
_L2:
            flag = false;
            if (true) goto _L5; else goto _L4
_L4:
        }

        public int hashCode() {
            int i1 = 0;
            for (Iterator iterator1 = iterator(); iterator1.hasNext();)
                i1 += iterator1.next().hashCode();

            return i1;
        }

        public Iterator iterator() {
            ConcurrentHashMapV8 concurrenthashmapv8 = a;
            g ag[] = concurrenthashmapv8.b;
            int i1;
            if (ag == null)
                i1 = 0;
            else
                i1 = ag.length;
            return new e(ag, i1, 0, i1, concurrenthashmapv8);
        }

        public boolean remove(Object obj) {
            boolean flag;
            if (a.remove(obj) != null)
                flag = true;
            else
                flag = false;
            return flag;
        }

        KeySetView(ConcurrentHashMapV8 concurrenthashmapv8, Object obj) {
            super(concurrenthashmapv8);
            b = obj;
        }
    }

    static class Segment extends ReentrantLock
        implements Serializable {
    }

    static final class ValuesView extends CollectionView
        implements Serializable, Collection {

        public final boolean add(Object obj) {
            throw new UnsupportedOperationException();
        }

        public final boolean addAll(Collection collection) {
            throw new UnsupportedOperationException();
        }

        public final boolean contains(Object obj) {
            return a.containsValue(obj);
        }

        public final Iterator iterator() {
            ConcurrentHashMapV8 concurrenthashmapv8 = a;
            g ag[] = concurrenthashmapv8.b;
            int i1;
            if (ag == null)
                i1 = 0;
            else
                i1 = ag.length;
            return new k(ag, i1, 0, i1, concurrenthashmapv8);
        }

        public final boolean remove(Object obj) {
            if (obj == null) goto _L2; else goto _L1
_L1:
            Iterator iterator1 = iterator();
_L5:
            if (!iterator1.hasNext()) goto _L2; else goto _L3
_L3:
            if (!obj.equals(iterator1.next())) goto _L5; else goto _L4
_L4:
            boolean flag;
            iterator1.remove();
            flag = true;
_L7:
            return flag;
_L2:
            flag = false;
            if (true) goto _L7; else goto _L6
_L6:
        }

        ValuesView(ConcurrentHashMapV8 concurrenthashmapv8) {
            super(concurrenthashmapv8);
        }
    }

    static class a extends h {

        final ConcurrentHashMapV8 a;
        g b;

        public final boolean hasMoreElements() {
            boolean flag;
            if (d != null)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public final boolean hasNext() {
            boolean flag;
            if (d != null)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public final void remove() {
            g g1 = b;
            if (g1 == null) {
                throw new IllegalStateException();
            } else {
                b = null;
                a.a(g1.c, null, null);
                return;
            }
        }

        a(g ag[], int i1, int j1, int k1, ConcurrentHashMapV8 concurrenthashmapv8) {
            super(ag, i1, j1, k1);
            a = concurrenthashmapv8;
            b();
        }
    }

    static final class b {

        volatile long a;

        b(long l1) {
            a = l1;
        }
    }

    static final class c extends a
        implements Iterator {

        public final java.util.Map.Entry a() {
            g g1 = d;
            if (g1 == null) {
                throw new NoSuchElementException();
            } else {
                Object obj = g1.c;
                Object obj1 = g1.d;
                b = g1;
                b();
                return new f(obj, obj1, a);
            }
        }

        public Object next() {
            return a();
        }

        c(g ag[], int i1, int j1, int k1, ConcurrentHashMapV8 concurrenthashmapv8) {
            super(ag, i1, j1, k1, concurrenthashmapv8);
        }
    }

    static final class d extends g {

        final g a[];

        g a(int i1, Object obj) {
            Object obj1 = a;
_L10:
            if (obj == null || obj1 == null) goto _L2; else goto _L1
_L1:
            int j1 = obj1.length;
            if (j1 == 0) goto _L2; else goto _L3
_L3:
            g g1;
            obj1 = ConcurrentHashMapV8.a(((g []) (obj1)), j1 - 1 & i1);
            g1 = ((g) (obj1));
            if (obj1 != null) goto _L4; else goto _L2
_L2:
            obj1 = null;
_L8:
            return ((g) (obj1));
_L4:
            j1 = g1.b;
            if (j1 != i1) goto _L6; else goto _L5
_L5:
            Object obj2;
            obj2 = g1.c;
            obj1 = g1;
            if (obj2 == obj) goto _L8; else goto _L7
_L7:
            if (obj2 == null) goto _L6; else goto _L9
_L9:
            obj1 = g1;
            if (obj.equals(obj2)) goto _L8; else goto _L6
_L6:
label0:
            {
                if (j1 >= 0)
                    break MISSING_BLOCK_LABEL_133;
                if (!(g1 instanceof d))
                    break label0;
                obj1 = ((d)g1).a;
            }
              goto _L10
            obj1 = g1.a(i1, obj);
              goto _L8
            obj1 = g1.e;
            g1 = ((g) (obj1));
            if (obj1 != null) goto _L4; else goto _L11
_L11:
            obj1 = null;
              goto _L8
        }

        d(g ag[]) {
            super(-1, null, null, null);
            a = ag;
        }
    }

    static final class e extends a
        implements Enumeration, Iterator {

        public final Object next() {
            g g1 = d;
            if (g1 == null) {
                throw new NoSuchElementException();
            } else {
                Object obj = g1.c;
                b = g1;
                b();
                return obj;
            }
        }

        public final Object nextElement() {
            return next();
        }

        e(g ag[], int i1, int j1, int k1, ConcurrentHashMapV8 concurrenthashmapv8) {
            super(ag, i1, j1, k1, concurrenthashmapv8);
        }
    }

    static final class f
        implements java.util.Map.Entry {

        final Object a;
        Object b;
        final ConcurrentHashMapV8 c;

        public boolean equals(Object obj) {
            if (!(obj instanceof java.util.Map.Entry)) goto _L2; else goto _L1
_L1:
            Object obj1;
            obj1 = (java.util.Map.Entry)obj;
            obj = ((java.util.Map.Entry) (obj1)).getKey();
            if (obj == null) goto _L2; else goto _L3
_L3:
            obj1 = ((java.util.Map.Entry) (obj1)).getValue();
            if (obj1 == null || obj != a && !obj.equals(a) || obj1 != b && !obj1.equals(b)) goto _L2; else goto _L4
_L4:
            boolean flag = true;
_L6:
            return flag;
_L2:
            flag = false;
            if (true) goto _L6; else goto _L5
_L5:
        }

        public Object getKey() {
            return a;
        }

        public Object getValue() {
            return b;
        }

        public int hashCode() {
            return a.hashCode() ^ b.hashCode();
        }

        public Object setValue(Object obj) {
            if (obj == null) {
                throw new NullPointerException();
            } else {
                Object obj1 = b;
                b = obj;
                c.put(a, obj);
                return obj1;
            }
        }

        public String toString() {
            return (new StringBuilder()).append(a).append("=").append(b).toString();
        }

        f(Object obj, Object obj1, ConcurrentHashMapV8 concurrenthashmapv8) {
            a = obj;
            b = obj1;
            c = concurrenthashmapv8;
        }
    }

    static class g
        implements java.util.Map.Entry {

        final int b;
        final Object c;
        volatile Object d;
        volatile g e;

        g a(int i1, Object obj) {
            if (obj == null) goto _L2; else goto _L1
_L1:
            g g1 = this;
_L8:
            if (g1.b != i1) goto _L4; else goto _L3
_L3:
            g g2;
            Object obj1;
            obj1 = g1.c;
            g2 = g1;
            if (obj1 == obj) goto _L6; else goto _L5
_L5:
            if (obj1 == null || !obj.equals(obj1)) goto _L4; else goto _L7
_L7:
            g2 = g1;
_L6:
            return g2;
_L4:
            g2 = g1.e;
            g1 = g2;
            if (g2 != null) goto _L8; else goto _L2
_L2:
            g2 = null;
              goto _L6
        }

        public final boolean equals(Object obj) {
            if (!(obj instanceof java.util.Map.Entry)) goto _L2; else goto _L1
_L1:
            Object obj1;
            obj1 = (java.util.Map.Entry)obj;
            obj = ((java.util.Map.Entry) (obj1)).getKey();
            if (obj == null) goto _L2; else goto _L3
_L3:
            obj1 = ((java.util.Map.Entry) (obj1)).getValue();
            if (obj1 == null || obj != c && !obj.equals(c)) goto _L2; else goto _L4
_L4:
            obj = d;
            if (obj1 != obj && !obj1.equals(obj)) goto _L2; else goto _L5
_L5:
            boolean flag = true;
_L7:
            return flag;
_L2:
            flag = false;
            if (true) goto _L7; else goto _L6
_L6:
        }

        public final Object getKey() {
            return c;
        }

        public final Object getValue() {
            return d;
        }

        public final int hashCode() {
            return c.hashCode() ^ d.hashCode();
        }

        public final Object setValue(Object obj) {
            throw new UnsupportedOperationException();
        }

        public final String toString() {
            return (new StringBuilder()).append(c).append("=").append(d).toString();
        }

        g(int i1, Object obj, Object obj1, g g1) {
            b = i1;
            c = obj;
            d = obj1;
            e = g1;
        }
    }

    static class h {

        g c[];
        g d;
        int e;
        int f;
        int g;
        final int h;

        final g b() {
            Object obj;
            Object obj2;
            obj2 = null;
            g g1 = d;
            obj = g1;
            if (g1 != null)
                obj = g1.e;
_L6:
            if (obj == null) goto _L2; else goto _L1
_L1:
            d = ((g) (obj));
_L4:
            return ((g) (obj));
_L2:
            int i1;
            if (f < g) {
                obj = c;
                if (obj != null) {
                    i1 = obj.length;
                    int j1 = e;
                    if (i1 > j1 && j1 >= 0)
                        break; /* Loop/switch isn't completed */
                }
            }
            d = null;
            obj = obj2;
            if (true) goto _L4; else goto _L3
_L3:
            obj = ConcurrentHashMapV8.a(((g []) (obj)), e);
            Object obj1 = obj;
            if (obj != null) {
                obj1 = obj;
                if (((g) (obj)).b < 0) {
                    if (obj instanceof d) {
                        c = ((d)obj).a;
                        obj = null;
                        continue; /* Loop/switch isn't completed */
                    }
                    int k1;
                    if (obj instanceof i)
                        obj1 = ((i)obj).f;
                    else
                        obj1 = null;
                }
            }
            k1 = e + h;
            e = k1;
            obj = obj1;
            if (k1 >= i1) {
                i1 = f + 1;
                f = i1;
                e = i1;
                obj = obj1;
            }
            if (true) goto _L6; else goto _L5
_L5:
        }

        h(g ag[], int i1, int j1, int k1) {
            c = ag;
            h = i1;
            e = j1;
            f = j1;
            g = k1;
            d = null;
        }
    }

    static final class i extends g {

        static final boolean i;
        private static final Unsafe j;
        private static final long k;
        j a;
        volatile j f;
        volatile Thread g;
        volatile int h;

        static j a(j j1, j j2) {
            j j3 = j1;
            if (j2 != null) {
                j j4 = j2.g;
                j3 = j1;
                if (j4 != null) {
                    j3 = j4.f;
                    j2.g = j3;
                    if (j3 != null)
                        j3.a = j2;
                    j3 = j2.a;
                    j4.a = j3;
                    if (j3 == null) {
                        j4.i = false;
                        j1 = j4;
                    } else
                    if (j3.f == j2)
                        j3.f = j4;
                    else
                        j3.g = j4;
                    j4.f = j2;
                    j2.a = j4;
                    j3 = j1;
                }
            }
            return j3;
        }

        private final void a() {
            if (!j.compareAndSwapInt(this, k, 0, 1))
                c();
        }

        static j b(j j1, j j2) {
            j j3 = j1;
            if (j2 != null) {
                j j4 = j2.f;
                j3 = j1;
                if (j4 != null) {
                    j3 = j4.g;
                    j2.f = j3;
                    if (j3 != null)
                        j3.a = j2;
                    j3 = j2.a;
                    j4.a = j3;
                    if (j3 == null) {
                        j4.i = false;
                        j1 = j4;
                    } else
                    if (j3.g == j2)
                        j3.g = j4;
                    else
                        j3.f = j4;
                    j4.g = j2;
                    j2.a = j4;
                    j3 = j1;
                }
            }
            return j3;
        }

        private final void b() {
            h = 0;
        }

        static boolean b(j j1) {
            j j5 = j1.a;
            j j6 = j1.f;
            j j2 = j1.g;
            j j3 = j1.h;
            j j4 = (j)j1.e;
            boolean flag;
            if (j3 != null && j3.e != j1)
                flag = false;
            else
            if (j4 != null && j4.h != j1)
                flag = false;
            else
            if (j5 != null && j1 != j5.f && j1 != j5.g)
                flag = false;
            else
            if (j6 != null && (j6.a != j1 || j6.b > j1.b))
                flag = false;
            else
            if (j2 != null && (j2.a != j1 || j2.b < j1.b))
                flag = false;
            else
            if (j1.i && j6 != null && j6.i && j2 != null && j2.i)
                flag = false;
            else
            if (j6 != null && !b(j6))
                flag = false;
            else
            if (j2 != null && !b(j2))
                flag = false;
            else
                flag = true;
            return flag;
        }

        static j c(j j1, j j2) {
            j2.i = true;
_L6:
            j j3 = j2.a;
            if (j3 != null) goto _L2; else goto _L1
_L1:
            j2.i = false;
_L4:
            return j2;
_L2:
            j j4;
            if (j3.i) {
                j4 = j3.a;
                if (j4 != null)
                    break; /* Loop/switch isn't completed */
            }
            j2 = j1;
            if (true) goto _L4; else goto _L3
_L3:
            j j5 = j4.f;
            if (j3 == j5) {
                j5 = j4.g;
                if (j5 != null && j5.i) {
                    j5.i = false;
                    j3.i = false;
                    j4.i = true;
                    j2 = j4;
                } else {
                    j j9 = j4;
                    j j7 = j3;
                    j5 = j1;
                    j4 = j2;
                    if (j2 == j3.g) {
                        j5 = a(j1, j3);
                        j7 = j3.a;
                        if (j7 == null)
                            j1 = null;
                        else
                            j1 = j7.a;
                        j4 = j3;
                        j9 = j1;
                    }
                    j1 = j5;
                    j2 = j4;
                    if (j7 != null) {
                        j7.i = false;
                        j1 = j5;
                        j2 = j4;
                        if (j9 != null) {
                            j9.i = true;
                            j1 = b(j5, j9);
                            j2 = j4;
                        }
                    }
                }
            } else
            if (j5 != null && j5.i) {
                j5.i = false;
                j3.i = false;
                j4.i = true;
                j2 = j4;
            } else {
                j j6;
                j j8;
                if (j2 == j3.f) {
                    j4 = b(j1, j3);
                    j6 = j3.a;
                    if (j6 == null)
                        j1 = null;
                    else
                        j1 = j6.a;
                    j8 = j1;
                } else {
                    j8 = j4;
                    j6 = j3;
                    j4 = j1;
                    j3 = j2;
                }
                j1 = j4;
                j2 = j3;
                if (j6 != null) {
                    j6.i = false;
                    j1 = j4;
                    j2 = j3;
                    if (j8 != null) {
                        j8.i = true;
                        j1 = a(j4, j8);
                        j2 = j3;
                    }
                }
            }
            if (true) goto _L6; else goto _L5
_L5:
        }

        private final void c() {
            boolean flag = false;
            do {
                int i1 = h;
                if ((i1 & 1) == 0) {
                    if (j.compareAndSwapInt(this, k, i1, 1)) {
                        if (flag)
                            g = null;
                        return;
                    }
                } else
                if ((i1 & 2) == 0) {
                    if (j.compareAndSwapInt(this, k, i1, i1 | 2)) {
                        g = Thread.currentThread();
                        flag = true;
                    }
                } else
                if (flag)
                    LockSupport.park(this);
            } while (true);
        }

        static j d(j j1, j j2) {
_L7:
            j j3 = j1;
            if (j2 == null) goto _L2; else goto _L1
_L1:
            if (j2 != j1) goto _L4; else goto _L3
_L3:
            j3 = j1;
_L2:
            return j3;
_L4:
            j3 = j2.a;
            if (j3 == null) {
                j2.i = false;
                j3 = j2;
                continue; /* Loop/switch isn't completed */
            }
            if (!j2.i)
                break; /* Loop/switch isn't completed */
            j2.i = false;
            j3 = j1;
            if (true) goto _L2; else goto _L5
_L5:
            j j4 = j3.f;
            if (j4 == j2) {
                j4 = j3.g;
                if (j4 != null && j4.i) {
                    j4.i = false;
                    j3.i = true;
                    j j5 = a(j1, j3);
                    j3 = j2.a;
                    if (j3 == null)
                        j1 = null;
                    else
                        j1 = j3.g;
                    j4 = j1;
                    j1 = j5;
                }
                if (j4 == null) {
                    j2 = j3;
                } else {
                    j j6 = j4.f;
                    j j7 = j4.g;
                    if ((j7 == null || !j7.i) && (j6 == null || !j6.i)) {
                        j4.i = true;
                    } else {
                        boolean flag1;
                        if (j7 == null || !j7.i) {
                            if (j6 != null)
                                j6.i = false;
                            j4.i = true;
                            j4 = b(j1, j4);
                            j2 = j2.a;
                            if (j2 == null)
                                j1 = null;
                            else
                                j1 = j2.g;
                            j3 = j1;
                            j1 = j4;
                        } else {
                            j2 = j3;
                            j3 = j4;
                        }
                        if (j3 != null) {
                            boolean flag;
                            if (j2 == null)
                                flag = false;
                            else
                                flag = j2.i;
                            j3.i = flag;
                            j3 = j3.g;
                            if (j3 != null)
                                j3.i = false;
                        }
                        if (j2 != null) {
                            j2.i = false;
                            j1 = a(j1, j2);
                        }
                        j2 = j1;
                        j3 = j1;
                        j1 = j2;
                    }
                    j2 = j3;
                }
                continue; /* Loop/switch isn't completed */
            }
            if (j4 != null && j4.i) {
                j4.i = false;
                j3.i = true;
                j6 = b(j1, j3);
                j3 = j2.a;
                if (j3 == null)
                    j1 = null;
                else
                    j1 = j3.f;
                j4 = j1;
                j1 = j6;
            }
            if (j4 == null) {
                j2 = j3;
                continue; /* Loop/switch isn't completed */
            }
            j7 = j4.f;
            j6 = j4.g;
            if (j7 != null && j7.i || j6 != null && j6.i)
                break; /* Loop/switch isn't completed */
            j4.i = true;
            j2 = j3;
            if (true) goto _L7; else goto _L6
_L6:
            if (j7 == null || !j7.i) {
                if (j6 != null)
                    j6.i = false;
                j4.i = true;
                j3 = a(j1, j4);
                j2 = j2.a;
                if (j2 == null)
                    j1 = null;
                else
                    j1 = j2.f;
                j4 = j1;
                j1 = j3;
            } else {
                j2 = j3;
            }
            if (j4 != null) {
                if (j2 == null)
                    flag1 = false;
                else
                    flag1 = j2.i;
                j4.i = flag1;
                j3 = j4.f;
                if (j3 != null)
                    j3.i = false;
            }
            if (j2 != null) {
                j2.i = false;
                j1 = b(j1, j2);
            }
            j2 = j1;
            j3 = j1;
            j1 = j2;
            break MISSING_BLOCK_LABEL_421;
            if (true) goto _L7; else goto _L8
_L8:
        }

        final g a(int i1, Object obj) {
            Object obj1;
            Object obj3;
            Object obj4;
            obj3 = null;
            obj4 = null;
            obj1 = obj4;
            if (obj == null) goto _L2; else goto _L1
_L1:
            Object obj2 = f;
_L11:
            obj1 = obj4;
            if (obj2 == null) goto _L2; else goto _L3
_L3:
            int j1 = h;
            if ((j1 & 3) == 0) goto _L5; else goto _L4
_L4:
            if (((g) (obj2)).b != i1) goto _L7; else goto _L6
_L6:
            obj1 = ((g) (obj2)).c;
            if (obj1 != obj && (obj1 == null || !obj.equals(obj1))) goto _L7; else goto _L8
_L8:
            obj1 = obj2;
_L2:
            return ((g) (obj1));
_L5:
            if (!j.compareAndSwapInt(this, k, j1, j1 + 4))
                break; /* Loop/switch isn't completed */
            obj1 = a;
            if (obj1 != null)
                break MISSING_BLOCK_LABEL_178;
            obj = obj3;
_L9:
            long l1;
            do {
                obj1 = j;
                l1 = k;
                i1 = h;
            } while (!((Unsafe) (obj1)).compareAndSwapInt(this, l1, i1, i1 - 4));
            obj1 = obj;
            if (i1 == 6) {
                obj2 = g;
                obj1 = obj;
                if (obj2 != null) {
                    LockSupport.unpark(((Thread) (obj2)));
                    obj1 = obj;
                }
            }
            if (true) goto _L2; else goto _L7
            obj = ((j) (obj1)).a(i1, obj, null);
              goto _L9
            obj;
            long l2;
            Unsafe unsafe;
            do {
                unsafe = j;
                l2 = k;
                i1 = h;
            } while (!unsafe.compareAndSwapInt(this, l2, i1, i1 - 4));
            if (i1 == 6) {
                Thread thread = g;
                if (thread != null)
                    LockSupport.unpark(thread);
            }
            throw obj;
_L7:
            obj2 = ((g) (obj2)).e;
            if (true) goto _L11; else goto _L10
_L10:
        }

        final j a(int i1, Object obj, Object obj1) {
            Object obj2;
            Object obj4;
            obj4 = a;
            obj2 = null;
_L12:
            Object obj3;
            if (obj4 == null) {
                obj = new j(i1, obj, obj1, null, null);
                a = ((j) (obj));
                f = ((j) (obj));
                break MISSING_BLOCK_LABEL_37;
            }
            j1 = ((j) (obj4)).b;
            if (j1 > i1) {
                j1 = -1;
            } else {
label0:
                {
                    if (j1 >= i1)
                        break label0;
                    j1 = 1;
                }
            }
_L10:
            if (j1 < 0)
                obj3 = ((j) (obj4)).f;
            else
                obj3 = ((j) (obj4)).g;
            if (obj3 != null) goto _L2; else goto _L1
_L1:
            obj2 = f;
            obj = new j(i1, obj, obj1, ((g) (obj2)), ((j) (obj4)));
            f = ((j) (obj));
            if (obj2 != null)
                obj2.h = ((j) (obj));
            Object obj5;
            if (j1 < 0)
                obj4.f = ((j) (obj));
            else
                obj4.g = ((j) (obj));
            if (((j) (obj4)).i) goto _L4; else goto _L3
_L3:
            obj.i = true;
              goto _L5
            obj5 = ((j) (obj4)).c;
            obj3 = obj4;
            if (obj5 == obj) goto _L7; else goto _L6
_L6:
            if (obj5 == null || !obj.equals(obj5)) goto _L9; else goto _L8
_L8:
            obj3 = obj4;
_L7:
            return ((j) (obj3));
_L9:
label1:
            {
                obj3 = obj2;
                if (obj2 == null) {
                    obj3 = ConcurrentHashMapV8.a(obj);
                    obj2 = obj3;
                    if (obj3 == null)
                        break label1;
                }
                j1 = ConcurrentHashMapV8.a(((Class) (obj3)), obj, obj5);
                if (j1 != 0)
                    break MISSING_BLOCK_LABEL_364;
                obj2 = obj3;
            }
label2:
            {
                if (((j) (obj4)).f != null)
                    break label2;
                j1 = 1;
            }
              goto _L10
            for (obj3 = ((j) (obj4)).g; obj3 == null; obj3 = ((j) (obj4)).g)
                break; /* Loop/switch isn't completed */

            obj3 = ((j) (obj3)).a(i1, obj, ((Class) (obj2)));
            if (obj3 != null) goto _L7; else goto _L11
_L11:
            j1 = -1;
              goto _L10
_L4:
            a();
            a = c(a, ((j) (obj)));
            b();
              goto _L5
            obj;
            b();
            throw obj;
_L2:
            obj4 = obj3;
              goto _L12
_L5:
            int j1;
            if (!i && !b(a))
                throw new AssertionError();
            obj3 = null;
              goto _L7
            obj2 = obj3;
              goto _L10
        }

        final boolean a(j j1) {
            boolean flag;
            j j2 = (j)j1.e;
            j j4 = j1.h;
            if (j4 == null)
                f = j2;
            else
                j4.e = j2;
            if (j2 != null)
                j2.h = j4;
            if (f != null) goto _L2; else goto _L1
_L1:
            a = null;
            flag = true;
_L30:
            return flag;
_L2:
            j j3;
label0:
            {
                j3 = a;
                if (j3 != null && j3.g != null) {
                    j j5 = j3.f;
                    if (j5 != null && j5.f != null)
                        break label0;
                }
                flag = true;
                continue; /* Loop/switch isn't completed */
            }
            a();
            j j7;
            j j8;
            j8 = j1.f;
            j7 = j1.g;
            if (j8 == null || j7 == null) goto _L4; else goto _L3
_L3:
            j j6 = j7;
_L6:
            j j9 = j6.f;
            if (j9 == null)
                break; /* Loop/switch isn't completed */
            j6 = j9;
            if (true) goto _L6; else goto _L5
_L5:
            j j10;
            flag = j6.i;
            j6.i = j1.i;
            j1.i = flag;
            j9 = j6.g;
            j10 = j1.a;
            if (j6 != j7) goto _L8; else goto _L7
_L7:
            j1.a = j6;
            j6.g = j1;
_L22:
            j1.f = null;
            j6.f = j8;
            j8.a = j6;
            j1.g = j9;
            if (j9 == null)
                break MISSING_BLOCK_LABEL_236;
            j9.a = j1;
            j6.a = j10;
            if (j10 != null) goto _L10; else goto _L9
_L9:
            j3 = j6;
_L24:
            j j11;
            if (j9 != null)
                j6 = j9;
            else
                j6 = j1;
_L25:
            j7 = j3;
            if (j6 == j1) goto _L12; else goto _L11
_L11:
            j7 = j1.a;
            j6.a = j7;
            if (j7 != null) goto _L14; else goto _L13
_L13:
            j3 = j6;
_L26:
            j1.a = null;
            j1.g = null;
            j1.f = null;
            j7 = j3;
_L12:
            if (!j1.i) goto _L16; else goto _L15
_L15:
            a = j7;
            if (j1 != j6) goto _L18; else goto _L17
_L17:
            j3 = j1.a;
            if (j3 == null) goto _L18; else goto _L19
_L19:
            if (j1 != j3.f) goto _L21; else goto _L20
_L20:
            j3.f = null;
_L28:
            j1.a = null;
_L18:
            b();
            if (!i && !b(a))
                throw new AssertionError();
            break MISSING_BLOCK_LABEL_571;
_L8:
            j11 = j6.a;
            j1.a = j11;
            if (j11 == null)
                break MISSING_BLOCK_LABEL_416;
            if (j6 != j11.f)
                break MISSING_BLOCK_LABEL_440;
            j11.f = j1;
_L23:
            j6.g = j7;
            j7.a = j6;
              goto _L22
            j1;
            b();
            throw j1;
            j11.g = j1;
              goto _L23
_L10:
label1:
            {
                if (j1 != j10.f)
                    break label1;
                j10.f = j6;
            }
              goto _L24
            j10.g = j6;
              goto _L24
_L4:
            if (j8 != null)
                j6 = j8;
            else
            if (j7 != null)
                j6 = j7;
            else
                j6 = j1;
              goto _L25
_L14:
label2:
            {
                if (j1 != j7.f)
                    break label2;
                j7.f = j6;
            }
              goto _L26
            j7.g = j6;
              goto _L26
_L16:
            j7 = d(j7, j6);
              goto _L15
_L21:
            if (j1 != j3.g) goto _L28; else goto _L27
_L27:
            j3.g = null;
              goto _L28
            flag = false;
            if (true) goto _L30; else goto _L29
_L29:
        }

        static  {
            boolean flag;
            if (!io/netty/util/internal/chmv8/ConcurrentHashMapV8.desiredAssertionStatus())
                flag = true;
            else
                flag = false;
            i = flag;
            try {
                j = io.netty.util.internal.chmv8.ConcurrentHashMapV8.d();
                k = j.objectFieldOffset(io/netty/util/internal/chmv8/ConcurrentHashMapV8$i.getDeclaredField("lockState"));
            }
            catch (Exception exception) {
                throw new Error(exception);
            }
        }

        i(j j1) {
            j j2;
            j j3;
            super(-2, null, null, null);
            f = j1;
            j3 = null;
            j2 = j1;
_L2:
            j j4;
            if (j2 == null)
                break MISSING_BLOCK_LABEL_236;
            j4 = (j)j2.e;
            j2.g = null;
            j2.f = null;
            if (j3 != null)
                break; /* Loop/switch isn't completed */
            j2.a = null;
            j2.i = false;
_L3:
            j3 = j2;
            j2 = j4;
            if (true) goto _L2; else goto _L1
_L1:
            int k1;
            Object obj1;
            Object obj2;
            obj2 = j2.c;
            k1 = j2.b;
            obj1 = j3;
            j1 = null;
_L5:
            int i1;
            Object obj;
            i1 = ((j) (obj1)).b;
            if (i1 > k1)
                i1 = -1;
            else
            if (i1 < k1) {
                i1 = 1;
            } else {
label0:
                {
                    obj = j1;
                    if (j1 == null) {
                        obj = ConcurrentHashMapV8.a(obj2);
                        if (obj == null)
                            break label0;
                    }
                    i1 = ConcurrentHashMapV8.a(((Class) (obj)), obj2, ((j) (obj1)).c);
                    j1 = ((j) (obj));
                }
            }
_L4:
            if (i1 <= 0)
                obj = ((j) (obj1)).f;
            else
                obj = ((j) (obj1)).g;
            if (obj != null)
                break MISSING_BLOCK_LABEL_229;
            j2.a = ((j) (obj1));
            if (i1 <= 0)
                obj1.f = j2;
            else
                obj1.g = j2;
            j2 = c(j3, j2);
              goto _L3
            i1 = 0;
            j1 = ((j) (obj));
              goto _L4
            obj1 = obj;
              goto _L5
            a = j3;
            return;
              goto _L3
        }
    }

    static final class j extends g {

        j a;
        j f;
        j g;
        j h;
        boolean i;

        g a(int i1, Object obj) {
            return a(i1, obj, null);
        }

        final j a(int i1, Object obj, Class class1) {
            if (obj == null) goto _L2; else goto _L1
_L1:
            Object obj1;
            Class class2;
            class2 = class1;
            obj1 = this;
_L5:
            int j1;
            j j2;
            class1 = ((j) (obj1)).f;
            j2 = ((j) (obj1)).g;
            j1 = ((j) (obj1)).b;
            if (j1 <= i1) goto _L4; else goto _L3
_L3:
            obj1 = class1;
            if (class1 != null) goto _L5; else goto _L2
_L2:
            Object obj2 = null;
_L7:
            return ((j) (obj2));
_L4:
            Object obj3;
            if (j1 < i1) {
                class1 = j2;
                break; /* Loop/switch isn't completed */
            }
            obj3 = ((j) (obj1)).c;
            obj2 = obj1;
            if (obj3 == obj) goto _L7; else goto _L6
_L6:
            if (obj3 == null)
                break; /* Loop/switch isn't completed */
            obj2 = obj1;
            if (obj.equals(obj3)) goto _L7; else goto _L8
_L8:
            if (class1 == null && j2 == null) goto _L2; else goto _L9
_L9:
label0:
            {
                obj1 = class2;
                if (class2 == null) {
                    obj1 = ConcurrentHashMapV8.a(obj);
                    class2 = ((Class) (obj1));
                    if (obj1 == null)
                        break label0;
                }
                int k1 = ConcurrentHashMapV8.a(((Class) (obj1)), obj, obj3);
                class2 = ((Class) (obj1));
                if (k1 != 0) {
                    if (k1 >= 0)
                        class1 = j2;
                    class2 = ((Class) (obj1));
                    break; /* Loop/switch isn't completed */
                }
            }
            if (class1 != null)
                continue; /* Loop/switch isn't completed */
            class1 = j2;
            break; /* Loop/switch isn't completed */
            if (j2 == null) goto _L11; else goto _L10
_L10:
            break MISSING_BLOCK_LABEL_181;
_L11:
            break; /* Loop/switch isn't completed */
            obj1 = j2.a(i1, obj, class2);
            obj2 = obj1;
            if (obj1 != null) goto _L7; else goto _L3
        }

        j(int i1, Object obj, Object obj1, g g1, j j1) {
            super(i1, obj, obj1, g1);
            a = j1;
        }
    }

    static final class k extends a
        implements Enumeration, Iterator {

        public final Object next() {
            g g1 = d;
            if (g1 == null) {
                throw new NoSuchElementException();
            } else {
                Object obj = g1.d;
                b = g1;
                b();
                return obj;
            }
        }

        public final Object nextElement() {
            return next();
        }

        k(g ag[], int i1, int j1, int k1, ConcurrentHashMapV8 concurrenthashmapv8) {
            super(ag, i1, j1, k1, concurrenthashmapv8);
        }
    }


    static final int a;
    static final AtomicInteger c;
    private static final ObjectStreamField d[];
    private static final Unsafe o;
    private static final long p;
    private static final long q;
    private static final long r;
    private static final long s;
    private static final long t;
    private static final long u;
    private static final long v;
    private static final int w;
    volatile transient g b[];
    private volatile transient g e[];
    private volatile transient long f;
    private volatile transient int g;
    private volatile transient int h;
    private volatile transient int i;
    private volatile transient int j;
    private volatile transient b k[];
    private transient KeySetView l;
    private transient ValuesView m;
    private transient EntrySetView n;

    public ConcurrentHashMapV8() {
    }

    static final int a(int i1) {
        return (i1 >>> 16 ^ i1) & 0x7fffffff;
    }

    static int a(Class class1, Object obj, Object obj1) {
        int i1;
        if (obj1 == null || obj1.getClass() != class1)
            i1 = 0;
        else
            i1 = ((Comparable)obj).compareTo(obj1);
        return i1;
    }

    static g a(g g1) {
        g g3 = null;
        g g4 = null;
        while (g1 != null)  {
            g g2 = new g(g1.b, g1.c, g1.d, null);
            if (g3 == null)
                g4 = g2;
            else
                g3.e = g2;
            g1 = g1.e;
            g3 = g2;
        }
        return g4;
    }

    static final g a(g ag[], int i1) {
        return (g)o.getObjectVolatile(ag, ((long)i1 << w) + v);
    }

    static Class a(Object obj) {
        if (!(obj instanceof Comparable)) goto _L2; else goto _L1
_L1:
        obj = obj.getClass();
        if (obj != java/lang/String) goto _L4; else goto _L3
_L3:
        return ((Class) (obj));
_L4:
        java.lang.reflect.Type atype[] = ((Class) (obj)).getGenericInterfaces();
        if (atype != null) {
            for (int i1 = 0; i1 < atype.length; i1++) {
                Object obj1 = atype[i1];
                if (!(obj1 instanceof ParameterizedType))
                    continue;
                obj1 = (ParameterizedType)obj1;
                if (((ParameterizedType) (obj1)).getRawType() != java/lang/Comparable)
                    continue;
                java.lang.reflect.Type atype1[] = ((ParameterizedType) (obj1)).getActualTypeArguments();
                if (atype1 != null && atype1.length == 1 && atype1[0] == obj)
                    continue; /* Loop/switch isn't completed */
            }

        }
_L2:
        obj = null;
        if (true) goto _L3; else goto _L5
_L5:
    }

    private final void a(long l1, int i1) {
        long l2;
        io.netty.util.internal.d d1;
        io.netty.util.internal.e e1;
        b ab[];
        ab = k;
        if (ab == null) {
            Unsafe unsafe = o;
            long l3 = s;
            long l5 = f;
            l2 = l5 + l1;
            if (unsafe.compareAndSwapLong(this, l3, l5, l2))
                break MISSING_BLOCK_LABEL_293;
        }
        e1 = io.netty.util.internal.e.b();
        d1 = e1.m();
        if (d1 == null || ab == null) goto _L2; else goto _L1
_L1:
        int j1 = ab.length - 1;
        if (j1 < 0) goto _L2; else goto _L3
_L3:
        b b1 = ab[j1 & d1.a];
        if (b1 == null) goto _L2; else goto _L4
_L4:
        boolean flag;
        Unsafe unsafe1 = o;
        long l4 = u;
        l2 = b1.a;
        flag = unsafe1.compareAndSwapLong(b1, l4, l2, l2 + l1);
        if (flag) goto _L6; else goto _L5
_L5:
        a(e1, l1, d1, flag);
_L8:
        return;
_L6:
        if (i1 <= 1) goto _L8; else goto _L7
_L7:
        l1 = c();
_L15:
        if (i1 < 0) goto _L8; else goto _L9
_L9:
        i1 = g;
        if (l1 < (long)i1) goto _L8; else goto _L10
_L10:
        g ag1[] = b;
        if (ag1 == null || ag1.length >= 0x40000000) goto _L8; else goto _L11
_L11:
        if (i1 >= 0)
            break MISSING_BLOCK_LABEL_261;
        if (i1 == -1 || h <= i) goto _L8; else goto _L12
_L12:
        g ag[] = e;
        if (ag == null) goto _L8; else goto _L13
_L13:
        if (o.compareAndSwapInt(this, p, i1, i1 - 1))
            a(ag1, ag);
_L14:
        l1 = c();
          goto _L9
        if (o.compareAndSwapInt(this, p, i1, -2))
            a(ag1, ((g []) (null)));
          goto _L14
_L2:
        flag = true;
          goto _L5
        l1 = l2;
          goto _L15
    }

    private final void a(io.netty.util.internal.e e1, long l1, io.netty.util.internal.d d1, boolean flag) {
        int i1;
        int j2;
        int k2;
        b ab[];
        int k1;
        int l2;
        if (d1 == null) {
            d1 = new io.netty.util.internal.d();
            int j1 = c.addAndGet(0x61c88647);
            i1 = j1;
            if (j1 == 0)
                i1 = 1;
            d1.a = i1;
            e1.a(d1);
        } else {
            i1 = d1.a;
        }
        j2 = i1;
        i1 = 0;
_L9:
        e1 = k;
        if (e1 == null) goto _L2; else goto _L1
_L1:
        k2 = e1.length;
        if (k2 <= 0) goto _L2; else goto _L3
_L3:
        ab = e1[k2 - 1 & j2];
        if (ab != null) goto _L5; else goto _L4
_L4:
        if (j != 0) goto _L7; else goto _L6
_L6:
        e1 = new b(l1);
        if (j != 0 || !o.compareAndSwapInt(this, t, 0, 1)) goto _L7; else goto _L8
_L8:
        k2 = 0;
        ab = k;
        k1 = k2;
        if (ab == null)
            break MISSING_BLOCK_LABEL_191;
        l2 = ab.length;
        k1 = k2;
        if (l2 > 0) {
            l2 = l2 - 1 & j2;
            k1 = k2;
            if (ab[l2] == null) {
                ab[l2] = e1;
                k1 = 1;
            }
        }
        j = 0;
        if (k1 == 0)
            break MISSING_BLOCK_LABEL_57;
_L12:
        d1.a = j2;
        return;
        e1;
        j = 0;
        throw e1;
_L7:
        int i2;
        boolean flag1;
        i2 = 0;
        flag1 = flag;
_L10:
        i1 = j2 << 13 ^ j2;
        i1 ^= i1 >>> 17;
        j2 = i1 ^ i1 << 5;
        i1 = i2;
        flag = flag1;
        i2 = j2;
_L16:
        j2 = i2;
          goto _L9
_L5:
label0:
        {
            if (flag)
                break label0;
            flag1 = true;
            i2 = i1;
        }
          goto _L10
        long l3;
        long l4;
        Unsafe unsafe;
        unsafe = o;
        l4 = u;
        l3 = ((b) (ab)).a;
        if (unsafe.compareAndSwapLong(ab, l4, l3, l3 + l1)) goto _L12; else goto _L11
_L11:
        if (k != e1 || k2 >= a) {
            i2 = 0;
            flag1 = flag;
        } else {
label1:
            {
                if (i1 != 0)
                    break label1;
                i2 = 1;
                flag1 = flag;
            }
        }
          goto _L10
        i2 = i1;
        flag1 = flag;
        if (j != 0) goto _L10; else goto _L13
_L13:
        i2 = i1;
        flag1 = flag;
        if (!o.compareAndSwapInt(this, t, 0, 1)) goto _L10; else goto _L14
_L14:
        if (k != e1)
            break MISSING_BLOCK_LABEL_459;
        ab = new b[k2 << 1];
        for (i1 = 0; i1 < k2; i1++)
            ab[i1] = e1[i1];

        k = ab;
        j = 0;
        i1 = 0;
          goto _L9
        e1;
        j = 0;
        throw e1;
_L2:
        if (j != 0 || k != e1 || !o.compareAndSwapInt(this, t, 0, 1))
            break MISSING_BLOCK_LABEL_576;
        i2 = 0;
        if (k != e1)
            break MISSING_BLOCK_LABEL_551;
        ab = new b[2];
        e1 = JVM INSTR new #31  <Class ConcurrentHashMapV8$b>;
        e1.b(l1);
        ab[j2 & 1] = e1;
        k = ab;
        i2 = 1;
        j = 0;
        if (i2 != 0) goto _L12; else goto _L15
_L15:
        i2 = j2;
          goto _L16
        e1;
        j = 0;
        throw e1;
        e1 = o;
        l4 = s;
        l3 = f;
        if (e1.compareAndSwapLong(this, l4, l3, l3 + l1)) goto _L12; else goto _L17
_L17:
        i2 = j2;
          goto _L16
    }

    static final void a(g ag[], int i1, g g1) {
        o.putObjectVolatile(ag, ((long)i1 << w) + v, g1);
    }

    private final void a(g ag[], g ag1[]) {
        int l1 = ag.length;
        int i1;
        int j1;
        int k1;
        int j2;
        g ag2[];
        if (a > 1)
            i1 = (l1 >>> 3) / a;
        else
            i1 = l1;
        int i2;
        int k2;
        int l2;
        int i3;
        long l3;
        Object obj;
        Object obj1;
        Object obj2;
        Object obj3;
        g g1;
        Object obj4;
        Object obj5;
        d d1;
        if (i1 < 16)
            j2 = 16;
        else
            j2 = i1;
        ag2 = ag1;
        if (ag1 != null) goto _L2; else goto _L1
_L1:
        ag2 = (g[])new g[l1 << 1];
        e = ag2;
        i = l1;
        h = l1;
        ag1 = new d(ag);
        for (j1 = l1; j1 > 0; j1 = i1) {
            if (j1 > j2)
                i1 = j1 - j2;
            else
                i1 = 0;
            for (k1 = i1; k1 < j1; k1++)
                ag2[k1] = ag1;

            for (k1 = l1 + i1; k1 < l1 + j1; k1++)
                ag2[k1] = ag1;

            o.putOrderedInt(this, r, i1);
        }

          goto _L2
        ag;
        g = 0x7fffffff;
_L6:
        return;
_L2:
        l2 = ag2.length;
        d1 = new d(ag2);
        j1 = 1;
        k1 = 0;
        i1 = 0;
        k2 = 0;
_L8:
        while (j1 != 0) 
            if (--i1 >= k2 || k1 != 0) {
                j1 = 0;
            } else {
                i3 = h;
                if (i3 <= i) {
                    i1 = -1;
                    j1 = 0;
                } else {
                    ag1 = o;
                    l3 = q;
                    if (i3 > j2)
                        i2 = i3 - j2;
                    else
                        i2 = 0;
                    if (ag1.compareAndSwapInt(this, l3, i3, i2)) {
                        i1 = i3 - 1;
                        j1 = 0;
                        k2 = i2;
                    }
                }
            }
        if (i1 >= 0 && i1 < l1 && i1 + l1 < l2) goto _L4; else goto _L3
_L3:
label0:
        {
            if (k1 == 0)
                break label0;
            e = null;
            b = ag2;
            g = (l1 << 1) - (l1 >>> 1);
        }
        if (true) goto _L6; else goto _L5
_L5:
        do {
            ag1 = o;
            l3 = p;
            i1 = g;
            j1 = i1 + 1;
        } while (!ag1.compareAndSwapInt(this, l3, i1, j1));
        if (j1 != -1) goto _L6; else goto _L7
_L7:
        j1 = 1;
        k1 = 1;
        i1 = l1;
_L10:
        i2 = j1;
        j1 = k1;
        k1 = i2;
          goto _L8
_L4:
        g1 = a(ag, i1);
        if (g1 == null) {
            if (a(ag, i1, ((g) (null)), ((g) (d1)))) {
                a(ag2, i1, ((g) (null)));
                a(ag2, i1 + l1, ((g) (null)));
                j1 = k1;
                k1 = 1;
            } else {
                i2 = j1;
                j1 = k1;
                k1 = i2;
            }
        } else {
label1:
            {
                i2 = g1.b;
                if (i2 != -1)
                    break label1;
                j1 = k1;
                k1 = 1;
            }
        }
        if (true) goto _L10; else goto _L9
_L9:
        g1;
        JVM INSTR monitorenter ;
        if (a(ag, i1) != g1) goto _L12; else goto _L11
_L11:
        if (i2 < 0) goto _L14; else goto _L13
_L13:
        j1 = i2 & l1;
        obj = g1.e;
        ag1 = g1;
_L16:
        if (obj == null)
            break; /* Loop/switch isn't completed */
        i2 = ((g) (obj)).b & l1;
        if (i2 != j1) {
            ag1 = ((g []) (obj));
            j1 = i2;
        }
        obj = ((g) (obj)).e;
        if (true) goto _L16; else goto _L15
_L15:
        if (j1 == 0) {
            obj1 = null;
            obj = ag1;
        } else {
            obj = null;
            obj1 = ag1;
        }
        obj2 = g1;
        if (obj2 == ag1)
            break MISSING_BLOCK_LABEL_688;
        j1 = ((g) (obj2)).b;
        obj4 = ((g) (obj2)).c;
        obj5 = ((g) (obj2)).d;
        if ((j1 & l1) != 0)
            break MISSING_BLOCK_LABEL_668;
        obj3 = JVM INSTR new #46  <Class ConcurrentHashMapV8$g>;
        ((g) (obj3)).g(j1, obj4, obj5, ((g) (obj)));
        obj = obj3;
_L17:
        obj2 = ((g) (obj2)).e;
        break MISSING_BLOCK_LABEL_592;
        obj1 = new g(j1, obj4, obj5, ((g) (obj1)));
          goto _L17
        a(ag2, i1, ((g) (obj)));
        a(ag2, i1 + l1, ((g) (obj1)));
        a(ag, i1, ((g) (d1)));
        j1 = 1;
_L12:
        g1;
        JVM INSTR monitorexit ;
        i2 = k1;
        k1 = j1;
        j1 = i2;
          goto _L10
_L14:
        if (!(g1 instanceof i)) goto _L12; else goto _L18
_L18:
        obj4 = (i)g1;
        obj1 = null;
        obj3 = null;
        obj = null;
        obj2 = null;
        j1 = 0;
        i2 = 0;
        obj5 = ((i) (obj4)).f;
_L23:
        if (obj5 == null)
            break MISSING_BLOCK_LABEL_919;
        i3 = ((g) (obj5)).b;
        ag1 = JVM INSTR new #55  <Class ConcurrentHashMapV8$j>;
        ag1.j(i3, ((g) (obj5)).c, ((g) (obj5)).d, null, null);
        if ((i3 & l1) != 0) goto _L20; else goto _L19
_L19:
        ag1.h = ((j) (obj3));
        if (obj3 != null) goto _L22; else goto _L21
_L21:
        obj1 = ag1;
_L24:
        j1++;
        obj3 = obj2;
        obj2 = obj;
        obj = obj3;
_L25:
        obj5 = ((g) (obj5)).e;
        obj3 = obj;
        obj = obj2;
        obj2 = obj3;
        obj3 = ag1;
          goto _L23
_L22:
        obj3.e = ag1;
          goto _L24
_L20:
        ag1.h = ((j) (obj2));
        if (obj2 != null)
            break MISSING_BLOCK_LABEL_910;
        obj = ag1;
_L26:
        obj2 = obj;
        i2++;
        obj = ag1;
        ag1 = ((g []) (obj3));
          goto _L25
        obj2.e = ag1;
          goto _L26
        if (j1 > 6) goto _L28; else goto _L27
_L27:
        ag1 = a(((g) (obj1)));
_L31:
        if (i2 > 6) goto _L30; else goto _L29
_L29:
        obj1 = a(((g) (obj)));
_L33:
        a(ag2, i1, ((g) (ag1)));
        a(ag2, i1 + l1, ((g) (obj1)));
        a(ag, i1, ((g) (d1)));
        j1 = 1;
          goto _L12
_L28:
        if (i2 == 0)
            break MISSING_BLOCK_LABEL_1001;
        ag1 = new i(((j) (obj1)));
          goto _L31
        ag;
        g1;
        JVM INSTR monitorexit ;
        throw ag;
        ag1 = ((g []) (obj4));
          goto _L31
_L30:
        obj1 = obj4;
        if (j1 == 0) goto _L33; else goto _L32
_L32:
        obj1 = new i(((j) (obj)));
          goto _L33
    }

    static final boolean a(g ag[], int i1, g g1, g g2) {
        return o.compareAndSwapObject(ag, ((long)i1 << w) + v, g1, g2);
    }

    private static final int b(int i1) {
        int j1;
        int k1;
        j1 = 0x40000000;
        i1 = --i1 | i1 >>> 1;
        i1 |= i1 >>> 2;
        i1 |= i1 >>> 4;
        i1 |= i1 >>> 8;
        k1 = i1 | i1 >>> 16;
        if (k1 >= 0) goto _L2; else goto _L1
_L1:
        i1 = 1;
_L4:
        return i1;
_L2:
        i1 = j1;
        if (k1 < 0x40000000)
            i1 = k1 + 1;
        if (true) goto _L4; else goto _L3
_L3:
    }

    private final void b(g ag[], int i1) {
        j j1 = null;
        if (ag == null) goto _L2; else goto _L1
_L1:
        if (ag.length >= 64) goto _L4; else goto _L3
_L3:
        if (ag == b) {
            i1 = g;
            if (i1 >= 0 && o.compareAndSwapInt(this, p, i1, -2))
                a(ag, ((g []) (null)));
        }
_L2:
        return;
_L4:
        g g2;
        g2 = a(ag, i1);
        if (g2 == null || g2.b < 0)
            continue; /* Loop/switch isn't completed */
        g2;
        JVM INSTR monitorenter ;
        if (a(ag, i1) != g2)
            break MISSING_BLOCK_LABEL_182;
        g g1;
        j j3;
        g1 = g2;
        j3 = null;
_L5:
        if (g1 == null)
            break MISSING_BLOCK_LABEL_164;
        j j2;
        j2 = JVM INSTR new #55  <Class ConcurrentHashMapV8$j>;
        j2.j(g1.b, g1.c, g1.d, null, null);
        j2.h = j3;
        if (j3 != null)
            break MISSING_BLOCK_LABEL_154;
        j1 = j2;
_L6:
        g1 = g1.e;
        j3 = j2;
          goto _L5
        j3.e = j2;
          goto _L6
        i k1 = JVM INSTR new #52  <Class ConcurrentHashMapV8$i>;
        k1.i(j1);
        a(ag, i1, k1);
        g2;
        JVM INSTR monitorexit ;
        if (true) goto _L2; else goto _L7
_L7:
        ag;
        g2;
        JVM INSTR monitorexit ;
        throw ag;
    }

    private final void c(int i1) {
        int j1;
        int k1;
        int l1;
        Object obj;
        if (i1 >= 0x20000000)
            i1 = 0x40000000;
        else
            i1 = b((i1 >>> 1) + i1 + 1);
_L2:
        j1 = g;
        if (j1 < 0)
            break MISSING_BLOCK_LABEL_143;
        obj = b;
        if (obj != null) {
            k1 = obj.length;
            if (k1 != 0)
                break MISSING_BLOCK_LABEL_131;
        }
        if (j1 > i1)
            l1 = j1;
        else
            l1 = i1;
        if (!o.compareAndSwapInt(this, p, j1, -1))
            continue; /* Loop/switch isn't completed */
        k1 = j1;
        if (b != obj)
            break MISSING_BLOCK_LABEL_93;
        b = (g[])new g[l1];
        k1 = l1 - (l1 >>> 2);
        g = k1;
        continue; /* Loop/switch isn't completed */
        obj;
        g = j1;
        throw obj;
        if (i1 > j1 && k1 < 0x40000000)
            break MISSING_BLOCK_LABEL_144;
        return;
        if (obj == b && o.compareAndSwapInt(this, p, j1, -2))
            a(((g []) (obj)), ((g []) (null)));
        if (true) goto _L2; else goto _L1
_L1:
    }

    static Unsafe d() {
        return f();
    }

    private final g[] e() {
        int i1;
        g ag[];
label0:
        do
            do {
                g ag1[] = b;
                if (ag1 != null) {
                    ag = ag1;
                    if (ag1.length != 0)
                        break MISSING_BLOCK_LABEL_102;
                }
                i1 = g;
                if (i1 >= 0)
                    continue label0;
                Thread.yield();
            } while (true);
        while (!o.compareAndSwapInt(this, p, i1, -1));
        g ag2[] = b;
        int j1;
        if (ag2 == null)
            break MISSING_BLOCK_LABEL_72;
        ag = ag2;
        j1 = i1;
        if (ag2.length != 0)
            break MISSING_BLOCK_LABEL_97;
        if (i1 > 0)
            j1 = i1;
        else
            j1 = 16;
        ag = (g[])new g[j1];
        b = ag;
        j1 -= j1 >>> 2;
        g = j1;
        return ag;
        Exception exception;
        exception;
        g = i1;
        throw exception;
    }

    private static Unsafe f() {
        Object obj;
        try {
            obj = Unsafe.getUnsafe();
        }
        catch (SecurityException securityexception) {
            try {
                securityexception = JVM INSTR new #11  <Class ConcurrentHashMapV8$1>;
                securityexception._cls1();
                securityexception = (Unsafe)AccessController.doPrivileged(securityexception);
            }
            catch (PrivilegedActionException privilegedactionexception) {
                throw new RuntimeException("Could not initialize intrinsics", privilegedactionexception.getCause());
            }
        }
        return ((Unsafe) (obj));
    }

    public KeySetView a() {
        KeySetView keysetview = l;
        if (keysetview == null) {
            keysetview = new KeySetView(this, null);
            l = keysetview;
        }
        return keysetview;
    }

    final Object a(Object obj, Object obj1, Object obj2) {
        int j1;
        g ag1[];
        Object obj4;
        obj4 = null;
        j1 = a(obj.hashCode());
        ag1 = b;
_L8:
        Object obj3 = obj4;
        if (ag1 == null) goto _L2; else goto _L1
_L1:
        int i1;
        i1 = ag1.length;
        obj3 = obj4;
        if (i1 == 0) goto _L2; else goto _L3
_L3:
        int k1;
        g g1;
        k1 = i1 - 1 & j1;
        g1 = a(ag1, k1);
        if (g1 != null) goto _L5; else goto _L4
_L4:
        obj3 = obj4;
_L2:
        return obj3;
_L5:
        i1 = g1.b;
        if (i1 != -1) goto _L7; else goto _L6
_L6:
        g ag[] = a(ag1, g1);
_L35:
        ag1 = ag;
          goto _L8
_L7:
        g1;
        JVM INSTR monitorenter ;
        if (a(ag1, k1) != g1) goto _L10; else goto _L9
_L9:
        if (i1 < 0) goto _L12; else goto _L11
_L11:
        obj3 = null;
        ag = g1;
_L36:
        if (((g) (ag)).b != j1) goto _L14; else goto _L13
_L13:
        Object obj5 = ((g) (ag)).c;
        if (obj5 == obj) goto _L16; else goto _L15
_L15:
        if (obj5 == null) goto _L14; else goto _L17
_L17:
        if (!obj.equals(obj5)) goto _L14; else goto _L16
_L16:
        obj5 = ((g) (ag)).d;
        if (obj2 == null || obj2 == obj5) goto _L19; else goto _L18
_L18:
        if (obj5 == null) goto _L21; else goto _L20
_L20:
        if (!obj2.equals(obj5)) goto _L21; else goto _L19
_L19:
        if (obj1 == null) goto _L23; else goto _L22
_L22:
        ag.d = obj1;
        ag = ((g []) (obj5));
_L26:
        i1 = 1;
_L34:
        g1;
        JVM INSTR monitorexit ;
        if (!i1) goto _L25; else goto _L24
_L24:
        obj3 = obj4;
        if (ag != null) {
            if (obj1 == null)
                a(-1L, -1);
            obj3 = ag;
        }
          goto _L2
_L23:
        if (obj3 == null)
            break MISSING_BLOCK_LABEL_277;
        obj3.e = ((g) (ag)).e;
        ag = ((g []) (obj5));
          goto _L26
        obj;
        g1;
        JVM INSTR monitorexit ;
        throw obj;
        a(ag1, k1, ((g) (ag)).e);
        ag = ((g []) (obj5));
          goto _L26
_L14:
        obj5 = ((g) (ag)).e;
        if (obj5 != null)
            break MISSING_BLOCK_LABEL_466;
        ag = null;
          goto _L26
_L12:
        if (!(g1 instanceof i)) goto _L10; else goto _L27
_L27:
        obj3 = (i)g1;
        ag = ((i) (obj3)).a;
        if (ag == null) goto _L29; else goto _L28
_L28:
        obj5 = ag.a(j1, obj, null);
        if (obj5 == null) goto _L29; else goto _L30
_L30:
        ag = ((g []) (((j) (obj5)).d));
        if (obj2 == null || obj2 == ag) goto _L32; else goto _L31
_L31:
        if (ag == null) goto _L29; else goto _L33
_L33:
        if (!obj2.equals(ag)) goto _L29; else goto _L32
_L32:
        if (obj1 == null)
            break MISSING_BLOCK_LABEL_404;
        obj5.d = obj1;
        i1 = 1;
          goto _L34
        if (((i) (obj3)).a(((j) (obj5))))
            a(ag1, k1, a(((g) (((i) (obj3)).f))));
        i1 = 1;
          goto _L34
_L25:
        ag = ag1;
          goto _L35
_L29:
        i1 = 1;
        ag = null;
          goto _L34
_L10:
        i1 = 0;
        ag = null;
          goto _L34
_L21:
        ag = null;
          goto _L26
        obj3 = ag;
        ag = ((g []) (obj5));
          goto _L36
    }

    final Object a(Object obj, Object obj1, boolean flag) {
        int i1;
        int j1;
        g ag1[];
        Object obj3;
        obj3 = null;
        if (obj == null || obj1 == null)
            throw new NullPointerException();
        j1 = a(obj.hashCode());
        i1 = 0;
        ag1 = b;
_L2:
        int k1;
        g ag[];
        if (ag1 != null) {
            k1 = ag1.length;
            if (k1 != 0)
                break; /* Loop/switch isn't completed */
        }
        ag = e();
_L6:
        ag1 = ag;
        if (true) goto _L2; else goto _L1
_L1:
        g g1;
        k1 = k1 - 1 & j1;
        g1 = a(ag1, k1);
        if (g1 != null) goto _L4; else goto _L3
_L3:
        if (!a(ag1, k1, ((g) (null)), new g(j1, obj, obj1, null)))
            break MISSING_BLOCK_LABEL_403;
_L17:
        a(1L, i1);
        obj = obj3;
_L18:
        return obj;
_L4:
        int l1;
label0:
        {
            l1 = g1.b;
            if (l1 != -1)
                break label0;
            ag = a(ag1, g1);
        }
        if (true) goto _L6; else goto _L5
_L5:
        g1;
        JVM INSTR monitorenter ;
        if (a(ag1, k1) != g1)
            break MISSING_BLOCK_LABEL_397;
        if (l1 < 0) goto _L8; else goto _L7
_L7:
        Object obj2;
        i1 = 1;
        obj2 = g1;
_L20:
        if (((g) (obj2)).b != j1) goto _L10; else goto _L9
_L9:
        ag = ((g []) (((g) (obj2)).c));
        if (ag == obj) goto _L12; else goto _L11
_L11:
        if (ag == null) goto _L10; else goto _L13
_L13:
        if (!obj.equals(ag)) goto _L10; else goto _L12
_L12:
        Object obj4 = ((g) (obj2)).d;
        ag = ((g []) (obj4));
        if (flag)
            break MISSING_BLOCK_LABEL_238;
        obj2.d = obj1;
        ag = ((g []) (obj4));
_L19:
        g1;
        JVM INSTR monitorexit ;
        if (i1 == 0) goto _L15; else goto _L14
_L14:
        if (i1 >= 8)
            b(ag1, k1);
        if (ag == null) goto _L17; else goto _L16
_L16:
        obj = ag;
          goto _L18
_L10:
        ag = ((g) (obj2)).e;
        if (ag != null)
            break MISSING_BLOCK_LABEL_312;
        ag = JVM INSTR new #46  <Class ConcurrentHashMapV8$g>;
        ag.g(j1, obj, obj1, null);
        obj2.e = ag;
        ag = null;
          goto _L19
        i1++;
        obj2 = ag;
          goto _L20
_L8:
        if (!(g1 instanceof i))
            break MISSING_BLOCK_LABEL_397;
        obj2 = ((i)g1).a(j1, obj, obj1);
        if (obj2 == null) goto _L22; else goto _L21
_L21:
        ag = ((g []) (((g) (obj2)).d));
        if (flag)
            break MISSING_BLOCK_LABEL_366;
        obj2.d = obj1;
        i1 = 2;
          goto _L19
        obj;
        g1;
        JVM INSTR monitorexit ;
        throw obj;
_L15:
        ag = ag1;
          goto _L6
_L22:
        ag = null;
        i1 = 2;
          goto _L19
        ag = null;
          goto _L19
        ag = ag1;
          goto _L6
    }

    final g[] a(g ag[], g g1) {
        if (!(g1 instanceof d)) goto _L2; else goto _L1
_L1:
        g1 = ((d)g1).a;
        if (g1 == null) goto _L2; else goto _L3
_L3:
        if (g1 == e && ag == b && h > i) {
            int i1 = g;
            if (i1 < -1 && o.compareAndSwapInt(this, p, i1, i1 - 1))
                a(ag, ((g []) (g1)));
        }
        ag = g1;
_L5:
        return ag;
_L2:
        ag = b;
        if (true) goto _L5; else goto _L4
_L4:
    }

    public long b() {
        long l1 = 0L;
        long l2 = c();
        if (l2 >= 0L)
            l1 = l2;
        return l1;
    }

    final long c() {
        b ab[] = k;
        long l1 = f;
        long l2 = l1;
        if (ab != null) {
            int i1 = 0;
            do {
                l2 = l1;
                if (i1 >= ab.length)
                    break;
                b b1 = ab[i1];
                l2 = l1;
                if (b1 != null)
                    l2 = l1 + b1.a;
                i1++;
                l1 = l2;
            } while (true);
        }
        return l2;
    }

    public void clear() {
        int i1;
        long l1;
        g ag[];
        ag = b;
        i1 = 0;
        l1 = 0L;
_L6:
        int j1;
        g g1;
        do {
            if (ag == null || i1 >= ag.length)
                break MISSING_BLOCK_LABEL_162;
            g1 = a(ag, i1);
            if (g1 == null) {
                i1++;
            } else {
label0:
                {
                    j1 = g1.b;
                    if (j1 != -1)
                        break label0;
                    ag = a(ag, g1);
                    i1 = 0;
                }
            }
        } while (true);
        JVM INSTR monitorenter ;
        if (a(ag, i1) != g1)
            break MISSING_BLOCK_LABEL_148;
        if (j1 < 0) goto _L2; else goto _L1
_L1:
        Object obj = g1;
_L4:
        if (obj == null)
            break; /* Loop/switch isn't completed */
        l1--;
        obj = ((g) (obj)).e;
        continue; /* Loop/switch isn't completed */
_L2:
        if (g1 instanceof i) {
            obj = ((i)g1).f;
            continue; /* Loop/switch isn't completed */
        }
        obj = null;
        if (true) goto _L4; else goto _L3
_L3:
        j1 = i1 + 1;
        a(ag, i1, ((g) (null)));
        i1 = j1;
        g1;
        JVM INSTR monitorexit ;
        if (true) goto _L6; else goto _L5
_L5:
        Exception exception;
        exception;
        g1;
        JVM INSTR monitorexit ;
        throw exception;
        if (l1 != 0L)
            a(l1, -1);
        return;
    }

    public boolean containsKey(Object obj) {
        boolean flag;
        if (get(obj) != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean containsValue(Object obj) {
        boolean flag;
label0:
        {
            boolean flag1 = false;
            if (obj == null)
                throw new NullPointerException();
            g ag[] = b;
            flag = flag1;
            if (ag == null)
                break label0;
            h h1 = new h(ag, ag.length, 0, ag.length);
            Object obj1;
            do {
                obj1 = h1.b();
                flag = flag1;
                if (obj1 == null)
                    break label0;
                obj1 = ((g) (obj1)).d;
            } while (obj1 != obj && (obj1 == null || !obj.equals(obj1)));
            flag = true;
        }
        return flag;
    }

    public Set entrySet() {
        EntrySetView entrysetview = n;
        if (entrysetview == null) {
            entrysetview = new EntrySetView(this);
            n = entrysetview;
        }
        return entrysetview;
    }

    public boolean equals(Object obj) {
        boolean flag1 = false;
        if (obj == this) goto _L2; else goto _L1
_L1:
        if (obj instanceof Map) goto _L4; else goto _L3
_L3:
        boolean flag = flag1;
_L9:
        return flag;
_L4:
        obj = (Map)obj;
        g ag[] = b;
        int i1;
        if (ag == null)
            i1 = 0;
        else
            i1 = ag.length;
        ag = new h(ag, i1, 0, i1);
        do {
            Object obj4 = ag.b();
            if (obj4 == null)
                break;
            Object obj2 = ((g) (obj4)).d;
            obj4 = ((Map) (obj)).get(((g) (obj4)).c);
            flag = flag1;
            if (obj4 == null)
                continue; /* Loop/switch isn't completed */
            if (obj4 != obj2 && !obj4.equals(obj2)) {
                flag = flag1;
                continue; /* Loop/switch isn't completed */
            }
        } while (true);
        obj = ((Map) (obj)).entrySet().iterator();
_L7:
        if (!((Iterator) (obj)).hasNext()) goto _L2; else goto _L5
_L5:
        Object obj1;
        Object obj3;
        obj3 = (java.util.Map.Entry)((Iterator) (obj)).next();
        obj1 = ((java.util.Map.Entry) (obj3)).getKey();
        flag = flag1;
        if (obj1 == null)
            continue; /* Loop/switch isn't completed */
        obj3 = ((java.util.Map.Entry) (obj3)).getValue();
        flag = flag1;
        if (obj3 == null)
            continue; /* Loop/switch isn't completed */
        obj1 = get(obj1);
        flag = flag1;
        if (obj1 == null)
            continue; /* Loop/switch isn't completed */
        if (obj3 == obj1 || obj3.equals(obj1)) goto _L7; else goto _L6
_L6:
        flag = flag1;
        continue; /* Loop/switch isn't completed */
_L2:
        flag = true;
        if (true) goto _L9; else goto _L8
_L8:
    }

    public Object get(Object obj) {
        int i1;
        Object obj1;
        Object obj2;
        g ag[];
        obj2 = null;
        i1 = a(obj.hashCode());
        ag = b;
        obj1 = obj2;
        if (ag == null) goto _L2; else goto _L1
_L1:
        int j1;
        j1 = ag.length;
        obj1 = obj2;
        if (j1 <= 0) goto _L2; else goto _L3
_L3:
        g g1;
        g1 = a(ag, j1 - 1 & i1);
        obj1 = obj2;
        if (g1 == null) goto _L2; else goto _L4
_L4:
        j1 = g1.b;
        if (j1 != i1) goto _L6; else goto _L5
_L5:
        Object obj3 = g1.c;
        if (obj3 == obj) goto _L8; else goto _L7
_L7:
        obj1 = g1;
        if (obj3 == null) goto _L10; else goto _L9
_L9:
        obj1 = g1;
        if (!obj.equals(obj3)) goto _L10; else goto _L8
_L8:
        obj1 = g1.d;
_L2:
        return obj1;
_L6:
        obj1 = g1;
        if (j1 < 0) {
            obj = g1.a(i1, obj);
            obj1 = obj2;
            if (obj != null)
                obj1 = ((g) (obj)).d;
            continue; /* Loop/switch isn't completed */
        }
_L10:
        g g2;
        Object obj4;
label0:
        do {
            do {
                do {
                    g2 = ((g) (obj1)).e;
                    obj1 = obj2;
                    if (g2 == null)
                        continue; /* Loop/switch isn't completed */
                    obj1 = g2;
                } while (g2.b != i1);
                obj4 = g2.c;
                if (obj4 == obj)
                    break label0;
                obj1 = g2;
            } while (obj4 == null);
            obj1 = g2;
        } while (!obj.equals(obj4));
        obj1 = g2.d;
        if (true) goto _L2; else goto _L11
_L11:
    }

    public Object getOrDefault(Object obj, Object obj1) {
        obj = get(obj);
        if (obj == null)
            obj = obj1;
        return obj;
    }

    public int hashCode() {
        int j1 = 0;
        int i1 = 0;
        g ag[] = b;
        if (ag != null) {
            h h1 = new h(ag, ag.length, 0, ag.length);
            do {
                g g1 = h1.b();
                j1 = i1;
                if (g1 == null)
                    break;
                j1 = g1.c.hashCode();
                i1 += g1.d.hashCode() ^ j1;
            } while (true);
        }
        return j1;
    }

    public boolean isEmpty() {
        boolean flag;
        if (c() <= 0L)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public Set keySet() {
        return a();
    }

    public Object put(Object obj, Object obj1) {
        return a(obj, obj1, false);
    }

    public void putAll(Map map) {
        c(map.size());
        java.util.Map.Entry entry;
        for (map = map.entrySet().iterator(); map.hasNext(); a(entry.getKey(), entry.getValue(), false))
            entry = (java.util.Map.Entry)map.next();

    }

    public Object putIfAbsent(Object obj, Object obj1) {
        return a(obj, obj1, true);
    }

    public Object remove(Object obj) {
        return a(obj, null, null);
    }

    public boolean remove(Object obj, Object obj1) {
        if (obj == null)
            throw new NullPointerException();
        boolean flag;
        if (obj1 != null && a(obj, null, obj1) != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public Object replace(Object obj, Object obj1) {
        if (obj == null || obj1 == null)
            throw new NullPointerException();
        else
            return a(obj, obj1, null);
    }

    public boolean replace(Object obj, Object obj1, Object obj2) {
        if (obj == null || obj1 == null || obj2 == null)
            throw new NullPointerException();
        boolean flag;
        if (a(obj, obj2, obj1) != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public int size() {
        long l1 = c();
        int i1;
        if (l1 < 0L)
            i1 = 0;
        else
        if (l1 > 0x7fffffffL)
            i1 = 0x7fffffff;
        else
            i1 = (int)l1;
        return i1;
    }

    public String toString() {
        g ag[];
        StringBuilder stringbuilder;
        ag = b;
        int i1;
        h h1;
        if (ag == null)
            i1 = 0;
        else
            i1 = ag.length;
        h1 = new h(ag, i1, 0, i1);
        stringbuilder = new StringBuilder();
        stringbuilder.append('{');
        ag = h1.b();
        if (ag == null) goto _L2; else goto _L1
_L1:
        Object obj1 = ((g) (ag)).c;
        Object obj = ((g) (ag)).d;
        if (obj1 == this)
            ag = "(this Map)";
        else
            ag = ((g []) (obj1));
        stringbuilder.append(ag);
        stringbuilder.append('=');
        if (obj == this)
            ag = "(this Map)";
        else
            ag = ((g []) (obj));
        stringbuilder.append(ag);
        ag = h1.b();
        if (ag != null) goto _L3; else goto _L2
_L2:
        return stringbuilder.append('}').toString();
_L3:
        stringbuilder.append(',').append(' ');
        if (true) goto _L1; else goto _L4
_L4:
    }

    public Collection values() {
        ValuesView valuesview = m;
        if (valuesview == null) {
            valuesview = new ValuesView(this);
            m = valuesview;
        }
        return valuesview;
    }

    static  {
        int i1;
        a = Runtime.getRuntime().availableProcessors();
        d = (new ObjectStreamField[] {
            new ObjectStreamField("segments", [Lio/netty/util/internal/chmv8/ConcurrentHashMapV8$Segment;), new ObjectStreamField("segmentMask", Integer.TYPE), new ObjectStreamField("segmentShift", Integer.TYPE)
        });
        c = new AtomicInteger();
        Error error;
        try {
            o = f();
            p = o.objectFieldOffset(io/netty/util/internal/chmv8/ConcurrentHashMapV8.getDeclaredField("sizeCtl"));
            q = o.objectFieldOffset(io/netty/util/internal/chmv8/ConcurrentHashMapV8.getDeclaredField("transferIndex"));
            r = o.objectFieldOffset(io/netty/util/internal/chmv8/ConcurrentHashMapV8.getDeclaredField("transferOrigin"));
            s = o.objectFieldOffset(io/netty/util/internal/chmv8/ConcurrentHashMapV8.getDeclaredField("baseCount"));
            t = o.objectFieldOffset(io/netty/util/internal/chmv8/ConcurrentHashMapV8.getDeclaredField("cellsBusy"));
            u = o.objectFieldOffset(io/netty/util/internal/chmv8/ConcurrentHashMapV8$b.getDeclaredField("value"));
            v = o.arrayBaseOffset([Lio/netty/util/internal/chmv8/ConcurrentHashMapV8$g;);
            i1 = o.arrayIndexScale([Lio/netty/util/internal/chmv8/ConcurrentHashMapV8$g;);
        }
        catch (Exception exception) {
            throw new Error(exception);
        }
        if ((i1 - 1 & i1) == 0)
            break MISSING_BLOCK_LABEL_223;
        error = JVM INSTR new #182 <Class Error>;
        error.Error("data type scale not a power of two");
        throw error;
        w = 31 - Integer.numberOfLeadingZeros(i1);
    }

    // Unreferenced inner class io/netty/util/internal/chmv8/ConcurrentHashMapV8$1

/* anonymous class */
    static final class _cls1
        implements PrivilegedExceptionAction {

        public Unsafe a() {
            Field afield[] = sun/misc/Unsafe.getDeclaredFields();
            int j1 = afield.length;
            for (int i1 = 0; i1 < j1; i1++) {
                Object obj = afield[i1];
                ((Field) (obj)).setAccessible(true);
                obj = ((Field) (obj)).get(null);
                if (sun/misc/Unsafe.isInstance(obj))
                    return (Unsafe)sun/misc/Unsafe.cast(obj);
            }

            throw new NoSuchFieldError("the Unsafe");
        }

        public Object run() {
            return a();
        }

    }

}
