// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util.internal;

import io.netty.util.internal.logging.b;
import io.netty.util.internal.logging.c;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class n {

    private static boolean a = false;
    private static final b b = io.netty.util.internal.logging.c.a(io/netty/util/internal/n);
    private static boolean c;
    private static final Pattern d = Pattern.compile("-?[0-9]+");

    private n() {
    }

    public static int a(String s, int i) {
        String s1 = b(s);
        if (s1 != null) goto _L2; else goto _L1
_L1:
        return i;
_L2:
        String s2;
        s2 = s1.trim().toLowerCase();
        if (!d.matcher(s2).matches())
            break MISSING_BLOCK_LABEL_46;
        int j = Integer.parseInt(s2);
        i = j;
        continue; /* Loop/switch isn't completed */
        Exception exception;
        exception;
        c((new StringBuilder()).append("Unable to parse the integer system property '").append(s).append("':").append(s2).append(" - ").append("using the default value: ").append(i).toString());
        if (true) goto _L1; else goto _L3
_L3:
    }

    public static long a(String s, long l) {
        String s1 = b(s);
        if (s1 != null) goto _L2; else goto _L1
_L1:
        return l;
_L2:
        String s2;
        s2 = s1.trim().toLowerCase();
        if (!d.matcher(s2).matches())
            break MISSING_BLOCK_LABEL_50;
        long l1 = Long.parseLong(s2);
        l = l1;
        continue; /* Loop/switch isn't completed */
        Exception exception;
        exception;
        c((new StringBuilder()).append("Unable to parse the long integer system property '").append(s).append("':").append(s2).append(" - ").append("using the default value: ").append(l).toString());
        if (true) goto _L1; else goto _L3
_L3:
    }

    public static String a(String s, String s1) {
        if (s == null)
            throw new NullPointerException("key");
        if (s.isEmpty())
            throw new IllegalArgumentException("key must not be empty.");
        if (System.getSecurityManager() != null) goto _L2; else goto _L1
_L1:
        String s2 = System.getProperty(s);
        s = s2;
_L3:
        Object obj;
        Exception exception;
        if (s != null)
            s1 = s;
        return s1;
_L2:
        obj = JVM INSTR new #6   <Class n$1>;
        ((_cls1) (obj))._cls1(s);
        obj = (String)AccessController.doPrivileged(((PrivilegedAction) (obj)));
        s = ((String) (obj));
          goto _L3
        exception;
        if (!c) {
            a((new StringBuilder()).append("Unable to retrieve a system property '").append(s).append("'; default values will be used.").toString(), exception);
            c = true;
        }
        s = null;
          goto _L3
    }

    private static void a(String s, Exception exception) {
        if (a)
            b.b(s, exception);
        else
            Logger.getLogger(io/netty/util/internal/n.getName()).log(Level.WARNING, s, exception);
    }

    public static boolean a(String s) {
        boolean flag;
        if (b(s) != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public static boolean a(String s, boolean flag) {
        String s1 = b(s);
        if (s1 != null) {
            s1 = s1.trim().toLowerCase();
            if (s1.isEmpty())
                flag = true;
            else
            if ("true".equals(s1) || "yes".equals(s1) || "1".equals(s1))
                flag = true;
            else
            if ("false".equals(s1) || "no".equals(s1) || "0".equals(s1))
                flag = false;
            else
                c((new StringBuilder()).append("Unable to parse the boolean system property '").append(s).append("':").append(s1).append(" - ").append("using the default value: ").append(flag).toString());
        }
        return flag;
    }

    public static String b(String s) {
        return a(s, ((String) (null)));
    }

    private static void c(String s) {
        if (a)
            b.c(s);
        else
            Logger.getLogger(io/netty/util/internal/n.getName()).log(Level.WARNING, s);
    }

    static  {
        a = true;
    }

    // Unreferenced inner class io/netty/util/internal/n$1

/* anonymous class */
    static final class _cls1
        implements PrivilegedAction {

        final String a;

        public String a() {
            return System.getProperty(a);
        }

        public Object run() {
            return a();
        }

             {
                a = s;
                super();
            }
    }

}
