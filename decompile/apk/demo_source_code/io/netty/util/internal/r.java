// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util.internal;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import sun.misc.Unsafe;

final class r extends AtomicIntegerFieldUpdater {

    private final long a;
    private final Unsafe b;

    r(Unsafe unsafe, Class class1, String s) {
        class1 = class1.getDeclaredField(s);
        if (!Modifier.isVolatile(class1.getModifiers())) {
            throw new IllegalArgumentException("Must be volatile");
        } else {
            b = unsafe;
            a = unsafe.objectFieldOffset(class1);
            return;
        }
    }

    public boolean compareAndSet(Object obj, int i, int j) {
        return b.compareAndSwapInt(obj, a, i, j);
    }

    public int get(Object obj) {
        return b.getIntVolatile(obj, a);
    }

    public void lazySet(Object obj, int i) {
        b.putOrderedInt(obj, a, i);
    }

    public void set(Object obj, int i) {
        b.putIntVolatile(obj, a, i);
    }

    public boolean weakCompareAndSet(Object obj, int i, int j) {
        return b.compareAndSwapInt(obj, a, i, j);
    }
}
