// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util.internal.logging;

import java.io.OutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import org.slf4j.c;

// Referenced classes of package io.netty.util.internal.logging:
//            c, Slf4JLogger, b

public class g extends io.netty.util.internal.logging.c {

    public static final io.netty.util.internal.logging.c a = new g();
    static final boolean b;

    public g() {
    }

    g(boolean flag) {
        Object obj;
        Object obj1;
        if (!b && !flag)
            throw new AssertionError();
        obj1 = new StringBuffer();
        obj = System.err;
        NoClassDefFoundError noclassdeffounderror;
        try {
            PrintStream printstream = JVM INSTR new #46  <Class PrintStream>;
            OutputStream outputstream = JVM INSTR new #6   <Class g$1>;
            outputstream.this. _cls1(((StringBuffer) (obj1)));
            printstream.PrintStream(outputstream, true, "US-ASCII");
            System.setErr(printstream);
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            throw new Error(((Throwable) (obj)));
        }
        if (c.b() instanceof org.slf4j.helpers.c) {
            noclassdeffounderror = JVM INSTR new #67  <Class NoClassDefFoundError>;
            noclassdeffounderror.NoClassDefFoundError(((StringBuffer) (obj1)).toString());
            throw noclassdeffounderror;
        }
        break MISSING_BLOCK_LABEL_109;
        obj1;
        System.setErr(((PrintStream) (obj)));
        throw obj1;
        ((PrintStream) (obj)).print(obj1);
        ((PrintStream) (obj)).flush();
        System.setErr(((PrintStream) (obj)));
        return;
    }

    public b b(String s) {
        return new Slf4JLogger(c.a(s));
    }

    static  {
        boolean flag;
        if (!io/netty/util/internal/logging/g.desiredAssertionStatus())
            flag = true;
        else
            flag = false;
        b = flag;
    }

    // Unreferenced inner class io/netty/util/internal/logging/g$1

/* anonymous class */
    class _cls1 extends OutputStream {

        final StringBuffer a;
        final g b;

        public void write(int i) {
            a.append((char)i);
        }

             {
                b = g.this;
                a = stringbuffer;
                super();
            }
    }

}
