// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util.internal.logging;

import java.util.logging.*;

// Referenced classes of package io.netty.util.internal.logging:
//            AbstractInternalLogger, f, a

class JdkLogger extends AbstractInternalLogger {

    static final String b = io/netty/util/internal/logging/JdkLogger.getName();
    static final String c = io/netty/util/internal/logging/AbstractInternalLogger.getName();
    final transient Logger a;

    JdkLogger(Logger logger) {
        super(logger.getName());
        a = logger;
    }

    private void a(String s, Level level, String s1, Throwable throwable) {
        level = new LogRecord(level, s1);
        level.setLoggerName(a());
        level.setThrown(throwable);
        a(s, ((LogRecord) (level)));
        a.log(level);
    }

    private static void a(String s, LogRecord logrecord) {
        int i;
        StackTraceElement astacktraceelement[];
        astacktraceelement = (new Throwable()).getStackTrace();
        i = 0;
_L9:
        int j;
        String s1;
        if (i >= astacktraceelement.length)
            break MISSING_BLOCK_LABEL_138;
        s1 = astacktraceelement[i].getClassName();
        j = i;
        if (s1.equals(s)) goto _L2; else goto _L1
_L1:
        if (!s1.equals(c)) goto _L4; else goto _L3
_L3:
        j = i;
_L2:
        i = j + 1;
_L10:
        if (i >= astacktraceelement.length) goto _L6; else goto _L5
_L5:
        s1 = astacktraceelement[i].getClassName();
        if (s1.equals(s) || s1.equals(c)) goto _L8; else goto _L7
_L7:
        if (i != -1) {
            s = astacktraceelement[i];
            logrecord.setSourceClassName(s.getClassName());
            logrecord.setSourceMethodName(s.getMethodName());
        }
        return;
_L4:
        i++;
          goto _L9
_L8:
        i++;
          goto _L10
_L6:
        i = -1;
          goto _L7
        j = -1;
          goto _L2
    }

    public void a(String s) {
        if (a.isLoggable(Level.FINE))
            a(b, Level.FINE, s, null);
    }

    public void a(String s, Object obj) {
        if (a.isLoggable(Level.FINEST)) {
            s = f.a(s, obj);
            a(b, Level.FINEST, s.a(), s.b());
        }
    }

    public void a(String s, Object obj, Object obj1) {
        if (a.isLoggable(Level.FINEST)) {
            s = f.a(s, obj, obj1);
            a(b, Level.FINEST, s.a(), s.b());
        }
    }

    public void a(String s, Throwable throwable) {
        if (a.isLoggable(Level.FINE))
            a(b, Level.FINE, s, throwable);
    }

    public transient void a(String s, Object aobj[]) {
        if (a.isLoggable(Level.FINE)) {
            s = f.a(s, aobj);
            a(b, Level.FINE, s.a(), s.b());
        }
    }

    public void b(String s) {
        if (a.isLoggable(Level.INFO))
            a(b, Level.INFO, s, null);
    }

    public void b(String s, Object obj) {
        if (a.isLoggable(Level.FINE)) {
            s = f.a(s, obj);
            a(b, Level.FINE, s.a(), s.b());
        }
    }

    public void b(String s, Object obj, Object obj1) {
        if (a.isLoggable(Level.FINE)) {
            s = f.a(s, obj, obj1);
            a(b, Level.FINE, s.a(), s.b());
        }
    }

    public void b(String s, Throwable throwable) {
        if (a.isLoggable(Level.WARNING))
            a(b, Level.WARNING, s, throwable);
    }

    public transient void b(String s, Object aobj[]) {
        if (a.isLoggable(Level.WARNING)) {
            s = f.a(s, aobj);
            a(b, Level.WARNING, s.a(), s.b());
        }
    }

    public boolean b() {
        return a.isLoggable(Level.FINE);
    }

    public void c(String s) {
        if (a.isLoggable(Level.WARNING))
            a(b, Level.WARNING, s, null);
    }

    public void c(String s, Object obj) {
        if (a.isLoggable(Level.WARNING)) {
            s = f.a(s, obj);
            a(b, Level.WARNING, s.a(), s.b());
        }
    }

    public void c(String s, Object obj, Object obj1) {
        if (a.isLoggable(Level.INFO)) {
            s = f.a(s, obj, obj1);
            a(b, Level.INFO, s.a(), s.b());
        }
    }

    public void c(String s, Throwable throwable) {
        if (a.isLoggable(Level.SEVERE))
            a(b, Level.SEVERE, s, throwable);
    }

    public transient void c(String s, Object aobj[]) {
        if (a.isLoggable(Level.SEVERE)) {
            s = f.a(s, aobj);
            a(b, Level.SEVERE, s.a(), s.b());
        }
    }

    public boolean c() {
        return a.isLoggable(Level.WARNING);
    }

    public void d(String s) {
        if (a.isLoggable(Level.SEVERE))
            a(b, Level.SEVERE, s, null);
    }

    public void d(String s, Object obj) {
        if (a.isLoggable(Level.SEVERE)) {
            s = f.a(s, obj);
            a(b, Level.SEVERE, s.a(), s.b());
        }
    }

    public void d(String s, Object obj, Object obj1) {
        if (a.isLoggable(Level.WARNING)) {
            s = f.a(s, obj, obj1);
            a(b, Level.WARNING, s.a(), s.b());
        }
    }

    public boolean d() {
        return a.isLoggable(Level.SEVERE);
    }

    public void e(String s, Object obj, Object obj1) {
        if (a.isLoggable(Level.SEVERE)) {
            s = f.a(s, obj, obj1);
            a(b, Level.SEVERE, s.a(), s.b());
        }
    }

}
