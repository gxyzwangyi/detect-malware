// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util.internal.logging;

import java.io.PrintStream;
import java.util.HashMap;
import java.util.Map;

// Referenced classes of package io.netty.util.internal.logging:
//            a

final class f {

    static a a(String s, Object obj) {
        return a(s, new Object[] {
            obj
        });
    }

    static a a(String s, Object obj, Object obj1) {
        return a(s, new Object[] {
            obj, obj1
        });
    }

    static a a(String s, Object aobj[]) {
        int j;
        Throwable throwable;
        j = 0;
        throwable = a(aobj);
        if (s != null) goto _L2; else goto _L1
_L1:
        s = new a(null, aobj, throwable);
_L4:
        return s;
_L2:
        if (aobj == null) {
            s = new a(s);
            continue; /* Loop/switch isn't completed */
        }
        StringBuffer stringbuffer = new StringBuffer(s.length() + 50);
        int i = 0;
        do {
            if (j >= aobj.length)
                break;
            int k = s.indexOf("{}", i);
            if (k == -1) {
                if (i == 0) {
                    s = new a(s, aobj, throwable);
                } else {
                    stringbuffer.append(s.substring(i, s.length()));
                    s = new a(stringbuffer.toString(), aobj, throwable);
                }
                continue; /* Loop/switch isn't completed */
            }
            if (a(s, k)) {
                if (!b(s, k)) {
                    j--;
                    stringbuffer.append(s.substring(i, k - 1));
                    stringbuffer.append('{');
                    i = k + 1;
                } else {
                    stringbuffer.append(s.substring(i, k - 1));
                    a(stringbuffer, aobj[j], ((Map) (new HashMap())));
                    i = k + 2;
                }
            } else {
                stringbuffer.append(s.substring(i, k));
                a(stringbuffer, aobj[j], ((Map) (new HashMap())));
                i = k + 2;
            }
            j++;
        } while (true);
        stringbuffer.append(s.substring(i, s.length()));
        if (j < aobj.length - 1)
            s = new a(stringbuffer.toString(), aobj, throwable);
        else
            s = new a(stringbuffer.toString(), aobj, null);
        if (true) goto _L4; else goto _L3
_L3:
    }

    static Throwable a(Object aobj[]) {
        if (aobj == null || aobj.length == 0) {
            aobj = null;
        } else {
            aobj = ((Object []) (aobj[aobj.length - 1]));
            if (aobj instanceof Throwable)
                aobj = (Throwable)aobj;
            else
                aobj = null;
        }
        return ((Throwable) (aobj));
    }

    private static void a(StringBuffer stringbuffer, Object obj) {
        stringbuffer.append(obj.toString());
_L1:
        return;
        Throwable throwable;
        throwable;
        System.err.println((new StringBuilder()).append("SLF4J: Failed toString() invocation on an object of type [").append(obj.getClass().getName()).append(']').toString());
        throwable.printStackTrace();
        stringbuffer.append("[FAILED toString()]");
          goto _L1
    }

    private static void a(StringBuffer stringbuffer, Object obj, Map map) {
        if (obj == null)
            stringbuffer.append("null");
        else
        if (!obj.getClass().isArray())
            a(stringbuffer, obj);
        else
        if (obj instanceof boolean[])
            a(stringbuffer, (boolean[])(boolean[])obj);
        else
        if (obj instanceof byte[])
            a(stringbuffer, (byte[])(byte[])obj);
        else
        if (obj instanceof char[])
            a(stringbuffer, (char[])(char[])obj);
        else
        if (obj instanceof short[])
            a(stringbuffer, (short[])(short[])obj);
        else
        if (obj instanceof int[])
            a(stringbuffer, (int[])(int[])obj);
        else
        if (obj instanceof long[])
            a(stringbuffer, (long[])(long[])obj);
        else
        if (obj instanceof float[])
            a(stringbuffer, (float[])(float[])obj);
        else
        if (obj instanceof double[])
            a(stringbuffer, (double[])(double[])obj);
        else
            a(stringbuffer, (Object[])(Object[])obj, map);
    }

    private static void a(StringBuffer stringbuffer, byte abyte0[]) {
        stringbuffer.append('[');
        int j = abyte0.length;
        for (int i = 0; i < j; i++) {
            stringbuffer.append(abyte0[i]);
            if (i != j - 1)
                stringbuffer.append(", ");
        }

        stringbuffer.append(']');
    }

    private static void a(StringBuffer stringbuffer, char ac[]) {
        stringbuffer.append('[');
        int j = ac.length;
        for (int i = 0; i < j; i++) {
            stringbuffer.append(ac[i]);
            if (i != j - 1)
                stringbuffer.append(", ");
        }

        stringbuffer.append(']');
    }

    private static void a(StringBuffer stringbuffer, double ad[]) {
        stringbuffer.append('[');
        int j = ad.length;
        for (int i = 0; i < j; i++) {
            stringbuffer.append(ad[i]);
            if (i != j - 1)
                stringbuffer.append(", ");
        }

        stringbuffer.append(']');
    }

    private static void a(StringBuffer stringbuffer, float af[]) {
        stringbuffer.append('[');
        int j = af.length;
        for (int i = 0; i < j; i++) {
            stringbuffer.append(af[i]);
            if (i != j - 1)
                stringbuffer.append(", ");
        }

        stringbuffer.append(']');
    }

    private static void a(StringBuffer stringbuffer, int ai[]) {
        stringbuffer.append('[');
        int j = ai.length;
        for (int i = 0; i < j; i++) {
            stringbuffer.append(ai[i]);
            if (i != j - 1)
                stringbuffer.append(", ");
        }

        stringbuffer.append(']');
    }

    private static void a(StringBuffer stringbuffer, long al[]) {
        stringbuffer.append('[');
        int j = al.length;
        for (int i = 0; i < j; i++) {
            stringbuffer.append(al[i]);
            if (i != j - 1)
                stringbuffer.append(", ");
        }

        stringbuffer.append(']');
    }

    private static void a(StringBuffer stringbuffer, Object aobj[], Map map) {
        stringbuffer.append('[');
        if (!map.containsKey(((Object) (aobj)))) {
            map.put(((Object) (aobj)), null);
            int j = aobj.length;
            for (int i = 0; i < j; i++) {
                a(stringbuffer, aobj[i], map);
                if (i != j - 1)
                    stringbuffer.append(", ");
            }

            map.remove(((Object) (aobj)));
        } else {
            stringbuffer.append("...");
        }
        stringbuffer.append(']');
    }

    private static void a(StringBuffer stringbuffer, short aword0[]) {
        stringbuffer.append('[');
        int j = aword0.length;
        for (int i = 0; i < j; i++) {
            stringbuffer.append(aword0[i]);
            if (i != j - 1)
                stringbuffer.append(", ");
        }

        stringbuffer.append(']');
    }

    private static void a(StringBuffer stringbuffer, boolean aflag[]) {
        stringbuffer.append('[');
        int j = aflag.length;
        for (int i = 0; i < j; i++) {
            stringbuffer.append(aflag[i]);
            if (i != j - 1)
                stringbuffer.append(", ");
        }

        stringbuffer.append(']');
    }

    static boolean a(String s, int i) {
        boolean flag;
        flag = false;
        break MISSING_BLOCK_LABEL_2;
        if (i != 0 && s.charAt(i - 1) == '\\')
            flag = true;
        return flag;
    }

    static boolean b(String s, int i) {
        boolean flag;
        if (i >= 2 && s.charAt(i - 2) == '\\')
            flag = true;
        else
            flag = false;
        return flag;
    }
}
