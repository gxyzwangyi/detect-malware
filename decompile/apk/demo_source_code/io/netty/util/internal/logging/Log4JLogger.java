// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.util.internal.logging;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;

// Referenced classes of package io.netty.util.internal.logging:
//            AbstractInternalLogger, f, a

class Log4JLogger extends AbstractInternalLogger {

    static final String b = io/netty/util/internal/logging/Log4JLogger.getName();
    final transient Logger a;
    final boolean c = f();

    Log4JLogger(Logger logger) {
        super(logger.getName());
        a = logger;
    }

    private boolean f() {
        a.isTraceEnabled();
        boolean flag = true;
_L2:
        return flag;
        NoSuchMethodError nosuchmethoderror;
        nosuchmethoderror;
        flag = false;
        if (true) goto _L2; else goto _L1
_L1:
    }

    public void a(String s) {
        a.log(b, Level.DEBUG, s, null);
    }

    public void a(String s, Object obj) {
        if (e()) {
            a a1 = io.netty.util.internal.logging.f.a(s, obj);
            Logger logger = a;
            obj = b;
            if (c)
                s = Level.TRACE;
            else
                s = Level.DEBUG;
            logger.log(((String) (obj)), s, a1.a(), a1.b());
        }
    }

    public void a(String s, Object obj, Object obj1) {
        if (e()) {
            obj1 = io.netty.util.internal.logging.f.a(s, obj, obj1);
            obj = a;
            String s1 = b;
            if (c)
                s = Level.TRACE;
            else
                s = Level.DEBUG;
            ((Logger) (obj)).log(s1, s, ((a) (obj1)).a(), ((a) (obj1)).b());
        }
    }

    public void a(String s, Throwable throwable) {
        a.log(b, Level.DEBUG, s, throwable);
    }

    public transient void a(String s, Object aobj[]) {
        if (a.isDebugEnabled()) {
            s = io.netty.util.internal.logging.f.a(s, aobj);
            a.log(b, Level.DEBUG, s.a(), s.b());
        }
    }

    public void b(String s) {
        a.log(b, Level.INFO, s, null);
    }

    public void b(String s, Object obj) {
        if (a.isDebugEnabled()) {
            s = io.netty.util.internal.logging.f.a(s, obj);
            a.log(b, Level.DEBUG, s.a(), s.b());
        }
    }

    public void b(String s, Object obj, Object obj1) {
        if (a.isDebugEnabled()) {
            s = io.netty.util.internal.logging.f.a(s, obj, obj1);
            a.log(b, Level.DEBUG, s.a(), s.b());
        }
    }

    public void b(String s, Throwable throwable) {
        a.log(b, Level.WARN, s, throwable);
    }

    public transient void b(String s, Object aobj[]) {
        if (a.isEnabledFor(Level.WARN)) {
            s = io.netty.util.internal.logging.f.a(s, aobj);
            a.log(b, Level.WARN, s.a(), s.b());
        }
    }

    public boolean b() {
        return a.isDebugEnabled();
    }

    public void c(String s) {
        a.log(b, Level.WARN, s, null);
    }

    public void c(String s, Object obj) {
        if (a.isEnabledFor(Level.WARN)) {
            s = io.netty.util.internal.logging.f.a(s, obj);
            a.log(b, Level.WARN, s.a(), s.b());
        }
    }

    public void c(String s, Object obj, Object obj1) {
        if (a.isInfoEnabled()) {
            s = io.netty.util.internal.logging.f.a(s, obj, obj1);
            a.log(b, Level.INFO, s.a(), s.b());
        }
    }

    public void c(String s, Throwable throwable) {
        a.log(b, Level.ERROR, s, throwable);
    }

    public transient void c(String s, Object aobj[]) {
        if (a.isEnabledFor(Level.ERROR)) {
            s = io.netty.util.internal.logging.f.a(s, aobj);
            a.log(b, Level.ERROR, s.a(), s.b());
        }
    }

    public boolean c() {
        return a.isEnabledFor(Level.WARN);
    }

    public void d(String s) {
        a.log(b, Level.ERROR, s, null);
    }

    public void d(String s, Object obj) {
        if (a.isEnabledFor(Level.ERROR)) {
            s = io.netty.util.internal.logging.f.a(s, obj);
            a.log(b, Level.ERROR, s.a(), s.b());
        }
    }

    public void d(String s, Object obj, Object obj1) {
        if (a.isEnabledFor(Level.WARN)) {
            s = io.netty.util.internal.logging.f.a(s, obj, obj1);
            a.log(b, Level.WARN, s.a(), s.b());
        }
    }

    public boolean d() {
        return a.isEnabledFor(Level.ERROR);
    }

    public void e(String s, Object obj, Object obj1) {
        if (a.isEnabledFor(Level.ERROR)) {
            s = io.netty.util.internal.logging.f.a(s, obj, obj1);
            a.log(b, Level.ERROR, s.a(), s.b());
        }
    }

    public boolean e() {
        boolean flag;
        if (c)
            flag = a.isTraceEnabled();
        else
            flag = a.isDebugEnabled();
        return flag;
    }

}
