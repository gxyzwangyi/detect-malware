// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.a;

import io.netty.channel.ac;
import io.netty.channel.ag;
import io.netty.channel.ah;
import io.netty.channel.d;
import io.netty.channel.g;
import io.netty.channel.h;
import io.netty.channel.i;
import io.netty.channel.p;
import io.netty.channel.w;
import io.netty.util.concurrent.n;
import io.netty.util.concurrent.r;
import io.netty.util.internal.m;
import java.net.SocketAddress;
import java.util.LinkedHashMap;
import java.util.Map;

// Referenced classes of package io.netty.a:
//            c

public abstract class io.netty.a.a
    implements Cloneable {
    private static final class a extends ac {

        private volatile io.netty.util.concurrent.i a;

        static io.netty.util.concurrent.i a(a a1, io.netty.util.concurrent.i j) {
            a1.a = j;
            return j;
        }

        protected io.netty.util.concurrent.i a() {
            Object obj = a;
            if (obj == null)
                obj = r.a;
            return ((io.netty.util.concurrent.i) (obj));
        }

        private a(d d1) {
            super(d1);
        }

    }


    volatile ah a;
    private volatile c b;
    private volatile SocketAddress c;
    private final Map d;
    private final Map e;
    private volatile i f;

    io.netty.a.a() {
        d = new LinkedHashMap();
        e = new LinkedHashMap();
    }

    io.netty.a.a(io.netty.a.a a1) {
        d = new LinkedHashMap();
        e = new LinkedHashMap();
        a = a1.a;
        b = a1.b;
        f = a1.f;
        c = a1.c;
        synchronized (a1.d) {
            d.putAll(a1.d);
        }
        synchronized (a1.e) {
            e.putAll(a1.e);
        }
        return;
        a1;
        map;
        JVM INSTR monitorexit ;
        throw a1;
        a1;
        map;
        JVM INSTR monitorexit ;
        throw a1;
    }

    static void a(g g1, d d1, SocketAddress socketaddress, w w) {
        b(g1, d1, socketaddress, w);
    }

    private g b(SocketAddress socketaddress) {
        g g1 = c();
        d d1 = g1.e();
        if (g1.j() != null)
            socketaddress = g1;
        else
        if (g1.isDone()) {
            w w = d1.l();
            b(g1, d1, socketaddress, w);
            socketaddress = w;
        } else {
            a a1 = new a(d1);
            g1.a(new h(a1, d1, g1, socketaddress) {

                final a a;
                final d b;
                final g c;
                final SocketAddress d;
                final io.netty.a.a e;

                public void a(g g2) {
                    g2 = g2.j();
                    if (g2 != null) {
                        a.a(g2);
                    } else {
                        a.a(a, b.e());
                        io.netty.a.a.a(c, b, d, a);
                    }
                }

                public volatile void a(n n) {
                    a((g)n);
                }

             {
                e = io.netty.a.a.this;
                a = a2;
                b = d1;
                c = g1;
                d = socketaddress;
                super();
            }
            }
);
            socketaddress = a1;
        }
        return socketaddress;
    }

    private static void b(g g1, d d1, SocketAddress socketaddress, w w) {
        d1.e().execute(new Runnable(g1, d1, socketaddress, w) {

            final g a;
            final d b;
            final SocketAddress c;
            final w d;

            public void run() {
                if (a.g_())
                    b.a(c, d).a(h.h);
                else
                    d.a(a.j());
            }

             {
                a = g1;
                b = d1;
                c = socketaddress;
                d = w1;
                super();
            }
        }
);
    }

    public io.netty.a.a a() {
        if (a == null)
            throw new IllegalStateException("group not set");
        if (b == null)
            throw new IllegalStateException("channel or channelFactory not set");
        else
            return this;
    }

    public io.netty.a.a a(c c1) {
        if (c1 == null)
            throw new NullPointerException("channelFactory");
        if (b != null) {
            throw new IllegalStateException("channelFactory set already");
        } else {
            b = c1;
            return this;
        }
    }

    public io.netty.a.a a(ah ah1) {
        if (ah1 == null)
            throw new NullPointerException("group");
        if (a != null) {
            throw new IllegalStateException("group set already");
        } else {
            a = ah1;
            return this;
        }
    }

    public io.netty.a.a a(i j) {
        if (j == null) {
            throw new NullPointerException("handler");
        } else {
            f = j;
            return this;
        }
    }

    public io.netty.a.a a(p p, Object obj) {
        if (p == null)
            throw new NullPointerException("option");
        if (obj == null)
            synchronized (d) {
                d.remove(p);
            }
        else
            synchronized (d) {
                d.put(p, obj);
            }
        return this;
        p;
        obj;
        JVM INSTR monitorexit ;
        throw p;
        p;
        map;
        JVM INSTR monitorexit ;
        throw p;
    }

    public g a(SocketAddress socketaddress) {
        a();
        if (socketaddress == null)
            throw new NullPointerException("localAddress");
        else
            return b(socketaddress);
    }

    abstract void a(d d1);

    public abstract io.netty.a.a b();

    final g c() {
        Object obj;
        Object obj1;
        obj = null;
        try {
            obj1 = e().a();
        }
        // Misplaced declaration of an exception variable
        catch (Object obj1) {
            if (obj != null)
                ((d) (obj)).o().d();
            obj = (new ac(((d) (obj)), r.a)).a(((Throwable) (obj1)));
            if (false)
                ;
            else
                break MISSING_BLOCK_LABEL_59;
        }
        obj = obj1;
        a(((d) (obj1)));
        g g1 = g().a(((d) (obj1)));
        obj = g1;
        if (g1.j() != null)
            if (((d) (obj1)).h()) {
                ((d) (obj1)).i();
                obj = g1;
            } else {
                ((d) (obj1)).o().d();
                obj = g1;
            }
        return ((g) (obj));
    }

    public Object clone() {
        return b();
    }

    final SocketAddress d() {
        return c;
    }

    final c e() {
        return b;
    }

    final i f() {
        return f;
    }

    public ah g() {
        return a;
    }

    final Map h() {
        return d;
    }

    final Map i() {
        return e;
    }

    public String toString() {
        obj = (new StringBuilder()).append(m.a(this)).append('(');
        if (a != null)
            ((StringBuilder) (obj)).append("group: ").append(m.a(a)).append(", ");
        if (b != null)
            ((StringBuilder) (obj)).append("channelFactory: ").append(b).append(", ");
        if (c != null)
            ((StringBuilder) (obj)).append("localAddress: ").append(c).append(", ");
        synchronized (d) {
            if (!d.isEmpty())
                ((StringBuilder) (obj)).append("options: ").append(d).append(", ");
        }
        synchronized (e) {
            if (!e.isEmpty())
                ((StringBuilder) (obj)).append("attrs: ").append(e).append(", ");
        }
        if (f != null)
            ((StringBuilder) (obj)).append("handler: ").append(f).append(", ");
        if (((StringBuilder) (obj)).charAt(((StringBuilder) (obj)).length() - 1) == '(') {
            ((StringBuilder) (obj)).append(')');
        } else {
            ((StringBuilder) (obj)).setCharAt(((StringBuilder) (obj)).length() - 2, ')');
            ((StringBuilder) (obj)).setLength(((StringBuilder) (obj)).length() - 1);
        }
        return ((StringBuilder) (obj)).toString();
        obj;
        map;
        JVM INSTR monitorexit ;
        throw obj;
        obj;
        map;
        JVM INSTR monitorexit ;
        throw obj;
    }
}
