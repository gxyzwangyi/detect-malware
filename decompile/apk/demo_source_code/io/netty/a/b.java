// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.a;

import io.netty.channel.ag;
import io.netty.channel.d;
import io.netty.channel.e;
import io.netty.channel.g;
import io.netty.channel.h;
import io.netty.channel.i;
import io.netty.channel.p;
import io.netty.channel.t;
import io.netty.channel.w;
import io.netty.util.concurrent.n;
import io.netty.util.internal.logging.c;
import java.net.SocketAddress;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

// Referenced classes of package io.netty.a:
//            a

public class b extends a {

    private static final io.netty.util.internal.logging.b b = io.netty.util.internal.logging.c.a(io/netty/a/b);
    private volatile SocketAddress c;

    public b() {
    }

    private b(b b1) {
        super(b1);
        c = b1.c;
    }

    static void a(g g1, d d1, SocketAddress socketaddress, SocketAddress socketaddress1, w w) {
        b(g1, d1, socketaddress, socketaddress1, w);
    }

    private g b(SocketAddress socketaddress, SocketAddress socketaddress1) {
        g g1 = c();
        d d1 = g1.e();
        if (g1.j() != null) {
            socketaddress = g1;
        } else {
            w w = d1.l();
            if (g1.isDone())
                b(g1, d1, socketaddress, socketaddress1, w);
            else
                g1.a(new h(g1, d1, socketaddress, socketaddress1, w) {

                    final g a;
                    final d b;
                    final SocketAddress c;
                    final SocketAddress d;
                    final w e;
                    final b f;

                    public void a(g g2) {
                        b.a(a, b, c, d, e);
                    }

                    public volatile void a(n n) {
                        a((g)n);
                    }

             {
                f = b.this;
                a = g1;
                b = d1;
                c = socketaddress;
                d = socketaddress1;
                e = w;
                super();
            }
                }
);
            socketaddress = w;
        }
        return socketaddress;
    }

    private static void b(g g1, d d1, SocketAddress socketaddress, SocketAddress socketaddress1, w w) {
        d1.e().execute(new Runnable(g1, socketaddress1, d1, socketaddress, w) {

            final g a;
            final SocketAddress b;
            final d c;
            final SocketAddress d;
            final w e;

            public void run() {
                if (a.g_()) {
                    if (b == null)
                        c.b(d, e);
                    else
                        c.a(d, b, e);
                    e.c(h.h);
                } else {
                    e.a(a.j());
                }
            }

             {
                a = g1;
                b = socketaddress;
                c = d1;
                d = socketaddress1;
                e = w1;
                super();
            }
        }
);
    }

    public a a() {
        return j();
    }

    public g a(SocketAddress socketaddress, SocketAddress socketaddress1) {
        if (socketaddress == null) {
            throw new NullPointerException("remoteAddress");
        } else {
            j();
            return b(socketaddress, socketaddress1);
        }
    }

    void a(d d1) {
        d1.c().a(new i[] {
            f()
        });
        Map map = h();
        map;
        JVM INSTR monitorenter ;
        Iterator iterator = map.entrySet().iterator();
_L2:
        java.util.Map.Entry entry;
        if (!iterator.hasNext())
            break MISSING_BLOCK_LABEL_181;
        entry = (java.util.Map.Entry)iterator.next();
        if (d1.E().a((p)entry.getKey(), entry.getValue())) goto _L2; else goto _L1
_L1:
        io.netty.util.internal.logging.b b1 = b;
        StringBuilder stringbuilder1 = JVM INSTR new #154 <Class StringBuilder>;
        stringbuilder1.StringBuilder();
        b1.c(stringbuilder1.append("Unknown channel option: ").append(entry).toString());
          goto _L2
        Throwable throwable;
        throwable;
        io.netty.util.internal.logging.b b2 = b;
        StringBuilder stringbuilder = JVM INSTR new #154 <Class StringBuilder>;
        stringbuilder.StringBuilder();
        b2.b(stringbuilder.append("Failed to set a channel option: ").append(d1).toString(), throwable);
          goto _L2
        d1;
        map;
        JVM INSTR monitorexit ;
        throw d1;
        map;
        JVM INSTR monitorexit ;
        map = i();
        map;
        JVM INSTR monitorenter ;
        java.util.Map.Entry entry1;
        for (Iterator iterator1 = map.entrySet().iterator(); iterator1.hasNext(); d1.a((io.netty.util.c)entry1.getKey()).set(entry1.getValue()))
            entry1 = (java.util.Map.Entry)iterator1.next();

        break MISSING_BLOCK_LABEL_258;
        d1;
        map;
        JVM INSTR monitorexit ;
        throw d1;
        map;
        JVM INSTR monitorexit ;
    }

    public a b() {
        return k();
    }

    public g b(SocketAddress socketaddress) {
        if (socketaddress == null) {
            throw new NullPointerException("remoteAddress");
        } else {
            j();
            return b(socketaddress, d());
        }
    }

    public Object clone() {
        return k();
    }

    public b j() {
        super.a();
        if (f() == null)
            throw new IllegalStateException("handler not set");
        else
            return this;
    }

    public b k() {
        return new b(this);
    }

    public String toString() {
        Object obj;
        if (c == null) {
            obj = super.toString();
        } else {
            obj = new StringBuilder(super.toString());
            ((StringBuilder) (obj)).setLength(((StringBuilder) (obj)).length() - 1);
            obj = ((StringBuilder) (obj)).append(", remoteAddress: ").append(c).append(')').toString();
        }
        return ((String) (obj));
    }

}
