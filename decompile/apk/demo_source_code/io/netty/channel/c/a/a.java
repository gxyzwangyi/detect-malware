// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.channel.c.a;

import com.barchart.udt.TypeUDT;
import com.barchart.udt.nio.d;
import com.barchart.udt.nio.j;
import com.barchart.udt.nio.k;
import io.netty.channel.ChannelException;
import io.netty.channel.a.c;
import io.netty.channel.c.b;
import io.netty.channel.c.g;
import io.netty.channel.c.h;
import io.netty.channel.e;
import io.netty.channel.o;
import io.netty.channel.q;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.nio.channels.SelectableChannel;
import java.util.List;

// Referenced classes of package io.netty.channel.c.a:
//            h

public abstract class a extends c
    implements g {

    protected static final io.netty.util.internal.logging.b d = io.netty.util.internal.logging.c.a(io/netty/channel/c/a/a);
    private static final o e = new o(false);
    private final h f;

    protected a(TypeUDT typeudt) {
        this(h.a(typeudt));
    }

    protected a(j j1) {
        super(null, j1, 16);
        j1.configureBlocking(false);
        b b1 = JVM INSTR new #53  <Class b>;
        b1.b(this, j1, true);
        f = b1;
        return;
        Exception exception;
        exception;
        j1.close();
_L2:
        throw new ChannelException("Failed to configure channel.", exception);
        j1;
        if (d.c())
            d.b("Failed to close channel.", j1);
        if (true) goto _L2; else goto _L1
_L1:
    }

    public e E() {
        return K();
    }

    public boolean G() {
        return S().g().isBound();
    }

    public o H() {
        return e;
    }

    public h K() {
        return f;
    }

    protected SelectableChannel M() {
        return S();
    }

    protected void R() {
        throw new UnsupportedOperationException();
    }

    protected j S() {
        return (j)super.M();
    }

    public InetSocketAddress T() {
        return (InetSocketAddress)super.f();
    }

    public InetSocketAddress U() {
        return null;
    }

    protected int a(List list) {
        k k = S().e();
        int i;
        if (k == null) {
            i = 0;
        } else {
            list.add(a(k));
            i = 1;
        }
        return i;
    }

    protected abstract io.netty.channel.c.c a(k k);

    protected void a(SocketAddress socketaddress) {
        S().g().bind(socketaddress, f.t());
    }

    protected boolean a(Object obj, q q) {
        throw new UnsupportedOperationException();
    }

    protected boolean a(SocketAddress socketaddress, SocketAddress socketaddress1) {
        throw new UnsupportedOperationException();
    }

    protected final Object c(Object obj) {
        throw new UnsupportedOperationException();
    }

    public SocketAddress f() {
        return T();
    }

    public SocketAddress g() {
        return U();
    }

    protected SocketAddress r() {
        return S().g().getLocalSocketAddress();
    }

    protected SocketAddress s() {
        return null;
    }

    protected void u() {
        throw new UnsupportedOperationException();
    }

    protected void v() {
        S().close();
    }

}
