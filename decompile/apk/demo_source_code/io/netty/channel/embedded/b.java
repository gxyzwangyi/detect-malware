// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.channel.embedded;

import io.netty.channel.ac;
import io.netty.channel.ag;
import io.netty.channel.g;
import io.netty.channel.w;
import io.netty.util.concurrent.d;
import io.netty.util.concurrent.i;
import io.netty.util.concurrent.n;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.concurrent.TimeUnit;

final class b extends d
    implements ag {

    private final Queue a = new ArrayDeque(2);

    b() {
    }

    public g a(io.netty.channel.d d1) {
        return a(d1, ((w) (new ac(d1, this))));
    }

    public g a(io.netty.channel.d d1, w w) {
        d1.o().a(this, w);
        return w;
    }

    public n a(long l, long l1, TimeUnit timeunit) {
        throw new UnsupportedOperationException();
    }

    void a() {
        do {
            Runnable runnable = (Runnable)a.poll();
            if (runnable == null)
                return;
            runnable.run();
        } while (true);
    }

    public boolean a(Thread thread) {
        return true;
    }

    public boolean awaitTermination(long l, TimeUnit timeunit) {
        Thread.sleep(timeunit.toMillis(l));
        return false;
    }

    long b() {
        long l = io.netty.util.concurrent.d.m();
        do {
            Runnable runnable = a(l);
            if (runnable == null)
                return o();
            runnable.run();
        } while (true);
    }

    public i c() {
        return g();
    }

    protected void d() {
        super.d();
    }

    public n e() {
        throw new UnsupportedOperationException();
    }

    public void execute(Runnable runnable) {
        if (runnable == null) {
            throw new NullPointerException("command");
        } else {
            a.add(runnable);
            return;
        }
    }

    public boolean f() {
        return true;
    }

    public ag g() {
        return this;
    }

    public boolean isShutdown() {
        return false;
    }

    public boolean isTerminated() {
        return false;
    }

    public void shutdown() {
        throw new UnsupportedOperationException();
    }
}
