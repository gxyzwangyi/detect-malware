// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.channel.embedded;

import io.netty.channel.ab;
import io.netty.channel.ag;
import io.netty.channel.d;
import io.netty.channel.e;
import io.netty.channel.g;
import io.netty.channel.i;
import io.netty.channel.o;
import io.netty.channel.q;
import io.netty.channel.t;
import io.netty.channel.w;
import io.netty.util.concurrent.n;
import io.netty.util.h;
import io.netty.util.internal.PlatformDependent;
import io.netty.util.internal.k;
import io.netty.util.internal.logging.b;
import io.netty.util.internal.logging.c;
import java.net.SocketAddress;
import java.nio.channels.ClosedChannelException;
import java.util.ArrayDeque;
import java.util.Queue;

// Referenced classes of package io.netty.channel.embedded:
//            b, EmbeddedSocketAddress

public class io.netty.channel.embedded.a extends io.netty.channel.a {
    private class a extends io.netty.channel.a {

        final io.netty.channel.embedded.a c;

        public void a(SocketAddress socketaddress, SocketAddress socketaddress1, w w) {
            d(w);
        }

        private a() {
            c = io.netty.channel.embedded.a.this;
            super(io.netty.channel.embedded.a.this);
        }

    }

    private final class b extends ab {

        final io.netty.channel.embedded.a e;

        protected void b(Throwable throwable) {
            io.netty.channel.embedded.a.a(e, throwable);
        }

        protected void e(Object obj) {
            e.I().add(obj);
        }

        public b(io.netty.channel.embedded.a a2) {
            e = io.netty.channel.embedded.a.this;
            super(a2);
        }
    }


    static final boolean a;
    private static final io.netty.util.internal.logging.b b = io.netty.util.internal.logging.c.a(io/netty/channel/embedded/a);
    private static final o c = new o(false);
    private static final o d = new o(true);
    private final io.netty.channel.embedded.b e = new io.netty.channel.embedded.b();
    private final io.netty.channel.h f = new io.netty.channel.h() {

        final io.netty.channel.embedded.a a;

        public void a(g g1) {
            io.netty.channel.embedded.a.a(a, g1);
        }

        public volatile void a(n n1) {
            a((g)n1);
        }

             {
                a = io.netty.channel.embedded.a.this;
                super();
            }
    }
;
    private final o g;
    private final e h;
    private final SocketAddress i = new EmbeddedSocketAddress();
    private final SocketAddress j = new EmbeddedSocketAddress();
    private Queue k;
    private Queue l;
    private Throwable m;
    private int n;

    public transient io.netty.channel.embedded.a(boolean flag, e e1, i ai[]) {
        super(null);
        g = a(flag);
        h = (e)io.netty.util.internal.k.a(e1, "config");
        a(ai);
    }

    private static o a(boolean flag) {
        o o1;
        if (flag)
            o1 = d;
        else
            o1 = c;
        return o1;
    }

    static void a(io.netty.channel.embedded.a a1, g g1) {
        a1.a(g1);
    }

    static void a(io.netty.channel.embedded.a a1, Throwable throwable) {
        a1.b(throwable);
    }

    private void a(g g1) {
        if (!g1.g_())
            b(g1.j());
    }

    private transient void a(i ai[]) {
        io.netty.util.internal.k.a(ai, "handlers");
        c().a(new i[] {
            new io.netty.channel.n(ai) {

                final i a[];
                final io.netty.channel.embedded.a b;

                protected void a(d d1) {
                    d1 = d1.c();
                    i ai1[] = a;
                    int j1 = ai1.length;
                    int i1 = 0;
                    do {
                        i k1;
label0:
                        {
                            if (i1 < j1) {
                                k1 = ai1[i1];
                                if (k1 != null)
                                    break label0;
                            }
                            return;
                        }
                        d1.a(new i[] {
                            k1
                        });
                        i1++;
                    } while (true);
                }

             {
                b = io.netty.channel.embedded.a.this;
                a = ai;
                super();
            }
            }

        });
        ai = e.a(this);
        if (!a && !ai.isDone())
            throw new AssertionError();
        else
            return;
    }

    private static boolean a(Queue queue) {
        if (!b(queue))
            break MISSING_BLOCK_LABEL_30;
_L3:
        Object obj = queue.poll();
        if (obj != null) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        io.netty.util.h.b(obj);
          goto _L3
        flag = false;
          goto _L4
    }

    private void b(Throwable throwable) {
        if (m == null)
            m = throwable;
        else
            b.b("More than one exception was raised. Will report only the first one and log others.", throwable);
    }

    private static boolean b(Queue queue) {
        boolean flag;
        if (queue != null && !queue.isEmpty())
            flag = true;
        else
            flag = false;
        return flag;
    }

    private boolean b(boolean flag) {
        i();
        N();
        if (b(k)) goto _L2; else goto _L1
_L1:
        boolean flag1 = b(l);
        if (!flag1) goto _L3; else goto _L2
_L2:
        flag1 = true;
_L5:
        if (flag) {
            a(k);
            a(l);
        }
        return flag1;
_L3:
        flag1 = false;
        if (true) goto _L5; else goto _L4
_L4:
        Exception exception;
        exception;
        if (flag) {
            a(k);
            a(l);
        }
        throw exception;
    }

    private static Object c(Queue queue) {
        if (queue != null)
            queue = ((Queue) (queue.poll()));
        else
            queue = null;
        return queue;
    }

    private void c(boolean flag) {
        M();
        if (flag)
            e.d();
    }

    public e E() {
        return h;
    }

    public boolean F() {
        boolean flag;
        if (n < 2)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean G() {
        boolean flag = true;
        if (n != 1)
            flag = false;
        return flag;
    }

    public o H() {
        return g;
    }

    public Queue I() {
        if (k == null)
            k = new ArrayDeque();
        return k;
    }

    public Queue J() {
        if (l == null)
            l = new ArrayDeque();
        return l;
    }

    public Object K() {
        return c(k);
    }

    public boolean L() {
        return b(false);
    }

    public void M() {
        try {
            e.a();
        }
        catch (Exception exception) {
            b(exception);
        }
        e.b();
_L1:
        return;
        Exception exception1;
        exception1;
        b(exception1);
          goto _L1
    }

    public void N() {
        Throwable throwable = m;
        if (throwable != null) {
            m = null;
            PlatformDependent.a(throwable);
        }
    }

    protected final void O() {
        if (!F()) {
            b(new ClosedChannelException());
            N();
        }
    }

    protected final ab a() {
        return new b(this);
    }

    public final g a(w w) {
        M();
        w = super.a(w);
        c(true);
        return w;
    }

    protected void a(q q1) {
        do {
            Object obj = q1.b();
            if (obj == null)
                return;
            io.netty.util.h.a(obj);
            J().add(obj);
            q1.c();
        } while (true);
    }

    protected void a(SocketAddress socketaddress) {
    }

    protected boolean a(ag ag) {
        return ag instanceof io.netty.channel.embedded.b;
    }

    public transient boolean a(Object aobj[]) {
        O();
        boolean flag;
        if (aobj.length == 0) {
            flag = b(k);
        } else {
            t t1 = c();
            int j1 = aobj.length;
            for (int i1 = 0; i1 < j1; i1++)
                t1.b(aobj[i1]);

            t1.c();
            M();
            N();
            flag = b(k);
        }
        return flag;
    }

    public final g i() {
        return a(l());
    }

    protected io.netty.channel.a p() {
        return new a();
    }

    protected SocketAddress r() {
        SocketAddress socketaddress;
        if (G())
            socketaddress = i;
        else
            socketaddress = null;
        return socketaddress;
    }

    protected SocketAddress s() {
        SocketAddress socketaddress;
        if (G())
            socketaddress = j;
        else
            socketaddress = null;
        return socketaddress;
    }

    protected void t() {
        n = 1;
    }

    protected void u() {
        if (!g.a())
            v();
    }

    protected void v() {
        n = 2;
    }

    protected void x() {
    }

    static  {
        boolean flag;
        if (!io/netty/channel/embedded/a.desiredAssertionStatus())
            flag = true;
        else
            flag = false;
        a = flag;
    }
}
