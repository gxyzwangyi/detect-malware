// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.channel;

import io.netty.buffer.h;
import io.netty.buffer.i;
import java.util.ArrayList;
import java.util.List;

// Referenced classes of package io.netty.channel:
//            an

public class c
    implements an {
    private static final class a
        implements an.a {

        private final int a;
        private final int b;
        private int c;
        private int d;
        private boolean e;

        public h a(i j) {
            return j.b(d);
        }

        public void a(int j) {
            if (j > c.b()[Math.max(0, c - 1 - 1)]) goto _L2; else goto _L1
_L1:
            if (e) {
                c = Math.max(c - 1, a);
                d = c.b()[c];
                e = false;
            } else {
                e = true;
            }
_L4:
            return;
_L2:
            if (j >= d) {
                c = Math.min(c + 4, b);
                d = c.b()[c];
                e = false;
            }
            if (true) goto _L4; else goto _L3
_L3:
        }

        a(int j, int k, int l) {
            a = j;
            b = k;
            c = c.a(l);
            d = c.b()[c];
        }
    }


    public static final c a = new c();
    private static final int b[];
    private final int c;
    private final int d;
    private final int e;

    private c() {
        this(64, 1024, 0x10000);
    }

    public c(int i, int j, int k) {
        if (i <= 0)
            throw new IllegalArgumentException((new StringBuilder()).append("minimum: ").append(i).toString());
        if (j < i)
            throw new IllegalArgumentException((new StringBuilder()).append("initial: ").append(j).toString());
        if (k < j)
            throw new IllegalArgumentException((new StringBuilder()).append("maximum: ").append(k).toString());
        int l = b(i);
        if (b[l] < i)
            c = l + 1;
        else
            c = l;
        i = b(k);
        if (b[i] > k)
            d = i - 1;
        else
            d = i;
        e = j;
    }

    static int a(int i) {
        return b(i);
    }

    private static int b(int i) {
        int j;
        int k;
        j = 0;
        k = b.length - 1;
_L1:
        if (k < j) {
            i = j;
        } else {
label0:
            {
                if (k != j)
                    break label0;
                i = k;
            }
        }
_L2:
        return i;
        int l;
        int i1;
        l = j + k >>> 1;
        i1 = b[l];
        if (i > b[l + 1]) {
            j = l + 1;
        } else {
label1:
            {
                if (i >= i1)
                    break label1;
                k = l - 1;
            }
        }
          goto _L1
        if (i == i1)
            i = l;
        else
            i = l + 1;
          goto _L2
    }

    static int[] b() {
        return b;
    }

    public an.a a() {
        return new a(c, d, e);
    }

    static  {
        char c1 = '\u0200';
        ArrayList arraylist = new ArrayList();
        int k = 16;
        int i;
        do {
            i = c1;
            if (k >= 512)
                break;
            arraylist.add(Integer.valueOf(k));
            k += 16;
        } while (true);
        for (; i > 0; i <<= 1)
            arraylist.add(Integer.valueOf(i));

        b = new int[arraylist.size()];
        for (int j = 0; j < b.length; j++)
            b[j] = ((Integer)arraylist.get(j)).intValue();

    }
}
