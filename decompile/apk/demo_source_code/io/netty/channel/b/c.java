// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.channel.b;

import io.netty.buffer.i;
import io.netty.channel.*;
import io.netty.util.internal.PlatformDependent;
import java.net.Socket;
import java.net.SocketException;

// Referenced classes of package io.netty.channel.b:
//            h, g

public class c extends z
    implements h {

    protected final Socket b;
    private volatile boolean c;

    public c(g g1, Socket socket) {
        super(g1);
        if (socket == null)
            throw new NullPointerException("javaSocket");
        b = socket;
        if (!PlatformDependent.e())
            break MISSING_BLOCK_LABEL_36;
        e(true);
_L2:
        return;
        g1;
        if (true) goto _L2; else goto _L1
_L1:
    }

    public e a(int i1) {
        return j(i1);
    }

    public e a(i i1) {
        return b(i1);
    }

    public e a(ak ak) {
        return b(ak);
    }

    public e a(an an) {
        return b(an);
    }

    public e a(boolean flag) {
        return g(flag);
    }

    public Object a(p p1) {
        if (p1 == p.o)
            p1 = Integer.valueOf(l());
        else
        if (p1 == p.n)
            p1 = Integer.valueOf(m());
        else
        if (p1 == p.y)
            p1 = Boolean.valueOf(r());
        else
        if (p1 == p.m)
            p1 = Boolean.valueOf(p());
        else
        if (p1 == p.p)
            p1 = Boolean.valueOf(q());
        else
        if (p1 == p.q)
            p1 = Integer.valueOf(n());
        else
        if (p1 == p.t)
            p1 = Integer.valueOf(o());
        else
        if (p1 == p.i)
            p1 = Boolean.valueOf(s());
        else
            p1 = ((p) (super.a(p1)));
        return p1;
    }

    public boolean a(p p1, Object obj) {
        boolean flag;
        b(p1, obj);
        if (p1 == p.o)
            f(((Integer)obj).intValue());
        else
        if (p1 == p.n)
            g(((Integer)obj).intValue());
        else
        if (p1 == p.y)
            e(((Boolean)obj).booleanValue());
        else
        if (p1 == p.m)
            c(((Boolean)obj).booleanValue());
        else
        if (p1 == p.p)
            d(((Boolean)obj).booleanValue());
        else
        if (p1 == p.q)
            h(((Integer)obj).intValue());
        else
        if (p1 == p.t) {
            i(((Integer)obj).intValue());
        } else {
label0:
            {
                if (p1 != p.i)
                    break label0;
                f(((Boolean)obj).booleanValue());
            }
        }
        flag = true;
_L2:
        return flag;
        flag = super.a(p1, obj);
        if (true) goto _L2; else goto _L1
_L1:
    }

    public h b(i i1) {
        super.a(i1);
        return this;
    }

    public h b(ak ak) {
        super.a(ak);
        return this;
    }

    public h b(an an) {
        super.a(an);
        return this;
    }

    public e b(int i1) {
        return k(i1);
    }

    public e b(boolean flag) {
        return h(flag);
    }

    public h c(boolean flag) {
        try {
            b.setKeepAlive(flag);
        }
        catch (SocketException socketexception) {
            throw new ChannelException(socketexception);
        }
        return this;
    }

    public e c(int i1) {
        return l(i1);
    }

    public h d(boolean flag) {
        try {
            b.setReuseAddress(flag);
        }
        catch (SocketException socketexception) {
            throw new ChannelException(socketexception);
        }
        return this;
    }

    public e d(int i1) {
        return m(i1);
    }

    public h e(boolean flag) {
        try {
            b.setTcpNoDelay(flag);
        }
        catch (SocketException socketexception) {
            throw new ChannelException(socketexception);
        }
        return this;
    }

    public e e(int i1) {
        return n(i1);
    }

    public h f(int i1) {
        try {
            b.setReceiveBufferSize(i1);
        }
        catch (SocketException socketexception) {
            throw new ChannelException(socketexception);
        }
        return this;
    }

    public h f(boolean flag) {
        c = flag;
        return this;
    }

    public h g(int i1) {
        try {
            b.setSendBufferSize(i1);
        }
        catch (SocketException socketexception) {
            throw new ChannelException(socketexception);
        }
        return this;
    }

    public h g(boolean flag) {
        super.a(flag);
        return this;
    }

    public h h(int i1) {
        if (i1 >= 0)
            break MISSING_BLOCK_LABEL_15;
        try {
            b.setSoLinger(false, 0);
        }
        catch (SocketException socketexception) {
            throw new ChannelException(socketexception);
        }
        return this;
        b.setSoLinger(true, i1);
        break MISSING_BLOCK_LABEL_13;
    }

    public h h(boolean flag) {
        super.b(flag);
        return this;
    }

    public h i(int i1) {
        try {
            b.setTrafficClass(i1);
        }
        catch (SocketException socketexception) {
            throw new ChannelException(socketexception);
        }
        return this;
    }

    public h j(int i1) {
        super.a(i1);
        return this;
    }

    public h k(int i1) {
        super.b(i1);
        return this;
    }

    public int l() {
        int i1;
        try {
            i1 = b.getReceiveBufferSize();
        }
        catch (SocketException socketexception) {
            throw new ChannelException(socketexception);
        }
        return i1;
    }

    public h l(int i1) {
        super.c(i1);
        return this;
    }

    public int m() {
        int i1;
        try {
            i1 = b.getSendBufferSize();
        }
        catch (SocketException socketexception) {
            throw new ChannelException(socketexception);
        }
        return i1;
    }

    public h m(int i1) {
        super.d(i1);
        return this;
    }

    public int n() {
        int i1;
        try {
            i1 = b.getSoLinger();
        }
        catch (SocketException socketexception) {
            throw new ChannelException(socketexception);
        }
        return i1;
    }

    public h n(int i1) {
        super.e(i1);
        return this;
    }

    public int o() {
        int i1;
        try {
            i1 = b.getTrafficClass();
        }
        catch (SocketException socketexception) {
            throw new ChannelException(socketexception);
        }
        return i1;
    }

    public boolean p() {
        boolean flag;
        try {
            flag = b.getKeepAlive();
        }
        catch (SocketException socketexception) {
            throw new ChannelException(socketexception);
        }
        return flag;
    }

    public boolean q() {
        boolean flag;
        try {
            flag = b.getReuseAddress();
        }
        catch (SocketException socketexception) {
            throw new ChannelException(socketexception);
        }
        return flag;
    }

    public boolean r() {
        boolean flag;
        try {
            flag = b.getTcpNoDelay();
        }
        catch (SocketException socketexception) {
            throw new ChannelException(socketexception);
        }
        return flag;
    }

    public boolean s() {
        return c;
    }
}
