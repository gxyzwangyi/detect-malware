// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.channel.b;

import io.netty.buffer.i;
import io.netty.channel.*;
import io.netty.util.g;
import java.net.ServerSocket;
import java.net.SocketException;

// Referenced classes of package io.netty.channel.b:
//            f, e

public class b extends z
    implements f {

    protected final ServerSocket b;
    private volatile int c;

    public b(io.netty.channel.b.e e1, ServerSocket serversocket) {
        super(e1);
        c = g.e;
        if (serversocket == null) {
            throw new NullPointerException("javaSocket");
        } else {
            b = serversocket;
            return;
        }
    }

    public e a(int i1) {
        return h(i1);
    }

    public e a(i i1) {
        return b(i1);
    }

    public e a(ak ak) {
        return b(ak);
    }

    public e a(an an) {
        return b(an);
    }

    public e a(boolean flag) {
        return d(flag);
    }

    public Object a(p p1) {
        if (p1 == p.o)
            p1 = Integer.valueOf(m());
        else
        if (p1 == p.p)
            p1 = Boolean.valueOf(l());
        else
        if (p1 == p.r)
            p1 = Integer.valueOf(n());
        else
            p1 = ((p) (super.a(p1)));
        return p1;
    }

    public boolean a(p p1, Object obj) {
        boolean flag;
        b(p1, obj);
        if (p1 == p.o)
            f(((Integer)obj).intValue());
        else
        if (p1 == p.p) {
            c(((Boolean)obj).booleanValue());
        } else {
label0:
            {
                if (p1 != p.r)
                    break label0;
                g(((Integer)obj).intValue());
            }
        }
        flag = true;
_L2:
        return flag;
        flag = super.a(p1, obj);
        if (true) goto _L2; else goto _L1
_L1:
    }

    public f b(i i1) {
        super.a(i1);
        return this;
    }

    public f b(ak ak) {
        super.a(ak);
        return this;
    }

    public f b(an an) {
        super.a(an);
        return this;
    }

    public e b(int i1) {
        return i(i1);
    }

    public f c(boolean flag) {
        try {
            b.setReuseAddress(flag);
        }
        catch (SocketException socketexception) {
            throw new ChannelException(socketexception);
        }
        return this;
    }

    public e c(int i1) {
        return j(i1);
    }

    public f d(boolean flag) {
        super.a(flag);
        return this;
    }

    public e d(int i1) {
        return k(i1);
    }

    public e e(int i1) {
        return l(i1);
    }

    public f f(int i1) {
        try {
            b.setReceiveBufferSize(i1);
        }
        catch (SocketException socketexception) {
            throw new ChannelException(socketexception);
        }
        return this;
    }

    public f g(int i1) {
        if (i1 < 0) {
            throw new IllegalArgumentException((new StringBuilder()).append("backlog: ").append(i1).toString());
        } else {
            c = i1;
            return this;
        }
    }

    public f h(int i1) {
        super.a(i1);
        return this;
    }

    public f i(int i1) {
        super.b(i1);
        return this;
    }

    public f j(int i1) {
        super.c(i1);
        return this;
    }

    public f k(int i1) {
        super.d(i1);
        return this;
    }

    public f l(int i1) {
        super.e(i1);
        return this;
    }

    public boolean l() {
        boolean flag;
        try {
            flag = b.getReuseAddress();
        }
        catch (SocketException socketexception) {
            throw new ChannelException(socketexception);
        }
        return flag;
    }

    public int m() {
        int i1;
        try {
            i1 = b.getReceiveBufferSize();
        }
        catch (SocketException socketexception) {
            throw new ChannelException(socketexception);
        }
        return i1;
    }

    public int n() {
        return c;
    }
}
