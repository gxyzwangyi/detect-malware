// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.channel.b.a;

import io.netty.channel.ChannelException;
import io.netty.channel.a.c;
import io.netty.channel.b.e;
import io.netty.channel.b.f;
import io.netty.channel.o;
import io.netty.channel.q;
import io.netty.util.internal.logging.b;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.SocketAddress;
import java.nio.channels.SelectableChannel;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.nio.channels.spi.SelectorProvider;
import java.util.List;

// Referenced classes of package io.netty.channel.b.a:
//            b

public class io.netty.channel.b.a.a extends c
    implements e {
    private final class a extends io.netty.channel.b.b {

        final io.netty.channel.b.a.a c;

        protected void k() {
            io.netty.channel.b.a.a.a(c, false);
        }

        private a(io.netty.channel.b.a.a a2, ServerSocket serversocket) {
            c = io.netty.channel.b.a.a.this;
            super(a2, serversocket);
        }

    }


    private static final o d = new o(false);
    private static final SelectorProvider e = SelectorProvider.provider();
    private static final b f = io.netty.util.internal.logging.c.a(io/netty/channel/b/a/a);
    private final f g;

    public io.netty.channel.b.a.a() {
        this(a(e));
    }

    public io.netty.channel.b.a.a(ServerSocketChannel serversocketchannel) {
        super(null, serversocketchannel, 16);
        g = new a(this, U().socket());
    }

    private static ServerSocketChannel a(SelectorProvider selectorprovider) {
        try {
            selectorprovider = selectorprovider.openServerSocketChannel();
        }
        // Misplaced declaration of an exception variable
        catch (SelectorProvider selectorprovider) {
            throw new ChannelException("Failed to open a server socket.", selectorprovider);
        }
        return selectorprovider;
    }

    static void a(io.netty.channel.b.a.a a1, boolean flag) {
        a1.b(flag);
    }

    public io.netty.channel.e E() {
        return S();
    }

    public boolean G() {
        return U().socket().isBound();
    }

    public o H() {
        return d;
    }

    public InetSocketAddress K() {
        return (InetSocketAddress)super.f();
    }

    protected SelectableChannel M() {
        return U();
    }

    protected void R() {
        throw new UnsupportedOperationException();
    }

    public f S() {
        return g;
    }

    public InetSocketAddress T() {
        return null;
    }

    protected ServerSocketChannel U() {
        return (ServerSocketChannel)super.M();
    }

    protected int a(List list) {
        SocketChannel socketchannel = U().accept();
        if (socketchannel == null) goto _L2; else goto _L1
_L1:
        io.netty.channel.b.a.b b1 = JVM INSTR new #126 <Class io.netty.channel.b.a.b>;
        b1.io.netty.channel.b.a.b(this, socketchannel);
        list.add(b1);
        int i = 1;
_L4:
        return i;
        list;
        f.b("Failed to create a new channel from an accepted socket.", list);
        try {
            socketchannel.close();
        }
        // Misplaced declaration of an exception variable
        catch (List list) {
            f.b("Failed to close a socket.", list);
        }
_L2:
        i = 0;
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected void a(SocketAddress socketaddress) {
        U().socket().bind(socketaddress, g.n());
    }

    protected boolean a(Object obj, q q) {
        throw new UnsupportedOperationException();
    }

    protected boolean a(SocketAddress socketaddress, SocketAddress socketaddress1) {
        throw new UnsupportedOperationException();
    }

    protected final Object c(Object obj) {
        throw new UnsupportedOperationException();
    }

    public SocketAddress f() {
        return K();
    }

    public SocketAddress g() {
        return T();
    }

    protected SocketAddress r() {
        return U().socket().getLocalSocketAddress();
    }

    protected SocketAddress s() {
        return null;
    }

    protected void u() {
        throw new UnsupportedOperationException();
    }

    protected void v() {
        U().close();
    }

}
