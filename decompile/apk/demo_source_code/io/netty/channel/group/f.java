// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.channel.group;

import io.netty.channel.*;
import io.netty.util.concurrent.i;
import io.netty.util.concurrent.n;
import io.netty.util.internal.ConcurrentSet;
import io.netty.util.internal.m;
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

// Referenced classes of package io.netty.channel.group:
//            a, c, g, d, 
//            e, b

public class f extends AbstractSet
    implements a {

    private static final AtomicInteger a = new AtomicInteger();
    private final String b;
    private final i c;
    private final ConcurrentSet d;
    private final ConcurrentSet e;
    private final h f;
    private final boolean g;
    private volatile boolean h;

    public f(String s, i i) {
        this(s, i, false);
    }

    public f(String s, i i, boolean flag) {
        d = new ConcurrentSet();
        e = new ConcurrentSet();
        f = new h() {

            final f a;

            public void a(g g1) {
                a.remove(g1.e());
            }

            public volatile void a(n n) {
                a((g)n);
            }

             {
                a = f.this;
                super();
            }
        }
;
        if (s == null) {
            throw new NullPointerException("name");
        } else {
            b = s;
            c = i;
            g = flag;
            return;
        }
    }

    public int a(a a1) {
        int i = a().compareTo(a1.a());
        if (i == 0)
            i = System.identityHashCode(this) - System.identityHashCode(a1);
        return i;
    }

    public b a(c c1) {
        if (c1 == null)
            throw new NullPointerException("matcher");
        LinkedHashMap linkedhashmap = new LinkedHashMap(size());
        if (g)
            h = true;
        Iterator iterator1 = d.iterator();
        do {
            if (!iterator1.hasNext())
                break;
            d d2 = (d)iterator1.next();
            if (c1.a(d2))
                linkedhashmap.put(d2, d2.i());
        } while (true);
        Iterator iterator2 = e.iterator();
        do {
            if (!iterator2.hasNext())
                break;
            d d1 = (d)iterator2.next();
            if (c1.a(d1))
                linkedhashmap.put(d1, d1.i());
        } while (true);
        return new io.netty.channel.group.g(this, linkedhashmap, c);
    }

    public String a() {
        return b;
    }

    public boolean a(d d1) {
        boolean flag;
        ConcurrentSet concurrentset;
        if (d1 instanceof aq)
            concurrentset = d;
        else
            concurrentset = e;
        flag = concurrentset.add(d1);
        if (flag)
            d1.n().a(f);
        if (g && h)
            d1.i();
        return flag;
    }

    public boolean add(Object obj) {
        return a((d)obj);
    }

    public b b() {
        return a(io.netty.channel.group.d.a());
    }

    public void clear() {
        e.clear();
        d.clear();
    }

    public int compareTo(Object obj) {
        return a((a)obj);
    }

    public boolean contains(Object obj) {
        boolean flag;
        if (obj instanceof d) {
            d d1 = (d)obj;
            if (obj instanceof aq)
                flag = d.contains(d1);
            else
                flag = e.contains(d1);
        } else {
            flag = false;
        }
        return flag;
    }

    public boolean equals(Object obj) {
        boolean flag;
        if (this == obj)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public int hashCode() {
        return System.identityHashCode(this);
    }

    public boolean isEmpty() {
        boolean flag;
        if (e.isEmpty() && d.isEmpty())
            flag = true;
        else
            flag = false;
        return flag;
    }

    public Iterator iterator() {
        return new e(d.iterator(), e.iterator());
    }

    public boolean remove(Object obj) {
        boolean flag1 = false;
        if (obj instanceof d) goto _L2; else goto _L1
_L1:
        return flag1;
_L2:
        obj = (d)obj;
        boolean flag;
        if (obj instanceof aq)
            flag = d.remove(obj);
        else
            flag = e.remove(obj);
        if (flag) {
            ((d) (obj)).n().b(f);
            flag1 = true;
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    public int size() {
        return e.size() + d.size();
    }

    public Object[] toArray() {
        ArrayList arraylist = new ArrayList(size());
        arraylist.addAll(d);
        arraylist.addAll(e);
        return arraylist.toArray();
    }

    public Object[] toArray(Object aobj[]) {
        ArrayList arraylist = new ArrayList(size());
        arraylist.addAll(d);
        arraylist.addAll(e);
        return arraylist.toArray(aobj);
    }

    public String toString() {
        return (new StringBuilder()).append(m.a(this)).append("(name: ").append(a()).append(", size: ").append(size()).append(')').toString();
    }

}
