// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.channel.a;

import io.netty.channel.ChannelException;
import io.netty.channel.ao;
import io.netty.channel.as;
import io.netty.util.concurrent.ac;
import io.netty.util.concurrent.ag;
import io.netty.util.f;
import io.netty.util.internal.PlatformDependent;
import io.netty.util.internal.logging.b;
import io.netty.util.internal.logging.c;
import io.netty.util.internal.n;
import java.io.IOException;
import java.lang.reflect.Field;
import java.nio.channels.CancelledKeyException;
import java.nio.channels.SelectableChannel;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.spi.SelectorProvider;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.Queue;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;

// Referenced classes of package io.netty.channel.a:
//            g, b, f, e

public final class d extends as {

    private static final b g;
    private static final boolean h;
    private static final int i;
    Selector b;
    private final f j = new f() {

        final d a;

        public int a() {
            return a.k();
        }

             {
                a = d.this;
                super();
            }
    }
;
    private final Callable k = new Callable() {

        final d a;

        public Integer a() {
            return Integer.valueOf(d.a(a));
        }

        public Object call() {
            return a();
        }

             {
                a = d.this;
                super();
            }
    }
;
    private g l;
    private final SelectorProvider m;
    private final AtomicBoolean n = new AtomicBoolean();
    private final ao o;
    private volatile int p;
    private int q;
    private boolean r;

    d(e e, ThreadFactory threadfactory, SelectorProvider selectorprovider, ao ao1, ac ac) {
        super(e, threadfactory, false, a, ac);
        p = 50;
        if (selectorprovider == null)
            throw new NullPointerException("selectorProvider");
        if (ao1 == null) {
            throw new NullPointerException("selectStrategy");
        } else {
            m = selectorprovider;
            b = A();
            o = ao1;
            return;
        }
    }

    private Selector A() {
        Object obj;
        try {
            obj = m.openSelector();
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            throw new ChannelException("failed to open a new selector", ((Throwable) (obj)));
        }
        if (!h) goto _L2; else goto _L1
_L1:
        return ((Selector) (obj));
_L2:
        try {
            g g1 = JVM INSTR new #165 <Class g>;
            g1.g();
            Object obj1 = Class.forName("sun.nio.ch.SelectorImpl", false, PlatformDependent.p());
            if (((Class) (obj1)).isAssignableFrom(obj.getClass())) {
                Field field = ((Class) (obj1)).getDeclaredField("selectedKeys");
                obj1 = ((Class) (obj1)).getDeclaredField("publicSelectedKeys");
                field.setAccessible(true);
                ((Field) (obj1)).setAccessible(true);
                field.set(obj, g1);
                ((Field) (obj1)).set(obj, g1);
                l = g1;
                g.a("Instrumented an optimized java.util.Set into: {}", obj);
            }
        }
        catch (Throwable throwable) {
            l = null;
            g.a("Failed to instrument an optimized java.util.Set into: {}", obj, throwable);
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    private void B() {
        if (l != null)
            a(l.a());
        else
            a(b.selectedKeys());
    }

    private void C() {
        D();
        Set set = b.keys();
        Object obj = new ArrayList(set.size());
        for (Iterator iterator1 = set.iterator(); iterator1.hasNext();) {
            SelectionKey selectionkey = (SelectionKey)iterator1.next();
            Object obj1 = selectionkey.attachment();
            if (obj1 instanceof io.netty.channel.a.b) {
                ((Collection) (obj)).add((io.netty.channel.a.b)obj1);
            } else {
                selectionkey.cancel();
                a((io.netty.channel.a.f)obj1, selectionkey, null);
            }
        }

        for (Iterator iterator = ((Collection) (obj)).iterator(); iterator.hasNext(); ((io.netty.channel.a.b) (obj)).L().b(((io.netty.channel.a.b) (obj)).L().h()))
            obj = (io.netty.channel.a.b)iterator.next();

    }

    private void D() {
        r = false;
        b.selectNow();
_L1:
        return;
        Throwable throwable;
        throwable;
        g.b("Failed to update SelectionKeys.", throwable);
          goto _L1
    }

    static int a(d d1) {
        return d1.ag.b();
    }

    private static void a(io.netty.channel.a.f f1, SelectionKey selectionkey, Throwable throwable) {
        f1.a(selectionkey.channel(), throwable);
_L1:
        return;
        f1;
        g.b("Unexpected exception while running NioTask.channelUnregistered()", f1);
          goto _L1
    }

    private void a(SelectionKey selectionkey, io.netty.channel.a.b b1) {
        b.b b2 = b1.L();
        if (selectionkey.isValid()) goto _L2; else goto _L1
_L1:
        selectionkey = b1.N();
        if (selectionkey == this && selectionkey != null)
            b2.b(b2.h());
_L4:
        return;
_L2:
        int i1 = selectionkey.readyOps();
        if ((i1 & 0x11) == 0 && i1 != 0)
            break MISSING_BLOCK_LABEL_75;
        b2.k();
        if (!b1.F())
            continue; /* Loop/switch isn't completed */
        if ((i1 & 4) == 0)
            break MISSING_BLOCK_LABEL_90;
        b1.L().n();
        if ((i1 & 8) != 0)
            try {
                selectionkey.interestOps(selectionkey.interestOps() & -9);
                b2.m();
            }
            // Misplaced declaration of an exception variable
            catch (SelectionKey selectionkey) {
                b2.b(b2.h());
            }
        continue; /* Loop/switch isn't completed */
        selectionkey;
        if (true) goto _L4; else goto _L3
_L3:
    }

    private static void a(SelectionKey selectionkey, io.netty.channel.a.f f1) {
        f1.a(selectionkey.channel(), selectionkey);
        1;
        JVM INSTR tableswitch 0 1: default 36
    //                   0 37
    //                   1 50;
           goto _L1 _L2 _L3
_L1:
        return;
_L2:
        selectionkey.cancel();
        a(f1, selectionkey, null);
        continue; /* Loop/switch isn't completed */
_L3:
        if (!selectionkey.isValid())
            a(f1, selectionkey, null);
        if (true) goto _L1; else goto _L4
_L4:
        Object obj;
        obj;
        selectionkey.cancel();
        a(f1, selectionkey, ((Throwable) (obj)));
        switch (2) {
        case 0: // '\0'
            selectionkey.cancel();
            a(f1, selectionkey, null);
            break;

        case 1: // '\001'
            if (!selectionkey.isValid())
                a(f1, selectionkey, null);
            break;
        }
          goto _L5
        obj;
        0;
        JVM INSTR tableswitch 0 1: default 156
    //                   0 158
    //                   1 171;
           goto _L6 _L7 _L8
_L6:
        throw obj;
_L7:
        selectionkey.cancel();
        a(f1, selectionkey, null);
          goto _L9
_L8:
        if (!selectionkey.isValid())
            a(f1, selectionkey, null);
_L9:
        if (true) goto _L6; else goto _L5
_L5:
        if (true) goto _L1; else goto _L10
_L10:
    }

    private void a(Set set) {
        if (!set.isEmpty()) goto _L2; else goto _L1
_L1:
        return;
_L2:
        set = set.iterator();
_L5:
        SelectionKey selectionkey = (SelectionKey)set.next();
        Object obj = selectionkey.attachment();
        set.remove();
        if (obj instanceof io.netty.channel.a.b)
            a(selectionkey, (io.netty.channel.a.b)obj);
        else
            a(selectionkey, (io.netty.channel.a.f)obj);
        if (!set.hasNext()) goto _L1; else goto _L3
_L3:
        if (!r) goto _L5; else goto _L4
_L4:
        D();
        set = b.selectedKeys();
        if (set.isEmpty()) goto _L1; else goto _L6
_L6:
        set = set.iterator();
          goto _L5
    }

    private void a(SelectionKey aselectionkey[]) {
        int i1 = 0;
_L3:
        SelectionKey selectionkey = aselectionkey[i1];
        if (selectionkey == null)
            return;
        aselectionkey[i1] = null;
        Object obj = selectionkey.attachment();
        int j1;
        if (obj instanceof io.netty.channel.a.b)
            a(selectionkey, (io.netty.channel.a.b)obj);
        else
            a(selectionkey, (io.netty.channel.a.f)obj);
        j1 = i1;
        obj = aselectionkey;
        if (!r) goto _L2; else goto _L1
_L1:
        i1++;
        if (aselectionkey[i1] != null)
            break MISSING_BLOCK_LABEL_102;
        D();
        obj = l.a();
        j1 = -1;
_L2:
        i1 = j1 + 1;
        aselectionkey = ((SelectionKey []) (obj));
          goto _L3
        aselectionkey[i1] = null;
          goto _L1
    }

    private void b(boolean flag) {
        int j1;
        Object obj;
        Object obj1;
        j1 = 0;
        obj = b;
        obj1 = obj;
        long l2 = System.nanoTime();
        obj1 = obj;
        long l4 = c(l2);
        long l1 = l2;
_L10:
        long l3;
        l3 = l1;
        obj1 = obj;
        long l5 = (((l2 + l4) - l3) + 0x7a120L) / 0xf4240L;
        if (l5 > 0L) goto _L2; else goto _L1
_L1:
        int i1;
        i1 = j1;
        if (j1 != 0)
            break MISSING_BLOCK_LABEL_84;
        obj1 = obj;
        ((Selector) (obj)).selectNow();
        i1 = 1;
_L3:
        if (i1 <= 3)
            break MISSING_BLOCK_LABEL_119;
        if (g.b())
            g.b("Selector.select() returned prematurely {} times in a row for Selector {}.", Integer.valueOf(i1 - 1), obj);
_L14:
        return;
_L2:
        obj1 = obj;
        if (!s())
            break MISSING_BLOCK_LABEL_162;
        obj1 = obj;
        if (!n.compareAndSet(false, true))
            break MISSING_BLOCK_LABEL_162;
        obj1 = obj;
        ((Selector) (obj)).selectNow();
        i1 = 1;
          goto _L3
        obj1 = obj;
        int k1 = ((Selector) (obj)).select(l5);
        i1 = ++j1;
        if (k1 != 0) goto _L3; else goto _L4
_L4:
        i1 = j1;
        if (flag) goto _L3; else goto _L5
_L5:
        obj1 = obj;
        i1 = j1;
        if (n.get()) goto _L3; else goto _L6
_L6:
        obj1 = obj;
        i1 = j1;
        if (s()) goto _L3; else goto _L7
_L7:
        obj1 = obj;
        if (!q())
            break MISSING_BLOCK_LABEL_236;
        i1 = j1;
          goto _L3
        obj1 = obj;
        if (!Thread.interrupted())
            break MISSING_BLOCK_LABEL_281;
        obj1 = obj;
        if (!g.b())
            break MISSING_BLOCK_LABEL_276;
        obj1 = obj;
        g.a("Selector.select() returned prematurely because Thread.currentThread().interrupt() was called. Use NioEventLoop.shutdownGracefully() to shutdown the NioEventLoop.");
        i1 = 1;
          goto _L3
        obj1 = obj;
        l1 = System.nanoTime();
        obj1 = obj;
        if (l1 - TimeUnit.MILLISECONDS.toNanos(l5) < l3) goto _L9; else goto _L8
_L8:
        i1 = 1;
_L12:
        j1 = i1;
          goto _L10
_L9:
        i1 = j1;
        obj1 = obj;
        if (i <= 0) goto _L12; else goto _L11
_L11:
        i1 = j1;
        obj1 = obj;
        if (j1 < i) goto _L12; else goto _L13
_L13:
        obj1 = obj;
        g.d("Selector.select() returned prematurely {} times in a row; rebuilding Selector {}.", Integer.valueOf(j1), obj);
        obj1 = obj;
        g();
        obj1 = obj;
        obj = b;
        obj1 = obj;
        ((Selector) (obj)).selectNow();
        i1 = 1;
          goto _L3
        obj;
        Object obj2 = obj;
_L15:
        if (g.b())
            g.b((new StringBuilder()).append(java/nio/channels/CancelledKeyException.getSimpleName()).append(" raised by a Selector {} - JDK bug?").toString(), obj1, obj2);
          goto _L14
        obj2;
        obj1 = obj;
          goto _L15
    }

    protected Queue a(int i1) {
        return PlatformDependent.b(i1);
    }

    void a(SelectionKey selectionkey) {
        selectionkey.cancel();
        q = q + 1;
        if (q >= 256) {
            q = 0;
            r = true;
        }
    }

    protected void a(boolean flag) {
        if (!flag && n.compareAndSet(false, true))
            b.wakeup();
    }

    public int b() {
        int i1;
        if (f())
            i1 = super.b();
        else
            i1 = ((Integer)a(k).g().i()).intValue();
        return i1;
    }

    public void b(int i1) {
        if (i1 <= 0 || i1 > 100) {
            throw new IllegalArgumentException((new StringBuilder()).append("ioRatio: ").append(i1).append(" (expected: 0 < ioRatio <= 100)").toString());
        } else {
            p = i1;
            return;
        }
    }

    public void g() {
        if (f()) goto _L2; else goto _L1
_L1:
        execute(new Runnable() {

            final d a;

            public void run() {
                a.g();
            }

             {
                a = d.this;
                super();
            }
        }
);
_L4:
        return;
_L2:
        Selector selector = b;
        if (selector == null) goto _L4; else goto _L3
_L3:
        Object obj = A();
        int i1 = 0;
_L8:
        int j1 = i1;
        Iterator iterator = selector.keys().iterator();
_L6:
        j1 = i1;
        if (!iterator.hasNext())
            break MISSING_BLOCK_LABEL_269;
        j1 = i1;
        Object obj1 = (SelectionKey)iterator.next();
        j1 = i1;
        Object obj2 = ((SelectionKey) (obj1)).attachment();
        j1 = i1;
        if (!((SelectionKey) (obj1)).isValid()) goto _L6; else goto _L5
_L5:
        j1 = i1;
        if (((SelectionKey) (obj1)).channel().keyFor(((Selector) (obj))) != null) goto _L6; else goto _L7
_L7:
        j1 = i1;
        int k1 = ((SelectionKey) (obj1)).interestOps();
        j1 = i1;
        ((SelectionKey) (obj1)).cancel();
        j1 = i1;
        SelectionKey selectionkey = ((SelectionKey) (obj1)).channel().register(((Selector) (obj)), k1, obj2);
        j1 = i1;
        if (!(obj2 instanceof io.netty.channel.a.b))
            break MISSING_BLOCK_LABEL_167;
        j1 = i1;
        ((io.netty.channel.a.b)obj2).b = selectionkey;
        i1++;
          goto _L6
        obj;
        g.b("Failed to create a new Selector.", ((Throwable) (obj)));
          goto _L4
        Exception exception;
        exception;
        j1 = i1;
        g.b("Failed to re-register a Channel to the new Selector.", exception);
        j1 = i1;
        if (!(obj2 instanceof io.netty.channel.a.b))
            break MISSING_BLOCK_LABEL_252;
        j1 = i1;
        obj1 = (io.netty.channel.a.b)obj2;
        j1 = i1;
        ((io.netty.channel.a.b) (obj1)).L().b(((io.netty.channel.a.b) (obj1)).L().h());
          goto _L6
        j1 = i1;
        a((io.netty.channel.a.f)obj2, ((SelectionKey) (obj1)), exception);
          goto _L6
        b = ((Selector) (obj));
        try {
            selector.close();
        }
        catch (Throwable throwable) {
            if (g.c())
                g.b("Failed to close the old Selector.", throwable);
        }
        g.b((new StringBuilder()).append("Migrated ").append(i1).append(" channel(s) to the new Selector.").toString());
          goto _L4
        ConcurrentModificationException concurrentmodificationexception;
        concurrentmodificationexception;
        i1 = j1;
          goto _L8
    }

    protected void h() {
_L2:
        o.a(j, s());
        JVM INSTR tableswitch -2 -1: default 40
    //                   -2 0
    //                   -1 89;
           goto _L1 _L2 _L3
_L1:
        int i1;
        q = 0;
        r = false;
        i1 = p;
        if (i1 != 100) goto _L5; else goto _L4
_L4:
        B();
        t();
_L8:
        if (!v()) goto _L2; else goto _L6
_L6:
        C();
        if (!w()) goto _L2; else goto _L7
_L7:
        return;
_L3:
        b(n.getAndSet(false));
        if (n.get())
            b.wakeup();
          goto _L1
        Throwable throwable;
        throwable;
        g.b("Unexpected exception in the selector loop.", throwable);
        try {
            Thread.sleep(1000L);
        }
        catch (InterruptedException interruptedexception) { }
          goto _L2
_L5:
        long l1 = System.nanoTime();
        B();
        b(((System.nanoTime() - l1) * (long)(100 - i1)) / (long)i1);
          goto _L8
    }

    protected void i() {
        b.close();
_L1:
        return;
        IOException ioexception;
        ioexception;
        g.b("Failed to close a selector.", ioexception);
          goto _L1
    }

    protected Runnable j() {
        Runnable runnable = super.j();
        if (r)
            D();
        return runnable;
    }

    int k() {
        int i1 = b.selectNow();
        if (n.get())
            b.wakeup();
        return i1;
        Exception exception;
        exception;
        if (n.get())
            b.wakeup();
        throw exception;
    }

    static  {
        boolean flag;
        flag = false;
        g = c.a(io/netty/channel/a/d);
        h = io.netty.util.internal.n.a("io.netty.noKeySetOptimization", false);
        if (io.netty.util.internal.n.b("sun.nio.ch.bugLevel") == null)
            System.setProperty("sun.nio.ch.bugLevel", "");
_L2:
        int i1 = io.netty.util.internal.n.a("io.netty.selectorAutoRebuildThreshold", 512);
        if (i1 < 3)
            i1 = ((flag) ? 1 : 0);
        i = i1;
        if (g.b()) {
            g.b("-Dio.netty.noKeySetOptimization: {}", Boolean.valueOf(h));
            g.b("-Dio.netty.selectorAutoRebuildThreshold: {}", Integer.valueOf(i));
        }
        return;
        SecurityException securityexception;
        securityexception;
        if (g.b())
            g.b("Unable to get/set System Property: {}", "sun.nio.ch.bugLevel", securityexception);
        if (true) goto _L2; else goto _L1
_L1:
    }
}
