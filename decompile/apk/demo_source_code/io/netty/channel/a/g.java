// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.channel.a;

import java.nio.channels.SelectionKey;
import java.util.AbstractSet;
import java.util.Iterator;

final class g extends AbstractSet {

    private SelectionKey a[];
    private int b;
    private SelectionKey c[];
    private int d;
    private boolean e;

    g() {
        e = true;
        a = new SelectionKey[1024];
        c = (SelectionKey[])a.clone();
    }

    private void b() {
        SelectionKey aselectionkey[] = new SelectionKey[a.length << 1];
        System.arraycopy(a, 0, aselectionkey, 0, b);
        a = aselectionkey;
    }

    private void c() {
        SelectionKey aselectionkey[] = new SelectionKey[c.length << 1];
        System.arraycopy(c, 0, aselectionkey, 0, d);
        c = aselectionkey;
    }

    public boolean a(SelectionKey selectionkey) {
        if (selectionkey != null) goto _L2; else goto _L1
_L1:
        boolean flag = false;
_L4:
        return flag;
_L2:
        if (!e)
            break; /* Loop/switch isn't completed */
        int k = b;
        SelectionKey aselectionkey[] = a;
        int i = k + 1;
        aselectionkey[k] = selectionkey;
        b = i;
        if (i == a.length)
            b();
_L5:
        flag = true;
        if (true) goto _L4; else goto _L3
_L3:
        int j = d;
        SelectionKey aselectionkey1[] = c;
        int l = j + 1;
        aselectionkey1[j] = selectionkey;
        d = l;
        if (l == c.length)
            c();
          goto _L5
        if (true) goto _L4; else goto _L6
_L6:
    }

    SelectionKey[] a() {
        SelectionKey aselectionkey[];
        if (e) {
            e = false;
            a[b] = null;
            d = 0;
            aselectionkey = a;
        } else {
            e = true;
            c[d] = null;
            b = 0;
            aselectionkey = c;
        }
        return aselectionkey;
    }

    public boolean add(Object obj) {
        return a((SelectionKey)obj);
    }

    public boolean contains(Object obj) {
        return false;
    }

    public Iterator iterator() {
        throw new UnsupportedOperationException();
    }

    public boolean remove(Object obj) {
        return false;
    }

    public int size() {
        int i;
        if (e)
            i = b;
        else
            i = d;
        return i;
    }
}
