// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.channel;

import io.netty.buffer.i;
import io.netty.channel.a.a;
import io.netty.util.internal.PlatformDependent;
import java.util.*;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;

// Referenced classes of package io.netty.channel:
//            e, c, ad, aq, 
//            d, p, an, ak

public class z
    implements e {

    private static final an b;
    private static final ak c;
    private static final AtomicIntegerFieldUpdater d;
    protected final d a;
    private volatile i e;
    private volatile an f;
    private volatile ak g;
    private volatile int h;
    private volatile int i;
    private volatile int j;
    private volatile int k;
    private volatile boolean l;
    private volatile int m;
    private volatile int n;
    private volatile boolean o;

    public z(d d1) {
        e = i.a;
        f = b;
        g = c;
        h = 30000;
        j = 16;
        k = 1;
        l = true;
        m = 0x10000;
        n = 32768;
        o = true;
        if (d1 == null)
            throw new NullPointerException("channel");
        a = d1;
        if ((d1 instanceof aq) || (d1 instanceof a))
            i = 16;
        else
            i = 1;
    }

    private e c(boolean flag) {
        o = flag;
        return this;
    }

    private boolean l() {
        return o;
    }

    public int a() {
        return h;
    }

    public e a(int i1) {
        if (i1 < 0) {
            throw new IllegalArgumentException(String.format("connectTimeoutMillis: %d (expected: >= 0)", new Object[] {
                Integer.valueOf(i1)
            }));
        } else {
            h = i1;
            return this;
        }
    }

    public e a(i i1) {
        if (i1 == null) {
            throw new NullPointerException("allocator");
        } else {
            e = i1;
            return this;
        }
    }

    public e a(ak ak1) {
        if (ak1 == null) {
            throw new NullPointerException("estimator");
        } else {
            g = ak1;
            return this;
        }
    }

    public e a(an an1) {
        if (an1 == null) {
            throw new NullPointerException("allocator");
        } else {
            f = an1;
            return this;
        }
    }

    public e a(boolean flag) {
        int i1;
        boolean flag1 = true;
        AtomicIntegerFieldUpdater atomicintegerfieldupdater = d;
        if (flag)
            i1 = 1;
        else
            i1 = 0;
        if (atomicintegerfieldupdater.getAndSet(this, i1) == 1)
            i1 = ((flag1) ? 1 : 0);
        else
            i1 = 0;
        if (!flag || i1 != 0) goto _L2; else goto _L1
_L1:
        a.k();
_L4:
        return this;
_L2:
        if (!flag && i1 != 0)
            k();
        if (true) goto _L4; else goto _L3
_L3:
    }

    public Object a(p p1) {
        if (p1 == null)
            throw new NullPointerException("option");
        if (p1 == p.d)
            p1 = Integer.valueOf(a());
        else
        if (p1 == p.e)
            p1 = Integer.valueOf(b());
        else
        if (p1 == p.f)
            p1 = Integer.valueOf(c());
        else
        if (p1 == io.netty.channel.p.a)
            p1 = d();
        else
        if (p1 == p.b)
            p1 = e();
        else
        if (p1 == p.j)
            p1 = Boolean.valueOf(f());
        else
        if (p1 == p.k)
            p1 = Boolean.valueOf(g());
        else
        if (p1 == p.g)
            p1 = Integer.valueOf(h());
        else
        if (p1 == p.h)
            p1 = Integer.valueOf(i());
        else
        if (p1 == p.c)
            p1 = j();
        else
        if (p1 == p.C)
            p1 = Boolean.valueOf(l());
        else
            p1 = null;
        return p1;
    }

    public boolean a(p p1, Object obj) {
        boolean flag;
        b(p1, obj);
        if (p1 == p.d)
            a(((Integer)obj).intValue());
        else
        if (p1 == p.e)
            b(((Integer)obj).intValue());
        else
        if (p1 == p.f)
            c(((Integer)obj).intValue());
        else
        if (p1 == io.netty.channel.p.a)
            a((i)obj);
        else
        if (p1 == p.b)
            a((an)obj);
        else
        if (p1 == p.j)
            a(((Boolean)obj).booleanValue());
        else
        if (p1 == p.k)
            b(((Boolean)obj).booleanValue());
        else
        if (p1 == p.g)
            d(((Integer)obj).intValue());
        else
        if (p1 == p.h)
            e(((Integer)obj).intValue());
        else
        if (p1 == p.c) {
            a((ak)obj);
        } else {
label0:
            {
                if (p1 != p.C)
                    break label0;
                c(((Boolean)obj).booleanValue());
            }
        }
        flag = true;
_L2:
        return flag;
        flag = false;
        if (true) goto _L2; else goto _L1
_L1:
    }

    public boolean a(Map map) {
        if (map == null)
            throw new NullPointerException("options");
        Iterator iterator = map.entrySet().iterator();
        boolean flag = true;
        do {
            if (!iterator.hasNext())
                break;
            map = (java.util.Map.Entry)iterator.next();
            if (!a((p)map.getKey(), map.getValue()))
                flag = false;
        } while (true);
        return flag;
    }

    public int b() {
        return i;
    }

    public e b(int i1) {
        if (i1 <= 0) {
            throw new IllegalArgumentException((new StringBuilder()).append("maxMessagesPerRead: ").append(i1).append(" (expected: > 0)").toString());
        } else {
            i = i1;
            return this;
        }
    }

    public e b(boolean flag) {
        l = flag;
        return this;
    }

    protected void b(p p1, Object obj) {
        if (p1 == null) {
            throw new NullPointerException("option");
        } else {
            p1.a(obj);
            return;
        }
    }

    public int c() {
        return j;
    }

    public e c(int i1) {
        if (i1 <= 0) {
            throw new IllegalArgumentException("writeSpinCount must be a positive integer.");
        } else {
            j = i1;
            return this;
        }
    }

    public i d() {
        return e;
    }

    public e d(int i1) {
        if (i1 < i())
            throw new IllegalArgumentException((new StringBuilder()).append("writeBufferHighWaterMark cannot be less than writeBufferLowWaterMark (").append(i()).append("): ").append(i1).toString());
        if (i1 < 0) {
            throw new IllegalArgumentException("writeBufferHighWaterMark must be >= 0");
        } else {
            m = i1;
            return this;
        }
    }

    public an e() {
        return f;
    }

    public e e(int i1) {
        if (i1 > h())
            throw new IllegalArgumentException((new StringBuilder()).append("writeBufferLowWaterMark cannot be greater than writeBufferHighWaterMark (").append(h()).append("): ").append(i1).toString());
        if (i1 < 0) {
            throw new IllegalArgumentException("writeBufferLowWaterMark must be >= 0");
        } else {
            n = i1;
            return this;
        }
    }

    public boolean f() {
        boolean flag = true;
        if (k != 1)
            flag = false;
        return flag;
    }

    public boolean g() {
        return l;
    }

    public int h() {
        return m;
    }

    public int i() {
        return n;
    }

    public ak j() {
        return g;
    }

    protected void k() {
    }

    static  {
        b = io.netty.channel.c.a;
        c = io.netty.channel.ad.a;
        AtomicIntegerFieldUpdater atomicintegerfieldupdater1 = PlatformDependent.b(io/netty/channel/z, "k");
        AtomicIntegerFieldUpdater atomicintegerfieldupdater = atomicintegerfieldupdater1;
        if (atomicintegerfieldupdater1 == null)
            atomicintegerfieldupdater = AtomicIntegerFieldUpdater.newUpdater(io/netty/channel/z, "k");
        d = atomicintegerfieldupdater;
    }
}
