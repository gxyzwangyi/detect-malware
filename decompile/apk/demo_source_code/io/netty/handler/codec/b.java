// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.codec;

import io.netty.util.Recycler;
import io.netty.util.internal.k;
import java.util.AbstractList;
import java.util.RandomAccess;

final class b extends AbstractList
    implements RandomAccess {

    private static final Recycler a = new Recycler() {

        protected b a(io.netty.util.Recycler.b b1) {
            return new b(b1);
        }

        protected Object b(io.netty.util.Recycler.b b1) {
            return a(b1);
        }

    }
;
    private final io.netty.util.Recycler.b b;
    private int c;
    private Object d[];
    private boolean e;

    private b(io.netty.util.Recycler.b b1) {
        d = new Object[16];
        b = b1;
    }


    static b a() {
        return (b)a.a();
    }

    private void a(int i, Object obj) {
        d[i] = obj;
        e = true;
    }

    private void b(int i) {
        if (i >= c)
            throw new IndexOutOfBoundsException();
        else
            return;
    }

    private void d() {
        int i = d.length << 1;
        if (i < 0) {
            throw new OutOfMemoryError();
        } else {
            Object aobj[] = new Object[i];
            System.arraycopy(((Object) (d)), 0, ((Object) (aobj)), 0, d.length);
            d = aobj;
            return;
        }
    }

    Object a(int i) {
        return d[i];
    }

    public void add(int i, Object obj) {
        k.a(obj, "element");
        b(i);
        if (c == d.length)
            d();
        if (i != c - 1)
            System.arraycopy(((Object) (d)), i, ((Object) (d)), i + 1, c - i);
        a(i, obj);
        c = c + 1;
    }

    public boolean add(Object obj) {
        k.a(obj, "element");
        try {
            a(c, obj);
        }
        catch (IndexOutOfBoundsException indexoutofboundsexception) {
            d();
            a(c, obj);
        }
        c = c + 1;
        return true;
    }

    boolean b() {
        return e;
    }

    void c() {
        for (int i = 0; i < c; i++)
            d[i] = null;

        clear();
        e = false;
        a.a(this, b);
    }

    public void clear() {
        c = 0;
    }

    public Object get(int i) {
        b(i);
        return d[i];
    }

    public Object remove(int i) {
        b(i);
        Object obj = d[i];
        int j = c - i - 1;
        if (j > 0)
            System.arraycopy(((Object) (d)), i + 1, ((Object) (d)), i, j);
        Object aobj[] = d;
        i = c - 1;
        c = i;
        aobj[i] = null;
        return obj;
    }

    public Object set(int i, Object obj) {
        k.a(obj, "element");
        b(i);
        Object obj1 = d[i];
        a(i, obj);
        return obj1;
    }

    public int size() {
        return c;
    }

}
