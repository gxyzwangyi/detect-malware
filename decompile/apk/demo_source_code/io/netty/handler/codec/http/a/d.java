// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.codec.http.a;

import io.netty.util.internal.e;
import java.util.BitSet;

final class d {

    private static final BitSet a = b();
    private static final BitSet b = c();
    private static final BitSet c = d();

    static int a(CharSequence charsequence) {
        return a(charsequence, a);
    }

    static int a(CharSequence charsequence, BitSet bitset) {
        int i = 0;
_L3:
        if (i >= charsequence.length())
            break MISSING_BLOCK_LABEL_34;
        if (bitset.get(charsequence.charAt(i))) goto _L2; else goto _L1
_L1:
        return i;
_L2:
        i++;
          goto _L3
        i = -1;
          goto _L1
    }

    static String a(String s, String s1) {
        Object obj = null;
        if (s1 != null) goto _L2; else goto _L1
_L1:
        s1 = obj;
_L4:
        return s1;
_L2:
        String s2 = s1.trim();
        s1 = obj;
        if (!s2.isEmpty()) {
            int i = a(((CharSequence) (s2)), c);
            if (i != -1)
                throw new IllegalArgumentException((new StringBuilder()).append(s).append(" contains the prohibited characters: ").append(s2.charAt(i)).toString());
            s1 = s2;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    static StringBuilder a() {
        return e.b().e();
    }

    static int b(CharSequence charsequence) {
        return a(charsequence, b);
    }

    private static BitSet b() {
        BitSet bitset = new BitSet();
        for (int i = 32; i < 127; i++)
            bitset.set(i);

        int ai[] = new int[19];
        int[] _tmp = ai;
        ai[0] = 40;
        ai[1] = 41;
        ai[2] = 60;
        ai[3] = 62;
        ai[4] = 64;
        ai[5] = 44;
        ai[6] = 59;
        ai[7] = 58;
        ai[8] = 92;
        ai[9] = 34;
        ai[10] = 47;
        ai[11] = 91;
        ai[12] = 93;
        ai[13] = 63;
        ai[14] = 61;
        ai[15] = 123;
        ai[16] = 125;
        ai[17] = 32;
        ai[18] = 9;
        int k = ai.length;
        for (int j = 0; j < k; j++)
            bitset.set(ai[j], false);

        return bitset;
    }

    static CharSequence c(CharSequence charsequence) {
        int i = charsequence.length();
        if (i > 0 && charsequence.charAt(0) == '"')
            if (i >= 2 && charsequence.charAt(i - 1) == '"') {
                if (i == 2)
                    charsequence = "";
                else
                    charsequence = charsequence.subSequence(1, i - 1);
            } else {
                charsequence = null;
            }
        return charsequence;
    }

    private static BitSet c() {
        BitSet bitset = new BitSet();
        bitset.set(33);
        for (int i = 35; i <= 43; i++)
            bitset.set(i);

        for (int j = 45; j <= 58; j++)
            bitset.set(j);

        for (int k = 60; k <= 91; k++)
            bitset.set(k);

        for (int l = 93; l <= 126; l++)
            bitset.set(l);

        return bitset;
    }

    private static BitSet d() {
        BitSet bitset = new BitSet();
        for (int i = 32; i < 127; i++)
            bitset.set(i);

        bitset.set(59, false);
        return bitset;
    }

}
