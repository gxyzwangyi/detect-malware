// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.codec.http;

import io.netty.buffer.h;
import io.netty.util.e;

// Referenced classes of package io.netty.handler.codec.http:
//            s

public class af
    implements Comparable {

    public static final af A = new af(408, "Request Timeout", true);
    public static final af B = new af(409, "Conflict", true);
    public static final af C = new af(410, "Gone", true);
    public static final af D = new af(411, "Length Required", true);
    public static final af E = new af(412, "Precondition Failed", true);
    public static final af F = new af(413, "Request Entity Too Large", true);
    public static final af G = new af(414, "Request-URI Too Long", true);
    public static final af H = new af(415, "Unsupported Media Type", true);
    public static final af I = new af(416, "Requested Range Not Satisfiable", true);
    public static final af J = new af(417, "Expectation Failed", true);
    public static final af K = new af(422, "Unprocessable Entity", true);
    public static final af L = new af(423, "Locked", true);
    public static final af M = new af(424, "Failed Dependency", true);
    public static final af N = new af(425, "Unordered Collection", true);
    public static final af O = new af(426, "Upgrade Required", true);
    public static final af P = new af(428, "Precondition Required", true);
    public static final af Q = new af(429, "Too Many Requests", true);
    public static final af R = new af(431, "Request Header Fields Too Large", true);
    public static final af S = new af(500, "Internal Server Error", true);
    public static final af T = new af(501, "Not Implemented", true);
    public static final af U = new af(502, "Bad Gateway", true);
    public static final af V = new af(503, "Service Unavailable", true);
    public static final af W = new af(504, "Gateway Timeout", true);
    public static final af X = new af(505, "HTTP Version Not Supported", true);
    public static final af Y = new af(506, "Variant Also Negotiates", true);
    public static final af Z = new af(507, "Insufficient Storage", true);
    public static final af a = new af(100, "Continue", true);
    public static final af aa = new af(510, "Not Extended", true);
    public static final af ab = new af(511, "Network Authentication Required", true);
    public static final af b = new af(101, "Switching Protocols", true);
    public static final af c = new af(102, "Processing", true);
    public static final af d = new af(200, "OK", true);
    public static final af e = new af(201, "Created", true);
    public static final af f = new af(202, "Accepted", true);
    public static final af g = new af(203, "Non-Authoritative Information", true);
    public static final af h = new af(204, "No Content", true);
    public static final af i = new af(205, "Reset Content", true);
    public static final af j = new af(206, "Partial Content", true);
    public static final af k = new af(207, "Multi-Status", true);
    public static final af l = new af(300, "Multiple Choices", true);
    public static final af m = new af(301, "Moved Permanently", true);
    public static final af n = new af(302, "Found", true);
    public static final af o = new af(303, "See Other", true);
    public static final af p = new af(304, "Not Modified", true);
    public static final af q = new af(305, "Use Proxy", true);
    public static final af r = new af(307, "Temporary Redirect", true);
    public static final af s = new af(400, "Bad Request", true);
    public static final af t = new af(401, "Unauthorized", true);
    public static final af u = new af(402, "Payment Required", true);
    public static final af v = new af(403, "Forbidden", true);
    public static final af w = new af(404, "Not Found", true);
    public static final af x = new af(405, "Method Not Allowed", true);
    public static final af y = new af(406, "Not Acceptable", true);
    public static final af z = new af(407, "Proxy Authentication Required", true);
    private final int ac;
    private final String ad;
    private final byte ae[];

    public af(int i1, String s1) {
        this(i1, s1, false);
    }

    private af(int i1, String s1, boolean flag) {
        if (i1 < 0)
            throw new IllegalArgumentException((new StringBuilder()).append("code: ").append(i1).append(" (expected: 0+)").toString());
        if (s1 == null)
            throw new NullPointerException("reasonPhrase");
        int j1 = 0;
        do {
            if (j1 >= s1.length())
                break;
            switch (s1.charAt(j1)) {
            case 11: // '\013'
            case 12: // '\f'
            default:
                j1++;
                break;

            case 10: // '\n'
            case 13: // '\r'
                throw new IllegalArgumentException((new StringBuilder()).append("reasonPhrase contains one of the following prohibited characters: \\r\\n: ").append(s1).toString());
            }
        } while (true);
        ac = i1;
        ad = s1;
        if (flag)
            ae = (new StringBuilder()).append(i1).append(" ").append(s1).toString().getBytes(e.f);
        else
            ae = null;
    }

    public static af a(int i1) {
        i1;
        JVM INSTR lookupswitch 54: default 444
    //                   100: 494
    //                   101: 501
    //                   102: 508
    //                   200: 515
    //                   201: 522
    //                   202: 529
    //                   203: 536
    //                   204: 543
    //                   205: 550
    //                   206: 557
    //                   207: 564
    //                   300: 571
    //                   301: 578
    //                   302: 585
    //                   303: 592
    //                   304: 599
    //                   305: 606
    //                   307: 613
    //                   400: 620
    //                   401: 627
    //                   402: 634
    //                   403: 641
    //                   404: 648
    //                   405: 655
    //                   406: 662
    //                   407: 669
    //                   408: 676
    //                   409: 683
    //                   410: 690
    //                   411: 697
    //                   412: 704
    //                   413: 711
    //                   414: 718
    //                   415: 725
    //                   416: 732
    //                   417: 739
    //                   422: 746
    //                   423: 753
    //                   424: 760
    //                   425: 767
    //                   426: 774
    //                   428: 781
    //                   429: 788
    //                   431: 795
    //                   500: 802
    //                   501: 809
    //                   502: 816
    //                   503: 823
    //                   504: 830
    //                   505: 837
    //                   506: 844
    //                   507: 851
    //                   510: 858
    //                   511: 865;
           goto _L1 _L2 _L3 _L4 _L5 _L6 _L7 _L8 _L9 _L10 _L11 _L12 _L13 _L14 _L15 _L16 _L17 _L18 _L19 _L20 _L21 _L22 _L23 _L24 _L25 _L26 _L27 _L28 _L29 _L30 _L31 _L32 _L33 _L34 _L35 _L36 _L37 _L38 _L39 _L40 _L41 _L42 _L43 _L44 _L45 _L46 _L47 _L48 _L49 _L50 _L51 _L52 _L53 _L54 _L55
_L1:
        if (i1 >= 100) goto _L57; else goto _L56
_L56:
        Object obj = "Unknown Status";
_L60:
        obj = new af(i1, (new StringBuilder()).append(((String) (obj))).append(" (").append(i1).append(')').toString());
_L58:
        return ((af) (obj));
_L2:
        obj = a;
        continue; /* Loop/switch isn't completed */
_L3:
        obj = b;
        continue; /* Loop/switch isn't completed */
_L4:
        obj = c;
        continue; /* Loop/switch isn't completed */
_L5:
        obj = d;
        continue; /* Loop/switch isn't completed */
_L6:
        obj = e;
        continue; /* Loop/switch isn't completed */
_L7:
        obj = f;
        continue; /* Loop/switch isn't completed */
_L8:
        obj = g;
        continue; /* Loop/switch isn't completed */
_L9:
        obj = h;
        continue; /* Loop/switch isn't completed */
_L10:
        obj = i;
        continue; /* Loop/switch isn't completed */
_L11:
        obj = j;
        continue; /* Loop/switch isn't completed */
_L12:
        obj = k;
        continue; /* Loop/switch isn't completed */
_L13:
        obj = l;
        continue; /* Loop/switch isn't completed */
_L14:
        obj = m;
        continue; /* Loop/switch isn't completed */
_L15:
        obj = n;
        continue; /* Loop/switch isn't completed */
_L16:
        obj = o;
        continue; /* Loop/switch isn't completed */
_L17:
        obj = p;
        continue; /* Loop/switch isn't completed */
_L18:
        obj = q;
        continue; /* Loop/switch isn't completed */
_L19:
        obj = r;
        continue; /* Loop/switch isn't completed */
_L20:
        obj = s;
        continue; /* Loop/switch isn't completed */
_L21:
        obj = t;
        continue; /* Loop/switch isn't completed */
_L22:
        obj = u;
        continue; /* Loop/switch isn't completed */
_L23:
        obj = v;
        continue; /* Loop/switch isn't completed */
_L24:
        obj = w;
        continue; /* Loop/switch isn't completed */
_L25:
        obj = x;
        continue; /* Loop/switch isn't completed */
_L26:
        obj = y;
        continue; /* Loop/switch isn't completed */
_L27:
        obj = z;
        continue; /* Loop/switch isn't completed */
_L28:
        obj = A;
        continue; /* Loop/switch isn't completed */
_L29:
        obj = B;
        continue; /* Loop/switch isn't completed */
_L30:
        obj = C;
        continue; /* Loop/switch isn't completed */
_L31:
        obj = D;
        continue; /* Loop/switch isn't completed */
_L32:
        obj = E;
        continue; /* Loop/switch isn't completed */
_L33:
        obj = F;
        continue; /* Loop/switch isn't completed */
_L34:
        obj = G;
        continue; /* Loop/switch isn't completed */
_L35:
        obj = H;
        continue; /* Loop/switch isn't completed */
_L36:
        obj = I;
        continue; /* Loop/switch isn't completed */
_L37:
        obj = J;
        continue; /* Loop/switch isn't completed */
_L38:
        obj = K;
        continue; /* Loop/switch isn't completed */
_L39:
        obj = L;
        continue; /* Loop/switch isn't completed */
_L40:
        obj = M;
        continue; /* Loop/switch isn't completed */
_L41:
        obj = N;
        continue; /* Loop/switch isn't completed */
_L42:
        obj = O;
        continue; /* Loop/switch isn't completed */
_L43:
        obj = P;
        continue; /* Loop/switch isn't completed */
_L44:
        obj = Q;
        continue; /* Loop/switch isn't completed */
_L45:
        obj = R;
        continue; /* Loop/switch isn't completed */
_L46:
        obj = S;
        continue; /* Loop/switch isn't completed */
_L47:
        obj = T;
        continue; /* Loop/switch isn't completed */
_L48:
        obj = U;
        continue; /* Loop/switch isn't completed */
_L49:
        obj = V;
        continue; /* Loop/switch isn't completed */
_L50:
        obj = W;
        continue; /* Loop/switch isn't completed */
_L51:
        obj = X;
        continue; /* Loop/switch isn't completed */
_L52:
        obj = Y;
        continue; /* Loop/switch isn't completed */
_L53:
        obj = Z;
        continue; /* Loop/switch isn't completed */
_L54:
        obj = aa;
        continue; /* Loop/switch isn't completed */
_L55:
        obj = ab;
        if (true) goto _L58; else goto _L57
_L57:
        if (i1 < 200)
            obj = "Informational";
        else
        if (i1 < 300)
            obj = "Successful";
        else
        if (i1 < 400)
            obj = "Redirection";
        else
        if (i1 < 500)
            obj = "Client Error";
        else
        if (i1 < 600)
            obj = "Server Error";
        else
            obj = "Unknown Status";
        if (true) goto _L60; else goto _L59
_L59:
    }

    public int a() {
        return ac;
    }

    public int a(af af1) {
        return a() - af1.a();
    }

    void a(h h1) {
        if (ae == null) {
            io.netty.handler.codec.http.s.b(String.valueOf(a()), h1);
            h1.t(32);
            io.netty.handler.codec.http.s.b(String.valueOf(b()), h1);
        } else {
            h1.b(ae);
        }
    }

    public String b() {
        return ad;
    }

    public int compareTo(Object obj) {
        return a((af)obj);
    }

    public boolean equals(Object obj) {
        boolean flag;
        flag = false;
        break MISSING_BLOCK_LABEL_2;
        if ((obj instanceof af) && a() == ((af)obj).a())
            flag = true;
        return flag;
    }

    public int hashCode() {
        return a();
    }

    public String toString() {
        return (new StringBuilder(ad.length() + 5)).append(ac).append(' ').append(ad).toString();
    }

}
