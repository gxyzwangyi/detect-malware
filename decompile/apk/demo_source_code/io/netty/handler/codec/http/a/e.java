// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.codec.http.a;

import io.netty.util.internal.k;

// Referenced classes of package io.netty.handler.codec.http.a:
//            b, d

public class e
    implements b {

    private final String a;
    private String b;
    private boolean c;
    private String d;
    private String e;
    private long f;
    private boolean g;
    private boolean h;

    public e(String s, String s1) {
        f = 0x0L;
        s = ((String)k.a(s, "name")).trim();
        if (s.isEmpty()) {
            throw new IllegalArgumentException("empty name");
        } else {
            a = s;
            a(s1);
            return;
        }
    }

    public int a(b b1) {
        int i = a().compareToIgnoreCase(b1.a());
        if (i == 0) goto _L2; else goto _L1
_L1:
        return i;
_L2:
        if (d() == null) {
            if (b1.d() != null) {
                i = -1;
                continue; /* Loop/switch isn't completed */
            }
        } else {
            if (b1.d() == null) {
                i = 1;
                continue; /* Loop/switch isn't completed */
            }
            int j = d().compareTo(b1.d());
            i = j;
            if (j != 0)
                continue; /* Loop/switch isn't completed */
        }
        if (c() == null) {
            if (b1.c() != null)
                i = -1;
            else
                i = 0;
        } else
        if (b1.c() == null)
            i = 1;
        else
            i = c().compareToIgnoreCase(b1.c());
        if (true) goto _L1; else goto _L3
_L3:
    }

    public String a() {
        return a;
    }

    public void a(long l) {
        f = l;
    }

    public void a(String s) {
        b = (String)k.a(s, "value");
    }

    public void a(boolean flag) {
        c = flag;
    }

    public String b() {
        return b;
    }

    public void b(String s) {
        d = io.netty.handler.codec.http.a.d.a("domain", s);
    }

    public void b(boolean flag) {
        g = flag;
    }

    public String c() {
        return d;
    }

    public void c(String s) {
        e = io.netty.handler.codec.http.a.d.a("path", s);
    }

    public void c(boolean flag) {
        h = flag;
    }

    public int compareTo(Object obj) {
        return a((b)obj);
    }

    public String d() {
        return e;
    }

    public long e() {
        return f;
    }

    public boolean equals(Object obj) {
        boolean flag = true;
        if (this != obj) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        if (!(obj instanceof b)) {
            flag = false;
            continue; /* Loop/switch isn't completed */
        }
        obj = (b)obj;
        if (!a().equalsIgnoreCase(((b) (obj)).a())) {
            flag = false;
            continue; /* Loop/switch isn't completed */
        }
        if (d() == null) {
            if (((b) (obj)).d() != null) {
                flag = false;
                continue; /* Loop/switch isn't completed */
            }
        } else {
            if (((b) (obj)).d() == null) {
                flag = false;
                continue; /* Loop/switch isn't completed */
            }
            if (!d().equals(((b) (obj)).d())) {
                flag = false;
                continue; /* Loop/switch isn't completed */
            }
        }
        if (c() == null) {
            if (((b) (obj)).c() != null)
                flag = false;
        } else
        if (((b) (obj)).c() == null)
            flag = false;
        else
            flag = c().equalsIgnoreCase(((b) (obj)).c());
        if (true) goto _L1; else goto _L3
_L3:
    }

    public boolean f() {
        return g;
    }

    public boolean g() {
        return h;
    }

    public int hashCode() {
        return a().hashCode();
    }

    public String toString() {
        StringBuilder stringbuilder = io.netty.handler.codec.http.a.d.a().append(a()).append('=').append(b());
        if (c() != null)
            stringbuilder.append(", domain=").append(c());
        if (d() != null)
            stringbuilder.append(", path=").append(d());
        if (e() >= 0L)
            stringbuilder.append(", maxAge=").append(e()).append('s');
        if (f())
            stringbuilder.append(", secure");
        if (g())
            stringbuilder.append(", HTTPOnly");
        return stringbuilder.toString();
    }
}
