// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.codec.http;

import io.netty.buffer.h;
import io.netty.util.e;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

// Referenced classes of package io.netty.handler.codec.http:
//            s

public class ag
    implements Comparable {

    public static final ag a = new ag("HTTP", 1, 0, false, true);
    public static final ag b = new ag("HTTP", 1, 1, true, true);
    private static final Pattern c = Pattern.compile("(\\S+)/(\\d+)\\.(\\d+)");
    private final String d;
    private final int e;
    private final int f;
    private final String g;
    private final boolean h;
    private final byte i[];

    private ag(String s1, int j, int k, boolean flag, boolean flag1) {
        if (s1 == null)
            throw new NullPointerException("protocolName");
        s1 = s1.trim().toUpperCase();
        if (s1.isEmpty())
            throw new IllegalArgumentException("empty protocolName");
        for (int l = 0; l < s1.length(); l++)
            if (Character.isISOControl(s1.charAt(l)) || Character.isWhitespace(s1.charAt(l)))
                throw new IllegalArgumentException("invalid character in protocolName");

        if (j < 0)
            throw new IllegalArgumentException("negative majorVersion");
        if (k < 0)
            throw new IllegalArgumentException("negative minorVersion");
        d = s1;
        e = j;
        f = k;
        g = (new StringBuilder()).append(s1).append('/').append(j).append('.').append(k).toString();
        h = flag;
        if (flag1)
            i = g.getBytes(e.f);
        else
            i = null;
    }

    public ag(String s1, boolean flag) {
        if (s1 == null)
            throw new NullPointerException("text");
        s1 = s1.trim().toUpperCase();
        if (s1.isEmpty())
            throw new IllegalArgumentException("empty text");
        Matcher matcher = c.matcher(s1);
        if (!matcher.matches()) {
            throw new IllegalArgumentException((new StringBuilder()).append("invalid version format: ").append(s1).toString());
        } else {
            d = matcher.group(1);
            e = Integer.parseInt(matcher.group(2));
            f = Integer.parseInt(matcher.group(3));
            g = (new StringBuilder()).append(d).append('/').append(e).append('.').append(f).toString();
            h = flag;
            i = null;
            return;
        }
    }

    public static ag a(String s1) {
        if (s1 == null)
            throw new NullPointerException("text");
        String s2 = s1.trim();
        if (s2.isEmpty())
            throw new IllegalArgumentException("text is empty");
        ag ag1 = b(s2);
        s1 = ag1;
        if (ag1 == null) {
            s2 = s2.toUpperCase();
            ag ag2 = b(s2);
            s1 = ag2;
            if (ag2 == null)
                s1 = new ag(s2, true);
        }
        return s1;
    }

    private static ag b(String s1) {
        if ("HTTP/1.1".equals(s1))
            s1 = b;
        else
        if ("HTTP/1.0".equals(s1))
            s1 = a;
        else
            s1 = null;
        return s1;
    }

    public int a(ag ag1) {
        int j = a().compareTo(ag1.a());
        if (j == 0) goto _L2; else goto _L1
_L1:
        return j;
_L2:
        int k = b() - ag1.b();
        j = k;
        if (k == 0)
            j = c() - ag1.c();
        if (true) goto _L1; else goto _L3
_L3:
    }

    public String a() {
        return d;
    }

    void a(h h1) {
        if (i == null)
            s.b(g, h1);
        else
            h1.b(i);
    }

    public int b() {
        return e;
    }

    public int c() {
        return f;
    }

    public int compareTo(Object obj) {
        return a((ag)obj);
    }

    public String d() {
        return g;
    }

    public boolean e() {
        return h;
    }

    public boolean equals(Object obj) {
        boolean flag1 = false;
        if (obj instanceof ag) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        obj = (ag)obj;
        flag = flag1;
        if (c() == ((ag) (obj)).c()) {
            flag = flag1;
            if (b() == ((ag) (obj)).b()) {
                flag = flag1;
                if (a().equals(((ag) (obj)).a()))
                    flag = true;
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public int hashCode() {
        return (a().hashCode() * 31 + b()) * 31 + c();
    }

    public String toString() {
        return d();
    }

}
