// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.codec.http;

import io.netty.buffer.h;
import io.netty.util.e;
import java.util.HashMap;
import java.util.Map;

// Referenced classes of package io.netty.handler.codec.http:
//            s

public class v
    implements Comparable {

    public static final v a;
    public static final v b;
    public static final v c;
    public static final v d;
    public static final v e;
    public static final v f;
    public static final v g;
    public static final v h;
    public static final v i;
    private static final Map j;
    private final String k;
    private final byte l[];

    public v(String s1) {
        this(s1, false);
    }

    private v(String s1, boolean flag) {
        if (s1 == null)
            throw new NullPointerException("name");
        s1 = s1.trim();
        if (s1.isEmpty())
            throw new IllegalArgumentException("empty name");
        for (int i1 = 0; i1 < s1.length(); i1++)
            if (Character.isISOControl(s1.charAt(i1)) || Character.isWhitespace(s1.charAt(i1)))
                throw new IllegalArgumentException("invalid character in name");

        k = s1;
        if (flag)
            l = s1.getBytes(e.f);
        else
            l = null;
    }

    public static v a(String s1) {
        if (s1 == null)
            throw new NullPointerException("name");
        String s2 = s1.trim();
        if (s2.isEmpty())
            throw new IllegalArgumentException("empty name");
        s1 = (v)j.get(s2);
        if (s1 == null)
            s1 = new v(s2);
        return s1;
    }

    public int a(v v1) {
        return a().compareTo(v1.a());
    }

    public String a() {
        return k;
    }

    void a(h h1) {
        if (l == null)
            s.b(k, h1);
        else
            h1.b(l);
    }

    public int compareTo(Object obj) {
        return a((v)obj);
    }

    public boolean equals(Object obj) {
        boolean flag;
        if (!(obj instanceof v)) {
            flag = false;
        } else {
            obj = (v)obj;
            flag = a().equals(((v) (obj)).a());
        }
        return flag;
    }

    public int hashCode() {
        return a().hashCode();
    }

    public String toString() {
        return a();
    }

    static  {
        a = new v("OPTIONS", true);
        b = new v("GET", true);
        c = new v("HEAD", true);
        d = new v("POST", true);
        e = new v("PUT", true);
        f = new v("PATCH", true);
        g = new v("DELETE", true);
        h = new v("TRACE", true);
        i = new v("CONNECT", true);
        j = new HashMap();
        j.put(a.toString(), a);
        j.put(b.toString(), b);
        j.put(c.toString(), c);
        j.put(d.toString(), d);
        j.put(e.toString(), e);
        j.put(f.toString(), f);
        j.put(g.toString(), g);
        j.put(h.toString(), h);
        j.put(i.toString(), i);
    }
}
