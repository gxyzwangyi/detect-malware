// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.codec.http;

import io.netty.buffer.ak;
import io.netty.buffer.h;
import io.netty.buffer.l;
import io.netty.channel.k;
import io.netty.handler.codec.PrematureChannelClosureException;
import io.netty.handler.codec.TooLongFrameException;
import io.netty.handler.codec.a;
import io.netty.handler.codec.d;
import java.util.List;

// Referenced classes of package io.netty.handler.codec.http:
//            t, s, j, n, 
//            ah, ac, af, d, 
//            q

public abstract class HttpObjectDecoder extends io.netty.handler.codec.a {
    private static final class State extends Enum {

        public static final State a;
        public static final State b;
        public static final State c;
        public static final State d;
        public static final State e;
        public static final State f;
        public static final State g;
        public static final State h;
        public static final State i;
        public static final State j;
        public static final State k;
        private static final State l[];

        public static State valueOf(String s1) {
            return (State)Enum.valueOf(io/netty/handler/codec/http/HttpObjectDecoder$State, s1);
        }

        public static State[] values() {
            return (State[])l.clone();
        }

        static  {
            a = new State("SKIP_CONTROL_CHARS", 0);
            b = new State("READ_INITIAL", 1);
            c = new State("READ_HEADER", 2);
            d = new State("READ_VARIABLE_LENGTH_CONTENT", 3);
            e = new State("READ_FIXED_LENGTH_CONTENT", 4);
            f = new State("READ_CHUNK_SIZE", 5);
            g = new State("READ_CHUNKED_CONTENT", 6);
            h = new State("READ_CHUNK_DELIMITER", 7);
            i = new State("READ_CHUNK_FOOTER", 8);
            j = new State("BAD_MESSAGE", 9);
            k = new State("UPGRADED", 10);
            l = (new State[] {
                a, b, c, d, e, f, g, h, i, j, 
                k
            });
        }

        private State(String s1, int i1) {
            super(s1, i1);
        }
    }

    private static class a
        implements l {

        private final io.netty.util.internal.a k;
        private final int l;
        private int m;

        protected TooLongFrameException a(int i1) {
            return new TooLongFrameException((new StringBuilder()).append("HTTP header is larger than ").append(i1).append(" bytes.").toString());
        }

        public io.netty.util.internal.a a(h h1) {
            int i1 = m;
            k.a();
            int j1 = h1.a(this);
            if (j1 == -1) {
                m = i1;
                h1 = null;
            } else {
                h1.b(j1 + 1);
                h1 = k;
            }
            return h1;
        }

        public void a() {
            m = 0;
        }

        public boolean a(byte byte0) {
            boolean flag = true;
            char c1 = (char)byte0;
            if (c1 != '\r')
                if (c1 == '\n') {
                    flag = false;
                } else {
                    byte0 = m + 1;
                    m = byte0;
                    if (byte0 > l)
                        throw a(l);
                    k.a(c1);
                }
            return flag;
        }

        a(io.netty.util.internal.a a1, int i1) {
            k = a1;
            l = i1;
        }
    }

    private static final class b extends a {

        protected TooLongFrameException a(int i1) {
            return new TooLongFrameException((new StringBuilder()).append("An HTTP line is larger than ").append(i1).append(" bytes.").toString());
        }

        public io.netty.util.internal.a a(h h1) {
            a();
            return super.a(h1);
        }

        b(io.netty.util.internal.a a1, int i1) {
            super(a1, i1);
        }
    }


    static final boolean e;
    protected final boolean d;
    private final int g;
    private final boolean h;
    private final a i;
    private final b j;
    private t k;
    private long l;
    private long m;
    private volatile boolean n;
    private CharSequence o;
    private CharSequence p;
    private ah q;
    private State r;

    protected HttpObjectDecoder() {
        this(4096, 8192, 8192, true);
    }

    protected HttpObjectDecoder(int i1, int j1, int k1, boolean flag) {
        this(i1, j1, k1, flag, true);
    }

    protected HttpObjectDecoder(int i1, int j1, int k1, boolean flag, boolean flag1) {
        this(i1, j1, k1, flag, flag1, 128);
    }

    protected HttpObjectDecoder(int i1, int j1, int k1, boolean flag, boolean flag1, int l1) {
        m = 0x0L;
        r = io.netty.handler.codec.http.State.a;
        if (i1 <= 0)
            throw new IllegalArgumentException((new StringBuilder()).append("maxInitialLineLength must be a positive integer: ").append(i1).toString());
        if (j1 <= 0)
            throw new IllegalArgumentException((new StringBuilder()).append("maxHeaderSize must be a positive integer: ").append(j1).toString());
        if (k1 <= 0) {
            throw new IllegalArgumentException((new StringBuilder()).append("maxChunkSize must be a positive integer: ").append(k1).toString());
        } else {
            io.netty.util.internal.a a1 = new io.netty.util.internal.a(l1);
            j = new b(a1, i1);
            i = new a(a1, j1);
            g = k1;
            h = flag;
            d = flag1;
            return;
        }
    }

    private static int a(io.netty.util.internal.a a1, int i1) {
_L3:
        if (i1 >= a1.length())
            break MISSING_BLOCK_LABEL_27;
        if (Character.isWhitespace(a1.a(i1))) goto _L2; else goto _L1
_L1:
        return i1;
_L2:
        i1++;
          goto _L3
        i1 = a1.length();
          goto _L1
    }

    private static int a(String s1) {
        s1 = s1.trim();
        int i1 = 0;
        do {
label0:
            {
                if (i1 < s1.length()) {
                    char c1 = s1.charAt(i1);
                    if (c1 != ';' && !Character.isWhitespace(c1) && !Character.isISOControl(c1))
                        break label0;
                    s1 = s1.substring(0, i1);
                }
                return Integer.parseInt(s1, 16);
            }
            i1++;
        } while (true);
    }

    private t a(h h1, Exception exception) {
        r = State.j;
        h1.s(h1.f());
        if (k != null) {
            k.a(io.netty.handler.codec.d.a(exception));
        } else {
            k = f();
            k.a(io.netty.handler.codec.d.a(exception));
        }
        h1 = k;
        k = null;
        return h1;
    }

    private static boolean a(h h1) {
        boolean flag1 = false;
        int k1 = h1.c();
        int i1 = h1.b();
        do {
            int j1;
label0:
            {
                j1 = i1;
                boolean flag = flag1;
                if (k1 > i1) {
                    j1 = i1 + 1;
                    i1 = h1.h(i1);
                    if (Character.isISOControl(i1) || Character.isWhitespace(i1))
                        break label0;
                    j1--;
                    flag = true;
                }
                h1.b(j1);
                return flag;
            }
            i1 = j1;
        } while (true);
    }

    private static String[] a(io.netty.util.internal.a a1) {
        int i1 = a(a1, 0);
        int k1 = b(a1, i1);
        int j1 = a(a1, k1);
        int i2 = b(a1, j1);
        int j2 = a(a1, i2);
        int l1 = c(a1);
        String s2 = a1.b(i1, k1);
        String s1 = a1.b(j1, i2);
        if (j2 < l1)
            a1 = a1.b(j2, l1);
        else
            a1 = "";
        return (new String[] {
            s2, s1, a1
        });
    }

    private static int b(io.netty.util.internal.a a1, int i1) {
_L3:
        if (i1 >= a1.length())
            break MISSING_BLOCK_LABEL_27;
        if (!Character.isWhitespace(a1.a(i1))) goto _L2; else goto _L1
_L1:
        return i1;
_L2:
        i1++;
          goto _L3
        i1 = a1.length();
          goto _L1
    }

    private State b(h h1) {
        io.netty.util.internal.a a1;
        t t1;
        s s1;
        t1 = k;
        s1 = t1.j();
        a1 = i.a(h1);
        if (a1 != null) goto _L2; else goto _L1
_L1:
        h1 = null;
_L4:
        return h1;
_L2:
        io.netty.util.internal.a a2;
        if (a1.length() > 0)
            do {
                char c1 = a1.charAt(0);
                if (o != null && (c1 == ' ' || c1 == '\t')) {
                    StringBuilder stringbuilder = new StringBuilder(p.length() + a1.length() + 1);
                    stringbuilder.append(p).append(' ').append(a1.toString().trim());
                    p = stringbuilder.toString();
                } else {
                    if (o != null)
                        s1.a(o, p);
                    b(a1);
                }
                a2 = i.a(h1);
                if (a2 == null) {
                    h1 = null;
                    continue; /* Loop/switch isn't completed */
                }
                a1 = a2;
            } while (a2.length() > 0);
        if (o != null)
            s1.a(o, p);
        o = null;
        p = null;
        if (a(t1)) {
            io.netty.handler.codec.http.s.d(t1);
            h1 = io.netty.handler.codec.http.State.a;
        } else
        if (s.c(t1))
            h1 = State.f;
        else
        if (h() >= 0L)
            h1 = State.e;
        else
            h1 = io.netty.handler.codec.http.State.d;
        if (true) goto _L4; else goto _L3
_L3:
    }

    private n b(h h1, Exception exception) {
        r = State.j;
        h1.s(h1.f());
        h1 = new j(ak.c);
        h1.a(io.netty.handler.codec.d.a(exception));
        k = null;
        q = null;
        return h1;
    }

    private void b(io.netty.util.internal.a a1) {
        int i1;
        int l1;
        int i2;
        i2 = a1.length();
        l1 = a(a1, 0);
        i1 = l1;
_L4:
        if (i1 >= i2) goto _L2; else goto _L1
_L1:
        char c1 = a1.charAt(i1);
        if (c1 != ':' && !Character.isWhitespace(c1)) goto _L3; else goto _L2
_L2:
        int j1 = i1;
_L5:
        int k1 = j1;
        if (j1 < i2) {
            if (a1.charAt(j1) != ':')
                break MISSING_BLOCK_LABEL_109;
            k1 = j1 + 1;
        }
        o = a1.b(l1, i1);
        i1 = a(a1, k1);
        if (i1 == i2)
            p = "";
        else
            p = a1.b(i1, c(a1));
        return;
_L3:
        i1++;
          goto _L4
        j1++;
          goto _L5
    }

    private static int c(io.netty.util.internal.a a1) {
        int i1 = a1.length() - 1;
_L3:
        if (i1 <= 0)
            break MISSING_BLOCK_LABEL_33;
        if (Character.isWhitespace(a1.a(i1))) goto _L2; else goto _L1
_L1:
        i1++;
_L4:
        return i1;
_L2:
        i1--;
          goto _L3
        i1 = 0;
          goto _L4
    }

    private ah c(h h1) {
        Object obj1;
        Object obj2;
        obj2 = null;
        obj1 = i.a(h1);
        if (obj1 != null) goto _L2; else goto _L1
_L1:
        obj1 = obj2;
_L4:
        return ((ah) (obj1));
_L2:
label0:
        {
label1:
            {
                {
                    if (((io.netty.util.internal.a) (obj1)).length() <= 0)
                        break label1;
                    Object obj = q;
                    int i1;
                    CharSequence charsequence;
                    Object obj3;
                    CharSequence charsequence1;
                    String s1;
                    if (obj == null) {
                        obj = new j(ak.c, d);
                        q = ((ah) (obj));
                        charsequence = null;
                    } else {
                        charsequence = null;
                    }
                }
                i1 = ((io.netty.util.internal.a) (obj1)).charAt(0);
                if (charsequence != null && (i1 == ' ' || i1 == '\t')) {
                    obj3 = ((ah) (obj)).b().d(charsequence);
                    if (!((List) (obj3)).isEmpty()) {
                        i1 = ((List) (obj3)).size() - 1;
                        s1 = ((io.netty.util.internal.a) (obj1)).toString().trim();
                        charsequence1 = (CharSequence)((List) (obj3)).get(i1);
                        obj1 = new StringBuilder(charsequence1.length() + s1.length());
                        ((StringBuilder) (obj1)).append(charsequence1).append(s1);
                        ((List) (obj3)).set(i1, ((StringBuilder) (obj1)).toString());
                    }
                } else {
                    b(((io.netty.util.internal.a) (obj1)));
                    charsequence = o;
                    if (!io.netty.handler.codec.http.s.a("Content-Length", charsequence) && !io.netty.handler.codec.http.s.a("Transfer-Encoding", charsequence) && !io.netty.handler.codec.http.s.a("Trailer", charsequence))
                        ((ah) (obj)).b().a(charsequence, p);
                    charsequence = o;
                    o = null;
                    p = null;
                }
                obj3 = i.a(h1);
                obj1 = obj2;
                if (obj3 != null) {
                    if (((io.netty.util.internal.a) (obj3)).length() > 0)
                        break label0;
                    q = null;
                    obj1 = obj;
                }
                continue; /* Loop/switch isn't completed */
            }
            obj1 = ah.b;
        }
        if (true) goto _L4; else goto _L3
_L3:
        obj1 = obj3;
        break MISSING_BLOCK_LABEL_68;
    }

    private void g() {
        Object obj;
        obj = k;
        k = null;
        o = null;
        p = null;
        m = 0x0L;
        j.a();
        i.a();
        q = null;
        if (e()) goto _L2; else goto _L1
_L1:
        obj = (ac)obj;
        if (obj == null || ((ac) (obj)).h().a() != 101) goto _L2; else goto _L3
_L3:
        r = io.netty.handler.codec.http.State.k;
_L5:
        return;
_L2:
        r = io.netty.handler.codec.http.State.a;
        if (true) goto _L5; else goto _L4
_L4:
    }

    private long h() {
        if (m == 0x0L)
            m = io.netty.handler.codec.http.s.a(k, -1L);
        return m;
    }

    protected abstract t a(String as[]);

    protected boolean a(t t1) {
        boolean flag;
        boolean flag1;
        flag1 = false;
        flag = flag1;
        if (!(t1 instanceof ac)) goto _L2; else goto _L1
_L1:
        int i1;
        t1 = (ac)t1;
        i1 = t1.h().a();
        if (i1 < 100 || i1 >= 200) goto _L4; else goto _L3
_L3:
        if (i1 != 101 || t1.j().d("Sec-WebSocket-Accept")) goto _L6; else goto _L5
_L5:
        flag = flag1;
        if (t1.j().a("Upgrade", "WebSocket", true)) goto _L2; else goto _L6
_L6:
        flag = true;
_L2:
        return flag;
_L4:
        switch (i1) {
        default:
            flag = flag1;
            break;

        case 204: 
        case 205: 
        case 304: 
            flag = true;
            break;
        }
        if (true) goto _L2; else goto _L7
_L7:
    }

    protected void b(k k1, h h1, List list) {
        if (n)
            g();
        static class _cls1 {

            static final int a[];

            static  {
                a = new int[State.values().length];
                NoSuchFieldError nosuchfielderror;
                try {
                    a[io.netty.handler.codec.http.State.a.ordinal()] = 1;
                }
                catch (NoSuchFieldError nosuchfielderror10) { }
                try {
                    a[State.f.ordinal()] = 2;
                }
                catch (NoSuchFieldError nosuchfielderror9) { }
                try {
                    a[State.b.ordinal()] = 3;
                }
                catch (NoSuchFieldError nosuchfielderror8) { }
                try {
                    a[State.c.ordinal()] = 4;
                }
                catch (NoSuchFieldError nosuchfielderror7) { }
                try {
                    a[io.netty.handler.codec.http.State.d.ordinal()] = 5;
                }
                catch (NoSuchFieldError nosuchfielderror6) { }
                try {
                    a[State.e.ordinal()] = 6;
                }
                catch (NoSuchFieldError nosuchfielderror5) { }
                try {
                    a[State.g.ordinal()] = 7;
                }
                catch (NoSuchFieldError nosuchfielderror4) { }
                try {
                    a[io.netty.handler.codec.http.State.h.ordinal()] = 8;
                }
                catch (NoSuchFieldError nosuchfielderror3) { }
                try {
                    a[State.i.ordinal()] = 9;
                }
                catch (NoSuchFieldError nosuchfielderror2) { }
                try {
                    a[State.j.ordinal()] = 10;
                }
                catch (NoSuchFieldError nosuchfielderror1) { }
                a[io.netty.handler.codec.http.State.k.ordinal()] = 11;
_L2:
                return;
                nosuchfielderror;
                if (true) goto _L2; else goto _L1
_L1:
            }
        }

        io.netty.handler.codec.http._cls1.a[r.ordinal()];
        JVM INSTR tableswitch 1 11: default 80
    //                   1 81
    //                   2 564
    //                   3 95
    //                   4 162
    //                   5 401
    //                   6 445
    //                   7 632
    //                   8 736
    //                   9 796
    //                   10 838
    //                   11 850;
           goto _L1 _L2 _L3 _L4 _L5 _L6 _L7 _L8 _L9 _L10 _L11 _L12
_L1:
        return;
_L2:
        if (!a(h1)) goto _L1; else goto _L13
_L13:
        r = State.b;
_L4:
        k1 = j.a(h1);
        if (k1 != null)
            try {
                k1 = a(k1);
                if (k1.length >= 3)
                    break MISSING_BLOCK_LABEL_146;
                r = io.netty.handler.codec.http.State.a;
            }
            // Misplaced declaration of an exception variable
            catch (k k1) {
                list.add(a(h1, k1));
            }
          goto _L1
        k = a(k1);
        r = State.c;
_L5:
        k1 = b(h1);
        if (k1 == null) goto _L1; else goto _L14
_L14:
        r = k1;
        io.netty.handler.codec.http._cls1.a[k1.ordinal()];
        JVM INSTR tableswitch 1 2: default 208
    //                   1 282
    //                   2 310;
           goto _L15 _L16 _L17
_L15:
        long l2 = h();
        if (l2 == 0L) goto _L19; else goto _L18
_L18:
        if (l2 != -1L)
            break MISSING_BLOCK_LABEL_344;
        if (!e())
            break MISSING_BLOCK_LABEL_344;
_L19:
        list.add(k);
        list.add(ah.b);
        g();
          goto _L1
_L16:
        try {
            list.add(k);
            list.add(ah.b);
            g();
        }
        // Misplaced declaration of an exception variable
        catch (k k1) {
            list.add(a(h1, k1));
        }
          goto _L1
_L17:
        if (!h) {
            k1 = JVM INSTR new #71  <Class IllegalArgumentException>;
            k1.IllegalArgumentException("Chunked messages not supported");
            throw k1;
        }
        list.add(k);
          goto _L1
        if (!e && k1 != State.e && k1 != io.netty.handler.codec.http.State.d) {
            k1 = JVM INSTR new #378 <Class AssertionError>;
            k1.AssertionError();
            throw k1;
        }
        list.add(k);
        if (k1 == State.e)
            l = l2;
          goto _L1
_L6:
        int i1 = Math.min(h1.f(), g);
        if (i1 > 0)
            list.add(new io.netty.handler.codec.http.d(h1.r(i1).A()));
          goto _L1
_L7:
        int j1 = h1.f();
        if (j1 != 0) {
            int i2 = Math.min(j1, g);
            j1 = i2;
            if ((long)i2 > l)
                j1 = (int)l;
            k1 = h1.r(j1).A();
            l = l - (long)j1;
            if (l == 0L) {
                list.add(new j(k1, d));
                g();
            } else {
                list.add(new io.netty.handler.codec.http.d(k1));
            }
        }
          goto _L1
_L3:
        k1 = j.a(h1);
        if (k1 == null) goto _L1; else goto _L20
_L20:
        int l1;
        l1 = a(k1.toString());
        l = l1;
        if (l1 != 0) goto _L22; else goto _L21
_L21:
        try {
            r = State.i;
        }
        // Misplaced declaration of an exception variable
        catch (k k1) {
            list.add(b(h1, ((Exception) (k1))));
        }
          goto _L1
_L22:
        r = State.g;
_L8:
        if (!e && l > 0x7fffffffL)
            throw new AssertionError();
        l1 = Math.min(Math.min((int)l, g), h1.f());
        if (l1 == 0) goto _L1; else goto _L23
_L23:
        k1 = new io.netty.handler.codec.http.d(h1.r(l1).A());
        l = l - (long)l1;
        list.add(k1);
        if (l != 0L) goto _L1; else goto _L24
_L24:
        r = io.netty.handler.codec.http.State.h;
_L9:
        int k2;
        k2 = h1.c();
        l1 = h1.b();
_L29:
        if (k2 <= l1) goto _L26; else goto _L25
_L25:
        int j2 = l1 + 1;
        if (h1.f(l1) != 10) goto _L28; else goto _L27
_L27:
        r = State.f;
_L30:
        h1.b(j2);
          goto _L1
_L28:
        l1 = j2;
          goto _L29
_L10:
        k1 = c(h1);
        if (k1 != null)
            try {
                list.add(k1);
                g();
            }
            // Misplaced declaration of an exception variable
            catch (k k1) {
                list.add(b(h1, ((Exception) (k1))));
            }
          goto _L1
_L11:
        h1.s(h1.f());
          goto _L1
_L12:
        l1 = h1.f();
        if (l1 > 0)
            list.add(h1.q(l1));
          goto _L1
_L26:
        j2 = l1;
          goto _L30
    }

    public void b(k k1, Object obj) {
        if (!(obj instanceof q)) goto _L2; else goto _L1
_L1:
        io.netty.handler.codec.http._cls1.a[r.ordinal()];
        JVM INSTR tableswitch 2 6: default 52
    //                   2 59
    //                   3 52
    //                   4 52
    //                   5 59
    //                   6 59;
           goto _L2 _L3 _L2 _L2 _L3 _L3
_L2:
        super.b(k1, obj);
        return;
_L3:
        d();
        if (true) goto _L2; else goto _L4
_L4:
    }

    protected void c(k k1, h h1, List list) {
        boolean flag1;
        flag1 = true;
        super.c(k1, h1, list);
        if (n)
            g();
        if (k == null) goto _L2; else goto _L1
_L1:
        boolean flag2 = s.c(k);
        if (r != io.netty.handler.codec.http.State.d || h1.e() || flag2) goto _L4; else goto _L3
_L3:
        list.add(ah.b);
        g();
_L2:
        return;
_L4:
        boolean flag;
        if (r == State.c) {
            list.add(a(ak.c, new PrematureChannelClosureException("Connection closed before received headers")));
            g();
            continue; /* Loop/switch isn't completed */
        }
        flag = flag1;
        if (!e()) {
            if (!flag2)
                break; /* Loop/switch isn't completed */
            flag = flag1;
        }
_L6:
        if (!flag)
            list.add(ah.b);
        g();
        if (true) goto _L2; else goto _L5
_L5:
        flag = flag1;
        if (h() <= 0L)
            flag = false;
          goto _L6
        if (true) goto _L2; else goto _L7
_L7:
    }

    public void d() {
        n = true;
    }

    protected abstract boolean e();

    protected abstract t f();

    static  {
        boolean flag;
        if (!io/netty/handler/codec/http/HttpObjectDecoder.desiredAssertionStatus())
            flag = true;
        else
            flag = false;
        e = flag;
    }
}
