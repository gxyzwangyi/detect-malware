// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.codec.http;

import io.netty.buffer.ak;
import io.netty.buffer.h;
import io.netty.util.i;
import io.netty.util.internal.m;
import java.util.Iterator;

// Referenced classes of package io.netty.handler.codec.http:
//            d, ah, s, n, 
//            e

public class j extends d
    implements ah {
    private static final class a extends e {

        void a(CharSequence charsequence) {
            super.a(charsequence);
            if (s.a("Content-Length", charsequence) || s.a("Transfer-Encoding", charsequence) || s.a("Trailer", charsequence))
                throw new IllegalArgumentException((new StringBuilder()).append("prohibited trailing header: ").append(charsequence).toString());
            else
                return;
        }

        a(boolean flag) {
            super(flag);
        }
    }


    private final s a;
    private final boolean c;

    public j() {
        this(ak.a(0));
    }

    public j(h h1) {
        this(h1, true);
    }

    public j(h h1, boolean flag) {
        super(h1);
        a = new a(flag);
        c = flag;
    }

    private void a(StringBuilder stringbuilder) {
        for (Iterator iterator = b().iterator(); iterator.hasNext(); stringbuilder.append(m.a)) {
            java.util.Map.Entry entry = (java.util.Map.Entry)iterator.next();
            stringbuilder.append((String)entry.getKey());
            stringbuilder.append(": ");
            stringbuilder.append((String)entry.getValue());
        }

    }

    public i C() {
        return d();
    }

    public s b() {
        return a;
    }

    public ah c() {
        j j1 = new j(a().t(), c);
        j1.b().b(b());
        return j1;
    }

    public ah d() {
        super.g();
        return this;
    }

    public n e() {
        return c();
    }

    public n g() {
        return d();
    }

    public String toString() {
        StringBuilder stringbuilder = new StringBuilder(super.toString());
        stringbuilder.append(m.a);
        a(stringbuilder);
        stringbuilder.setLength(stringbuilder.length() - m.a.length());
        return stringbuilder.toString();
    }
}
