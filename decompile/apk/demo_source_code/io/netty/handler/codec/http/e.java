// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.codec.http;

import io.netty.buffer.h;
import io.netty.util.internal.k;
import java.util.*;

// Referenced classes of package io.netty.handler.codec.http:
//            s, HttpHeaderDateFormat

public class e extends s {
    private final class a
        implements java.util.Map.Entry {

        final int a;
        final CharSequence b;
        CharSequence c;
        a d;
        a e;
        a f;
        final e g;

        public String a(String s1) {
            if (s1 == null) {
                throw new NullPointerException("value");
            } else {
                s.g(s1);
                CharSequence charsequence = c;
                c = s1;
                return charsequence.toString();
            }
        }

        void a() {
            e.f = f;
            f.e = e;
        }

        void a(h h) {
            s.a(b, c, h);
        }

        void a(a a1) {
            f = a1;
            e = a1.e;
            e.f = this;
            f.e = this;
        }

        public String b() {
            return b.toString();
        }

        public String c() {
            return c.toString();
        }

        public Object getKey() {
            return b();
        }

        public Object getValue() {
            return c();
        }

        public Object setValue(Object obj) {
            return a((String)obj);
        }

        public String toString() {
            return (new StringBuilder()).append(b.toString()).append('=').append(c.toString()).toString();
        }

        a() {
            g = e.this;
            super();
            a = -1;
            b = null;
            c = null;
        }

        a(int i, CharSequence charsequence, CharSequence charsequence1) {
            g = e.this;
            super();
            a = i;
            b = charsequence;
            c = charsequence1;
        }
    }

    private final class b
        implements Iterator {

        final e a;
        private a b;

        public java.util.Map.Entry a() {
            b = b.f;
            if (b == e.a(a))
                throw new NoSuchElementException();
            else
                return b;
        }

        public boolean hasNext() {
            boolean flag;
            if (b.f != e.a(a))
                flag = true;
            else
                flag = false;
            return flag;
        }

        public Object next() {
            return a();
        }

        public void remove() {
            throw new UnsupportedOperationException();
        }

        private b() {
            a = e.this;
            super();
            b = e.a(a);
        }

    }


    protected final boolean a;
    private final a c[];
    private final a d;

    public e() {
        this(true);
    }

    public e(boolean flag) {
        c = new a[17];
        d = new a();
        a = flag;
        a a3 = d;
        a a1 = d;
        a a2 = d;
        a1.f = a2;
        a3.e = a2;
    }

    private static int a(int i) {
        return i % 17;
    }

    static a a(e e1) {
        return e1.d;
    }

    private static CharSequence a(Object obj) {
        k.a(obj, "value");
        if (obj instanceof CharSequence)
            obj = (CharSequence)obj;
        else
        if (obj instanceof Number)
            obj = obj.toString();
        else
        if (obj instanceof Date)
            obj = HttpHeaderDateFormat.a().format((Date)obj);
        else
        if (obj instanceof Calendar)
            obj = HttpHeaderDateFormat.a().format(((Calendar)obj).getTime());
        else
            obj = obj.toString();
        return ((CharSequence) (obj));
    }

    private void a(int i, int j, CharSequence charsequence) {
        a a1;
        a a2;
        a2 = c[j];
        a1 = a2;
        if (a2 != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        do {
            a2 = a1;
            if (a1.a != i)
                break; /* Loop/switch isn't completed */
            a2 = a1;
            if (!a(charsequence, a1.b))
                break; /* Loop/switch isn't completed */
            a1.a();
            a1 = a1.d;
            if (a1 == null)
                break;
            c[j] = a1;
        } while (true);
        c[j] = null;
        if (true) goto _L1; else goto _L3
_L4:
        if (a1.a == i && a(charsequence, a1.b)) {
            a2.d = a1.d;
            a1.a();
        } else {
            a2 = a1;
        }
_L3:
        a1 = a2.d;
        if (a1 != null) goto _L4; else goto _L1
    }

    private void a(int i, int j, CharSequence charsequence, CharSequence charsequence1) {
        a a1 = c[j];
        a aa[] = c;
        charsequence = new a(i, charsequence, charsequence1);
        aa[j] = charsequence;
        charsequence.d = a1;
        charsequence.a(d);
    }

    public s a() {
        Arrays.fill(c, null);
        a a1 = d;
        a a2 = d;
        a a3 = d;
        a2.f = a3;
        a1.e = a3;
        return this;
    }

    public s a(s s1) {
        if (s1 instanceof e) {
            if (s1 == this)
                throw new IllegalArgumentException("can't add to itself.");
            e e1 = (e)s1;
            a a1 = e1.d.f;
            do {
                s1 = this;
                if (a1 == e1.d)
                    break;
                a(a1.b, a1.c);
                a1 = a1.f;
            } while (true);
        } else {
            s1 = super.a(s1);
        }
        return s1;
    }

    public s a(CharSequence charsequence, Iterable iterable) {
        if (iterable == null)
            throw new NullPointerException("values");
        if (a)
            a(charsequence);
        int j = h(charsequence);
        int i = a(j);
        a(j, i, charsequence);
        iterable = iterable.iterator();
        do {
            Object obj;
label0:
            {
                if (iterable.hasNext()) {
                    obj = iterable.next();
                    if (obj != null)
                        break label0;
                }
                return this;
            }
            obj = a(obj);
            if (a)
                g(((CharSequence) (obj)));
            a(j, i, charsequence, ((CharSequence) (obj)));
        } while (true);
    }

    public s a(CharSequence charsequence, Object obj) {
        int i;
        if (a) {
            a(charsequence);
            obj = a(obj);
            g(((CharSequence) (obj)));
        } else {
            obj = a(obj);
        }
        i = h(charsequence);
        a(i, a(i), charsequence, ((CharSequence) (obj)));
        return this;
    }

    public s a(String s1) {
        return b(s1);
    }

    public s a(String s1, Iterable iterable) {
        return a(((CharSequence) (s1)), iterable);
    }

    public s a(String s1, Object obj) {
        return a(((CharSequence) (s1)), obj);
    }

    void a(h h) {
        for (a a1 = d.f; a1 != d; a1 = a1.f)
            a1.a(h);

    }

    void a(CharSequence charsequence) {
        f(charsequence);
    }

    public boolean a(CharSequence charsequence, CharSequence charsequence1, boolean flag) {
        int j;
        boolean flag2;
        a a1;
        flag2 = true;
        if (charsequence == null)
            throw new NullPointerException("name");
        j = h(charsequence);
        int i = a(j);
        a1 = c[i];
_L7:
        if (a1 == null) goto _L2; else goto _L1
_L1:
        if (a1.a != j || !a(charsequence, a1.b))
            continue; /* Loop/switch isn't completed */
        if (!flag) goto _L4; else goto _L3
_L3:
        boolean flag1;
        if (!a(a1.c, charsequence1))
            continue; /* Loop/switch isn't completed */
        flag1 = flag2;
_L6:
        return flag1;
_L4:
        flag1 = flag2;
        if (a1.c.equals(charsequence1)) goto _L6; else goto _L5
_L5:
        a1 = a1.d;
          goto _L7
_L2:
        flag1 = false;
          goto _L6
    }

    public boolean a(String s1, String s2, boolean flag) {
        return a(((CharSequence) (s1)), ((CharSequence) (s2)), flag);
    }

    public s b(s s1) {
        Object obj;
        if (s1 instanceof e) {
            obj = this;
            if (s1 != this) {
                a();
                e e1 = (e)s1;
                s1 = e1.d.f;
                do {
                    obj = this;
                    if (s1 == e1.d)
                        break;
                    a(((a) (s1)).b, ((a) (s1)).c);
                    s1 = ((a) (s1)).f;
                } while (true);
            }
        } else {
            obj = super.b(s1);
        }
        return ((s) (obj));
    }

    public s b(CharSequence charsequence) {
        if (charsequence == null) {
            throw new NullPointerException("name");
        } else {
            int i = h(charsequence);
            a(i, a(i), charsequence);
            return this;
        }
    }

    public s b(CharSequence charsequence, Object obj) {
        int i;
        int j;
        if (a) {
            a(charsequence);
            obj = a(obj);
            g(((CharSequence) (obj)));
        } else {
            obj = a(obj);
        }
        j = h(charsequence);
        i = a(j);
        a(j, i, charsequence);
        a(j, i, charsequence, ((CharSequence) (obj)));
        return this;
    }

    public s b(String s1, Object obj) {
        return b(((CharSequence) (s1)), obj);
    }

    public String b(String s1) {
        return c(s1);
    }

    public List b() {
        LinkedList linkedlist = new LinkedList();
        for (a a1 = d.f; a1 != d; a1 = a1.f)
            linkedlist.add(a1);

        return linkedlist;
    }

    public String c(CharSequence charsequence) {
        if (charsequence == null)
            throw new NullPointerException("name");
        int i = h(charsequence);
        int j = a(i);
        a a1 = c[j];
        CharSequence charsequence1;
        CharSequence charsequence2;
        for (charsequence2 = null; a1 != null; charsequence2 = charsequence1) {
            charsequence1 = charsequence2;
            if (a1.a == i) {
                charsequence1 = charsequence2;
                if (a(charsequence, a1.b))
                    charsequence1 = a1.c;
            }
            a1 = a1.d;
        }

        if (charsequence2 == null)
            charsequence = null;
        else
            charsequence = charsequence2.toString();
        return charsequence;
    }

    public List c(String s1) {
        return d(s1);
    }

    public boolean c() {
        boolean flag;
        if (d == d.f)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public List d(CharSequence charsequence) {
        if (charsequence == null)
            throw new NullPointerException("name");
        LinkedList linkedlist = new LinkedList();
        int j = h(charsequence);
        int i = a(j);
        for (a a1 = c[i]; a1 != null; a1 = a1.d)
            if (a1.a == j && a(charsequence, a1.b))
                linkedlist.addFirst(a1.c());

        return linkedlist;
    }

    public Set d() {
        LinkedHashSet linkedhashset = new LinkedHashSet();
        for (a a1 = d.f; a1 != d; a1 = a1.f)
            linkedhashset.add(a1.b());

        return linkedhashset;
    }

    public boolean d(String s1) {
        boolean flag;
        if (b(s1) != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean e(CharSequence charsequence) {
        boolean flag;
        if (c(charsequence) != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public Iterator iterator() {
        return new b();
    }
}
