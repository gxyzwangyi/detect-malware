// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.codec.http;

import java.nio.charset.Charset;
import java.util.*;

public class ai {

    private final Charset a;
    private final String b;
    private final boolean c;
    private final int d;
    private Map e;
    private int f;

    public ai(String s, Charset charset) {
        this(s, charset, true);
    }

    public ai(String s, Charset charset, boolean flag) {
        this(s, charset, flag, 1024);
    }

    public ai(String s, Charset charset, boolean flag, int i) {
        if (s == null)
            throw new NullPointerException("getUri");
        if (charset == null)
            throw new NullPointerException("charset");
        if (i <= 0) {
            throw new IllegalArgumentException((new StringBuilder()).append("maxParams: ").append(i).append(" (expected: a positive integer)").toString());
        } else {
            b = s;
            a = charset;
            d = i;
            c = flag;
            return;
        }
    }

    private static char a(char c1) {
        int i;
        if ('0' <= c1 && c1 <= '9')
            i = (char)(c1 - 48);
        else
        if ('a' <= c1 && c1 <= 'f')
            i = (char)((c1 - 97) + 10);
        else
        if ('A' <= c1 && c1 <= 'F')
            i = (char)((c1 - 65) + 10);
        else
            i = 65535;
        return i;
    }

    public static String a(String s, Charset charset) {
        if (s != null) goto _L2; else goto _L1
_L1:
        Object obj = "";
_L6:
        return ((String) (obj));
_L2:
        int i;
        int l;
        l = s.length();
        i = 0;
_L13:
        int j;
        if (i >= l)
            break MISSING_BLOCK_LABEL_382;
        j = s.charAt(i);
        if (j != '%' && j != '+') goto _L4; else goto _L3
_L3:
        i = 1;
_L15:
        obj = s;
        if (i == 0) goto _L6; else goto _L5
_L5:
        obj = new byte[l];
        i = 0;
        j = 0;
_L12:
        if (i >= l) goto _L8; else goto _L7
_L7:
        int k = s.charAt(i);
        k;
        JVM INSTR lookupswitch 2: default 108
    //                   37: 151
    //                   43: 131;
           goto _L9 _L10 _L11
_L9:
        obj[j] = (byte)k;
        j++;
_L14:
        i++;
          goto _L12
_L4:
        i++;
          goto _L13
_L11:
        k = j + 1;
        obj[j] = 32;
        j = k;
          goto _L14
_L10:
        char c1;
label0:
        {
            if (i == l - 1)
                throw new IllegalArgumentException((new StringBuilder()).append("unterminated escape sequence at end of string: ").append(s).toString());
            i++;
            c1 = s.charAt(i);
            if (c1 != '%')
                break label0;
            k = j + 1;
            obj[j] = 37;
            j = k;
        }
          goto _L14
        if (i == l - 1)
            throw new IllegalArgumentException((new StringBuilder()).append("partial escape sequence at end of string: ").append(s).toString());
        k = a(c1);
        i++;
        char c2 = a(s.charAt(i));
        if (k == '\uFFFF' || c2 == '\uFFFF')
            throw new IllegalArgumentException((new StringBuilder()).append("invalid escape sequence `%").append(s.charAt(i - 1)).append(s.charAt(i)).append("' at index ").append(i - 2).append(" of: ").append(s).toString());
        k = (char)(k * 16 + c2);
          goto _L9
_L8:
        obj = new String(((byte []) (obj)), 0, j, charset);
          goto _L6
        i = 0;
          goto _L15
    }

    private void a(String s) {
        int i;
        int j;
        String s1;
        LinkedHashMap linkedhashmap;
        linkedhashmap = new LinkedHashMap();
        e = linkedhashmap;
        f = 0;
        j = 0;
        i = 0;
        s1 = null;
_L2:
        char c1;
        if (j >= s.length())
            break MISSING_BLOCK_LABEL_172;
        c1 = s.charAt(j);
        if (c1 != '=' || s1 != null)
            break; /* Loop/switch isn't completed */
        if (i != j)
            s1 = a(s.substring(i, j), a);
        i = j + 1;
_L4:
        j++;
        if (true) goto _L2; else goto _L1
_L1:
        if (c1 != '&' && c1 != ';') goto _L4; else goto _L3
_L3:
        if (s1 != null || i == j) goto _L6; else goto _L5
_L5:
        if (a(((Map) (linkedhashmap)), a(s.substring(i, j), a), "")) goto _L8; else goto _L7
_L7:
        return;
_L6:
        if (s1 == null) goto _L8; else goto _L9
_L9:
        if (!a(((Map) (linkedhashmap)), s1, a(s.substring(i, j), a))) goto _L7; else goto _L10
_L10:
        s1 = null;
_L8:
        i = j + 1;
          goto _L4
        if (i != j) {
            if (s1 == null)
                a(((Map) (linkedhashmap)), a(s.substring(i, j), a), "");
            else
                a(((Map) (linkedhashmap)), s1, a(s.substring(i, j), a));
        } else
        if (s1 != null)
            a(((Map) (linkedhashmap)), s1, "");
          goto _L7
    }

    private boolean a(Map map, String s, String s1) {
        boolean flag;
        if (f >= d) {
            flag = false;
        } else {
            List list = (List)map.get(s);
            Object obj = list;
            if (list == null) {
                obj = new ArrayList(1);
                map.put(s, obj);
            }
            ((List) (obj)).add(s1);
            f = f + 1;
            flag = true;
        }
        return flag;
    }

    public Map a() {
        if (e == null)
            if (c) {
                int i = b.indexOf('?');
                if (i >= 0 && i < b.length() - 1)
                    a(b.substring(i + 1));
                else
                    e = Collections.emptyMap();
            } else
            if (b.isEmpty())
                e = Collections.emptyMap();
            else
                a(b);
        return e;
    }
}
