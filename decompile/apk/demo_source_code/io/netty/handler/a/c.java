// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.a;

import io.netty.buffer.h;
import io.netty.channel.*;
import io.netty.util.concurrent.i;
import io.netty.util.internal.PlatformDependent;
import java.util.ArrayDeque;
import java.util.Iterator;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicLong;

// Referenced classes of package io.netty.handler.a:
//            a, d

public class c extends io.netty.handler.a.a {
    private static final class a {

        ArrayDeque a;
        long b;
        long c;
        long d;

        private a() {
        }

    }

    private static final class b {

        final long a;
        final Object b;
        final long c;
        final w d;

        private b(long l1, Object obj, long l2, w w) {
            a = l1;
            b = obj;
            c = l2;
            d = w;
        }

        b(long l1, Object obj, long l2, w w, _cls1 _pcls1) {
            this(l1, obj, l2, w);
        }
    }


    long j;
    private final ConcurrentMap k = PlatformDependent.k();
    private final AtomicLong l = new AtomicLong();

    public c(ScheduledExecutorService scheduledexecutorservice, long l1, long l2, long l3, 
            long l4) {
        super(l1, l2, l3, l4);
        j = 0x19000000L;
        a(scheduledexecutorservice);
    }

    private void a(k k1, a a1, long l1) {
        a1;
        JVM INSTR monitorenter ;
        b b1 = (b)a1.a.pollFirst();
_L1:
        if (b1 == null)
            break MISSING_BLOCK_LABEL_113;
label0:
        {
            if (b1.a > l1)
                break label0;
            long l2 = b1.c;
            a.e(l2);
            a1.b = a1.b - l2;
            l.addAndGet(-l2);
            k1.a(b1.b, b1.d);
            a1.c = l1;
            b1 = (b)a1.a.pollFirst();
        }
          goto _L1
        a1.a.addFirst(b1);
        if (a1.a.isEmpty())
            m(k1);
        a1;
        JVM INSTR monitorexit ;
        k1.n();
        return;
        k1;
        a1;
        JVM INSTR monitorexit ;
        throw k1;
    }

    static void a(c c1, k k1, a a1, long l1) {
        c1.a(k1, a1, l1);
    }

    private a n(k k1) {
        Integer integer = Integer.valueOf(k1.a().hashCode());
        a a1 = (a)k.get(integer);
        k1 = a1;
        if (a1 == null) {
            k1 = new a();
            k1.a = new ArrayDeque();
            k1.b = 0L;
            k1.d = io.netty.handler.a.d.a();
            k1.c = ((a) (k1)).d;
            k.put(integer, k1);
        }
        return k1;
    }

    long a(k k1, long l1, long l2) {
        int i1 = k1.a().hashCode();
        k1 = (a)k.get(Integer.valueOf(i1));
        long l3 = l1;
        if (k1 != null) {
            l3 = l1;
            if (l1 > b) {
                l3 = l1;
                if ((l2 + l1) - ((a) (k1)).d > b)
                    l3 = b;
            }
        }
        return l3;
    }

    void a(k k1, long l1) {
        int i1 = k1.a().hashCode();
        k1 = (a)k.get(Integer.valueOf(i1));
        if (k1 != null)
            k1.d = l1;
    }

    void a(k k1, Object obj, long l1, long l2, long l3, w w) {
        a a1;
        int i1 = k1.a().hashCode();
        a1 = (a)k.get(Integer.valueOf(i1));
        if (a1 == null)
            a1 = n(k1);
        a1;
        JVM INSTR monitorenter ;
        if (l2 != 0L) goto _L2; else goto _L1
_L1:
        if (!a1.a.isEmpty()) goto _L2; else goto _L3
_L3:
        a.e(l1);
        k1.a(obj, w);
        a1.c = l3;
        a1;
        JVM INSTR monitorexit ;
_L4:
        return;
_L2:
        long l4 = l2;
        if (l2 <= b)
            break MISSING_BLOCK_LABEL_135;
        l4 = l2;
        if ((l3 + l2) - a1.c > b)
            l4 = b;
        b b1;
        b1 = JVM INSTR new #11  <Class c$b>;
        b1.b(l4 + l3, obj, l1, w);
        a1.a.addLast(b1);
        a1.b = a1.b + l1;
        l.addAndGet(l1);
        b(k1, l4, a1.b);
        boolean flag;
        if (l.get() > j)
            flag = true;
        else
            flag = false;
        a1;
        JVM INSTR monitorexit ;
        if (flag)
            a(k1, false);
        l1 = b1.a;
        k1.d().a(new Runnable(k1, a1, l1) {

            final k a;
            final a b;
            final long c;
            final c d;

            public void run() {
                c.a(d, a, b, c);
            }

             {
                d = c.this;
                a = k1;
                b = a1;
                c = l1;
                super();
            }
        }
, l4, TimeUnit.MILLISECONDS);
          goto _L4
        k1;
        a1;
        JVM INSTR monitorexit ;
        throw k1;
    }

    void a(ScheduledExecutorService scheduledexecutorservice) {
        if (scheduledexecutorservice == null) {
            throw new NullPointerException("executor");
        } else {
            scheduledexecutorservice = new io.netty.handler.a.d(this, scheduledexecutorservice, "GlobalTC", c);
            a(((io.netty.handler.a.d) (scheduledexecutorservice)));
            scheduledexecutorservice.b();
            return;
        }
    }

    public void c(k k1) {
        n(k1);
        super.c(k1);
    }

    public void d(k k1) {
        a a1;
        d d1;
        d1 = k1.a();
        int i1 = d1.hashCode();
        a1 = (a)k.remove(Integer.valueOf(i1));
        if (a1 == null) goto _L2; else goto _L1
_L1:
        a1;
        JVM INSTR monitorenter ;
        if (d1.G()) {
            b b1;
            for (Iterator iterator1 = a1.a.iterator(); iterator1.hasNext(); k1.a(b1.b, b1.d)) {
                b1 = (b)iterator1.next();
                long l1 = a(b1.b);
                a.e(l1);
                a1.b = a1.b - l1;
                l.addAndGet(-l1);
            }

            break MISSING_BLOCK_LABEL_220;
        }
        break MISSING_BLOCK_LABEL_148;
        k1;
        a1;
        JVM INSTR monitorexit ;
        throw k1;
        l.addAndGet(-a1.b);
        Iterator iterator = a1.a.iterator();
        do {
            if (!iterator.hasNext())
                break;
            b b2 = (b)iterator.next();
            if (b2.b instanceof h)
                ((h)b2.b).B();
        } while (true);
        a1.a.clear();
        a1;
        JVM INSTR monitorexit ;
_L2:
        m(k1);
        k(k1);
        super.d(k1);
        return;
    }
}
