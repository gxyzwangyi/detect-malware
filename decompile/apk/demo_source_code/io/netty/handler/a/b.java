// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.a;

import io.netty.buffer.h;
import io.netty.channel.d;
import io.netty.channel.e;
import io.netty.channel.k;
import io.netty.channel.w;
import io.netty.util.concurrent.i;
import io.netty.util.internal.logging.c;
import java.util.AbstractCollection;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Iterator;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;

// Referenced classes of package io.netty.handler.a:
//            a, d

public class io.netty.handler.a.b extends io.netty.handler.a.a {
    static final class a {

        ArrayDeque a;
        io.netty.handler.a.d b;
        long c;
        long d;
        long e;

        a() {
        }
    }

    private static final class b {

        final long a;
        final Object b;
        final w c;
        final long d;

        private b(long l1, Object obj, long l2, w w) {
            a = l1;
            b = obj;
            d = l2;
            c = w;
        }

        b(long l1, Object obj, long l2, w w, _cls1 _pcls1) {
            this(l1, obj, l2, w);
        }
    }


    private static final io.netty.util.internal.logging.b l = io.netty.util.internal.logging.c.a(io/netty/handler/a/b);
    final ConcurrentMap j;
    volatile long k;
    private final AtomicLong m;
    private final AtomicLong n;
    private final AtomicLong o;
    private volatile long p;
    private volatile long q;
    private volatile float r;
    private volatile float s;
    private volatile float t;
    private volatile boolean u;
    private volatile boolean v;

    private long a(float f1, float f2, long l1) {
        if (f2 != 0.0F) goto _L2; else goto _L1
_L1:
        long l2 = l1;
_L4:
        return l2;
_L2:
        f1 /= f2;
        if (f1 <= r)
            break; /* Loop/switch isn't completed */
        l2 = l1;
        if (f1 < 1.0F - r)
            continue; /* Loop/switch isn't completed */
        f2 = t;
        f1 = f2;
        l2 = l1;
        if (l1 < 10L) {
            l2 = 10L;
            f1 = f2;
        }
_L5:
        l2 = (long)(f1 * (float)l2);
        if (true) goto _L4; else goto _L3
_L3:
        f1 = s;
        l2 = l1;
          goto _L5
        if (true) goto _L4; else goto _L6
_L6:
    }

    private void a(k k1, a a1, long l1) {
        a1;
        JVM INSTR monitorenter ;
        b b1 = (b)a1.a.pollFirst();
_L1:
        if (b1 == null)
            break MISSING_BLOCK_LABEL_122;
label0:
        {
            if (b1.a > l1)
                break label0;
            long l2 = b1.d;
            a.e(l2);
            a1.b.e(l2);
            a1.c = a1.c - l2;
            m.addAndGet(-l2);
            k1.a(b1.b, b1.c);
            a1.d = l1;
            b1 = (b)a1.a.pollFirst();
        }
          goto _L1
        a1.a.addFirst(b1);
        if (a1.a.isEmpty())
            m(k1);
        a1;
        JVM INSTR monitorexit ;
        k1.n();
        return;
        k1;
        a1;
        JVM INSTR monitorexit ;
        throw k1;
    }

    static void a(io.netty.handler.a.b b1, k k1, a a1, long l1) {
        b1.a(k1, a1, l1);
    }

    private void f() {
        Iterator iterator = j.values().iterator();
        long l4 = 0L;
        long l3 = 0L;
        long l6 = 0xffffffffL;
        long l1 = 0xffffffffL;
        while (iterator.hasNext())  {
            a a1 = (a)iterator.next();
            long l5 = a1.b.e();
            long l2 = l4;
            if (l4 < l5)
                l2 = l5;
            l4 = l6;
            if (l6 > l5)
                l4 = l5;
            l6 = a1.b.f();
            l5 = l3;
            if (l3 < l6)
                l5 = l6;
            if (l1 > l6)
                l1 = l6;
            l6 = l4;
            l3 = l5;
            l4 = l2;
        }
        boolean flag;
        boolean flag1;
        if (j.size() > 1)
            flag = true;
        else
            flag = false;
        if (flag && l1 < l3 / 2L)
            flag1 = true;
        else
            flag1 = false;
        u = flag1;
        if (flag && l6 < l4 / 2L)
            flag1 = true;
        else
            flag1 = false;
        v = flag1;
        n.set(l4);
        o.set(l3);
    }

    private a n(k k1) {
        Integer integer = Integer.valueOf(k1.a().hashCode());
        a a2 = (a)j.get(integer);
        a a1 = a2;
        if (a2 == null) {
            a1 = new a();
            a1.a = new ArrayDeque();
            a1.b = new io.netty.handler.a.d(this, null, (new StringBuilder()).append("ChannelTC").append(k1.a().hashCode()).toString(), c);
            a1.c = 0L;
            a1.e = io.netty.handler.a.d.a();
            a1.d = a1.e;
            j.put(integer, a1);
        }
        return a1;
    }

    protected long a(k k1, long l1, long l2) {
        int i1 = k1.a().hashCode();
        k1 = (a)j.get(Integer.valueOf(i1));
        long l3 = l1;
        if (k1 != null) {
            l3 = l1;
            if (l1 > b) {
                l3 = l1;
                if ((l2 + l1) - ((a) (k1)).e > b)
                    l3 = b;
            }
        }
        return l3;
    }

    protected void a(k k1, long l1) {
        int i1 = k1.a().hashCode();
        k1 = (a)j.get(Integer.valueOf(i1));
        if (k1 != null)
            k1.e = l1;
    }

    public void a(k k1, Object obj) {
        long l2 = a(obj);
        long l6 = io.netty.handler.a.d.a();
        if (l2 > 0L) {
            long l3 = a.a(l2, d(), b, l6);
            int i1 = k1.a().hashCode();
            a a1 = (a)j.get(Integer.valueOf(i1));
            long l1 = 0L;
            if (a1 != null) {
                long l4 = a1.b.a(l2, q, b, l6);
                l1 = l4;
                if (u) {
                    l2 = a1.b.f();
                    long l5 = o.get();
                    l1 = l2;
                    if (l2 <= 0L)
                        l1 = 0L;
                    l2 = l5;
                    if (l5 < l1)
                        l2 = l1;
                    l1 = a(l1, l2, l4);
                }
            }
            l2 = l1;
            if (l1 < l3)
                l2 = l3;
            l1 = a(k1, l2, l6);
            if (l1 >= 10L) {
                e e1 = k1.a().E();
                if (l.b())
                    l.a((new StringBuilder()).append("Read Suspend: ").append(l1).append(':').append(e1.f()).append(':').append(l(k1)).toString());
                if (e1.f() && l(k1)) {
                    e1.a(false);
                    k1.a(d).set(Boolean.valueOf(true));
                    io.netty.util.b b1 = k1.a(e);
                    Runnable runnable = (Runnable)b1.get();
                    Object obj1 = runnable;
                    if (runnable == null) {
                        obj1 = new a.a(k1);
                        b1.set(obj1);
                    }
                    k1.d().a(((Runnable) (obj1)), l1, TimeUnit.MILLISECONDS);
                    if (l.b())
                        l.a((new StringBuilder()).append("Suspend final status => ").append(e1.f()).append(':').append(l(k1)).append(" will reopened at: ").append(l1).toString());
                }
            }
        }
        a(k1, l6);
        k1.b(obj);
    }

    protected void a(k k1, Object obj, long l1, long l2, long l3, w w) {
        a a1;
        int i1 = k1.a().hashCode();
        a1 = (a)j.get(Integer.valueOf(i1));
        if (a1 == null)
            a1 = n(k1);
        a1;
        JVM INSTR monitorenter ;
        if (l2 != 0L) goto _L2; else goto _L1
_L1:
        if (!a1.a.isEmpty()) goto _L2; else goto _L3
_L3:
        a.e(l1);
        a1.b.e(l1);
        k1.a(obj, w);
        a1.d = l3;
        a1;
        JVM INSTR monitorexit ;
_L4:
        return;
_L2:
        long l4 = l2;
        if (l2 <= b)
            break MISSING_BLOCK_LABEL_144;
        l4 = l2;
        if ((l3 + l2) - a1.d > b)
            l4 = b;
        b b1;
        b1 = JVM INSTR new #15  <Class b$b>;
        b1.b(l4 + l3, obj, l1, w);
        a1.a.addLast(b1);
        a1.c = a1.c + l1;
        m.addAndGet(l1);
        b(k1, l4, a1.c);
        boolean flag;
        if (m.get() > k)
            flag = true;
        else
            flag = false;
        a1;
        JVM INSTR monitorexit ;
        if (flag)
            a(k1, false);
        l1 = b1.a;
        k1.d().a(new Runnable(k1, a1, l1) {

            final k a;
            final a b;
            final long c;
            final io.netty.handler.a.b d;

            public void run() {
                io.netty.handler.a.b.a(d, a, b, c);
            }

             {
                d = io.netty.handler.a.b.this;
                a = k1;
                b = a1;
                c = l1;
                super();
            }
        }
, l4, TimeUnit.MILLISECONDS);
          goto _L4
        k1;
        a1;
        JVM INSTR monitorexit ;
        throw k1;
    }

    public void a(k k1, Object obj, w w) {
        long l6;
        long l7;
        l7 = a(obj);
        l6 = io.netty.handler.a.d.a();
        if (l7 <= 0L) goto _L2; else goto _L1
_L1:
        long l3 = a.b(l7, c(), b, l6);
        int i1 = k1.a().hashCode();
        a a1 = (a)j.get(Integer.valueOf(i1));
        long l1;
        if (a1 != null) {
            long l4 = a1.b.b(l7, p, b, l6);
            if (v) {
                long l2 = a1.b.e();
                long l5 = n.get();
                l1 = l2;
                if (l2 <= 0L)
                    l1 = 0L;
                l2 = l5;
                if (l5 < l1)
                    l2 = l1;
                l1 = a(l1, l2, l4);
            } else {
                l1 = l4;
            }
        } else {
            l1 = 0L;
        }
        if (l1 < l3)
            l1 = l3;
        if (l1 < 10L) goto _L2; else goto _L3
_L3:
        if (l.b())
            l.a((new StringBuilder()).append("Write suspend: ").append(l1).append(':').append(k1.a().E().f()).append(':').append(l(k1)).toString());
        a(k1, obj, l7, l1, l6, w);
_L5:
        return;
_L2:
        a(k1, obj, l7, 0L, l6, w);
        if (true) goto _L5; else goto _L4
_L4:
    }

    int b() {
        return 3;
    }

    protected void b(io.netty.handler.a.d d1) {
        f();
        super.b(d1);
    }

    public void c(k k1) {
        n(k1);
        a.g();
        super.c(k1);
    }

    public void d(k k1) {
        a a1;
        d d1;
        a.g();
        d1 = k1.a();
        int i1 = d1.hashCode();
        a1 = (a)j.remove(Integer.valueOf(i1));
        if (a1 == null) goto _L2; else goto _L1
_L1:
        a1;
        JVM INSTR monitorenter ;
        if (d1.G()) {
            b b1;
            for (Iterator iterator = a1.a.iterator(); iterator.hasNext(); k1.a(b1.b, b1.c)) {
                b1 = (b)iterator.next();
                long l1 = a(b1.b);
                a.e(l1);
                a1.b.e(l1);
                a1.c = a1.c - l1;
                m.addAndGet(-l1);
            }

            break MISSING_BLOCK_LABEL_236;
        }
        break MISSING_BLOCK_LABEL_164;
        k1;
        a1;
        JVM INSTR monitorexit ;
        throw k1;
        m.addAndGet(-a1.c);
        Iterator iterator1 = a1.a.iterator();
        do {
            if (!iterator1.hasNext())
                break;
            b b2 = (b)iterator1.next();
            if (b2.b instanceof h)
                ((h)b2.b).B();
        } while (true);
        a1.a.clear();
        a1;
        JVM INSTR monitorexit ;
_L2:
        m(k1);
        k(k1);
        super.d(k1);
        return;
    }

    public String toString() {
        return (new StringBuilder(340)).append(super.toString()).append(" Write Channel Limit: ").append(p).append(" Read Channel Limit: ").append(q).toString();
    }


    // Unreferenced inner class io/netty/handler/a/b$1

/* anonymous class */
    class _cls1 extends AbstractCollection {

        final io.netty.handler.a.b a;

        public Iterator iterator() {
            return new Iterator(this) {

                final Iterator a;
                final _cls1 b;

                public io.netty.handler.a.d a() {
                    return ((a)a.next()).b;
                }

                public boolean hasNext() {
                    return a.hasNext();
                }

                public Object next() {
                    return a();
                }

                public void remove() {
                    throw new UnsupportedOperationException();
                }

             {
                b = _pcls1;
                super();
                a = b.a.j.values().iterator();
            }
            }
;
        }

        public int size() {
            return a.j.size();
        }
    }

}
