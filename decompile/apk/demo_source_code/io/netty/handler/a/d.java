// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.a;

import io.netty.util.internal.logging.b;
import io.netty.util.internal.logging.c;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicLong;

// Referenced classes of package io.netty.handler.a:
//            a

public class d {
    private final class a
        implements Runnable {

        final d a;

        public void run() {
            if (a.h) {
                a.a(d.a());
                if (a.d != null)
                    a.d.b(a);
                a.g = a.e.schedule(this, a.b.get(), TimeUnit.MILLISECONDS);
            }
        }

        private a() {
            a = d.this;
            super();
        }

    }


    private static final b i = io.netty.util.internal.logging.c.a(io/netty/handler/a/d);
    final AtomicLong a = new AtomicLong();
    final AtomicLong b = new AtomicLong(1000L);
    final String c;
    final io.netty.handler.a.a d;
    final ScheduledExecutorService e;
    Runnable f;
    volatile ScheduledFuture g;
    volatile boolean h;
    private final AtomicLong j = new AtomicLong();
    private final AtomicLong k = new AtomicLong();
    private long l;
    private long m;
    private final AtomicLong n = new AtomicLong();
    private final AtomicLong o = new AtomicLong();
    private long p;
    private long q;
    private long r;
    private volatile long s;
    private volatile long t;
    private volatile long u;
    private volatile long v;
    private final AtomicLong w = new AtomicLong();
    private long x;

    public d(io.netty.handler.a.a a1, ScheduledExecutorService scheduledexecutorservice, String s1, long l1) {
        if (a1 == null)
            throw new IllegalArgumentException("trafficShapingHandler");
        if (s1 == null) {
            throw new NullPointerException("name");
        } else {
            d = a1;
            e = scheduledexecutorservice;
            c = s1;
            f(l1);
            return;
        }
    }

    public static long a() {
        return System.nanoTime() / 0xf4240L;
    }

    private void f(long l1) {
        p = System.currentTimeMillis();
        l = a();
        m = l;
        u = l;
        v = l;
        b(l1);
    }

    public long a(long l1, long l2, long l3, long l4) {
        c(l1);
        if (l1 == 0L || l2 == 0L) {
            l1 = 0L;
        } else {
            long l6 = a.get();
            long l8 = k.get();
            long l5 = m;
            l1 = t;
            long l7 = l4 - l6;
            l6 = Math.max(v - l6, 0L);
            if (l7 > 10L) {
                l1 = ((1000L * l8) / l2 - l7) + l6;
                if (l1 > 10L) {
                    if (i.b())
                        i.a((new StringBuilder()).append("Time: ").append(l1).append(':').append(l8).append(':').append(l7).append(':').append(l6).toString());
                    if (l1 > l3 && (l4 + l1) - l5 > l3)
                        l1 = l3;
                    m = Math.max(l5, l4 + l1);
                } else {
                    m = Math.max(l5, l4);
                    l1 = 0L;
                }
            } else {
                l8 += l1;
                l7 += b.get();
                l1 = ((1000L * l8) / l2 - l7) + l6;
                if (l1 > 10L) {
                    if (i.b())
                        i.a((new StringBuilder()).append("Time: ").append(l1).append(':').append(l8).append(':').append(l7).append(':').append(l6).toString());
                    if (l1 > l3 && (l4 + l1) - l5 > l3)
                        l1 = l3;
                    m = Math.max(l5, l4 + l1);
                } else {
                    m = Math.max(l5, l4);
                    l1 = 0L;
                }
            }
        }
        return l1;
    }

    void a(long l1) {
        this;
        JVM INSTR monitorenter ;
        long l2 = a.getAndSet(l1);
        l1 -= l2;
        if (l1 != 0L) goto _L2; else goto _L1
_L1:
        this;
        JVM INSTR monitorexit ;
        return;
_L2:
        if (i.b() && l1 > d() << 1) {
            b b1 = i;
            StringBuilder stringbuilder = JVM INSTR new #146 <Class StringBuilder>;
            stringbuilder.StringBuilder();
            b1.a(stringbuilder.append("Acct schedule not ok: ").append(l1).append(" > 2*").append(d()).append(" from ").append(c).toString());
        }
        t = k.getAndSet(0L);
        s = j.getAndSet(0L);
        r = (t * 1000L) / l1;
        q = (s * 1000L) / l1;
        x = (w.getAndSet(0L) * 1000L) / l1;
        u = Math.max(u, l);
        v = Math.max(v, m);
        if (true) goto _L1; else goto _L3
_L3:
        Exception exception;
        exception;
        throw exception;
    }

    public long b(long l1, long l2, long l3, long l4) {
        d(l1);
        if (l1 == 0L || l2 == 0L) {
            l1 = 0L;
        } else {
            long l8 = a.get();
            long l7 = j.get();
            l1 = s;
            long l5 = l;
            long l6 = Math.max(u - l8, 0L);
            l8 = l4 - l8;
            if (l8 > 10L) {
                l1 = ((1000L * l7) / l2 - l8) + l6;
                if (l1 > 10L) {
                    if (i.b())
                        i.a((new StringBuilder()).append("Time: ").append(l1).append(':').append(l7).append(':').append(l8).append(':').append(l6).toString());
                    if (l1 > l3 && (l4 + l1) - l5 > l3)
                        l1 = l3;
                    l = Math.max(l5, l4 + l1);
                } else {
                    l = Math.max(l5, l4);
                    l1 = 0L;
                }
            } else {
                l7 += l1;
                l8 += b.get();
                l1 = ((1000L * l7) / l2 - l8) + l6;
                if (l1 > 10L) {
                    if (i.b())
                        i.a((new StringBuilder()).append("Time: ").append(l1).append(':').append(l7).append(':').append(l8).append(':').append(l6).toString());
                    if (l1 > l3 && (l4 + l1) - l5 > l3)
                        l1 = l3;
                    l = Math.max(l5, l4 + l1);
                } else {
                    l = Math.max(l5, l4);
                    l1 = 0L;
                }
            }
        }
        return l1;
    }

    public void b() {
        this;
        JVM INSTR monitorenter ;
        boolean flag = h;
        if (!flag) goto _L2; else goto _L1
_L1:
        this;
        JVM INSTR monitorexit ;
        return;
_L2:
        long l1;
        a.set(a());
        l1 = b.get();
        if (l1 <= 0L)
            continue; /* Loop/switch isn't completed */
        if (e != null) {
            h = true;
            a a1 = JVM INSTR new #8   <Class d$a>;
            a1.this. a();
            f = a1;
            g = e.schedule(f, l1, TimeUnit.MILLISECONDS);
        }
        if (true) goto _L1; else goto _L3
_L3:
        Exception exception;
        exception;
        throw exception;
    }

    public void b(long l1) {
        l1 = (l1 / 10L) * 10L;
        if (b.getAndSet(l1) != l1)
            if (l1 <= 0L) {
                c();
                a.set(a());
            } else {
                b();
            }
    }

    public void c() {
        this;
        JVM INSTR monitorenter ;
        boolean flag = h;
        if (flag) goto _L2; else goto _L1
_L1:
        this;
        JVM INSTR monitorexit ;
        return;
_L2:
        h = false;
        a(a());
        if (d != null)
            d.b(this);
        if (g != null)
            g.cancel(true);
        if (true) goto _L1; else goto _L3
_L3:
        Exception exception;
        exception;
        throw exception;
    }

    void c(long l1) {
        k.addAndGet(l1);
        o.addAndGet(l1);
    }

    public long d() {
        return b.get();
    }

    void d(long l1) {
        j.addAndGet(l1);
        n.addAndGet(l1);
    }

    public long e() {
        return n.get();
    }

    void e(long l1) {
        w.addAndGet(l1);
    }

    public long f() {
        return o.get();
    }

    public void g() {
        p = System.currentTimeMillis();
        o.set(0L);
        n.set(0L);
    }

    public String toString() {
        return (new StringBuilder(165)).append("Monitor ").append(c).append(" Current Speed Read: ").append(r >> 10).append(" KB/s, ").append("Asked Write: ").append(q >> 10).append(" KB/s, ").append("Real Write: ").append(x >> 10).append(" KB/s, ").append("Current Read: ").append(k.get() >> 10).append(" KB, ").append("Current asked Write: ").append(j.get() >> 10).append(" KB, ").append("Current real Write: ").append(w.get() >> 10).append(" KB").toString();
    }

}
