// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.ssl;

import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.cert.X509Certificate;
import javax.net.ssl.*;
import org.apache.tomcat.jni.SSLContext;

// Referenced classes of package io.netty.handler.ssl:
//            u, r, ab, x, 
//            z, d, ApplicationProtocolConfig, ClientAuth, 
//            s, ac, w

public final class aa extends u {
    private static final class a extends u.a {

        private final X509ExtendedTrustManager a;

        a(w w, X509ExtendedTrustManager x509extendedtrustmanager) {
            super(w);
            a = x509extendedtrustmanager;
        }
    }

    private static final class b extends u.a {

        private final X509TrustManager a;

        b(w w, X509TrustManager x509trustmanager) {
            super(w);
            a = x509trustmanager;
        }
    }


    private static final byte i[] = {
        110, 101, 116, 116, 121
    };
    private final ab j;
    private final z k;

    aa(X509Certificate ax509certificate[], TrustManagerFactory trustmanagerfactory, X509Certificate ax509certificate1[], PrivateKey privatekey, String s, KeyManagerFactory keymanagerfactory, Iterable iterable, 
            d d, ApplicationProtocolConfig applicationprotocolconfig, long l, long l1, ClientAuth clientauth) {
        this(ax509certificate, trustmanagerfactory, ax509certificate1, privatekey, s, keymanagerfactory, iterable, d, a(applicationprotocolconfig), l, l1, clientauth);
    }

    private aa(X509Certificate ax509certificate[], TrustManagerFactory trustmanagerfactory, X509Certificate ax509certificate1[], PrivateKey privatekey, String s, KeyManagerFactory keymanagerfactory, Iterable iterable, 
            d d, s s1, long l, long l1, ClientAuth clientauth) {
        super(iterable, d, s1, l, l1, 1, ax509certificate1, clientauth);
        io/netty/handler/ssl/u;
        JVM INSTR monitorenter ;
        SSLContext.setVerify(a, 0, 10);
        if (r.e()) goto _L2; else goto _L1
_L1:
        if (keymanagerfactory == null)
            break MISSING_BLOCK_LABEL_81;
        try {
            ax509certificate = JVM INSTR new #57  <Class IllegalArgumentException>;
            ax509certificate.IllegalArgumentException("KeyManagerFactory not supported");
            throw ax509certificate;
        }
        // Misplaced declaration of an exception variable
        catch (X509Certificate ax509certificate[]) { }
        trustmanagerfactory = JVM INSTR new #64  <Class SSLException>;
        trustmanagerfactory.SSLException("failed to set certificate and key", ax509certificate);
        throw trustmanagerfactory;
        ax509certificate;
        io/netty/handler/ssl/u;
        JVM INSTR monitorexit ;
        throw ax509certificate;
        ax509certificate;
        e();
        throw ax509certificate;
        SSLContext.setVerify(a, 0, 10);
        a(a, ax509certificate1, privatekey, s);
        k = null;
_L5:
        if (ax509certificate == null) goto _L4; else goto _L3
_L3:
        ax509certificate = a(ax509certificate, trustmanagerfactory);
_L8:
        ax509certificate = a(ax509certificate.getTrustManagers());
        if (!a(ax509certificate))
            break MISSING_BLOCK_LABEL_317;
        l = a;
        trustmanagerfactory = JVM INSTR new #6   <Class aa$a>;
        trustmanagerfactory.a(e, (X509ExtendedTrustManager)ax509certificate);
        SSLContext.setCertVerifyCallback(l, trustmanagerfactory);
_L9:
        io/netty/handler/ssl/u;
        JVM INSTR monitorexit ;
        ax509certificate = JVM INSTR new #105 <Class ab>;
        ax509certificate.ab(this);
        j = ax509certificate;
        j.a(i);
        return;
_L2:
        iterable = keymanagerfactory;
        if (ax509certificate1 == null)
            break MISSING_BLOCK_LABEL_210;
        iterable = a(ax509certificate1, privatekey, s, keymanagerfactory);
        if (iterable == null)
            break MISSING_BLOCK_LABEL_271;
        privatekey = a(iterable.getKeyManagers());
        if (!a(privatekey))
            break MISSING_BLOCK_LABEL_256;
        ax509certificate1 = JVM INSTR new #130 <Class x>;
        ax509certificate1.x((X509ExtendedKeyManager)privatekey, s);
_L6:
        k = ax509certificate1;
          goto _L5
        ax509certificate1 = new z(privatekey, s);
          goto _L6
        k = null;
          goto _L5
_L4:
        ax509certificate = trustmanagerfactory;
        if (trustmanagerfactory != null) goto _L8; else goto _L7
_L7:
        ax509certificate = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        ax509certificate.init((KeyStore)null);
          goto _L8
        trustmanagerfactory;
        ax509certificate = JVM INSTR new #64  <Class SSLException>;
        ax509certificate.SSLException("unable to setup trustmanager", trustmanagerfactory);
        throw ax509certificate;
        l = a;
        trustmanagerfactory = JVM INSTR new #9   <Class aa$b>;
        trustmanagerfactory.b(e, ax509certificate);
        SSLContext.setCertVerifyCallback(l, trustmanagerfactory);
          goto _L9
    }

    public ac a() {
        return f();
    }

    z c() {
        return k;
    }

    public ab f() {
        return j;
    }

}
