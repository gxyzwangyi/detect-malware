// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.ssl;

import java.io.ByteArrayInputStream;
import java.math.BigInteger;
import java.security.Principal;
import java.security.PublicKey;
import java.security.cert.*;
import java.util.Date;
import java.util.Set;

// Referenced classes of package io.netty.handler.ssl:
//            ah

final class OpenSslX509Certificate extends X509Certificate {

    private final byte a[];
    private X509Certificate b;

    public OpenSslX509Certificate(byte abyte0[]) {
        a = abyte0;
    }

    private X509Certificate a() {
        X509Certificate x509certificate = b;
        Object obj = x509certificate;
        if (x509certificate == null)
            try {
                obj = ah.h;
                ByteArrayInputStream bytearrayinputstream = JVM INSTR new #29  <Class ByteArrayInputStream>;
                bytearrayinputstream.ByteArrayInputStream(a);
                obj = (X509Certificate)((CertificateFactory) (obj)).generateCertificate(bytearrayinputstream);
                b = ((X509Certificate) (obj));
            }
            catch (CertificateException certificateexception) {
                throw new IllegalStateException(certificateexception);
            }
        return ((X509Certificate) (obj));
    }

    public void checkValidity() {
        a().checkValidity();
    }

    public void checkValidity(Date date) {
        a().checkValidity(date);
    }

    public int getBasicConstraints() {
        return a().getBasicConstraints();
    }

    public Set getCriticalExtensionOIDs() {
        return a().getCriticalExtensionOIDs();
    }

    public byte[] getEncoded() {
        return (byte[])a.clone();
    }

    public byte[] getExtensionValue(String s) {
        return a().getExtensionValue(s);
    }

    public Principal getIssuerDN() {
        return a().getIssuerDN();
    }

    public boolean[] getIssuerUniqueID() {
        return a().getIssuerUniqueID();
    }

    public boolean[] getKeyUsage() {
        return a().getKeyUsage();
    }

    public Set getNonCriticalExtensionOIDs() {
        return a().getNonCriticalExtensionOIDs();
    }

    public Date getNotAfter() {
        return a().getNotAfter();
    }

    public Date getNotBefore() {
        return a().getNotBefore();
    }

    public PublicKey getPublicKey() {
        return a().getPublicKey();
    }

    public BigInteger getSerialNumber() {
        return a().getSerialNumber();
    }

    public String getSigAlgName() {
        return a().getSigAlgName();
    }

    public String getSigAlgOID() {
        return a().getSigAlgOID();
    }

    public byte[] getSigAlgParams() {
        return a().getSigAlgParams();
    }

    public byte[] getSignature() {
        return a().getSignature();
    }

    public Principal getSubjectDN() {
        return a().getSubjectDN();
    }

    public boolean[] getSubjectUniqueID() {
        return a().getSubjectUniqueID();
    }

    public byte[] getTBSCertificate() {
        return a().getTBSCertificate();
    }

    public int getVersion() {
        return a().getVersion();
    }

    public boolean hasUnsupportedCriticalExtension() {
        return a().hasUnsupportedCriticalExtension();
    }

    public String toString() {
        return a().toString();
    }

    public void verify(PublicKey publickey) {
        a().verify(publickey);
    }

    public void verify(PublicKey publickey, String s) {
        a().verify(publickey, s);
    }
}
