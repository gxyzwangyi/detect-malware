// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.ssl;

import java.nio.ByteBuffer;
import javax.net.ssl.*;

// Referenced classes of package io.netty.handler.ssl:
//            q

class o extends SSLEngine {

    private final SSLEngine a;
    private final q b;

    o(SSLEngine sslengine) {
        a = sslengine;
        b = new q(sslengine);
    }

    public q b() {
        return b;
    }

    public void beginHandshake() {
        a.beginHandshake();
    }

    public SSLEngine c() {
        return a;
    }

    public void closeInbound() {
        a.closeInbound();
    }

    public void closeOutbound() {
        a.closeOutbound();
    }

    public Runnable getDelegatedTask() {
        return a.getDelegatedTask();
    }

    public boolean getEnableSessionCreation() {
        return a.getEnableSessionCreation();
    }

    public String[] getEnabledCipherSuites() {
        return a.getEnabledCipherSuites();
    }

    public String[] getEnabledProtocols() {
        return a.getEnabledProtocols();
    }

    public SSLSession getHandshakeSession() {
        return a.getHandshakeSession();
    }

    public javax.net.ssl.SSLEngineResult.HandshakeStatus getHandshakeStatus() {
        return a.getHandshakeStatus();
    }

    public boolean getNeedClientAuth() {
        return a.getNeedClientAuth();
    }

    public String getPeerHost() {
        return a.getPeerHost();
    }

    public int getPeerPort() {
        return a.getPeerPort();
    }

    public SSLParameters getSSLParameters() {
        return a.getSSLParameters();
    }

    public SSLSession getSession() {
        return b();
    }

    public String[] getSupportedCipherSuites() {
        return a.getSupportedCipherSuites();
    }

    public String[] getSupportedProtocols() {
        return a.getSupportedProtocols();
    }

    public boolean getUseClientMode() {
        return a.getUseClientMode();
    }

    public boolean getWantClientAuth() {
        return a.getWantClientAuth();
    }

    public boolean isInboundDone() {
        return a.isInboundDone();
    }

    public boolean isOutboundDone() {
        return a.isOutboundDone();
    }

    public void setEnableSessionCreation(boolean flag) {
        a.setEnableSessionCreation(flag);
    }

    public void setEnabledCipherSuites(String as[]) {
        a.setEnabledCipherSuites(as);
    }

    public void setEnabledProtocols(String as[]) {
        a.setEnabledProtocols(as);
    }

    public void setNeedClientAuth(boolean flag) {
        a.setNeedClientAuth(flag);
    }

    public void setSSLParameters(SSLParameters sslparameters) {
        a.setSSLParameters(sslparameters);
    }

    public void setUseClientMode(boolean flag) {
        a.setUseClientMode(flag);
    }

    public void setWantClientAuth(boolean flag) {
        a.setWantClientAuth(flag);
    }

    public SSLEngineResult unwrap(ByteBuffer bytebuffer, ByteBuffer bytebuffer1) {
        return a.unwrap(bytebuffer, bytebuffer1);
    }

    public SSLEngineResult unwrap(ByteBuffer bytebuffer, ByteBuffer abytebuffer[]) {
        return a.unwrap(bytebuffer, abytebuffer);
    }

    public SSLEngineResult unwrap(ByteBuffer bytebuffer, ByteBuffer abytebuffer[], int i, int j) {
        return a.unwrap(bytebuffer, abytebuffer, i, j);
    }

    public SSLEngineResult wrap(ByteBuffer bytebuffer, ByteBuffer bytebuffer1) {
        return a.wrap(bytebuffer, bytebuffer1);
    }

    public SSLEngineResult wrap(ByteBuffer abytebuffer[], int i, int j, ByteBuffer bytebuffer) {
        return a.wrap(abytebuffer, i, j, bytebuffer);
    }

    public SSLEngineResult wrap(ByteBuffer abytebuffer[], ByteBuffer bytebuffer) {
        return a.wrap(abytebuffer, bytebuffer);
    }
}
