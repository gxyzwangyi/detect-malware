// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.ssl;

import java.util.HashMap;
import java.util.Map;
import javax.net.ssl.SSLException;
import javax.net.ssl.X509KeyManager;
import org.apache.tomcat.jni.SSL;

// Referenced classes of package io.netty.handler.ssl:
//            u, OpenSslEngine

class z {

    private static final Map a;
    private final X509KeyManager b;
    private final String c;

    z(X509KeyManager x509keymanager, String s) {
        b = x509keymanager;
        c = s;
    }

    private void a(long l, String s) {
        java.security.cert.X509Certificate ax509certificate[];
        java.security.PrivateKey privatekey;
        privatekey = b.getPrivateKey(s);
        ax509certificate = b.getCertificateChain(s);
        if (ax509certificate == null)
            break MISSING_BLOCK_LABEL_260;
        long l1;
        if (ax509certificate.length == 0)
            break MISSING_BLOCK_LABEL_260;
        l1 = u.a(b.getCertificateChain(s));
        if (privatekey == null) goto _L2; else goto _L1
_L1:
        long l2 = u.a(privatekey);
_L6:
        long l3;
        long l4;
        l3 = l1;
        l4 = l2;
        SSL.setCertificateBio(l, l1, l2, c);
        l3 = l1;
        l4 = l2;
        SSL.setCertificateChainBio(l, l1, false);
_L7:
        if (l2 != 0L)
            SSL.freeBIO(l2);
        if (l1 != 0L)
            SSL.freeBIO(l1);
        return;
        s;
        l1 = 0L;
        l2 = 0L;
_L5:
        l3 = l1;
        l4 = l2;
        throw s;
        s;
        l1 = l3;
_L3:
        if (l4 != 0L)
            SSL.freeBIO(l4);
        if (l1 != 0L)
            SSL.freeBIO(l1);
        throw s;
        s;
        l1 = 0L;
        l2 = 0L;
_L4:
        l3 = l1;
        l4 = l2;
        SSLException sslexception = JVM INSTR new #56  <Class SSLException>;
        l3 = l1;
        l4 = l2;
        sslexception.SSLException(s);
        l3 = l1;
        l4 = l2;
        throw sslexception;
        s;
        l1 = 0L;
        l4 = 0L;
          goto _L3
        s;
        l4 = 0L;
          goto _L3
        s;
        l2 = 0L;
          goto _L4
        s;
          goto _L4
        s;
        l2 = 0L;
        continue; /* Loop/switch isn't completed */
        s;
        if (true) goto _L5; else goto _L2
_L2:
        l2 = 0L;
          goto _L6
        l1 = 0L;
        l2 = 0L;
          goto _L7
    }

    protected String a(OpenSslEngine opensslengine, String s) {
        return b.chooseServerAlias(s, null, null);
    }

    void a(OpenSslEngine opensslengine) {
        long l = opensslengine.a();
        String as[] = SSL.authenticationMethods(l);
        int j = as.length;
        for (int i = 0; i < j; i++) {
            String s = as[i];
            s = (String)a.get(s);
            if (s != null)
                a(l, a(opensslengine, s));
        }

    }

    static  {
        a = new HashMap();
        a.put("RSA", "RSA");
        a.put("DHE_RSA", "RSA");
        a.put("ECDHE_RSA", "RSA");
        a.put("ECDHE_ECDSA", "EC");
        a.put("ECDH_RSA", "EC_RSA");
        a.put("ECDH_ECDSA", "EC_EC");
        a.put("DH_RSA", "DH_RSA");
    }
}
