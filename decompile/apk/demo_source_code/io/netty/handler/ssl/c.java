// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.ssl;

import io.netty.util.internal.PlatformDependent;
import io.netty.util.internal.logging.b;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.ConcurrentMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

final class c {

    private static final b a = io.netty.util.internal.logging.c.a(io/netty/handler/ssl/c);
    private static final Pattern b = Pattern.compile("^(?:TLS|SSL)_((?:(?!_WITH_).)+)_WITH_(.*)_(.*)$");
    private static final Pattern c = Pattern.compile("^(?:((?:(?:EXP-)?(?:(?:DHE|EDH|ECDH|ECDHE|SRP)-(?:DSS|RSA|ECDSA)|(?:ADH|AECDH|KRB5|PSK|SRP)))|EXP)-)?(.*)-(.*)$");
    private static final Pattern d = Pattern.compile("^(AES)_([0-9]+)_CBC$");
    private static final Pattern e = Pattern.compile("^(AES)_([0-9]+)_(.*)$");
    private static final Pattern f = Pattern.compile("^(AES)([0-9]+)$");
    private static final Pattern g = Pattern.compile("^(AES)([0-9]+)-(.*)$");
    private static final ConcurrentMap h = PlatformDependent.k();
    private static final ConcurrentMap i = PlatformDependent.k();

    private c() {
    }

    static String a(Iterable iterable) {
        StringBuilder stringbuilder = new StringBuilder();
        Iterator iterator = iterable.iterator();
        do {
label0:
            {
                if (iterator.hasNext()) {
                    iterable = (String)iterator.next();
                    if (iterable != null)
                        break label0;
                }
                String s;
                if (stringbuilder.length() > 0) {
                    stringbuilder.setLength(stringbuilder.length() - 1);
                    iterable = stringbuilder.toString();
                } else {
                    iterable = "";
                }
                return iterable;
            }
            s = a(((String) (iterable)));
            if (s != null)
                iterable = s;
            stringbuilder.append(iterable);
            stringbuilder.append(':');
        } while (true);
    }

    static String a(String s) {
        String s1 = (String)h.get(s);
        if (s1 != null)
            s = s1;
        else
            s = d(s);
        return s;
    }

    static String a(String s, String s1) {
        Object obj = (Map)i.get(s);
        String s2;
        if (obj == null)
            s = h(s);
        else
            s = ((String) (obj));
        s2 = (String)s.get(s1);
        obj = s2;
        if (s2 == null)
            obj = (new StringBuilder()).append(s1).append('_').append((String)s.get("")).toString();
        return ((String) (obj));
    }

    private static String a(String s, boolean flag) {
        if (s.length() != 0) goto _L2; else goto _L1
_L1:
        String s1 = "RSA";
_L4:
        s1 = s1.replace('-', '_');
        s = s1;
        if (flag)
            s = (new StringBuilder()).append(s1).append("_EXPORT").toString();
        return s;
_L2:
        if ("ADH".equals(s)) {
            s1 = "DH_anon";
        } else {
            s1 = s;
            if ("AECDH".equals(s))
                s1 = "ECDH_anon";
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    static String b(String s) {
        Object obj = b.matcher(s);
        if (!((Matcher) (obj)).matches()) {
            s = null;
        } else {
            String s1 = e(((Matcher) (obj)).group(1));
            s = f(((Matcher) (obj)).group(2));
            obj = g(((Matcher) (obj)).group(3));
            if (s1.length() == 0)
                s = (new StringBuilder()).append(s).append('-').append(((String) (obj))).toString();
            else
                s = (new StringBuilder()).append(s1).append('-').append(s).append('-').append(((String) (obj))).toString();
        }
        return s;
    }

    private static String b(String s, boolean flag) {
        if (!s.startsWith("AES")) goto _L2; else goto _L1
_L1:
        Matcher matcher = f.matcher(s);
        if (!matcher.matches()) goto _L4; else goto _L3
_L3:
        s = matcher.replaceFirst("$1_$2_CBC");
_L6:
        return s;
_L4:
        Matcher matcher1 = g.matcher(s);
        if (matcher1.matches()) {
            s = matcher1.replaceFirst("$1_$2_$3");
            continue; /* Loop/switch isn't completed */
        }
_L2:
        if ("DES-CBC3".equals(s))
            s = "3DES_EDE_CBC";
        else
        if ("RC4".equals(s)) {
            if (flag)
                s = "RC4_40";
            else
                s = "RC4_128";
        } else
        if ("DES-CBC".equals(s)) {
            if (flag)
                s = "DES_CBC_40";
            else
                s = "DES_CBC";
        } else
        if ("RC2-CBC".equals(s)) {
            if (flag)
                s = "RC2_CBC_40";
            else
                s = "RC2_CBC";
        } else {
            s = s.replace('-', '_');
        }
        if (true) goto _L6; else goto _L5
_L5:
    }

    static String c(String s) {
        boolean flag;
        Object obj;
        flag = false;
        obj = c.matcher(s);
        if (((Matcher) (obj)).matches()) goto _L2; else goto _L1
_L1:
        s = null;
_L4:
        return s;
_L2:
        s = ((Matcher) (obj)).group(1);
        if (s != null)
            break; /* Loop/switch isn't completed */
        s = "";
_L5:
        s = a(s, flag);
        String s1 = b(((Matcher) (obj)).group(2), flag);
        obj = i(((Matcher) (obj)).group(3));
        s = (new StringBuilder()).append(s).append("_WITH_").append(s1).append('_').append(((String) (obj))).toString();
        if (true) goto _L4; else goto _L3
_L3:
        if (s.startsWith("EXP-")) {
            s = s.substring(4);
            flag = true;
        } else
        if ("EXP".equals(s)) {
            s = "";
            flag = true;
        }
          goto _L5
        if (true) goto _L4; else goto _L6
_L6:
    }

    private static String d(String s) {
        String s1 = b(s);
        if (s1 == null) {
            s = null;
        } else {
            h.putIfAbsent(s, s1);
            String s2 = s.substring(4);
            HashMap hashmap = new HashMap(4);
            hashmap.put("", s2);
            hashmap.put("SSL", (new StringBuilder()).append("SSL_").append(s2).toString());
            hashmap.put("TLS", (new StringBuilder()).append("TLS_").append(s2).toString());
            i.put(s1, hashmap);
            a.b("Cipher suite mapping: {} => {}", s, s1);
            s = s1;
        }
        return s;
    }

    private static String e(String s) {
        boolean flag = s.endsWith("_EXPORT");
        String s1 = s;
        if (flag)
            s1 = s.substring(0, s.length() - 7);
        if ("RSA".equals(s1))
            s = "";
        else
        if (s1.endsWith("_anon"))
            s = (new StringBuilder()).append('A').append(s1.substring(0, s1.length() - 5)).toString();
        else
            s = s1;
        s1 = s;
        if (flag)
            if (s.length() == 0)
                s1 = "EXP";
            else
                s1 = (new StringBuilder()).append("EXP-").append(s).toString();
        return s1.replace('_', '-');
    }

    private static String f(String s) {
        if (!s.startsWith("AES_")) goto _L2; else goto _L1
_L1:
        Matcher matcher = d.matcher(s);
        if (!matcher.matches()) goto _L4; else goto _L3
_L3:
        s = matcher.replaceFirst("$1$2");
_L6:
        return s;
_L4:
        Matcher matcher1 = e.matcher(s);
        if (matcher1.matches()) {
            s = matcher1.replaceFirst("$1$2-$3");
            continue; /* Loop/switch isn't completed */
        }
_L2:
        if ("3DES_EDE_CBC".equals(s))
            s = "DES-CBC3";
        else
        if ("RC4_128".equals(s) || "RC4_40".equals(s))
            s = "RC4";
        else
        if ("DES40_CBC".equals(s) || "DES_CBC_40".equals(s))
            s = "DES-CBC";
        else
        if ("RC2_CBC_40".equals(s))
            s = "RC2-CBC";
        else
            s = s.replace('_', '-');
        if (true) goto _L6; else goto _L5
_L5:
    }

    private static String g(String s) {
        return s;
    }

    private static Map h(String s) {
        String s3 = c(s);
        if (s3 == null) {
            s = null;
        } else {
            String s2 = (new StringBuilder()).append("SSL_").append(s3).toString();
            String s1 = (new StringBuilder()).append("TLS_").append(s3).toString();
            HashMap hashmap = new HashMap(4);
            hashmap.put("", s3);
            hashmap.put("SSL", s2);
            hashmap.put("TLS", s1);
            i.putIfAbsent(s, hashmap);
            h.putIfAbsent(s1, s);
            h.putIfAbsent(s2, s);
            a.b("Cipher suite mapping: {} => {}", s1, s);
            a.b("Cipher suite mapping: {} => {}", s2, s);
            s = hashmap;
        }
        return s;
    }

    private static String i(String s) {
        return s;
    }

}
