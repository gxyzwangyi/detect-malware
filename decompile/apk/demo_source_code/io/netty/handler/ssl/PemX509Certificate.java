// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.ssl;

import io.netty.buffer.ak;
import io.netty.buffer.h;
import io.netty.buffer.i;
import io.netty.util.IllegalReferenceCountException;
import io.netty.util.e;
import java.math.BigInteger;
import java.security.Principal;
import java.security.PublicKey;
import java.security.cert.X509Certificate;
import java.util.Arrays;
import java.util.Date;
import java.util.Set;

// Referenced classes of package io.netty.handler.ssl:
//            ae, am, ag

public final class PemX509Certificate extends X509Certificate
    implements ae {

    private static final byte a[];
    private static final byte b[];
    private final h c;

    private static h a(i j, boolean flag, int k) {
        if (flag)
            j = j.d(k);
        else
            j = j.a(k);
        return j;
    }

    private static h a(i j, boolean flag, ae ae1, int k, h h1) {
        h h2 = ae1.a();
        ae1 = h1;
        if (h1 == null)
            ae1 = a(j, flag, h2.f() * k);
        ae1.a(h2.u());
        return ae1;
    }

    private static h a(i j, boolean flag, X509Certificate x509certificate, int k, h h1) {
        h h2 = ak.a(x509certificate.getEncoded());
        h h3 = am.a(j, h2);
        x509certificate = h1;
        if (h1 != null)
            break MISSING_BLOCK_LABEL_48;
        x509certificate = a(j, flag, (a.length + h3.f() + b.length) * k);
        x509certificate.b(a);
        x509certificate.a(h3);
        x509certificate.b(b);
        h3.B();
        h2.B();
        return x509certificate;
        j;
        h3.B();
        throw j;
        j;
        h2.B();
        throw j;
    }

    static transient ae a(i j, boolean flag, X509Certificate ax509certificate[]) {
        int k;
        k = 0;
        if (ax509certificate == null || ax509certificate.length == 0)
            throw new IllegalArgumentException("X.509 certificate chain can't be null or empty");
        if (ax509certificate.length != 1) goto _L2; else goto _L1
_L1:
        Object obj = ax509certificate[0];
        if (!(obj instanceof ae)) goto _L2; else goto _L3
_L3:
        j = ((ae)obj).c();
_L7:
        return j;
_L2:
        h h1;
        h1 = null;
        obj = null;
        int l = ax509certificate.length;
_L5:
        Object obj1;
        if (k >= l)
            break MISSING_BLOCK_LABEL_208;
        obj1 = ax509certificate[k];
        if (obj1 != null)
            break MISSING_BLOCK_LABEL_150;
        h1 = ((h) (obj));
        j = JVM INSTR new #84  <Class IllegalArgumentException>;
        h1 = ((h) (obj));
        obj1 = JVM INSTR new #95  <Class StringBuilder>;
        h1 = ((h) (obj));
        ((StringBuilder) (obj1)).StringBuilder();
        h1 = ((h) (obj));
        j.IllegalArgumentException(((StringBuilder) (obj1)).append("Null element in chain: ").append(Arrays.toString(ax509certificate)).toString());
        h1 = ((h) (obj));
        throw j;
        j;
        if (h1 != null)
            h1.B();
        throw j;
        h1 = ((h) (obj));
        if (!(obj1 instanceof ae))
            break; /* Loop/switch isn't completed */
        h1 = ((h) (obj));
        obj = a(j, flag, (ae)obj1, ax509certificate.length, ((h) (obj)));
_L6:
        k++;
        if (true) goto _L5; else goto _L4
_L4:
        h1 = ((h) (obj));
        obj = a(j, flag, ((X509Certificate) (obj1)), ax509certificate.length, ((h) (obj)));
          goto _L6
        h1 = ((h) (obj));
        j = new ag(((h) (obj)), false);
          goto _L7
    }

    public boolean B() {
        return c.B();
    }

    public io.netty.util.i C() {
        return d();
    }

    public h a() {
        int j = z();
        if (j <= 0)
            throw new IllegalReferenceCountException(j);
        else
            return c;
    }

    public boolean b() {
        return false;
    }

    public ae c() {
        return d();
    }

    public void checkValidity() {
        throw new UnsupportedOperationException();
    }

    public void checkValidity(Date date) {
        throw new UnsupportedOperationException();
    }

    public PemX509Certificate d() {
        c.A();
        return this;
    }

    public boolean equals(Object obj) {
        boolean flag;
        if (obj == this)
            flag = true;
        else
        if (!(obj instanceof PemX509Certificate)) {
            flag = false;
        } else {
            obj = (PemX509Certificate)obj;
            flag = c.equals(((PemX509Certificate) (obj)).c);
        }
        return flag;
    }

    public int getBasicConstraints() {
        throw new UnsupportedOperationException();
    }

    public Set getCriticalExtensionOIDs() {
        throw new UnsupportedOperationException();
    }

    public byte[] getEncoded() {
        throw new UnsupportedOperationException();
    }

    public byte[] getExtensionValue(String s) {
        throw new UnsupportedOperationException();
    }

    public Principal getIssuerDN() {
        throw new UnsupportedOperationException();
    }

    public boolean[] getIssuerUniqueID() {
        throw new UnsupportedOperationException();
    }

    public boolean[] getKeyUsage() {
        throw new UnsupportedOperationException();
    }

    public Set getNonCriticalExtensionOIDs() {
        throw new UnsupportedOperationException();
    }

    public Date getNotAfter() {
        throw new UnsupportedOperationException();
    }

    public Date getNotBefore() {
        throw new UnsupportedOperationException();
    }

    public PublicKey getPublicKey() {
        throw new UnsupportedOperationException();
    }

    public BigInteger getSerialNumber() {
        throw new UnsupportedOperationException();
    }

    public String getSigAlgName() {
        throw new UnsupportedOperationException();
    }

    public String getSigAlgOID() {
        throw new UnsupportedOperationException();
    }

    public byte[] getSigAlgParams() {
        throw new UnsupportedOperationException();
    }

    public byte[] getSignature() {
        throw new UnsupportedOperationException();
    }

    public Principal getSubjectDN() {
        throw new UnsupportedOperationException();
    }

    public boolean[] getSubjectUniqueID() {
        throw new UnsupportedOperationException();
    }

    public byte[] getTBSCertificate() {
        throw new UnsupportedOperationException();
    }

    public int getVersion() {
        throw new UnsupportedOperationException();
    }

    public boolean hasUnsupportedCriticalExtension() {
        throw new UnsupportedOperationException();
    }

    public int hashCode() {
        return c.hashCode();
    }

    public String toString() {
        return c.a(e.d);
    }

    public void verify(PublicKey publickey) {
        throw new UnsupportedOperationException();
    }

    public void verify(PublicKey publickey, String s) {
        throw new UnsupportedOperationException();
    }

    public int z() {
        return c.z();
    }

    static  {
        a = "-----BEGIN CERTIFICATE-----\n".getBytes(e.f);
        b = "\n-----END CERTIFICATE-----\n".getBytes(e.f);
    }
}
