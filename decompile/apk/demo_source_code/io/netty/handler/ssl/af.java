// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.ssl;

import io.netty.buffer.ak;
import io.netty.buffer.h;
import io.netty.handler.codec.base64.a;
import io.netty.util.e;
import io.netty.util.internal.logging.b;
import io.netty.util.internal.logging.c;
import java.io.*;
import java.nio.charset.Charset;
import java.security.KeyException;
import java.security.cert.CertificateException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

final class af {

    private static final b a = io.netty.util.internal.logging.c.a(io/netty/handler/ssl/af);
    private static final Pattern b = Pattern.compile("-+BEGIN\\s+.*CERTIFICATE[^-]*-+(?:\\s|\\r|\\n)+([a-z0-9+/=\\r\\n]+)-+END\\s+.*CERTIFICATE[^-]*-+", 2);
    private static final Pattern c = Pattern.compile("-+BEGIN\\s+.*PRIVATE\\s+KEY[^-]*-+(?:\\s|\\r|\\n)+([a-z0-9+/=\\r\\n]+)-+END\\s+.*PRIVATE\\s+KEY[^-]*-+", 2);

    private af() {
    }

    private static void a(OutputStream outputstream) {
        outputstream.close();
_L1:
        return;
        outputstream;
        a.b("Failed to close a stream.", outputstream);
          goto _L1
    }

    static h[] a(File file) {
        FileInputStream fileinputstream;
        h ah[];
        Exception exception;
        try {
            fileinputstream = JVM INSTR new #56  <Class FileInputStream>;
            fileinputstream.FileInputStream(file);
        }
        catch (FileNotFoundException filenotfoundexception) {
            throw new CertificateException((new StringBuilder()).append("could not find certificate file: ").append(file).toString());
        }
        ah = a(((InputStream) (fileinputstream)));
        d(fileinputstream);
        return ah;
        exception;
        d(fileinputstream);
        throw exception;
    }

    static h[] a(InputStream inputstream) {
        int i;
        String s;
        Matcher matcher;
        try {
            s = c(inputstream);
        }
        // Misplaced declaration of an exception variable
        catch (InputStream inputstream) {
            throw new CertificateException("failed to read certificate input stream", inputstream);
        }
        inputstream = new ArrayList();
        matcher = b.matcher(s);
        i = 0;
        do {
            h h1;
            h h2;
            if (!matcher.find(i))
                if (inputstream.isEmpty())
                    throw new CertificateException("found no certificates in input stream");
                else
                    return (h[])inputstream.toArray(new h[inputstream.size()]);
            h1 = ak.a(matcher.group(1), e.f);
            h2 = io.netty.handler.codec.base64.a.a(h1);
            h1.B();
            inputstream.add(h2);
            i = matcher.end();
        } while (true);
    }

    static h b(File file) {
        FileInputStream fileinputstream;
        h h1;
        Exception exception;
        try {
            fileinputstream = JVM INSTR new #56  <Class FileInputStream>;
            fileinputstream.FileInputStream(file);
        }
        catch (FileNotFoundException filenotfoundexception) {
            throw new KeyException((new StringBuilder()).append("could not fine key file: ").append(file).toString());
        }
        h1 = b(((InputStream) (fileinputstream)));
        d(fileinputstream);
        return h1;
        exception;
        d(fileinputstream);
        throw exception;
    }

    static h b(InputStream inputstream) {
        try {
            inputstream = c(inputstream);
        }
        // Misplaced declaration of an exception variable
        catch (InputStream inputstream) {
            throw new KeyException("failed to read key input stream", inputstream);
        }
        inputstream = c.matcher(inputstream);
        if (!inputstream.find()) {
            throw new KeyException("could not find a PKCS #8 private key in input stream (see http://netty.io/wiki/sslcontextbuilder-and-private-key.html for more information)");
        } else {
            inputstream = ak.a(inputstream.group(1), e.f);
            h h1 = io.netty.handler.codec.base64.a.a(inputstream);
            inputstream.B();
            return h1;
        }
    }

    private static String c(InputStream inputstream) {
        ByteArrayOutputStream bytearrayoutputstream = new ByteArrayOutputStream();
        byte abyte0[] = new byte[8192];
_L1:
        int i = inputstream.read(abyte0);
        if (i >= 0)
            break MISSING_BLOCK_LABEL_41;
        inputstream = bytearrayoutputstream.toString(e.f.name());
        a(bytearrayoutputstream);
        return inputstream;
        bytearrayoutputstream.write(abyte0, 0, i);
          goto _L1
        inputstream;
        a(bytearrayoutputstream);
        throw inputstream;
    }

    private static void d(InputStream inputstream) {
        inputstream.close();
_L1:
        return;
        inputstream;
        a.b("Failed to close a stream.", inputstream);
          goto _L1
    }

}
