// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.ssl;

import java.math.BigInteger;
import java.security.Principal;
import java.security.PublicKey;
import java.util.Date;
import javax.security.cert.CertificateException;
import javax.security.cert.X509Certificate;

final class y extends X509Certificate {

    private final byte a[];
    private X509Certificate b;

    public y(byte abyte0[]) {
        a = abyte0;
    }

    private X509Certificate a() {
        X509Certificate x509certificate1 = b;
        X509Certificate x509certificate = x509certificate1;
        if (x509certificate1 == null)
            try {
                x509certificate = X509Certificate.getInstance(a);
                b = x509certificate;
            }
            catch (CertificateException certificateexception) {
                throw new IllegalStateException(certificateexception);
            }
        return x509certificate;
    }

    public void checkValidity() {
        a().checkValidity();
    }

    public void checkValidity(Date date) {
        a().checkValidity(date);
    }

    public byte[] getEncoded() {
        return (byte[])a.clone();
    }

    public Principal getIssuerDN() {
        return a().getIssuerDN();
    }

    public Date getNotAfter() {
        return a().getNotAfter();
    }

    public Date getNotBefore() {
        return a().getNotBefore();
    }

    public PublicKey getPublicKey() {
        return a().getPublicKey();
    }

    public BigInteger getSerialNumber() {
        return a().getSerialNumber();
    }

    public String getSigAlgName() {
        return a().getSigAlgName();
    }

    public String getSigAlgOID() {
        return a().getSigAlgOID();
    }

    public byte[] getSigAlgParams() {
        return a().getSigAlgParams();
    }

    public Principal getSubjectDN() {
        return a().getSubjectDN();
    }

    public int getVersion() {
        return a().getVersion();
    }

    public String toString() {
        return a().toString();
    }

    public void verify(PublicKey publickey) {
        a().verify(publickey);
    }

    public void verify(PublicKey publickey, String s) {
        a().verify(publickey, s);
    }
}
