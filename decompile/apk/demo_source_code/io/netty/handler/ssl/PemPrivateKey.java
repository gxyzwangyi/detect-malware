// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.ssl;

import io.netty.buffer.ak;
import io.netty.buffer.h;
import io.netty.buffer.i;
import io.netty.util.IllegalReferenceCountException;
import io.netty.util.a;
import io.netty.util.e;
import java.security.PrivateKey;

// Referenced classes of package io.netty.handler.ssl:
//            ae, am, ag

public final class PemPrivateKey extends a
    implements ae, PrivateKey {

    private static final byte a[];
    private static final byte b[];
    private final h c;

    static ae a(i j, boolean flag, PrivateKey privatekey) {
        if (!(privatekey instanceof ae)) goto _L2; else goto _L1
_L1:
        j = ((ae)privatekey).c();
_L8:
        return j;
_L2:
        h h1 = ak.a(privatekey.getEncoded());
        h h2 = io.netty.handler.ssl.am.a(j, h1);
        int k = a.length + h2.f() + b.length;
        if (!flag) goto _L4; else goto _L3
_L3:
        j = j.d(k);
_L6:
        j.b(a);
        j.a(h2);
        j.b(b);
        privatekey = JVM INSTR new #72  <Class ag>;
        privatekey.ag(j, true);
        am.b(h2);
        am.b(h1);
        j = privatekey;
        continue; /* Loop/switch isn't completed */
_L4:
        j = j.a(k);
        if (true) goto _L6; else goto _L5
_L5:
        privatekey;
        am.b(j);
        throw privatekey;
        j;
        am.b(h2);
        throw j;
        j;
        am.b(h1);
        throw j;
        if (true) goto _L8; else goto _L7
_L7:
    }

    public io.netty.util.i C() {
        return d();
    }

    public h a() {
        int j = z();
        if (j <= 0)
            throw new IllegalReferenceCountException(j);
        else
            return c;
    }

    public boolean b() {
        return true;
    }

    public ae c() {
        return d();
    }

    public PemPrivateKey d() {
        return (PemPrivateKey)super.C();
    }

    protected void e() {
        am.b(c);
    }

    public String getAlgorithm() {
        throw new UnsupportedOperationException();
    }

    public byte[] getEncoded() {
        throw new UnsupportedOperationException();
    }

    public String getFormat() {
        return "PKCS#8";
    }

    static  {
        a = "-----BEGIN PRIVATE KEY-----\n".getBytes(e.f);
        b = "\n-----END PRIVATE KEY-----\n".getBytes(e.f);
    }
}
