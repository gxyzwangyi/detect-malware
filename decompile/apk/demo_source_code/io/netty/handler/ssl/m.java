// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.ssl;

import java.io.File;
import java.security.PrivateKey;
import java.security.cert.X509Certificate;
import javax.net.ssl.*;

// Referenced classes of package io.netty.handler.ssl:
//            n, e, j, ClientAuth, 
//            d, h, ApplicationProtocolConfig

public final class m extends n {

    public m() {
        this(null, null);
    }

    public m(File file, TrustManagerFactory trustmanagerfactory) {
        this(file, trustmanagerfactory, null, ((d) (e.a)), ((h) (j.a)), 0L, 0L);
    }

    public m(File file, TrustManagerFactory trustmanagerfactory, File file1, File file2, String s, KeyManagerFactory keymanagerfactory, Iterable iterable, 
            d d, h h, long l, long l1) {
        super(a(b(file), trustmanagerfactory, b(file1), b(file2, s), s, keymanagerfactory, l, l1), true, iterable, d, h, ClientAuth.a);
    }

    public m(File file, TrustManagerFactory trustmanagerfactory, Iterable iterable, d d, h h, long l, 
            long l1) {
        this(file, trustmanagerfactory, ((File) (null)), ((File) (null)), null, null, iterable, d, h, l, l1);
    }

    m(X509Certificate ax509certificate[], TrustManagerFactory trustmanagerfactory, X509Certificate ax509certificate1[], PrivateKey privatekey, String s, KeyManagerFactory keymanagerfactory, Iterable iterable, 
            d d, ApplicationProtocolConfig applicationprotocolconfig, long l, long l1) {
        super(a(ax509certificate, trustmanagerfactory, ax509certificate1, privatekey, s, keymanagerfactory, l, l1), true, iterable, d, a(applicationprotocolconfig, false), ClientAuth.a);
    }

    private static SSLContext a(X509Certificate ax509certificate[], TrustManagerFactory trustmanagerfactory, X509Certificate ax509certificate1[], PrivateKey privatekey, String s, KeyManagerFactory keymanagerfactory, long l, 
            long l1) {
        TrustManagerFactory trustmanagerfactory1;
        trustmanagerfactory1 = trustmanagerfactory;
        if (ax509certificate == null)
            break MISSING_BLOCK_LABEL_14;
        trustmanagerfactory1 = a(ax509certificate, trustmanagerfactory);
        ax509certificate = keymanagerfactory;
        if (ax509certificate1 == null)
            break MISSING_BLOCK_LABEL_31;
        ax509certificate = a(ax509certificate1, privatekey, s, keymanagerfactory);
        ax509certificate1 = SSLContext.getInstance("TLS");
        if (ax509certificate == null)
            ax509certificate = null;
        else
            try {
                ax509certificate = ax509certificate.getKeyManagers();
            }
            // Misplaced declaration of an exception variable
            catch (X509Certificate ax509certificate[]) {
                if (ax509certificate instanceof SSLException)
                    throw (SSLException)ax509certificate;
                throw new SSLException("failed to initialize the client-side SSL context", ax509certificate);
            }
        if (trustmanagerfactory1 != null)
            break MISSING_BLOCK_LABEL_116;
        trustmanagerfactory = null;
        ax509certificate1.init(ax509certificate, trustmanagerfactory, null);
        ax509certificate = ax509certificate1.getClientSessionContext();
        if (l <= 0L)
            break MISSING_BLOCK_LABEL_84;
        ax509certificate.setSessionCacheSize((int)Math.min(l, 0x7fffffffL));
        if (l1 <= 0L)
            break MISSING_BLOCK_LABEL_106;
        ax509certificate.setSessionTimeout((int)Math.min(l1, 0x7fffffffL));
        return ax509certificate1;
        trustmanagerfactory = trustmanagerfactory1.getTrustManagers();
        break MISSING_BLOCK_LABEL_50;
    }
}
