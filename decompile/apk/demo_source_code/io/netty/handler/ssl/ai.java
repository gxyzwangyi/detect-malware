// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.ssl;

import io.netty.util.internal.k;
import java.security.PrivateKey;
import java.security.cert.X509Certificate;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.TrustManagerFactory;

// Referenced classes of package io.netty.handler.ssl:
//            e, ClientAuth, ah, SslProvider, 
//            d, ApplicationProtocolConfig

public final class ai {

    private final boolean a;
    private SslProvider b;
    private X509Certificate c[];
    private TrustManagerFactory d;
    private X509Certificate e[];
    private PrivateKey f;
    private String g;
    private KeyManagerFactory h;
    private Iterable i;
    private d j;
    private ApplicationProtocolConfig k;
    private long l;
    private long m;
    private ClientAuth n;

    private ai(boolean flag) {
        j = e.a;
        n = ClientAuth.a;
        a = flag;
    }

    public static ai a() {
        return new ai(false);
    }

    public static transient ai a(PrivateKey privatekey, X509Certificate ax509certificate[]) {
        return (new ai(true)).b(privatekey, ax509certificate);
    }

    public ai a(Iterable iterable, d d1) {
        io.netty.util.internal.k.a(d1, "cipherFilter");
        i = iterable;
        j = d1;
        return this;
    }

    public transient ai a(PrivateKey privatekey, String s, X509Certificate ax509certificate[]) {
        if (a) {
            io.netty.util.internal.k.a(ax509certificate, "keyCertChain required for servers");
            if (ax509certificate.length == 0)
                throw new IllegalArgumentException("keyCertChain must be non-empty");
            io.netty.util.internal.k.a(privatekey, "key required for servers");
        }
        if (ax509certificate == null || ax509certificate.length == 0) {
            e = null;
        } else {
            int j1 = ax509certificate.length;
            for (int i1 = 0; i1 < j1; i1++)
                if (ax509certificate[i1] == null)
                    throw new IllegalArgumentException("keyCertChain contains null entry");

            e = (X509Certificate[])ax509certificate.clone();
        }
        f = privatekey;
        g = s;
        h = null;
        return this;
    }

    public ai a(TrustManagerFactory trustmanagerfactory) {
        c = null;
        d = trustmanagerfactory;
        return this;
    }

    public transient ai a(X509Certificate ax509certificate[]) {
        if (ax509certificate != null)
            ax509certificate = (X509Certificate[])ax509certificate.clone();
        else
            ax509certificate = null;
        c = ax509certificate;
        d = null;
        return this;
    }

    public ah b() {
        ah ah1;
        if (a)
            ah1 = ah.a(b, c, d, e, f, g, h, i, j, k, l, m, n);
        else
            ah1 = ah.a(b, c, d, e, f, g, h, i, j, k, l, m);
        return ah1;
    }

    public transient ai b(PrivateKey privatekey, X509Certificate ax509certificate[]) {
        return a(privatekey, null, ax509certificate);
    }
}
