// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.ssl;

import io.netty.util.internal.logging.b;
import io.netty.util.internal.logging.c;
import java.io.File;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.cert.X509Certificate;
import javax.net.ssl.*;
import org.apache.tomcat.jni.CertificateRequestedCallback;
import org.apache.tomcat.jni.SSLContext;

// Referenced classes of package io.netty.handler.ssl:
//            u, e, ClientAuth, r, 
//            x, z, ac, d, 
//            ApplicationProtocolConfig, w

public final class t extends u {
    private static final class a extends u.a {

        private final X509ExtendedTrustManager a;

        a(w w, X509ExtendedTrustManager x509extendedtrustmanager) {
            super(w);
            a = x509extendedtrustmanager;
        }
    }

    private static final class b
        implements CertificateRequestedCallback {

        private final w a;
        private final z b;

        b(w w, z z1) {
            a = w;
            b = z1;
        }
    }

    private static final class c extends ac {

        public int getSessionCacheSize() {
            return 0;
        }

        public int getSessionTimeout() {
            return 0;
        }

        public void setSessionCacheSize(int k) {
            if (k < 0)
                throw new IllegalArgumentException();
            else
                return;
        }

        public void setSessionTimeout(int k) {
            if (k < 0)
                throw new IllegalArgumentException();
            else
                return;
        }

        private c(u u1) {
            super(u1);
        }

    }

    private static final class d extends u.a {

        private final X509TrustManager a;

        d(w w, X509TrustManager x509trustmanager) {
            super(w);
            a = x509trustmanager;
        }
    }


    private static final io.netty.util.internal.logging.b i = io.netty.util.internal.logging.c.a(io/netty/handler/ssl/t);
    private final ac j;

    public t() {
        this((File)null, null, ((File) (null)), ((File) (null)), null, null, null, ((io.netty.handler.ssl.d) (e.a)), null, 0L, 0L);
    }

    public t(File file, TrustManagerFactory trustmanagerfactory, File file1, File file2, String s, KeyManagerFactory keymanagerfactory, Iterable iterable, 
            io.netty.handler.ssl.d d1, ApplicationProtocolConfig applicationprotocolconfig, long l, long l1) {
        this(b(file), trustmanagerfactory, b(file1), b(file2, s), s, keymanagerfactory, iterable, d1, applicationprotocolconfig, l, l1);
    }

    t(X509Certificate ax509certificate[], TrustManagerFactory trustmanagerfactory, X509Certificate ax509certificate1[], PrivateKey privatekey, String s, KeyManagerFactory keymanagerfactory, Iterable iterable, 
            io.netty.handler.ssl.d d1, ApplicationProtocolConfig applicationprotocolconfig, long l, long l1) {
        super(iterable, d1, applicationprotocolconfig, l, l1, 0, ax509certificate1, ClientAuth.a);
        if ((privatekey != null || ax509certificate1 == null) && (privatekey == null || ax509certificate1 != null))
            break MISSING_BLOCK_LABEL_56;
        ax509certificate = JVM INSTR new #68  <Class IllegalArgumentException>;
        ax509certificate.IllegalArgumentException("Either both keyCertChain and key needs to be null or none of them");
        throw ax509certificate;
        ax509certificate;
        e();
        throw ax509certificate;
        io/netty/handler/ssl/u;
        JVM INSTR monitorenter ;
        if (r.e()) goto _L2; else goto _L1
_L1:
        if (keymanagerfactory == null)
            break MISSING_BLOCK_LABEL_102;
        try {
            ax509certificate = JVM INSTR new #68  <Class IllegalArgumentException>;
            ax509certificate.IllegalArgumentException("KeyManagerFactory not supported");
            throw ax509certificate;
        }
        // Misplaced declaration of an exception variable
        catch (TrustManagerFactory trustmanagerfactory) { }
        ax509certificate = JVM INSTR new #85  <Class SSLException>;
        ax509certificate.SSLException("failed to set certificate and key", trustmanagerfactory);
        throw ax509certificate;
        ax509certificate;
        io/netty/handler/ssl/u;
        JVM INSTR monitorexit ;
        throw ax509certificate;
        if (ax509certificate1 == null || privatekey == null)
            break MISSING_BLOCK_LABEL_123;
        a(a, ax509certificate1, privatekey, s);
_L8:
        SSLContext.setVerify(a, 0, 10);
        if (ax509certificate == null) goto _L4; else goto _L3
_L3:
        ax509certificate = a(ax509certificate, trustmanagerfactory);
_L11:
        ax509certificate = a(ax509certificate.getTrustManagers());
        if (!a(ax509certificate))
            break MISSING_BLOCK_LABEL_347;
        l = a;
        trustmanagerfactory = JVM INSTR new #8   <Class t$a>;
        trustmanagerfactory.a(e, (X509ExtendedTrustManager)ax509certificate);
        SSLContext.setCertVerifyCallback(l, trustmanagerfactory);
_L12:
        io/netty/handler/ssl/u;
        JVM INSTR monitorexit ;
        ax509certificate = JVM INSTR new #14  <Class t$c>;
        ax509certificate.c(this);
        j = ax509certificate;
        return;
_L2:
        iterable = keymanagerfactory;
        if (ax509certificate1 == null) goto _L6; else goto _L5
_L5:
        iterable = a(ax509certificate1, privatekey, s, keymanagerfactory);
_L6:
        if (iterable == null) goto _L8; else goto _L7
_L7:
        privatekey = a(iterable.getKeyManagers());
        if (!a(privatekey))
            break MISSING_BLOCK_LABEL_294;
        ax509certificate1 = JVM INSTR new #151 <Class x>;
        ax509certificate1.x((X509ExtendedKeyManager)privatekey, s);
_L9:
        l = a;
        privatekey = JVM INSTR new #11  <Class t$b>;
        privatekey.b(e, ax509certificate1);
        SSLContext.setCertRequestedCallback(l, privatekey);
          goto _L8
        ax509certificate1 = new z(privatekey, s);
          goto _L9
_L4:
        ax509certificate = trustmanagerfactory;
        if (trustmanagerfactory != null) goto _L11; else goto _L10
_L10:
        ax509certificate = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        ax509certificate.init((KeyStore)null);
          goto _L11
        ax509certificate;
        trustmanagerfactory = JVM INSTR new #85  <Class SSLException>;
        trustmanagerfactory.SSLException("unable to setup trustmanager", ax509certificate);
        throw trustmanagerfactory;
        l = a;
        trustmanagerfactory = JVM INSTR new #17  <Class t$d>;
        trustmanagerfactory.d(e, ax509certificate);
        SSLContext.setCertVerifyCallback(l, trustmanagerfactory);
          goto _L12
    }

    public ac a() {
        return j;
    }

    z c() {
        return null;
    }

}
