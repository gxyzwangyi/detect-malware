// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.ssl.util;

import io.netty.buffer.ak;
import io.netty.buffer.h;
import io.netty.handler.codec.base64.a;
import io.netty.util.e;
import io.netty.util.internal.logging.b;
import io.netty.util.internal.n;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.SecureRandom;
import java.security.cert.CertificateEncodingException;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.Date;

// Referenced classes of package io.netty.handler.ssl.util:
//            b, a, ThreadLocalInsecureRandom

public final class c {

    private static final b a = io.netty.util.internal.logging.c.a(io/netty/handler/ssl/util/c);
    private static final Date b = new Date(n.a("io.netty.selfSignedCertificate.defaultNotBefore", System.currentTimeMillis() - 0x57b12c00L));
    private static final Date c = new Date(n.a("io.netty.selfSignedCertificate.defaultNotAfter", 0xd21fd818L));
    private final File d;
    private final File e;
    private final X509Certificate f;
    private final PrivateKey g;

    public c() {
        this(b, c);
    }

    public c(String s, SecureRandom securerandom, int i, Date date, Date date1) {
        String as[];
        KeyPair keypair;
        try {
            KeyPairGenerator keypairgenerator = KeyPairGenerator.getInstance("RSA");
            keypairgenerator.initialize(i, securerandom);
            keypair = keypairgenerator.generateKeyPair();
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            throw new Error(s);
        }
        try {
            as = io.netty.handler.ssl.util.b.a(s, keypair, securerandom, date, date1);
        }
        catch (Throwable throwable) {
            a.a("Failed to generate a self-signed X.509 certificate using sun.security.x509:", throwable);
            try {
                s = io.netty.handler.ssl.util.a.a(s, keypair, securerandom, date, date1);
            }
            // Misplaced declaration of an exception variable
            catch (String s) {
                a.a("Failed to generate a self-signed X.509 certificate using Bouncy Castle:", s);
                throw new CertificateException("No provider succeeded to generate a self-signed certificate. See debug log for the root cause.");
            }
            continue; /* Loop/switch isn't completed */
        }
        s = as;
_L7:
        d = new File(s[0]);
        e = new File(s[1]);
        g = keypair.getPrivate();
        securerandom = JVM INSTR new #109 <Class FileInputStream>;
        securerandom.FileInputStream(d);
        s = securerandom;
        f = (X509Certificate)CertificateFactory.getInstance("X509").generateCertificate(securerandom);
        if (securerandom == null)
            break MISSING_BLOCK_LABEL_116;
        securerandom.close();
_L1:
        return;
        s;
        a.b((new StringBuilder()).append("Failed to close a file: ").append(d).toString(), s);
          goto _L1
        date;
        securerandom = null;
_L5:
        s = securerandom;
        date1 = JVM INSTR new #172 <Class CertificateEncodingException>;
        s = securerandom;
        date1.CertificateEncodingException(date);
        s = securerandom;
        throw date1;
        securerandom;
        date = s;
        s = securerandom;
_L3:
        if (date != null)
            try {
                date.close();
            }
            // Misplaced declaration of an exception variable
            catch (SecureRandom securerandom) {
                a.b((new StringBuilder()).append("Failed to close a file: ").append(d).toString(), securerandom);
            }
        throw s;
        s;
        date = null;
        if (true) goto _L3; else goto _L2
_L2:
        date;
        if (true) goto _L5; else goto _L4
_L4:
        if (true) goto _L7; else goto _L6
_L6:
    }

    public c(String s, Date date, Date date1) {
        this(s, io.netty.handler.ssl.util.ThreadLocalInsecureRandom.a(), 1024, date, date1);
    }

    public c(Date date, Date date1) {
        this("example.com", date, date1);
    }

    private static void a(File file) {
        if (!file.delete())
            a.c((new StringBuilder()).append("Failed to delete a file: ").append(file).toString());
    }

    private static void a(File file, OutputStream outputstream) {
        outputstream.close();
_L1:
        return;
        outputstream;
        a.b((new StringBuilder()).append("Failed to close a file: ").append(file).toString(), outputstream);
          goto _L1
    }

    static String[] a(String s, PrivateKey privatekey, X509Certificate x509certificate) {
        privatekey = ak.a(privatekey.getEncoded());
        Object obj1 = io.netty.handler.codec.base64.a.a(privatekey, true);
        Object obj;
        obj = JVM INSTR new #154 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        obj = ((StringBuilder) (obj)).append("-----BEGIN PRIVATE KEY-----\n").append(((h) (obj1)).a(e.f)).append("\n-----END PRIVATE KEY-----\n").toString();
        ((h) (obj1)).B();
        privatekey.B();
        privatekey = File.createTempFile((new StringBuilder()).append("keyutil_").append(s).append('_').toString(), ".key");
        privatekey.deleteOnExit();
        obj1 = new FileOutputStream(privatekey);
        ((OutputStream) (obj1)).write(((String) (obj)).getBytes(e.f));
        ((OutputStream) (obj1)).close();
        if (false) {
            a(((File) (privatekey)), null);
            a(((File) (privatekey)));
        }
        x509certificate = ak.a(x509certificate.getEncoded());
        obj1 = io.netty.handler.codec.base64.a.a(x509certificate, true);
        obj = JVM INSTR new #154 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        obj = ((StringBuilder) (obj)).append("-----BEGIN CERTIFICATE-----\n").append(((h) (obj1)).a(e.f)).append("\n-----END CERTIFICATE-----\n").toString();
        ((h) (obj1)).B();
        x509certificate.B();
        x509certificate = File.createTempFile((new StringBuilder()).append("keyutil_").append(s).append('_').toString(), ".crt");
        x509certificate.deleteOnExit();
        s = new FileOutputStream(x509certificate);
        s.write(((String) (obj)).getBytes(e.f));
        s.close();
        if (false) {
            a(((File) (x509certificate)), null);
            a(((File) (x509certificate)));
            a(((File) (privatekey)));
        }
        return (new String[] {
            x509certificate.getPath(), privatekey.getPath()
        });
        s;
        ((h) (obj1)).B();
        throw s;
        s;
        privatekey.B();
        throw s;
        s;
        if (obj1 != null) {
            a(((File) (privatekey)), ((OutputStream) (obj1)));
            a(((File) (privatekey)));
        }
        throw s;
        s;
        ((h) (obj1)).B();
        throw s;
        s;
        x509certificate.B();
        throw s;
        Exception exception;
        exception;
        if (s != null) {
            a(((File) (x509certificate)), ((OutputStream) (s)));
            a(((File) (x509certificate)));
            a(((File) (privatekey)));
        }
        throw exception;
    }

    public X509Certificate a() {
        return f;
    }

}
