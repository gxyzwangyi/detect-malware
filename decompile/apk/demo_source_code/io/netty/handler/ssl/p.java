// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.ssl;

import java.security.PrivateKey;
import java.security.cert.X509Certificate;
import javax.net.ssl.*;

// Referenced classes of package io.netty.handler.ssl:
//            n, d, ApplicationProtocolConfig, ClientAuth

public final class p extends n {

    p(X509Certificate ax509certificate[], TrustManagerFactory trustmanagerfactory, X509Certificate ax509certificate1[], PrivateKey privatekey, String s, KeyManagerFactory keymanagerfactory, Iterable iterable, 
            d d, ApplicationProtocolConfig applicationprotocolconfig, long l, long l1, ClientAuth clientauth) {
        super(a(ax509certificate, trustmanagerfactory, ax509certificate1, privatekey, s, keymanagerfactory, l, l1), false, iterable, d, a(applicationprotocolconfig, true), clientauth);
    }

    private static SSLContext a(X509Certificate ax509certificate[], TrustManagerFactory trustmanagerfactory, X509Certificate ax509certificate1[], PrivateKey privatekey, String s, KeyManagerFactory keymanagerfactory, long l, 
            long l1) {
        Object obj = null;
        if (privatekey == null && keymanagerfactory == null)
            throw new NullPointerException("key, keyManagerFactory");
        TrustManagerFactory trustmanagerfactory1 = trustmanagerfactory;
        if (ax509certificate != null)
            try {
                trustmanagerfactory1 = a(ax509certificate, trustmanagerfactory);
            }
            // Misplaced declaration of an exception variable
            catch (X509Certificate ax509certificate[]) {
                if (ax509certificate instanceof SSLException)
                    throw (SSLException)ax509certificate;
                else
                    throw new SSLException("failed to initialize the server-side SSL context", ax509certificate);
            }
        ax509certificate = keymanagerfactory;
        if (privatekey == null)
            break MISSING_BLOCK_LABEL_53;
        ax509certificate = a(ax509certificate1, privatekey, s, keymanagerfactory);
        trustmanagerfactory = SSLContext.getInstance("TLS");
        ax509certificate1 = ax509certificate.getKeyManagers();
        if (trustmanagerfactory1 != null)
            break MISSING_BLOCK_LABEL_130;
        ax509certificate = obj;
_L1:
        trustmanagerfactory.init(ax509certificate1, ax509certificate, null);
        ax509certificate = trustmanagerfactory.getServerSessionContext();
        if (l <= 0L)
            break MISSING_BLOCK_LABEL_106;
        ax509certificate.setSessionCacheSize((int)Math.min(l, 0x7fffffffL));
        if (l1 <= 0L)
            break MISSING_BLOCK_LABEL_128;
        ax509certificate.setSessionTimeout((int)Math.min(l1, 0x7fffffffL));
        return trustmanagerfactory;
        ax509certificate = trustmanagerfactory1.getTrustManagers();
          goto _L1
    }
}
