// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package io.netty.handler.ssl;

import java.security.Principal;
import java.security.cert.Certificate;
import javax.net.ssl.*;
import javax.security.cert.X509Certificate;

final class q
    implements SSLSession {

    private final SSLEngine a;

    q(SSLEngine sslengine) {
        a = sslengine;
    }

    private SSLSession a() {
        return a.getSession();
    }

    public int getApplicationBufferSize() {
        return a().getApplicationBufferSize();
    }

    public String getCipherSuite() {
        return a().getCipherSuite();
    }

    public long getCreationTime() {
        return a().getCreationTime();
    }

    public byte[] getId() {
        return a().getId();
    }

    public long getLastAccessedTime() {
        return a().getLastAccessedTime();
    }

    public Certificate[] getLocalCertificates() {
        return a().getLocalCertificates();
    }

    public Principal getLocalPrincipal() {
        return a().getLocalPrincipal();
    }

    public int getPacketBufferSize() {
        return a().getPacketBufferSize();
    }

    public X509Certificate[] getPeerCertificateChain() {
        return a().getPeerCertificateChain();
    }

    public Certificate[] getPeerCertificates() {
        return a().getPeerCertificates();
    }

    public String getPeerHost() {
        return a().getPeerHost();
    }

    public int getPeerPort() {
        return a().getPeerPort();
    }

    public Principal getPeerPrincipal() {
        return a().getPeerPrincipal();
    }

    public String getProtocol() {
        return a().getProtocol();
    }

    public SSLSessionContext getSessionContext() {
        return a().getSessionContext();
    }

    public Object getValue(String s) {
        return a().getValue(s);
    }

    public String[] getValueNames() {
        return a().getValueNames();
    }

    public void invalidate() {
        a().invalidate();
    }

    public boolean isValid() {
        return a().isValid();
    }

    public void putValue(String s, Object obj) {
        a().putValue(s, obj);
    }

    public void removeValue(String s) {
        a().removeValue(s);
    }
}
