// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.jcraft.jzlib;


// Referenced classes of package com.jcraft.jzlib:
//            i

final class g {

    static final int a[] = {
        96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 
        8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 
        48, 0, 9, 192, 80, 7, 10, 0, 8, 96, 
        0, 8, 32, 0, 9, 160, 0, 8, 0, 0, 
        8, 128, 0, 8, 64, 0, 9, 224, 80, 7, 
        6, 0, 8, 88, 0, 8, 24, 0, 9, 144, 
        83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 
        9, 208, 81, 7, 17, 0, 8, 104, 0, 8, 
        40, 0, 9, 176, 0, 8, 8, 0, 8, 136, 
        0, 8, 72, 0, 9, 240, 80, 7, 4, 0, 
        8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 
        43, 0, 8, 116, 0, 8, 52, 0, 9, 200, 
        81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 
        9, 168, 0, 8, 4, 0, 8, 132, 0, 8, 
        68, 0, 9, 232, 80, 7, 8, 0, 8, 92, 
        0, 8, 28, 0, 9, 152, 84, 7, 83, 0, 
        8, 124, 0, 8, 60, 0, 9, 216, 82, 7, 
        23, 0, 8, 108, 0, 8, 44, 0, 9, 184, 
        0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 
        9, 248, 80, 7, 3, 0, 8, 82, 0, 8, 
        18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 
        0, 8, 50, 0, 9, 196, 81, 7, 11, 0, 
        8, 98, 0, 8, 34, 0, 9, 164, 0, 8, 
        2, 0, 8, 130, 0, 8, 66, 0, 9, 228, 
        80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 
        9, 148, 84, 7, 67, 0, 8, 122, 0, 8, 
        58, 0, 9, 212, 82, 7, 19, 0, 8, 106, 
        0, 8, 42, 0, 9, 180, 0, 8, 10, 0, 
        8, 138, 0, 8, 74, 0, 9, 244, 80, 7, 
        5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 
        83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 
        9, 204, 81, 7, 15, 0, 8, 102, 0, 8, 
        38, 0, 9, 172, 0, 8, 6, 0, 8, 134, 
        0, 8, 70, 0, 9, 236, 80, 7, 9, 0, 
        8, 94, 0, 8, 30, 0, 9, 156, 84, 7, 
        99, 0, 8, 126, 0, 8, 62, 0, 9, 220, 
        82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 
        9, 188, 0, 8, 14, 0, 8, 142, 0, 8, 
        78, 0, 9, 252, 96, 7, 256, 0, 8, 81, 
        0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 
        8, 113, 0, 8, 49, 0, 9, 194, 80, 7, 
        10, 0, 8, 97, 0, 8, 33, 0, 9, 162, 
        0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 
        9, 226, 80, 7, 6, 0, 8, 89, 0, 8, 
        25, 0, 9, 146, 83, 7, 59, 0, 8, 121, 
        0, 8, 57, 0, 9, 210, 81, 7, 17, 0, 
        8, 105, 0, 8, 41, 0, 9, 178, 0, 8, 
        9, 0, 8, 137, 0, 8, 73, 0, 9, 242, 
        80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 
        8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 
        53, 0, 9, 202, 81, 7, 13, 0, 8, 101, 
        0, 8, 37, 0, 9, 170, 0, 8, 5, 0, 
        8, 133, 0, 8, 69, 0, 9, 234, 80, 7, 
        8, 0, 8, 93, 0, 8, 29, 0, 9, 154, 
        84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 
        9, 218, 82, 7, 23, 0, 8, 109, 0, 8, 
        45, 0, 9, 186, 0, 8, 13, 0, 8, 141, 
        0, 8, 77, 0, 9, 250, 80, 7, 3, 0, 
        8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 
        35, 0, 8, 115, 0, 8, 51, 0, 9, 198, 
        81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 
        9, 166, 0, 8, 3, 0, 8, 131, 0, 8, 
        67, 0, 9, 230, 80, 7, 7, 0, 8, 91, 
        0, 8, 27, 0, 9, 150, 84, 7, 67, 0, 
        8, 123, 0, 8, 59, 0, 9, 214, 82, 7, 
        19, 0, 8, 107, 0, 8, 43, 0, 9, 182, 
        0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 
        9, 246, 80, 7, 5, 0, 8, 87, 0, 8, 
        23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 
        0, 8, 55, 0, 9, 206, 81, 7, 15, 0, 
        8, 103, 0, 8, 39, 0, 9, 174, 0, 8, 
        7, 0, 8, 135, 0, 8, 71, 0, 9, 238, 
        80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 
        9, 158, 84, 7, 99, 0, 8, 127, 0, 8, 
        63, 0, 9, 222, 82, 7, 27, 0, 8, 111, 
        0, 8, 47, 0, 9, 190, 0, 8, 15, 0, 
        8, 143, 0, 8, 79, 0, 9, 254, 96, 7, 
        256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 
        82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 
        9, 193, 80, 7, 10, 0, 8, 96, 0, 8, 
        32, 0, 9, 161, 0, 8, 0, 0, 8, 128, 
        0, 8, 64, 0, 9, 225, 80, 7, 6, 0, 
        8, 88, 0, 8, 24, 0, 9, 145, 83, 7, 
        59, 0, 8, 120, 0, 8, 56, 0, 9, 209, 
        81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 
        9, 177, 0, 8, 8, 0, 8, 136, 0, 8, 
        72, 0, 9, 241, 80, 7, 4, 0, 8, 84, 
        0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 
        8, 116, 0, 8, 52, 0, 9, 201, 81, 7, 
        13, 0, 8, 100, 0, 8, 36, 0, 9, 169, 
        0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 
        9, 233, 80, 7, 8, 0, 8, 92, 0, 8, 
        28, 0, 9, 153, 84, 7, 83, 0, 8, 124, 
        0, 8, 60, 0, 9, 217, 82, 7, 23, 0, 
        8, 108, 0, 8, 44, 0, 9, 185, 0, 8, 
        12, 0, 8, 140, 0, 8, 76, 0, 9, 249, 
        80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 
        8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 
        50, 0, 9, 197, 81, 7, 11, 0, 8, 98, 
        0, 8, 34, 0, 9, 165, 0, 8, 2, 0, 
        8, 130, 0, 8, 66, 0, 9, 229, 80, 7, 
        7, 0, 8, 90, 0, 8, 26, 0, 9, 149, 
        84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 
        9, 213, 82, 7, 19, 0, 8, 106, 0, 8, 
        42, 0, 9, 181, 0, 8, 10, 0, 8, 138, 
        0, 8, 74, 0, 9, 245, 80, 7, 5, 0, 
        8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 
        51, 0, 8, 118, 0, 8, 54, 0, 9, 205, 
        81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 
        9, 173, 0, 8, 6, 0, 8, 134, 0, 8, 
        70, 0, 9, 237, 80, 7, 9, 0, 8, 94, 
        0, 8, 30, 0, 9, 157, 84, 7, 99, 0, 
        8, 126, 0, 8, 62, 0, 9, 221, 82, 7, 
        27, 0, 8, 110, 0, 8, 46, 0, 9, 189, 
        0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 
        9, 253, 96, 7, 256, 0, 8, 81, 0, 8, 
        17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 
        0, 8, 49, 0, 9, 195, 80, 7, 10, 0, 
        8, 97, 0, 8, 33, 0, 9, 163, 0, 8, 
        1, 0, 8, 129, 0, 8, 65, 0, 9, 227, 
        80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 
        9, 147, 83, 7, 59, 0, 8, 121, 0, 8, 
        57, 0, 9, 211, 81, 7, 17, 0, 8, 105, 
        0, 8, 41, 0, 9, 179, 0, 8, 9, 0, 
        8, 137, 0, 8, 73, 0, 9, 243, 80, 7, 
        4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 
        83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 
        9, 203, 81, 7, 13, 0, 8, 101, 0, 8, 
        37, 0, 9, 171, 0, 8, 5, 0, 8, 133, 
        0, 8, 69, 0, 9, 235, 80, 7, 8, 0, 
        8, 93, 0, 8, 29, 0, 9, 155, 84, 7, 
        83, 0, 8, 125, 0, 8, 61, 0, 9, 219, 
        82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 
        9, 187, 0, 8, 13, 0, 8, 141, 0, 8, 
        77, 0, 9, 251, 80, 7, 3, 0, 8, 83, 
        0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 
        8, 115, 0, 8, 51, 0, 9, 199, 81, 7, 
        11, 0, 8, 99, 0, 8, 35, 0, 9, 167, 
        0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 
        9, 231, 80, 7, 7, 0, 8, 91, 0, 8, 
        27, 0, 9, 151, 84, 7, 67, 0, 8, 123, 
        0, 8, 59, 0, 9, 215, 82, 7, 19, 0, 
        8, 107, 0, 8, 43, 0, 9, 183, 0, 8, 
        11, 0, 8, 139, 0, 8, 75, 0, 9, 247, 
        80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 
        8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 
        55, 0, 9, 207, 81, 7, 15, 0, 8, 103, 
        0, 8, 39, 0, 9, 175, 0, 8, 7, 0, 
        8, 135, 0, 8, 71, 0, 9, 239, 80, 7, 
        9, 0, 8, 95, 0, 8, 31, 0, 9, 159, 
        84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 
        9, 223, 82, 7, 27, 0, 8, 111, 0, 8, 
        47, 0, 9, 191, 0, 8, 15, 0, 8, 143, 
        0, 8, 79, 0, 9, 255
    };
    static final int b[] = {
        80, 5, 1, 87, 5, 257, 83, 5, 17, 91, 
        5, 4097, 81, 5, 5, 89, 5, 1025, 85, 5, 
        65, 93, 5, 16385, 80, 5, 3, 88, 5, 513, 
        84, 5, 33, 92, 5, 8193, 82, 5, 9, 90, 
        5, 2049, 86, 5, 129, 192, 5, 24577, 80, 5, 
        2, 87, 5, 385, 83, 5, 25, 91, 5, 6145, 
        81, 5, 7, 89, 5, 1537, 85, 5, 97, 93, 
        5, 24577, 80, 5, 4, 88, 5, 769, 84, 5, 
        49, 92, 5, 12289, 82, 5, 13, 90, 5, 3073, 
        86, 5, 193, 192, 5, 24577
    };
    static final int c[] = {
        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 
        15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 
        67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 
        0
    };
    static final int d[] = {
        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 
        1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 
        4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 
        112
    };
    static final int e[] = {
        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 
        33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 
        1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577
    };
    static final int f[] = {
        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 
        4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 
        9, 9, 10, 10, 11, 11, 12, 12, 13, 13
    };
    int g[];
    int h[];
    int i[];
    int j[];
    int k[];
    int l[];

    g() {
        g = null;
        h = null;
        i = null;
        j = null;
        k = null;
        l = null;
    }

    private int a(int ai[], int i1, int j1, int k1, int ai1[], int ai2[], int ai3[], 
            int ai4[], int ai5[], int ai6[], int ai7[]) {
        int j2 = 0;
        int l1 = j1;
        int l2;
        do {
            int ai8[] = i;
            l2 = ai[i1 + j2];
            ai8[l2] = ai8[l2] + 1;
            j2++;
            l2 = l1 - 1;
            l1 = l2;
        } while (l2 != 0);
        if (i[0] != j1) goto _L2; else goto _L1
_L1:
        ai3[0] = -1;
        ai4[0] = 0;
        i1 = 0;
_L7:
        return i1;
_L2:
        int i2;
        int k2;
        k2 = ai4[0];
        i2 = 1;
_L8:
        if (i2 <= 15 && i[i2] == 0) goto _L4; else goto _L3
_L3:
        int i3;
        i3 = k2;
        if (k2 < i2)
            i3 = i2;
        k2 = 15;
_L9:
        if (k2 != 0 && i[k2] == 0) goto _L6; else goto _L5
_L5:
        int j3;
        int k3;
        k3 = i3;
        if (i3 > k2)
            k3 = k2;
        ai4[0] = k3;
        j3 = 1 << i2;
        i3 = i2;
_L10:
        if (i3 >= k2)
            break MISSING_BLOCK_LABEL_219;
        j3 -= i[i3];
        if (j3 >= 0)
            break MISSING_BLOCK_LABEL_207;
        i1 = -3;
          goto _L7
_L4:
        i2++;
          goto _L8
_L6:
        k2--;
          goto _L9
        i3++;
        j3 <<= 1;
          goto _L10
        int i6;
label0:
        {
            i6 = j3 - i[k2];
            if (i6 >= 0)
                break label0;
            i1 = -3;
        }
          goto _L7
        int l3;
        int k4;
        int j6;
        ai4 = i;
        ai4[k2] = ai4[k2] + i6;
        ai4 = l;
        l3 = 0;
        ai4[1] = 0;
        i3 = 1;
        j3 = 2;
        for (int i4 = k2; --i4 != 0;) {
            ai4 = l;
            l3 += i[i3];
            ai4[j3] = l3;
            j3++;
            i3++;
        }

        i3 = 0;
        j3 = 0;
        do {
            int j4 = ai[i1 + j3];
            if (j4 != 0) {
                ai4 = l;
                l3 = ai4[j4];
                ai4[j4] = l3 + 1;
                ai7[l3] = i3;
            }
            j3++;
            l3 = i3 + 1;
            i3 = l3;
        } while (l3 < j1);
        j6 = l[k2];
        l[0] = 0;
        j1 = -1;
        int l4 = -k3;
        k[0] = 0;
        i3 = 0;
        j3 = 0;
        k4 = 0;
        i1 = 0;
        l3 = i2;
        i2 = l4;
_L18:
        if (l3 > k2) goto _L12; else goto _L11
_L11:
        int i5 = i[l3];
_L19:
        int l5;
        l5 = i5 - 1;
        if (i5 == 0)
            break MISSING_BLOCK_LABEL_1087;
        i5 = i3;
        i3 = j1;
        j1 = i1;
        i1 = i5;
_L17:
        int j5;
        if (l3 <= i2 + k3)
            break MISSING_BLOCK_LABEL_807;
        i1 = i3 + 1;
        j1 = i2 + k3;
        i2 = k2 - j1;
        if (i2 > k3)
            i2 = k3;
        j5 = l3 - j1;
        i5 = 1 << j5;
        i3 = j5;
        if (i5 <= l5 + 1) goto _L14; else goto _L13
_L13:
        i3 = j5;
        if (j5 >= i2) goto _L14; else goto _L15
_L15:
        int k5;
        k5 = i5 - (l5 + 1);
        i5 = l3;
_L16:
        i3 = ++j5;
        if (j5 < i2) {
            i3 = k5 << 1;
            ai = i;
            i5++;
            if (i3 > ai[i5])
                break MISSING_BLOCK_LABEL_638;
            i3 = j5;
        }
_L14:
        i5 = 1 << i3;
        if (ai6[0] + i5 <= 1440)
            break MISSING_BLOCK_LABEL_653;
        i1 = -3;
          goto _L7
        k5 = i3 - i[i5];
          goto _L16
        ai = k;
        i2 = ai6[0];
        ai[i1] = i2;
        ai6[0] = ai6[0] + i5;
        if (i1 != 0) {
            l[i1] = k4;
            j[0] = (byte)i3;
            j[1] = (byte)k3;
            i3 = k4 >>> j1 - k3;
            j[2] = i2 - k[i1 - 1] - i3;
            System.arraycopy(j, 0, ai5, (i3 + k[i1 - 1]) * 3, 3);
            j5 = i2;
            i2 = j1;
            i3 = i1;
            j1 = i5;
            i1 = j5;
        } else {
            ai3[0] = i2;
            j5 = i2;
            i2 = j1;
            i3 = i1;
            j1 = i5;
            i1 = j5;
        }
          goto _L17
        j[1] = (byte)(l3 - i2);
        if (j3 >= j6)
            j[0] = 192;
        else
        if (ai7[j3] < k1) {
            ai = j;
            if (ai7[j3] < 256)
                i5 = 0;
            else
                i5 = 96;
            ai[0] = (byte)i5;
            ai = j;
            i5 = j3 + 1;
            ai[2] = ai7[j3];
            j3 = i5;
        } else {
            j[0] = (byte)(ai2[ai7[j3] - k1] + 16 + 64);
            ai = j;
            i5 = j3 + 1;
            ai[2] = ai1[ai7[j3] - k1];
            j3 = i5;
        }
        for (i5 = k4 >>> i2; i5 < j1; i5 += 1 << l3 - i2)
            System.arraycopy(j, 0, ai5, (i1 + i5) * 3, 3);

        for (i5 = 1 << l3 - 1; (k4 & i5) != 0; i5 >>>= 1)
            k4 ^= i5;

        j5 = k4 ^ i5;
        for (k4 = (1 << i2) - 1; (k4 & j5) != l[i3]; k4 = (1 << i2) - 1) {
            i3--;
            i2 -= k3;
        }

        break MISSING_BLOCK_LABEL_1115;
        l3++;
          goto _L18
_L12:
        if (i6 != 0 && k2 != 1)
            i1 = -5;
        else
            i1 = 0;
          goto _L7
        k4 = j1;
        j1 = i3;
        i3 = i1;
        i5 = l5;
        i1 = k4;
        k4 = j5;
          goto _L19
    }

    static int a(int ai[], int ai1[], int ai2[][], int ai3[][], i i1) {
        ai[0] = 9;
        ai1[0] = 5;
        ai2[0] = a;
        ai3[0] = b;
        return 0;
    }

    private void a(int i1) {
        if (g == null) {
            g = new int[1];
            h = new int[i1];
            i = new int[16];
            j = new int[3];
            k = new int[15];
            l = new int[16];
        }
        if (h.length < i1)
            h = new int[i1];
        for (int j1 = 0; j1 < i1; j1++)
            h[j1] = 0;

        for (i1 = 0; i1 < 16; i1++)
            i[i1] = 0;

        for (i1 = 0; i1 < 3; i1++)
            j[i1] = 0;

        System.arraycopy(i, 0, k, 0, 15);
        System.arraycopy(i, 0, l, 0, 16);
    }

    int a(int i1, int j1, int ai[], int ai1[], int ai2[], int ai3[], int ai4[], 
            int ai5[], i k1) {
        int l1;
        a(288);
        g[0] = 0;
        l1 = a(ai, 0, i1, 257, c, d, ai3, ai1, ai5, g, h);
        if (l1 == 0 && ai1[0] != 0) goto _L2; else goto _L1
_L1:
        if (l1 != -3) goto _L4; else goto _L3
_L3:
        k1.i = "oversubscribed literal/length tree";
        i1 = l1;
_L6:
        return i1;
_L4:
        i1 = l1;
        if (l1 != -4) {
            k1.i = "incomplete literal/length tree";
            i1 = -3;
        }
        continue; /* Loop/switch isn't completed */
_L2:
        a(288);
        j1 = a(ai, i1, j1, 0, e, f, ai4, ai2, ai5, g, h);
        if (j1 != 0 || ai2[0] == 0 && i1 > 257) {
            if (j1 == -3) {
                k1.i = "oversubscribed distance tree";
                i1 = j1;
            } else
            if (j1 == -5) {
                k1.i = "incomplete distance tree";
                i1 = -3;
            } else {
                i1 = j1;
                if (j1 != -4) {
                    k1.i = "empty distance tree with lengths";
                    i1 = -3;
                }
            }
        } else {
            i1 = 0;
        }
        if (true) goto _L6; else goto _L5
_L5:
    }

    int a(int ai[], int ai1[], int ai2[], int ai3[], i i1) {
        int j1;
        a(19);
        g[0] = 0;
        j1 = a(ai, 0, 19, 19, null, null, ai2, ai1, ai3, g, h);
        if (j1 != -3) goto _L2; else goto _L1
_L1:
        i1.i = "oversubscribed dynamic bit lengths tree";
_L4:
        return j1;
_L2:
        if (j1 == -5 || ai1[0] == 0) {
            i1.i = "incomplete dynamic bit lengths tree";
            j1 = -3;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

}
