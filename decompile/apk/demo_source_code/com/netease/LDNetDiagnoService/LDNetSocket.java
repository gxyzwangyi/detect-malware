// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.netease.LDNetDiagnoService;

import android.util.Log;
import java.io.IOException;
import java.net.*;
import java.util.List;

public class LDNetSocket {
    public static interface LDNetSocketListener {

        public abstract void OnNetSocketFinished(String s);

        public abstract void OnNetSocketUpdated(String s);
    }


    private static final int CONN_TIMES = 4;
    private static final String HOSTERR = "DNS\u89E3\u6790\u5931\u8D25,\u4E3B\u673A\u5730\u5740\u4E0D\u53EF\u8FBE";
    private static final String IOERR = "DNS\u89E3\u6790\u6B63\u5E38,IO\u5F02\u5E38,TCP\u5EFA\u7ACB\u5931\u8D25";
    private static final int PORT = 80;
    private static final String TIMEOUT = "DNS\u89E3\u6790\u6B63\u5E38,\u8FDE\u63A5\u8D85\u65F6,TCP\u5EFA\u7ACB\u5931\u8D25";
    private static LDNetSocket instance = null;
    static boolean loaded;
    private final long RttTimes[] = new long[4];
    public InetAddress _remoteInet[];
    public List _remoteIpList;
    public boolean isCConn;
    private boolean isConnnected[];
    private LDNetSocketListener listener;
    private int timeOut;

    private LDNetSocket() {
        timeOut = 6000;
        isCConn = true;
    }

    private boolean execIP(InetAddress inetaddress, String s) {
        int j;
        boolean flag;
        StringBuilder stringbuilder;
        stringbuilder = new StringBuilder();
        if (inetaddress == null || s == null)
            break MISSING_BLOCK_LABEL_441;
        inetaddress = new InetSocketAddress(inetaddress, 80);
        flag = false;
        listener.OnNetSocketUpdated((new StringBuilder()).append("Connect to host: ").append(s).append("...\n").toString());
        j = 0;
_L10:
        byte byte0 = flag;
        if (j >= 4) goto _L2; else goto _L1
_L1:
        execSocket(inetaddress, timeOut, j);
        if (RttTimes[j] != -1L) goto _L4; else goto _L3
_L3:
        listener.OnNetSocketUpdated((new StringBuilder()).append(j + 1).append("'s time=TimeOut,  ").toString());
        timeOut = timeOut + 4000;
        if (j <= 0 || RttTimes[j - 1] != -1L) goto _L6; else goto _L5
_L5:
        byte0 = -1;
_L2:
        boolean flag1;
        if (byte0 == -1)
            flag1 = false;
        else
        if (byte0 == -2) {
            flag1 = false;
        } else {
            int k = 0;
            long l3 = 0L;
            for (int i = 0; i < 4;) {
                int l = k;
                long l1 = l3;
                if (RttTimes[i] > 0L) {
                    l1 = l3 + RttTimes[i];
                    l = k + 1;
                }
                i++;
                k = l;
                l3 = l1;
            }

            if (k > 0) {
                long l2 = l3 / (long)k;
                stringbuilder.append((new StringBuilder()).append("average=").append(l2).append("ms").toString());
            }
            flag1 = true;
        }
_L11:
        listener.OnNetSocketUpdated(stringbuilder.toString());
        return flag1;
_L4:
        if (RttTimes[j] != -2L) goto _L8; else goto _L7
_L7:
        listener.OnNetSocketUpdated((new StringBuilder()).append(j + 1).append("'s time=IOException").toString());
        if (j <= 0 || RttTimes[j - 1] != -2L) goto _L6; else goto _L9
_L9:
        byte0 = -2;
          goto _L2
_L8:
        listener.OnNetSocketUpdated((new StringBuilder()).append(j + 1).append("'s time=").append(RttTimes[j]).append("ms,  ").toString());
_L6:
        j++;
          goto _L10
        flag1 = false;
          goto _L11
    }

    private void execSocket(InetSocketAddress inetsocketaddress, int i, int j) {
        Socket socket1;
        socket1 = JVM INSTR new #130 <Class Socket>;
        socket1.Socket();
        Socket socket = socket1;
        long l = System.currentTimeMillis();
        socket = socket1;
        socket1.connect(inetsocketaddress, i);
        socket = socket1;
        long l1 = System.currentTimeMillis();
        socket = socket1;
        RttTimes[j] = l1 - l;
        if (socket1 == null)
            break MISSING_BLOCK_LABEL_64;
        socket1.close();
_L1:
        return;
        inetsocketaddress;
        inetsocketaddress.printStackTrace();
          goto _L1
        inetsocketaddress;
        socket1 = null;
_L5:
        socket = socket1;
        RttTimes[j] = -1L;
        socket = socket1;
        inetsocketaddress.printStackTrace();
        if (socket1 != null)
            try {
                socket1.close();
            }
            // Misplaced declaration of an exception variable
            catch (InetSocketAddress inetsocketaddress) {
                inetsocketaddress.printStackTrace();
            }
          goto _L1
        inetsocketaddress;
        socket1 = null;
_L4:
        socket = socket1;
        RttTimes[j] = -2L;
        socket = socket1;
        inetsocketaddress.printStackTrace();
        if (socket1 != null)
            try {
                socket1.close();
            }
            // Misplaced declaration of an exception variable
            catch (InetSocketAddress inetsocketaddress) {
                inetsocketaddress.printStackTrace();
            }
          goto _L1
        inetsocketaddress;
        socket = null;
_L3:
        if (socket != null)
            try {
                socket.close();
            }
            catch (IOException ioexception) {
                ioexception.printStackTrace();
            }
        throw inetsocketaddress;
        inetsocketaddress;
        if (true) goto _L3; else goto _L2
_L2:
        inetsocketaddress;
          goto _L4
        inetsocketaddress;
          goto _L5
    }

    private boolean execUseJava(String s) {
        if (_remoteInet == null || _remoteIpList == null) goto _L2; else goto _L1
_L1:
        int j;
        int k;
        k = _remoteInet.length;
        isConnnected = new boolean[k];
        for (int i = 0; i < k; i++) {
            if (i != 0)
                listener.OnNetSocketUpdated("\n");
            isConnnected[i] = execIP(_remoteInet[i], (String)_remoteIpList.get(i));
        }

        s = isConnnected;
        k = s.length;
        j = 0;
_L5:
        if (j >= k)
            break MISSING_BLOCK_LABEL_146;
        if (!Boolean.valueOf(s[j]).booleanValue()) goto _L4; else goto _L3
_L3:
        boolean flag;
        listener.OnNetSocketFinished("\n");
        flag = true;
_L6:
        return flag;
_L4:
        j++;
          goto _L5
_L2:
        listener.OnNetSocketFinished("DNS\u89E3\u6790\u5931\u8D25,\u4E3B\u673A\u5730\u5740\u4E0D\u53EF\u8FBE");
        listener.OnNetSocketFinished("\n");
        flag = false;
          goto _L6
    }

    public static LDNetSocket getInstance() {
        if (instance == null)
            instance = new LDNetSocket();
        return instance;
    }

    public boolean exec(String s) {
        if (!isCConn || !loaded) goto _L2; else goto _L1
_L1:
        boolean flag;
        try {
            startJNITelnet(s, "80");
        }
        catch (UnsatisfiedLinkError unsatisfiedlinkerror) {
            unsatisfiedlinkerror.printStackTrace();
            Log.i("LDNetSocket", "call jni failed, call execUseJava");
            flag = execUseJava(s);
            continue; /* Loop/switch isn't completed */
        }
        flag = true;
_L4:
        return flag;
_L2:
        flag = execUseJava(s);
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void initListener(LDNetSocketListener ldnetsocketlistener) {
        listener = ldnetsocketlistener;
    }

    public void printSocketInfo(String s) {
        listener.OnNetSocketUpdated(s);
    }

    public void resetInstance() {
        if (instance != null)
            instance = null;
    }

    public native void startJNITelnet(String s, String s1);

    static  {
        System.loadLibrary("tracepath");
        loaded = true;
_L1:
        return;
        Object obj;
        obj;
        ((UnsatisfiedLinkError) (obj)).printStackTrace();
          goto _L1
        obj;
        ((Exception) (obj)).printStackTrace();
          goto _L1
    }
}
