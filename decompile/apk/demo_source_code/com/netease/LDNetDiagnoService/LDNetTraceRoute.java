// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.netease.LDNetDiagnoService;

import android.util.Log;
import java.io.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class LDNetTraceRoute {
    public static interface LDNetTraceRouteListener {

        public abstract void OnNetTraceFinished();

        public abstract void OnNetTraceUpdated(String s);
    }

    private class PingTask {

        private static final String MATCH_PING_HOST_IP = "(?<=\\().*?(?=\\))";
        private String host;
        final LDNetTraceRoute this$0;

        public String getHost() {
            return host;
        }

        public PingTask(String s) {
            this$0 = LDNetTraceRoute.this;
            super();
            host = s;
            ldnettraceroute = Pattern.compile("(?<=\\().*?(?=\\))").matcher(s);
            if (find())
                host = group();
        }
    }

    private class TraceTask {

        private int hop;
        private final String host;
        final LDNetTraceRoute this$0;

        public int getHop() {
            return hop;
        }

        public String getHost() {
            return host;
        }

        public void setHop(int i) {
            hop = i;
        }

        public TraceTask(String s, int i) {
            this$0 = LDNetTraceRoute.this;
            super();
            host = s;
            hop = i;
        }
    }


    private static final String MATCH_PING_IP = "(?<=from ).*(?=: icmp_seq=1 ttl=)";
    private static final String MATCH_PING_TIME = "(?<=time=).*?ms";
    private static final String MATCH_TRACE_IP = "(?<=From )(?:[0-9]{1,3}\\.){3}[0-9]{1,3}";
    private static LDNetTraceRoute instance;
    static boolean loaded;
    private final String LOG_TAG = "LDNetTraceRoute";
    public boolean isCTrace;
    LDNetTraceRouteListener listener;

    private LDNetTraceRoute() {
        isCTrace = true;
    }

    private String execPing(PingTask pingtask) {
        Object obj2 = null;
        Runtime runtime = Runtime.getRuntime();
        StringBuilder stringbuilder = JVM INSTR new #75  <Class StringBuilder>;
        stringbuilder.StringBuilder();
        pingtask = runtime.exec(stringbuilder.append("ping -c 1 ").append(pingtask.getHost()).toString());
        Object obj;
        Exception exception;
        Object obj1;
        Object obj3;
        String s;
        InterruptedException interruptedexception;
        StringBuilder stringbuilder1;
        try {
            obj1 = JVM INSTR new #95  <Class BufferedReader>;
            InputStreamReader inputstreamreader = JVM INSTR new #97  <Class InputStreamReader>;
            inputstreamreader.InputStreamReader(pingtask.getInputStream());
            ((BufferedReader) (obj1)).BufferedReader(inputstreamreader);
        }
        // Misplaced declaration of an exception variable
        catch (Object obj2) {
            obj1 = null;
            exception = "";
            continue; /* Loop/switch isn't completed */
        }
        // Misplaced declaration of an exception variable
        catch (InterruptedException interruptedexception) {
            obj1 = null;
            exception = "";
            continue; /* Loop/switch isn't completed */
        }
_L5:
        obj = "";
_L2:
        obj3 = obj1;
        obj2 = pingtask;
        s = ((BufferedReader) (obj1)).readLine();
        if (s == null)
            break; /* Loop/switch isn't completed */
        obj3 = obj1;
        obj2 = pingtask;
        stringbuilder1 = JVM INSTR new #75  <Class StringBuilder>;
        obj3 = obj1;
        obj2 = pingtask;
        stringbuilder1.StringBuilder();
        obj3 = obj1;
        obj2 = pingtask;
        s = stringbuilder1.append(((String) (obj))).append(s).toString();
        obj = s;
        if (true) goto _L2; else goto _L1
_L1:
        obj3 = obj1;
        obj2 = pingtask;
        ((BufferedReader) (obj1)).close();
        obj3 = obj1;
        obj2 = pingtask;
        pingtask.waitFor();
        if (obj1 == null)
            break MISSING_BLOCK_LABEL_156;
        ((BufferedReader) (obj1)).close();
        pingtask.destroy();
_L11:
        return ((String) (obj));
        obj2;
        obj1 = null;
        obj = "";
        pingtask = null;
_L9:
        ((IOException) (obj2)).printStackTrace();
        if (obj1 == null)
            break MISSING_BLOCK_LABEL_184;
        ((BufferedReader) (obj1)).close();
        pingtask.destroy();
        continue; /* Loop/switch isn't completed */
        pingtask;
        continue; /* Loop/switch isn't completed */
        interruptedexception;
        obj1 = null;
        pingtask = null;
        obj = "";
_L7:
        obj3 = obj1;
        obj2 = pingtask;
        interruptedexception.printStackTrace();
        if (obj1 == null)
            break MISSING_BLOCK_LABEL_223;
        ((BufferedReader) (obj1)).close();
        pingtask.destroy();
        continue; /* Loop/switch isn't completed */
        pingtask;
        continue; /* Loop/switch isn't completed */
        exception;
        pingtask = null;
        obj1 = obj2;
_L6:
        if (obj1 == null)
            break MISSING_BLOCK_LABEL_248;
        ((BufferedReader) (obj1)).close();
        pingtask.destroy();
_L4:
        throw exception;
        pingtask;
        if (true) goto _L4; else goto _L3
_L3:
        exception;
        obj1 = obj2;
        continue; /* Loop/switch isn't completed */
        exception;
        obj1 = obj3;
        pingtask = ((PingTask) (obj2));
        continue; /* Loop/switch isn't completed */
        exception;
        if (true) goto _L6; else goto _L5
        interruptedexception;
        if (true) goto _L7; else goto _L5
        obj2;
        if (true) goto _L9; else goto _L8
_L8:
        pingtask;
        if (true) goto _L11; else goto _L10
_L10:
    }

    private void execTrace(TraceTask tracetask) {
        boolean flag;
        Object obj;
        Process process;
        Pattern pattern;
        Pattern pattern1;
        Pattern pattern2;
        obj = null;
        pattern2 = Pattern.compile("(?<=From )(?:[0-9]{1,3}\\.){3}[0-9]{1,3}");
        pattern = Pattern.compile("(?<=from ).*(?=: icmp_seq=1 ttl=)");
        pattern1 = Pattern.compile("(?<=time=).*?ms");
        flag = false;
        process = null;
_L10:
        if (flag) goto _L2; else goto _L1
_L1:
        if (tracetask.getHop() >= 30) goto _L2; else goto _L3
_L3:
        Object obj1;
        obj1 = JVM INSTR new #75  <Class StringBuilder>;
        ((StringBuilder) (obj1)).StringBuilder();
        obj1 = ((StringBuilder) (obj1)).append("ping -c 1 -t ").append(tracetask.getHop()).append(" ").append(tracetask.getHost()).toString();
        obj1 = Runtime.getRuntime().exec(((String) (obj1)));
        process = ((Process) (obj1));
        obj1 = JVM INSTR new #95  <Class BufferedReader>;
        InputStreamReader inputstreamreader = JVM INSTR new #97  <Class InputStreamReader>;
        inputstreamreader.InputStreamReader(process.getInputStream());
        ((BufferedReader) (obj1)).BufferedReader(inputstreamreader);
        Object obj3 = "";
_L5:
        Process process1;
        obj = obj1;
        process1 = process;
        Object obj4 = ((BufferedReader) (obj1)).readLine();
        if (obj4 == null)
            break; /* Loop/switch isn't completed */
        obj = obj1;
        process1 = process;
        StringBuilder stringbuilder = JVM INSTR new #75  <Class StringBuilder>;
        obj = obj1;
        process1 = process;
        stringbuilder.StringBuilder();
        obj = obj1;
        process1 = process;
        obj3 = stringbuilder.append(((String) (obj3))).append(((String) (obj4))).toString();
        if (true) goto _L5; else goto _L4
_L4:
        obj = obj1;
        process1 = process;
        ((BufferedReader) (obj1)).close();
        obj = obj1;
        process1 = process;
        process.waitFor();
        obj = obj1;
        process1 = process;
        obj4 = pattern2.matcher(((CharSequence) (obj3)));
        obj = obj1;
        process1 = process;
        stringbuilder = JVM INSTR new #75  <Class StringBuilder>;
        obj = obj1;
        process1 = process;
        stringbuilder.StringBuilder(256);
        obj = obj1;
        process1 = process;
        if (!((Matcher) (obj4)).find()) goto _L7; else goto _L6
_L6:
        obj = obj1;
        process1 = process;
        obj3 = ((Matcher) (obj4)).group();
        obj = obj1;
        process1 = process;
        obj4 = JVM INSTR new #9   <Class LDNetTraceRoute$PingTask>;
        obj = obj1;
        process1 = process;
        ((PingTask) (obj4)).this. PingTask(((String) (obj3)));
        obj = obj1;
        process1 = process;
        obj4 = execPing(((PingTask) (obj4)));
        obj = obj1;
        process1 = process;
        if (((String) (obj4)).length() != 0) goto _L9; else goto _L8
_L8:
        obj = obj1;
        process1 = process;
        stringbuilder.append("unknown host or network error\n");
        flag = true;
_L13:
        obj = obj1;
          goto _L10
_L9:
        obj = obj1;
        process1 = process;
        obj4 = pattern1.matcher(((CharSequence) (obj4)));
        obj = obj1;
        process1 = process;
        if (!((Matcher) (obj4)).find()) goto _L12; else goto _L11
_L11:
        obj = obj1;
        process1 = process;
        obj4 = ((Matcher) (obj4)).group();
        obj = obj1;
        process1 = process;
        stringbuilder.append(tracetask.getHop());
        obj = obj1;
        process1 = process;
        stringbuilder.append("\t\t");
        obj = obj1;
        process1 = process;
        stringbuilder.append(((String) (obj3)));
        obj = obj1;
        process1 = process;
        stringbuilder.append("\t\t");
        obj = obj1;
        process1 = process;
        stringbuilder.append(((String) (obj4)));
        obj = obj1;
        process1 = process;
        stringbuilder.append("\t");
_L14:
        obj = obj1;
        process1 = process;
        listener.OnNetTraceUpdated(stringbuilder.toString());
        obj = obj1;
        process1 = process;
        tracetask.setHop(tracetask.getHop() + 1);
          goto _L13
        obj;
        tracetask = ((TraceTask) (obj1));
_L22:
        ((IOException) (obj)).printStackTrace();
        if (tracetask == null)
            break MISSING_BLOCK_LABEL_568;
        tracetask.close();
        process.destroy();
_L15:
        listener.OnNetTraceFinished();
        return;
_L12:
        obj = obj1;
        process1 = process;
        stringbuilder.append(tracetask.getHop());
        obj = obj1;
        process1 = process;
        stringbuilder.append("\t\t");
        obj = obj1;
        process1 = process;
        stringbuilder.append(((String) (obj3)));
        obj = obj1;
        process1 = process;
        stringbuilder.append("\t\t timeout \t");
          goto _L14
        tracetask;
_L21:
        obj = obj1;
        process1 = process;
        tracetask.printStackTrace();
        if (obj1 == null)
            break MISSING_BLOCK_LABEL_670;
        ((BufferedReader) (obj1)).close();
        process.destroy();
          goto _L15
        tracetask;
          goto _L15
_L7:
        obj = obj1;
        process1 = process;
        obj4 = pattern.matcher(((CharSequence) (obj3)));
        obj = obj1;
        process1 = process;
        if (!((Matcher) (obj4)).find())
            break MISSING_BLOCK_LABEL_890;
        obj = obj1;
        process1 = process;
        obj4 = ((Matcher) (obj4)).group();
        obj = obj1;
        process1 = process;
        obj3 = pattern1.matcher(((CharSequence) (obj3)));
        obj = obj1;
        process1 = process;
        if (!((Matcher) (obj3)).find())
            break MISSING_BLOCK_LABEL_885;
        obj = obj1;
        process1 = process;
        obj3 = ((Matcher) (obj3)).group();
        obj = obj1;
        process1 = process;
        stringbuilder.append(tracetask.getHop());
        obj = obj1;
        process1 = process;
        stringbuilder.append("\t\t");
        obj = obj1;
        process1 = process;
        stringbuilder.append(((String) (obj4)));
        obj = obj1;
        process1 = process;
        stringbuilder.append("\t\t");
        obj = obj1;
        process1 = process;
        stringbuilder.append(((String) (obj3)));
        obj = obj1;
        process1 = process;
        stringbuilder.append("\t");
        obj = obj1;
        process1 = process;
        listener.OnNetTraceUpdated(stringbuilder.toString());
        flag = true;
          goto _L13
        obj = obj1;
        process1 = process;
        if (((String) (obj3)).length() != 0) goto _L17; else goto _L16
_L16:
        obj = obj1;
        process1 = process;
        stringbuilder.append("unknown host or network error\t");
        flag = true;
_L18:
        obj = obj1;
        process1 = process;
        listener.OnNetTraceUpdated(stringbuilder.toString());
          goto _L13
        tracetask;
        process = process1;
_L20:
        if (obj == null)
            break MISSING_BLOCK_LABEL_959;
        ((BufferedReader) (obj)).close();
        process.destroy();
_L19:
        throw tracetask;
_L17:
        obj = obj1;
        process1 = process;
        stringbuilder.append(tracetask.getHop());
        obj = obj1;
        process1 = process;
        stringbuilder.append("\t\t timeout \t");
        obj = obj1;
        process1 = process;
        tracetask.setHop(tracetask.getHop() + 1);
          goto _L18
_L2:
        if (obj == null)
            break MISSING_BLOCK_LABEL_1026;
        ((BufferedReader) (obj)).close();
        process.destroy();
          goto _L15
        tracetask;
          goto _L15
        obj;
          goto _L19
        tracetask;
          goto _L20
        tracetask;
          goto _L20
        obj;
        obj1 = tracetask;
        tracetask = ((TraceTask) (obj));
        obj = obj1;
          goto _L20
        tracetask;
        obj1 = obj;
          goto _L21
        tracetask;
        obj1 = obj;
          goto _L21
        tracetask;
          goto _L15
        tracetask;
        Object obj2 = obj;
        obj = tracetask;
        tracetask = ((TraceTask) (obj2));
          goto _L22
        IOException ioexception;
        ioexception;
        tracetask = ((TraceTask) (obj));
        obj = ioexception;
          goto _L22
    }

    public static LDNetTraceRoute getInstance() {
        if (instance == null)
            instance = new LDNetTraceRoute();
        return instance;
    }

    public void initListenter(LDNetTraceRouteListener ldnettraceroutelistener) {
        listener = ldnettraceroutelistener;
    }

    public void printTraceInfo(String s) {
        listener.OnNetTraceUpdated(s);
    }

    public void resetInstance() {
        if (instance != null)
            instance = null;
    }

    public native void startJNICTraceRoute(String s);

    public void startTraceRoute(String s) {
        if (!isCTrace || !loaded)
            break MISSING_BLOCK_LABEL_49;
        startJNICTraceRoute(s);
_L1:
        return;
        UnsatisfiedLinkError unsatisfiedlinkerror;
        unsatisfiedlinkerror;
        unsatisfiedlinkerror.printStackTrace();
        Log.i("LDNetTraceRoute", "\u8C03\u7528java\u6A21\u62DFtraceRoute");
        execTrace(new TraceTask(s, 1));
          goto _L1
        execTrace(new TraceTask(s, 1));
          goto _L1
    }

    static  {
        System.loadLibrary("tracepath");
        loaded = true;
_L1:
        return;
        Object obj;
        obj;
        ((UnsatisfiedLinkError) (obj)).printStackTrace();
          goto _L1
        obj;
        ((Exception) (obj)).printStackTrace();
          goto _L1
    }
}
