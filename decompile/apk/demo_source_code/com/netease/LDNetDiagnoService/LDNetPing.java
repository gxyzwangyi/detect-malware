// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.netease.LDNetDiagnoService;

import android.util.Log;
import com.netease.LDNetDiagnoUtils.LDPingParse;
import java.io.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class LDNetPing {
    public static interface LDNetPingListener {

        public abstract void OnNetPingFinished(String s);
    }

    private class PingTask {

        private static final String MATCH_PING_HOST_IP = "(?<=\\().*?(?=\\))";
        private String host;
        final LDNetPing this$0;

        public String getHost() {
            return host;
        }

        public PingTask(String s) {
            this$0 = LDNetPing.this;
            super();
            host = s;
            ldnetping = Pattern.compile("(?<=\\().*?(?=\\))").matcher(s);
            if (find())
                host = group();
        }
    }


    private static final String MATCH_PING_IP = "(?<=from ).*(?=: icmp_seq=1 ttl=)";
    private final int _sendCount;
    LDNetPingListener listener;

    public LDNetPing(LDNetPingListener ldnetpinglistener, int i) {
        listener = ldnetpinglistener;
        _sendCount = i;
    }

    private String execPing(PingTask pingtask, boolean flag) {
        String s;
        Object obj2;
        obj2 = null;
        s = "ping -c ";
        if (flag)
            s = "ping -s 8185 -c  ";
        Runtime runtime = Runtime.getRuntime();
        StringBuilder stringbuilder = JVM INSTR new #48  <Class StringBuilder>;
        stringbuilder.StringBuilder();
        pingtask = runtime.exec(stringbuilder.append(s).append(_sendCount).append(" ").append(pingtask.getHost()).toString());
        Object obj1;
        Object obj;
        Exception exception;
        Object obj3;
        Object obj5;
        InterruptedException interruptedexception;
        String s1;
        try {
            obj1 = JVM INSTR new #71  <Class BufferedReader>;
            InputStreamReader inputstreamreader = JVM INSTR new #73  <Class InputStreamReader>;
            inputstreamreader.InputStreamReader(pingtask.getInputStream());
            ((BufferedReader) (obj1)).BufferedReader(inputstreamreader);
        }
        // Misplaced declaration of an exception variable
        catch (Object obj2) {
            Object obj4 = null;
            exception = "";
            obj1 = pingtask;
            pingtask = obj4;
            continue; /* Loop/switch isn't completed */
        }
        // Misplaced declaration of an exception variable
        catch (InterruptedException interruptedexception) {
            obj1 = null;
            exception = "";
            continue; /* Loop/switch isn't completed */
        }
_L5:
        obj = "";
_L2:
        obj3 = obj1;
        obj2 = pingtask;
        s1 = ((BufferedReader) (obj1)).readLine();
        if (s1 == null)
            break; /* Loop/switch isn't completed */
        obj3 = obj1;
        obj2 = pingtask;
        obj5 = JVM INSTR new #48  <Class StringBuilder>;
        obj3 = obj1;
        obj2 = pingtask;
        ((StringBuilder) (obj5)).StringBuilder();
        obj3 = obj1;
        obj2 = pingtask;
        obj5 = ((StringBuilder) (obj5)).append(((String) (obj))).append(s1).toString();
        obj = obj5;
        if (true) goto _L2; else goto _L1
_L1:
        obj3 = obj1;
        obj2 = pingtask;
        ((BufferedReader) (obj1)).close();
        obj3 = obj1;
        obj2 = pingtask;
        pingtask.waitFor();
        if (obj1 == null)
            break MISSING_BLOCK_LABEL_194;
        ((BufferedReader) (obj1)).close();
        pingtask.destroy();
_L11:
        return ((String) (obj));
        obj2;
        pingtask = null;
        obj = "";
        obj1 = null;
_L9:
        ((IOException) (obj2)).printStackTrace();
        if (pingtask == null)
            break MISSING_BLOCK_LABEL_223;
        pingtask.close();
        ((Process) (obj1)).destroy();
        continue; /* Loop/switch isn't completed */
        pingtask;
        continue; /* Loop/switch isn't completed */
        interruptedexception;
        obj1 = null;
        pingtask = null;
        obj = "";
_L7:
        obj3 = obj1;
        obj2 = pingtask;
        interruptedexception.printStackTrace();
        if (obj1 == null)
            break MISSING_BLOCK_LABEL_267;
        ((BufferedReader) (obj1)).close();
        pingtask.destroy();
        continue; /* Loop/switch isn't completed */
        pingtask;
        continue; /* Loop/switch isn't completed */
        exception;
        pingtask = null;
        obj1 = obj2;
_L6:
        if (obj1 == null)
            break MISSING_BLOCK_LABEL_295;
        ((BufferedReader) (obj1)).close();
        pingtask.destroy();
_L4:
        throw exception;
        pingtask;
        if (true) goto _L4; else goto _L3
_L3:
        exception;
        obj1 = obj2;
        continue; /* Loop/switch isn't completed */
        exception;
        obj1 = obj3;
        pingtask = ((PingTask) (obj2));
        continue; /* Loop/switch isn't completed */
        exception;
        obj2 = obj1;
        obj1 = pingtask;
        pingtask = ((PingTask) (obj2));
        if (true) goto _L6; else goto _L5
        interruptedexception;
        if (true) goto _L7; else goto _L5
        obj2;
        PingTask pingtask1 = pingtask;
        pingtask = ((PingTask) (obj1));
        obj1 = pingtask1;
        if (true) goto _L9; else goto _L8
_L8:
        pingtask;
        if (true) goto _L11; else goto _L10
_L10:
    }

    public void exec(String s, boolean flag) {
        Object obj = new PingTask(s);
        StringBuilder stringbuilder = new StringBuilder(256);
        obj = execPing(((PingTask) (obj)), flag);
        if (Pattern.compile("(?<=from ).*(?=: icmp_seq=1 ttl=)").matcher(((CharSequence) (obj))).find()) {
            Log.i("LDNetPing", (new StringBuilder()).append("status").append(((String) (obj))).toString());
            stringbuilder.append((new StringBuilder()).append("\t").append(((String) (obj))).toString());
        } else
        if (((String) (obj)).length() == 0)
            stringbuilder.append("unknown host or network error");
        else
            stringbuilder.append("timeout");
        s = LDPingParse.getFormattingStr(s, stringbuilder.toString());
        listener.OnNetPingFinished(s);
    }
}
