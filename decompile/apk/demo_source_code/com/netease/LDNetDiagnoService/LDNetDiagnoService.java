// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.netease.LDNetDiagnoService;

import android.content.Context;
import android.os.Build;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import com.netease.LDNetDiagnoUtils.LDNetUtil;
import java.io.IOException;
import java.io.PrintStream;
import java.net.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicInteger;

// Referenced classes of package com.netease.LDNetDiagnoService:
//            LDNetAsyncTaskEx, LDNetTraceRoute, LDNetDiagnoListener, LDNetSocket, 
//            LDNetPing

public class LDNetDiagnoService extends LDNetAsyncTaskEx
    implements LDNetPing.LDNetPingListener, LDNetSocket.LDNetSocketListener, LDNetTraceRoute.LDNetTraceRouteListener {

    private static final int CORE_POOL_SIZE = 1;
    private static final int KEEP_ALIVE = 10;
    private static final int MAXIMUM_POOL_SIZE = 1;
    private static ThreadPoolExecutor sExecutor = null;
    private static final ThreadFactory sThreadFactory = new ThreadFactory() {

        private final AtomicInteger mCount = new AtomicInteger(1);

        public Thread newThread(Runnable runnable) {
            runnable = new Thread(runnable, (new StringBuilder()).append("Trace #").append(mCount.getAndIncrement()).toString());
            runnable.setPriority(1);
            return runnable;
        }

    }
;
    private static final BlockingQueue sWorkQueue = new LinkedBlockingQueue(2);
    private String _ISOCountryCode;
    private String _MobileCountryCode;
    private String _MobileNetCode;
    private String _UID;
    private String _appCode;
    private String _appName;
    private String _appVersion;
    private String _carrierName;
    private Context _context;
    private String _deviceID;
    private String _dns1;
    private String _dns2;
    private String _dormain;
    private String _gateWay;
    private boolean _isDomainParseOk;
    private boolean _isNetConnected;
    private boolean _isRunning;
    private boolean _isSocketConnected;
    private boolean _isUseJNICConn;
    private boolean _isUseJNICTrace;
    private String _localIp;
    private final StringBuilder _logInfo;
    private LDNetDiagnoListener _netDiagnolistener;
    private LDNetPing _netPinger;
    private LDNetSocket _netSocker;
    private String _netType;
    private InetAddress _remoteInet[];
    private List _remoteIpList;
    private TelephonyManager _telManager;
    private LDNetTraceRoute _traceRouter;

    public LDNetDiagnoService() {
        _logInfo = new StringBuilder(256);
        _isUseJNICConn = false;
        _isUseJNICTrace = true;
        _telManager = null;
    }

    public LDNetDiagnoService(Context context, String s, String s1, String s2, String s3, String s4, String s5, 
            String s6, String s7, String s8, String s9, LDNetDiagnoListener ldnetdiagnolistener) {
        _logInfo = new StringBuilder(256);
        _isUseJNICConn = false;
        _isUseJNICTrace = true;
        _telManager = null;
        _context = context;
        _appCode = s;
        _appName = s1;
        _appVersion = s2;
        _UID = s3;
        _deviceID = s4;
        _dormain = s5;
        _carrierName = s6;
        _ISOCountryCode = s7;
        _MobileCountryCode = s8;
        _MobileNetCode = s9;
        _netDiagnolistener = ldnetdiagnolistener;
        _isRunning = false;
        _remoteIpList = new ArrayList();
        _telManager = (TelephonyManager)context.getSystemService("phone");
        sExecutor = new ThreadPoolExecutor(1, 1, 10L, TimeUnit.SECONDS, sWorkQueue, sThreadFactory);
    }

    private boolean parseDomain(String s) {
        String s1 = "";
        Object obj = LDNetUtil.getDomainIp(s);
        String s2 = (String)((Map) (obj)).get("useTime");
        _remoteInet = (InetAddress[])(InetAddress[])((Map) (obj)).get("remoteInet");
        if (Integer.parseInt(s2) > 5000)
            obj = (new StringBuilder()).append(" (").append(Integer.parseInt(s2) / 1000).append("s)").toString();
        else
            obj = (new StringBuilder()).append(" (").append(s2).append("ms)").toString();
        boolean flag;
        if (_remoteInet != null) {
            int k = _remoteInet.length;
            for (int i = 0; i < k; i++) {
                _remoteIpList.add(_remoteInet[i].getHostAddress());
                s1 = (new StringBuilder()).append(s1).append(_remoteInet[i].getHostAddress()).append(",").toString();
            }

            s = s1.substring(0, s1.length() - 1);
            recordStepInfo((new StringBuilder()).append("DNS\u89E3\u6790\u7ED3\u679C:\t").append(s).append(((String) (obj))).toString());
            flag = true;
        } else
        if (Integer.parseInt(s2) > 10000) {
            obj = LDNetUtil.getDomainIp(s);
            s = (String)((Map) (obj)).get("useTime");
            _remoteInet = (InetAddress[])(InetAddress[])((Map) (obj)).get("remoteInet");
            if (Integer.parseInt(s) > 5000)
                s = (new StringBuilder()).append(" (").append(Integer.parseInt(s) / 1000).append("s)").toString();
            else
                s = (new StringBuilder()).append(" (").append(s).append("ms)").toString();
            if (_remoteInet != null) {
                int l = _remoteInet.length;
                for (int j = 0; j < l; j++) {
                    _remoteIpList.add(_remoteInet[j].getHostAddress());
                    s1 = (new StringBuilder()).append(s1).append(_remoteInet[j].getHostAddress()).append(",").toString();
                }

                s1 = s1.substring(0, s1.length() - 1);
                recordStepInfo((new StringBuilder()).append("DNS\u89E3\u6790\u7ED3\u679C:\t").append(s1).append(s).toString());
                flag = true;
            } else {
                recordStepInfo((new StringBuilder()).append("DNS\u89E3\u6790\u7ED3\u679C:\t\u89E3\u6790\u5931\u8D25").append(s).toString());
                flag = false;
            }
        } else {
            recordStepInfo((new StringBuilder()).append("DNS\u89E3\u6790\u7ED3\u679C:\t\u89E3\u6790\u5931\u8D25").append(((String) (obj))).toString());
            flag = false;
        }
        return flag;
    }

    private void recordCurrentAppVersion() {
        recordStepInfo((new StringBuilder()).append("\u5E94\u7528code:\t").append(_appCode).toString());
        recordStepInfo((new StringBuilder()).append("\u5E94\u7528\u540D\u79F0:\t").append(_appName).toString());
        recordStepInfo((new StringBuilder()).append("\u5E94\u7528\u7248\u672C:\t").append(_appVersion).toString());
        recordStepInfo((new StringBuilder()).append("\u673A\u5668\u7C7B\u578B:\t").append(Build.MANUFACTURER).append(":").append(Build.BRAND).append(":").append(Build.MODEL).toString());
        recordStepInfo((new StringBuilder()).append("\u7CFB\u7EDF\u7248\u672C:\t").append(android.os.Build.VERSION.RELEASE).toString());
        if (_telManager != null && TextUtils.isEmpty(_deviceID))
            _deviceID = _telManager.getDeviceId();
        recordStepInfo((new StringBuilder()).append("\u673A\u5668ID:\t").append(_deviceID).toString());
        if (TextUtils.isEmpty(_carrierName))
            _carrierName = LDNetUtil.getMobileOperator(_context);
        recordStepInfo((new StringBuilder()).append("\u8FD0\u8425\u5546:\t").append(_carrierName).toString());
        if (_telManager != null && TextUtils.isEmpty(_ISOCountryCode))
            _ISOCountryCode = _telManager.getNetworkCountryIso();
        recordStepInfo((new StringBuilder()).append("ISOCountryCode:\t").append(_ISOCountryCode).toString());
        if (_telManager != null && TextUtils.isEmpty(_MobileCountryCode)) {
            String s = _telManager.getNetworkOperator();
            if (s.length() >= 3)
                _MobileCountryCode = s.substring(0, 3);
            if (s.length() >= 5)
                _MobileNetCode = s.substring(3, 5);
        }
        recordStepInfo((new StringBuilder()).append("MobileCountryCode:\t").append(_MobileCountryCode).toString());
        recordStepInfo((new StringBuilder()).append("MobileNetworkCode:\t").append(_MobileNetCode).append("\n").toString());
    }

    private void recordLocalNetEnvironmentInfo() {
        recordStepInfo((new StringBuilder()).append("\u8BCA\u65AD\u57DF\u540D ").append(_dormain).append("...").toString());
        if (LDNetUtil.isNetworkConnected(_context).booleanValue()) {
            _isNetConnected = true;
            recordStepInfo("\u5F53\u524D\u662F\u5426\u8054\u7F51:\t\u5DF2\u8054\u7F51");
        } else {
            _isNetConnected = false;
            recordStepInfo("\u5F53\u524D\u662F\u5426\u8054\u7F51:\t\u672A\u8054\u7F51");
        }
        _netType = LDNetUtil.getNetWorkType(_context);
        recordStepInfo((new StringBuilder()).append("\u5F53\u524D\u8054\u7F51\u7C7B\u578B:\t").append(_netType).toString());
        if (_isNetConnected) {
            if ("WIFI".equals(_netType)) {
                _localIp = LDNetUtil.getLocalIpByWifi(_context);
                _gateWay = LDNetUtil.pingGateWayInWifi(_context);
            } else {
                _localIp = LDNetUtil.getLocalIpBy3G();
            }
            recordStepInfo((new StringBuilder()).append("\u672C\u5730IP:\t").append(_localIp).toString());
        } else {
            recordStepInfo("\u672C\u5730IP:\t127.0.0.1");
        }
        if (_gateWay != null)
            recordStepInfo((new StringBuilder()).append("\u672C\u5730\u7F51\u5173:\t").append(_gateWay).toString());
        if (_isNetConnected) {
            _dns1 = LDNetUtil.getLocalDns("dns1");
            _dns2 = LDNetUtil.getLocalDns("dns2");
            recordStepInfo((new StringBuilder()).append("\u672C\u5730DNS:\t").append(_dns1).append(",").append(_dns2).toString());
        } else {
            recordStepInfo("\u672C\u5730DNS:\t0.0.0.0,0.0.0.0");
        }
        if (_isNetConnected) {
            recordStepInfo((new StringBuilder()).append("\u8FDC\u7AEF\u57DF\u540D:\t").append(_dormain).toString());
            _isDomainParseOk = parseDomain(_dormain);
        }
    }

    private void recordStepInfo(String s) {
        _logInfo.append((new StringBuilder()).append(s).append("\n").toString());
        publishProgress(new String[] {
            (new StringBuilder()).append(s).append("\n").toString()
        });
    }

    private String requestOperatorInfo() {
        Object obj1;
        Object obj2;
        obj1 = null;
        obj2 = null;
        Object obj;
        obj = JVM INSTR new #375 <Class URL>;
        ((URL) (obj)).URL("");
        obj = (HttpURLConnection)((URL) (obj)).openConnection();
        ((HttpURLConnection) (obj)).setRequestMethod("GET");
        ((HttpURLConnection) (obj)).setConnectTimeout(10000);
        ((HttpURLConnection) (obj)).connect();
        if (((HttpURLConnection) (obj)).getResponseCode() != 200)
            break MISSING_BLOCK_LABEL_70;
        obj1 = LDNetUtil.getStringFromStream(((HttpURLConnection) (obj)).getInputStream());
        obj2 = obj1;
        if (obj == null)
            break MISSING_BLOCK_LABEL_70;
        ((HttpURLConnection) (obj)).disconnect();
        obj2 = obj1;
        obj1 = obj2;
        if (obj != null) {
            ((HttpURLConnection) (obj)).disconnect();
            obj1 = obj2;
        }
_L1:
        return ((String) (obj1));
        Object obj5;
        obj5;
        obj1 = null;
        obj = null;
_L6:
        obj2 = obj1;
        ((MalformedURLException) (obj5)).printStackTrace();
        obj2 = obj;
        if (obj1 != null) {
            ((HttpURLConnection) (obj1)).disconnect();
            obj2 = obj;
        }
_L2:
        obj1 = obj2;
          goto _L1
        obj5;
        obj1 = null;
        obj = null;
_L5:
        obj2 = obj1;
        ((IOException) (obj5)).printStackTrace();
        obj2 = obj;
        if (obj1 != null) {
            ((HttpURLConnection) (obj1)).disconnect();
            obj2 = obj;
        }
          goto _L2
        obj;
_L4:
        if (obj1 != null)
            ((HttpURLConnection) (obj1)).disconnect();
        throw obj;
        obj2;
        obj1 = obj;
        obj = obj2;
        continue; /* Loop/switch isn't completed */
        obj;
        obj1 = obj2;
        if (true) goto _L4; else goto _L3
_L3:
        obj5;
        obj1 = obj;
        obj = null;
          goto _L5
        obj5;
        Object obj3 = obj;
        obj = obj1;
        obj1 = obj3;
          goto _L5
        obj5;
        obj1 = obj;
        obj = null;
          goto _L6
        obj5;
        Object obj4 = obj;
        obj = obj1;
        obj1 = obj4;
          goto _L6
    }

    public void OnNetPingFinished(String s) {
        recordStepInfo(s);
    }

    public void OnNetSocketFinished(String s) {
        _logInfo.append(s);
        publishProgress(new String[] {
            s
        });
    }

    public void OnNetSocketUpdated(String s) {
        _logInfo.append(s);
        publishProgress(new String[] {
            s
        });
    }

    public void OnNetTraceFinished() {
    }

    public void OnNetTraceUpdated(String s) {
        if (s != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
label0:
        {
            String s1;
label1:
            {
                if (_traceRouter == null || !_traceRouter.isCTrace)
                    break label0;
                if (!s.contains("ms")) {
                    s1 = s;
                    if (!s.contains("***"))
                        break label1;
                }
                s1 = (new StringBuilder()).append(s).append("\n").toString();
            }
            _logInfo.append(s1);
            publishProgress(new String[] {
                s1
            });
            continue; /* Loop/switch isn't completed */
        }
        recordStepInfo(s);
        if (true) goto _L1; else goto _L3
_L3:
    }

    protected volatile Object doInBackground(Object aobj[]) {
        return doInBackground((String[])aobj);
    }

    protected transient String doInBackground(String as[]) {
        if (isCancelled())
            as = null;
        else
            as = startNetDiagnosis();
        return as;
    }

    protected ThreadPoolExecutor getThreadPoolExecutor() {
        return sExecutor;
    }

    protected void onCancelled() {
        stopNetDialogsis();
    }

    protected volatile void onPostExecute(Object obj) {
        onPostExecute((String)obj);
    }

    protected void onPostExecute(String s) {
        if (!isCancelled()) goto _L2; else goto _L1
_L1:
        return;
_L2:
        super.onPostExecute(s);
        recordStepInfo("\n\u7F51\u7EDC\u8BCA\u65AD\u7ED3\u675F\n");
        stopNetDialogsis();
        if (_netDiagnolistener != null)
            _netDiagnolistener.OnNetDiagnoFinished(_logInfo.toString());
        if (true) goto _L1; else goto _L3
_L3:
    }

    protected volatile void onProgressUpdate(Object aobj[]) {
        onProgressUpdate((String[])aobj);
    }

    protected transient void onProgressUpdate(String as[]) {
        if (!isCancelled()) goto _L2; else goto _L1
_L1:
        return;
_L2:
        super.onProgressUpdate(as);
        if (_netDiagnolistener != null)
            _netDiagnolistener.OnNetDiagnoUpdated(as[0]);
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void printLogInfo() {
        System.out.print(_logInfo);
    }

    public void setIfUseJNICConn(boolean flag) {
        _isUseJNICConn = flag;
    }

    public void setIfUseJNICTrace(boolean flag) {
        _isUseJNICTrace = flag;
    }

    public String startNetDiagnosis() {
        String s;
        if (TextUtils.isEmpty(_dormain)) {
            s = "";
        } else {
            _isRunning = true;
            _logInfo.setLength(0);
            recordStepInfo("\u5F00\u59CB\u8BCA\u65AD...\n");
            recordCurrentAppVersion();
            recordLocalNetEnvironmentInfo();
            if (_isNetConnected) {
                recordStepInfo("\n\u5F00\u59CBTCP\u8FDE\u63A5\u6D4B\u8BD5...");
                _netSocker = LDNetSocket.getInstance();
                _netSocker._remoteInet = _remoteInet;
                _netSocker._remoteIpList = _remoteIpList;
                _netSocker.initListener(this);
                _netSocker.isCConn = _isUseJNICConn;
                _isSocketConnected = _netSocker.exec(_dormain);
                if (!_isNetConnected || !_isDomainParseOk || !_isSocketConnected) {
                    recordStepInfo("\n\u5F00\u59CBping...");
                    _netPinger = new LDNetPing(this, 4);
                    recordStepInfo("ping...127.0.0.1");
                    _netPinger.exec("127.0.0.1", false);
                    recordStepInfo((new StringBuilder()).append("ping\u672C\u673AIP...").append(_localIp).toString());
                    _netPinger.exec(_localIp, false);
                    if ("WIFI".equals(_netType)) {
                        recordStepInfo((new StringBuilder()).append("ping\u672C\u5730\u7F51\u5173...").append(_gateWay).toString());
                        _netPinger.exec(_gateWay, false);
                    }
                    recordStepInfo((new StringBuilder()).append("ping\u672C\u5730DNS1...").append(_dns1).toString());
                    _netPinger.exec(_dns1, false);
                    recordStepInfo((new StringBuilder()).append("ping\u672C\u5730DNS2...").append(_dns2).toString());
                    _netPinger.exec(_dns2, false);
                }
                if (_netPinger == null)
                    _netPinger = new LDNetPing(this, 4);
                if (_netPinger == null);
                recordStepInfo("\n\u5F00\u59CBtraceroute...");
                _traceRouter = LDNetTraceRoute.getInstance();
                _traceRouter.initListenter(this);
                _traceRouter.isCTrace = _isUseJNICTrace;
                _traceRouter.startTraceRoute(_dormain);
                s = _logInfo.toString();
            } else {
                recordStepInfo("\n\n\u5F53\u524D\u4E3B\u673A\u672A\u8054\u7F51,\u8BF7\u68C0\u67E5\u7F51\u7EDC\uFF01");
                s = _logInfo.toString();
            }
        }
        return s;
    }

    public void stopNetDialogsis() {
        if (_isRunning) {
            if (_netSocker != null) {
                _netSocker.resetInstance();
                _netSocker = null;
            }
            if (_netPinger != null)
                _netPinger = null;
            if (_traceRouter != null) {
                _traceRouter.resetInstance();
                _traceRouter = null;
            }
            cancel(true);
            if (sExecutor != null && !sExecutor.isShutdown()) {
                sExecutor.shutdown();
                sExecutor = null;
            }
            _isRunning = false;
        }
    }

}
