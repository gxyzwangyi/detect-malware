// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.netease.LDNetDiagnoUtils;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class LDPingParse {

    public LDPingParse() {
    }

    public static String getFormattingStr(String s, String s1) {
        StringBuilder stringbuilder = new StringBuilder();
        if (s1.contains("timeout"))
            stringbuilder.append((new StringBuilder()).append("ping: cannot resolve ").append(s).append(": Timeout").toString());
        else
        if (s1.contains("unknown"))
            stringbuilder.append((new StringBuilder()).append("ping: cannot resolve ").append(s).append(": Unknown host").toString());
        else
            makePingResponse(s1, stringbuilder);
        return stringbuilder.toString();
    }

    private static String getIP(String s) {
        Object obj = null;
        Matcher matcher = Pattern.compile("(?<=\\()([\\d]+\\.)+[\\d]+(?=\\))").matcher(s);
        for (s = obj; matcher.find(); s = matcher.group().toString().trim());
        return s;
    }

    private static List getIcmp_seq(String s) {
        ArrayList arraylist = new ArrayList();
        for (s = Pattern.compile("(?<=icmp_seq=)([0-9]+)(?=\\s)").matcher(s); s.find(); arraylist.add(s.group().toString().trim()));
        return arraylist;
    }

    private static List getSumBytes(String s) {
        ArrayList arraylist = new ArrayList();
        Matcher matcher = Pattern.compile("(?<=\\D)([\\s0-9]+)(?=bytes)").matcher(s);
        do {
            if (!matcher.find())
                break;
            s = matcher.group().toString().trim();
            if (matcher.group().toString().trim().matches("\\d+"))
                arraylist.add(s);
        } while (true);
        return arraylist;
    }

    private static List getTTL(String s) {
        ArrayList arraylist = new ArrayList();
        for (s = Pattern.compile("(?<=ttl=)([0-9]+)(?=\\s)").matcher(s); s.find(); arraylist.add(s.group().toString().trim()));
        return arraylist;
    }

    private static List getTime(String s) {
        ArrayList arraylist = new ArrayList();
        for (s = Pattern.compile("(?<==)([\\.0-9\\s]+)(?=ms)").matcher(s); s.find(); arraylist.add(s.group().toString().trim()));
        return arraylist;
    }

    public static void makePingResponse(String s, StringBuilder stringbuilder) {
        String s1 = getIP(s);
        List list = getSumBytes(s);
        List list1 = getTTL(s);
        List list2 = getTime(s);
        s = getIcmp_seq(s);
        int j = list2.size();
        for (int i = 0; i < j - 1; i++)
            stringbuilder.append((new StringBuilder()).append((String)list.get(i)).append("bytes from ").append(s1).append(": icmp_seq=#").append((String)s.get(i)).append(" ttl=").append((String)list1.get(i)).append(" time=").append((String)list2.get(i)).append("ms\n").toString());

        stringbuilder.append((new StringBuilder()).append((String)list.get(j - 1)).append("bytes from ").append(s1).append(": icmp_seq=#").append((String)s.get(j - 1)).append(" ttl=").append((String)list1.get(j - 1)).append(" time=").append((String)list2.get(j - 1)).append("ms").toString());
    }
}
