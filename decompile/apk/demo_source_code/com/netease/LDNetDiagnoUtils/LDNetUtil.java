// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.netease.LDNetDiagnoUtils;

import android.content.Context;
import android.net.*;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import java.io.*;
import java.net.*;
import java.util.*;

public class LDNetUtil {

    public static final String NETWORKTYPE_INVALID = "UNKNOWN";
    public static final String NETWORKTYPE_WAP = "WAP";
    public static final String NETWORKTYPE_WIFI = "WIFI";
    public static final String OPEN_IP = "";
    public static final String OPERATOR_URL = "";

    public LDNetUtil() {
    }

    public static Map getDomainIp(String s) {
        String s1;
        HashMap hashmap;
        s1 = null;
        hashmap = new HashMap();
        long l = System.currentTimeMillis();
        s = InetAddress.getAllByName(s);
        if (s == null)
            break MISSING_BLOCK_LABEL_73;
        s1 = s;
        long l1 = System.currentTimeMillis();
        s1 = s;
        Object obj = JVM INSTR new #47  <Class StringBuilder>;
        s1 = s;
        ((StringBuilder) (obj)).StringBuilder();
        s1 = s;
        obj = ((StringBuilder) (obj)).append(l1 - l).append("").toString();
        s1 = ((String) (obj));
        hashmap.put("remoteInet", s);
        hashmap.put("useTime", s1);
_L1:
        return hashmap;
        Object obj1;
        obj1;
        l = 0L;
        s = null;
_L4:
        s1 = s;
        l1 = System.currentTimeMillis();
        s1 = s;
        StringBuilder stringbuilder = JVM INSTR new #47  <Class StringBuilder>;
        s1 = s;
        stringbuilder.StringBuilder();
        s1 = s;
        s = stringbuilder.append(l1 - l).append("").toString();
        ((UnknownHostException) (obj1)).printStackTrace();
        hashmap.put("remoteInet", null);
        hashmap.put("useTime", s);
          goto _L1
        s;
        s1 = null;
        obj1 = null;
_L3:
        hashmap.put("remoteInet", s1);
        hashmap.put("useTime", obj1);
        throw s;
        s;
        obj1 = null;
        continue; /* Loop/switch isn't completed */
        Exception exception;
        exception;
        obj1 = s;
        s1 = null;
        s = exception;
        if (true) goto _L3; else goto _L2
_L2:
        obj1;
        s = null;
          goto _L4
        obj1;
          goto _L4
    }

    public static String getLocalDns(String s) {
        Object obj2 = null;
        Runtime runtime = Runtime.getRuntime();
        StringBuilder stringbuilder = JVM INSTR new #47  <Class StringBuilder>;
        stringbuilder.StringBuilder();
        s = runtime.exec(stringbuilder.append("getprop net.").append(s).toString());
        Object obj;
        Exception exception;
        Object obj1;
        Object obj3;
        Object obj4;
        InterruptedException interruptedexception;
        String s1;
        try {
            obj1 = JVM INSTR new #96  <Class BufferedReader>;
            InputStreamReader inputstreamreader = JVM INSTR new #98  <Class InputStreamReader>;
            inputstreamreader.InputStreamReader(s.getInputStream());
            ((BufferedReader) (obj1)).BufferedReader(inputstreamreader);
        }
        // Misplaced declaration of an exception variable
        catch (Object obj2) {
            obj1 = null;
            exception = "";
            continue; /* Loop/switch isn't completed */
        }
        // Misplaced declaration of an exception variable
        catch (InterruptedException interruptedexception) {
            obj1 = null;
            exception = "";
            continue; /* Loop/switch isn't completed */
        }
_L5:
        obj = "";
_L2:
        obj3 = obj1;
        obj2 = s;
        s1 = ((BufferedReader) (obj1)).readLine();
        if (s1 == null)
            break; /* Loop/switch isn't completed */
        obj3 = obj1;
        obj2 = s;
        obj4 = JVM INSTR new #47  <Class StringBuilder>;
        obj3 = obj1;
        obj2 = s;
        ((StringBuilder) (obj4)).StringBuilder();
        obj3 = obj1;
        obj2 = s;
        obj4 = ((StringBuilder) (obj4)).append(((String) (obj))).append(s1).toString();
        obj = obj4;
        if (true) goto _L2; else goto _L1
_L1:
        obj3 = obj1;
        obj2 = s;
        ((BufferedReader) (obj1)).close();
        obj3 = obj1;
        obj2 = s;
        s.waitFor();
        if (obj1 == null)
            break MISSING_BLOCK_LABEL_146;
        ((BufferedReader) (obj1)).close();
        s.destroy();
_L11:
        return ((String) (obj)).trim();
        obj2;
        obj1 = null;
        obj = "";
        s = null;
_L9:
        ((IOException) (obj2)).printStackTrace();
        if (obj1 == null)
            break MISSING_BLOCK_LABEL_175;
        ((BufferedReader) (obj1)).close();
        s.destroy();
        continue; /* Loop/switch isn't completed */
        s;
        continue; /* Loop/switch isn't completed */
        interruptedexception;
        obj1 = null;
        s = null;
        obj = "";
_L7:
        obj3 = obj1;
        obj2 = s;
        interruptedexception.printStackTrace();
        if (obj1 == null)
            break MISSING_BLOCK_LABEL_213;
        ((BufferedReader) (obj1)).close();
        s.destroy();
        continue; /* Loop/switch isn't completed */
        s;
        continue; /* Loop/switch isn't completed */
        exception;
        s = null;
        obj1 = obj2;
_L6:
        if (obj1 == null)
            break MISSING_BLOCK_LABEL_237;
        ((BufferedReader) (obj1)).close();
        s.destroy();
_L4:
        throw exception;
        s;
        if (true) goto _L4; else goto _L3
_L3:
        exception;
        obj1 = obj2;
        continue; /* Loop/switch isn't completed */
        exception;
        obj1 = obj3;
        s = ((String) (obj2));
        continue; /* Loop/switch isn't completed */
        exception;
        if (true) goto _L6; else goto _L5
        interruptedexception;
        if (true) goto _L7; else goto _L5
        obj2;
        if (true) goto _L9; else goto _L8
_L8:
        s;
        if (true) goto _L11; else goto _L10
_L10:
    }

    public static String getLocalIpBy3G() {
        Object obj = NetworkInterface.getNetworkInterfaces();
_L4:
        if (!((Enumeration) (obj)).hasMoreElements()) goto _L2; else goto _L1
_L1:
        Enumeration enumeration = ((NetworkInterface)((Enumeration) (obj)).nextElement()).getInetAddresses();
_L6:
        if (!enumeration.hasMoreElements()) goto _L4; else goto _L3
_L3:
        InetAddress inetaddress = (InetAddress)enumeration.nextElement();
        if (inetaddress.isLoopbackAddress() || !(inetaddress instanceof Inet4Address)) goto _L6; else goto _L5
_L5:
        obj = inetaddress.getHostAddress().toString();
_L8:
        return ((String) (obj));
        obj;
        ((Exception) (obj)).printStackTrace();
_L2:
        obj = null;
        if (true) goto _L8; else goto _L7
_L7:
    }

    public static String getLocalIpByWifi(Context context) {
        context = (WifiManager)context.getSystemService("wifi");
        if (context == null) {
            context = "wifiManager not found";
        } else {
            context = context.getConnectionInfo();
            if (context == null) {
                context = "wifiInfo not found";
            } else {
                int i = context.getIpAddress();
                context = String.format("%d.%d.%d.%d", new Object[] {
                    Integer.valueOf(i & 0xff), Integer.valueOf(i >> 8 & 0xff), Integer.valueOf(i >> 16 & 0xff), Integer.valueOf(i >> 24 & 0xff)
                });
            }
        }
        return context;
    }

    public static String getMobileOperator(Context context) {
        context = (TelephonyManager)context.getSystemService("phone");
        if (context != null) goto _L2; else goto _L1
_L1:
        context = "\u672A\u77E5\u8FD0\u8425\u5546";
_L4:
        return context;
_L2:
        context = context.getSimOperator();
        if (context != null) {
            if (context.equals("46000") || context.equals("46002") || context.equals("46007")) {
                context = "\u4E2D\u56FD\u79FB\u52A8";
                continue; /* Loop/switch isn't completed */
            }
            if (context.equals("46001")) {
                context = "\u4E2D\u56FD\u8054\u901A";
                continue; /* Loop/switch isn't completed */
            }
            if (context.equals("46003")) {
                context = "\u4E2D\u56FD\u7535\u4FE1";
                continue; /* Loop/switch isn't completed */
            }
        }
        context = "\u672A\u77E5\u8FD0\u8425\u5546";
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static String getNetWorkType(Context context) {
        Object obj = (ConnectivityManager)context.getSystemService("connectivity");
        if (obj == null) {
            context = "ConnectivityManager not found";
        } else {
            obj = ((ConnectivityManager) (obj)).getActiveNetworkInfo();
            if (obj != null && ((NetworkInfo) (obj)).isConnected()) {
                obj = ((NetworkInfo) (obj)).getTypeName();
                if (((String) (obj)).equalsIgnoreCase("WIFI"))
                    context = "WIFI";
                else
                if (((String) (obj)).equalsIgnoreCase("MOBILE")) {
                    if (TextUtils.isEmpty(Proxy.getDefaultHost()))
                        context = mobileNetworkType(context);
                    else
                        context = "WAP";
                } else {
                    context = null;
                }
            } else {
                context = "UNKNOWN";
            }
        }
        return context;
    }

    public static String getStringFromStream(InputStream inputstream) {
        String s;
        byte abyte0[];
        abyte0 = new byte[1024];
        s = "";
_L2:
        int i = inputstream.read(abyte0);
        if (i == -1)
            break; /* Loop/switch isn't completed */
        Object obj;
        obj = JVM INSTR new #47  <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        obj = ((StringBuilder) (obj)).append(s);
        String s1 = JVM INSTR new #125 <Class String>;
        s1.String(abyte0, 0, i, "gbk");
        obj = ((StringBuilder) (obj)).append(s1).toString();
        s = ((String) (obj));
        if (true) goto _L2; else goto _L1
_L1:
        if (inputstream != null)
            try {
                inputstream.close();
            }
            // Misplaced declaration of an exception variable
            catch (InputStream inputstream) {
                inputstream.printStackTrace();
            }
_L4:
        return s;
        IOException ioexception;
        ioexception;
        ioexception.printStackTrace();
        if (inputstream != null)
            try {
                inputstream.close();
            }
            // Misplaced declaration of an exception variable
            catch (InputStream inputstream) {
                inputstream.printStackTrace();
            }
        if (true) goto _L4; else goto _L3
_L3:
        Exception exception;
        exception;
        if (inputstream != null)
            try {
                inputstream.close();
            }
            // Misplaced declaration of an exception variable
            catch (InputStream inputstream) {
                inputstream.printStackTrace();
            }
        throw exception;
    }

    public static Boolean isNetworkConnected(Context context) {
        context = (ConnectivityManager)context.getApplicationContext().getSystemService("connectivity");
        if (context == null) {
            context = Boolean.valueOf(false);
        } else {
            context = context.getActiveNetworkInfo();
            if (context == null || !context.isAvailable())
                context = Boolean.valueOf(false);
            else
                context = Boolean.valueOf(true);
        }
        return context;
    }

    private static String mobileNetworkType(Context context) {
        context = (TelephonyManager)context.getSystemService("phone");
        if (context != null) goto _L2; else goto _L1
_L1:
        context = "TM==null";
_L4:
        return context;
_L2:
        switch (context.getNetworkType()) {
        default:
            context = "4G";
            break;

        case 7: // '\007'
            context = "2G";
            break;

        case 4: // '\004'
            context = "2G";
            break;

        case 2: // '\002'
            context = "2G";
            break;

        case 5: // '\005'
            context = "3G";
            break;

        case 6: // '\006'
            context = "3G";
            break;

        case 1: // '\001'
            context = "2G";
            break;

        case 8: // '\b'
            context = "3G";
            break;

        case 10: // '\n'
            context = "3G";
            break;

        case 9: // '\t'
            context = "3G";
            break;

        case 3: // '\003'
            context = "3G";
            break;

        case 14: // '\016'
            context = "3G";
            break;

        case 12: // '\f'
            context = "3G";
            break;

        case 15: // '\017'
            context = "3G";
            break;

        case 11: // '\013'
            context = "2G";
            break;

        case 13: // '\r'
            context = "4G";
            break;

        case 0: // '\0'
            context = "UNKNOWN";
            break;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static String pingGateWayInWifi(Context context) {
        context = (WifiManager)context.getSystemService("wifi");
        if (context == null) {
            context = "wifiManager not found";
        } else {
            context = context.getDhcpInfo();
            if (context != null) {
                int i = ((DhcpInfo) (context)).gateway;
                context = String.format("%d.%d.%d.%d", new Object[] {
                    Integer.valueOf(i & 0xff), Integer.valueOf(i >> 8 & 0xff), Integer.valueOf(i >> 16 & 0xff), Integer.valueOf(i >> 24 & 0xff)
                });
            } else {
                context = null;
            }
        }
        return context;
    }
}
