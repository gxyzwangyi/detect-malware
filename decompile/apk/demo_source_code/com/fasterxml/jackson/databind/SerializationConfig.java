// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind;

import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.Instantiatable;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfigBase;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.Serializable;
import java.text.DateFormat;
import java.util.Locale;
import java.util.TimeZone;

// Referenced classes of package com.fasterxml.jackson.databind:
//            SerializationFeature, MapperFeature, AnnotationIntrospector, PropertyName, 
//            JavaType, BeanDescription, PropertyNamingStrategy

public final class SerializationConfig extends MapperConfigBase
    implements Serializable {

    protected static final com.fasterxml.jackson.annotation.JsonInclude.Value DEFAULT_INCLUSION = com.fasterxml.jackson.annotation.JsonInclude.Value.empty();
    protected static final PrettyPrinter DEFAULT_PRETTY_PRINTER = new DefaultPrettyPrinter();
    private static final long serialVersionUID = 1L;
    protected final PrettyPrinter _defaultPrettyPrinter;
    protected final FilterProvider _filterProvider;
    protected final int _formatWriteFeatures;
    protected final int _formatWriteFeaturesToChange;
    protected final int _generatorFeatures;
    protected final int _generatorFeaturesToChange;
    protected final int _serFeatures;
    protected final com.fasterxml.jackson.annotation.JsonInclude.Value _serializationInclusion;

    private SerializationConfig(SerializationConfig serializationconfig, int i, int j, int k, int l, int i1, int j1) {
        super(serializationconfig, i);
        _serFeatures = j;
        _serializationInclusion = serializationconfig._serializationInclusion;
        _filterProvider = serializationconfig._filterProvider;
        _defaultPrettyPrinter = serializationconfig._defaultPrettyPrinter;
        _generatorFeatures = k;
        _generatorFeaturesToChange = l;
        _formatWriteFeatures = i1;
        _formatWriteFeaturesToChange = j1;
    }

    private SerializationConfig(SerializationConfig serializationconfig, com.fasterxml.jackson.annotation.JsonInclude.Value value) {
        super(serializationconfig);
        _serFeatures = serializationconfig._serFeatures;
        _serializationInclusion = value;
        _filterProvider = serializationconfig._filterProvider;
        _defaultPrettyPrinter = serializationconfig._defaultPrettyPrinter;
        _generatorFeatures = serializationconfig._generatorFeatures;
        _generatorFeaturesToChange = serializationconfig._generatorFeaturesToChange;
        _formatWriteFeatures = serializationconfig._formatWriteFeatures;
        _formatWriteFeaturesToChange = serializationconfig._formatWriteFeaturesToChange;
    }

    protected SerializationConfig(SerializationConfig serializationconfig, PrettyPrinter prettyprinter) {
        super(serializationconfig);
        _serFeatures = serializationconfig._serFeatures;
        _serializationInclusion = serializationconfig._serializationInclusion;
        _filterProvider = serializationconfig._filterProvider;
        _defaultPrettyPrinter = prettyprinter;
        _generatorFeatures = serializationconfig._generatorFeatures;
        _generatorFeaturesToChange = serializationconfig._generatorFeaturesToChange;
        _formatWriteFeatures = serializationconfig._formatWriteFeatures;
        _formatWriteFeaturesToChange = serializationconfig._formatWriteFeaturesToChange;
    }

    private SerializationConfig(SerializationConfig serializationconfig, PropertyName propertyname) {
        super(serializationconfig, propertyname);
        _serFeatures = serializationconfig._serFeatures;
        _serializationInclusion = serializationconfig._serializationInclusion;
        _filterProvider = serializationconfig._filterProvider;
        _defaultPrettyPrinter = serializationconfig._defaultPrettyPrinter;
        _generatorFeatures = serializationconfig._generatorFeatures;
        _generatorFeaturesToChange = serializationconfig._generatorFeaturesToChange;
        _formatWriteFeatures = serializationconfig._formatWriteFeatures;
        _formatWriteFeaturesToChange = serializationconfig._formatWriteFeaturesToChange;
    }

    private SerializationConfig(SerializationConfig serializationconfig, BaseSettings basesettings) {
        super(serializationconfig, basesettings);
        _serFeatures = serializationconfig._serFeatures;
        _serializationInclusion = serializationconfig._serializationInclusion;
        _filterProvider = serializationconfig._filterProvider;
        _defaultPrettyPrinter = serializationconfig._defaultPrettyPrinter;
        _generatorFeatures = serializationconfig._generatorFeatures;
        _generatorFeaturesToChange = serializationconfig._generatorFeaturesToChange;
        _formatWriteFeatures = serializationconfig._formatWriteFeatures;
        _formatWriteFeaturesToChange = serializationconfig._formatWriteFeaturesToChange;
    }

    protected SerializationConfig(SerializationConfig serializationconfig, ContextAttributes contextattributes) {
        super(serializationconfig, contextattributes);
        _serFeatures = serializationconfig._serFeatures;
        _serializationInclusion = serializationconfig._serializationInclusion;
        _filterProvider = serializationconfig._filterProvider;
        _defaultPrettyPrinter = serializationconfig._defaultPrettyPrinter;
        _generatorFeatures = serializationconfig._generatorFeatures;
        _generatorFeaturesToChange = serializationconfig._generatorFeaturesToChange;
        _formatWriteFeatures = serializationconfig._formatWriteFeatures;
        _formatWriteFeaturesToChange = serializationconfig._formatWriteFeaturesToChange;
    }

    protected SerializationConfig(SerializationConfig serializationconfig, SimpleMixInResolver simplemixinresolver) {
        super(serializationconfig, simplemixinresolver);
        _serFeatures = serializationconfig._serFeatures;
        _serializationInclusion = serializationconfig._serializationInclusion;
        _filterProvider = serializationconfig._filterProvider;
        _defaultPrettyPrinter = serializationconfig._defaultPrettyPrinter;
        _generatorFeatures = serializationconfig._generatorFeatures;
        _generatorFeaturesToChange = serializationconfig._generatorFeaturesToChange;
        _formatWriteFeatures = serializationconfig._formatWriteFeatures;
        _formatWriteFeaturesToChange = serializationconfig._formatWriteFeaturesToChange;
    }

    protected SerializationConfig(SerializationConfig serializationconfig, SimpleMixInResolver simplemixinresolver, RootNameLookup rootnamelookup) {
        super(serializationconfig, simplemixinresolver, rootnamelookup);
        _serFeatures = serializationconfig._serFeatures;
        _serializationInclusion = serializationconfig._serializationInclusion;
        _filterProvider = serializationconfig._filterProvider;
        _defaultPrettyPrinter = serializationconfig._defaultPrettyPrinter;
        _generatorFeatures = serializationconfig._generatorFeatures;
        _generatorFeaturesToChange = serializationconfig._generatorFeaturesToChange;
        _formatWriteFeatures = serializationconfig._formatWriteFeatures;
        _formatWriteFeaturesToChange = serializationconfig._formatWriteFeaturesToChange;
    }

    private SerializationConfig(SerializationConfig serializationconfig, SubtypeResolver subtyperesolver) {
        super(serializationconfig, subtyperesolver);
        _serFeatures = serializationconfig._serFeatures;
        _serializationInclusion = serializationconfig._serializationInclusion;
        _filterProvider = serializationconfig._filterProvider;
        _defaultPrettyPrinter = serializationconfig._defaultPrettyPrinter;
        _generatorFeatures = serializationconfig._generatorFeatures;
        _generatorFeaturesToChange = serializationconfig._generatorFeaturesToChange;
        _formatWriteFeatures = serializationconfig._formatWriteFeatures;
        _formatWriteFeaturesToChange = serializationconfig._formatWriteFeaturesToChange;
    }

    private SerializationConfig(SerializationConfig serializationconfig, FilterProvider filterprovider) {
        super(serializationconfig);
        _serFeatures = serializationconfig._serFeatures;
        _serializationInclusion = serializationconfig._serializationInclusion;
        _filterProvider = filterprovider;
        _defaultPrettyPrinter = serializationconfig._defaultPrettyPrinter;
        _generatorFeatures = serializationconfig._generatorFeatures;
        _generatorFeaturesToChange = serializationconfig._generatorFeaturesToChange;
        _formatWriteFeatures = serializationconfig._formatWriteFeatures;
        _formatWriteFeaturesToChange = serializationconfig._formatWriteFeaturesToChange;
    }

    private SerializationConfig(SerializationConfig serializationconfig, Class class1) {
        super(serializationconfig, class1);
        _serFeatures = serializationconfig._serFeatures;
        _serializationInclusion = serializationconfig._serializationInclusion;
        _filterProvider = serializationconfig._filterProvider;
        _defaultPrettyPrinter = serializationconfig._defaultPrettyPrinter;
        _generatorFeatures = serializationconfig._generatorFeatures;
        _generatorFeaturesToChange = serializationconfig._generatorFeaturesToChange;
        _formatWriteFeatures = serializationconfig._formatWriteFeatures;
        _formatWriteFeaturesToChange = serializationconfig._formatWriteFeaturesToChange;
    }

    public SerializationConfig(BaseSettings basesettings, SubtypeResolver subtyperesolver, SimpleMixInResolver simplemixinresolver, RootNameLookup rootnamelookup) {
        super(basesettings, subtyperesolver, simplemixinresolver, rootnamelookup);
        _serFeatures = collectFeatureDefaults(com/fasterxml/jackson/databind/SerializationFeature);
        _filterProvider = null;
        _defaultPrettyPrinter = DEFAULT_PRETTY_PRINTER;
        _generatorFeatures = 0;
        _generatorFeaturesToChange = 0;
        _formatWriteFeatures = 0;
        _formatWriteFeaturesToChange = 0;
        _serializationInclusion = DEFAULT_INCLUSION;
    }

    private final SerializationConfig _withBase(BaseSettings basesettings) {
        if (_base == basesettings)
            basesettings = this;
        else
            basesettings = new SerializationConfig(this, basesettings);
        return basesettings;
    }

    public PrettyPrinter constructDefaultPrettyPrinter() {
        PrettyPrinter prettyprinter1 = _defaultPrettyPrinter;
        PrettyPrinter prettyprinter = prettyprinter1;
        if (prettyprinter1 instanceof Instantiatable)
            prettyprinter = (PrettyPrinter)((Instantiatable)prettyprinter1).createInstance();
        return prettyprinter;
    }

    public AnnotationIntrospector getAnnotationIntrospector() {
        AnnotationIntrospector annotationintrospector;
        if (isEnabled(MapperFeature.USE_ANNOTATIONS))
            annotationintrospector = super.getAnnotationIntrospector();
        else
            annotationintrospector = AnnotationIntrospector.nopInstance();
        return annotationintrospector;
    }

    public PrettyPrinter getDefaultPrettyPrinter() {
        return _defaultPrettyPrinter;
    }

    public com.fasterxml.jackson.annotation.JsonFormat.Value getDefaultPropertyFormat(Class class1) {
        return EMPTY_FORMAT;
    }

    public com.fasterxml.jackson.annotation.JsonInclude.Value getDefaultPropertyInclusion() {
        return _serializationInclusion;
    }

    public com.fasterxml.jackson.annotation.JsonInclude.Value getDefaultPropertyInclusion(Class class1) {
        return _serializationInclusion;
    }

    public VisibilityChecker getDefaultVisibilityChecker() {
        VisibilityChecker visibilitychecker1 = super.getDefaultVisibilityChecker();
        VisibilityChecker visibilitychecker = visibilitychecker1;
        if (!isEnabled(MapperFeature.AUTO_DETECT_SETTERS))
            visibilitychecker = visibilitychecker1.withSetterVisibility(com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE);
        visibilitychecker1 = visibilitychecker;
        if (!isEnabled(MapperFeature.AUTO_DETECT_CREATORS))
            visibilitychecker1 = visibilitychecker.withCreatorVisibility(com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE);
        visibilitychecker = visibilitychecker1;
        if (!isEnabled(MapperFeature.AUTO_DETECT_GETTERS))
            visibilitychecker = visibilitychecker1.withGetterVisibility(com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE);
        visibilitychecker1 = visibilitychecker;
        if (!isEnabled(MapperFeature.AUTO_DETECT_IS_GETTERS))
            visibilitychecker1 = visibilitychecker.withIsGetterVisibility(com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE);
        visibilitychecker = visibilitychecker1;
        if (!isEnabled(MapperFeature.AUTO_DETECT_FIELDS))
            visibilitychecker = visibilitychecker1.withFieldVisibility(com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE);
        return visibilitychecker;
    }

    public FilterProvider getFilterProvider() {
        return _filterProvider;
    }

    public final int getSerializationFeatures() {
        return _serFeatures;
    }

    public com.fasterxml.jackson.annotation.JsonInclude.Include getSerializationInclusion() {
        com.fasterxml.jackson.annotation.JsonInclude.Include include1 = _serializationInclusion.getValueInclusion();
        com.fasterxml.jackson.annotation.JsonInclude.Include include = include1;
        if (include1 == com.fasterxml.jackson.annotation.JsonInclude.Include.USE_DEFAULTS)
            include = com.fasterxml.jackson.annotation.JsonInclude.Include.ALWAYS;
        return include;
    }

    public final boolean hasSerializationFeatures(int i) {
        boolean flag;
        if ((_serFeatures & i) == i)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public void initialize(JsonGenerator jsongenerator) {
        if (SerializationFeature.INDENT_OUTPUT.enabledIn(_serFeatures) && jsongenerator.getPrettyPrinter() == null) {
            PrettyPrinter prettyprinter = constructDefaultPrettyPrinter();
            if (prettyprinter != null)
                jsongenerator.setPrettyPrinter(prettyprinter);
        }
        boolean flag = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_serFeatures);
        int k = _generatorFeaturesToChange;
        if (k != 0 || flag) {
            int l = _generatorFeatures;
            int j = l;
            int i = k;
            if (flag) {
                i = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN.getMask();
                j = l | i;
                i = k | i;
            }
            jsongenerator.overrideStdFeatures(j, i);
        }
        if (_formatWriteFeaturesToChange != 0)
            jsongenerator.overrideFormatFeatures(_formatWriteFeatures, _formatWriteFeaturesToChange);
    }

    public BeanDescription introspect(JavaType javatype) {
        return getClassIntrospector().forSerialization(this, javatype, this);
    }

    public BeanDescription introspectClassAnnotations(JavaType javatype) {
        return getClassIntrospector().forClassAnnotations(this, javatype, this);
    }

    public BeanDescription introspectDirectClassAnnotations(JavaType javatype) {
        return getClassIntrospector().forDirectClassAnnotations(this, javatype, this);
    }

    public final boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature feature, JsonFactory jsonfactory) {
        boolean flag;
        if ((feature.getMask() & _generatorFeaturesToChange) != 0) {
            if ((_generatorFeatures & feature.getMask()) != 0)
                flag = true;
            else
                flag = false;
        } else {
            flag = jsonfactory.isEnabled(feature);
        }
        return flag;
    }

    public final boolean isEnabled(SerializationFeature serializationfeature) {
        boolean flag;
        if ((_serFeatures & serializationfeature.getMask()) != 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public String toString() {
        return (new StringBuilder()).append("[SerializationConfig: flags=0x").append(Integer.toHexString(_serFeatures)).append("]").toString();
    }

    public boolean useRootWrapping() {
        boolean flag;
        if (_rootName != null) {
            if (!_rootName.isEmpty())
                flag = true;
            else
                flag = false;
        } else {
            flag = isEnabled(SerializationFeature.WRAP_ROOT_VALUE);
        }
        return flag;
    }

    public SerializationConfig with(Base64Variant base64variant) {
        return _withBase(_base.with(base64variant));
    }

    public SerializationConfig with(FormatFeature formatfeature) {
        int j = _formatWriteFeatures | formatfeature.getMask();
        int i = _formatWriteFeaturesToChange | formatfeature.getMask();
        if (_formatWriteFeatures == j && _formatWriteFeaturesToChange == i)
            formatfeature = this;
        else
            formatfeature = new SerializationConfig(this, _mapperFeatures, _serFeatures, _generatorFeatures, _generatorFeaturesToChange, j, i);
        return formatfeature;
    }

    public SerializationConfig with(com.fasterxml.jackson.core.JsonGenerator.Feature feature) {
        int j = _generatorFeatures | feature.getMask();
        int i = _generatorFeaturesToChange | feature.getMask();
        if (_generatorFeatures == j && _generatorFeaturesToChange == i)
            feature = this;
        else
            feature = new SerializationConfig(this, _mapperFeatures, _serFeatures, j, i, _formatWriteFeatures, _formatWriteFeaturesToChange);
        return feature;
    }

    public SerializationConfig with(AnnotationIntrospector annotationintrospector) {
        return _withBase(_base.withAnnotationIntrospector(annotationintrospector));
    }

    public SerializationConfig with(MapperFeature mapperfeature, boolean flag) {
        int i;
        if (flag)
            i = _mapperFeatures | mapperfeature.getMask();
        else
            i = _mapperFeatures & ~mapperfeature.getMask();
        if (i == _mapperFeatures)
            mapperfeature = this;
        else
            mapperfeature = new SerializationConfig(this, i, _serFeatures, _generatorFeatures, _generatorFeaturesToChange, _formatWriteFeatures, _formatWriteFeaturesToChange);
        return mapperfeature;
    }

    public SerializationConfig with(PropertyNamingStrategy propertynamingstrategy) {
        return _withBase(_base.withPropertyNamingStrategy(propertynamingstrategy));
    }

    public SerializationConfig with(SerializationFeature serializationfeature) {
        int i = _serFeatures | serializationfeature.getMask();
        if (i == _serFeatures)
            serializationfeature = this;
        else
            serializationfeature = new SerializationConfig(this, _mapperFeatures, i, _generatorFeatures, _generatorFeaturesToChange, _formatWriteFeatures, _formatWriteFeaturesToChange);
        return serializationfeature;
    }

    public transient SerializationConfig with(SerializationFeature serializationfeature, SerializationFeature aserializationfeature[]) {
        int j = _serFeatures | serializationfeature.getMask();
        int k = aserializationfeature.length;
        for (int i = 0; i < k; i++)
            j |= aserializationfeature[i].getMask();

        if (j == _serFeatures)
            serializationfeature = this;
        else
            serializationfeature = new SerializationConfig(this, _mapperFeatures, j, _generatorFeatures, _generatorFeaturesToChange, _formatWriteFeatures, _formatWriteFeaturesToChange);
        return serializationfeature;
    }

    public SerializationConfig with(ContextAttributes contextattributes) {
        if (contextattributes == _attributes)
            contextattributes = this;
        else
            contextattributes = new SerializationConfig(this, contextattributes);
        return contextattributes;
    }

    public SerializationConfig with(HandlerInstantiator handlerinstantiator) {
        return _withBase(_base.withHandlerInstantiator(handlerinstantiator));
    }

    public SerializationConfig with(ClassIntrospector classintrospector) {
        return _withBase(_base.withClassIntrospector(classintrospector));
    }

    public SerializationConfig with(VisibilityChecker visibilitychecker) {
        return _withBase(_base.withVisibilityChecker(visibilitychecker));
    }

    public SerializationConfig with(SubtypeResolver subtyperesolver) {
        if (subtyperesolver == _subtypeResolver)
            subtyperesolver = this;
        else
            subtyperesolver = new SerializationConfig(this, subtyperesolver);
        return subtyperesolver;
    }

    public SerializationConfig with(TypeResolverBuilder typeresolverbuilder) {
        return _withBase(_base.withTypeResolverBuilder(typeresolverbuilder));
    }

    public SerializationConfig with(TypeFactory typefactory) {
        return _withBase(_base.withTypeFactory(typefactory));
    }

    public SerializationConfig with(DateFormat dateformat) {
        SerializationConfig serializationconfig = new SerializationConfig(this, _base.withDateFormat(dateformat));
        if (dateformat == null)
            dateformat = serializationconfig.with(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        else
            dateformat = serializationconfig.without(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        return dateformat;
    }

    public SerializationConfig with(Locale locale) {
        return _withBase(_base.with(locale));
    }

    public SerializationConfig with(TimeZone timezone) {
        return _withBase(_base.with(timezone));
    }

    public transient SerializationConfig with(MapperFeature amapperfeature[]) {
        int i = _mapperFeatures;
        int k = amapperfeature.length;
        for (int j = 0; j < k; j++)
            i |= amapperfeature[j].getMask();

        if (i == _mapperFeatures)
            amapperfeature = this;
        else
            amapperfeature = new SerializationConfig(this, i, _serFeatures, _generatorFeatures, _generatorFeaturesToChange, _formatWriteFeatures, _formatWriteFeaturesToChange);
        return amapperfeature;
    }

    public volatile MapperConfig with(MapperFeature mapperfeature, boolean flag) {
        return with(mapperfeature, flag);
    }

    public volatile MapperConfig with(MapperFeature amapperfeature[]) {
        return with(amapperfeature);
    }

    public volatile MapperConfigBase with(Base64Variant base64variant) {
        return with(base64variant);
    }

    public volatile MapperConfigBase with(AnnotationIntrospector annotationintrospector) {
        return with(annotationintrospector);
    }

    public volatile MapperConfigBase with(PropertyNamingStrategy propertynamingstrategy) {
        return with(propertynamingstrategy);
    }

    public volatile MapperConfigBase with(ContextAttributes contextattributes) {
        return with(contextattributes);
    }

    public volatile MapperConfigBase with(HandlerInstantiator handlerinstantiator) {
        return with(handlerinstantiator);
    }

    public volatile MapperConfigBase with(ClassIntrospector classintrospector) {
        return with(classintrospector);
    }

    public volatile MapperConfigBase with(VisibilityChecker visibilitychecker) {
        return with(visibilitychecker);
    }

    public volatile MapperConfigBase with(SubtypeResolver subtyperesolver) {
        return with(subtyperesolver);
    }

    public volatile MapperConfigBase with(TypeResolverBuilder typeresolverbuilder) {
        return with(typeresolverbuilder);
    }

    public volatile MapperConfigBase with(TypeFactory typefactory) {
        return with(typefactory);
    }

    public volatile MapperConfigBase with(DateFormat dateformat) {
        return with(dateformat);
    }

    public volatile MapperConfigBase with(Locale locale) {
        return with(locale);
    }

    public volatile MapperConfigBase with(TimeZone timezone) {
        return with(timezone);
    }

    public SerializationConfig withAppendedAnnotationIntrospector(AnnotationIntrospector annotationintrospector) {
        return _withBase(_base.withAppendedAnnotationIntrospector(annotationintrospector));
    }

    public volatile MapperConfigBase withAppendedAnnotationIntrospector(AnnotationIntrospector annotationintrospector) {
        return withAppendedAnnotationIntrospector(annotationintrospector);
    }

    public SerializationConfig withDefaultPrettyPrinter(PrettyPrinter prettyprinter) {
        if (_defaultPrettyPrinter == prettyprinter)
            prettyprinter = this;
        else
            prettyprinter = new SerializationConfig(this, prettyprinter);
        return prettyprinter;
    }

    public transient SerializationConfig withFeatures(FormatFeature aformatfeature[]) {
        int k = _formatWriteFeatures;
        int i = _formatWriteFeaturesToChange;
        int l = aformatfeature.length;
        for (int j = 0; j < l; j++) {
            int i1 = aformatfeature[j].getMask();
            k |= i1;
            i |= i1;
        }

        if (_formatWriteFeatures == k && _formatWriteFeaturesToChange == i)
            aformatfeature = this;
        else
            aformatfeature = new SerializationConfig(this, _mapperFeatures, _serFeatures, _generatorFeatures, _generatorFeaturesToChange, k, i);
        return aformatfeature;
    }

    public transient SerializationConfig withFeatures(com.fasterxml.jackson.core.JsonGenerator.Feature afeature[]) {
        int k = _generatorFeatures;
        int i = _generatorFeaturesToChange;
        int l = afeature.length;
        for (int j = 0; j < l; j++) {
            int i1 = afeature[j].getMask();
            k |= i1;
            i |= i1;
        }

        if (_generatorFeatures == k && _generatorFeaturesToChange == i)
            afeature = this;
        else
            afeature = new SerializationConfig(this, _mapperFeatures, _serFeatures, k, i, _formatWriteFeatures, _formatWriteFeaturesToChange);
        return afeature;
    }

    public transient SerializationConfig withFeatures(SerializationFeature aserializationfeature[]) {
        int j = _serFeatures;
        int k = aserializationfeature.length;
        for (int i = 0; i < k; i++)
            j |= aserializationfeature[i].getMask();

        if (j == _serFeatures)
            aserializationfeature = this;
        else
            aserializationfeature = new SerializationConfig(this, _mapperFeatures, j, _generatorFeatures, _generatorFeaturesToChange, _formatWriteFeatures, _formatWriteFeaturesToChange);
        return aserializationfeature;
    }

    public SerializationConfig withFilters(FilterProvider filterprovider) {
        if (filterprovider == _filterProvider)
            filterprovider = this;
        else
            filterprovider = new SerializationConfig(this, filterprovider);
        return filterprovider;
    }

    public SerializationConfig withInsertedAnnotationIntrospector(AnnotationIntrospector annotationintrospector) {
        return _withBase(_base.withInsertedAnnotationIntrospector(annotationintrospector));
    }

    public volatile MapperConfigBase withInsertedAnnotationIntrospector(AnnotationIntrospector annotationintrospector) {
        return withInsertedAnnotationIntrospector(annotationintrospector);
    }

    public SerializationConfig withPropertyInclusion(com.fasterxml.jackson.annotation.JsonInclude.Value value) {
        if (_serializationInclusion.equals(value))
            value = this;
        else
            value = new SerializationConfig(this, value);
        return value;
    }

    public SerializationConfig withRootName(PropertyName propertyname) {
        if (propertyname != null) goto _L2; else goto _L1
_L1:
        if (_rootName != null) goto _L4; else goto _L3
_L3:
        SerializationConfig serializationconfig = this;
_L6:
        return serializationconfig;
_L2:
        serializationconfig = this;
        if (propertyname.equals(_rootName))
            continue; /* Loop/switch isn't completed */
_L4:
        serializationconfig = new SerializationConfig(this, propertyname);
        if (true) goto _L6; else goto _L5
_L5:
    }

    public volatile MapperConfigBase withRootName(PropertyName propertyname) {
        return withRootName(propertyname);
    }

    public SerializationConfig withSerializationInclusion(com.fasterxml.jackson.annotation.JsonInclude.Include include) {
        return withPropertyInclusion(DEFAULT_INCLUSION.withValueInclusion(include));
    }

    public SerializationConfig withView(Class class1) {
        if (_view == class1)
            class1 = this;
        else
            class1 = new SerializationConfig(this, class1);
        return class1;
    }

    public volatile MapperConfigBase withView(Class class1) {
        return withView(class1);
    }

    public SerializationConfig withVisibility(PropertyAccessor propertyaccessor, com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility visibility) {
        return _withBase(_base.withVisibility(propertyaccessor, visibility));
    }

    public volatile MapperConfigBase withVisibility(PropertyAccessor propertyaccessor, com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility visibility) {
        return withVisibility(propertyaccessor, visibility);
    }

    public SerializationConfig without(FormatFeature formatfeature) {
        int j = _formatWriteFeatures & ~formatfeature.getMask();
        int i = _formatWriteFeaturesToChange | formatfeature.getMask();
        if (_formatWriteFeatures == j && _formatWriteFeaturesToChange == i)
            formatfeature = this;
        else
            formatfeature = new SerializationConfig(this, _mapperFeatures, _serFeatures, _generatorFeatures, _generatorFeaturesToChange, j, i);
        return formatfeature;
    }

    public SerializationConfig without(com.fasterxml.jackson.core.JsonGenerator.Feature feature) {
        int i = _generatorFeatures & ~feature.getMask();
        int j = _generatorFeaturesToChange | feature.getMask();
        if (_generatorFeatures == i && _generatorFeaturesToChange == j)
            feature = this;
        else
            feature = new SerializationConfig(this, _mapperFeatures, _serFeatures, i, j, _formatWriteFeatures, _formatWriteFeaturesToChange);
        return feature;
    }

    public SerializationConfig without(SerializationFeature serializationfeature) {
        int i = _serFeatures & ~serializationfeature.getMask();
        if (i == _serFeatures)
            serializationfeature = this;
        else
            serializationfeature = new SerializationConfig(this, _mapperFeatures, i, _generatorFeatures, _generatorFeaturesToChange, _formatWriteFeatures, _formatWriteFeaturesToChange);
        return serializationfeature;
    }

    public transient SerializationConfig without(SerializationFeature serializationfeature, SerializationFeature aserializationfeature[]) {
        int i = _serFeatures & ~serializationfeature.getMask();
        int k = aserializationfeature.length;
        for (int j = 0; j < k; j++)
            i &= ~aserializationfeature[j].getMask();

        if (i == _serFeatures)
            serializationfeature = this;
        else
            serializationfeature = new SerializationConfig(this, _mapperFeatures, i, _generatorFeatures, _generatorFeaturesToChange, _formatWriteFeatures, _formatWriteFeaturesToChange);
        return serializationfeature;
    }

    public transient SerializationConfig without(MapperFeature amapperfeature[]) {
        int j = _mapperFeatures;
        int k = amapperfeature.length;
        for (int i = 0; i < k; i++)
            j &= ~amapperfeature[i].getMask();

        if (j == _mapperFeatures)
            amapperfeature = this;
        else
            amapperfeature = new SerializationConfig(this, j, _serFeatures, _generatorFeatures, _generatorFeaturesToChange, _formatWriteFeatures, _formatWriteFeaturesToChange);
        return amapperfeature;
    }

    public volatile MapperConfig without(MapperFeature amapperfeature[]) {
        return without(amapperfeature);
    }

    public transient SerializationConfig withoutFeatures(FormatFeature aformatfeature[]) {
        int j = _formatWriteFeatures;
        int i = _formatWriteFeaturesToChange;
        int l = aformatfeature.length;
        for (int k = 0; k < l; k++) {
            int i1 = aformatfeature[k].getMask();
            j &= ~i1;
            i |= i1;
        }

        if (_formatWriteFeatures == j && _formatWriteFeaturesToChange == i)
            aformatfeature = this;
        else
            aformatfeature = new SerializationConfig(this, _mapperFeatures, _serFeatures, _generatorFeatures, _generatorFeaturesToChange, j, i);
        return aformatfeature;
    }

    public transient SerializationConfig withoutFeatures(com.fasterxml.jackson.core.JsonGenerator.Feature afeature[]) {
        int j = _generatorFeatures;
        int i = _generatorFeaturesToChange;
        int l = afeature.length;
        for (int k = 0; k < l; k++) {
            int i1 = afeature[k].getMask();
            j &= ~i1;
            i |= i1;
        }

        if (_generatorFeatures == j && _generatorFeaturesToChange == i)
            afeature = this;
        else
            afeature = new SerializationConfig(this, _mapperFeatures, _serFeatures, j, i, _formatWriteFeatures, _formatWriteFeaturesToChange);
        return afeature;
    }

    public transient SerializationConfig withoutFeatures(SerializationFeature aserializationfeature[]) {
        int j = _serFeatures;
        int k = aserializationfeature.length;
        for (int i = 0; i < k; i++)
            j &= ~aserializationfeature[i].getMask();

        if (j == _serFeatures)
            aserializationfeature = this;
        else
            aserializationfeature = new SerializationConfig(this, _mapperFeatures, j, _generatorFeatures, _generatorFeaturesToChange, _formatWriteFeatures, _formatWriteFeaturesToChange);
        return aserializationfeature;
    }

}
