// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.module;

import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.type.*;
import java.io.Serializable;
import java.util.*;

public class SimpleDeserializers
    implements Deserializers, Serializable {

    private static final long serialVersionUID = 1L;
    protected HashMap _classMappings;
    protected boolean _hasEnumDeserializer;

    public SimpleDeserializers() {
        _classMappings = null;
        _hasEnumDeserializer = false;
    }

    public SimpleDeserializers(Map map) {
        _classMappings = null;
        _hasEnumDeserializer = false;
        addDeserializers(map);
    }

    public void addDeserializer(Class class1, JsonDeserializer jsondeserializer) {
        ClassKey classkey = new ClassKey(class1);
        if (_classMappings == null)
            _classMappings = new HashMap();
        _classMappings.put(classkey, jsondeserializer);
        if (class1 == java/lang/Enum)
            _hasEnumDeserializer = true;
    }

    public void addDeserializers(Map map) {
        java.util.Map.Entry entry;
        for (map = map.entrySet().iterator(); map.hasNext(); addDeserializer((Class)entry.getKey(), (JsonDeserializer)entry.getValue()))
            entry = (java.util.Map.Entry)map.next();

    }

    public JsonDeserializer findArrayDeserializer(ArrayType arraytype, DeserializationConfig deserializationconfig, BeanDescription beandescription, TypeDeserializer typedeserializer, JsonDeserializer jsondeserializer) {
        if (_classMappings == null)
            arraytype = null;
        else
            arraytype = (JsonDeserializer)_classMappings.get(new ClassKey(arraytype.getRawClass()));
        return arraytype;
    }

    public JsonDeserializer findBeanDeserializer(JavaType javatype, DeserializationConfig deserializationconfig, BeanDescription beandescription) {
        if (_classMappings == null)
            javatype = null;
        else
            javatype = (JsonDeserializer)_classMappings.get(new ClassKey(javatype.getRawClass()));
        return javatype;
    }

    public JsonDeserializer findCollectionDeserializer(CollectionType collectiontype, DeserializationConfig deserializationconfig, BeanDescription beandescription, TypeDeserializer typedeserializer, JsonDeserializer jsondeserializer) {
        if (_classMappings == null)
            collectiontype = null;
        else
            collectiontype = (JsonDeserializer)_classMappings.get(new ClassKey(collectiontype.getRawClass()));
        return collectiontype;
    }

    public JsonDeserializer findCollectionLikeDeserializer(CollectionLikeType collectionliketype, DeserializationConfig deserializationconfig, BeanDescription beandescription, TypeDeserializer typedeserializer, JsonDeserializer jsondeserializer) {
        if (_classMappings == null)
            collectionliketype = null;
        else
            collectionliketype = (JsonDeserializer)_classMappings.get(new ClassKey(collectionliketype.getRawClass()));
        return collectionliketype;
    }

    public JsonDeserializer findEnumDeserializer(Class class1, DeserializationConfig deserializationconfig, BeanDescription beandescription) {
        if (_classMappings != null) goto _L2; else goto _L1
_L1:
        deserializationconfig = null;
_L4:
        return deserializationconfig;
_L2:
        beandescription = (JsonDeserializer)_classMappings.get(new ClassKey(class1));
        deserializationconfig = beandescription;
        if (beandescription == null) {
            deserializationconfig = beandescription;
            if (_hasEnumDeserializer) {
                deserializationconfig = beandescription;
                if (class1.isEnum())
                    deserializationconfig = (JsonDeserializer)_classMappings.get(new ClassKey(java/lang/Enum));
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public JsonDeserializer findMapDeserializer(MapType maptype, DeserializationConfig deserializationconfig, BeanDescription beandescription, KeyDeserializer keydeserializer, TypeDeserializer typedeserializer, JsonDeserializer jsondeserializer) {
        if (_classMappings == null)
            maptype = null;
        else
            maptype = (JsonDeserializer)_classMappings.get(new ClassKey(maptype.getRawClass()));
        return maptype;
    }

    public JsonDeserializer findMapLikeDeserializer(MapLikeType mapliketype, DeserializationConfig deserializationconfig, BeanDescription beandescription, KeyDeserializer keydeserializer, TypeDeserializer typedeserializer, JsonDeserializer jsondeserializer) {
        if (_classMappings == null)
            mapliketype = null;
        else
            mapliketype = (JsonDeserializer)_classMappings.get(new ClassKey(mapliketype.getRawClass()));
        return mapliketype;
    }

    public JsonDeserializer findReferenceDeserializer(ReferenceType referencetype, DeserializationConfig deserializationconfig, BeanDescription beandescription, TypeDeserializer typedeserializer, JsonDeserializer jsondeserializer) {
        if (_classMappings == null)
            referencetype = null;
        else
            referencetype = (JsonDeserializer)_classMappings.get(new ClassKey(referencetype.getRawClass()));
        return referencetype;
    }

    public JsonDeserializer findTreeNodeDeserializer(Class class1, DeserializationConfig deserializationconfig, BeanDescription beandescription) {
        if (_classMappings == null)
            class1 = null;
        else
            class1 = (JsonDeserializer)_classMappings.get(new ClassKey(class1));
        return class1;
    }
}
