// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.module;

import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.type.ClassKey;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.Serializable;
import java.lang.reflect.Modifier;
import java.util.HashMap;

public class SimpleAbstractTypeResolver extends AbstractTypeResolver
    implements Serializable {

    private static final long serialVersionUID = 0xfcbdac67L;
    protected final HashMap _mappings = new HashMap();

    public SimpleAbstractTypeResolver() {
    }

    public SimpleAbstractTypeResolver addMapping(Class class1, Class class2) {
        if (class1 == class2)
            throw new IllegalArgumentException("Can not add mapping from class to itself");
        if (!class1.isAssignableFrom(class2))
            throw new IllegalArgumentException((new StringBuilder()).append("Can not add mapping from class ").append(class1.getName()).append(" to ").append(class2.getName()).append(", as latter is not a subtype of former").toString());
        if (!Modifier.isAbstract(class1.getModifiers())) {
            throw new IllegalArgumentException((new StringBuilder()).append("Can not add mapping from class ").append(class1.getName()).append(" since it is not abstract").toString());
        } else {
            _mappings.put(new ClassKey(class1), class2);
            return this;
        }
    }

    public JavaType findTypeMapping(DeserializationConfig deserializationconfig, JavaType javatype) {
        Class class1 = javatype.getRawClass();
        class1 = (Class)_mappings.get(new ClassKey(class1));
        if (class1 == null)
            deserializationconfig = null;
        else
            deserializationconfig = deserializationconfig.getTypeFactory().constructSpecializedType(javatype, class1);
        return deserializationconfig;
    }

    public JavaType resolveAbstractType(DeserializationConfig deserializationconfig, BeanDescription beandescription) {
        return null;
    }

    public JavaType resolveAbstractType(DeserializationConfig deserializationconfig, JavaType javatype) {
        return null;
    }
}
