// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.module;

import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.type.*;
import java.io.Serializable;
import java.util.*;

public class SimpleSerializers extends com.fasterxml.jackson.databind.ser.Serializers.Base
    implements Serializable {

    private static final long serialVersionUID = 0xd0de53cbL;
    protected HashMap _classMappings;
    protected boolean _hasEnumSerializer;
    protected HashMap _interfaceMappings;

    public SimpleSerializers() {
        _classMappings = null;
        _interfaceMappings = null;
        _hasEnumSerializer = false;
    }

    public SimpleSerializers(List list) {
        _classMappings = null;
        _interfaceMappings = null;
        _hasEnumSerializer = false;
        addSerializers(list);
    }

    protected void _addSerializer(Class class1, JsonSerializer jsonserializer) {
        ClassKey classkey = new ClassKey(class1);
        if (!class1.isInterface()) goto _L2; else goto _L1
_L1:
        if (_interfaceMappings == null)
            _interfaceMappings = new HashMap();
        _interfaceMappings.put(classkey, jsonserializer);
_L4:
        return;
_L2:
        if (_classMappings == null)
            _classMappings = new HashMap();
        _classMappings.put(classkey, jsonserializer);
        if (class1 == java/lang/Enum)
            _hasEnumSerializer = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected JsonSerializer _findInterfaceMapping(Class class1, ClassKey classkey) {
        int i;
        int j;
        Class aclass[];
        aclass = class1.getInterfaces();
        j = aclass.length;
        i = 0;
_L4:
        Object obj;
        if (i >= j)
            break MISSING_BLOCK_LABEL_72;
        obj = aclass[i];
        classkey.reset(((Class) (obj)));
        class1 = (JsonSerializer)_interfaceMappings.get(classkey);
        if (class1 == null) goto _L2; else goto _L1
_L1:
        return class1;
_L2:
        obj = _findInterfaceMapping(((Class) (obj)), classkey);
        class1 = ((Class) (obj));
        if (obj != null) goto _L1; else goto _L3
_L3:
        i++;
          goto _L4
        class1 = null;
          goto _L1
    }

    public void addSerializer(JsonSerializer jsonserializer) {
        Class class1 = jsonserializer.handledType();
        if (class1 == null || class1 == java/lang/Object) {
            throw new IllegalArgumentException((new StringBuilder()).append("JsonSerializer of type ").append(jsonserializer.getClass().getName()).append(" does not define valid handledType() -- must either register with method that takes type argument ").append(" or make serializer extend 'com.fasterxml.jackson.databind.ser.std.StdSerializer'").toString());
        } else {
            _addSerializer(class1, jsonserializer);
            return;
        }
    }

    public void addSerializer(Class class1, JsonSerializer jsonserializer) {
        _addSerializer(class1, jsonserializer);
    }

    public void addSerializers(List list) {
        for (list = list.iterator(); list.hasNext(); addSerializer((JsonSerializer)list.next()));
    }

    public JsonSerializer findArraySerializer(SerializationConfig serializationconfig, ArrayType arraytype, BeanDescription beandescription, TypeSerializer typeserializer, JsonSerializer jsonserializer) {
        return findSerializer(serializationconfig, arraytype, beandescription);
    }

    public JsonSerializer findCollectionLikeSerializer(SerializationConfig serializationconfig, CollectionLikeType collectionliketype, BeanDescription beandescription, TypeSerializer typeserializer, JsonSerializer jsonserializer) {
        return findSerializer(serializationconfig, collectionliketype, beandescription);
    }

    public JsonSerializer findCollectionSerializer(SerializationConfig serializationconfig, CollectionType collectiontype, BeanDescription beandescription, TypeSerializer typeserializer, JsonSerializer jsonserializer) {
        return findSerializer(serializationconfig, collectiontype, beandescription);
    }

    public JsonSerializer findMapLikeSerializer(SerializationConfig serializationconfig, MapLikeType mapliketype, BeanDescription beandescription, JsonSerializer jsonserializer, TypeSerializer typeserializer, JsonSerializer jsonserializer1) {
        return findSerializer(serializationconfig, mapliketype, beandescription);
    }

    public JsonSerializer findMapSerializer(SerializationConfig serializationconfig, MapType maptype, BeanDescription beandescription, JsonSerializer jsonserializer, TypeSerializer typeserializer, JsonSerializer jsonserializer1) {
        return findSerializer(serializationconfig, maptype, beandescription);
    }

    public JsonSerializer findSerializer(SerializationConfig serializationconfig, JavaType javatype, BeanDescription beandescription) {
        ClassKey classkey;
        beandescription = javatype.getRawClass();
        classkey = new ClassKey(beandescription);
        if (!beandescription.isInterface()) goto _L2; else goto _L1
_L1:
        if (_interfaceMappings == null) goto _L4; else goto _L3
_L3:
        serializationconfig = (JsonSerializer)_interfaceMappings.get(classkey);
        if (serializationconfig == null) goto _L4; else goto _L5
_L5:
        return serializationconfig;
_L2:
        if (_classMappings != null) {
            JsonSerializer jsonserializer = (JsonSerializer)_classMappings.get(classkey);
            serializationconfig = jsonserializer;
            if (jsonserializer != null)
                continue; /* Loop/switch isn't completed */
            if (_hasEnumSerializer && javatype.isEnumType()) {
                classkey.reset(java/lang/Enum);
                javatype = (JsonSerializer)_classMappings.get(classkey);
                serializationconfig = javatype;
                if (javatype != null)
                    continue; /* Loop/switch isn't completed */
            }
            for (javatype = beandescription; javatype != null; javatype = javatype.getSuperclass()) {
                classkey.reset(javatype);
                JsonSerializer jsonserializer1 = (JsonSerializer)_classMappings.get(classkey);
                serializationconfig = jsonserializer1;
                if (jsonserializer1 != null)
                    continue; /* Loop/switch isn't completed */
            }

        }
_L4:
label0:
        {
            if (_interfaceMappings == null)
                break label0;
            javatype = _findInterfaceMapping(beandescription, classkey);
            serializationconfig = javatype;
            if (javatype != null)
                continue; /* Loop/switch isn't completed */
            if (beandescription.isInterface())
                break label0;
            serializationconfig = beandescription;
            do {
                serializationconfig = serializationconfig.getSuperclass();
                if (serializationconfig == null)
                    break label0;
                javatype = _findInterfaceMapping(serializationconfig, classkey);
            } while (javatype == null);
            serializationconfig = javatype;
            continue; /* Loop/switch isn't completed */
        }
        serializationconfig = null;
        if (true) goto _L5; else goto _L6
_L6:
    }
}
