// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.std;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.jsonFormatVisitors.*;
import com.fasterxml.jackson.databind.jsonschema.JsonSchema;
import com.fasterxml.jackson.databind.jsonschema.SchemaAware;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.ContextualSerializer;
import java.io.IOException;
import java.lang.reflect.*;
import java.util.LinkedHashSet;
import java.util.Set;

// Referenced classes of package com.fasterxml.jackson.databind.ser.std:
//            StdSerializer

public class JsonValueSerializer extends StdSerializer
    implements JsonFormatVisitable, SchemaAware, ContextualSerializer {

    protected final Method _accessorMethod;
    protected final boolean _forceTypeInformation;
    protected final BeanProperty _property;
    protected final JsonSerializer _valueSerializer;

    public JsonValueSerializer(AnnotatedMethod annotatedmethod, JsonSerializer jsonserializer) {
        this(annotatedmethod.getAnnotated(), jsonserializer);
    }

    public JsonValueSerializer(JsonValueSerializer jsonvalueserializer, BeanProperty beanproperty, JsonSerializer jsonserializer, boolean flag) {
        super(_notNullClass(jsonvalueserializer.handledType()));
        _accessorMethod = jsonvalueserializer._accessorMethod;
        _valueSerializer = jsonserializer;
        _property = beanproperty;
        _forceTypeInformation = flag;
    }

    public JsonValueSerializer(Method method, JsonSerializer jsonserializer) {
        super(method.getReturnType(), false);
        _accessorMethod = method;
        _valueSerializer = jsonserializer;
        _property = null;
        _forceTypeInformation = true;
    }

    private static final Class _notNullClass(Class class1) {
        Object obj = class1;
        if (class1 == null)
            obj = java/lang/Object;
        return ((Class) (obj));
    }

    protected boolean _acceptJsonFormatVisitorForEnum(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype, Class class1) {
        int i = 0;
        JsonStringFormatVisitor jsonstringformatvisitor = jsonformatvisitorwrapper.expectStringFormat(javatype);
        if (jsonstringformatvisitor != null) {
            jsonformatvisitorwrapper = new LinkedHashSet();
            class1 = ((Class) (class1.getEnumConstants()));
            int j = class1.length;
            do {
                if (i >= j)
                    break;
                javatype = class1[i];
                try {
                    jsonformatvisitorwrapper.add(String.valueOf(_accessorMethod.invoke(javatype, new Object[0])));
                }
                // Misplaced declaration of an exception variable
                catch (JsonFormatVisitorWrapper jsonformatvisitorwrapper) {
                    for (; (jsonformatvisitorwrapper instanceof InvocationTargetException) && jsonformatvisitorwrapper.getCause() != null; jsonformatvisitorwrapper = jsonformatvisitorwrapper.getCause());
                    if (jsonformatvisitorwrapper instanceof Error)
                        throw (Error)jsonformatvisitorwrapper;
                    else
                        throw JsonMappingException.wrapWithPath(jsonformatvisitorwrapper, javatype, (new StringBuilder()).append(_accessorMethod.getName()).append("()").toString());
                }
                i++;
            } while (true);
            jsonstringformatvisitor.enumTypes(jsonformatvisitorwrapper);
        }
        return true;
    }

    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
        Class class1;
        Class class2;
        if (javatype == null)
            class1 = null;
        else
            class1 = javatype.getRawClass();
        class2 = class1;
        if (class1 == null)
            class2 = _accessorMethod.getDeclaringClass();
        if (class2 == null || !class2.isEnum() || !_acceptJsonFormatVisitorForEnum(jsonformatvisitorwrapper, javatype, class2)) goto _L2; else goto _L1
_L1:
        return;
_L2:
        JsonSerializer jsonserializer = _valueSerializer;
        Object obj = jsonserializer;
        if (jsonserializer == null) {
            JavaType javatype1 = javatype;
            if (javatype == null) {
                if (_property != null)
                    javatype = _property.getType();
                javatype1 = javatype;
                if (javatype == null)
                    javatype1 = jsonformatvisitorwrapper.getProvider().constructType(_handledType);
            }
            javatype = jsonformatvisitorwrapper.getProvider().findTypedValueSerializer(javatype1, false, _property);
            obj = javatype;
            if (javatype == null) {
                jsonformatvisitorwrapper.expectAnyFormat(javatype1);
                continue; /* Loop/switch isn't completed */
            }
        }
        ((JsonSerializer) (obj)).acceptJsonFormatVisitor(jsonformatvisitorwrapper, null);
        if (true) goto _L1; else goto _L3
_L3:
    }

    public JsonSerializer createContextual(SerializerProvider serializerprovider, BeanProperty beanproperty) {
        Object obj = _valueSerializer;
        if (obj != null) goto _L2; else goto _L1
_L1:
label0:
        {
            if (!serializerprovider.isEnabled(MapperFeature.USE_STATIC_TYPING)) {
                obj = this;
                if (!Modifier.isFinal(_accessorMethod.getReturnType().getModifiers()))
                    break label0;
            }
            obj = serializerprovider.constructType(_accessorMethod.getGenericReturnType());
            serializerprovider = serializerprovider.findPrimaryPropertySerializer(((JavaType) (obj)), beanproperty);
            obj = withResolved(beanproperty, serializerprovider, isNaturalTypeWithStdHandling(((JavaType) (obj)).getRawClass(), serializerprovider));
        }
_L4:
        return ((JsonSerializer) (obj));
_L2:
        obj = withResolved(beanproperty, serializerprovider.handlePrimaryContextualization(((JsonSerializer) (obj)), beanproperty), _forceTypeInformation);
        if (true) goto _L4; else goto _L3
_L3:
    }

    public JsonNode getSchema(SerializerProvider serializerprovider, Type type) {
        if (_valueSerializer instanceof SchemaAware)
            serializerprovider = ((SchemaAware)_valueSerializer).getSchema(serializerprovider, null);
        else
            serializerprovider = JsonSchema.getDefaultSchemaNode();
        return serializerprovider;
    }

    protected boolean isNaturalTypeWithStdHandling(Class class1, JsonSerializer jsonserializer) {
        boolean flag = false;
        if (class1.isPrimitive() ? class1 == Integer.TYPE || class1 == Boolean.TYPE || class1 == Double.TYPE : class1 == java/lang/String || class1 == java/lang/Integer || class1 == java/lang/Boolean || class1 == java/lang/Double)
            flag = isDefaultSerializer(jsonserializer);
        return flag;
    }

    public void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        JsonSerializer jsonserializer;
        JsonSerializer jsonserializer1;
        Object obj1;
        try {
            obj1 = _accessorMethod.invoke(obj, new Object[0]);
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            throw obj;
        }
        // Misplaced declaration of an exception variable
        catch (JsonGenerator jsongenerator) {
            for (; (jsongenerator instanceof InvocationTargetException) && jsongenerator.getCause() != null; jsongenerator = jsongenerator.getCause());
            if (jsongenerator instanceof Error)
                throw (Error)jsongenerator;
            else
                throw JsonMappingException.wrapWithPath(jsongenerator, obj, (new StringBuilder()).append(_accessorMethod.getName()).append("()").toString());
        }
        if (obj1 != null) goto _L2; else goto _L1
_L1:
        serializerprovider.defaultSerializeNull(jsongenerator);
_L3:
        return;
_L2:
        jsonserializer1 = _valueSerializer;
        jsonserializer = jsonserializer1;
        if (jsonserializer1 != null)
            break MISSING_BLOCK_LABEL_56;
        jsonserializer = serializerprovider.findTypedValueSerializer(obj1.getClass(), true, _property);
        jsonserializer.serialize(obj1, jsongenerator, serializerprovider);
          goto _L3
    }

    public void serializeWithType(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, TypeSerializer typeserializer) {
        JsonSerializer jsonserializer;
        JsonSerializer jsonserializer1;
        Object obj1;
        try {
            obj1 = _accessorMethod.invoke(obj, new Object[0]);
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            throw obj;
        }
        // Misplaced declaration of an exception variable
        catch (JsonGenerator jsongenerator) {
            for (; (jsongenerator instanceof InvocationTargetException) && jsongenerator.getCause() != null; jsongenerator = jsongenerator.getCause());
            if (jsongenerator instanceof Error)
                throw (Error)jsongenerator;
            else
                throw JsonMappingException.wrapWithPath(jsongenerator, obj, (new StringBuilder()).append(_accessorMethod.getName()).append("()").toString());
        }
        if (obj1 != null) goto _L2; else goto _L1
_L1:
        serializerprovider.defaultSerializeNull(jsongenerator);
_L5:
        return;
_L2:
        jsonserializer1 = _valueSerializer;
        if (jsonserializer1 != null) goto _L4; else goto _L3
_L3:
        jsonserializer = serializerprovider.findValueSerializer(obj1.getClass(), _property);
_L7:
        jsonserializer.serializeWithType(obj1, jsongenerator, serializerprovider, typeserializer);
          goto _L5
_L4:
        jsonserializer = jsonserializer1;
        if (!_forceTypeInformation) goto _L7; else goto _L6
_L6:
        typeserializer.writeTypePrefixForScalar(obj, jsongenerator);
        jsonserializer1.serialize(obj1, jsongenerator, serializerprovider);
        typeserializer.writeTypeSuffixForScalar(obj, jsongenerator);
          goto _L5
    }

    public String toString() {
        return (new StringBuilder()).append("(@JsonValue serializer for method ").append(_accessorMethod.getDeclaringClass()).append("#").append(_accessorMethod.getName()).append(")").toString();
    }

    public JsonValueSerializer withResolved(BeanProperty beanproperty, JsonSerializer jsonserializer, boolean flag) {
        if (_property == beanproperty && _valueSerializer == jsonserializer && flag == _forceTypeInformation)
            beanproperty = this;
        else
            beanproperty = new JsonValueSerializer(this, beanproperty, jsonserializer, flag);
        return beanproperty;
    }
}
