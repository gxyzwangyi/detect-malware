// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.impl;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase;
import java.util.Collection;
import java.util.Iterator;

public class StringCollectionSerializer extends StaticListSerializerBase {

    public static final StringCollectionSerializer instance = new StringCollectionSerializer();

    protected StringCollectionSerializer() {
        super(java/util/Collection);
    }

    protected StringCollectionSerializer(StringCollectionSerializer stringcollectionserializer, JsonSerializer jsonserializer, Boolean boolean1) {
        super(stringcollectionserializer, jsonserializer, boolean1);
    }

    private final void _serializeUnwrapped(Collection collection, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        if (_serializer == null)
            serializeContents(collection, jsongenerator, serializerprovider);
        else
            serializeUsingCustom(collection, jsongenerator, serializerprovider);
    }

    private final void serializeContents(Collection collection, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        if (_serializer == null) goto _L2; else goto _L1
_L1:
        serializeUsingCustom(collection, jsongenerator, serializerprovider);
_L10:
        return;
_L2:
        int i;
        Iterator iterator;
        iterator = collection.iterator();
        i = 0;
_L8:
        String s;
        if (!iterator.hasNext())
            continue; /* Loop/switch isn't completed */
        s = (String)iterator.next();
        if (s != null) goto _L4; else goto _L3
_L3:
        serializerprovider.defaultSerializeNull(jsongenerator);
_L6:
        i++;
        break; /* Loop/switch isn't completed */
_L4:
        jsongenerator.writeString(s);
        if (true) goto _L6; else goto _L5
_L5:
        Exception exception;
        exception;
        wrapAndThrow(serializerprovider, exception, collection, i);
        if (true) goto _L8; else goto _L7
_L7:
        if (true) goto _L10; else goto _L9
_L9:
    }

    private void serializeUsingCustom(Collection collection, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        Iterator iterator;
        JsonSerializer jsonserializer;
        jsonserializer = _serializer;
        iterator = collection.iterator();
_L2:
        Object obj;
        if (!iterator.hasNext())
            break; /* Loop/switch isn't completed */
        obj = (String)iterator.next();
        if (obj == null) {
            try {
                serializerprovider.defaultSerializeNull(jsongenerator);
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) {
                wrapAndThrow(serializerprovider, ((Throwable) (obj)), collection, 0);
            }
            continue; /* Loop/switch isn't completed */
        }
        jsonserializer.serialize(obj, jsongenerator, serializerprovider);
        if (true) goto _L2; else goto _L1
_L1:
    }

    public JsonSerializer _withResolved(BeanProperty beanproperty, JsonSerializer jsonserializer, Boolean boolean1) {
        return new StringCollectionSerializer(this, jsonserializer, boolean1);
    }

    protected void acceptContentVisitor(JsonArrayFormatVisitor jsonarrayformatvisitor) {
        jsonarrayformatvisitor.itemsFormat(JsonFormatTypes.STRING);
    }

    protected JsonNode contentSchema() {
        return createSchemaNode("string", true);
    }

    public volatile void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        serialize((Collection)obj, jsongenerator, serializerprovider);
    }

    public void serialize(Collection collection, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        int i = collection.size();
        if (i == 1 && (_unwrapSingle == null && serializerprovider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED) || _unwrapSingle == Boolean.TRUE)) {
            _serializeUnwrapped(collection, jsongenerator, serializerprovider);
        } else {
            jsongenerator.writeStartArray(i);
            if (_serializer == null)
                serializeContents(collection, jsongenerator, serializerprovider);
            else
                serializeUsingCustom(collection, jsongenerator, serializerprovider);
            jsongenerator.writeEndArray();
        }
    }

    public volatile void serializeWithType(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, TypeSerializer typeserializer) {
        serializeWithType((Collection)obj, jsongenerator, serializerprovider, typeserializer);
    }

    public void serializeWithType(Collection collection, JsonGenerator jsongenerator, SerializerProvider serializerprovider, TypeSerializer typeserializer) {
        typeserializer.writeTypePrefixForArray(collection, jsongenerator);
        if (_serializer == null)
            serializeContents(collection, jsongenerator, serializerprovider);
        else
            serializeUsingCustom(collection, jsongenerator, serializerprovider);
        typeserializer.writeTypeSuffixForArray(collection, jsongenerator);
    }

}
