// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
import com.fasterxml.jackson.databind.util.Annotations;
import java.io.Serializable;

// Referenced classes of package com.fasterxml.jackson.databind.ser:
//            BeanPropertyWriter

public abstract class VirtualBeanPropertyWriter extends BeanPropertyWriter
    implements Serializable {

    private static final long serialVersionUID = 1L;

    protected VirtualBeanPropertyWriter() {
    }

    protected VirtualBeanPropertyWriter(BeanPropertyDefinition beanpropertydefinition, Annotations annotations, JavaType javatype) {
        this(beanpropertydefinition, annotations, javatype, null, null, null, beanpropertydefinition.findInclusion());
    }

    protected VirtualBeanPropertyWriter(BeanPropertyDefinition beanpropertydefinition, Annotations annotations, JavaType javatype, JsonSerializer jsonserializer, TypeSerializer typeserializer, JavaType javatype1, com.fasterxml.jackson.annotation.JsonInclude.Value value1) {
        super(beanpropertydefinition, beanpropertydefinition.getPrimaryMember(), annotations, javatype, jsonserializer, typeserializer, javatype1, _suppressNulls(value1), _suppressableValue(value1));
    }

    protected VirtualBeanPropertyWriter(VirtualBeanPropertyWriter virtualbeanpropertywriter) {
        super(virtualbeanpropertywriter);
    }

    protected VirtualBeanPropertyWriter(VirtualBeanPropertyWriter virtualbeanpropertywriter, PropertyName propertyname) {
        super(virtualbeanpropertywriter, propertyname);
    }

    protected static boolean _suppressNulls(com.fasterxml.jackson.annotation.JsonInclude.Value value1) {
        boolean flag1 = false;
        if (value1 != null) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        value1 = value1.getValueInclusion();
        flag = flag1;
        if (value1 != com.fasterxml.jackson.annotation.JsonInclude.Include.ALWAYS) {
            flag = flag1;
            if (value1 != com.fasterxml.jackson.annotation.JsonInclude.Include.USE_DEFAULTS)
                flag = true;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected static Object _suppressableValue(com.fasterxml.jackson.annotation.JsonInclude.Value value1) {
        if (value1 == null) {
            value1 = Boolean.valueOf(false);
        } else {
            value1 = value1.getValueInclusion();
            if (value1 == com.fasterxml.jackson.annotation.JsonInclude.Include.ALWAYS || value1 == com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL || value1 == com.fasterxml.jackson.annotation.JsonInclude.Include.USE_DEFAULTS)
                value1 = null;
            else
                value1 = ((com.fasterxml.jackson.annotation.JsonInclude.Value) (MARKER_FOR_EMPTY));
        }
        return value1;
    }

    public boolean isVirtual() {
        return true;
    }

    public void serializeAsElement(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        Object obj1 = value(obj, jsongenerator, serializerprovider);
        if (obj1 != null) goto _L2; else goto _L1
_L1:
        if (_nullSerializer != null)
            _nullSerializer.serialize(null, jsongenerator, serializerprovider);
        else
            jsongenerator.writeNull();
_L4:
        return;
_L2:
        JsonSerializer jsonserializer1 = _serializer;
        JsonSerializer jsonserializer = jsonserializer1;
        if (jsonserializer1 == null) {
            Class class1 = obj1.getClass();
            PropertySerializerMap propertyserializermap = _dynamicSerializers;
            JsonSerializer jsonserializer2 = propertyserializermap.serializerFor(class1);
            jsonserializer = jsonserializer2;
            if (jsonserializer2 == null)
                jsonserializer = _findAndAddDynamic(propertyserializermap, class1, serializerprovider);
        }
        if (_suppressableValue != null)
            if (MARKER_FOR_EMPTY == _suppressableValue) {
                if (jsonserializer.isEmpty(serializerprovider, obj1)) {
                    serializeAsPlaceholder(obj, jsongenerator, serializerprovider);
                    continue; /* Loop/switch isn't completed */
                }
            } else
            if (_suppressableValue.equals(obj1)) {
                serializeAsPlaceholder(obj, jsongenerator, serializerprovider);
                continue; /* Loop/switch isn't completed */
            }
        if (obj1 != obj || !_handleSelfReference(obj, jsongenerator, serializerprovider, jsonserializer))
            if (_typeSerializer == null)
                jsonserializer.serialize(obj1, jsongenerator, serializerprovider);
            else
                jsonserializer.serializeWithType(obj1, jsongenerator, serializerprovider, _typeSerializer);
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void serializeAsField(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        Object obj1 = value(obj, jsongenerator, serializerprovider);
        if (obj1 != null) goto _L2; else goto _L1
_L1:
        if (_nullSerializer != null) {
            jsongenerator.writeFieldName(_name);
            _nullSerializer.serialize(null, jsongenerator, serializerprovider);
        }
_L4:
        return;
_L2:
        JsonSerializer jsonserializer1 = _serializer;
        JsonSerializer jsonserializer = jsonserializer1;
        if (jsonserializer1 == null) {
            Class class1 = obj1.getClass();
            PropertySerializerMap propertyserializermap = _dynamicSerializers;
            JsonSerializer jsonserializer2 = propertyserializermap.serializerFor(class1);
            jsonserializer = jsonserializer2;
            if (jsonserializer2 == null)
                jsonserializer = _findAndAddDynamic(propertyserializermap, class1, serializerprovider);
        }
        if ((_suppressableValue == null || (MARKER_FOR_EMPTY != _suppressableValue ? !_suppressableValue.equals(obj1) : !jsonserializer.isEmpty(serializerprovider, obj1))) && (obj1 != obj || !_handleSelfReference(obj, jsongenerator, serializerprovider, jsonserializer))) {
            jsongenerator.writeFieldName(_name);
            if (_typeSerializer == null)
                jsonserializer.serialize(obj1, jsongenerator, serializerprovider);
            else
                jsonserializer.serializeWithType(obj1, jsongenerator, serializerprovider, _typeSerializer);
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected abstract Object value(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider);

    public abstract VirtualBeanPropertyWriter withConfig(MapperConfig mapperconfig, AnnotatedClass annotatedclass, BeanPropertyDefinition beanpropertydefinition, JavaType javatype);
}
