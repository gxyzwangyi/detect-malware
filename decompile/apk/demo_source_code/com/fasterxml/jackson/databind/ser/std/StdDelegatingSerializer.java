// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.std;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsonschema.SchemaAware;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.ContextualSerializer;
import com.fasterxml.jackson.databind.ser.ResolvableSerializer;
import com.fasterxml.jackson.databind.util.Converter;
import java.lang.reflect.Type;

// Referenced classes of package com.fasterxml.jackson.databind.ser.std:
//            StdSerializer

public class StdDelegatingSerializer extends StdSerializer
    implements JsonFormatVisitable, SchemaAware, ContextualSerializer, ResolvableSerializer {

    protected final Converter _converter;
    protected final JsonSerializer _delegateSerializer;
    protected final JavaType _delegateType;

    public StdDelegatingSerializer(Converter converter) {
        super(java/lang/Object);
        _converter = converter;
        _delegateType = null;
        _delegateSerializer = null;
    }

    public StdDelegatingSerializer(Converter converter, JavaType javatype, JsonSerializer jsonserializer) {
        super(javatype);
        _converter = converter;
        _delegateType = javatype;
        _delegateSerializer = jsonserializer;
    }

    public StdDelegatingSerializer(Class class1, Converter converter) {
        super(class1, false);
        _converter = converter;
        _delegateType = null;
        _delegateSerializer = null;
    }

    protected JsonSerializer _findSerializer(Object obj, SerializerProvider serializerprovider) {
        return serializerprovider.findValueSerializer(obj.getClass());
    }

    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
        if (_delegateSerializer != null)
            _delegateSerializer.acceptJsonFormatVisitor(jsonformatvisitorwrapper, javatype);
    }

    protected Object convertValue(Object obj) {
        return _converter.convert(obj);
    }

    public JsonSerializer createContextual(SerializerProvider serializerprovider, BeanProperty beanproperty) {
        JsonSerializer jsonserializer2 = _delegateSerializer;
        JavaType javatype2 = _delegateType;
        JavaType javatype1 = javatype2;
        JsonSerializer jsonserializer = jsonserializer2;
        if (jsonserializer2 == null) {
            JavaType javatype = javatype2;
            if (javatype2 == null)
                javatype = _converter.getOutputType(serializerprovider.getTypeFactory());
            javatype1 = javatype;
            jsonserializer = jsonserializer2;
            if (!javatype.isJavaLangObject()) {
                jsonserializer = serializerprovider.findValueSerializer(javatype);
                javatype1 = javatype;
            }
        }
        JsonSerializer jsonserializer1 = jsonserializer;
        if (jsonserializer instanceof ContextualSerializer)
            jsonserializer1 = serializerprovider.handleSecondaryContextualization(jsonserializer, beanproperty);
        if (jsonserializer1 == _delegateSerializer && javatype1 == _delegateType)
            serializerprovider = this;
        else
            serializerprovider = withDelegate(_converter, javatype1, jsonserializer1);
        return serializerprovider;
    }

    protected Converter getConverter() {
        return _converter;
    }

    public JsonSerializer getDelegatee() {
        return _delegateSerializer;
    }

    public JsonNode getSchema(SerializerProvider serializerprovider, Type type) {
        if (_delegateSerializer instanceof SchemaAware)
            serializerprovider = ((SchemaAware)_delegateSerializer).getSchema(serializerprovider, type);
        else
            serializerprovider = super.getSchema(serializerprovider, type);
        return serializerprovider;
    }

    public JsonNode getSchema(SerializerProvider serializerprovider, Type type, boolean flag) {
        if (_delegateSerializer instanceof SchemaAware)
            serializerprovider = ((SchemaAware)_delegateSerializer).getSchema(serializerprovider, type, flag);
        else
            serializerprovider = super.getSchema(serializerprovider, type);
        return serializerprovider;
    }

    public boolean isEmpty(SerializerProvider serializerprovider, Object obj) {
        Object obj1 = convertValue(obj);
        boolean flag;
        if (_delegateSerializer == null) {
            if (obj == null)
                flag = true;
            else
                flag = false;
        } else {
            flag = _delegateSerializer.isEmpty(serializerprovider, obj1);
        }
        return flag;
    }

    public boolean isEmpty(Object obj) {
        return isEmpty(null, obj);
    }

    public void resolve(SerializerProvider serializerprovider) {
        if (_delegateSerializer != null && (_delegateSerializer instanceof ResolvableSerializer))
            ((ResolvableSerializer)_delegateSerializer).resolve(serializerprovider);
    }

    public void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        Object obj1 = convertValue(obj);
        if (obj1 == null) {
            serializerprovider.defaultSerializeNull(jsongenerator);
        } else {
            JsonSerializer jsonserializer = _delegateSerializer;
            obj = jsonserializer;
            if (jsonserializer == null)
                obj = _findSerializer(obj1, serializerprovider);
            ((JsonSerializer) (obj)).serialize(obj1, jsongenerator, serializerprovider);
        }
    }

    public void serializeWithType(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, TypeSerializer typeserializer) {
        Object obj1 = convertValue(obj);
        JsonSerializer jsonserializer1 = _delegateSerializer;
        JsonSerializer jsonserializer = jsonserializer1;
        if (jsonserializer1 == null)
            jsonserializer = _findSerializer(obj, serializerprovider);
        jsonserializer.serializeWithType(obj1, jsongenerator, serializerprovider, typeserializer);
    }

    protected StdDelegatingSerializer withDelegate(Converter converter, JavaType javatype, JsonSerializer jsonserializer) {
        if (getClass() != com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer)
            throw new IllegalStateException((new StringBuilder()).append("Sub-class ").append(getClass().getName()).append(" must override 'withDelegate'").toString());
        else
            return new StdDelegatingSerializer(converter, javatype, jsonserializer);
    }
}
