// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.std;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;

// Referenced classes of package com.fasterxml.jackson.databind.ser.std:
//            StdScalarSerializer

public class NumberSerializer extends StdScalarSerializer {

    public static final NumberSerializer instance = new NumberSerializer(java/lang/Number);
    protected final boolean _isInt;

    public NumberSerializer(Class class1) {
        boolean flag = false;
        super(class1, false);
        if (class1 == java/math/BigInteger)
            flag = true;
        _isInt = flag;
    }

    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
        if (_isInt)
            visitIntFormat(jsonformatvisitorwrapper, javatype, com.fasterxml.jackson.core.JsonParser.NumberType.BIG_INTEGER);
        else
        if (handledType() == java/math/BigDecimal)
            visitFloatFormat(jsonformatvisitorwrapper, javatype, com.fasterxml.jackson.core.JsonParser.NumberType.BIG_DECIMAL);
        else
            jsonformatvisitorwrapper.expectNumberFormat(javatype);
    }

    public JsonNode getSchema(SerializerProvider serializerprovider, Type type) {
        if (_isInt)
            serializerprovider = "integer";
        else
            serializerprovider = "number";
        return createSchemaNode(serializerprovider, true);
    }

    public void serialize(Number number, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        if (number instanceof BigDecimal)
            jsongenerator.writeNumber((BigDecimal)number);
        else
        if (number instanceof BigInteger)
            jsongenerator.writeNumber((BigInteger)number);
        else
        if (number instanceof Long)
            jsongenerator.writeNumber(number.longValue());
        else
        if (number instanceof Double)
            jsongenerator.writeNumber(number.doubleValue());
        else
        if (number instanceof Float)
            jsongenerator.writeNumber(number.floatValue());
        else
        if ((number instanceof Integer) || (number instanceof Byte) || (number instanceof Short))
            jsongenerator.writeNumber(number.intValue());
        else
            jsongenerator.writeNumber(number.toString());
    }

    public volatile void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        serialize((Number)obj, jsongenerator, serializerprovider);
    }

}
