// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.std;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.ContainerSerializer;
import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
import java.util.Collection;
import java.util.Iterator;

// Referenced classes of package com.fasterxml.jackson.databind.ser.std:
//            AsArraySerializerBase

public class CollectionSerializer extends AsArraySerializerBase {

    private static final long serialVersionUID = 1L;

    public CollectionSerializer(JavaType javatype, boolean flag, TypeSerializer typeserializer, BeanProperty beanproperty, JsonSerializer jsonserializer) {
        this(javatype, flag, typeserializer, jsonserializer);
    }

    public CollectionSerializer(JavaType javatype, boolean flag, TypeSerializer typeserializer, JsonSerializer jsonserializer) {
        super(java/util/Collection, javatype, flag, typeserializer, jsonserializer);
    }

    public CollectionSerializer(CollectionSerializer collectionserializer, BeanProperty beanproperty, TypeSerializer typeserializer, JsonSerializer jsonserializer, Boolean boolean1) {
        super(collectionserializer, beanproperty, typeserializer, jsonserializer, boolean1);
    }

    public ContainerSerializer _withValueTypeSerializer(TypeSerializer typeserializer) {
        return new CollectionSerializer(this, _property, typeserializer, _elementSerializer, _unwrapSingle);
    }

    public volatile boolean hasSingleElement(Object obj) {
        return hasSingleElement((Collection)obj);
    }

    public boolean hasSingleElement(Collection collection) {
        boolean flag;
        flag = false;
        collection = collection.iterator();
        if (collection.hasNext()) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        collection.next();
        if (!collection.hasNext())
            flag = true;
        if (true) goto _L1; else goto _L3
_L3:
    }

    public volatile boolean isEmpty(SerializerProvider serializerprovider, Object obj) {
        return isEmpty(serializerprovider, (Collection)obj);
    }

    public boolean isEmpty(SerializerProvider serializerprovider, Collection collection) {
        boolean flag;
        if (collection == null || collection.isEmpty())
            flag = true;
        else
            flag = false;
        return flag;
    }

    public volatile void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        serialize((Collection)obj, jsongenerator, serializerprovider);
    }

    public final void serialize(Collection collection, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        int i = collection.size();
        if (i == 1 && (_unwrapSingle == null && serializerprovider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED) || _unwrapSingle == Boolean.TRUE)) {
            serializeContents(collection, jsongenerator, serializerprovider);
        } else {
            jsongenerator.writeStartArray(i);
            serializeContents(collection, jsongenerator, serializerprovider);
            jsongenerator.writeEndArray();
        }
    }

    public volatile void serializeContents(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        serializeContents((Collection)obj, jsongenerator, serializerprovider);
    }

    public void serializeContents(Collection collection, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        if (_elementSerializer == null) goto _L2; else goto _L1
_L1:
        serializeContentsUsing(collection, jsongenerator, serializerprovider, _elementSerializer);
_L4:
        return;
_L2:
        Iterator iterator = collection.iterator();
        if (!iterator.hasNext()) goto _L4; else goto _L3
_L3:
        int i;
        PropertySerializerMap propertyserializermap;
        TypeSerializer typeserializer;
        propertyserializermap = _dynamicSerializers;
        typeserializer = _valueTypeSerializer;
        i = 0;
_L7:
        int j = i;
        Object obj1 = iterator.next();
        if (obj1 != null) goto _L6; else goto _L5
_L5:
        j = i;
        serializerprovider.defaultSerializeNull(jsongenerator);
        Object obj = propertyserializermap;
_L12:
        j = i + 1;
        propertyserializermap = ((PropertySerializerMap) (obj));
        i = j;
        if (iterator.hasNext()) goto _L7; else goto _L4
_L6:
        j = i;
        Class class1 = obj1.getClass();
        j = i;
        JsonSerializer jsonserializer1 = propertyserializermap.serializerFor(class1);
        JsonSerializer jsonserializer;
        obj = propertyserializermap;
        jsonserializer = jsonserializer1;
        if (jsonserializer1 != null) goto _L9; else goto _L8
_L8:
        j = i;
        if (!_elementType.hasGenericTypes()) goto _L11; else goto _L10
_L10:
        j = i;
        obj = _findAndAddDynamic(propertyserializermap, serializerprovider.constructSpecializedType(_elementType, class1), serializerprovider);
_L13:
        j = i;
        propertyserializermap = _dynamicSerializers;
        jsonserializer = ((JsonSerializer) (obj));
        obj = propertyserializermap;
_L9:
        if (typeserializer != null)
            break MISSING_BLOCK_LABEL_254;
        j = i;
        jsonserializer.serialize(obj1, jsongenerator, serializerprovider);
          goto _L12
        jsongenerator;
        wrapAndThrow(serializerprovider, jsongenerator, collection, j);
          goto _L4
_L11:
        j = i;
        obj = _findAndAddDynamic(propertyserializermap, class1, serializerprovider);
          goto _L13
        j = i;
        jsonserializer.serializeWithType(obj1, jsongenerator, serializerprovider, typeserializer);
          goto _L12
    }

    public void serializeContentsUsing(Collection collection, JsonGenerator jsongenerator, SerializerProvider serializerprovider, JsonSerializer jsonserializer) {
        Iterator iterator = collection.iterator();
        if (!iterator.hasNext()) goto _L2; else goto _L1
_L1:
        int i;
        TypeSerializer typeserializer;
        typeserializer = _valueTypeSerializer;
        i = 0;
_L5:
        Object obj = iterator.next();
        if (obj != null) goto _L4; else goto _L3
_L3:
        serializerprovider.defaultSerializeNull(jsongenerator);
_L6:
        i++;
_L7:
        if (iterator.hasNext()) goto _L5; else goto _L2
_L2:
        return;
_L4:
        if (typeserializer != null)
            break MISSING_BLOCK_LABEL_92;
        jsonserializer.serialize(obj, jsongenerator, serializerprovider);
          goto _L6
        obj;
        wrapAndThrow(serializerprovider, ((Throwable) (obj)), collection, i);
          goto _L7
        jsonserializer.serializeWithType(obj, jsongenerator, serializerprovider, typeserializer);
          goto _L6
    }

    public volatile AsArraySerializerBase withResolved(BeanProperty beanproperty, TypeSerializer typeserializer, JsonSerializer jsonserializer, Boolean boolean1) {
        return withResolved(beanproperty, typeserializer, jsonserializer, boolean1);
    }

    public CollectionSerializer withResolved(BeanProperty beanproperty, TypeSerializer typeserializer, JsonSerializer jsonserializer, Boolean boolean1) {
        return new CollectionSerializer(this, beanproperty, typeserializer, jsonserializer, boolean1);
    }
}
