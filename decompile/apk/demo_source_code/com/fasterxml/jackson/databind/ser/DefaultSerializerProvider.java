// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser;

import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsonschema.JsonSchema;
import com.fasterxml.jackson.databind.jsonschema.SchemaAware;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;
import com.fasterxml.jackson.databind.util.ClassUtil;
import java.io.IOException;
import java.io.Serializable;
import java.util.*;
import java.util.concurrent.atomic.AtomicReference;

// Referenced classes of package com.fasterxml.jackson.databind.ser:
//            SerializerCache, SerializerFactory

public abstract class DefaultSerializerProvider extends SerializerProvider
    implements Serializable {
    public static final class Impl extends DefaultSerializerProvider {

        private static final long serialVersionUID = 1L;

        public DefaultSerializerProvider copy() {
            Object obj;
            if (getClass() != com/fasterxml/jackson/databind/ser/DefaultSerializerProvider$Impl)
                obj = copy();
            else
                obj = new Impl(this);
            return ((DefaultSerializerProvider) (obj));
        }

        public Impl createInstance(SerializationConfig serializationconfig, SerializerFactory serializerfactory) {
            return new Impl(this, serializationconfig, serializerfactory);
        }

        public volatile DefaultSerializerProvider createInstance(SerializationConfig serializationconfig, SerializerFactory serializerfactory) {
            return createInstance(serializationconfig, serializerfactory);
        }

        public Impl() {
        }

        protected Impl(SerializerProvider serializerprovider, SerializationConfig serializationconfig, SerializerFactory serializerfactory) {
            super(serializerprovider, serializationconfig, serializerfactory);
        }

        public Impl(Impl impl) {
            super(impl);
        }
    }


    private static final long serialVersionUID = 1L;
    protected transient ArrayList _objectIdGenerators;
    protected transient Map _seenObjectIds;

    protected DefaultSerializerProvider() {
    }

    protected DefaultSerializerProvider(SerializerProvider serializerprovider, SerializationConfig serializationconfig, SerializerFactory serializerfactory) {
        super(serializerprovider, serializationconfig, serializerfactory);
    }

    protected DefaultSerializerProvider(DefaultSerializerProvider defaultserializerprovider) {
        super(defaultserializerprovider);
    }

    protected Map _createObjectIdMap() {
        Object obj;
        if (isEnabled(SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID))
            obj = new HashMap();
        else
            obj = new IdentityHashMap();
        return ((Map) (obj));
    }

    protected void _serializeNull(JsonGenerator jsongenerator) {
        JsonSerializer jsonserializer = getDefaultNullValueSerializer();
        try {
            jsonserializer.serialize(null, jsongenerator, this);
            return;
        }
        // Misplaced declaration of an exception variable
        catch (JsonGenerator jsongenerator) {
            throw jsongenerator;
        }
        catch (Exception exception) {
            String s1 = exception.getMessage();
            String s = s1;
            if (s1 == null)
                s = (new StringBuilder()).append("[no message for ").append(exception.getClass().getName()).append("]").toString();
            throw JsonMappingException.from(jsongenerator, s, exception);
        }
    }

    public void acceptJsonFormatVisitor(JavaType javatype, JsonFormatVisitorWrapper jsonformatvisitorwrapper) {
        if (javatype == null) {
            throw new IllegalArgumentException("A class must be provided");
        } else {
            jsonformatvisitorwrapper.setProvider(this);
            findValueSerializer(javatype, null).acceptJsonFormatVisitor(jsonformatvisitorwrapper, javatype);
            return;
        }
    }

    public int cachedSerializersCount() {
        return _serializerCache.size();
    }

    public DefaultSerializerProvider copy() {
        throw new IllegalStateException("DefaultSerializerProvider sub-class not overriding copy()");
    }

    public abstract DefaultSerializerProvider createInstance(SerializationConfig serializationconfig, SerializerFactory serializerfactory);

    public WritableObjectId findObjectId(Object obj, ObjectIdGenerator objectidgenerator) {
        if (_seenObjectIds != null) goto _L2; else goto _L1
_L1:
        _seenObjectIds = _createObjectIdMap();
_L6:
        if (_objectIdGenerators != null) goto _L4; else goto _L3
_L3:
        Object obj1;
        _objectIdGenerators = new ArrayList(8);
        obj1 = null;
_L9:
        ObjectIdGenerator objectidgenerator1 = ((ObjectIdGenerator) (obj1));
        if (obj1 == null) {
            objectidgenerator1 = objectidgenerator.newForSerialization(this);
            _objectIdGenerators.add(objectidgenerator1);
        }
        objectidgenerator = new WritableObjectId(objectidgenerator1);
        _seenObjectIds.put(obj, objectidgenerator);
        obj = objectidgenerator;
_L7:
        return ((WritableObjectId) (obj));
_L2:
        obj1 = (WritableObjectId)_seenObjectIds.get(obj);
        if (obj1 == null) goto _L6; else goto _L5
_L5:
        obj = obj1;
          goto _L7
          goto _L6
_L4:
        int i;
        int j;
        j = _objectIdGenerators.size();
        i = 0;
_L10:
        ObjectIdGenerator objectidgenerator2;
        if (i >= j)
            break MISSING_BLOCK_LABEL_165;
        objectidgenerator2 = (ObjectIdGenerator)_objectIdGenerators.get(i);
        obj1 = objectidgenerator2;
        if (objectidgenerator2.canUseFor(objectidgenerator)) goto _L9; else goto _L8
_L8:
        i++;
          goto _L10
        obj1 = null;
          goto _L9
    }

    public void flushCachedSerializers() {
        _serializerCache.flush();
    }

    public JsonSchema generateJsonSchema(Class class1) {
        if (class1 == null)
            throw new IllegalArgumentException("A class must be provided");
        Object obj = findValueSerializer(class1, null);
        if (obj instanceof SchemaAware)
            obj = ((SchemaAware)obj).getSchema(this, null);
        else
            obj = JsonSchema.getDefaultSchemaNode();
        if (!(obj instanceof ObjectNode))
            throw new IllegalArgumentException((new StringBuilder()).append("Class ").append(class1.getName()).append(" would not be serialized as a JSON object and therefore has no schema").toString());
        else
            return new JsonSchema((ObjectNode)obj);
    }

    public boolean hasSerializerFor(Class class1, AtomicReference atomicreference) {
        boolean flag = true;
        if (class1 != java/lang/Object || _config.isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        class1 = _findExplicitUntypedSerializer(class1);
        if (class1 == null)
            flag = false;
          goto _L1
        class1;
        if (atomicreference != null)
            atomicreference.set(class1);
_L3:
        flag = false;
          goto _L1
        class1;
        if (atomicreference == null)
            throw class1;
        atomicreference.set(class1);
          goto _L3
    }

    public void serializePolymorphic(JsonGenerator jsongenerator, Object obj, JavaType javatype, JsonSerializer jsonserializer, TypeSerializer typeserializer) {
        if (obj != null) goto _L2; else goto _L1
_L1:
        _serializeNull(jsongenerator);
_L4:
        return;
_L2:
        if (javatype != null && !javatype.getRawClass().isAssignableFrom(obj.getClass()))
            _reportIncompatibleRootType(obj, javatype);
        JsonSerializer jsonserializer1 = jsonserializer;
        boolean flag;
        if (jsonserializer == null)
            if (javatype != null && javatype.isContainerType())
                jsonserializer1 = findValueSerializer(javatype, null);
            else
                jsonserializer1 = findValueSerializer(obj.getClass(), null);
        javatype = _config.getFullRootName();
        if (javatype == null) {
            boolean flag1 = _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);
            flag = flag1;
            if (flag1) {
                jsongenerator.writeStartObject();
                jsongenerator.writeFieldName(_config.findRootName(obj.getClass()).simpleAsEncoded(_config));
                flag = flag1;
            }
        } else
        if (javatype.isEmpty()) {
            flag = false;
        } else {
            flag = true;
            jsongenerator.writeStartObject();
            jsongenerator.writeFieldName(javatype.getSimpleName());
        }
        jsonserializer1.serializeWithType(obj, jsongenerator, this, typeserializer);
        if (flag)
            try {
                jsongenerator.writeEndObject();
            }
            // Misplaced declaration of an exception variable
            catch (JsonGenerator jsongenerator) {
                throw jsongenerator;
            }
            // Misplaced declaration of an exception variable
            catch (JsonSerializer jsonserializer) {
                javatype = jsonserializer.getMessage();
                obj = javatype;
                if (javatype == null)
                    obj = (new StringBuilder()).append("[no message for ").append(jsonserializer.getClass().getName()).append("]").toString();
                throw JsonMappingException.from(jsongenerator, ((String) (obj)), jsonserializer);
            }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void serializePolymorphic(JsonGenerator jsongenerator, Object obj, TypeSerializer typeserializer) {
        JavaType javatype;
        if (obj == null)
            javatype = null;
        else
            javatype = _config.constructType(obj.getClass());
        serializePolymorphic(jsongenerator, obj, javatype, null, typeserializer);
    }

    public void serializeValue(JsonGenerator jsongenerator, Object obj) {
        boolean flag = true;
        if (obj != null) goto _L2; else goto _L1
_L1:
        _serializeNull(jsongenerator);
_L4:
        return;
_L2:
        JsonSerializer jsonserializer = findTypedValueSerializer(obj.getClass(), true, null);
        PropertyName propertyname = _config.getFullRootName();
        if (propertyname == null) {
            boolean flag1 = _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);
            flag = flag1;
            if (flag1) {
                jsongenerator.writeStartObject();
                jsongenerator.writeFieldName(_config.findRootName(obj.getClass()).simpleAsEncoded(_config));
                flag = flag1;
            }
        } else
        if (propertyname.isEmpty()) {
            flag = false;
        } else {
            jsongenerator.writeStartObject();
            jsongenerator.writeFieldName(propertyname.getSimpleName());
        }
        jsonserializer.serialize(obj, jsongenerator, this);
        if (flag)
            try {
                jsongenerator.writeEndObject();
            }
            // Misplaced declaration of an exception variable
            catch (JsonGenerator jsongenerator) {
                throw jsongenerator;
            }
            catch (Exception exception) {
                String s = exception.getMessage();
                obj = s;
                if (s == null)
                    obj = (new StringBuilder()).append("[no message for ").append(exception.getClass().getName()).append("]").toString();
                throw new JsonMappingException(jsongenerator, ((String) (obj)), exception);
            }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void serializeValue(JsonGenerator jsongenerator, Object obj, JavaType javatype) {
        boolean flag = true;
        if (obj != null) goto _L2; else goto _L1
_L1:
        _serializeNull(jsongenerator);
_L4:
        return;
_L2:
        if (!javatype.getRawClass().isAssignableFrom(obj.getClass()))
            _reportIncompatibleRootType(obj, javatype);
        JsonSerializer jsonserializer = findTypedValueSerializer(javatype, true, null);
        javatype = _config.getFullRootName();
        if (javatype == null) {
            boolean flag1 = _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);
            flag = flag1;
            if (flag1) {
                jsongenerator.writeStartObject();
                jsongenerator.writeFieldName(_config.findRootName(obj.getClass()).simpleAsEncoded(_config));
                flag = flag1;
            }
        } else
        if (javatype.isEmpty()) {
            flag = false;
        } else {
            jsongenerator.writeStartObject();
            jsongenerator.writeFieldName(javatype.getSimpleName());
        }
        jsonserializer.serialize(obj, jsongenerator, this);
        if (flag)
            try {
                jsongenerator.writeEndObject();
            }
            // Misplaced declaration of an exception variable
            catch (JsonGenerator jsongenerator) {
                throw jsongenerator;
            }
            catch (Exception exception) {
                javatype = exception.getMessage();
                obj = javatype;
                if (javatype == null)
                    obj = (new StringBuilder()).append("[no message for ").append(exception.getClass().getName()).append("]").toString();
                throw JsonMappingException.from(jsongenerator, ((String) (obj)), exception);
            }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void serializeValue(JsonGenerator jsongenerator, Object obj, JavaType javatype, JsonSerializer jsonserializer) {
        boolean flag = true;
        if (obj != null) goto _L2; else goto _L1
_L1:
        _serializeNull(jsongenerator);
_L4:
        return;
_L2:
        if (javatype != null && !javatype.getRawClass().isAssignableFrom(obj.getClass()))
            _reportIncompatibleRootType(obj, javatype);
        JsonSerializer jsonserializer1 = jsonserializer;
        if (jsonserializer == null)
            jsonserializer1 = findTypedValueSerializer(javatype, true, null);
        jsonserializer = _config.getFullRootName();
        if (jsonserializer == null) {
            flag = _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);
            if (flag) {
                jsongenerator.writeStartObject();
                if (javatype == null)
                    javatype = _config.findRootName(obj.getClass());
                else
                    javatype = _config.findRootName(javatype);
                jsongenerator.writeFieldName(javatype.simpleAsEncoded(_config));
            }
        } else
        if (jsonserializer.isEmpty()) {
            flag = false;
        } else {
            jsongenerator.writeStartObject();
            jsongenerator.writeFieldName(jsonserializer.getSimpleName());
        }
        jsonserializer1.serialize(obj, jsongenerator, this);
        if (flag)
            try {
                jsongenerator.writeEndObject();
            }
            // Misplaced declaration of an exception variable
            catch (JsonGenerator jsongenerator) {
                throw jsongenerator;
            }
            // Misplaced declaration of an exception variable
            catch (JsonSerializer jsonserializer) {
                javatype = jsonserializer.getMessage();
                obj = javatype;
                if (javatype == null)
                    obj = (new StringBuilder()).append("[no message for ").append(jsonserializer.getClass().getName()).append("]").toString();
                throw JsonMappingException.from(jsongenerator, ((String) (obj)), jsonserializer);
            }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public JsonSerializer serializerInstance(Annotated annotated, Object obj) {
        Object obj1;
        Object obj2;
        obj1 = null;
        obj2 = null;
        if (obj != null) goto _L2; else goto _L1
_L1:
        obj = obj2;
_L4:
        return ((JsonSerializer) (obj));
_L2:
        if (!(obj instanceof JsonSerializer))
            break; /* Loop/switch isn't completed */
        annotated = (JsonSerializer)obj;
_L7:
        obj = _handleResolvable(annotated);
        if (true) goto _L4; else goto _L3
_L3:
        Class class1;
        if (!(obj instanceof Class))
            throw new IllegalStateException((new StringBuilder()).append("AnnotationIntrospector returned serializer definition of type ").append(obj.getClass().getName()).append("; expected type JsonSerializer or Class<JsonSerializer> instead").toString());
        class1 = (Class)obj;
        obj = obj2;
        if (class1 == com/fasterxml/jackson/databind/JsonSerializer$None) goto _L4; else goto _L5
_L5:
        obj = obj2;
        if (ClassUtil.isBogusClass(class1)) goto _L4; else goto _L6
_L6:
        if (!com/fasterxml/jackson/databind/JsonSerializer.isAssignableFrom(class1))
            throw new IllegalStateException((new StringBuilder()).append("AnnotationIntrospector returned Class ").append(class1.getName()).append("; expected Class<JsonSerializer>").toString());
        obj = _config.getHandlerInstantiator();
        if (obj == null)
            annotated = obj1;
        else
            annotated = ((HandlerInstantiator) (obj)).serializerInstance(_config, annotated, class1);
        if (annotated == null)
            annotated = (JsonSerializer)ClassUtil.createInstance(class1, _config.canOverrideAccessModifiers());
          goto _L7
    }
}
