// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.impl;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.ContainerSerializer;
import com.fasterxml.jackson.databind.ser.ContextualSerializer;
import com.fasterxml.jackson.databind.ser.std.ArraySerializerBase;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.lang.reflect.Type;

public class StringArraySerializer extends ArraySerializerBase
    implements ContextualSerializer {

    private static final JavaType VALUE_TYPE = TypeFactory.defaultInstance().uncheckedSimpleType(java/lang/String);
    public static final StringArraySerializer instance = new StringArraySerializer();
    protected final JsonSerializer _elementSerializer;

    protected StringArraySerializer() {
        super([Ljava/lang/String;);
        _elementSerializer = null;
    }

    public StringArraySerializer(StringArraySerializer stringarrayserializer, BeanProperty beanproperty, JsonSerializer jsonserializer, Boolean boolean1) {
        super(stringarrayserializer, beanproperty, boolean1);
        _elementSerializer = jsonserializer;
    }

    private void serializeContentsSlow(String as[], JsonGenerator jsongenerator, SerializerProvider serializerprovider, JsonSerializer jsonserializer) {
        int i = 0;
        int j = as.length;
        while (i < j)  {
            if (as[i] == null)
                serializerprovider.defaultSerializeNull(jsongenerator);
            else
                jsonserializer.serialize(as[i], jsongenerator, serializerprovider);
            i++;
        }
    }

    public JsonSerializer _withResolved(BeanProperty beanproperty, Boolean boolean1) {
        return new StringArraySerializer(this, beanproperty, _elementSerializer, boolean1);
    }

    public ContainerSerializer _withValueTypeSerializer(TypeSerializer typeserializer) {
        return this;
    }

    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
        visitArrayFormat(jsonformatvisitorwrapper, javatype, JsonFormatTypes.STRING);
    }

    public JsonSerializer createContextual(SerializerProvider serializerprovider, BeanProperty beanproperty) {
        Object obj2 = null;
        if (beanproperty == null) goto _L2; else goto _L1
_L1:
        Object obj;
        Object obj1;
        obj1 = serializerprovider.getAnnotationIntrospector();
        obj = beanproperty.getMember();
        if (obj == null) goto _L2; else goto _L3
_L3:
        obj1 = ((AnnotationIntrospector) (obj1)).findContentSerializer(((com.fasterxml.jackson.databind.introspect.Annotated) (obj)));
        if (obj1 == null) goto _L2; else goto _L4
_L4:
        obj = serializerprovider.serializerInstance(((com.fasterxml.jackson.databind.introspect.Annotated) (obj)), obj1);
_L6:
        Boolean boolean1 = findFormatFeature(serializerprovider, beanproperty, [Ljava/lang/String;, com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED);
        JsonSerializer jsonserializer = ((JsonSerializer) (obj));
        if (obj == null)
            jsonserializer = _elementSerializer;
        obj = findConvertingContentSerializer(serializerprovider, beanproperty, jsonserializer);
        if (obj == null)
            serializerprovider = serializerprovider.findValueSerializer(java/lang/String, beanproperty);
        else
            serializerprovider = serializerprovider.handleSecondaryContextualization(((JsonSerializer) (obj)), beanproperty);
        if (isDefaultSerializer(serializerprovider))
            serializerprovider = obj2;
        if (serializerprovider == _elementSerializer && boolean1 == _unwrapSingle)
            serializerprovider = this;
        else
            serializerprovider = new StringArraySerializer(this, beanproperty, serializerprovider, boolean1);
        return serializerprovider;
_L2:
        obj = null;
        if (true) goto _L6; else goto _L5
_L5:
    }

    public JsonSerializer getContentSerializer() {
        return _elementSerializer;
    }

    public JavaType getContentType() {
        return VALUE_TYPE;
    }

    public JsonNode getSchema(SerializerProvider serializerprovider, Type type) {
        return createSchemaNode("array", true).set("items", createSchemaNode("string"));
    }

    public volatile boolean hasSingleElement(Object obj) {
        return hasSingleElement((String[])obj);
    }

    public boolean hasSingleElement(String as[]) {
        boolean flag = true;
        if (as.length != 1)
            flag = false;
        return flag;
    }

    public volatile boolean isEmpty(SerializerProvider serializerprovider, Object obj) {
        return isEmpty(serializerprovider, (String[])obj);
    }

    public boolean isEmpty(SerializerProvider serializerprovider, String as[]) {
        boolean flag;
        if (as == null || as.length == 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public volatile void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        serialize((String[])obj, jsongenerator, serializerprovider);
    }

    public final void serialize(String as[], JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        int i = as.length;
        if (i == 1 && (_unwrapSingle == null && serializerprovider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED) || _unwrapSingle == Boolean.TRUE)) {
            serializeContents(as, jsongenerator, serializerprovider);
        } else {
            jsongenerator.writeStartArray(i);
            serializeContents(as, jsongenerator, serializerprovider);
            jsongenerator.writeEndArray();
        }
    }

    public volatile void serializeContents(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        serializeContents((String[])obj, jsongenerator, serializerprovider);
    }

    public void serializeContents(String as[], JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        int j = as.length;
        if (j != 0) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (_elementSerializer == null)
            break; /* Loop/switch isn't completed */
        serializeContentsSlow(as, jsongenerator, serializerprovider, _elementSerializer);
        if (true) goto _L1; else goto _L3
_L3:
        int i = 0;
        while (i < j)  {
            if (as[i] == null)
                jsongenerator.writeNull();
            else
                jsongenerator.writeString(as[i]);
            i++;
        }
        if (true) goto _L1; else goto _L4
_L4:
    }

}
