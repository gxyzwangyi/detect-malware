// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.std;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.ContextualSerializer;
import com.fasterxml.jackson.databind.util.EnumValues;
import java.lang.reflect.Type;
import java.util.*;

// Referenced classes of package com.fasterxml.jackson.databind.ser.std:
//            StdScalarSerializer

public class EnumSerializer extends StdScalarSerializer
    implements ContextualSerializer {

    private static final long serialVersionUID = 1L;
    protected final Boolean _serializeAsIndex;
    protected final EnumValues _values;

    public EnumSerializer(EnumValues enumvalues) {
        this(enumvalues, null);
    }

    public EnumSerializer(EnumValues enumvalues, Boolean boolean1) {
        super(enumvalues.getEnumClass(), false);
        _values = enumvalues;
        _serializeAsIndex = boolean1;
    }

    protected static Boolean _isShapeWrittenUsingIndex(Class class1, com.fasterxml.jackson.annotation.JsonFormat.Value value, boolean flag) {
        com.fasterxml.jackson.annotation.JsonFormat.Shape shape;
        Object obj;
        obj = null;
        if (value == null)
            shape = null;
        else
            shape = value.getShape();
        if (shape != null) goto _L2; else goto _L1
_L1:
        value = obj;
_L4:
        return value;
_L2:
        value = obj;
        if (shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.ANY)
            continue; /* Loop/switch isn't completed */
        value = obj;
        if (shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.SCALAR)
            continue; /* Loop/switch isn't completed */
        if (shape == com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING) {
            value = Boolean.FALSE;
            continue; /* Loop/switch isn't completed */
        }
        if (!shape.isNumeric() && shape != com.fasterxml.jackson.annotation.JsonFormat.Shape.ARRAY)
            break; /* Loop/switch isn't completed */
        value = Boolean.TRUE;
        if (true) goto _L4; else goto _L3
_L3:
        value = (new StringBuilder()).append("Unsupported serialization shape (").append(shape).append(") for Enum ").append(class1.getName()).append(", not supported as ");
        if (flag)
            class1 = "class";
        else
            class1 = "property";
        throw new IllegalArgumentException(value.append(class1).append(" annotation").toString());
    }

    public static EnumSerializer construct(Class class1, SerializationConfig serializationconfig, BeanDescription beandescription, com.fasterxml.jackson.annotation.JsonFormat.Value value) {
        return new EnumSerializer(EnumValues.constructFromName(serializationconfig, class1), _isShapeWrittenUsingIndex(class1, value, true));
    }

    protected final boolean _serializeAsIndex(SerializerProvider serializerprovider) {
        boolean flag;
        if (_serializeAsIndex != null)
            flag = _serializeAsIndex.booleanValue();
        else
            flag = serializerprovider.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX);
        return flag;
    }

    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
        SerializerProvider serializerprovider = jsonformatvisitorwrapper.getProvider();
        if (!_serializeAsIndex(serializerprovider)) goto _L2; else goto _L1
_L1:
        visitIntFormat(jsonformatvisitorwrapper, javatype, com.fasterxml.jackson.core.JsonParser.NumberType.INT);
_L4:
        return;
_L2:
        javatype = jsonformatvisitorwrapper.expectStringFormat(javatype);
        if (javatype != null) {
            jsonformatvisitorwrapper = new LinkedHashSet();
            if (serializerprovider != null && serializerprovider.isEnabled(SerializationFeature.WRITE_ENUMS_USING_TO_STRING)) {
                for (Iterator iterator = _values.enums().iterator(); iterator.hasNext(); jsonformatvisitorwrapper.add(((Enum)iterator.next()).toString()));
            } else {
                for (Iterator iterator1 = _values.values().iterator(); iterator1.hasNext(); jsonformatvisitorwrapper.add(((SerializableString)iterator1.next()).getValue()));
            }
            javatype.enumTypes(jsonformatvisitorwrapper);
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public JsonSerializer createContextual(SerializerProvider serializerprovider, BeanProperty beanproperty) {
        EnumSerializer enumserializer = this;
        if (beanproperty != null) {
            serializerprovider = serializerprovider.getAnnotationIntrospector().findFormat(beanproperty.getMember());
            enumserializer = this;
            if (serializerprovider != null) {
                serializerprovider = _isShapeWrittenUsingIndex(beanproperty.getType().getRawClass(), serializerprovider, false);
                enumserializer = this;
                if (serializerprovider != _serializeAsIndex)
                    enumserializer = new EnumSerializer(_values, serializerprovider);
            }
        }
        return enumserializer;
    }

    public EnumValues getEnumValues() {
        return _values;
    }

    public JsonNode getSchema(SerializerProvider serializerprovider, Type type) {
        if (_serializeAsIndex(serializerprovider)) {
            serializerprovider = createSchemaNode("integer", true);
        } else {
            ObjectNode objectnode = createSchemaNode("string", true);
            if (type != null && serializerprovider.constructType(type).isEnumType()) {
                type = objectnode.putArray("enum");
                for (serializerprovider = _values.values().iterator(); serializerprovider.hasNext(); type.add(((SerializableString)serializerprovider.next()).getValue()));
            }
            serializerprovider = objectnode;
        }
        return serializerprovider;
    }

    public final void serialize(Enum enum, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        if (_serializeAsIndex(serializerprovider))
            jsongenerator.writeNumber(enum.ordinal());
        else
        if (serializerprovider.isEnabled(SerializationFeature.WRITE_ENUMS_USING_TO_STRING))
            jsongenerator.writeString(enum.toString());
        else
            jsongenerator.writeString(_values.serializedValueFor(enum));
    }

    public volatile void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        serialize((Enum)obj, jsongenerator, serializerprovider);
    }
}
