// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.std;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonMapFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.*;
import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.ArrayBuilders;
import java.lang.reflect.Type;
import java.util.*;

// Referenced classes of package com.fasterxml.jackson.databind.ser.std:
//            MapProperty

public class MapSerializer extends ContainerSerializer
    implements ContextualSerializer {

    protected static final JavaType UNSPECIFIED_TYPE = TypeFactory.unknownType();
    private static final long serialVersionUID = 1L;
    protected PropertySerializerMap _dynamicValueSerializers;
    protected final Object _filterId;
    protected final HashSet _ignoredEntries;
    protected JsonSerializer _keySerializer;
    protected final JavaType _keyType;
    protected final BeanProperty _property;
    protected final boolean _sortKeys;
    protected final Object _suppressableValue;
    protected JsonSerializer _valueSerializer;
    protected final JavaType _valueType;
    protected final boolean _valueTypeIsStatic;
    protected final TypeSerializer _valueTypeSerializer;

    protected MapSerializer(MapSerializer mapserializer, BeanProperty beanproperty, JsonSerializer jsonserializer, JsonSerializer jsonserializer1, HashSet hashset) {
        super(java/util/Map, false);
        _ignoredEntries = hashset;
        _keyType = mapserializer._keyType;
        _valueType = mapserializer._valueType;
        _valueTypeIsStatic = mapserializer._valueTypeIsStatic;
        _valueTypeSerializer = mapserializer._valueTypeSerializer;
        _keySerializer = jsonserializer;
        _valueSerializer = jsonserializer1;
        _dynamicValueSerializers = mapserializer._dynamicValueSerializers;
        _property = beanproperty;
        _filterId = mapserializer._filterId;
        _sortKeys = mapserializer._sortKeys;
        _suppressableValue = mapserializer._suppressableValue;
    }

    protected MapSerializer(MapSerializer mapserializer, TypeSerializer typeserializer) {
        this(mapserializer, typeserializer, mapserializer._suppressableValue);
    }

    protected MapSerializer(MapSerializer mapserializer, TypeSerializer typeserializer, Object obj) {
        super(java/util/Map, false);
        _ignoredEntries = mapserializer._ignoredEntries;
        _keyType = mapserializer._keyType;
        _valueType = mapserializer._valueType;
        _valueTypeIsStatic = mapserializer._valueTypeIsStatic;
        _valueTypeSerializer = typeserializer;
        _keySerializer = mapserializer._keySerializer;
        _valueSerializer = mapserializer._valueSerializer;
        _dynamicValueSerializers = mapserializer._dynamicValueSerializers;
        _property = mapserializer._property;
        _filterId = mapserializer._filterId;
        _sortKeys = mapserializer._sortKeys;
        if (obj == com.fasterxml.jackson.annotation.JsonInclude.Include.NON_ABSENT) {
            if (_valueType.isReferenceType())
                mapserializer = com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY;
            else
                mapserializer = com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
        } else {
            mapserializer = ((MapSerializer) (obj));
        }
        _suppressableValue = mapserializer;
    }

    protected MapSerializer(MapSerializer mapserializer, Object obj, boolean flag) {
        super(java/util/Map, false);
        _ignoredEntries = mapserializer._ignoredEntries;
        _keyType = mapserializer._keyType;
        _valueType = mapserializer._valueType;
        _valueTypeIsStatic = mapserializer._valueTypeIsStatic;
        _valueTypeSerializer = mapserializer._valueTypeSerializer;
        _keySerializer = mapserializer._keySerializer;
        _valueSerializer = mapserializer._valueSerializer;
        _dynamicValueSerializers = mapserializer._dynamicValueSerializers;
        _property = mapserializer._property;
        _filterId = obj;
        _sortKeys = flag;
        _suppressableValue = mapserializer._suppressableValue;
    }

    protected MapSerializer(HashSet hashset, JavaType javatype, JavaType javatype1, boolean flag, TypeSerializer typeserializer, JsonSerializer jsonserializer, JsonSerializer jsonserializer1) {
        super(java/util/Map, false);
        _ignoredEntries = hashset;
        _keyType = javatype;
        _valueType = javatype1;
        _valueTypeIsStatic = flag;
        _valueTypeSerializer = typeserializer;
        _keySerializer = jsonserializer;
        _valueSerializer = jsonserializer1;
        _dynamicValueSerializers = PropertySerializerMap.emptyForProperties();
        _property = null;
        _filterId = null;
        _sortKeys = false;
        _suppressableValue = null;
    }

    public static MapSerializer construct(String as[], JavaType javatype, boolean flag, TypeSerializer typeserializer, JsonSerializer jsonserializer, JsonSerializer jsonserializer1, Object obj) {
        boolean flag1 = false;
        JavaType javatype1;
        if (as == null || as.length == 0)
            as = null;
        else
            as = ArrayBuilders.arrayToSet(as);
        if (javatype == null) {
            javatype = UNSPECIFIED_TYPE;
            javatype1 = javatype;
        } else {
            javatype1 = javatype.getKeyType();
            javatype = javatype.getContentType();
        }
        if (flag) goto _L2; else goto _L1
_L1:
        flag = flag1;
        if (javatype != null) {
            flag = flag1;
            if (javatype.isFinal())
                flag = true;
        }
_L4:
        javatype = new MapSerializer(as, javatype1, javatype, flag, typeserializer, jsonserializer, jsonserializer1);
        as = javatype;
        if (obj != null)
            as = javatype.withFilterId(obj);
        return as;
_L2:
        if (javatype.getRawClass() == java/lang/Object)
            flag = false;
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected void _ensureOverride() {
        if (getClass() != com/fasterxml/jackson/databind/ser/std/MapSerializer)
            throw new IllegalStateException((new StringBuilder()).append("Missing override in class ").append(getClass().getName()).toString());
        else
            return;
    }

    protected final JsonSerializer _findAndAddDynamic(PropertySerializerMap propertyserializermap, JavaType javatype, SerializerProvider serializerprovider) {
        javatype = propertyserializermap.findAndAddSecondarySerializer(javatype, serializerprovider, _property);
        if (propertyserializermap != ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (javatype)).map)
            _dynamicValueSerializers = ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (javatype)).map;
        return ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (javatype)).serializer;
    }

    protected final JsonSerializer _findAndAddDynamic(PropertySerializerMap propertyserializermap, Class class1, SerializerProvider serializerprovider) {
        class1 = propertyserializermap.findAndAddSecondarySerializer(class1, serializerprovider, _property);
        if (propertyserializermap != ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (class1)).map)
            _dynamicValueSerializers = ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (class1)).map;
        return ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (class1)).serializer;
    }

    protected Map _orderEntries(Map map) {
        if (!(map instanceof SortedMap))
            map = new TreeMap(map);
        return map;
    }

    public volatile ContainerSerializer _withValueTypeSerializer(TypeSerializer typeserializer) {
        return _withValueTypeSerializer(typeserializer);
    }

    public MapSerializer _withValueTypeSerializer(TypeSerializer typeserializer) {
        if (_valueTypeSerializer == typeserializer) {
            typeserializer = this;
        } else {
            _ensureOverride();
            typeserializer = new MapSerializer(this, typeserializer, null);
        }
        return typeserializer;
    }

    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
        if (jsonformatvisitorwrapper == null)
            javatype = null;
        else
            javatype = jsonformatvisitorwrapper.expectMapFormat(javatype);
        if (javatype != null) {
            javatype.keyFormat(_keySerializer, _keyType);
            JsonSerializer jsonserializer1 = _valueSerializer;
            JsonSerializer jsonserializer = jsonserializer1;
            if (jsonserializer1 == null)
                jsonserializer = _findAndAddDynamic(_dynamicValueSerializers, _valueType, jsonformatvisitorwrapper.getProvider());
            javatype.valueFormat(jsonserializer, _valueType);
        }
    }

    public JsonSerializer createContextual(SerializerProvider serializerprovider, BeanProperty beanproperty) {
        Object obj = null;
        AnnotationIntrospector annotationintrospector = serializerprovider.getAnnotationIntrospector();
        Object obj1;
        Object obj3;
        Object obj4;
        if (beanproperty == null)
            obj3 = null;
        else
            obj3 = beanproperty.getMember();
        obj4 = _suppressableValue;
        if (obj3 != null && annotationintrospector != null) {
            obj1 = annotationintrospector.findKeySerializer(((com.fasterxml.jackson.databind.introspect.Annotated) (obj3)));
            int i;
            int j;
            boolean flag;
            Object obj2;
            Object obj5;
            String as[];
            if (obj1 != null)
                obj2 = serializerprovider.serializerInstance(((com.fasterxml.jackson.databind.introspect.Annotated) (obj3)), obj1);
            else
                obj2 = null;
            obj5 = annotationintrospector.findContentSerializer(((com.fasterxml.jackson.databind.introspect.Annotated) (obj3)));
            obj1 = obj2;
            if (obj5 != null) {
                obj = serializerprovider.serializerInstance(((com.fasterxml.jackson.databind.introspect.Annotated) (obj3)), obj5);
                obj1 = obj2;
            }
        } else {
            obj1 = null;
        }
        if (beanproperty == null) goto _L2; else goto _L1
_L1:
        obj2 = beanproperty.findPropertyInclusion(serializerprovider.getConfig(), java/util/Map).getContentInclusion();
        if (obj2 == null || obj2 == com.fasterxml.jackson.annotation.JsonInclude.Include.USE_DEFAULTS) goto _L2; else goto _L3
_L3:
        obj4 = obj;
        if (obj == null)
            obj4 = _valueSerializer;
        obj4 = findConvertingContentSerializer(serializerprovider, beanproperty, ((JsonSerializer) (obj4)));
        if (obj4 == null) {
            obj = obj4;
            if (_valueTypeIsStatic) {
                obj = obj4;
                if (!_valueType.isJavaLangObject())
                    obj = serializerprovider.findValueSerializer(_valueType, beanproperty);
            }
        } else {
            obj = serializerprovider.handleSecondaryContextualization(((JsonSerializer) (obj4)), beanproperty);
        }
        if (obj1 == null)
            obj1 = _keySerializer;
        if (obj1 == null)
            obj4 = serializerprovider.findKeySerializer(_keyType, beanproperty);
        else
            obj4 = serializerprovider.handleSecondaryContextualization(((JsonSerializer) (obj1)), beanproperty);
        serializerprovider = _ignoredEntries;
        if (annotationintrospector != null && obj3 != null) {
            as = annotationintrospector.findPropertiesToIgnore(((com.fasterxml.jackson.databind.introspect.Annotated) (obj3)), true);
            if (as != null) {
                if (serializerprovider == null)
                    obj1 = new HashSet();
                else
                    obj1 = new HashSet(serializerprovider);
                j = as.length;
                i = 0;
                do {
                    serializerprovider = ((SerializerProvider) (obj1));
                    if (i >= j)
                        break;
                    ((HashSet) (obj1)).add(as[i]);
                    i++;
                } while (true);
            }
            obj1 = annotationintrospector.findSerializationSortAlphabetically(((com.fasterxml.jackson.databind.introspect.Annotated) (obj3)));
            if (obj1 != null && ((Boolean) (obj1)).booleanValue())
                flag = true;
            else
                flag = false;
        } else {
            flag = false;
        }
        obj = withResolved(beanproperty, ((JsonSerializer) (obj4)), ((JsonSerializer) (obj)), serializerprovider, flag);
        serializerprovider = ((SerializerProvider) (obj));
        if (obj2 != _suppressableValue)
            serializerprovider = ((MapSerializer) (obj)).withContentInclusion(obj2);
        obj = serializerprovider;
        if (beanproperty != null) {
            beanproperty = beanproperty.getMember();
            obj = serializerprovider;
            if (beanproperty != null) {
                beanproperty = ((BeanProperty) (annotationintrospector.findFilterId(beanproperty)));
                obj = serializerprovider;
                if (beanproperty != null)
                    obj = serializerprovider.withFilterId(beanproperty);
            }
        }
        return ((JsonSerializer) (obj));
_L2:
        obj2 = obj4;
        if (true) goto _L3; else goto _L4
_L4:
    }

    public JsonSerializer getContentSerializer() {
        return _valueSerializer;
    }

    public JavaType getContentType() {
        return _valueType;
    }

    public JsonSerializer getKeySerializer() {
        return _keySerializer;
    }

    public JsonNode getSchema(SerializerProvider serializerprovider, Type type) {
        return createSchemaNode("object", true);
    }

    public volatile boolean hasSingleElement(Object obj) {
        return hasSingleElement((Map)obj);
    }

    public boolean hasSingleElement(Map map) {
        boolean flag = true;
        if (map.size() != 1)
            flag = false;
        return flag;
    }

    public volatile boolean isEmpty(SerializerProvider serializerprovider, Object obj) {
        return isEmpty(serializerprovider, (Map)obj);
    }

    public boolean isEmpty(SerializerProvider serializerprovider, Map map) {
        if (map != null && !map.isEmpty()) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        Object obj = _suppressableValue;
        if (obj == null || obj == com.fasterxml.jackson.annotation.JsonInclude.Include.ALWAYS) {
            flag = false;
            continue; /* Loop/switch isn't completed */
        }
        obj = _valueSerializer;
        if (obj != null) {
            for (Iterator iterator = map.values().iterator(); iterator.hasNext();) {
                map = ((Map) (iterator.next()));
                if (map != null && !((JsonSerializer) (obj)).isEmpty(serializerprovider, map)) {
                    flag = false;
                    continue; /* Loop/switch isn't completed */
                }
            }

            flag = true;
            continue; /* Loop/switch isn't completed */
        }
        obj = _dynamicValueSerializers;
        for (Iterator iterator1 = map.values().iterator(); iterator1.hasNext();) {
            Object obj1 = iterator1.next();
            if (obj1 != null) {
                Class class1 = obj1.getClass();
                JsonSerializer jsonserializer = ((PropertySerializerMap) (obj)).serializerFor(class1);
                PropertySerializerMap propertyserializermap = ((PropertySerializerMap) (obj));
                map = jsonserializer;
                if (jsonserializer == null) {
                    try {
                        map = _findAndAddDynamic(((PropertySerializerMap) (obj)), class1, serializerprovider);
                    }
                    // Misplaced declaration of an exception variable
                    catch (SerializerProvider serializerprovider) {
                        flag = false;
                        continue; /* Loop/switch isn't completed */
                    }
                    propertyserializermap = _dynamicValueSerializers;
                }
                obj = propertyserializermap;
                if (!map.isEmpty(serializerprovider, obj1)) {
                    flag = false;
                    continue; /* Loop/switch isn't completed */
                }
            }
        }

        flag = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public volatile void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        serialize((Map)obj, jsongenerator, serializerprovider);
    }

    public void serialize(Map map, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        jsongenerator.writeStartObject();
        jsongenerator.setCurrentValue(map);
        if (!map.isEmpty()) {
            Object obj1 = _suppressableValue;
            Object obj;
            if (obj1 == com.fasterxml.jackson.annotation.JsonInclude.Include.ALWAYS) {
                obj = null;
            } else {
                obj = obj1;
                if (obj1 == null) {
                    obj = obj1;
                    if (!serializerprovider.isEnabled(SerializationFeature.WRITE_NULL_MAP_VALUES))
                        obj = com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
                }
            }
            if (_sortKeys || serializerprovider.isEnabled(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS))
                map = _orderEntries(map);
            if (_filterId != null)
                serializeFilteredFields(map, jsongenerator, serializerprovider, findPropertyFilter(serializerprovider, _filterId, map), obj);
            else
            if (obj != null)
                serializeOptionalFields(map, jsongenerator, serializerprovider, obj);
            else
            if (_valueSerializer != null)
                serializeFieldsUsing(map, jsongenerator, serializerprovider, _valueSerializer);
            else
                serializeFields(map, jsongenerator, serializerprovider);
        }
        jsongenerator.writeEndObject();
    }

    public void serializeFields(Map map, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        if (_valueTypeSerializer == null) goto _L2; else goto _L1
_L1:
        serializeTypedFields(map, jsongenerator, serializerprovider, null);
_L4:
        return;
_L2:
        Object obj1;
        HashSet hashset;
        Iterator iterator;
        JsonSerializer jsonserializer;
        jsonserializer = _keySerializer;
        hashset = _ignoredEntries;
        obj1 = _dynamicValueSerializers;
        iterator = map.entrySet().iterator();
_L7:
        if (!iterator.hasNext()) goto _L4; else goto _L3
_L3:
        Object obj4;
        Object obj5;
        java.util.Map.Entry entry = (java.util.Map.Entry)iterator.next();
        obj5 = entry.getValue();
        obj4 = entry.getKey();
        if (obj4 != null) goto _L6; else goto _L5
_L5:
        serializerprovider.findNullKeySerializer(_keyType, _property).serialize(null, jsongenerator, serializerprovider);
_L9:
        if (obj5 != null)
            break MISSING_BLOCK_LABEL_150;
        serializerprovider.defaultSerializeNull(jsongenerator);
          goto _L7
_L6:
        if (hashset != null && hashset.contains(obj4)) goto _L7; else goto _L8
_L8:
        jsonserializer.serialize(obj4, jsongenerator, serializerprovider);
          goto _L9
        Object obj;
        Object obj2 = _valueSerializer;
        obj = obj2;
        if (obj2 != null)
            break MISSING_BLOCK_LABEL_297;
        Class class1 = obj5.getClass();
        obj2 = ((PropertySerializerMap) (obj1)).serializerFor(class1);
        obj = obj2;
        if (obj2 != null)
            break MISSING_BLOCK_LABEL_297;
        if (_valueType.hasGenericTypes())
            obj = _findAndAddDynamic(((PropertySerializerMap) (obj1)), serializerprovider.constructSpecializedType(_valueType, class1), serializerprovider);
        else
            obj = _findAndAddDynamic(((PropertySerializerMap) (obj1)), class1, serializerprovider);
        obj2 = _dynamicValueSerializers;
        obj1 = obj;
        obj = obj2;
_L10:
        try {
            ((JsonSerializer) (obj1)).serialize(obj5, jsongenerator, serializerprovider);
        }
        // Misplaced declaration of an exception variable
        catch (Object obj1) {
            wrapAndThrow(serializerprovider, ((Throwable) (obj1)), map, (new StringBuilder()).append("").append(obj4).toString());
        }
        obj1 = obj;
          goto _L7
          goto _L4
        Object obj3 = obj;
        obj = obj1;
        obj1 = obj3;
          goto _L10
    }

    public void serializeFieldsUsing(Map map, JsonGenerator jsongenerator, SerializerProvider serializerprovider, JsonSerializer jsonserializer) {
        HashSet hashset;
        Iterator iterator;
        JsonSerializer jsonserializer1;
        TypeSerializer typeserializer;
        jsonserializer1 = _keySerializer;
        hashset = _ignoredEntries;
        typeserializer = _valueTypeSerializer;
        iterator = map.entrySet().iterator();
_L2:
        Object obj1;
        if (!iterator.hasNext())
            break; /* Loop/switch isn't completed */
        obj1 = (java.util.Map.Entry)iterator.next();
        Object obj = ((java.util.Map.Entry) (obj1)).getKey();
        if (hashset != null && hashset.contains(obj))
            continue; /* Loop/switch isn't completed */
        if (obj == null)
            serializerprovider.findNullKeySerializer(_keyType, _property).serialize(null, jsongenerator, serializerprovider);
        else
            jsonserializer1.serialize(obj, jsongenerator, serializerprovider);
        obj1 = ((java.util.Map.Entry) (obj1)).getValue();
        if (obj1 == null) {
            serializerprovider.defaultSerializeNull(jsongenerator);
            continue; /* Loop/switch isn't completed */
        }
        if (typeserializer == null) {
            try {
                jsonserializer.serialize(obj1, jsongenerator, serializerprovider);
            }
            // Misplaced declaration of an exception variable
            catch (Object obj1) {
                wrapAndThrow(serializerprovider, ((Throwable) (obj1)), map, (new StringBuilder()).append("").append(obj).toString());
            }
            continue; /* Loop/switch isn't completed */
        }
        jsonserializer.serializeWithType(obj1, jsongenerator, serializerprovider, typeserializer);
        if (true) goto _L2; else goto _L1
_L1:
    }

    public void serializeFilteredFields(Map map, JsonGenerator jsongenerator, SerializerProvider serializerprovider, PropertyFilter propertyfilter) {
        com.fasterxml.jackson.annotation.JsonInclude.Include include;
        if (serializerprovider.isEnabled(SerializationFeature.WRITE_NULL_MAP_VALUES))
            include = null;
        else
            include = com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
        serializeFilteredFields(map, jsongenerator, serializerprovider, propertyfilter, include);
    }

    public void serializeFilteredFields(Map map, JsonGenerator jsongenerator, SerializerProvider serializerprovider, PropertyFilter propertyfilter, Object obj) {
        Object obj1;
        HashSet hashset;
        MapProperty mapproperty;
        Iterator iterator;
        hashset = _ignoredEntries;
        obj1 = _dynamicValueSerializers;
        mapproperty = new MapProperty(_valueTypeSerializer, _property);
        iterator = map.entrySet().iterator();
_L4:
        if (!iterator.hasNext()) goto _L2; else goto _L1
_L1:
        Object obj2;
        Object obj5;
        obj2 = (java.util.Map.Entry)iterator.next();
        obj5 = ((java.util.Map.Entry) (obj2)).getKey();
        if (hashset != null && hashset.contains(obj5)) goto _L4; else goto _L3
_L3:
        Object obj4;
        Object obj6;
        JsonSerializer jsonserializer;
        if (obj5 == null)
            jsonserializer = serializerprovider.findNullKeySerializer(_keyType, _property);
        else
            jsonserializer = _keySerializer;
        obj6 = ((java.util.Map.Entry) (obj2)).getValue();
        if (obj6 != null) goto _L6; else goto _L5
_L5:
        if (obj != null) goto _L4; else goto _L7
_L7:
        obj4 = serializerprovider.getDefaultNullValueSerializer();
        obj2 = obj1;
_L9:
        Object obj3;
        mapproperty.reset(obj5, jsonserializer, ((JsonSerializer) (obj4)));
        try {
            propertyfilter.serializeAsField(obj6, jsongenerator, serializerprovider, mapproperty);
        }
        catch (Exception exception) {
            wrapAndThrow(serializerprovider, exception, map, (new StringBuilder()).append("").append(obj5).toString());
        }
        obj1 = obj2;
        break; /* Loop/switch isn't completed */
_L6:
        obj3 = _valueSerializer;
        obj2 = obj3;
        if (obj3 != null)
            break MISSING_BLOCK_LABEL_346;
        obj4 = obj6.getClass();
        obj3 = ((PropertySerializerMap) (obj1)).serializerFor(((Class) (obj4)));
        obj2 = obj3;
        if (obj3 != null)
            break MISSING_BLOCK_LABEL_346;
        if (_valueType.hasGenericTypes())
            obj1 = _findAndAddDynamic(((PropertySerializerMap) (obj1)), serializerprovider.constructSpecializedType(_valueType, ((Class) (obj4))), serializerprovider);
        else
            obj1 = _findAndAddDynamic(((PropertySerializerMap) (obj1)), ((Class) (obj4)), serializerprovider);
        obj2 = _dynamicValueSerializers;
        obj3 = obj1;
        obj1 = obj2;
_L10:
        obj2 = obj1;
        obj4 = obj3;
        if (obj != com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY) goto _L9; else goto _L8
_L8:
        obj2 = obj1;
        obj4 = obj3;
        if (!((JsonSerializer) (obj3)).isEmpty(serializerprovider, obj6)) goto _L9; else goto _L4
_L2:
        return;
        obj3 = obj2;
          goto _L10
    }

    public void serializeOptionalFields(Map map, JsonGenerator jsongenerator, SerializerProvider serializerprovider, Object obj) {
        if (_valueTypeSerializer == null) goto _L2; else goto _L1
_L1:
        serializeTypedFields(map, jsongenerator, serializerprovider, obj);
_L4:
        return;
_L2:
        Object obj1;
        Iterator iterator;
        HashSet hashset;
        hashset = _ignoredEntries;
        obj1 = _dynamicValueSerializers;
        iterator = map.entrySet().iterator();
_L8:
        if (!iterator.hasNext()) goto _L4; else goto _L3
_L3:
        java.util.Map.Entry entry;
        JsonSerializer jsonserializer;
        Object obj5;
        entry = (java.util.Map.Entry)iterator.next();
        obj5 = entry.getKey();
        if (obj5 != null)
            continue; /* Loop/switch isn't completed */
        jsonserializer = serializerprovider.findNullKeySerializer(_keyType, _property);
_L11:
        Object obj6 = entry.getValue();
        if (obj6 != null) goto _L6; else goto _L5
_L5:
        if (obj != null) goto _L8; else goto _L7
_L7:
        Object obj3;
        Object obj4;
        obj4 = serializerprovider.getDefaultNullValueSerializer();
        obj3 = obj1;
_L13:
        Object obj2;
        try {
            jsonserializer.serialize(obj5, jsongenerator, serializerprovider);
            ((JsonSerializer) (obj4)).serialize(obj6, jsongenerator, serializerprovider);
        }
        catch (Exception exception) {
            wrapAndThrow(serializerprovider, exception, map, (new StringBuilder()).append("").append(obj5).toString());
        }
        obj1 = obj3;
        break; /* Loop/switch isn't completed */
        if (hashset != null && hashset.contains(obj5)) goto _L10; else goto _L9
_L9:
        break MISSING_BLOCK_LABEL_161;
_L10:
        break; /* Loop/switch isn't completed */
        jsonserializer = _keySerializer;
          goto _L11
_L6:
        obj3 = _valueSerializer;
        obj2 = obj3;
        if (obj3 == null) {
            obj4 = obj6.getClass();
            obj3 = ((PropertySerializerMap) (obj1)).serializerFor(((Class) (obj4)));
            obj2 = obj3;
            if (obj3 == null) {
                if (_valueType.hasGenericTypes())
                    obj1 = _findAndAddDynamic(((PropertySerializerMap) (obj1)), serializerprovider.constructSpecializedType(_valueType, ((Class) (obj4))), serializerprovider);
                else
                    obj1 = _findAndAddDynamic(((PropertySerializerMap) (obj1)), ((Class) (obj4)), serializerprovider);
                obj3 = _dynamicValueSerializers;
                obj2 = obj1;
                obj1 = obj3;
            }
        }
        obj3 = obj1;
        obj4 = obj2;
        if (obj != com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY) goto _L13; else goto _L12
_L12:
        obj3 = obj1;
        obj4 = obj2;
        if (!((JsonSerializer) (obj2)).isEmpty(serializerprovider, obj6)) goto _L13; else goto _L8
    }

    protected void serializeTypedFields(Map map, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        com.fasterxml.jackson.annotation.JsonInclude.Include include;
        if (serializerprovider.isEnabled(SerializationFeature.WRITE_NULL_MAP_VALUES))
            include = null;
        else
            include = com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
        serializeTypedFields(map, jsongenerator, serializerprovider, include);
    }

    public void serializeTypedFields(Map map, JsonGenerator jsongenerator, SerializerProvider serializerprovider, Object obj) {
        Object obj1;
        HashSet hashset;
        Iterator iterator;
        hashset = _ignoredEntries;
        obj1 = _dynamicValueSerializers;
        iterator = map.entrySet().iterator();
_L7:
        Object obj3;
        Object obj4;
        Object obj5;
        Object obj6;
        if (!iterator.hasNext())
            break MISSING_BLOCK_LABEL_313;
        java.util.Map.Entry entry = (java.util.Map.Entry)iterator.next();
        obj5 = entry.getKey();
        JsonSerializer jsonserializer;
        if (obj5 == null) {
            jsonserializer = serializerprovider.findNullKeySerializer(_keyType, _property);
        } else {
            if (hashset != null && hashset.contains(obj5))
                break; /* Loop/switch isn't completed */
            jsonserializer = _keySerializer;
        }
        obj6 = entry.getValue();
        if (obj6 != null) goto _L2; else goto _L1
_L1:
        if (obj != null)
            continue; /* Loop/switch isn't completed */
        obj4 = serializerprovider.getDefaultNullValueSerializer();
        obj3 = obj1;
_L4:
        jsonserializer.serialize(obj5, jsongenerator, serializerprovider);
        Object obj2;
        try {
            ((JsonSerializer) (obj4)).serializeWithType(obj6, jsongenerator, serializerprovider, _valueTypeSerializer);
        }
        catch (Exception exception) {
            wrapAndThrow(serializerprovider, exception, map, (new StringBuilder()).append("").append(obj5).toString());
        }
        obj1 = obj3;
        break; /* Loop/switch isn't completed */
_L2:
        obj2 = _valueSerializer;
        obj3 = obj6.getClass();
        obj2 = ((PropertySerializerMap) (obj1)).serializerFor(((Class) (obj3)));
        if (obj2 == null) {
            if (_valueType.hasGenericTypes())
                obj1 = _findAndAddDynamic(((PropertySerializerMap) (obj1)), serializerprovider.constructSpecializedType(_valueType, ((Class) (obj3))), serializerprovider);
            else
                obj1 = _findAndAddDynamic(((PropertySerializerMap) (obj1)), ((Class) (obj3)), serializerprovider);
            obj3 = _dynamicValueSerializers;
            obj2 = obj1;
            obj1 = obj3;
        }
        obj3 = obj1;
        obj4 = obj2;
        if (obj != com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY) goto _L4; else goto _L3
_L3:
        obj3 = obj1;
        obj4 = obj2;
        if (!((JsonSerializer) (obj2)).isEmpty(serializerprovider, obj6)) goto _L4; else goto _L5
_L5:
        continue; /* Loop/switch isn't completed */
        return;
        if (true) goto _L7; else goto _L6
_L6:
    }

    public volatile void serializeWithType(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, TypeSerializer typeserializer) {
        serializeWithType((Map)obj, jsongenerator, serializerprovider, typeserializer);
    }

    public void serializeWithType(Map map, JsonGenerator jsongenerator, SerializerProvider serializerprovider, TypeSerializer typeserializer) {
        typeserializer.writeTypePrefixForObject(map, jsongenerator);
        jsongenerator.setCurrentValue(map);
        if (!map.isEmpty()) {
            Object obj1 = _suppressableValue;
            Object obj;
            if (obj1 == com.fasterxml.jackson.annotation.JsonInclude.Include.ALWAYS) {
                obj = null;
            } else {
                obj = obj1;
                if (obj1 == null) {
                    obj = obj1;
                    if (!serializerprovider.isEnabled(SerializationFeature.WRITE_NULL_MAP_VALUES))
                        obj = com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
                }
            }
            if (_sortKeys || serializerprovider.isEnabled(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS))
                map = _orderEntries(map);
            if (_filterId != null)
                serializeFilteredFields(map, jsongenerator, serializerprovider, findPropertyFilter(serializerprovider, _filterId, map), obj);
            else
            if (obj != null)
                serializeOptionalFields(map, jsongenerator, serializerprovider, obj);
            else
            if (_valueSerializer != null)
                serializeFieldsUsing(map, jsongenerator, serializerprovider, _valueSerializer);
            else
                serializeFields(map, jsongenerator, serializerprovider);
        }
        typeserializer.writeTypeSuffixForObject(map, jsongenerator);
    }

    public MapSerializer withContentInclusion(Object obj) {
        if (obj == _suppressableValue) {
            obj = this;
        } else {
            _ensureOverride();
            obj = new MapSerializer(this, _valueTypeSerializer, obj);
        }
        return ((MapSerializer) (obj));
    }

    public volatile JsonSerializer withFilterId(Object obj) {
        return withFilterId(obj);
    }

    public MapSerializer withFilterId(Object obj) {
        if (_filterId == obj) {
            obj = this;
        } else {
            _ensureOverride();
            obj = new MapSerializer(this, obj, _sortKeys);
        }
        return ((MapSerializer) (obj));
    }

    public MapSerializer withResolved(BeanProperty beanproperty, JsonSerializer jsonserializer, JsonSerializer jsonserializer1, HashSet hashset, boolean flag) {
        _ensureOverride();
        jsonserializer = new MapSerializer(this, beanproperty, jsonserializer, jsonserializer1, hashset);
        beanproperty = jsonserializer;
        if (flag != ((MapSerializer) (jsonserializer))._sortKeys)
            beanproperty = new MapSerializer(jsonserializer, _filterId, flag);
        return beanproperty;
    }

}
