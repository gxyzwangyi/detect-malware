// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.std;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
import com.fasterxml.jackson.databind.ser.ContextualSerializer;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

// Referenced classes of package com.fasterxml.jackson.databind.ser.std:
//            StdScalarSerializer

public abstract class DateTimeSerializerBase extends StdScalarSerializer
    implements ContextualSerializer {

    protected final DateFormat _customFormat;
    protected final Boolean _useTimestamp;

    protected DateTimeSerializerBase(Class class1, Boolean boolean1, DateFormat dateformat) {
        super(class1);
        _useTimestamp = boolean1;
        _customFormat = dateformat;
    }

    protected void _acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype, boolean flag) {
        if (flag)
            visitIntFormat(jsonformatvisitorwrapper, javatype, com.fasterxml.jackson.core.JsonParser.NumberType.LONG, JsonValueFormat.UTC_MILLISEC);
        else
            visitStringFormat(jsonformatvisitorwrapper, javatype, JsonValueFormat.DATE_TIME);
    }

    protected boolean _asTimestamp(SerializerProvider serializerprovider) {
        boolean flag;
        if (_useTimestamp != null)
            flag = _useTimestamp.booleanValue();
        else
        if (_customFormat == null) {
            if (serializerprovider != null)
                flag = serializerprovider.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
            else
                throw new IllegalArgumentException((new StringBuilder()).append("Null SerializerProvider passed for ").append(handledType().getName()).toString());
        } else {
            flag = false;
        }
        return flag;
    }

    protected abstract long _timestamp(Object obj);

    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
        _acceptJsonFormatVisitor(jsonformatvisitorwrapper, javatype, _asTimestamp(jsonformatvisitorwrapper.getProvider()));
    }

    public JsonSerializer createContextual(SerializerProvider serializerprovider, BeanProperty beanproperty) {
        Object obj = this;
        if (beanproperty == null) goto _L2; else goto _L1
_L1:
        com.fasterxml.jackson.annotation.JsonFormat.Value value;
        value = serializerprovider.getAnnotationIntrospector().findFormat(beanproperty.getMember());
        obj = this;
        if (value == null) goto _L2; else goto _L3
_L3:
        beanproperty = value.getShape();
        if (!beanproperty.isNumeric()) goto _L5; else goto _L4
_L4:
        obj = withFormat(Boolean.TRUE, null);
_L2:
        return ((JsonSerializer) (obj));
_L5:
        if (beanproperty != com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING && !value.hasPattern() && !value.hasLocale()) {
            obj = this;
            if (!value.hasTimeZone())
                continue; /* Loop/switch isn't completed */
        }
        java.util.TimeZone timezone = value.getTimeZone();
        if (value.hasPattern())
            beanproperty = value.getPattern();
        else
            beanproperty = "yyyy-MM-dd'T'HH:mm:ss.SSSZ";
        if (value.hasLocale())
            obj = value.getLocale();
        else
            obj = serializerprovider.getLocale();
        beanproperty = new SimpleDateFormat(beanproperty, ((java.util.Locale) (obj)));
        if (timezone == null)
            serializerprovider = serializerprovider.getTimeZone();
        else
            serializerprovider = timezone;
        beanproperty.setTimeZone(serializerprovider);
        obj = withFormat(Boolean.FALSE, beanproperty);
        if (true) goto _L2; else goto _L6
_L6:
    }

    public JsonNode getSchema(SerializerProvider serializerprovider, Type type) {
        if (_asTimestamp(serializerprovider))
            serializerprovider = "number";
        else
            serializerprovider = "string";
        return createSchemaNode(serializerprovider, true);
    }

    public boolean isEmpty(SerializerProvider serializerprovider, Object obj) {
        boolean flag;
        if (obj == null || _timestamp(obj) == 0L)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean isEmpty(Object obj) {
        boolean flag;
        if (obj == null || _timestamp(obj) == 0L)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public abstract void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider);

    public abstract DateTimeSerializerBase withFormat(Boolean boolean1, DateFormat dateformat);
}
