// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.std;

import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.ContextualSerializer;
import java.lang.reflect.Type;
import java.util.Collection;

// Referenced classes of package com.fasterxml.jackson.databind.ser.std:
//            StdSerializer

public abstract class StaticListSerializerBase extends StdSerializer
    implements ContextualSerializer {

    protected final JsonSerializer _serializer;
    protected final Boolean _unwrapSingle;

    protected StaticListSerializerBase(StaticListSerializerBase staticlistserializerbase, JsonSerializer jsonserializer, Boolean boolean1) {
        super(staticlistserializerbase);
        _serializer = jsonserializer;
        _unwrapSingle = boolean1;
    }

    protected StaticListSerializerBase(Class class1) {
        super(class1, false);
        _serializer = null;
        _unwrapSingle = null;
    }

    public abstract JsonSerializer _withResolved(BeanProperty beanproperty, JsonSerializer jsonserializer, Boolean boolean1);

    protected abstract void acceptContentVisitor(JsonArrayFormatVisitor jsonarrayformatvisitor);

    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
        acceptContentVisitor(jsonformatvisitorwrapper.expectArrayFormat(javatype));
    }

    protected abstract JsonNode contentSchema();

    public JsonSerializer createContextual(SerializerProvider serializerprovider, BeanProperty beanproperty) {
        Object obj;
        Object obj1;
        Object obj2;
        obj2 = null;
        if (beanproperty == null)
            break MISSING_BLOCK_LABEL_178;
        obj1 = serializerprovider.getAnnotationIntrospector();
        obj = beanproperty.getMember();
        if (obj == null) goto _L2; else goto _L1
_L1:
        obj1 = ((AnnotationIntrospector) (obj1)).findContentSerializer(((com.fasterxml.jackson.databind.introspect.Annotated) (obj)));
        if (obj1 == null) goto _L2; else goto _L3
_L3:
        obj1 = serializerprovider.serializerInstance(((com.fasterxml.jackson.databind.introspect.Annotated) (obj)), obj1);
_L4:
        obj = beanproperty.findPropertyFormat(serializerprovider.getConfig(), _handledType);
        JsonSerializer jsonserializer;
        if (obj != null)
            obj = ((com.fasterxml.jackson.annotation.JsonFormat.Value) (obj)).getFeature(com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED);
        else
            obj = null;
_L5:
        jsonserializer = ((JsonSerializer) (obj1));
        if (obj1 == null)
            jsonserializer = _serializer;
        obj1 = findConvertingContentSerializer(serializerprovider, beanproperty, jsonserializer);
        if (obj1 == null)
            serializerprovider = serializerprovider.findValueSerializer(java/lang/String, beanproperty);
        else
            serializerprovider = serializerprovider.handleSecondaryContextualization(((JsonSerializer) (obj1)), beanproperty);
        if (isDefaultSerializer(serializerprovider))
            serializerprovider = obj2;
        if (serializerprovider == _serializer && obj == _unwrapSingle)
            serializerprovider = this;
        else
            serializerprovider = _withResolved(beanproperty, serializerprovider, ((Boolean) (obj)));
        return serializerprovider;
_L2:
        obj1 = null;
          goto _L4
        obj = null;
        obj1 = null;
          goto _L5
    }

    public JsonNode getSchema(SerializerProvider serializerprovider, Type type) {
        return createSchemaNode("array", true).set("items", contentSchema());
    }

    public volatile boolean isEmpty(SerializerProvider serializerprovider, Object obj) {
        return isEmpty(serializerprovider, (Collection)obj);
    }

    public boolean isEmpty(SerializerProvider serializerprovider, Collection collection) {
        boolean flag;
        if (collection == null || collection.size() == 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public volatile boolean isEmpty(Object obj) {
        return isEmpty((Collection)obj);
    }

    public boolean isEmpty(Collection collection) {
        return isEmpty(null, collection);
    }
}
