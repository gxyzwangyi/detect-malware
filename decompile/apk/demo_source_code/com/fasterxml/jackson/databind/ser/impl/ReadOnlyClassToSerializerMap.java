// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.impl;

import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.util.TypeKey;
import java.util.*;

public final class ReadOnlyClassToSerializerMap {
    private static final class Bucket {

        protected final Class _class;
        protected final boolean _isTyped;
        protected final JavaType _type;
        public final Bucket next;
        public final JsonSerializer value;

        public boolean matchesTyped(JavaType javatype) {
            boolean flag;
            if (_isTyped && javatype.equals(_type))
                flag = true;
            else
                flag = false;
            return flag;
        }

        public boolean matchesTyped(Class class1) {
            boolean flag;
            if (_class == class1 && _isTyped)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public boolean matchesUntyped(JavaType javatype) {
            boolean flag;
            if (!_isTyped && javatype.equals(_type))
                flag = true;
            else
                flag = false;
            return flag;
        }

        public boolean matchesUntyped(Class class1) {
            boolean flag;
            if (_class == class1 && !_isTyped)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public Bucket(Bucket bucket, TypeKey typekey, JsonSerializer jsonserializer) {
            next = bucket;
            value = jsonserializer;
            _isTyped = typekey.isTyped();
            _class = typekey.getRawType();
            _type = typekey.getType();
        }
    }


    private final Bucket _buckets[];
    private final int _mask;
    private final int _size;

    public ReadOnlyClassToSerializerMap(Map map) {
        int i = findSize(map.size());
        _size = i;
        _mask = i - 1;
        Bucket abucket[] = new Bucket[i];
        for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext();) {
            java.util.Map.Entry entry = (java.util.Map.Entry)iterator.next();
            map = (TypeKey)entry.getKey();
            int j = map.hashCode() & _mask;
            abucket[j] = new Bucket(abucket[j], map, (JsonSerializer)entry.getValue());
        }

        _buckets = abucket;
    }

    private static final int findSize(int i) {
        int j;
        if (i <= 64)
            i += i;
        else
            i = (i >> 2) + i;
        for (j = 8; j < i; j += j);
        return j;
    }

    public static ReadOnlyClassToSerializerMap from(HashMap hashmap) {
        return new ReadOnlyClassToSerializerMap(hashmap);
    }

    public int size() {
        return _size;
    }

    public JsonSerializer typedValueSerializer(JavaType javatype) {
        Bucket bucket1 = _buckets[TypeKey.typedHash(javatype) & _mask];
        if (bucket1 != null) goto _L2; else goto _L1
_L1:
        javatype = null;
_L4:
        return javatype;
_L2:
        Bucket bucket = bucket1;
        if (bucket1.matchesTyped(javatype)) {
            javatype = bucket1.value;
            continue; /* Loop/switch isn't completed */
        }
        do {
            Bucket bucket2 = bucket.next;
            if (bucket2 == null)
                break;
            bucket = bucket2;
            if (bucket2.matchesTyped(javatype)) {
                javatype = bucket2.value;
                continue; /* Loop/switch isn't completed */
            }
        } while (true);
        javatype = null;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public JsonSerializer typedValueSerializer(Class class1) {
        Bucket bucket1 = _buckets[TypeKey.typedHash(class1) & _mask];
        if (bucket1 != null) goto _L2; else goto _L1
_L1:
        class1 = null;
_L4:
        return class1;
_L2:
        Bucket bucket = bucket1;
        if (bucket1.matchesTyped(class1)) {
            class1 = bucket1.value;
            continue; /* Loop/switch isn't completed */
        }
        do {
            Bucket bucket2 = bucket.next;
            if (bucket2 == null)
                break;
            bucket = bucket2;
            if (bucket2.matchesTyped(class1)) {
                class1 = bucket2.value;
                continue; /* Loop/switch isn't completed */
            }
        } while (true);
        class1 = null;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public JsonSerializer untypedValueSerializer(JavaType javatype) {
        Bucket bucket1 = _buckets[TypeKey.untypedHash(javatype) & _mask];
        if (bucket1 != null) goto _L2; else goto _L1
_L1:
        javatype = null;
_L4:
        return javatype;
_L2:
        Bucket bucket = bucket1;
        if (bucket1.matchesUntyped(javatype)) {
            javatype = bucket1.value;
            continue; /* Loop/switch isn't completed */
        }
        do {
            Bucket bucket2 = bucket.next;
            if (bucket2 == null)
                break;
            bucket = bucket2;
            if (bucket2.matchesUntyped(javatype)) {
                javatype = bucket2.value;
                continue; /* Loop/switch isn't completed */
            }
        } while (true);
        javatype = null;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public JsonSerializer untypedValueSerializer(Class class1) {
        Bucket bucket1 = _buckets[TypeKey.untypedHash(class1) & _mask];
        if (bucket1 != null) goto _L2; else goto _L1
_L1:
        class1 = null;
_L4:
        return class1;
_L2:
        Bucket bucket = bucket1;
        if (bucket1.matchesUntyped(class1)) {
            class1 = bucket1.value;
            continue; /* Loop/switch isn't completed */
        }
        do {
            Bucket bucket2 = bucket.next;
            if (bucket2 == null)
                break;
            bucket = bucket2;
            if (bucket2.matchesUntyped(class1)) {
                class1 = bucket2.value;
                continue; /* Loop/switch isn't completed */
            }
        } while (true);
        class1 = null;
        if (true) goto _L4; else goto _L3
_L3:
    }
}
