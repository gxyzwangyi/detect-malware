// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser;

import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.ext.OptionalHandlerFactory;
import com.fasterxml.jackson.databind.introspect.*;
import com.fasterxml.jackson.databind.jsontype.*;
import com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer;
import com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer;
import com.fasterxml.jackson.databind.ser.impl.IteratorSerializer;
import com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer;
import com.fasterxml.jackson.databind.ser.impl.StringArraySerializer;
import com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer;
import com.fasterxml.jackson.databind.ser.std.BooleanSerializer;
import com.fasterxml.jackson.databind.ser.std.ByteBufferSerializer;
import com.fasterxml.jackson.databind.ser.std.CalendarSerializer;
import com.fasterxml.jackson.databind.ser.std.CollectionSerializer;
import com.fasterxml.jackson.databind.ser.std.DateSerializer;
import com.fasterxml.jackson.databind.ser.std.EnumSerializer;
import com.fasterxml.jackson.databind.ser.std.EnumSetSerializer;
import com.fasterxml.jackson.databind.ser.std.InetAddressSerializer;
import com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer;
import com.fasterxml.jackson.databind.ser.std.IterableSerializer;
import com.fasterxml.jackson.databind.ser.std.JsonValueSerializer;
import com.fasterxml.jackson.databind.ser.std.MapSerializer;
import com.fasterxml.jackson.databind.ser.std.NumberSerializer;
import com.fasterxml.jackson.databind.ser.std.NumberSerializers;
import com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer;
import com.fasterxml.jackson.databind.ser.std.SerializableSerializer;
import com.fasterxml.jackson.databind.ser.std.StdArraySerializers;
import com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer;
import com.fasterxml.jackson.databind.ser.std.StdJdkSerializers;
import com.fasterxml.jackson.databind.ser.std.StdKeySerializers;
import com.fasterxml.jackson.databind.ser.std.StringSerializer;
import com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer;
import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;
import com.fasterxml.jackson.databind.ser.std.TokenBufferSerializer;
import com.fasterxml.jackson.databind.type.*;
import com.fasterxml.jackson.databind.util.*;
import java.io.Serializable;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.*;

// Referenced classes of package com.fasterxml.jackson.databind.ser:
//            SerializerFactory, Serializers, BeanSerializerModifier, ContainerSerializer

public abstract class BasicSerializerFactory extends SerializerFactory
    implements Serializable {

    protected static final HashMap _concrete;
    protected static final HashMap _concreteLazy;
    protected final SerializerFactoryConfig _factoryConfig;

    protected BasicSerializerFactory(SerializerFactoryConfig serializerfactoryconfig) {
        SerializerFactoryConfig serializerfactoryconfig1 = serializerfactoryconfig;
        if (serializerfactoryconfig == null)
            serializerfactoryconfig1 = new SerializerFactoryConfig();
        _factoryConfig = serializerfactoryconfig1;
    }

    protected JsonSerializer _findContentSerializer(SerializerProvider serializerprovider, Annotated annotated) {
        Object obj = serializerprovider.getAnnotationIntrospector().findContentSerializer(annotated);
        if (obj != null)
            serializerprovider = serializerprovider.serializerInstance(annotated, obj);
        else
            serializerprovider = null;
        return serializerprovider;
    }

    protected JsonSerializer _findKeySerializer(SerializerProvider serializerprovider, Annotated annotated) {
        Object obj = serializerprovider.getAnnotationIntrospector().findKeySerializer(annotated);
        if (obj != null)
            serializerprovider = serializerprovider.serializerInstance(annotated, obj);
        else
            serializerprovider = null;
        return serializerprovider;
    }

    protected Class _verifyAsClass(Object obj, String s, Class class1) {
        if (obj != null) goto _L2; else goto _L1
_L1:
        obj = null;
_L4:
        return ((Class) (obj));
_L2:
        if (!(obj instanceof Class))
            throw new IllegalStateException((new StringBuilder()).append("AnnotationIntrospector.").append(s).append("() returned value of type ").append(obj.getClass().getName()).append(": expected type JsonSerializer or Class<JsonSerializer> instead").toString());
        s = (Class)obj;
        if (s != class1) {
            obj = s;
            if (!ClassUtil.isBogusClass(s))
                continue; /* Loop/switch isn't completed */
        }
        obj = null;
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected JsonSerializer buildArraySerializer(SerializerProvider serializerprovider, ArrayType arraytype, BeanDescription beandescription, boolean flag, TypeSerializer typeserializer, JsonSerializer jsonserializer) {
        SerializationConfig serializationconfig = serializerprovider.getConfig();
        Object obj = null;
        Iterator iterator = customSerializers().iterator();
        do {
            if (!iterator.hasNext())
                break;
            serializerprovider = ((Serializers)iterator.next()).findArraySerializer(serializationconfig, arraytype, beandescription, typeserializer, jsonserializer);
            obj = serializerprovider;
            if (serializerprovider == null)
                continue;
            obj = serializerprovider;
            break;
        } while (true);
        serializerprovider = ((SerializerProvider) (obj));
        if (obj == null) {
            serializerprovider = arraytype.getRawClass();
            if (jsonserializer == null || ClassUtil.isJacksonStdImpl(jsonserializer))
                if ([Ljava/lang/String; == serializerprovider)
                    obj = StringArraySerializer.instance;
                else
                    obj = StdArraySerializers.findStandardImpl(serializerprovider);
            serializerprovider = ((SerializerProvider) (obj));
            if (obj == null)
                serializerprovider = new ObjectArraySerializer(arraytype.getContentType(), flag, typeserializer, jsonserializer);
        }
        if (_factoryConfig.hasSerializerModifiers()) {
            jsonserializer = _factoryConfig.serializerModifiers().iterator();
            do {
                typeserializer = serializerprovider;
                if (!jsonserializer.hasNext())
                    break;
                serializerprovider = ((BeanSerializerModifier)jsonserializer.next()).modifyArraySerializer(serializationconfig, arraytype, beandescription, serializerprovider);
            } while (true);
        } else {
            typeserializer = serializerprovider;
        }
        return typeserializer;
    }

    protected JsonSerializer buildCollectionSerializer(SerializerProvider serializerprovider, CollectionType collectiontype, BeanDescription beandescription, boolean flag, TypeSerializer typeserializer, JsonSerializer jsonserializer) {
        Object obj;
        JsonSerializer jsonserializer2;
        Object obj1;
        Object obj2;
        SerializationConfig serializationconfig;
        obj1 = null;
        obj2 = null;
        serializationconfig = serializerprovider.getConfig();
        Iterator iterator = customSerializers().iterator();
        jsonserializer2 = null;
        do {
            if (!iterator.hasNext())
                break;
            JsonSerializer jsonserializer1 = ((Serializers)iterator.next()).findCollectionSerializer(serializationconfig, collectiontype, beandescription, typeserializer, jsonserializer);
            jsonserializer2 = jsonserializer1;
            if (jsonserializer1 == null)
                continue;
            jsonserializer2 = jsonserializer1;
            break;
        } while (true);
        obj = jsonserializer2;
        if (jsonserializer2 != null) goto _L2; else goto _L1
_L1:
        jsonserializer2 = findSerializerByAnnotations(serializerprovider, collectiontype, beandescription);
        obj = jsonserializer2;
        if (jsonserializer2 != null) goto _L2; else goto _L3
_L3:
        serializerprovider = beandescription.findExpectedFormat(null);
        if (serializerprovider == null || serializerprovider.getShape() != com.fasterxml.jackson.annotation.JsonFormat.Shape.OBJECT) goto _L5; else goto _L4
_L4:
        typeserializer = obj2;
_L14:
        return typeserializer;
_L5:
        serializerprovider = collectiontype.getRawClass();
        if (!java/util/EnumSet.isAssignableFrom(serializerprovider)) goto _L7; else goto _L6
_L6:
        serializerprovider = collectiontype.getContentType();
        if (!serializerprovider.isEnumType())
            serializerprovider = obj1;
        obj = buildEnumSetSerializer(serializerprovider);
_L2:
        if (_factoryConfig.hasSerializerModifiers()) {
            jsonserializer = _factoryConfig.serializerModifiers().iterator();
            serializerprovider = ((SerializerProvider) (obj));
            do {
                typeserializer = serializerprovider;
                if (!jsonserializer.hasNext())
                    continue; /* Loop/switch isn't completed */
                serializerprovider = ((BeanSerializerModifier)jsonserializer.next()).modifyCollectionSerializer(serializationconfig, collectiontype, beandescription, serializerprovider);
            } while (true);
        }
        typeserializer = ((TypeSerializer) (obj));
        continue; /* Loop/switch isn't completed */
_L7:
        obj = collectiontype.getContentType().getRawClass();
        if (!isIndexedList(serializerprovider))
            break; /* Loop/switch isn't completed */
        if (obj == java/lang/String) {
label0:
            {
                if (jsonserializer != null) {
                    serializerprovider = jsonserializer2;
                    if (!ClassUtil.isJacksonStdImpl(jsonserializer))
                        break label0;
                }
                serializerprovider = IndexedStringListSerializer.instance;
            }
        } else {
            serializerprovider = buildIndexedListSerializer(collectiontype.getContentType(), flag, typeserializer, jsonserializer);
        }
_L10:
        obj = serializerprovider;
        if (serializerprovider == null)
            obj = buildCollectionSerializer(collectiontype.getContentType(), flag, typeserializer, jsonserializer);
        if (true) goto _L2; else goto _L8
_L8:
        serializerprovider = jsonserializer2;
        if (obj != java/lang/String) goto _L10; else goto _L9
_L9:
        if (jsonserializer == null) goto _L12; else goto _L11
_L11:
        serializerprovider = jsonserializer2;
        if (!ClassUtil.isJacksonStdImpl(jsonserializer)) goto _L10; else goto _L12
_L12:
        serializerprovider = StringCollectionSerializer.instance;
          goto _L10
        if (true) goto _L14; else goto _L13
_L13:
    }

    public ContainerSerializer buildCollectionSerializer(JavaType javatype, boolean flag, TypeSerializer typeserializer, JsonSerializer jsonserializer) {
        return new CollectionSerializer(javatype, flag, typeserializer, jsonserializer);
    }

    protected JsonSerializer buildContainerSerializer(SerializerProvider serializerprovider, JavaType javatype, BeanDescription beandescription, boolean flag) {
        boolean flag1;
        SerializationConfig serializationconfig;
label0:
        {
            serializationconfig = serializerprovider.getConfig();
            flag1 = flag;
            if (flag)
                break label0;
            flag1 = flag;
            if (!javatype.useStaticType())
                break label0;
            if (javatype.isContainerType()) {
                flag1 = flag;
                if (javatype.getContentType().getRawClass() == java/lang/Object)
                    break label0;
            }
            flag1 = true;
        }
        TypeSerializer typeserializer = createTypeSerializer(serializationconfig, javatype.getContentType());
        Object obj;
        Object obj1;
        JsonSerializer jsonserializer;
        Object obj2;
        Object obj3;
        Iterator iterator;
        if (typeserializer != null)
            flag = false;
        else
            flag = flag1;
        jsonserializer = _findContentSerializer(serializerprovider, beandescription.getClassInfo());
        if (!javatype.isMapLikeType()) goto _L2; else goto _L1
_L1:
        obj = (MapLikeType)javatype;
        obj3 = _findKeySerializer(serializerprovider, beandescription.getClassInfo());
        if (!((MapLikeType) (obj)).isTrueMapType()) goto _L4; else goto _L3
_L3:
        serializerprovider = buildMapSerializer(serializerprovider, (MapType)obj, beandescription, flag, ((JsonSerializer) (obj3)), typeserializer, jsonserializer);
_L6:
        return serializerprovider;
_L4:
        obj1 = null;
        obj2 = (MapLikeType)javatype;
        iterator = customSerializers().iterator();
        do {
            if (!iterator.hasNext())
                break;
            obj = ((Serializers)iterator.next()).findMapLikeSerializer(serializationconfig, ((MapLikeType) (obj2)), beandescription, ((JsonSerializer) (obj3)), typeserializer, jsonserializer);
            obj1 = obj;
            if (obj == null)
                continue;
            obj1 = obj;
            break;
        } while (true);
        obj = obj1;
        if (obj1 == null)
            obj = findSerializerByAnnotations(serializerprovider, javatype, beandescription);
        serializerprovider = ((SerializerProvider) (obj));
        if (obj == null)
            continue; /* Loop/switch isn't completed */
        serializerprovider = ((SerializerProvider) (obj));
        if (!_factoryConfig.hasSerializerModifiers())
            continue; /* Loop/switch isn't completed */
        obj1 = _factoryConfig.serializerModifiers().iterator();
        javatype = ((JavaType) (obj));
        do {
            serializerprovider = javatype;
            if (!((Iterator) (obj1)).hasNext())
                continue; /* Loop/switch isn't completed */
            javatype = ((BeanSerializerModifier)((Iterator) (obj1)).next()).modifyMapLikeSerializer(serializationconfig, ((MapLikeType) (obj2)), beandescription, javatype);
        } while (true);
_L2:
        if (javatype.isCollectionLikeType()) {
            obj = (CollectionLikeType)javatype;
            if (((CollectionLikeType) (obj)).isTrueCollectionType()) {
                serializerprovider = buildCollectionSerializer(serializerprovider, (CollectionType)obj, beandescription, flag, typeserializer, jsonserializer);
                continue; /* Loop/switch isn't completed */
            }
            obj = null;
            obj2 = (CollectionLikeType)javatype;
            obj3 = customSerializers().iterator();
            do {
                obj1 = obj;
                if (!((Iterator) (obj3)).hasNext())
                    break;
                obj1 = ((Serializers)((Iterator) (obj3)).next()).findCollectionLikeSerializer(serializationconfig, ((CollectionLikeType) (obj2)), beandescription, typeserializer, jsonserializer);
                obj = obj1;
            } while (obj1 == null);
            obj = obj1;
            if (obj1 == null)
                obj = findSerializerByAnnotations(serializerprovider, javatype, beandescription);
            serializerprovider = ((SerializerProvider) (obj));
            if (obj == null)
                continue; /* Loop/switch isn't completed */
            serializerprovider = ((SerializerProvider) (obj));
            if (!_factoryConfig.hasSerializerModifiers())
                continue; /* Loop/switch isn't completed */
            obj1 = _factoryConfig.serializerModifiers().iterator();
            javatype = ((JavaType) (obj));
            do {
                serializerprovider = javatype;
                if (!((Iterator) (obj1)).hasNext())
                    continue; /* Loop/switch isn't completed */
                javatype = ((BeanSerializerModifier)((Iterator) (obj1)).next()).modifyCollectionLikeSerializer(serializationconfig, ((CollectionLikeType) (obj2)), beandescription, javatype);
            } while (true);
        }
        if (javatype.isArrayType())
            serializerprovider = buildArraySerializer(serializerprovider, (ArrayType)javatype, beandescription, flag, typeserializer, jsonserializer);
        else
            serializerprovider = null;
        if (true) goto _L6; else goto _L5
_L5:
    }

    protected JsonSerializer buildEnumSerializer(SerializationConfig serializationconfig, JavaType javatype, BeanDescription beandescription) {
        Object obj;
        Object obj1;
        obj = null;
        obj1 = beandescription.findExpectedFormat(null);
        if (obj1 == null || ((com.fasterxml.jackson.annotation.JsonFormat.Value) (obj1)).getShape() != com.fasterxml.jackson.annotation.JsonFormat.Shape.OBJECT) goto _L2; else goto _L1
_L1:
        ((BasicBeanDescription)beandescription).removeProperty("declaringClass");
_L4:
        return ((JsonSerializer) (obj));
_L2:
        obj = EnumSerializer.construct(javatype.getRawClass(), serializationconfig, beandescription, ((com.fasterxml.jackson.annotation.JsonFormat.Value) (obj1)));
        if (!_factoryConfig.hasSerializerModifiers())
            continue;
        Iterator iterator = _factoryConfig.serializerModifiers().iterator();
        obj1 = obj;
        do {
            obj = obj1;
            if (!iterator.hasNext())
                continue;
            obj1 = ((BeanSerializerModifier)iterator.next()).modifyEnumSerializer(serializationconfig, javatype, beandescription, ((JsonSerializer) (obj1)));
        } while (true);
        if (true) goto _L4; else goto _L3
_L3:
    }

    public JsonSerializer buildEnumSetSerializer(JavaType javatype) {
        return new EnumSetSerializer(javatype);
    }

    public ContainerSerializer buildIndexedListSerializer(JavaType javatype, boolean flag, TypeSerializer typeserializer, JsonSerializer jsonserializer) {
        return new IndexedListSerializer(javatype, flag, typeserializer, jsonserializer);
    }

    protected JsonSerializer buildIterableSerializer(SerializationConfig serializationconfig, JavaType javatype, BeanDescription beandescription, boolean flag) {
        Object obj = serializationconfig.getTypeFactory().findTypeParameters(javatype, java/lang/Iterable);
        if (obj == null || obj.length != 1)
            obj = TypeFactory.unknownType();
        else
            obj = obj[0];
        return buildIterableSerializer(serializationconfig, javatype, beandescription, flag, ((JavaType) (obj)));
    }

    protected JsonSerializer buildIterableSerializer(SerializationConfig serializationconfig, JavaType javatype, BeanDescription beandescription, boolean flag, JavaType javatype1) {
        return new IterableSerializer(javatype1, flag, createTypeSerializer(serializationconfig, javatype1));
    }

    protected JsonSerializer buildIteratorSerializer(SerializationConfig serializationconfig, JavaType javatype, BeanDescription beandescription, boolean flag) {
        Object obj = serializationconfig.getTypeFactory().findTypeParameters(javatype, java/util/Iterator);
        if (obj == null || obj.length != 1)
            obj = TypeFactory.unknownType();
        else
            obj = obj[0];
        return buildIteratorSerializer(serializationconfig, javatype, beandescription, flag, ((JavaType) (obj)));
    }

    protected JsonSerializer buildIteratorSerializer(SerializationConfig serializationconfig, JavaType javatype, BeanDescription beandescription, boolean flag, JavaType javatype1) {
        return new IteratorSerializer(javatype1, flag, createTypeSerializer(serializationconfig, javatype1));
    }

    protected JsonSerializer buildMapEntrySerializer(SerializationConfig serializationconfig, JavaType javatype, BeanDescription beandescription, boolean flag, JavaType javatype1, JavaType javatype2) {
        return new MapEntrySerializer(javatype2, javatype1, javatype2, flag, createTypeSerializer(serializationconfig, javatype2), null);
    }

    protected JsonSerializer buildMapSerializer(SerializerProvider serializerprovider, MapType maptype, BeanDescription beandescription, boolean flag, JsonSerializer jsonserializer, TypeSerializer typeserializer, JsonSerializer jsonserializer1) {
        SerializationConfig serializationconfig = serializerprovider.getConfig();
        JsonSerializer jsonserializer3 = null;
        Iterator iterator = customSerializers().iterator();
        do {
            if (!iterator.hasNext())
                break;
            JsonSerializer jsonserializer2 = ((Serializers)iterator.next()).findMapSerializer(serializationconfig, maptype, beandescription, jsonserializer, typeserializer, jsonserializer1);
            jsonserializer3 = jsonserializer2;
            if (jsonserializer2 == null)
                continue;
            jsonserializer3 = jsonserializer2;
            break;
        } while (true);
        Object obj = jsonserializer3;
        if (jsonserializer3 == null) {
            serializerprovider = findSerializerByAnnotations(serializerprovider, maptype, beandescription);
            obj = serializerprovider;
            if (serializerprovider == null) {
                serializerprovider = ((SerializerProvider) (findFilterId(serializationconfig, beandescription)));
                serializerprovider = MapSerializer.construct(serializationconfig.getAnnotationIntrospector().findPropertiesToIgnore(beandescription.getClassInfo(), true), maptype, flag, typeserializer, jsonserializer, jsonserializer1, serializerprovider);
                jsonserializer = ((JsonSerializer) (findSuppressableContentValue(serializationconfig, maptype.getContentType(), beandescription)));
                obj = serializerprovider;
                if (jsonserializer != null)
                    obj = serializerprovider.withContentInclusion(jsonserializer);
            }
        }
        if (_factoryConfig.hasSerializerModifiers()) {
            typeserializer = _factoryConfig.serializerModifiers().iterator();
            serializerprovider = ((SerializerProvider) (obj));
            do {
                jsonserializer = serializerprovider;
                if (!typeserializer.hasNext())
                    break;
                serializerprovider = ((BeanSerializerModifier)typeserializer.next()).modifyMapSerializer(serializationconfig, maptype, beandescription, serializerprovider);
            } while (true);
        } else {
            jsonserializer = ((JsonSerializer) (obj));
        }
        return jsonserializer;
    }

    public JsonSerializer createKeySerializer(SerializationConfig serializationconfig, JavaType javatype, JsonSerializer jsonserializer) {
        Object obj;
        Object obj2;
label0:
        {
            obj2 = serializationconfig.introspectClassAnnotations(javatype.getRawClass());
            obj = null;
            JsonSerializer jsonserializer1 = null;
            if (!_factoryConfig.hasKeySerializers())
                break label0;
            Iterator iterator = _factoryConfig.keySerializers().iterator();
            obj = jsonserializer1;
            do {
                if (!iterator.hasNext())
                    break label0;
                jsonserializer1 = ((Serializers)iterator.next()).findSerializer(serializationconfig, javatype, ((BeanDescription) (obj2)));
                obj = jsonserializer1;
            } while (jsonserializer1 == null);
            obj = jsonserializer1;
        }
        Object obj1;
        if (obj == null) {
            obj1 = obj2;
            obj = jsonserializer;
            if (jsonserializer == null) {
                jsonserializer = StdKeySerializers.getStdKeySerializer(serializationconfig, javatype.getRawClass(), false);
                obj1 = obj2;
                obj = jsonserializer;
                if (jsonserializer == null) {
                    jsonserializer = serializationconfig.introspect(javatype);
                    obj1 = jsonserializer.findJsonValueMethod();
                    if (obj1 != null) {
                        obj = StdKeySerializers.getStdKeySerializer(serializationconfig, ((AnnotatedMethod) (obj1)).getRawReturnType(), true);
                        obj1 = ((AnnotatedMethod) (obj1)).getAnnotated();
                        if (serializationconfig.canOverrideAccessModifiers())
                            ClassUtil.checkAndFixAccess(((java.lang.reflect.Member) (obj1)), serializationconfig.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
                        obj = new JsonValueSerializer(((java.lang.reflect.Method) (obj1)), ((JsonSerializer) (obj)));
                        obj1 = jsonserializer;
                    } else {
                        obj = StdKeySerializers.getFallbackKeySerializer(serializationconfig, javatype.getRawClass());
                        obj1 = jsonserializer;
                    }
                }
            }
        } else {
            obj1 = obj2;
        }
        jsonserializer = ((JsonSerializer) (obj));
        if (_factoryConfig.hasSerializerModifiers()) {
            obj2 = _factoryConfig.serializerModifiers().iterator();
            do {
                jsonserializer = ((JsonSerializer) (obj));
                if (!((Iterator) (obj2)).hasNext())
                    break;
                obj = ((BeanSerializerModifier)((Iterator) (obj2)).next()).modifyKeySerializer(serializationconfig, javatype, ((BeanDescription) (obj1)), ((JsonSerializer) (obj)));
            } while (true);
        }
        return jsonserializer;
    }

    public abstract JsonSerializer createSerializer(SerializerProvider serializerprovider, JavaType javatype);

    public TypeSerializer createTypeSerializer(SerializationConfig serializationconfig, JavaType javatype) {
        Object obj1 = null;
        Object obj = serializationconfig.introspectClassAnnotations(javatype.getRawClass()).getClassInfo();
        TypeResolverBuilder typeresolverbuilder = serializationconfig.getAnnotationIntrospector().findTypeResolver(serializationconfig, ((com.fasterxml.jackson.databind.introspect.AnnotatedClass) (obj)), javatype);
        if (typeresolverbuilder == null) {
            typeresolverbuilder = serializationconfig.getDefaultTyper(javatype);
            obj = null;
        } else {
            obj = serializationconfig.getSubtypeResolver().collectAndResolveSubtypesByClass(serializationconfig, ((com.fasterxml.jackson.databind.introspect.AnnotatedClass) (obj)));
        }
        if (typeresolverbuilder == null)
            serializationconfig = obj1;
        else
            serializationconfig = typeresolverbuilder.buildTypeSerializer(serializationconfig, javatype, ((Collection) (obj)));
        return serializationconfig;
    }

    protected abstract Iterable customSerializers();

    protected Converter findConverter(SerializerProvider serializerprovider, Annotated annotated) {
        Object obj = serializerprovider.getAnnotationIntrospector().findSerializationConverter(annotated);
        if (obj == null)
            serializerprovider = null;
        else
            serializerprovider = serializerprovider.converterInstance(annotated, obj);
        return serializerprovider;
    }

    protected JsonSerializer findConvertingSerializer(SerializerProvider serializerprovider, Annotated annotated, JsonSerializer jsonserializer) {
        annotated = findConverter(serializerprovider, annotated);
        if (annotated != null)
            jsonserializer = new StdDelegatingSerializer(annotated, annotated.getOutputType(serializerprovider.getTypeFactory()), jsonserializer);
        return jsonserializer;
    }

    protected Object findFilterId(SerializationConfig serializationconfig, BeanDescription beandescription) {
        return serializationconfig.getAnnotationIntrospector().findFilterId(beandescription.getClassInfo());
    }

    protected JsonSerializer findOptionalStdSerializer(SerializerProvider serializerprovider, JavaType javatype, BeanDescription beandescription, boolean flag) {
        return OptionalHandlerFactory.instance.findSerializer(serializerprovider.getConfig(), javatype, beandescription);
    }

    protected final JsonSerializer findSerializerByAddonType(SerializationConfig serializationconfig, JavaType javatype, BeanDescription beandescription, boolean flag) {
        Object obj = javatype.getRawClass();
        if (java/util/Iterator.isAssignableFrom(((Class) (obj)))) {
            obj = serializationconfig.getTypeFactory().findTypeParameters(javatype, java/util/Iterator);
            if (obj == null || obj.length != 1)
                obj = TypeFactory.unknownType();
            else
                obj = obj[0];
            serializationconfig = buildIteratorSerializer(serializationconfig, javatype, beandescription, flag, ((JavaType) (obj)));
        } else
        if (java/lang/Iterable.isAssignableFrom(((Class) (obj)))) {
            obj = serializationconfig.getTypeFactory().findTypeParameters(javatype, java/lang/Iterable);
            if (obj == null || obj.length != 1)
                obj = TypeFactory.unknownType();
            else
                obj = obj[0];
            serializationconfig = buildIterableSerializer(serializationconfig, javatype, beandescription, flag, ((JavaType) (obj)));
        } else
        if (java/lang/CharSequence.isAssignableFrom(((Class) (obj))))
            serializationconfig = ToStringSerializer.instance;
        else
            serializationconfig = null;
        return serializationconfig;
    }

    protected final JsonSerializer findSerializerByAnnotations(SerializerProvider serializerprovider, JavaType javatype, BeanDescription beandescription) {
        if (com/fasterxml/jackson/databind/JsonSerializable.isAssignableFrom(javatype.getRawClass())) {
            serializerprovider = SerializableSerializer.instance;
        } else {
            beandescription = beandescription.findJsonValueMethod();
            if (beandescription != null) {
                javatype = beandescription.getAnnotated();
                if (serializerprovider.canOverrideAccessModifiers())
                    ClassUtil.checkAndFixAccess(javatype, serializerprovider.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
                serializerprovider = new JsonValueSerializer(javatype, findSerializerFromAnnotation(serializerprovider, beandescription));
            } else {
                serializerprovider = null;
            }
        }
        return serializerprovider;
    }

    protected final JsonSerializer findSerializerByLookup(JavaType javatype, SerializationConfig serializationconfig, BeanDescription beandescription, boolean flag) {
        beandescription = javatype.getRawClass().getName();
        serializationconfig = (JsonSerializer)_concrete.get(beandescription);
        javatype = serializationconfig;
        if (serializationconfig == null) {
            beandescription = (Class)_concreteLazy.get(beandescription);
            javatype = serializationconfig;
            if (beandescription != null)
                try {
                    javatype = (JsonSerializer)beandescription.newInstance();
                }
                // Misplaced declaration of an exception variable
                catch (JavaType javatype) {
                    throw new IllegalStateException((new StringBuilder()).append("Failed to instantiate standard serializer (of type ").append(beandescription.getName()).append("): ").append(javatype.getMessage()).toString(), javatype);
                }
        }
        return javatype;
    }

    protected final JsonSerializer findSerializerByPrimaryType(SerializerProvider serializerprovider, JavaType javatype, BeanDescription beandescription, boolean flag) {
        JsonSerializer jsonserializer;
        Object obj1;
        obj1 = javatype.getRawClass();
        jsonserializer = findOptionalStdSerializer(serializerprovider, javatype, beandescription, flag);
        if (jsonserializer == null) goto _L2; else goto _L1
_L1:
        serializerprovider = jsonserializer;
_L4:
        return serializerprovider;
_L2:
        if (java/util/Calendar.isAssignableFrom(((Class) (obj1)))) {
            serializerprovider = CalendarSerializer.instance;
            continue; /* Loop/switch isn't completed */
        }
        if (java/util/Date.isAssignableFrom(((Class) (obj1)))) {
            serializerprovider = DateSerializer.instance;
            continue; /* Loop/switch isn't completed */
        }
        if (java/util/Map$Entry.isAssignableFrom(((Class) (obj1)))) {
            JavaType javatype1 = javatype.findSuperType(java/util/Map$Entry);
            obj1 = javatype1.containedType(0);
            Object obj = obj1;
            if (obj1 == null)
                obj = TypeFactory.unknownType();
            javatype1 = javatype1.containedType(1);
            obj1 = javatype1;
            if (javatype1 == null)
                obj1 = TypeFactory.unknownType();
            serializerprovider = buildMapEntrySerializer(serializerprovider.getConfig(), javatype, beandescription, flag, ((JavaType) (obj)), ((JavaType) (obj1)));
            continue; /* Loop/switch isn't completed */
        }
        if (java/nio/ByteBuffer.isAssignableFrom(((Class) (obj1)))) {
            serializerprovider = new ByteBufferSerializer();
            continue; /* Loop/switch isn't completed */
        }
        if (java/net/InetAddress.isAssignableFrom(((Class) (obj1)))) {
            serializerprovider = new InetAddressSerializer();
            continue; /* Loop/switch isn't completed */
        }
        if (java/net/InetSocketAddress.isAssignableFrom(((Class) (obj1)))) {
            serializerprovider = new InetSocketAddressSerializer();
            continue; /* Loop/switch isn't completed */
        }
        if (java/util/TimeZone.isAssignableFrom(((Class) (obj1)))) {
            serializerprovider = new TimeZoneSerializer();
            continue; /* Loop/switch isn't completed */
        }
        if (!java/nio/charset/Charset.isAssignableFrom(((Class) (obj1))))
            break; /* Loop/switch isn't completed */
        serializerprovider = ToStringSerializer.instance;
        if (true) goto _L4; else goto _L3
_L3:
        if (!java/lang/Number.isAssignableFrom(((Class) (obj1)))) goto _L6; else goto _L5
_L5:
        serializerprovider = beandescription.findExpectedFormat(null);
        if (serializerprovider == null) goto _L8; else goto _L7
_L7:
        static class _cls1 {

            static final int $SwitchMap$com$fasterxml$jackson$annotation$JsonFormat$Shape[];
            static final int $SwitchMap$com$fasterxml$jackson$annotation$JsonInclude$Include[];

            static  {
                $SwitchMap$com$fasterxml$jackson$annotation$JsonInclude$Include = new int[com.fasterxml.jackson.annotation.JsonInclude.Include.values().length];
                NoSuchFieldError nosuchfielderror;
                try {
                    $SwitchMap$com$fasterxml$jackson$annotation$JsonInclude$Include[com.fasterxml.jackson.annotation.JsonInclude.Include.USE_DEFAULTS.ordinal()] = 1;
                }
                catch (NoSuchFieldError nosuchfielderror4) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$annotation$JsonInclude$Include[com.fasterxml.jackson.annotation.JsonInclude.Include.NON_DEFAULT.ordinal()] = 2;
                }
                catch (NoSuchFieldError nosuchfielderror3) { }
                $SwitchMap$com$fasterxml$jackson$annotation$JsonFormat$Shape = new int[com.fasterxml.jackson.annotation.JsonFormat.Shape.values().length];
                try {
                    $SwitchMap$com$fasterxml$jackson$annotation$JsonFormat$Shape[com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING.ordinal()] = 1;
                }
                catch (NoSuchFieldError nosuchfielderror2) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$annotation$JsonFormat$Shape[com.fasterxml.jackson.annotation.JsonFormat.Shape.OBJECT.ordinal()] = 2;
                }
                catch (NoSuchFieldError nosuchfielderror1) { }
                $SwitchMap$com$fasterxml$jackson$annotation$JsonFormat$Shape[com.fasterxml.jackson.annotation.JsonFormat.Shape.ARRAY.ordinal()] = 3;
_L2:
                return;
                nosuchfielderror;
                if (true) goto _L2; else goto _L1
_L1:
            }
        }

        _cls1..SwitchMap.com.fasterxml.jackson.annotation.JsonFormat.Shape[serializerprovider.getShape().ordinal()];
        JVM INSTR tableswitch 1 3: default 308
    //                   1 315
    //                   2 322
    //                   3 322;
           goto _L8 _L9 _L10 _L10
_L8:
        serializerprovider = NumberSerializer.instance;
        continue; /* Loop/switch isn't completed */
_L9:
        serializerprovider = ToStringSerializer.instance;
        continue; /* Loop/switch isn't completed */
_L10:
        serializerprovider = null;
        continue; /* Loop/switch isn't completed */
_L6:
        if (java/lang/Enum.isAssignableFrom(((Class) (obj1))))
            serializerprovider = buildEnumSerializer(serializerprovider.getConfig(), javatype, beandescription);
        else
            serializerprovider = null;
        if (true) goto _L4; else goto _L11
_L11:
    }

    protected JsonSerializer findSerializerFromAnnotation(SerializerProvider serializerprovider, Annotated annotated) {
        Object obj = serializerprovider.getAnnotationIntrospector().findSerializer(annotated);
        if (obj == null)
            serializerprovider = null;
        else
            serializerprovider = findConvertingSerializer(serializerprovider, annotated, serializerprovider.serializerInstance(annotated, obj));
        return serializerprovider;
    }

    protected Object findSuppressableContentValue(SerializationConfig serializationconfig, JavaType javatype, BeanDescription beandescription) {
        javatype = null;
        serializationconfig = beandescription.findPropertyInclusion(serializationconfig.getDefaultPropertyInclusion());
        if (serializationconfig != null) goto _L2; else goto _L1
_L1:
        serializationconfig = javatype;
_L4:
        return serializationconfig;
_L2:
        beandescription = serializationconfig.getContentInclusion();
        serializationconfig = javatype;
        switch (_cls1..SwitchMap.com.fasterxml.jackson.annotation.JsonInclude.Include[beandescription.ordinal()]) {
        case 2: // '\002'
        default:
            serializationconfig = beandescription;
            break;

        case 1: // '\001'
            break;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public SerializerFactoryConfig getFactoryConfig() {
        return _factoryConfig;
    }

    protected boolean isIndexedList(Class class1) {
        return java/util/RandomAccess.isAssignableFrom(class1);
    }

    protected boolean usesStaticTyping(SerializationConfig serializationconfig, BeanDescription beandescription, TypeSerializer typeserializer) {
        boolean flag = false;
        if (typeserializer == null) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        beandescription = serializationconfig.getAnnotationIntrospector().findSerializationTyping(beandescription.getClassInfo());
        if (beandescription != null && beandescription != com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing.DEFAULT_TYPING) {
            if (beandescription == com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing.STATIC)
                flag = true;
        } else {
            flag = serializationconfig.isEnabled(MapperFeature.USE_STATIC_TYPING);
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    public final SerializerFactory withAdditionalKeySerializers(Serializers serializers) {
        return withConfig(_factoryConfig.withAdditionalKeySerializers(serializers));
    }

    public final SerializerFactory withAdditionalSerializers(Serializers serializers) {
        return withConfig(_factoryConfig.withAdditionalSerializers(serializers));
    }

    public abstract SerializerFactory withConfig(SerializerFactoryConfig serializerfactoryconfig);

    public final SerializerFactory withSerializerModifier(BeanSerializerModifier beanserializermodifier) {
        return withConfig(_factoryConfig.withSerializerModifier(beanserializermodifier));
    }

    static  {
        HashMap hashmap1 = new HashMap();
        HashMap hashmap = new HashMap();
        hashmap.put(java/lang/String.getName(), new StringSerializer());
        ToStringSerializer tostringserializer = ToStringSerializer.instance;
        hashmap.put(java/lang/StringBuffer.getName(), tostringserializer);
        hashmap.put(java/lang/StringBuilder.getName(), tostringserializer);
        hashmap.put(java/lang/Character.getName(), tostringserializer);
        hashmap.put(Character.TYPE.getName(), tostringserializer);
        NumberSerializers.addAll(hashmap);
        hashmap.put(Boolean.TYPE.getName(), new BooleanSerializer(true));
        hashmap.put(java/lang/Boolean.getName(), new BooleanSerializer(false));
        hashmap.put(java/math/BigInteger.getName(), new NumberSerializer(java/math/BigInteger));
        hashmap.put(java/math/BigDecimal.getName(), new NumberSerializer(java/math/BigDecimal));
        hashmap.put(java/util/Calendar.getName(), CalendarSerializer.instance);
        hashmap.put(java/util/Date.getName(), DateSerializer.instance);
        for (Iterator iterator = StdJdkSerializers.all().iterator(); iterator.hasNext();) {
            java.util.Map.Entry entry = (java.util.Map.Entry)iterator.next();
            Object obj = entry.getValue();
            if (obj instanceof JsonSerializer)
                hashmap.put(((Class)entry.getKey()).getName(), (JsonSerializer)obj);
            else
            if (obj instanceof Class) {
                obj = (Class)obj;
                hashmap1.put(((Class)entry.getKey()).getName(), obj);
            } else {
                throw new IllegalStateException((new StringBuilder()).append("Internal error: unrecognized value of type ").append(entry.getClass().getName()).toString());
            }
        }

        hashmap1.put(com/fasterxml/jackson/databind/util/TokenBuffer.getName(), com/fasterxml/jackson/databind/ser/std/TokenBufferSerializer);
        _concrete = hashmap;
        _concreteLazy = hashmap1;
    }
}
