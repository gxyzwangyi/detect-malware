// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.impl;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.Serializable;

public abstract class FilteredBeanPropertyWriter {
    private static final class MultiView extends BeanPropertyWriter
        implements Serializable {

        private static final long serialVersionUID = 1L;
        protected final BeanPropertyWriter _delegate;
        protected final Class _views[];

        public void assignNullSerializer(JsonSerializer jsonserializer) {
            _delegate.assignNullSerializer(jsonserializer);
        }

        public void assignSerializer(JsonSerializer jsonserializer) {
            _delegate.assignSerializer(jsonserializer);
        }

        public void depositSchemaProperty(JsonObjectFormatVisitor jsonobjectformatvisitor, SerializerProvider serializerprovider) {
            int i;
            int j;
            Class class1;
            class1 = serializerprovider.getActiveView();
            if (class1 == null)
                break MISSING_BLOCK_LABEL_53;
            i = 0;
            j = _views.length;
_L3:
            if (i < j && !_views[i].isAssignableFrom(class1)) goto _L2; else goto _L1
_L1:
            if (i != j)
                break MISSING_BLOCK_LABEL_53;
_L4:
            return;
_L2:
            i++;
              goto _L3
            super.depositSchemaProperty(jsonobjectformatvisitor, serializerprovider);
              goto _L4
        }

        public volatile BeanPropertyWriter rename(NameTransformer nametransformer) {
            return rename(nametransformer);
        }

        public MultiView rename(NameTransformer nametransformer) {
            return new MultiView(_delegate.rename(nametransformer), _views);
        }

        public void serializeAsElement(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
            int i;
            int j;
            Class class1;
            class1 = serializerprovider.getActiveView();
            if (class1 == null)
                break MISSING_BLOCK_LABEL_67;
            i = 0;
            j = _views.length;
_L3:
            if (i < j && !_views[i].isAssignableFrom(class1)) goto _L2; else goto _L1
_L1:
            if (i != j)
                break MISSING_BLOCK_LABEL_67;
            _delegate.serializeAsPlaceholder(obj, jsongenerator, serializerprovider);
_L4:
            return;
_L2:
            i++;
              goto _L3
            _delegate.serializeAsElement(obj, jsongenerator, serializerprovider);
              goto _L4
        }

        public void serializeAsField(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
            int i;
            int j;
            Class class1;
            class1 = serializerprovider.getActiveView();
            if (class1 == null)
                break MISSING_BLOCK_LABEL_67;
            i = 0;
            j = _views.length;
_L3:
            if (i < j && !_views[i].isAssignableFrom(class1)) goto _L2; else goto _L1
_L1:
            if (i != j)
                break MISSING_BLOCK_LABEL_67;
            _delegate.serializeAsOmittedField(obj, jsongenerator, serializerprovider);
_L4:
            return;
_L2:
            i++;
              goto _L3
            _delegate.serializeAsField(obj, jsongenerator, serializerprovider);
              goto _L4
        }

        protected MultiView(BeanPropertyWriter beanpropertywriter, Class aclass[]) {
            super(beanpropertywriter);
            _delegate = beanpropertywriter;
            _views = aclass;
        }
    }

    private static final class SingleView extends BeanPropertyWriter
        implements Serializable {

        private static final long serialVersionUID = 1L;
        protected final BeanPropertyWriter _delegate;
        protected final Class _view;

        public void assignNullSerializer(JsonSerializer jsonserializer) {
            _delegate.assignNullSerializer(jsonserializer);
        }

        public void assignSerializer(JsonSerializer jsonserializer) {
            _delegate.assignSerializer(jsonserializer);
        }

        public void depositSchemaProperty(JsonObjectFormatVisitor jsonobjectformatvisitor, SerializerProvider serializerprovider) {
            Class class1 = serializerprovider.getActiveView();
            if (class1 == null || _view.isAssignableFrom(class1))
                super.depositSchemaProperty(jsonobjectformatvisitor, serializerprovider);
        }

        public volatile BeanPropertyWriter rename(NameTransformer nametransformer) {
            return rename(nametransformer);
        }

        public SingleView rename(NameTransformer nametransformer) {
            return new SingleView(_delegate.rename(nametransformer), _view);
        }

        public void serializeAsElement(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
            Class class1 = serializerprovider.getActiveView();
            if (class1 == null || _view.isAssignableFrom(class1))
                _delegate.serializeAsElement(obj, jsongenerator, serializerprovider);
            else
                _delegate.serializeAsPlaceholder(obj, jsongenerator, serializerprovider);
        }

        public void serializeAsField(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
            Class class1 = serializerprovider.getActiveView();
            if (class1 == null || _view.isAssignableFrom(class1))
                _delegate.serializeAsField(obj, jsongenerator, serializerprovider);
            else
                _delegate.serializeAsOmittedField(obj, jsongenerator, serializerprovider);
        }

        protected SingleView(BeanPropertyWriter beanpropertywriter, Class class1) {
            super(beanpropertywriter);
            _delegate = beanpropertywriter;
            _view = class1;
        }
    }


    public FilteredBeanPropertyWriter() {
    }

    public static BeanPropertyWriter constructViewBased(BeanPropertyWriter beanpropertywriter, Class aclass[]) {
        if (aclass.length == 1)
            beanpropertywriter = new SingleView(beanpropertywriter, aclass[0]);
        else
            beanpropertywriter = new MultiView(beanpropertywriter, aclass);
        return beanpropertywriter;
    }
}
