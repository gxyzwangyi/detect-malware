// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.impl;

import com.fasterxml.jackson.databind.ser.*;
import java.io.Serializable;
import java.util.*;

// Referenced classes of package com.fasterxml.jackson.databind.ser.impl:
//            SimpleBeanPropertyFilter

public class SimpleFilterProvider extends FilterProvider
    implements Serializable {

    private static final long serialVersionUID = 1L;
    protected boolean _cfgFailOnUnknownId;
    protected PropertyFilter _defaultFilter;
    protected final Map _filtersById;

    public SimpleFilterProvider() {
        this(((Map) (new HashMap())));
    }

    public SimpleFilterProvider(Map map) {
        Iterator iterator;
        _cfgFailOnUnknownId = true;
        iterator = map.values().iterator();
_L4:
        if (!iterator.hasNext()) goto _L2; else goto _L1
_L1:
        if (iterator.next() instanceof PropertyFilter) goto _L4; else goto _L3
_L3:
        _filtersById = _convert(map);
_L6:
        return;
_L2:
        _filtersById = map;
        if (true) goto _L6; else goto _L5
_L5:
    }

    private static final PropertyFilter _convert(BeanPropertyFilter beanpropertyfilter) {
        return SimpleBeanPropertyFilter.from(beanpropertyfilter);
    }

    private static final Map _convert(Map map) {
        HashMap hashmap = new HashMap();
        for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext();) {
            map = (java.util.Map.Entry)iterator.next();
            Object obj = map.getValue();
            if (obj instanceof PropertyFilter)
                hashmap.put(map.getKey(), (PropertyFilter)obj);
            else
            if (obj instanceof BeanPropertyFilter)
                hashmap.put(map.getKey(), _convert((BeanPropertyFilter)obj));
            else
                throw new IllegalArgumentException((new StringBuilder()).append("Unrecognized filter type (").append(obj.getClass().getName()).append(")").toString());
        }

        return hashmap;
    }

    public SimpleFilterProvider addFilter(String s, BeanPropertyFilter beanpropertyfilter) {
        _filtersById.put(s, _convert(beanpropertyfilter));
        return this;
    }

    public SimpleFilterProvider addFilter(String s, PropertyFilter propertyfilter) {
        _filtersById.put(s, propertyfilter);
        return this;
    }

    public SimpleFilterProvider addFilter(String s, SimpleBeanPropertyFilter simplebeanpropertyfilter) {
        _filtersById.put(s, simplebeanpropertyfilter);
        return this;
    }

    public BeanPropertyFilter findFilter(Object obj) {
        throw new UnsupportedOperationException("Access to deprecated filters not supported");
    }

    public PropertyFilter findPropertyFilter(Object obj, Object obj1) {
        PropertyFilter propertyfilter = (PropertyFilter)_filtersById.get(obj);
        obj1 = propertyfilter;
        if (propertyfilter == null) {
            PropertyFilter propertyfilter1 = _defaultFilter;
            obj1 = propertyfilter1;
            if (propertyfilter1 == null) {
                obj1 = propertyfilter1;
                if (_cfgFailOnUnknownId)
                    throw new IllegalArgumentException((new StringBuilder()).append("No filter configured with id '").append(obj).append("' (type ").append(obj.getClass().getName()).append(")").toString());
            }
        }
        return ((PropertyFilter) (obj1));
    }

    public PropertyFilter getDefaultFilter() {
        return _defaultFilter;
    }

    public PropertyFilter removeFilter(String s) {
        return (PropertyFilter)_filtersById.remove(s);
    }

    public SimpleFilterProvider setDefaultFilter(BeanPropertyFilter beanpropertyfilter) {
        _defaultFilter = SimpleBeanPropertyFilter.from(beanpropertyfilter);
        return this;
    }

    public SimpleFilterProvider setDefaultFilter(PropertyFilter propertyfilter) {
        _defaultFilter = propertyfilter;
        return this;
    }

    public SimpleFilterProvider setDefaultFilter(SimpleBeanPropertyFilter simplebeanpropertyfilter) {
        _defaultFilter = simplebeanpropertyfilter;
        return this;
    }

    public SimpleFilterProvider setFailOnUnknownId(boolean flag) {
        _cfgFailOnUnknownId = flag;
        return this;
    }

    public boolean willFailOnUnknownId() {
        return _cfgFailOnUnknownId;
    }
}
