// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser;

import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap;
import com.fasterxml.jackson.databind.util.TypeKey;
import java.util.HashMap;
import java.util.concurrent.atomic.AtomicReference;

// Referenced classes of package com.fasterxml.jackson.databind.ser:
//            ResolvableSerializer

public final class SerializerCache {

    private final AtomicReference _readOnlyMap = new AtomicReference();
    private final HashMap _sharedMap = new HashMap(64);

    public SerializerCache() {
    }

    private final ReadOnlyClassToSerializerMap _makeReadOnlyLookupMap() {
        this;
        JVM INSTR monitorenter ;
        ReadOnlyClassToSerializerMap readonlyclasstoserializermap1 = (ReadOnlyClassToSerializerMap)_readOnlyMap.get();
        ReadOnlyClassToSerializerMap readonlyclasstoserializermap;
        readonlyclasstoserializermap = readonlyclasstoserializermap1;
        if (readonlyclasstoserializermap1 != null)
            break MISSING_BLOCK_LABEL_35;
        readonlyclasstoserializermap = ReadOnlyClassToSerializerMap.from(_sharedMap);
        _readOnlyMap.set(readonlyclasstoserializermap);
        this;
        JVM INSTR monitorexit ;
        return readonlyclasstoserializermap;
        Exception exception;
        exception;
        throw exception;
    }

    public void addAndResolveNonTypedSerializer(JavaType javatype, JsonSerializer jsonserializer, SerializerProvider serializerprovider) {
        this;
        JVM INSTR monitorenter ;
        HashMap hashmap = _sharedMap;
        TypeKey typekey = JVM INSTR new #47  <Class TypeKey>;
        typekey.TypeKey(javatype, false);
        if (hashmap.put(typekey, jsonserializer) == null)
            _readOnlyMap.set(null);
        if (jsonserializer instanceof ResolvableSerializer)
            ((ResolvableSerializer)jsonserializer).resolve(serializerprovider);
        this;
        JVM INSTR monitorexit ;
        return;
        javatype;
        this;
        JVM INSTR monitorexit ;
        throw javatype;
    }

    public void addAndResolveNonTypedSerializer(Class class1, JavaType javatype, JsonSerializer jsonserializer, SerializerProvider serializerprovider) {
        this;
        JVM INSTR monitorenter ;
        HashMap hashmap = _sharedMap;
        TypeKey typekey = JVM INSTR new #47  <Class TypeKey>;
        typekey.TypeKey(class1, false);
        class1 = ((Class) (hashmap.put(typekey, jsonserializer)));
        hashmap = _sharedMap;
        typekey = JVM INSTR new #47  <Class TypeKey>;
        typekey.TypeKey(javatype, false);
        javatype = ((JavaType) (hashmap.put(typekey, jsonserializer)));
        if (class1 != null && javatype != null)
            break MISSING_BLOCK_LABEL_72;
        _readOnlyMap.set(null);
        if (jsonserializer instanceof ResolvableSerializer)
            ((ResolvableSerializer)jsonserializer).resolve(serializerprovider);
        this;
        JVM INSTR monitorexit ;
        return;
        class1;
        this;
        JVM INSTR monitorexit ;
        throw class1;
    }

    public void addAndResolveNonTypedSerializer(Class class1, JsonSerializer jsonserializer, SerializerProvider serializerprovider) {
        this;
        JVM INSTR monitorenter ;
        HashMap hashmap = _sharedMap;
        TypeKey typekey = JVM INSTR new #47  <Class TypeKey>;
        typekey.TypeKey(class1, false);
        if (hashmap.put(typekey, jsonserializer) == null)
            _readOnlyMap.set(null);
        if (jsonserializer instanceof ResolvableSerializer)
            ((ResolvableSerializer)jsonserializer).resolve(serializerprovider);
        this;
        JVM INSTR monitorexit ;
        return;
        class1;
        this;
        JVM INSTR monitorexit ;
        throw class1;
    }

    public void addTypedSerializer(JavaType javatype, JsonSerializer jsonserializer) {
        this;
        JVM INSTR monitorenter ;
        HashMap hashmap = _sharedMap;
        TypeKey typekey = JVM INSTR new #47  <Class TypeKey>;
        typekey.TypeKey(javatype, true);
        if (hashmap.put(typekey, jsonserializer) == null)
            _readOnlyMap.set(null);
        this;
        JVM INSTR monitorexit ;
        return;
        javatype;
        this;
        JVM INSTR monitorexit ;
        throw javatype;
    }

    public void addTypedSerializer(Class class1, JsonSerializer jsonserializer) {
        this;
        JVM INSTR monitorenter ;
        HashMap hashmap = _sharedMap;
        TypeKey typekey = JVM INSTR new #47  <Class TypeKey>;
        typekey.TypeKey(class1, true);
        if (hashmap.put(typekey, jsonserializer) == null)
            _readOnlyMap.set(null);
        this;
        JVM INSTR monitorexit ;
        return;
        class1;
        this;
        JVM INSTR monitorexit ;
        throw class1;
    }

    public void flush() {
        this;
        JVM INSTR monitorenter ;
        _sharedMap.clear();
        this;
        JVM INSTR monitorexit ;
        return;
        Exception exception;
        exception;
        throw exception;
    }

    public ReadOnlyClassToSerializerMap getReadOnlyLookupMap() {
        ReadOnlyClassToSerializerMap readonlyclasstoserializermap = (ReadOnlyClassToSerializerMap)_readOnlyMap.get();
        if (readonlyclasstoserializermap == null)
            readonlyclasstoserializermap = _makeReadOnlyLookupMap();
        return readonlyclasstoserializermap;
    }

    public int size() {
        this;
        JVM INSTR monitorenter ;
        int i = _sharedMap.size();
        this;
        JVM INSTR monitorexit ;
        return i;
        Exception exception;
        exception;
        throw exception;
    }

    public JsonSerializer typedValueSerializer(JavaType javatype) {
        this;
        JVM INSTR monitorenter ;
        HashMap hashmap = _sharedMap;
        TypeKey typekey = JVM INSTR new #47  <Class TypeKey>;
        typekey.TypeKey(javatype, true);
        javatype = (JsonSerializer)hashmap.get(typekey);
        this;
        JVM INSTR monitorexit ;
        return javatype;
        javatype;
        this;
        JVM INSTR monitorexit ;
        throw javatype;
    }

    public JsonSerializer typedValueSerializer(Class class1) {
        this;
        JVM INSTR monitorenter ;
        HashMap hashmap = _sharedMap;
        TypeKey typekey = JVM INSTR new #47  <Class TypeKey>;
        typekey.TypeKey(class1, true);
        class1 = (JsonSerializer)hashmap.get(typekey);
        this;
        JVM INSTR monitorexit ;
        return class1;
        class1;
        this;
        JVM INSTR monitorexit ;
        throw class1;
    }

    public JsonSerializer untypedValueSerializer(JavaType javatype) {
        this;
        JVM INSTR monitorenter ;
        HashMap hashmap = _sharedMap;
        TypeKey typekey = JVM INSTR new #47  <Class TypeKey>;
        typekey.TypeKey(javatype, false);
        javatype = (JsonSerializer)hashmap.get(typekey);
        this;
        JVM INSTR monitorexit ;
        return javatype;
        javatype;
        this;
        JVM INSTR monitorexit ;
        throw javatype;
    }

    public JsonSerializer untypedValueSerializer(Class class1) {
        this;
        JVM INSTR monitorenter ;
        HashMap hashmap = _sharedMap;
        TypeKey typekey = JVM INSTR new #47  <Class TypeKey>;
        typekey.TypeKey(class1, false);
        class1 = (JsonSerializer)hashmap.get(typekey);
        this;
        JVM INSTR monitorexit ;
        return class1;
        class1;
        this;
        JVM INSTR monitorexit ;
        throw class1;
    }
}
