// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.std;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import java.lang.reflect.Type;
import java.sql.Date;
import java.text.DateFormat;

// Referenced classes of package com.fasterxml.jackson.databind.ser.std:
//            DateTimeSerializerBase

public class SqlDateSerializer extends DateTimeSerializerBase {

    public SqlDateSerializer() {
        this(Boolean.FALSE);
    }

    protected SqlDateSerializer(Boolean boolean1) {
        super(java/sql/Date, boolean1, null);
    }

    protected volatile long _timestamp(Object obj) {
        return _timestamp((Date)obj);
    }

    protected long _timestamp(Date date) {
        long l;
        if (date == null)
            l = 0L;
        else
            l = date.getTime();
        return l;
    }

    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
        _acceptJsonFormatVisitor(jsonformatvisitorwrapper, javatype, _useTimestamp.booleanValue());
    }

    public JsonNode getSchema(SerializerProvider serializerprovider, Type type) {
        return createSchemaNode("string", true);
    }

    public volatile void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        serialize((Date)obj, jsongenerator, serializerprovider);
    }

    public void serialize(Date date, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        if (_asTimestamp(serializerprovider))
            jsongenerator.writeNumber(_timestamp(date));
        else
            jsongenerator.writeString(date.toString());
    }

    public volatile DateTimeSerializerBase withFormat(Boolean boolean1, DateFormat dateformat) {
        return withFormat(boolean1, dateformat);
    }

    public SqlDateSerializer withFormat(Boolean boolean1, DateFormat dateformat) {
        return new SqlDateSerializer(boolean1);
    }
}
