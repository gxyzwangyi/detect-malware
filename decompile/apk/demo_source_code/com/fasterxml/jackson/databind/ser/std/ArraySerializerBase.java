// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.std;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.ContainerSerializer;
import com.fasterxml.jackson.databind.ser.ContextualSerializer;

public abstract class ArraySerializerBase extends ContainerSerializer
    implements ContextualSerializer {

    protected final BeanProperty _property;
    protected final Boolean _unwrapSingle;

    protected ArraySerializerBase(ArraySerializerBase arrayserializerbase) {
        super(arrayserializerbase._handledType, false);
        _property = arrayserializerbase._property;
        _unwrapSingle = arrayserializerbase._unwrapSingle;
    }

    protected ArraySerializerBase(ArraySerializerBase arrayserializerbase, BeanProperty beanproperty) {
        super(arrayserializerbase._handledType, false);
        _property = beanproperty;
        _unwrapSingle = arrayserializerbase._unwrapSingle;
    }

    protected ArraySerializerBase(ArraySerializerBase arrayserializerbase, BeanProperty beanproperty, Boolean boolean1) {
        super(arrayserializerbase._handledType, false);
        _property = beanproperty;
        _unwrapSingle = boolean1;
    }

    protected ArraySerializerBase(Class class1) {
        super(class1);
        _property = null;
        _unwrapSingle = null;
    }

    protected ArraySerializerBase(Class class1, BeanProperty beanproperty) {
        super(class1);
        _property = beanproperty;
        _unwrapSingle = null;
    }

    public abstract JsonSerializer _withResolved(BeanProperty beanproperty, Boolean boolean1);

    public JsonSerializer createContextual(SerializerProvider serializerprovider, BeanProperty beanproperty) {
        Object obj = this;
        if (beanproperty != null) {
            serializerprovider = beanproperty.findPropertyFormat(serializerprovider.getConfig(), _handledType);
            obj = this;
            if (serializerprovider != null) {
                serializerprovider = serializerprovider.getFeature(com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED);
                obj = this;
                if (serializerprovider != _unwrapSingle)
                    obj = _withResolved(beanproperty, serializerprovider);
            }
        }
        return ((JsonSerializer) (obj));
    }

    public void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        if ((_unwrapSingle == null && serializerprovider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED) || _unwrapSingle == Boolean.TRUE) && hasSingleElement(obj)) {
            serializeContents(obj, jsongenerator, serializerprovider);
        } else {
            jsongenerator.writeStartArray();
            jsongenerator.setCurrentValue(obj);
            serializeContents(obj, jsongenerator, serializerprovider);
            jsongenerator.writeEndArray();
        }
    }

    protected abstract void serializeContents(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider);

    public final void serializeWithType(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, TypeSerializer typeserializer) {
        typeserializer.writeTypePrefixForArray(obj, jsongenerator);
        jsongenerator.setCurrentValue(obj);
        serializeContents(obj, jsongenerator, serializerprovider);
        typeserializer.writeTypeSuffixForArray(obj, jsongenerator);
    }
}
