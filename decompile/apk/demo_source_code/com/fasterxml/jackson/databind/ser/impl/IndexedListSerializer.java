// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.impl;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.ContainerSerializer;
import com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase;
import java.util.List;

// Referenced classes of package com.fasterxml.jackson.databind.ser.impl:
//            PropertySerializerMap

public final class IndexedListSerializer extends AsArraySerializerBase {

    private static final long serialVersionUID = 1L;

    public IndexedListSerializer(JavaType javatype, boolean flag, TypeSerializer typeserializer, JsonSerializer jsonserializer) {
        super(java/util/List, javatype, flag, typeserializer, jsonserializer);
    }

    public IndexedListSerializer(IndexedListSerializer indexedlistserializer, BeanProperty beanproperty, TypeSerializer typeserializer, JsonSerializer jsonserializer, Boolean boolean1) {
        super(indexedlistserializer, beanproperty, typeserializer, jsonserializer, boolean1);
    }

    public ContainerSerializer _withValueTypeSerializer(TypeSerializer typeserializer) {
        return new IndexedListSerializer(this, _property, typeserializer, _elementSerializer, _unwrapSingle);
    }

    public volatile boolean hasSingleElement(Object obj) {
        return hasSingleElement((List)obj);
    }

    public boolean hasSingleElement(List list) {
        boolean flag = true;
        if (list.size() != 1)
            flag = false;
        return flag;
    }

    public volatile boolean isEmpty(SerializerProvider serializerprovider, Object obj) {
        return isEmpty(serializerprovider, (List)obj);
    }

    public boolean isEmpty(SerializerProvider serializerprovider, List list) {
        boolean flag;
        if (list == null || list.isEmpty())
            flag = true;
        else
            flag = false;
        return flag;
    }

    public volatile void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        serialize((List)obj, jsongenerator, serializerprovider);
    }

    public final void serialize(List list, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        int i = list.size();
        if (i == 1 && (_unwrapSingle == null && serializerprovider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED) || _unwrapSingle == Boolean.TRUE)) {
            serializeContents(list, jsongenerator, serializerprovider);
        } else {
            jsongenerator.writeStartArray(i);
            serializeContents(list, jsongenerator, serializerprovider);
            jsongenerator.writeEndArray();
        }
    }

    public volatile void serializeContents(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        serializeContents((List)obj, jsongenerator, serializerprovider);
    }

    public void serializeContents(List list, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        if (_elementSerializer != null) {
            serializeContentsUsing(list, jsongenerator, serializerprovider, _elementSerializer);
        } else {
label0:
            {
                if (_valueTypeSerializer == null)
                    break label0;
                serializeTypedContents(list, jsongenerator, serializerprovider);
            }
        }
_L2:
        return;
        int k = list.size();
        if (k == 0) goto _L2; else goto _L1
_L1:
        int i;
        int j;
        j = 0;
        i = 0;
        PropertySerializerMap propertyserializermap = _dynamicSerializers;
_L6:
        if (i >= k) goto _L2; else goto _L3
_L3:
        j = i;
        Object obj1 = list.get(i);
        if (obj1 != null) goto _L5; else goto _L4
_L4:
        j = i;
        serializerprovider.defaultSerializeNull(jsongenerator);
        Object obj = propertyserializermap;
_L11:
        i++;
        propertyserializermap = ((PropertySerializerMap) (obj));
          goto _L6
_L5:
        j = i;
        Class class1 = obj1.getClass();
        j = i;
        JsonSerializer jsonserializer1 = propertyserializermap.serializerFor(class1);
        JsonSerializer jsonserializer;
        obj = propertyserializermap;
        jsonserializer = jsonserializer1;
        if (jsonserializer1 != null) goto _L8; else goto _L7
_L7:
        j = i;
        if (!_elementType.hasGenericTypes()) goto _L10; else goto _L9
_L9:
        j = i;
        obj = _findAndAddDynamic(propertyserializermap, serializerprovider.constructSpecializedType(_elementType, class1), serializerprovider);
_L12:
        j = i;
        propertyserializermap = _dynamicSerializers;
        jsonserializer = ((JsonSerializer) (obj));
        obj = propertyserializermap;
_L8:
        j = i;
        jsonserializer.serialize(obj1, jsongenerator, serializerprovider);
          goto _L11
        jsongenerator;
        wrapAndThrow(serializerprovider, jsongenerator, list, j);
          goto _L2
_L10:
        j = i;
        obj = _findAndAddDynamic(propertyserializermap, class1, serializerprovider);
          goto _L12
    }

    public void serializeContentsUsing(List list, JsonGenerator jsongenerator, SerializerProvider serializerprovider, JsonSerializer jsonserializer) {
        int j = list.size();
        if (j != 0) goto _L2; else goto _L1
_L1:
        return;
_L2:
        int i;
        TypeSerializer typeserializer;
        typeserializer = _valueTypeSerializer;
        i = 0;
_L6:
        if (i >= j) goto _L1; else goto _L3
_L3:
        Object obj = list.get(i);
        if (obj != null) goto _L5; else goto _L4
_L4:
        try {
            serializerprovider.defaultSerializeNull(jsongenerator);
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            wrapAndThrow(serializerprovider, ((Throwable) (obj)), list, i);
        }
_L7:
        i++;
          goto _L6
_L5:
        if (typeserializer != null)
            break MISSING_BLOCK_LABEL_88;
        jsonserializer.serialize(obj, jsongenerator, serializerprovider);
        break MISSING_BLOCK_LABEL_50;
        jsonserializer.serializeWithType(obj, jsongenerator, serializerprovider, typeserializer);
          goto _L7
    }

    public void serializeTypedContents(List list, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        int k = list.size();
        if (k != 0) goto _L2; else goto _L1
_L1:
        return;
_L2:
        int i;
        int j;
        boolean flag;
        flag = false;
        i = 0;
        j = ((flag) ? 1 : 0);
        TypeSerializer typeserializer = _valueTypeSerializer;
        j = ((flag) ? 1 : 0);
        PropertySerializerMap propertyserializermap = _dynamicSerializers;
_L6:
        if (i >= k) goto _L1; else goto _L3
_L3:
        j = i;
        Object obj1 = list.get(i);
        if (obj1 != null) goto _L5; else goto _L4
_L4:
        j = i;
        serializerprovider.defaultSerializeNull(jsongenerator);
        Object obj = propertyserializermap;
_L11:
        i++;
        propertyserializermap = ((PropertySerializerMap) (obj));
          goto _L6
_L5:
        j = i;
        Class class1 = obj1.getClass();
        j = i;
        JsonSerializer jsonserializer1 = propertyserializermap.serializerFor(class1);
        JsonSerializer jsonserializer;
        obj = propertyserializermap;
        jsonserializer = jsonserializer1;
        if (jsonserializer1 != null) goto _L8; else goto _L7
_L7:
        j = i;
        if (!_elementType.hasGenericTypes()) goto _L10; else goto _L9
_L9:
        j = i;
        obj = _findAndAddDynamic(propertyserializermap, serializerprovider.constructSpecializedType(_elementType, class1), serializerprovider);
_L12:
        j = i;
        propertyserializermap = _dynamicSerializers;
        jsonserializer = ((JsonSerializer) (obj));
        obj = propertyserializermap;
_L8:
        j = i;
        jsonserializer.serializeWithType(obj1, jsongenerator, serializerprovider, typeserializer);
          goto _L11
        jsongenerator;
        wrapAndThrow(serializerprovider, jsongenerator, list, j);
          goto _L1
_L10:
        j = i;
        obj = _findAndAddDynamic(propertyserializermap, class1, serializerprovider);
          goto _L12
    }

    public IndexedListSerializer withResolved(BeanProperty beanproperty, TypeSerializer typeserializer, JsonSerializer jsonserializer, Boolean boolean1) {
        return new IndexedListSerializer(this, beanproperty, typeserializer, jsonserializer, boolean1);
    }

    public volatile AsArraySerializerBase withResolved(BeanProperty beanproperty, TypeSerializer typeserializer, JsonSerializer jsonserializer, Boolean boolean1) {
        return withResolved(beanproperty, typeserializer, jsonserializer, boolean1);
    }
}
