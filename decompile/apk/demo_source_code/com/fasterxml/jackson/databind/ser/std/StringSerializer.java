// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.std;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import java.lang.reflect.Type;

// Referenced classes of package com.fasterxml.jackson.databind.ser.std:
//            NonTypedScalarSerializerBase

public final class StringSerializer extends NonTypedScalarSerializerBase {

    private static final long serialVersionUID = 1L;

    public StringSerializer() {
        super(java/lang/String, false);
    }

    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
        visitStringFormat(jsonformatvisitorwrapper, javatype);
    }

    public JsonNode getSchema(SerializerProvider serializerprovider, Type type) {
        return createSchemaNode("string", true);
    }

    public boolean isEmpty(SerializerProvider serializerprovider, Object obj) {
        serializerprovider = (String)obj;
        boolean flag;
        if (serializerprovider == null || serializerprovider.length() == 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean isEmpty(Object obj) {
        obj = (String)obj;
        boolean flag;
        if (obj == null || ((String) (obj)).length() == 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        jsongenerator.writeString((String)obj);
    }
}
