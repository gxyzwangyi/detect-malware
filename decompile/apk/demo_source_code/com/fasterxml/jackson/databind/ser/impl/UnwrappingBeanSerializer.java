// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.impl;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.Serializable;

// Referenced classes of package com.fasterxml.jackson.databind.ser.impl:
//            ObjectIdWriter

public class UnwrappingBeanSerializer extends BeanSerializerBase
    implements Serializable {

    private static final long serialVersionUID = 1L;
    protected final NameTransformer _nameTransformer;

    public UnwrappingBeanSerializer(UnwrappingBeanSerializer unwrappingbeanserializer, ObjectIdWriter objectidwriter) {
        super(unwrappingbeanserializer, objectidwriter);
        _nameTransformer = unwrappingbeanserializer._nameTransformer;
    }

    public UnwrappingBeanSerializer(UnwrappingBeanSerializer unwrappingbeanserializer, ObjectIdWriter objectidwriter, Object obj) {
        super(unwrappingbeanserializer, objectidwriter, obj);
        _nameTransformer = unwrappingbeanserializer._nameTransformer;
    }

    protected UnwrappingBeanSerializer(UnwrappingBeanSerializer unwrappingbeanserializer, String as[]) {
        super(unwrappingbeanserializer, as);
        _nameTransformer = unwrappingbeanserializer._nameTransformer;
    }

    public UnwrappingBeanSerializer(BeanSerializerBase beanserializerbase, NameTransformer nametransformer) {
        super(beanserializerbase, nametransformer);
        _nameTransformer = nametransformer;
    }

    protected BeanSerializerBase asArraySerializer() {
        return this;
    }

    public boolean isUnwrappingSerializer() {
        return true;
    }

    public final void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        jsongenerator.setCurrentValue(obj);
        if (_objectIdWriter != null)
            _serializeWithObjectId(obj, jsongenerator, serializerprovider, false);
        else
        if (_propertyFilterId != null)
            serializeFieldsFiltered(obj, jsongenerator, serializerprovider);
        else
            serializeFields(obj, jsongenerator, serializerprovider);
    }

    public void serializeWithType(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, TypeSerializer typeserializer) {
        if (serializerprovider.isEnabled(SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS))
            throw JsonMappingException.from(jsongenerator, "Unwrapped property requires use of type information: can not serialize without disabling `SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS`");
        jsongenerator.setCurrentValue(obj);
        if (_objectIdWriter != null)
            _serializeWithObjectId(obj, jsongenerator, serializerprovider, typeserializer);
        else
        if (_propertyFilterId != null)
            serializeFieldsFiltered(obj, jsongenerator, serializerprovider);
        else
            serializeFields(obj, jsongenerator, serializerprovider);
    }

    public String toString() {
        return (new StringBuilder()).append("UnwrappingBeanSerializer for ").append(handledType().getName()).toString();
    }

    public JsonSerializer unwrappingSerializer(NameTransformer nametransformer) {
        return new UnwrappingBeanSerializer(this, nametransformer);
    }

    public volatile JsonSerializer withFilterId(Object obj) {
        return withFilterId(obj);
    }

    public BeanSerializerBase withFilterId(Object obj) {
        return new UnwrappingBeanSerializer(this, _objectIdWriter, obj);
    }

    protected BeanSerializerBase withIgnorals(String as[]) {
        return new UnwrappingBeanSerializer(this, as);
    }

    public BeanSerializerBase withObjectIdWriter(ObjectIdWriter objectidwriter) {
        return new UnwrappingBeanSerializer(this, objectidwriter);
    }
}
