// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.std;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsonschema.JsonSerializableSchema;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.concurrent.atomic.AtomicReference;

// Referenced classes of package com.fasterxml.jackson.databind.ser.std:
//            StdSerializer

public class SerializableSerializer extends StdSerializer {

    private static final AtomicReference _mapperReference = new AtomicReference();
    public static final SerializableSerializer instance = new SerializableSerializer();

    protected SerializableSerializer() {
        super(com/fasterxml/jackson/databind/JsonSerializable);
    }

    private static final ObjectMapper _getObjectMapper() {
        com/fasterxml/jackson/databind/ser/std/SerializableSerializer;
        JVM INSTR monitorenter ;
        ObjectMapper objectmapper1 = (ObjectMapper)_mapperReference.get();
        ObjectMapper objectmapper;
        objectmapper = objectmapper1;
        if (objectmapper1 != null)
            break MISSING_BLOCK_LABEL_34;
        objectmapper = JVM INSTR new #37  <Class ObjectMapper>;
        objectmapper.ObjectMapper();
        _mapperReference.set(objectmapper);
        com/fasterxml/jackson/databind/ser/std/SerializableSerializer;
        JVM INSTR monitorexit ;
        return objectmapper;
        Exception exception;
        exception;
        throw exception;
    }

    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
        jsonformatvisitorwrapper.expectAnyFormat(javatype);
    }

    public JsonNode getSchema(SerializerProvider serializerprovider, Type type) {
        String s;
        String s1;
        ObjectNode objectnode;
        s1 = null;
        objectnode = createObjectNode();
        s = "any";
        if (type == null) goto _L2; else goto _L1
_L1:
        type = TypeFactory.rawClass(type);
        if (!type.isAnnotationPresent(com/fasterxml/jackson/databind/jsonschema/JsonSerializableSchema)) goto _L2; else goto _L3
_L3:
        JsonSerializableSchema jsonserializableschema = (JsonSerializableSchema)type.getAnnotation(com/fasterxml/jackson/databind/jsonschema/JsonSerializableSchema);
        s = jsonserializableschema.schemaType();
        if (!"##irrelevant".equals(jsonserializableschema.schemaObjectPropertiesDefinition()))
            type = jsonserializableschema.schemaObjectPropertiesDefinition();
        else
            type = null;
        if (!"##irrelevant".equals(jsonserializableschema.schemaItemDefinition()))
            s1 = jsonserializableschema.schemaItemDefinition();
_L5:
        objectnode.put("type", s);
        if (type != null)
            try {
                objectnode.set("properties", _getObjectMapper().readTree(type));
            }
            // Misplaced declaration of an exception variable
            catch (Type type) {
                throw JsonMappingException.from(serializerprovider, "Failed to parse @JsonSerializableSchema.schemaObjectPropertiesDefinition value");
            }
        if (s1 != null)
            try {
                objectnode.set("items", _getObjectMapper().readTree(s1));
            }
            // Misplaced declaration of an exception variable
            catch (Type type) {
                throw JsonMappingException.from(serializerprovider, "Failed to parse @JsonSerializableSchema.schemaItemDefinition value");
            }
        return objectnode;
_L2:
        type = null;
        if (true) goto _L5; else goto _L4
_L4:
    }

    public boolean isEmpty(SerializerProvider serializerprovider, JsonSerializable jsonserializable) {
        boolean flag;
        if (jsonserializable instanceof com.fasterxml.jackson.databind.JsonSerializable.Base)
            flag = ((com.fasterxml.jackson.databind.JsonSerializable.Base)jsonserializable).isEmpty(serializerprovider);
        else
            flag = false;
        return flag;
    }

    public volatile boolean isEmpty(SerializerProvider serializerprovider, Object obj) {
        return isEmpty(serializerprovider, (JsonSerializable)obj);
    }

    public void serialize(JsonSerializable jsonserializable, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        jsonserializable.serialize(jsongenerator, serializerprovider);
    }

    public volatile void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        serialize((JsonSerializable)obj, jsongenerator, serializerprovider);
    }

    public final void serializeWithType(JsonSerializable jsonserializable, JsonGenerator jsongenerator, SerializerProvider serializerprovider, TypeSerializer typeserializer) {
        jsonserializable.serializeWithType(jsongenerator, serializerprovider, typeserializer);
    }

    public volatile void serializeWithType(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, TypeSerializer typeserializer) {
        serializeWithType((JsonSerializable)obj, jsongenerator, serializerprovider, typeserializer);
    }

}
