// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.std;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
import java.util.*;

// Referenced classes of package com.fasterxml.jackson.databind.ser.std:
//            StdKeySerializer, StdSerializer

public class StdKeySerializers {
    public static class Default extends StdSerializer {

        static final int TYPE_CALENDAR = 2;
        static final int TYPE_CLASS = 3;
        static final int TYPE_DATE = 1;
        static final int TYPE_ENUM = 4;
        static final int TYPE_TO_STRING = 5;
        protected final int _typeId;

        public void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
            _typeId;
            JVM INSTR tableswitch 1 4: default 36
        //                       1 45
        //                       2 57
        //                       3 72
        //                       4 86;
               goto _L1 _L2 _L3 _L4 _L5
_L1:
            jsongenerator.writeFieldName(obj.toString());
_L7:
            return;
_L2:
            serializerprovider.defaultSerializeDateKey((Date)obj, jsongenerator);
            continue; /* Loop/switch isn't completed */
_L3:
            serializerprovider.defaultSerializeDateKey(((Calendar)obj).getTimeInMillis(), jsongenerator);
            continue; /* Loop/switch isn't completed */
_L4:
            jsongenerator.writeFieldName(((Class)obj).getName());
            continue; /* Loop/switch isn't completed */
_L5:
            if (serializerprovider.isEnabled(SerializationFeature.WRITE_ENUMS_USING_TO_STRING))
                obj = obj.toString();
            else
                obj = ((Enum)obj).name();
            jsongenerator.writeFieldName(((String) (obj)));
            if (true) goto _L7; else goto _L6
_L6:
        }

        public Default(int i, Class class1) {
            super(class1, false);
            _typeId = i;
        }
    }

    public static class Dynamic extends StdSerializer {

        protected transient PropertySerializerMap _dynamicSerializers;

        protected JsonSerializer _findAndAddDynamic(PropertySerializerMap propertyserializermap, Class class1, SerializerProvider serializerprovider) {
            class1 = propertyserializermap.findAndAddKeySerializer(class1, serializerprovider, null);
            if (propertyserializermap != ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (class1)).map)
                _dynamicSerializers = ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (class1)).map;
            return ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (class1)).serializer;
        }

        Object readResolve() {
            _dynamicSerializers = PropertySerializerMap.emptyForProperties();
            return this;
        }

        public void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
            Class class1 = obj.getClass();
            PropertySerializerMap propertyserializermap = _dynamicSerializers;
            JsonSerializer jsonserializer1 = propertyserializermap.serializerFor(class1);
            JsonSerializer jsonserializer = jsonserializer1;
            if (jsonserializer1 == null)
                jsonserializer = _findAndAddDynamic(propertyserializermap, class1, serializerprovider);
            jsonserializer.serialize(obj, jsongenerator, serializerprovider);
        }

        public Dynamic() {
            super(java/lang/String, false);
            _dynamicSerializers = PropertySerializerMap.emptyForProperties();
        }
    }

    public static class StringKeySerializer extends StdSerializer {

        public void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
            jsongenerator.writeFieldName((String)obj);
        }

        public StringKeySerializer() {
            super(java/lang/String, false);
        }
    }


    protected static final JsonSerializer DEFAULT_KEY_SERIALIZER = new StdKeySerializer();
    protected static final JsonSerializer DEFAULT_STRING_SERIALIZER = new StringKeySerializer();

    private StdKeySerializers() {
    }

    public static JsonSerializer getDefault() {
        return DEFAULT_KEY_SERIALIZER;
    }

    public static JsonSerializer getFallbackKeySerializer(SerializationConfig serializationconfig, Class class1) {
        if (class1 == null) goto _L2; else goto _L1
_L1:
        if (class1 != java/lang/Enum) goto _L4; else goto _L3
_L3:
        serializationconfig = new Dynamic();
_L6:
        return serializationconfig;
_L4:
        if (class1.isEnum()) {
            serializationconfig = new Default(4, class1);
            continue; /* Loop/switch isn't completed */
        }
_L2:
        serializationconfig = DEFAULT_KEY_SERIALIZER;
        if (true) goto _L6; else goto _L5
_L5:
    }

    public static JsonSerializer getStdKeySerializer(SerializationConfig serializationconfig, Class class1, boolean flag) {
        if (class1 == null || class1 == java/lang/Object)
            serializationconfig = new Dynamic();
        else
        if (class1 == java/lang/String)
            serializationconfig = DEFAULT_STRING_SERIALIZER;
        else
        if (class1.isPrimitive() || java/lang/Number.isAssignableFrom(class1))
            serializationconfig = DEFAULT_KEY_SERIALIZER;
        else
        if (class1 == java/lang/Class)
            serializationconfig = new Default(3, class1);
        else
        if (java/util/Date.isAssignableFrom(class1))
            serializationconfig = new Default(1, class1);
        else
        if (java/util/Calendar.isAssignableFrom(class1))
            serializationconfig = new Default(2, class1);
        else
        if (class1 == java/util/UUID)
            serializationconfig = new Default(5, class1);
        else
        if (flag)
            serializationconfig = DEFAULT_KEY_SERIALIZER;
        else
            serializationconfig = null;
        return serializationconfig;
    }

}
