// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.introspect.*;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsonschema.JsonSchema;
import com.fasterxml.jackson.databind.jsonschema.SchemaAware;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
import com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.Serializable;
import java.lang.annotation.Annotation;
import java.lang.reflect.*;
import java.util.HashMap;

// Referenced classes of package com.fasterxml.jackson.databind.ser:
//            PropertyWriter

public class BeanPropertyWriter extends PropertyWriter
    implements Serializable {

    public static final Object MARKER_FOR_EMPTY;
    private static final long serialVersionUID = 1L;
    protected transient Method _accessorMethod;
    protected final JavaType _cfgSerializationType;
    protected final transient Annotations _contextAnnotations;
    protected final JavaType _declaredType;
    protected transient PropertySerializerMap _dynamicSerializers;
    protected transient Field _field;
    protected final Class _includeInViews[];
    protected transient HashMap _internalSettings;
    protected final AnnotatedMember _member;
    protected final SerializedString _name;
    protected JavaType _nonTrivialBaseType;
    protected JsonSerializer _nullSerializer;
    protected JsonSerializer _serializer;
    protected final boolean _suppressNulls;
    protected final Object _suppressableValue;
    protected TypeSerializer _typeSerializer;
    protected final PropertyName _wrapperName;

    protected BeanPropertyWriter() {
        super(PropertyMetadata.STD_REQUIRED_OR_OPTIONAL);
        _member = null;
        _contextAnnotations = null;
        _name = null;
        _wrapperName = null;
        _includeInViews = null;
        _declaredType = null;
        _serializer = null;
        _dynamicSerializers = null;
        _typeSerializer = null;
        _cfgSerializationType = null;
        _accessorMethod = null;
        _field = null;
        _suppressNulls = false;
        _suppressableValue = null;
        _nullSerializer = null;
    }

    public BeanPropertyWriter(BeanPropertyDefinition beanpropertydefinition, AnnotatedMember annotatedmember, Annotations annotations, JavaType javatype, JsonSerializer jsonserializer, TypeSerializer typeserializer, JavaType javatype1, 
            boolean flag, Object obj) {
        super(beanpropertydefinition);
        _member = annotatedmember;
        _contextAnnotations = annotations;
        _name = new SerializedString(beanpropertydefinition.getName());
        _wrapperName = beanpropertydefinition.getWrapperName();
        _includeInViews = beanpropertydefinition.findViews();
        _declaredType = javatype;
        _serializer = jsonserializer;
        if (jsonserializer == null)
            beanpropertydefinition = PropertySerializerMap.emptyForProperties();
        else
            beanpropertydefinition = null;
        _dynamicSerializers = beanpropertydefinition;
        _typeSerializer = typeserializer;
        _cfgSerializationType = javatype1;
        if (annotatedmember instanceof AnnotatedField) {
            _accessorMethod = null;
            _field = (Field)annotatedmember.getMember();
        } else
        if (annotatedmember instanceof AnnotatedMethod) {
            _accessorMethod = (Method)annotatedmember.getMember();
            _field = null;
        } else {
            _accessorMethod = null;
            _field = null;
        }
        _suppressNulls = flag;
        _suppressableValue = obj;
        _nullSerializer = null;
    }

    protected BeanPropertyWriter(BeanPropertyWriter beanpropertywriter) {
        this(beanpropertywriter, beanpropertywriter._name);
    }

    protected BeanPropertyWriter(BeanPropertyWriter beanpropertywriter, SerializedString serializedstring) {
        super(beanpropertywriter);
        _name = serializedstring;
        _wrapperName = beanpropertywriter._wrapperName;
        _member = beanpropertywriter._member;
        _contextAnnotations = beanpropertywriter._contextAnnotations;
        _declaredType = beanpropertywriter._declaredType;
        _accessorMethod = beanpropertywriter._accessorMethod;
        _field = beanpropertywriter._field;
        _serializer = beanpropertywriter._serializer;
        _nullSerializer = beanpropertywriter._nullSerializer;
        if (beanpropertywriter._internalSettings != null)
            _internalSettings = new HashMap(beanpropertywriter._internalSettings);
        _cfgSerializationType = beanpropertywriter._cfgSerializationType;
        _dynamicSerializers = beanpropertywriter._dynamicSerializers;
        _suppressNulls = beanpropertywriter._suppressNulls;
        _suppressableValue = beanpropertywriter._suppressableValue;
        _includeInViews = beanpropertywriter._includeInViews;
        _typeSerializer = beanpropertywriter._typeSerializer;
        _nonTrivialBaseType = beanpropertywriter._nonTrivialBaseType;
    }

    protected BeanPropertyWriter(BeanPropertyWriter beanpropertywriter, PropertyName propertyname) {
        super(beanpropertywriter);
        _name = new SerializedString(propertyname.getSimpleName());
        _wrapperName = beanpropertywriter._wrapperName;
        _contextAnnotations = beanpropertywriter._contextAnnotations;
        _declaredType = beanpropertywriter._declaredType;
        _member = beanpropertywriter._member;
        _accessorMethod = beanpropertywriter._accessorMethod;
        _field = beanpropertywriter._field;
        _serializer = beanpropertywriter._serializer;
        _nullSerializer = beanpropertywriter._nullSerializer;
        if (beanpropertywriter._internalSettings != null)
            _internalSettings = new HashMap(beanpropertywriter._internalSettings);
        _cfgSerializationType = beanpropertywriter._cfgSerializationType;
        _dynamicSerializers = beanpropertywriter._dynamicSerializers;
        _suppressNulls = beanpropertywriter._suppressNulls;
        _suppressableValue = beanpropertywriter._suppressableValue;
        _includeInViews = beanpropertywriter._includeInViews;
        _typeSerializer = beanpropertywriter._typeSerializer;
        _nonTrivialBaseType = beanpropertywriter._nonTrivialBaseType;
    }

    protected void _depositSchemaProperty(ObjectNode objectnode, JsonNode jsonnode) {
        objectnode.set(getName(), jsonnode);
    }

    protected JsonSerializer _findAndAddDynamic(PropertySerializerMap propertyserializermap, Class class1, SerializerProvider serializerprovider) {
        if (_nonTrivialBaseType != null)
            class1 = propertyserializermap.findAndAddPrimarySerializer(serializerprovider.constructSpecializedType(_nonTrivialBaseType, class1), serializerprovider, this);
        else
            class1 = propertyserializermap.findAndAddPrimarySerializer(class1, serializerprovider, this);
        if (propertyserializermap != ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (class1)).map)
            _dynamicSerializers = ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (class1)).map;
        return ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (class1)).serializer;
    }

    protected boolean _handleSelfReference(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, JsonSerializer jsonserializer) {
        if (serializerprovider.isEnabled(SerializationFeature.FAIL_ON_SELF_REFERENCES) && !jsonserializer.usesObjectId() && (jsonserializer instanceof BeanSerializerBase))
            throw JsonMappingException.from(jsongenerator, "Direct self-reference leading to cycle");
        else
            return false;
    }

    protected BeanPropertyWriter _new(PropertyName propertyname) {
        return new BeanPropertyWriter(this, propertyname);
    }

    public void assignNullSerializer(JsonSerializer jsonserializer) {
        if (_nullSerializer != null && _nullSerializer != jsonserializer) {
            throw new IllegalStateException("Can not override null serializer");
        } else {
            _nullSerializer = jsonserializer;
            return;
        }
    }

    public void assignSerializer(JsonSerializer jsonserializer) {
        if (_serializer != null && _serializer != jsonserializer) {
            throw new IllegalStateException("Can not override serializer");
        } else {
            _serializer = jsonserializer;
            return;
        }
    }

    public void assignTypeSerializer(TypeSerializer typeserializer) {
        _typeSerializer = typeserializer;
    }

    public void depositSchemaProperty(JsonObjectFormatVisitor jsonobjectformatvisitor, SerializerProvider serializerprovider) {
        if (jsonobjectformatvisitor != null)
            if (isRequired())
                jsonobjectformatvisitor.property(this);
            else
                jsonobjectformatvisitor.optionalProperty(this);
    }

    public void depositSchemaProperty(ObjectNode objectnode, SerializerProvider serializerprovider) {
        Object obj = getSerializationType();
        boolean flag;
        JsonSerializer jsonserializer;
        Type type;
        if (obj == null)
            obj = getType();
        else
            obj = ((JavaType) (obj)).getRawClass();
        type = (Type)obj;
        jsonserializer = getSerializer();
        obj = jsonserializer;
        if (jsonserializer == null)
            obj = serializerprovider.findValueSerializer(getType(), this);
        if (!isRequired())
            flag = true;
        else
            flag = false;
        if (obj instanceof SchemaAware)
            serializerprovider = ((SchemaAware)obj).getSchema(serializerprovider, type, flag);
        else
            serializerprovider = JsonSchema.getDefaultSchemaNode();
        _depositSchemaProperty(objectnode, serializerprovider);
    }

    public final Object get(Object obj) {
        if (_accessorMethod == null)
            obj = _field.get(obj);
        else
            obj = _accessorMethod.invoke(obj, new Object[0]);
        return obj;
    }

    public Annotation getAnnotation(Class class1) {
        if (_member == null)
            class1 = null;
        else
            class1 = _member.getAnnotation(class1);
        return class1;
    }

    public Annotation getContextAnnotation(Class class1) {
        if (_contextAnnotations == null)
            class1 = null;
        else
            class1 = _contextAnnotations.get(class1);
        return class1;
    }

    public PropertyName getFullName() {
        return new PropertyName(_name.getValue());
    }

    public Type getGenericPropertyType() {
        Type type;
        if (_accessorMethod != null)
            type = _accessorMethod.getGenericReturnType();
        else
        if (_field != null)
            type = _field.getGenericType();
        else
            type = null;
        return type;
    }

    public Object getInternalSetting(Object obj) {
        if (_internalSettings == null)
            obj = null;
        else
            obj = _internalSettings.get(obj);
        return obj;
    }

    public AnnotatedMember getMember() {
        return _member;
    }

    public String getName() {
        return _name.getValue();
    }

    public Class getPropertyType() {
        Class class1;
        if (_accessorMethod != null)
            class1 = _accessorMethod.getReturnType();
        else
        if (_field != null)
            class1 = _field.getType();
        else
            class1 = null;
        return class1;
    }

    public Class getRawSerializationType() {
        Class class1;
        if (_cfgSerializationType == null)
            class1 = null;
        else
            class1 = _cfgSerializationType.getRawClass();
        return class1;
    }

    public JavaType getSerializationType() {
        return _cfgSerializationType;
    }

    public SerializableString getSerializedName() {
        return _name;
    }

    public JsonSerializer getSerializer() {
        return _serializer;
    }

    public JavaType getType() {
        return _declaredType;
    }

    public TypeSerializer getTypeSerializer() {
        return _typeSerializer;
    }

    public Class[] getViews() {
        return _includeInViews;
    }

    public PropertyName getWrapperName() {
        return _wrapperName;
    }

    public boolean hasNullSerializer() {
        boolean flag;
        if (_nullSerializer != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean hasSerializer() {
        boolean flag;
        if (_serializer != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean isUnwrapping() {
        return false;
    }

    Object readResolve() {
        if (!(_member instanceof AnnotatedField)) goto _L2; else goto _L1
_L1:
        _accessorMethod = null;
        _field = (Field)_member.getMember();
_L4:
        if (_serializer == null)
            _dynamicSerializers = PropertySerializerMap.emptyForProperties();
        return this;
_L2:
        if (_member instanceof AnnotatedMethod) {
            _accessorMethod = (Method)_member.getMember();
            _field = null;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public Object removeInternalSetting(Object obj) {
        if (_internalSettings != null) {
            Object obj1 = _internalSettings.remove(obj);
            obj = obj1;
            if (_internalSettings.size() == 0) {
                _internalSettings = null;
                obj = obj1;
            }
        } else {
            obj = null;
        }
        return obj;
    }

    public BeanPropertyWriter rename(NameTransformer nametransformer) {
        nametransformer = nametransformer.transform(_name.getValue());
        if (nametransformer.equals(_name.toString()))
            nametransformer = this;
        else
            nametransformer = _new(PropertyName.construct(nametransformer));
        return nametransformer;
    }

    public void serializeAsElement(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        Object obj1;
        if (_accessorMethod == null)
            obj1 = _field.get(obj);
        else
            obj1 = _accessorMethod.invoke(obj, new Object[0]);
        if (obj1 != null) goto _L2; else goto _L1
_L1:
        if (_nullSerializer != null)
            _nullSerializer.serialize(null, jsongenerator, serializerprovider);
        else
            jsongenerator.writeNull();
_L4:
        return;
_L2:
        JsonSerializer jsonserializer1 = _serializer;
        JsonSerializer jsonserializer = jsonserializer1;
        if (jsonserializer1 == null) {
            Class class1 = obj1.getClass();
            PropertySerializerMap propertyserializermap = _dynamicSerializers;
            JsonSerializer jsonserializer2 = propertyserializermap.serializerFor(class1);
            jsonserializer = jsonserializer2;
            if (jsonserializer2 == null)
                jsonserializer = _findAndAddDynamic(propertyserializermap, class1, serializerprovider);
        }
        if (_suppressableValue != null)
            if (MARKER_FOR_EMPTY == _suppressableValue) {
                if (jsonserializer.isEmpty(serializerprovider, obj1)) {
                    serializeAsPlaceholder(obj, jsongenerator, serializerprovider);
                    continue; /* Loop/switch isn't completed */
                }
            } else
            if (_suppressableValue.equals(obj1)) {
                serializeAsPlaceholder(obj, jsongenerator, serializerprovider);
                continue; /* Loop/switch isn't completed */
            }
        if (obj1 != obj || !_handleSelfReference(obj, jsongenerator, serializerprovider, jsonserializer))
            if (_typeSerializer == null)
                jsonserializer.serialize(obj1, jsongenerator, serializerprovider);
            else
                jsonserializer.serializeWithType(obj1, jsongenerator, serializerprovider, _typeSerializer);
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void serializeAsField(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        Object obj1;
        if (_accessorMethod == null)
            obj1 = _field.get(obj);
        else
            obj1 = _accessorMethod.invoke(obj, new Object[0]);
        if (obj1 != null) goto _L2; else goto _L1
_L1:
        if (_nullSerializer != null) {
            jsongenerator.writeFieldName(_name);
            _nullSerializer.serialize(null, jsongenerator, serializerprovider);
        }
_L4:
        return;
_L2:
        JsonSerializer jsonserializer1 = _serializer;
        JsonSerializer jsonserializer = jsonserializer1;
        if (jsonserializer1 == null) {
            Class class1 = obj1.getClass();
            PropertySerializerMap propertyserializermap = _dynamicSerializers;
            JsonSerializer jsonserializer2 = propertyserializermap.serializerFor(class1);
            jsonserializer = jsonserializer2;
            if (jsonserializer2 == null)
                jsonserializer = _findAndAddDynamic(propertyserializermap, class1, serializerprovider);
        }
        if ((_suppressableValue == null || (MARKER_FOR_EMPTY != _suppressableValue ? !_suppressableValue.equals(obj1) : !jsonserializer.isEmpty(serializerprovider, obj1))) && (obj1 != obj || !_handleSelfReference(obj, jsongenerator, serializerprovider, jsonserializer))) {
            jsongenerator.writeFieldName(_name);
            if (_typeSerializer == null)
                jsonserializer.serialize(obj1, jsongenerator, serializerprovider);
            else
                jsonserializer.serializeWithType(obj1, jsongenerator, serializerprovider, _typeSerializer);
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void serializeAsOmittedField(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        if (!jsongenerator.canOmitFields())
            jsongenerator.writeOmittedField(_name.getValue());
    }

    public void serializeAsPlaceholder(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        if (_nullSerializer != null)
            _nullSerializer.serialize(null, jsongenerator, serializerprovider);
        else
            jsongenerator.writeNull();
    }

    public Object setInternalSetting(Object obj, Object obj1) {
        if (_internalSettings == null)
            _internalSettings = new HashMap();
        return _internalSettings.put(obj, obj1);
    }

    public void setNonTrivialBaseType(JavaType javatype) {
        _nonTrivialBaseType = javatype;
    }

    public String toString() {
        StringBuilder stringbuilder = new StringBuilder(40);
        stringbuilder.append("property '").append(getName()).append("' (");
        if (_accessorMethod != null)
            stringbuilder.append("via method ").append(_accessorMethod.getDeclaringClass().getName()).append("#").append(_accessorMethod.getName());
        else
        if (_field != null)
            stringbuilder.append("field \"").append(_field.getDeclaringClass().getName()).append("#").append(_field.getName());
        else
            stringbuilder.append("virtual");
        if (_serializer == null)
            stringbuilder.append(", no static serializer");
        else
            stringbuilder.append((new StringBuilder()).append(", static serializer of type ").append(_serializer.getClass().getName()).toString());
        stringbuilder.append(')');
        return stringbuilder.toString();
    }

    public BeanPropertyWriter unwrappingWriter(NameTransformer nametransformer) {
        return new UnwrappingBeanPropertyWriter(this, nametransformer);
    }

    public boolean willSuppressNulls() {
        return _suppressNulls;
    }

    public boolean wouldConflictWithName(PropertyName propertyname) {
        boolean flag;
        if (_wrapperName != null)
            flag = _wrapperName.equals(propertyname);
        else
        if (propertyname.hasSimpleName(_name.getValue()) && !propertyname.hasNamespace())
            flag = true;
        else
            flag = false;
        return flag;
    }

    static  {
        MARKER_FOR_EMPTY = com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY;
    }
}
