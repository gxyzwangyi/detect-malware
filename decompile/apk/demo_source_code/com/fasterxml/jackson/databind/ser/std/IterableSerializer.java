// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.std;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.ContainerSerializer;
import java.util.Iterator;

// Referenced classes of package com.fasterxml.jackson.databind.ser.std:
//            AsArraySerializerBase

public class IterableSerializer extends AsArraySerializerBase {

    public IterableSerializer(JavaType javatype, boolean flag, TypeSerializer typeserializer) {
        super(java/lang/Iterable, javatype, flag, typeserializer, null);
    }

    public IterableSerializer(IterableSerializer iterableserializer, BeanProperty beanproperty, TypeSerializer typeserializer, JsonSerializer jsonserializer, Boolean boolean1) {
        super(iterableserializer, beanproperty, typeserializer, jsonserializer, boolean1);
    }

    public ContainerSerializer _withValueTypeSerializer(TypeSerializer typeserializer) {
        return new IterableSerializer(this, _property, typeserializer, _elementSerializer, _unwrapSingle);
    }

    public boolean hasSingleElement(Iterable iterable) {
        if (iterable == null) goto _L2; else goto _L1
_L1:
        iterable = iterable.iterator();
        if (!iterable.hasNext()) goto _L2; else goto _L3
_L3:
        iterable.next();
        if (iterable.hasNext()) goto _L2; else goto _L4
_L4:
        boolean flag = true;
_L6:
        return flag;
_L2:
        flag = false;
        if (true) goto _L6; else goto _L5
_L5:
    }

    public volatile boolean hasSingleElement(Object obj) {
        return hasSingleElement((Iterable)obj);
    }

    public boolean isEmpty(SerializerProvider serializerprovider, Iterable iterable) {
        boolean flag;
        if (iterable == null || !iterable.iterator().hasNext())
            flag = true;
        else
            flag = false;
        return flag;
    }

    public volatile boolean isEmpty(SerializerProvider serializerprovider, Object obj) {
        return isEmpty(serializerprovider, (Iterable)obj);
    }

    public final void serialize(Iterable iterable, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        if ((_unwrapSingle == null && serializerprovider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED) || _unwrapSingle == Boolean.TRUE) && hasSingleElement(iterable)) {
            serializeContents(iterable, jsongenerator, serializerprovider);
        } else {
            jsongenerator.writeStartArray();
            serializeContents(iterable, jsongenerator, serializerprovider);
            jsongenerator.writeEndArray();
        }
    }

    public volatile void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        serialize((Iterable)obj, jsongenerator, serializerprovider);
    }

    public void serializeContents(Iterable iterable, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        Class class1 = null;
        Iterator iterator = iterable.iterator();
        if (iterator.hasNext()) {
            TypeSerializer typeserializer = _valueTypeSerializer;
            iterable = null;
            do {
                Object obj2 = iterator.next();
                if (obj2 == null) {
                    serializerprovider.defaultSerializeNull(jsongenerator);
                } else {
                    JsonSerializer jsonserializer = _elementSerializer;
                    Class class2 = class1;
                    Object obj = iterable;
                    Object obj1 = jsonserializer;
                    if (jsonserializer == null) {
                        class2 = obj2.getClass();
                        if (class2 == class1) {
                            obj1 = iterable;
                            obj = iterable;
                            class2 = class1;
                        } else {
                            obj = serializerprovider.findValueSerializer(class2, _property);
                            obj1 = obj;
                        }
                    }
                    if (typeserializer == null) {
                        ((JsonSerializer) (obj1)).serialize(obj2, jsongenerator, serializerprovider);
                        class1 = class2;
                        iterable = ((Iterable) (obj));
                    } else {
                        ((JsonSerializer) (obj1)).serializeWithType(obj2, jsongenerator, serializerprovider, typeserializer);
                        class1 = class2;
                        iterable = ((Iterable) (obj));
                    }
                }
            } while (iterator.hasNext());
        }
    }

    public volatile void serializeContents(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        serializeContents((Iterable)obj, jsongenerator, serializerprovider);
    }

    public volatile AsArraySerializerBase withResolved(BeanProperty beanproperty, TypeSerializer typeserializer, JsonSerializer jsonserializer, Boolean boolean1) {
        return withResolved(beanproperty, typeserializer, jsonserializer, boolean1);
    }

    public IterableSerializer withResolved(BeanProperty beanproperty, TypeSerializer typeserializer, JsonSerializer jsonserializer, Boolean boolean1) {
        return new IterableSerializer(this, beanproperty, typeserializer, jsonserializer, boolean1);
    }
}
