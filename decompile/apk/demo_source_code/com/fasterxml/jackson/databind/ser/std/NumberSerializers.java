// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.std;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.ContextualSerializer;
import java.lang.reflect.Type;
import java.util.Map;

// Referenced classes of package com.fasterxml.jackson.databind.ser.std:
//            StdScalarSerializer, ToStringSerializer

public class NumberSerializers {
    protected static abstract class Base extends StdScalarSerializer
        implements ContextualSerializer {

        protected final boolean _isInt;
        protected final com.fasterxml.jackson.core.JsonParser.NumberType _numberType;
        protected final String _schemaType;

        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
            if (_isInt)
                visitIntFormat(jsonformatvisitorwrapper, javatype, _numberType);
            else
                visitFloatFormat(jsonformatvisitorwrapper, javatype, _numberType);
        }

        public JsonSerializer createContextual(SerializerProvider serializerprovider, BeanProperty beanproperty) {
            Object obj = this;
            if (beanproperty == null) goto _L2; else goto _L1
_L1:
            beanproperty = beanproperty.getMember();
            obj = this;
            if (beanproperty == null) goto _L2; else goto _L3
_L3:
            serializerprovider = serializerprovider.getAnnotationIntrospector().findFormat(beanproperty);
            obj = this;
            if (serializerprovider == null) goto _L2; else goto _L4
_L4:
            static class _cls1 {

                static final int $SwitchMap$com$fasterxml$jackson$annotation$JsonFormat$Shape[];

                static  {
                    $SwitchMap$com$fasterxml$jackson$annotation$JsonFormat$Shape = new int[com.fasterxml.jackson.annotation.JsonFormat.Shape.values().length];
                    $SwitchMap$com$fasterxml$jackson$annotation$JsonFormat$Shape[com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING.ordinal()] = 1;
_L2:
                    return;
                    NoSuchFieldError nosuchfielderror;
                    nosuchfielderror;
                    if (true) goto _L2; else goto _L1
_L1:
                }
            }

            _cls1..SwitchMap.com.fasterxml.jackson.annotation.JsonFormat.Shape[serializerprovider.getShape().ordinal()];
            JVM INSTR tableswitch 1 1: default 64
        //                       1 68;
               goto _L5 _L6
_L5:
            obj = this;
_L2:
            return ((JsonSerializer) (obj));
_L6:
            obj = ToStringSerializer.instance;
            if (true) goto _L2; else goto _L7
_L7:
        }

        public JsonNode getSchema(SerializerProvider serializerprovider, Type type) {
            return createSchemaNode(_schemaType, true);
        }

        protected Base(Class class1, com.fasterxml.jackson.core.JsonParser.NumberType numbertype, String s) {
            boolean flag = false;
            super(class1, false);
            _numberType = numbertype;
            _schemaType = s;
            if (numbertype == com.fasterxml.jackson.core.JsonParser.NumberType.INT || numbertype == com.fasterxml.jackson.core.JsonParser.NumberType.LONG || numbertype == com.fasterxml.jackson.core.JsonParser.NumberType.BIG_INTEGER)
                flag = true;
            _isInt = flag;
        }
    }

    public static final class DoubleSerializer extends Base {

        static final DoubleSerializer instance = new DoubleSerializer();

        public volatile void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
            super.acceptJsonFormatVisitor(jsonformatvisitorwrapper, javatype);
        }

        public volatile JsonSerializer createContextual(SerializerProvider serializerprovider, BeanProperty beanproperty) {
            return super.createContextual(serializerprovider, beanproperty);
        }

        public volatile JsonNode getSchema(SerializerProvider serializerprovider, Type type) {
            return super.getSchema(serializerprovider, type);
        }

        public void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
            jsongenerator.writeNumber(((Double)obj).doubleValue());
        }

        public void serializeWithType(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, TypeSerializer typeserializer) {
            serialize(obj, jsongenerator, serializerprovider);
        }


        public DoubleSerializer() {
            super(java/lang/Double, com.fasterxml.jackson.core.JsonParser.NumberType.DOUBLE, "number");
        }
    }

    public static final class FloatSerializer extends Base {

        static final FloatSerializer instance = new FloatSerializer();

        public volatile void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
            super.acceptJsonFormatVisitor(jsonformatvisitorwrapper, javatype);
        }

        public volatile JsonSerializer createContextual(SerializerProvider serializerprovider, BeanProperty beanproperty) {
            return super.createContextual(serializerprovider, beanproperty);
        }

        public volatile JsonNode getSchema(SerializerProvider serializerprovider, Type type) {
            return super.getSchema(serializerprovider, type);
        }

        public void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
            jsongenerator.writeNumber(((Float)obj).floatValue());
        }


        public FloatSerializer() {
            super(java/lang/Float, com.fasterxml.jackson.core.JsonParser.NumberType.FLOAT, "number");
        }
    }

    public static final class IntLikeSerializer extends Base {

        static final IntLikeSerializer instance = new IntLikeSerializer();

        public volatile void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
            super.acceptJsonFormatVisitor(jsonformatvisitorwrapper, javatype);
        }

        public volatile JsonSerializer createContextual(SerializerProvider serializerprovider, BeanProperty beanproperty) {
            return super.createContextual(serializerprovider, beanproperty);
        }

        public volatile JsonNode getSchema(SerializerProvider serializerprovider, Type type) {
            return super.getSchema(serializerprovider, type);
        }

        public void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
            jsongenerator.writeNumber(((Number)obj).intValue());
        }


        public IntLikeSerializer() {
            super(java/lang/Number, com.fasterxml.jackson.core.JsonParser.NumberType.INT, "integer");
        }
    }

    public static final class IntegerSerializer extends Base {

        public volatile void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
            super.acceptJsonFormatVisitor(jsonformatvisitorwrapper, javatype);
        }

        public volatile JsonSerializer createContextual(SerializerProvider serializerprovider, BeanProperty beanproperty) {
            return super.createContextual(serializerprovider, beanproperty);
        }

        public volatile JsonNode getSchema(SerializerProvider serializerprovider, Type type) {
            return super.getSchema(serializerprovider, type);
        }

        public void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
            jsongenerator.writeNumber(((Integer)obj).intValue());
        }

        public void serializeWithType(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, TypeSerializer typeserializer) {
            serialize(obj, jsongenerator, serializerprovider);
        }

        public IntegerSerializer() {
            super(java/lang/Integer, com.fasterxml.jackson.core.JsonParser.NumberType.INT, "integer");
        }
    }

    public static final class LongSerializer extends Base {

        static final LongSerializer instance = new LongSerializer();

        public volatile void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
            super.acceptJsonFormatVisitor(jsonformatvisitorwrapper, javatype);
        }

        public volatile JsonSerializer createContextual(SerializerProvider serializerprovider, BeanProperty beanproperty) {
            return super.createContextual(serializerprovider, beanproperty);
        }

        public volatile JsonNode getSchema(SerializerProvider serializerprovider, Type type) {
            return super.getSchema(serializerprovider, type);
        }

        public void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
            jsongenerator.writeNumber(((Long)obj).longValue());
        }


        public LongSerializer() {
            super(java/lang/Long, com.fasterxml.jackson.core.JsonParser.NumberType.LONG, "number");
        }
    }

    public static final class ShortSerializer extends Base {

        static final ShortSerializer instance = new ShortSerializer();

        public volatile void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
            super.acceptJsonFormatVisitor(jsonformatvisitorwrapper, javatype);
        }

        public volatile JsonSerializer createContextual(SerializerProvider serializerprovider, BeanProperty beanproperty) {
            return super.createContextual(serializerprovider, beanproperty);
        }

        public volatile JsonNode getSchema(SerializerProvider serializerprovider, Type type) {
            return super.getSchema(serializerprovider, type);
        }

        public void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
            jsongenerator.writeNumber(((Short)obj).shortValue());
        }


        public ShortSerializer() {
            super(java/lang/Short, com.fasterxml.jackson.core.JsonParser.NumberType.INT, "number");
        }
    }


    protected NumberSerializers() {
    }

    public static void addAll(Map map) {
        IntegerSerializer integerserializer = new IntegerSerializer();
        map.put(java/lang/Integer.getName(), integerserializer);
        map.put(Integer.TYPE.getName(), integerserializer);
        map.put(java/lang/Long.getName(), LongSerializer.instance);
        map.put(Long.TYPE.getName(), LongSerializer.instance);
        map.put(java/lang/Byte.getName(), IntLikeSerializer.instance);
        map.put(Byte.TYPE.getName(), IntLikeSerializer.instance);
        map.put(java/lang/Short.getName(), ShortSerializer.instance);
        map.put(Short.TYPE.getName(), ShortSerializer.instance);
        map.put(java/lang/Float.getName(), FloatSerializer.instance);
        map.put(Float.TYPE.getName(), FloatSerializer.instance);
        map.put(java/lang/Double.getName(), DoubleSerializer.instance);
        map.put(Double.TYPE.getName(), DoubleSerializer.instance);
    }
}
