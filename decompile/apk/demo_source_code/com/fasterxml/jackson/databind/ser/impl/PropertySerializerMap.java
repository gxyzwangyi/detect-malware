// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.impl;

import com.fasterxml.jackson.databind.*;
import java.util.Arrays;

public abstract class PropertySerializerMap {
    private static final class Double extends PropertySerializerMap {

        private final JsonSerializer _serializer1;
        private final JsonSerializer _serializer2;
        private final Class _type1;
        private final Class _type2;

        public PropertySerializerMap newWith(Class class1, JsonSerializer jsonserializer) {
            return new Multi(this, new TypeAndSerializer[] {
                new TypeAndSerializer(_type1, _serializer1), new TypeAndSerializer(_type2, _serializer2), new TypeAndSerializer(class1, jsonserializer)
            });
        }

        public JsonSerializer serializerFor(Class class1) {
            if (class1 == _type1)
                class1 = _serializer1;
            else
            if (class1 == _type2)
                class1 = _serializer2;
            else
                class1 = null;
            return class1;
        }

        public Double(PropertySerializerMap propertyserializermap, Class class1, JsonSerializer jsonserializer, Class class2, JsonSerializer jsonserializer1) {
            super(propertyserializermap);
            _type1 = class1;
            _serializer1 = jsonserializer;
            _type2 = class2;
            _serializer2 = jsonserializer1;
        }
    }

    private static final class Empty extends PropertySerializerMap {

        public static final Empty FOR_PROPERTIES = new Empty(false);
        public static final Empty FOR_ROOT_VALUES = new Empty(true);

        public PropertySerializerMap newWith(Class class1, JsonSerializer jsonserializer) {
            return new Single(this, class1, jsonserializer);
        }

        public JsonSerializer serializerFor(Class class1) {
            return null;
        }


        protected Empty(boolean flag) {
            super(flag);
        }
    }

    private static final class Multi extends PropertySerializerMap {

        private static final int MAX_ENTRIES = 8;
        private final TypeAndSerializer _entries[];

        public PropertySerializerMap newWith(Class class1, JsonSerializer jsonserializer) {
            int i = _entries.length;
            Object obj;
            if (i == 8) {
                obj = this;
                if (_resetWhenFull)
                    obj = new Single(this, class1, jsonserializer);
            } else {
                obj = (TypeAndSerializer[])Arrays.copyOf(_entries, i + 1);
                obj[i] = new TypeAndSerializer(class1, jsonserializer);
                obj = new Multi(this, ((TypeAndSerializer []) (obj)));
            }
            return ((PropertySerializerMap) (obj));
        }

        public JsonSerializer serializerFor(Class class1) {
            int i;
            int j;
            i = 0;
            j = _entries.length;
_L3:
            TypeAndSerializer typeandserializer;
            if (i >= j)
                break MISSING_BLOCK_LABEL_44;
            typeandserializer = _entries[i];
            if (typeandserializer.type != class1) goto _L2; else goto _L1
_L1:
            class1 = typeandserializer.serializer;
_L4:
            return class1;
_L2:
            i++;
              goto _L3
            class1 = null;
              goto _L4
        }

        public Multi(PropertySerializerMap propertyserializermap, TypeAndSerializer atypeandserializer[]) {
            super(propertyserializermap);
            _entries = atypeandserializer;
        }
    }

    public static final class SerializerAndMapResult {

        public final PropertySerializerMap map;
        public final JsonSerializer serializer;

        public SerializerAndMapResult(JsonSerializer jsonserializer, PropertySerializerMap propertyserializermap) {
            serializer = jsonserializer;
            map = propertyserializermap;
        }
    }

    private static final class Single extends PropertySerializerMap {

        private final JsonSerializer _serializer;
        private final Class _type;

        public PropertySerializerMap newWith(Class class1, JsonSerializer jsonserializer) {
            return new Double(this, _type, _serializer, class1, jsonserializer);
        }

        public JsonSerializer serializerFor(Class class1) {
            if (class1 == _type)
                class1 = _serializer;
            else
                class1 = null;
            return class1;
        }

        public Single(PropertySerializerMap propertyserializermap, Class class1, JsonSerializer jsonserializer) {
            super(propertyserializermap);
            _type = class1;
            _serializer = jsonserializer;
        }
    }

    private static final class TypeAndSerializer {

        public final JsonSerializer serializer;
        public final Class type;

        public TypeAndSerializer(Class class1, JsonSerializer jsonserializer) {
            type = class1;
            serializer = jsonserializer;
        }
    }


    protected final boolean _resetWhenFull;

    protected PropertySerializerMap(PropertySerializerMap propertyserializermap) {
        _resetWhenFull = propertyserializermap._resetWhenFull;
    }

    protected PropertySerializerMap(boolean flag) {
        _resetWhenFull = flag;
    }

    public static PropertySerializerMap emptyForProperties() {
        return Empty.FOR_PROPERTIES;
    }

    public static PropertySerializerMap emptyForRootValues() {
        return Empty.FOR_ROOT_VALUES;
    }

    public static PropertySerializerMap emptyMap() {
        return emptyForProperties();
    }

    public final SerializerAndMapResult addSerializer(JavaType javatype, JsonSerializer jsonserializer) {
        return new SerializerAndMapResult(jsonserializer, newWith(javatype.getRawClass(), jsonserializer));
    }

    public final SerializerAndMapResult addSerializer(Class class1, JsonSerializer jsonserializer) {
        return new SerializerAndMapResult(jsonserializer, newWith(class1, jsonserializer));
    }

    public final SerializerAndMapResult findAndAddKeySerializer(Class class1, SerializerProvider serializerprovider, BeanProperty beanproperty) {
        serializerprovider = serializerprovider.findKeySerializer(class1, beanproperty);
        return new SerializerAndMapResult(serializerprovider, newWith(class1, serializerprovider));
    }

    public final SerializerAndMapResult findAndAddPrimarySerializer(JavaType javatype, SerializerProvider serializerprovider, BeanProperty beanproperty) {
        serializerprovider = serializerprovider.findPrimaryPropertySerializer(javatype, beanproperty);
        return new SerializerAndMapResult(serializerprovider, newWith(javatype.getRawClass(), serializerprovider));
    }

    public final SerializerAndMapResult findAndAddPrimarySerializer(Class class1, SerializerProvider serializerprovider, BeanProperty beanproperty) {
        serializerprovider = serializerprovider.findPrimaryPropertySerializer(class1, beanproperty);
        return new SerializerAndMapResult(serializerprovider, newWith(class1, serializerprovider));
    }

    public final SerializerAndMapResult findAndAddRootValueSerializer(JavaType javatype, SerializerProvider serializerprovider) {
        serializerprovider = serializerprovider.findTypedValueSerializer(javatype, false, null);
        return new SerializerAndMapResult(serializerprovider, newWith(javatype.getRawClass(), serializerprovider));
    }

    public final SerializerAndMapResult findAndAddRootValueSerializer(Class class1, SerializerProvider serializerprovider) {
        serializerprovider = serializerprovider.findTypedValueSerializer(class1, false, null);
        return new SerializerAndMapResult(serializerprovider, newWith(class1, serializerprovider));
    }

    public final SerializerAndMapResult findAndAddSecondarySerializer(JavaType javatype, SerializerProvider serializerprovider, BeanProperty beanproperty) {
        serializerprovider = serializerprovider.findValueSerializer(javatype, beanproperty);
        return new SerializerAndMapResult(serializerprovider, newWith(javatype.getRawClass(), serializerprovider));
    }

    public final SerializerAndMapResult findAndAddSecondarySerializer(Class class1, SerializerProvider serializerprovider, BeanProperty beanproperty) {
        serializerprovider = serializerprovider.findValueSerializer(class1, beanproperty);
        return new SerializerAndMapResult(serializerprovider, newWith(class1, serializerprovider));
    }

    public abstract PropertySerializerMap newWith(Class class1, JsonSerializer jsonserializer);

    public abstract JsonSerializer serializerFor(Class class1);
}
