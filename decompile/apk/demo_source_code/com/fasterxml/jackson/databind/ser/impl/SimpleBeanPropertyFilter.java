// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.impl;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.*;
import java.io.Serializable;
import java.util.*;

public class SimpleBeanPropertyFilter
    implements BeanPropertyFilter, PropertyFilter {
    public static class FilterExceptFilter extends SimpleBeanPropertyFilter
        implements Serializable {

        private static final long serialVersionUID = 1L;
        protected final Set _propertiesToInclude;

        protected boolean include(BeanPropertyWriter beanpropertywriter) {
            return _propertiesToInclude.contains(beanpropertywriter.getName());
        }

        protected boolean include(PropertyWriter propertywriter) {
            return _propertiesToInclude.contains(propertywriter.getName());
        }

        public FilterExceptFilter(Set set) {
            _propertiesToInclude = set;
        }
    }

    public static class SerializeExceptFilter extends SimpleBeanPropertyFilter
        implements Serializable {

        static final SerializeExceptFilter INCLUDE_ALL = new SerializeExceptFilter();
        private static final long serialVersionUID = 1L;
        protected final Set _propertiesToExclude;

        protected boolean include(BeanPropertyWriter beanpropertywriter) {
            boolean flag;
            if (!_propertiesToExclude.contains(beanpropertywriter.getName()))
                flag = true;
            else
                flag = false;
            return flag;
        }

        protected boolean include(PropertyWriter propertywriter) {
            boolean flag;
            if (!_propertiesToExclude.contains(propertywriter.getName()))
                flag = true;
            else
                flag = false;
            return flag;
        }


        SerializeExceptFilter() {
            _propertiesToExclude = Collections.emptySet();
        }

        public SerializeExceptFilter(Set set) {
            _propertiesToExclude = set;
        }
    }


    protected SimpleBeanPropertyFilter() {
    }

    public static SimpleBeanPropertyFilter filterOutAllExcept(Set set) {
        return new FilterExceptFilter(set);
    }

    public static transient SimpleBeanPropertyFilter filterOutAllExcept(String as[]) {
        HashSet hashset = new HashSet(as.length);
        Collections.addAll(hashset, as);
        return new FilterExceptFilter(hashset);
    }

    public static PropertyFilter from(BeanPropertyFilter beanpropertyfilter) {
        return new PropertyFilter(beanpropertyfilter) {

            final BeanPropertyFilter val$src;

            public void depositSchemaProperty(PropertyWriter propertywriter, JsonObjectFormatVisitor jsonobjectformatvisitor, SerializerProvider serializerprovider) {
                src.depositSchemaProperty((BeanPropertyWriter)propertywriter, jsonobjectformatvisitor, serializerprovider);
            }

            public void depositSchemaProperty(PropertyWriter propertywriter, ObjectNode objectnode, SerializerProvider serializerprovider) {
                src.depositSchemaProperty((BeanPropertyWriter)propertywriter, objectnode, serializerprovider);
            }

            public void serializeAsElement(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, PropertyWriter propertywriter) {
                throw new UnsupportedOperationException();
            }

            public void serializeAsField(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, PropertyWriter propertywriter) {
                src.serializeAsField(obj, jsongenerator, serializerprovider, (BeanPropertyWriter)propertywriter);
            }

             {
                src = beanpropertyfilter;
                super();
            }
        }
;
    }

    public static SimpleBeanPropertyFilter serializeAll() {
        return SerializeExceptFilter.INCLUDE_ALL;
    }

    public static SimpleBeanPropertyFilter serializeAll(Set set) {
        return new FilterExceptFilter(set);
    }

    public static SimpleBeanPropertyFilter serializeAllExcept(Set set) {
        return new SerializeExceptFilter(set);
    }

    public static transient SimpleBeanPropertyFilter serializeAllExcept(String as[]) {
        HashSet hashset = new HashSet(as.length);
        Collections.addAll(hashset, as);
        return new SerializeExceptFilter(hashset);
    }

    public void depositSchemaProperty(BeanPropertyWriter beanpropertywriter, JsonObjectFormatVisitor jsonobjectformatvisitor, SerializerProvider serializerprovider) {
        if (include(beanpropertywriter))
            beanpropertywriter.depositSchemaProperty(jsonobjectformatvisitor, serializerprovider);
    }

    public void depositSchemaProperty(BeanPropertyWriter beanpropertywriter, ObjectNode objectnode, SerializerProvider serializerprovider) {
        if (include(beanpropertywriter))
            beanpropertywriter.depositSchemaProperty(objectnode, serializerprovider);
    }

    public void depositSchemaProperty(PropertyWriter propertywriter, JsonObjectFormatVisitor jsonobjectformatvisitor, SerializerProvider serializerprovider) {
        if (include(propertywriter))
            propertywriter.depositSchemaProperty(jsonobjectformatvisitor, serializerprovider);
    }

    public void depositSchemaProperty(PropertyWriter propertywriter, ObjectNode objectnode, SerializerProvider serializerprovider) {
        if (include(propertywriter))
            propertywriter.depositSchemaProperty(objectnode, serializerprovider);
    }

    protected boolean include(BeanPropertyWriter beanpropertywriter) {
        return true;
    }

    protected boolean include(PropertyWriter propertywriter) {
        return true;
    }

    protected boolean includeElement(Object obj) {
        return true;
    }

    public void serializeAsElement(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, PropertyWriter propertywriter) {
        if (includeElement(obj))
            propertywriter.serializeAsElement(obj, jsongenerator, serializerprovider);
    }

    public void serializeAsField(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, BeanPropertyWriter beanpropertywriter) {
        if (!include(beanpropertywriter)) goto _L2; else goto _L1
_L1:
        beanpropertywriter.serializeAsField(obj, jsongenerator, serializerprovider);
_L4:
        return;
_L2:
        if (!jsongenerator.canOmitFields())
            beanpropertywriter.serializeAsOmittedField(obj, jsongenerator, serializerprovider);
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void serializeAsField(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, PropertyWriter propertywriter) {
        if (!include(propertywriter)) goto _L2; else goto _L1
_L1:
        propertywriter.serializeAsField(obj, jsongenerator, serializerprovider);
_L4:
        return;
_L2:
        if (!jsongenerator.canOmitFields())
            propertywriter.serializeAsOmittedField(obj, jsongenerator, serializerprovider);
        if (true) goto _L4; else goto _L3
_L3:
    }
}
