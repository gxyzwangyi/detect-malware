// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.std;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.PropertyWriter;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.lang.annotation.Annotation;

public class MapProperty extends PropertyWriter {

    private static final long serialVersionUID = 1L;
    protected Object _key;
    protected JsonSerializer _keySerializer;
    protected final BeanProperty _property;
    protected final TypeSerializer _typeSerializer;
    protected JsonSerializer _valueSerializer;

    public MapProperty(TypeSerializer typeserializer, BeanProperty beanproperty) {
        PropertyMetadata propertymetadata;
        if (beanproperty == null)
            propertymetadata = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        else
            propertymetadata = beanproperty.getMetadata();
        super(propertymetadata);
        _typeSerializer = typeserializer;
        _property = beanproperty;
    }

    public void depositSchemaProperty(JsonObjectFormatVisitor jsonobjectformatvisitor, SerializerProvider serializerprovider) {
        if (_property != null)
            _property.depositSchemaProperty(jsonobjectformatvisitor, serializerprovider);
    }

    public void depositSchemaProperty(ObjectNode objectnode, SerializerProvider serializerprovider) {
    }

    public Annotation getAnnotation(Class class1) {
        if (_property == null)
            class1 = null;
        else
            class1 = _property.getAnnotation(class1);
        return class1;
    }

    public Annotation getContextAnnotation(Class class1) {
        if (_property == null)
            class1 = null;
        else
            class1 = _property.getContextAnnotation(class1);
        return class1;
    }

    public PropertyName getFullName() {
        return new PropertyName(getName());
    }

    public AnnotatedMember getMember() {
        AnnotatedMember annotatedmember;
        if (_property == null)
            annotatedmember = null;
        else
            annotatedmember = _property.getMember();
        return annotatedmember;
    }

    public String getName() {
        String s;
        if (_key instanceof String)
            s = (String)_key;
        else
            s = String.valueOf(_key);
        return s;
    }

    public JavaType getType() {
        JavaType javatype;
        if (_property == null)
            javatype = TypeFactory.unknownType();
        else
            javatype = _property.getType();
        return javatype;
    }

    public PropertyName getWrapperName() {
        PropertyName propertyname;
        if (_property == null)
            propertyname = null;
        else
            propertyname = _property.getWrapperName();
        return propertyname;
    }

    public void reset(Object obj, JsonSerializer jsonserializer, JsonSerializer jsonserializer1) {
        _key = obj;
        _keySerializer = jsonserializer;
        _valueSerializer = jsonserializer1;
    }

    public void serializeAsElement(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        if (_typeSerializer == null)
            _valueSerializer.serialize(obj, jsongenerator, serializerprovider);
        else
            _valueSerializer.serializeWithType(obj, jsongenerator, serializerprovider, _typeSerializer);
    }

    public void serializeAsField(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        _keySerializer.serialize(_key, jsongenerator, serializerprovider);
        if (_typeSerializer == null)
            _valueSerializer.serialize(obj, jsongenerator, serializerprovider);
        else
            _valueSerializer.serializeWithType(obj, jsongenerator, serializerprovider, _typeSerializer);
    }

    public void serializeAsOmittedField(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        if (!jsongenerator.canOmitFields())
            jsongenerator.writeOmittedField(getName());
    }

    public void serializeAsPlaceholder(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        jsongenerator.writeNull();
    }
}
