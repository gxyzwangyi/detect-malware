// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.std;

import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsonschema.JsonSerializableSchema;
import com.fasterxml.jackson.databind.jsonschema.SchemaAware;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.*;
import com.fasterxml.jackson.databind.ser.impl.*;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.*;
import java.lang.reflect.Type;
import java.util.*;

// Referenced classes of package com.fasterxml.jackson.databind.ser.std:
//            StdSerializer, EnumSerializer, StdDelegatingSerializer

public abstract class BeanSerializerBase extends StdSerializer
    implements JsonFormatVisitable, SchemaAware, ContextualSerializer, ResolvableSerializer {

    protected static final PropertyName NAME_FOR_OBJECT_REF = new PropertyName("#object-ref");
    protected static final BeanPropertyWriter NO_PROPS[] = new BeanPropertyWriter[0];
    protected final AnyGetterWriter _anyGetterWriter;
    protected final BeanPropertyWriter _filteredProps[];
    protected final ObjectIdWriter _objectIdWriter;
    protected final Object _propertyFilterId;
    protected final BeanPropertyWriter _props[];
    protected final com.fasterxml.jackson.annotation.JsonFormat.Shape _serializationShape;
    protected final AnnotatedMember _typeId;

    protected BeanSerializerBase(JavaType javatype, BeanSerializerBuilder beanserializerbuilder, BeanPropertyWriter abeanpropertywriter[], BeanPropertyWriter abeanpropertywriter1[]) {
        Object obj = null;
        super(javatype);
        _props = abeanpropertywriter;
        _filteredProps = abeanpropertywriter1;
        if (beanserializerbuilder == null) {
            _typeId = null;
            _anyGetterWriter = null;
            _propertyFilterId = null;
            _objectIdWriter = null;
            _serializationShape = null;
        } else {
            _typeId = beanserializerbuilder.getTypeId();
            _anyGetterWriter = beanserializerbuilder.getAnyGetter();
            _propertyFilterId = beanserializerbuilder.getFilterId();
            _objectIdWriter = beanserializerbuilder.getObjectIdWriter();
            javatype = beanserializerbuilder.getBeanDescription().findExpectedFormat(null);
            if (javatype == null)
                javatype = obj;
            else
                javatype = javatype.getShape();
            _serializationShape = javatype;
        }
    }

    protected BeanSerializerBase(BeanSerializerBase beanserializerbase) {
        this(beanserializerbase, beanserializerbase._props, beanserializerbase._filteredProps);
    }

    protected BeanSerializerBase(BeanSerializerBase beanserializerbase, ObjectIdWriter objectidwriter) {
        this(beanserializerbase, objectidwriter, beanserializerbase._propertyFilterId);
    }

    protected BeanSerializerBase(BeanSerializerBase beanserializerbase, ObjectIdWriter objectidwriter, Object obj) {
        super(beanserializerbase._handledType);
        _props = beanserializerbase._props;
        _filteredProps = beanserializerbase._filteredProps;
        _typeId = beanserializerbase._typeId;
        _anyGetterWriter = beanserializerbase._anyGetterWriter;
        _objectIdWriter = objectidwriter;
        _propertyFilterId = obj;
        _serializationShape = beanserializerbase._serializationShape;
    }

    protected BeanSerializerBase(BeanSerializerBase beanserializerbase, NameTransformer nametransformer) {
        this(beanserializerbase, rename(beanserializerbase._props, nametransformer), rename(beanserializerbase._filteredProps, nametransformer));
    }

    public BeanSerializerBase(BeanSerializerBase beanserializerbase, BeanPropertyWriter abeanpropertywriter[], BeanPropertyWriter abeanpropertywriter1[]) {
        super(beanserializerbase._handledType);
        _props = abeanpropertywriter;
        _filteredProps = abeanpropertywriter1;
        _typeId = beanserializerbase._typeId;
        _anyGetterWriter = beanserializerbase._anyGetterWriter;
        _objectIdWriter = beanserializerbase._objectIdWriter;
        _propertyFilterId = beanserializerbase._propertyFilterId;
        _serializationShape = beanserializerbase._serializationShape;
    }

    protected BeanSerializerBase(BeanSerializerBase beanserializerbase, String as[]) {
        Object obj = null;
        super(beanserializerbase._handledType);
        HashSet hashset = ArrayBuilders.arrayToSet(as);
        BeanPropertyWriter abeanpropertywriter[] = beanserializerbase._props;
        BeanPropertyWriter abeanpropertywriter1[] = beanserializerbase._filteredProps;
        int j = abeanpropertywriter.length;
        ArrayList arraylist = new ArrayList(j);
        int i;
        if (abeanpropertywriter1 == null)
            as = null;
        else
            as = new ArrayList(j);
        i = 0;
        while (i < j)  {
            BeanPropertyWriter beanpropertywriter = abeanpropertywriter[i];
            if (!hashset.contains(beanpropertywriter.getName())) {
                arraylist.add(beanpropertywriter);
                if (abeanpropertywriter1 != null)
                    as.add(abeanpropertywriter1[i]);
            }
            i++;
        }
        _props = (BeanPropertyWriter[])arraylist.toArray(new BeanPropertyWriter[arraylist.size()]);
        if (as == null)
            as = obj;
        else
            as = (BeanPropertyWriter[])as.toArray(new BeanPropertyWriter[as.size()]);
        _filteredProps = as;
        _typeId = beanserializerbase._typeId;
        _anyGetterWriter = beanserializerbase._anyGetterWriter;
        _objectIdWriter = beanserializerbase._objectIdWriter;
        _propertyFilterId = beanserializerbase._propertyFilterId;
        _serializationShape = beanserializerbase._serializationShape;
    }

    private static final BeanPropertyWriter[] rename(BeanPropertyWriter abeanpropertywriter[], NameTransformer nametransformer) {
        BeanPropertyWriter abeanpropertywriter1[] = abeanpropertywriter;
        if (abeanpropertywriter != null) {
            abeanpropertywriter1 = abeanpropertywriter;
            if (abeanpropertywriter.length != 0) {
                abeanpropertywriter1 = abeanpropertywriter;
                if (nametransformer != null)
                    if (nametransformer == NameTransformer.NOP) {
                        abeanpropertywriter1 = abeanpropertywriter;
                    } else {
                        int j = abeanpropertywriter.length;
                        abeanpropertywriter1 = new BeanPropertyWriter[j];
                        int i = 0;
                        while (i < j)  {
                            BeanPropertyWriter beanpropertywriter = abeanpropertywriter[i];
                            if (beanpropertywriter != null)
                                abeanpropertywriter1[i] = beanpropertywriter.rename(nametransformer);
                            i++;
                        }
                    }
            }
        }
        return abeanpropertywriter1;
    }

    protected final String _customTypeId(Object obj) {
        obj = _typeId.getValue(obj);
        if (obj == null)
            obj = "";
        else
        if (obj instanceof String)
            obj = (String)obj;
        else
            obj = obj.toString();
        return ((String) (obj));
    }

    protected void _serializeObjectId(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, TypeSerializer typeserializer, WritableObjectId writableobjectid) {
        ObjectIdWriter objectidwriter = _objectIdWriter;
        String s;
        if (_typeId == null)
            s = null;
        else
            s = _customTypeId(obj);
        if (s == null)
            typeserializer.writeTypePrefixForObject(obj, jsongenerator);
        else
            typeserializer.writeCustomTypePrefixForObject(obj, jsongenerator, s);
        writableobjectid.writeAsField(jsongenerator, serializerprovider, objectidwriter);
        if (_propertyFilterId != null)
            serializeFieldsFiltered(obj, jsongenerator, serializerprovider);
        else
            serializeFields(obj, jsongenerator, serializerprovider);
        if (s == null)
            typeserializer.writeTypeSuffixForObject(obj, jsongenerator);
        else
            typeserializer.writeCustomTypeSuffixForObject(obj, jsongenerator, s);
    }

    protected final void _serializeWithObjectId(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, TypeSerializer typeserializer) {
        ObjectIdWriter objectidwriter = _objectIdWriter;
        WritableObjectId writableobjectid = serializerprovider.findObjectId(obj, objectidwriter.generator);
        if (!writableobjectid.writeAsId(jsongenerator, serializerprovider, objectidwriter)) {
            Object obj1 = writableobjectid.generateId(obj);
            if (objectidwriter.alwaysAsId)
                objectidwriter.serializer.serialize(obj1, jsongenerator, serializerprovider);
            else
                _serializeObjectId(obj, jsongenerator, serializerprovider, typeserializer, writableobjectid);
        }
    }

    protected final void _serializeWithObjectId(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, boolean flag) {
        WritableObjectId writableobjectid;
        ObjectIdWriter objectidwriter;
        objectidwriter = _objectIdWriter;
        writableobjectid = serializerprovider.findObjectId(obj, objectidwriter.generator);
        if (!writableobjectid.writeAsId(jsongenerator, serializerprovider, objectidwriter)) goto _L2; else goto _L1
_L1:
        return;
_L2:
        Object obj1 = writableobjectid.generateId(obj);
        if (objectidwriter.alwaysAsId) {
            objectidwriter.serializer.serialize(obj1, jsongenerator, serializerprovider);
        } else {
            if (flag)
                jsongenerator.writeStartObject();
            writableobjectid.writeAsField(jsongenerator, serializerprovider, objectidwriter);
            if (_propertyFilterId != null)
                serializeFieldsFiltered(obj, jsongenerator, serializerprovider);
            else
                serializeFields(obj, jsongenerator, serializerprovider);
            if (flag)
                jsongenerator.writeEndObject();
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
        int i;
        int k;
        Object obj;
        obj = null;
        k = 0;
        i = 0;
        if (jsonformatvisitorwrapper != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        SerializerProvider serializerprovider;
        if ((javatype = jsonformatvisitorwrapper.expectObjectFormat(javatype)) == null)
            continue; /* Loop/switch isn't completed */
        serializerprovider = jsonformatvisitorwrapper.getProvider();
        if (_propertyFilterId == null)
            break; /* Loop/switch isn't completed */
        jsonformatvisitorwrapper = findPropertyFilter(jsonformatvisitorwrapper.getProvider(), _propertyFilterId, null);
        k = _props.length;
        while (i < k)  {
            jsonformatvisitorwrapper.depositSchemaProperty(_props[i], javatype, serializerprovider);
            i++;
        }
        if (true) goto _L1; else goto _L3
_L3:
        jsonformatvisitorwrapper = obj;
        int j;
        int l;
        if (_filteredProps != null)
            if (serializerprovider == null)
                jsonformatvisitorwrapper = obj;
            else
                jsonformatvisitorwrapper = serializerprovider.getActiveView();
        if (jsonformatvisitorwrapper != null)
            jsonformatvisitorwrapper = _filteredProps;
        else
            jsonformatvisitorwrapper = _props;
        l = jsonformatvisitorwrapper.length;
        j = k;
        while (j < l)  {
            BeanPropertyWriter beanpropertywriter = jsonformatvisitorwrapper[j];
            if (beanpropertywriter != null)
                beanpropertywriter.depositSchemaProperty(javatype, serializerprovider);
            j++;
        }
        if (true) goto _L1; else goto _L4
_L4:
    }

    protected abstract BeanSerializerBase asArraySerializer();

    public JsonSerializer createContextual(SerializerProvider serializerprovider, BeanProperty beanproperty) {
        Object obj;
        Object obj1;
        Object obj2;
        Object obj3;
        Object obj4;
        Object obj5;
        AnnotationIntrospector annotationintrospector;
        obj5 = null;
        annotationintrospector = serializerprovider.getAnnotationIntrospector();
        static class _cls1 {

            static final int $SwitchMap$com$fasterxml$jackson$annotation$JsonFormat$Shape[];

            static  {
                $SwitchMap$com$fasterxml$jackson$annotation$JsonFormat$Shape = new int[com.fasterxml.jackson.annotation.JsonFormat.Shape.values().length];
                NoSuchFieldError nosuchfielderror;
                try {
                    $SwitchMap$com$fasterxml$jackson$annotation$JsonFormat$Shape[com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING.ordinal()] = 1;
                }
                catch (NoSuchFieldError nosuchfielderror2) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$annotation$JsonFormat$Shape[com.fasterxml.jackson.annotation.JsonFormat.Shape.NUMBER.ordinal()] = 2;
                }
                catch (NoSuchFieldError nosuchfielderror1) { }
                $SwitchMap$com$fasterxml$jackson$annotation$JsonFormat$Shape[com.fasterxml.jackson.annotation.JsonFormat.Shape.NUMBER_INT.ordinal()] = 3;
_L2:
                return;
                nosuchfielderror;
                if (true) goto _L2; else goto _L1
_L1:
            }
        }

        if (beanproperty == null || annotationintrospector == null)
            obj2 = null;
        else
            obj2 = beanproperty.getMember();
        obj3 = serializerprovider.getConfig();
        if (obj2 == null) goto _L2; else goto _L1
_L1:
        obj = annotationintrospector.findFormat(((com.fasterxml.jackson.databind.introspect.Annotated) (obj2)));
        if (obj == null) goto _L2; else goto _L3
_L3:
        obj1 = ((com.fasterxml.jackson.annotation.JsonFormat.Value) (obj)).getShape();
        if (obj1 == _serializationShape || !_handledType.isEnum()) goto _L5; else goto _L4
_L4:
        _cls1..SwitchMap.com.fasterxml.jackson.annotation.JsonFormat.Shape[((com.fasterxml.jackson.annotation.JsonFormat.Shape) (obj1)).ordinal()];
        JVM INSTR tableswitch 1 3: default 108
    //                   1 343
    //                   2 343
    //                   3 343;
           goto _L5 _L6 _L6 _L6
_L5:
        obj4 = _objectIdWriter;
        if (obj2 == null) goto _L8; else goto _L7
_L7:
        obj3 = annotationintrospector.findPropertiesToIgnore(((com.fasterxml.jackson.databind.introspect.Annotated) (obj2)), true);
        obj = annotationintrospector.findObjectIdInfo(((com.fasterxml.jackson.databind.introspect.Annotated) (obj2)));
        if (obj != null) goto _L10; else goto _L9
_L9:
        obj = obj4;
        if (obj4 != null) {
            obj = annotationintrospector.findObjectReferenceInfo(((com.fasterxml.jackson.databind.introspect.Annotated) (obj2)), new ObjectIdInfo(NAME_FOR_OBJECT_REF, null, null, null));
            obj = _objectIdWriter.withAlwaysAsId(((ObjectIdInfo) (obj)).getAlwaysAsId());
        }
_L19:
        obj4 = annotationintrospector.findFilterId(((com.fasterxml.jackson.databind.introspect.Annotated) (obj2)));
        int i;
        int j;
        Object obj6;
        if (obj4 != null && (_propertyFilterId == null || !obj4.equals(_propertyFilterId))) {
            obj2 = obj3;
            obj3 = obj4;
        } else {
            obj2 = obj3;
            obj3 = obj5;
        }
_L22:
        if (obj == null) goto _L12; else goto _L11
_L11:
        serializerprovider = ((ObjectIdWriter) (obj)).withSerializer(serializerprovider.findValueSerializer(((ObjectIdWriter) (obj)).idType, beanproperty));
        if (serializerprovider == _objectIdWriter) goto _L12; else goto _L13
_L13:
        serializerprovider = withObjectIdWriter(serializerprovider);
_L21:
        beanproperty = serializerprovider;
        if (obj2 != null) {
            beanproperty = serializerprovider;
            if (obj2.length != 0)
                beanproperty = serializerprovider.withIgnorals(((String []) (obj2)));
        }
        serializerprovider = beanproperty;
        if (obj3 != null)
            serializerprovider = beanproperty.withFilterId(obj3);
        obj = obj1;
        if (obj1 == null)
            obj = _serializationShape;
        beanproperty = serializerprovider;
        if (obj == com.fasterxml.jackson.annotation.JsonFormat.Shape.ARRAY)
            beanproperty = serializerprovider.asArraySerializer();
_L14:
        return beanproperty;
_L6:
        obj1 = ((SerializationConfig) (obj3)).introspectClassAnnotations(_handledType);
        beanproperty = serializerprovider.handlePrimaryContextualization(EnumSerializer.construct(_handledType, serializerprovider.getConfig(), ((BeanDescription) (obj1)), ((com.fasterxml.jackson.annotation.JsonFormat.Value) (obj))), beanproperty);
        if (true) goto _L14; else goto _L10
_L10:
        obj = annotationintrospector.findObjectReferenceInfo(((com.fasterxml.jackson.databind.introspect.Annotated) (obj2)), ((ObjectIdInfo) (obj)));
        obj4 = ((ObjectIdInfo) (obj)).getGeneratorType();
        obj6 = serializerprovider.constructType(((Type) (obj4)));
        obj6 = serializerprovider.getTypeFactory().findTypeParameters(((JavaType) (obj6)), com/fasterxml/jackson/annotation/ObjectIdGenerator)[0];
        if (obj4 != com/fasterxml/jackson/annotation/ObjectIdGenerators$PropertyGenerator) goto _L16; else goto _L15
_L15:
        obj6 = ((ObjectIdInfo) (obj)).getPropertyName().getSimpleName();
        j = _props.length;
        i = 0;
_L20:
        if (i == j)
            throw new IllegalArgumentException((new StringBuilder()).append("Invalid Object Id definition for ").append(_handledType.getName()).append(": can not find property with name '").append(((String) (obj6))).append("'").toString());
        obj4 = _props[i];
        if (!((String) (obj6)).equals(((BeanPropertyWriter) (obj4)).getName())) goto _L18; else goto _L17
_L17:
        if (i > 0) {
            System.arraycopy(_props, 0, _props, 1, i);
            _props[0] = ((BeanPropertyWriter) (obj4));
            if (_filteredProps != null) {
                obj6 = _filteredProps[i];
                System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);
                _filteredProps[0] = ((BeanPropertyWriter) (obj6));
            }
        }
        obj6 = ((BeanPropertyWriter) (obj4)).getType();
        obj4 = new PropertyBasedObjectIdGenerator(((ObjectIdInfo) (obj)), ((BeanPropertyWriter) (obj4)));
        obj = ObjectIdWriter.construct(((JavaType) (obj6)), (PropertyName)null, ((ObjectIdGenerator) (obj4)), ((ObjectIdInfo) (obj)).getAlwaysAsId());
          goto _L19
_L18:
        i++;
          goto _L20
_L16:
        obj4 = serializerprovider.objectIdGeneratorInstance(((com.fasterxml.jackson.databind.introspect.Annotated) (obj2)), ((ObjectIdInfo) (obj)));
        obj = ObjectIdWriter.construct(((JavaType) (obj6)), ((ObjectIdInfo) (obj)).getPropertyName(), ((ObjectIdGenerator) (obj4)), ((ObjectIdInfo) (obj)).getAlwaysAsId());
          goto _L19
_L12:
        serializerprovider = this;
          goto _L21
_L8:
        obj2 = null;
        obj = obj4;
        obj3 = obj5;
          goto _L22
_L2:
        obj1 = null;
        if (true) goto _L5; else goto _L23
_L23:
    }

    protected JsonSerializer findConvertingSerializer(SerializerProvider serializerprovider, BeanPropertyWriter beanpropertywriter) {
        Object obj2 = null;
        Object obj1 = null;
        Object obj3 = serializerprovider.getAnnotationIntrospector();
        Object obj = obj2;
        if (obj3 != null) {
            AnnotatedMember annotatedmember = beanpropertywriter.getMember();
            obj = obj2;
            if (annotatedmember != null) {
                obj3 = ((AnnotationIntrospector) (obj3)).findSerializationConverter(annotatedmember);
                obj = obj2;
                if (obj3 != null) {
                    obj = serializerprovider.converterInstance(beanpropertywriter.getMember(), obj3);
                    JavaType javatype = ((Converter) (obj)).getOutputType(serializerprovider.getTypeFactory());
                    if (javatype.isJavaLangObject())
                        serializerprovider = obj1;
                    else
                        serializerprovider = serializerprovider.findValueSerializer(javatype, beanpropertywriter);
                    obj = new StdDelegatingSerializer(((Converter) (obj)), javatype, serializerprovider);
                }
            }
        }
        return ((JsonSerializer) (obj));
    }

    public JsonNode getSchema(SerializerProvider serializerprovider, Type type) {
        ObjectNode objectnode = createSchemaNode("object", true);
        type = (JsonSerializableSchema)_handledType.getAnnotation(com/fasterxml/jackson/databind/jsonschema/JsonSerializableSchema);
        if (type != null) {
            type = type.id();
            if (type != null && type.length() > 0)
                objectnode.put("id", type);
        }
        ObjectNode objectnode1 = objectnode.objectNode();
        int i;
        if (_propertyFilterId != null)
            type = findPropertyFilter(serializerprovider, _propertyFilterId, null);
        else
            type = null;
        i = 0;
        while (i < _props.length)  {
            BeanPropertyWriter beanpropertywriter = _props[i];
            if (type == null)
                beanpropertywriter.depositSchemaProperty(objectnode1, serializerprovider);
            else
                type.depositSchemaProperty(beanpropertywriter, objectnode1, serializerprovider);
            i++;
        }
        objectnode.set("properties", objectnode1);
        return objectnode;
    }

    public Iterator properties() {
        return Arrays.asList(_props).iterator();
    }

    public void resolve(SerializerProvider serializerprovider) {
        int i;
        int j;
        BeanPropertyWriter beanpropertywriter2;
        int k;
        BeanPropertyWriter beanpropertywriter;
        JsonSerializer jsonserializer;
        if (_filteredProps == null)
            i = 0;
        else
            i = _filteredProps.length;
        k = _props.length;
        j = 0;
        if (j >= k)
            break MISSING_BLOCK_LABEL_298;
        beanpropertywriter2 = _props[j];
        if (!beanpropertywriter2.willSuppressNulls() && !beanpropertywriter2.hasNullSerializer()) {
            jsonserializer = serializerprovider.findNullValueSerializer(beanpropertywriter2);
            if (jsonserializer != null) {
                beanpropertywriter2.assignNullSerializer(jsonserializer);
                if (j < i) {
                    beanpropertywriter = _filteredProps[j];
                    if (beanpropertywriter != null)
                        beanpropertywriter.assignNullSerializer(jsonserializer);
                }
            }
        }
        if (!beanpropertywriter2.hasSerializer())
            break; /* Loop/switch isn't completed */
_L4:
        j++;
        if (true) goto _L2; else goto _L1
_L2:
        break MISSING_BLOCK_LABEL_18;
_L1:
        Object obj;
        Object obj1;
label0:
        {
            obj1 = findConvertingSerializer(serializerprovider, beanpropertywriter2);
            obj = obj1;
            if (obj1 != null)
                break MISSING_BLOCK_LABEL_263;
            obj = beanpropertywriter2.getSerializationType();
            obj1 = obj;
            if (obj != null)
                break label0;
            obj = beanpropertywriter2.getType();
            obj1 = obj;
            if (((JavaType) (obj)).isFinal())
                break label0;
            if (((JavaType) (obj)).isContainerType() || ((JavaType) (obj)).containedTypeCount() > 0)
                beanpropertywriter2.setNonTrivialBaseType(((JavaType) (obj)));
        }
        continue; /* Loop/switch isn't completed */
        JsonSerializer jsonserializer1 = serializerprovider.findValueSerializer(((JavaType) (obj1)), beanpropertywriter2);
        obj = jsonserializer1;
        if (((JavaType) (obj1)).isContainerType()) {
            obj1 = (TypeSerializer)((JavaType) (obj1)).getContentType().getTypeHandler();
            obj = jsonserializer1;
            if (obj1 != null) {
                obj = jsonserializer1;
                if (jsonserializer1 instanceof ContainerSerializer)
                    obj = ((ContainerSerializer)jsonserializer1).withValueTypeSerializer(((TypeSerializer) (obj1)));
            }
        }
        beanpropertywriter2.assignSerializer(((JsonSerializer) (obj)));
        if (j < i) {
            BeanPropertyWriter beanpropertywriter1 = _filteredProps[j];
            if (beanpropertywriter1 != null)
                beanpropertywriter1.assignSerializer(((JsonSerializer) (obj)));
        }
        if (true) goto _L4; else goto _L3
_L3:
        if (_anyGetterWriter != null)
            _anyGetterWriter.resolve(serializerprovider);
        return;
    }

    public abstract void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider);

    protected void serializeFields(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        int i;
        int j;
        int k;
        BeanPropertyWriter abeanpropertywriter[];
        int l;
        BeanPropertyWriter beanpropertywriter;
        if (_filteredProps != null && serializerprovider.getActiveView() != null)
            abeanpropertywriter = _filteredProps;
        else
            abeanpropertywriter = _props;
        j = 0;
        k = 0;
        i = 0;
        l = abeanpropertywriter.length;
_L3:
        if (i >= l) goto _L2; else goto _L1
_L1:
        beanpropertywriter = abeanpropertywriter[i];
        if (beanpropertywriter == null)
            continue; /* Loop/switch isn't completed */
        j = i;
        k = i;
        beanpropertywriter.serializeAsField(obj, jsongenerator, serializerprovider);
        i++;
          goto _L3
_L2:
        j = i;
        k = i;
        if (_anyGetterWriter == null)
            break MISSING_BLOCK_LABEL_117;
        j = i;
        k = i;
        _anyGetterWriter.getAndSerialize(obj, jsongenerator, serializerprovider);
_L4:
        return;
        Exception exception;
        exception;
        if (j == abeanpropertywriter.length)
            jsongenerator = "[anySetter]";
        else
            jsongenerator = abeanpropertywriter[j].getName();
        wrapAndThrow(serializerprovider, exception, obj, jsongenerator);
          goto _L4
        serializerprovider;
        serializerprovider = new JsonMappingException(jsongenerator, "Infinite recursion (StackOverflowError)", serializerprovider);
        if (k == abeanpropertywriter.length)
            jsongenerator = "[anySetter]";
        else
            jsongenerator = abeanpropertywriter[k].getName();
        serializerprovider.prependPath(new com.fasterxml.jackson.databind.JsonMappingException.Reference(obj, jsongenerator));
        throw serializerprovider;
    }

    protected void serializeFieldsFiltered(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        BeanPropertyWriter abeanpropertywriter[];
        PropertyFilter propertyfilter;
        if (_filteredProps != null && serializerprovider.getActiveView() != null)
            abeanpropertywriter = _filteredProps;
        else
            abeanpropertywriter = _props;
        propertyfilter = findPropertyFilter(serializerprovider, _propertyFilterId, obj);
        if (propertyfilter != null) goto _L2; else goto _L1
_L1:
        serializeFields(obj, jsongenerator, serializerprovider);
_L7:
        return;
_L2:
        int i;
        int j;
        int k;
        j = 0;
        k = 0;
        i = 0;
        int l = abeanpropertywriter.length;
_L5:
        if (i >= l) goto _L4; else goto _L3
_L3:
        BeanPropertyWriter beanpropertywriter;
        beanpropertywriter = abeanpropertywriter[i];
        if (beanpropertywriter == null)
            continue; /* Loop/switch isn't completed */
        j = i;
        k = i;
        propertyfilter.serializeAsField(obj, jsongenerator, serializerprovider, beanpropertywriter);
        i++;
          goto _L5
_L4:
        j = i;
        k = i;
        if (_anyGetterWriter != null) {
            j = i;
            k = i;
            try {
                _anyGetterWriter.getAndFilter(obj, jsongenerator, serializerprovider, propertyfilter);
            }
            catch (Exception exception) {
                if (j == abeanpropertywriter.length)
                    jsongenerator = "[anySetter]";
                else
                    jsongenerator = abeanpropertywriter[j].getName();
                wrapAndThrow(serializerprovider, exception, obj, jsongenerator);
            }
            // Misplaced declaration of an exception variable
            catch (SerializerProvider serializerprovider) {
                serializerprovider = new JsonMappingException(jsongenerator, "Infinite recursion (StackOverflowError)", serializerprovider);
                if (k == abeanpropertywriter.length)
                    jsongenerator = "[anySetter]";
                else
                    jsongenerator = abeanpropertywriter[k].getName();
                serializerprovider.prependPath(new com.fasterxml.jackson.databind.JsonMappingException.Reference(obj, jsongenerator));
                throw serializerprovider;
            }
        }
        if (true) goto _L7; else goto _L6
_L6:
    }

    public void serializeWithType(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, TypeSerializer typeserializer) {
        if (_objectIdWriter != null) {
            jsongenerator.setCurrentValue(obj);
            _serializeWithObjectId(obj, jsongenerator, serializerprovider, typeserializer);
        } else {
            String s;
            if (_typeId == null)
                s = null;
            else
                s = _customTypeId(obj);
            if (s == null)
                typeserializer.writeTypePrefixForObject(obj, jsongenerator);
            else
                typeserializer.writeCustomTypePrefixForObject(obj, jsongenerator, s);
            jsongenerator.setCurrentValue(obj);
            if (_propertyFilterId != null)
                serializeFieldsFiltered(obj, jsongenerator, serializerprovider);
            else
                serializeFields(obj, jsongenerator, serializerprovider);
            if (s == null)
                typeserializer.writeTypeSuffixForObject(obj, jsongenerator);
            else
                typeserializer.writeCustomTypeSuffixForObject(obj, jsongenerator, s);
        }
    }

    public boolean usesObjectId() {
        boolean flag;
        if (_objectIdWriter != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public volatile JsonSerializer withFilterId(Object obj) {
        return withFilterId(obj);
    }

    public abstract BeanSerializerBase withFilterId(Object obj);

    protected abstract BeanSerializerBase withIgnorals(String as[]);

    public abstract BeanSerializerBase withObjectIdWriter(ObjectIdWriter objectidwriter);

}
