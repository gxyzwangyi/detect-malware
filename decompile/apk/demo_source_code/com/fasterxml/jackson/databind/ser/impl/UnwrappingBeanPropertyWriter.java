// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.impl;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.Serializable;
import java.util.Iterator;

// Referenced classes of package com.fasterxml.jackson.databind.ser.impl:
//            UnwrappingBeanSerializer, PropertySerializerMap

public class UnwrappingBeanPropertyWriter extends BeanPropertyWriter
    implements Serializable {

    private static final long serialVersionUID = 1L;
    protected final NameTransformer _nameTransformer;

    public UnwrappingBeanPropertyWriter(BeanPropertyWriter beanpropertywriter, NameTransformer nametransformer) {
        super(beanpropertywriter);
        _nameTransformer = nametransformer;
    }

    protected UnwrappingBeanPropertyWriter(UnwrappingBeanPropertyWriter unwrappingbeanpropertywriter, NameTransformer nametransformer, SerializedString serializedstring) {
        super(unwrappingbeanpropertywriter, serializedstring);
        _nameTransformer = nametransformer;
    }

    protected void _depositSchemaProperty(ObjectNode objectnode, JsonNode jsonnode) {
        jsonnode = jsonnode.get("properties");
        if (jsonnode != null) {
            java.util.Map.Entry entry;
            for (Iterator iterator = jsonnode.fields(); iterator.hasNext(); objectnode.set(jsonnode, (JsonNode)entry.getValue())) {
                entry = (java.util.Map.Entry)iterator.next();
                String s = (String)entry.getKey();
                jsonnode = s;
                if (_nameTransformer != null)
                    jsonnode = _nameTransformer.transform(s);
            }

        }
    }

    protected JsonSerializer _findAndAddDynamic(PropertySerializerMap propertyserializermap, Class class1, SerializerProvider serializerprovider) {
        if (_nonTrivialBaseType != null)
            propertyserializermap = serializerprovider.findValueSerializer(serializerprovider.constructSpecializedType(_nonTrivialBaseType, class1), this);
        else
            propertyserializermap = serializerprovider.findValueSerializer(class1, this);
        serializerprovider = _nameTransformer;
        if (propertyserializermap.isUnwrappingSerializer())
            serializerprovider = NameTransformer.chainedTransformer(serializerprovider, ((UnwrappingBeanSerializer)propertyserializermap)._nameTransformer);
        propertyserializermap = propertyserializermap.unwrappingSerializer(serializerprovider);
        _dynamicSerializers = _dynamicSerializers.newWith(class1, propertyserializermap);
        return propertyserializermap;
    }

    protected UnwrappingBeanPropertyWriter _new(NameTransformer nametransformer, SerializedString serializedstring) {
        return new UnwrappingBeanPropertyWriter(this, nametransformer, serializedstring);
    }

    public void assignSerializer(JsonSerializer jsonserializer) {
        super.assignSerializer(jsonserializer);
        if (_serializer != null) {
            jsonserializer = _nameTransformer;
            if (_serializer.isUnwrappingSerializer())
                jsonserializer = NameTransformer.chainedTransformer(jsonserializer, ((UnwrappingBeanSerializer)_serializer)._nameTransformer);
            _serializer = _serializer.unwrappingSerializer(jsonserializer);
        }
    }

    public void depositSchemaProperty(JsonObjectFormatVisitor jsonobjectformatvisitor, final SerializerProvider final_serializerprovider) {
        JsonSerializer jsonserializer = final_serializerprovider.findValueSerializer(getType(), this).unwrappingSerializer(_nameTransformer);
        if (jsonserializer.isUnwrappingSerializer())
            jsonserializer.acceptJsonFormatVisitor(new com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper.Base(jsonobjectformatvisitor) {

                final UnwrappingBeanPropertyWriter this$0;
                final JsonObjectFormatVisitor val$visitor;

                public JsonObjectFormatVisitor expectObjectFormat(JavaType javatype) {
                    return visitor;
                }

             {
                this$0 = UnwrappingBeanPropertyWriter.this;
                visitor = jsonobjectformatvisitor;
                super(final_serializerprovider);
            }
            }
, getType());
        else
            super.depositSchemaProperty(jsonobjectformatvisitor, final_serializerprovider);
    }

    public boolean isUnwrapping() {
        return true;
    }

    public volatile BeanPropertyWriter rename(NameTransformer nametransformer) {
        return rename(nametransformer);
    }

    public UnwrappingBeanPropertyWriter rename(NameTransformer nametransformer) {
        String s = nametransformer.transform(_name.getValue());
        return _new(NameTransformer.chainedTransformer(nametransformer, _nameTransformer), new SerializedString(s));
    }

    public void serializeAsField(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        Object obj1 = get(obj);
        if (obj1 != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        JsonSerializer jsonserializer1 = _serializer;
        JsonSerializer jsonserializer = jsonserializer1;
        if (jsonserializer1 == null) {
            Class class1 = obj1.getClass();
            PropertySerializerMap propertyserializermap = _dynamicSerializers;
            JsonSerializer jsonserializer2 = propertyserializermap.serializerFor(class1);
            jsonserializer = jsonserializer2;
            if (jsonserializer2 == null)
                jsonserializer = _findAndAddDynamic(propertyserializermap, class1, serializerprovider);
        }
        if ((_suppressableValue == null || (MARKER_FOR_EMPTY != _suppressableValue ? !_suppressableValue.equals(obj1) : !jsonserializer.isEmpty(serializerprovider, obj1))) && (obj1 != obj || !_handleSelfReference(obj, jsongenerator, serializerprovider, jsonserializer))) {
            if (!jsonserializer.isUnwrappingSerializer())
                jsongenerator.writeFieldName(_name);
            if (_typeSerializer == null)
                jsonserializer.serialize(obj1, jsongenerator, serializerprovider);
            else
                jsonserializer.serializeWithType(obj1, jsongenerator, serializerprovider, _typeSerializer);
        }
        if (true) goto _L1; else goto _L3
_L3:
    }
}
