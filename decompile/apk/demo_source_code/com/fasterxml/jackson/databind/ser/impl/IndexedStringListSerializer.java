// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.impl;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase;
import java.util.List;

public final class IndexedStringListSerializer extends StaticListSerializerBase {

    public static final IndexedStringListSerializer instance = new IndexedStringListSerializer();
    private static final long serialVersionUID = 1L;

    protected IndexedStringListSerializer() {
        super(java/util/List);
    }

    public IndexedStringListSerializer(IndexedStringListSerializer indexedstringlistserializer, JsonSerializer jsonserializer, Boolean boolean1) {
        super(indexedstringlistserializer, jsonserializer, boolean1);
    }

    private final void _serializeUnwrapped(List list, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        if (_serializer == null)
            serializeContents(list, jsongenerator, serializerprovider, 1);
        else
            serializeUsingCustom(list, jsongenerator, serializerprovider, 1);
    }

    private final void serializeContents(List list, JsonGenerator jsongenerator, SerializerProvider serializerprovider, int i) {
        int j = 0;
_L2:
        if (j >= i)
            break MISSING_BLOCK_LABEL_58;
        String s = (String)list.get(j);
        if (s != null)
            break; /* Loop/switch isn't completed */
        serializerprovider.defaultSerializeNull(jsongenerator);
_L3:
        j++;
        if (true) goto _L2; else goto _L1
_L1:
        jsongenerator.writeString(s);
          goto _L3
        jsongenerator;
        wrapAndThrow(serializerprovider, jsongenerator, list, j);
    }

    private final void serializeUsingCustom(List list, JsonGenerator jsongenerator, SerializerProvider serializerprovider, int i) {
        int j;
        int k;
        k = 0;
        j = 0;
        JsonSerializer jsonserializer = _serializer;
_L2:
        if (j >= i)
            break MISSING_BLOCK_LABEL_82;
        k = j;
        String s = (String)list.get(j);
        if (s != null)
            break; /* Loop/switch isn't completed */
        k = j;
        serializerprovider.defaultSerializeNull(jsongenerator);
_L3:
        j++;
        if (true) goto _L2; else goto _L1
_L1:
        k = j;
        jsonserializer.serialize(s, jsongenerator, serializerprovider);
          goto _L3
        jsongenerator;
        wrapAndThrow(serializerprovider, jsongenerator, list, k);
    }

    public JsonSerializer _withResolved(BeanProperty beanproperty, JsonSerializer jsonserializer, Boolean boolean1) {
        return new IndexedStringListSerializer(this, jsonserializer, boolean1);
    }

    protected void acceptContentVisitor(JsonArrayFormatVisitor jsonarrayformatvisitor) {
        jsonarrayformatvisitor.itemsFormat(JsonFormatTypes.STRING);
    }

    protected JsonNode contentSchema() {
        return createSchemaNode("string", true);
    }

    public volatile void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        serialize((List)obj, jsongenerator, serializerprovider);
    }

    public void serialize(List list, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        int i = list.size();
        if (i == 1 && (_unwrapSingle == null && serializerprovider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED) || _unwrapSingle == Boolean.TRUE)) {
            _serializeUnwrapped(list, jsongenerator, serializerprovider);
        } else {
            jsongenerator.writeStartArray(i);
            if (_serializer == null)
                serializeContents(list, jsongenerator, serializerprovider, i);
            else
                serializeUsingCustom(list, jsongenerator, serializerprovider, i);
            jsongenerator.writeEndArray();
        }
    }

    public volatile void serializeWithType(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, TypeSerializer typeserializer) {
        serializeWithType((List)obj, jsongenerator, serializerprovider, typeserializer);
    }

    public void serializeWithType(List list, JsonGenerator jsongenerator, SerializerProvider serializerprovider, TypeSerializer typeserializer) {
        int i = list.size();
        typeserializer.writeTypePrefixForArray(list, jsongenerator);
        if (_serializer == null)
            serializeContents(list, jsongenerator, serializerprovider, i);
        else
            serializeUsingCustom(list, jsongenerator, serializerprovider, i);
        typeserializer.writeTypeSuffixForArray(list, jsongenerator);
    }

}
