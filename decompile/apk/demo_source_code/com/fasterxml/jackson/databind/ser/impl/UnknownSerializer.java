// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.impl;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.lang.reflect.Type;

public class UnknownSerializer extends StdSerializer {

    public UnknownSerializer() {
        super(java/lang/Object);
    }

    public UnknownSerializer(Class class1) {
        super(class1, false);
    }

    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
        jsonformatvisitorwrapper.expectAnyFormat(javatype);
    }

    protected void failForEmpty(JsonGenerator jsongenerator, Object obj) {
        throw JsonMappingException.from(jsongenerator, (new StringBuilder()).append("No serializer found for class ").append(obj.getClass().getName()).append(" and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) )").toString());
    }

    public JsonNode getSchema(SerializerProvider serializerprovider, Type type) {
        return null;
    }

    public boolean isEmpty(SerializerProvider serializerprovider, Object obj) {
        return true;
    }

    public void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        if (serializerprovider.isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS))
            failForEmpty(jsongenerator, obj);
        jsongenerator.writeStartObject();
        jsongenerator.writeEndObject();
    }

    public final void serializeWithType(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, TypeSerializer typeserializer) {
        if (serializerprovider.isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS))
            failForEmpty(jsongenerator, obj);
        typeserializer.writeTypePrefixForObject(obj, jsongenerator);
        typeserializer.writeTypeSuffixForObject(obj, jsongenerator);
    }
}
