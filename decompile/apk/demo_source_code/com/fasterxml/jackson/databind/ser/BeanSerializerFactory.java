// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser;

import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.introspect.*;
import com.fasterxml.jackson.databind.jsontype.*;
import com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator;
import com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer;
import com.fasterxml.jackson.databind.ser.std.MapSerializer;
import com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.*;
import java.io.Serializable;
import java.util.*;
import java.util.concurrent.atomic.AtomicReference;

// Referenced classes of package com.fasterxml.jackson.databind.ser:
//            BasicSerializerFactory, PropertyBuilder, ResolvableSerializer, BeanSerializerModifier, 
//            Serializers, BeanSerializerBuilder, AnyGetterWriter, BeanPropertyWriter, 
//            SerializerFactory

public class BeanSerializerFactory extends BasicSerializerFactory
    implements Serializable {

    public static final BeanSerializerFactory instance = new BeanSerializerFactory(null);
    private static final long serialVersionUID = 1L;

    protected BeanSerializerFactory(SerializerFactoryConfig serializerfactoryconfig) {
        super(serializerfactoryconfig);
    }

    protected BeanPropertyWriter _constructWriter(SerializerProvider serializerprovider, BeanPropertyDefinition beanpropertydefinition, PropertyBuilder propertybuilder, boolean flag, AnnotatedMember annotatedmember) {
        Object obj = beanpropertydefinition.getFullName();
        if (serializerprovider.canOverrideAccessModifiers())
            annotatedmember.fixAccess(serializerprovider.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
        JavaType javatype = annotatedmember.getType();
        obj = new com.fasterxml.jackson.databind.BeanProperty.Std(((PropertyName) (obj)), javatype, beanpropertydefinition.getWrapperName(), propertybuilder.getClassAnnotations(), annotatedmember, beanpropertydefinition.getMetadata());
        JsonSerializer jsonserializer = findSerializerFromAnnotation(serializerprovider, annotatedmember);
        if (jsonserializer instanceof ResolvableSerializer)
            ((ResolvableSerializer)jsonserializer).resolve(serializerprovider);
        jsonserializer = serializerprovider.handlePrimaryContextualization(jsonserializer, ((com.fasterxml.jackson.databind.BeanProperty) (obj)));
        obj = null;
        if (javatype.isContainerType() || javatype.isReferenceType())
            obj = findPropertyContentTypeSerializer(javatype, serializerprovider.getConfig(), annotatedmember);
        return propertybuilder.buildWriter(serializerprovider, beanpropertydefinition, javatype, jsonserializer, findPropertyTypeSerializer(javatype, serializerprovider.getConfig(), annotatedmember), ((TypeSerializer) (obj)), annotatedmember, flag);
    }

    protected JsonSerializer _createSerializer2(SerializerProvider serializerprovider, JavaType javatype, BeanDescription beandescription, boolean flag) {
        Object obj;
        SerializationConfig serializationconfig;
        obj = null;
        serializationconfig = serializerprovider.getConfig();
        if (!javatype.isContainerType()) goto _L2; else goto _L1
_L1:
        boolean flag1;
        JsonSerializer jsonserializer;
        flag1 = flag;
        if (!flag)
            flag1 = usesStaticTyping(serializationconfig, beandescription, null);
        obj = buildContainerSerializer(serializerprovider, javatype, beandescription, flag1);
        jsonserializer = ((JsonSerializer) (obj));
        if (obj == null) goto _L4; else goto _L3
_L3:
        serializerprovider = ((SerializerProvider) (obj));
_L7:
        return serializerprovider;
_L2:
        if (!javatype.isReferenceType()) goto _L6; else goto _L5
_L5:
        obj = findReferenceSerializer(serializerprovider, (ReferenceType)javatype, beandescription, flag);
_L9:
        jsonserializer = ((JsonSerializer) (obj));
        flag1 = flag;
        if (obj == null) {
            jsonserializer = findSerializerByAnnotations(serializerprovider, javatype, beandescription);
            flag1 = flag;
        }
_L4:
        obj = jsonserializer;
        if (jsonserializer == null) {
            jsonserializer = findSerializerByLookup(javatype, serializationconfig, beandescription, flag1);
            obj = jsonserializer;
            if (jsonserializer == null) {
                jsonserializer = findSerializerByPrimaryType(serializerprovider, javatype, beandescription, flag1);
                obj = jsonserializer;
                if (jsonserializer == null) {
                    jsonserializer = findBeanSerializer(serializerprovider, javatype, beandescription);
                    obj = jsonserializer;
                    if (jsonserializer == null) {
                        javatype = findSerializerByAddonType(serializationconfig, javatype, beandescription, flag1);
                        obj = javatype;
                        if (javatype == null)
                            obj = serializerprovider.getUnknownTypeSerializer(beandescription.getBeanClass());
                    }
                }
            }
        }
        serializerprovider = ((SerializerProvider) (obj));
        if (obj != null) {
            serializerprovider = ((SerializerProvider) (obj));
            if (_factoryConfig.hasSerializerModifiers()) {
                javatype = _factoryConfig.serializerModifiers().iterator();
                serializerprovider = ((SerializerProvider) (obj));
                while (javatype.hasNext()) 
                    serializerprovider = ((BeanSerializerModifier)javatype.next()).modifySerializer(serializationconfig, beandescription, serializerprovider);
            }
        }
          goto _L7
_L6:
        Iterator iterator = customSerializers().iterator();
_L11:
        if (!iterator.hasNext()) goto _L9; else goto _L8
_L8:
        jsonserializer = ((Serializers)iterator.next()).findSerializer(serializationconfig, javatype, beandescription);
        obj = jsonserializer;
        if (jsonserializer == null) goto _L11; else goto _L10
_L10:
        obj = jsonserializer;
          goto _L9
    }

    protected JsonSerializer constructBeanSerializer(SerializerProvider serializerprovider, BeanDescription beandescription) {
        if (beandescription.getBeanClass() != java/lang/Object) goto _L2; else goto _L1
_L1:
        serializerprovider = serializerprovider.getUnknownTypeSerializer(java/lang/Object);
_L4:
        return serializerprovider;
_L2:
        SerializationConfig serializationconfig = serializerprovider.getConfig();
        Object obj1 = constructBeanSerializerBuilder(beandescription);
        ((BeanSerializerBuilder) (obj1)).setConfig(serializationconfig);
        Object obj = findBeanProperties(serializerprovider, beandescription, ((BeanSerializerBuilder) (obj1)));
        Object obj2;
        if (obj == null)
            obj = new ArrayList();
        else
            obj = removeOverlappingTypeIds(serializerprovider, beandescription, ((BeanSerializerBuilder) (obj1)), ((List) (obj)));
        serializerprovider.getAnnotationIntrospector().findAndAddVirtualProperties(serializationconfig, beandescription.getClassInfo(), ((List) (obj)));
        if (_factoryConfig.hasSerializerModifiers()) {
            Iterator iterator1 = _factoryConfig.serializerModifiers().iterator();
            do {
                obj2 = obj;
                if (!iterator1.hasNext())
                    break;
                obj = ((BeanSerializerModifier)iterator1.next()).changeProperties(serializationconfig, beandescription, ((List) (obj)));
            } while (true);
        } else {
            obj2 = obj;
        }
        obj = filterBeanProperties(serializationconfig, beandescription, ((List) (obj2)));
        if (_factoryConfig.hasSerializerModifiers()) {
            Iterator iterator2 = _factoryConfig.serializerModifiers().iterator();
            do {
                obj2 = obj;
                if (!iterator2.hasNext())
                    break;
                obj = ((BeanSerializerModifier)iterator2.next()).orderProperties(serializationconfig, beandescription, ((List) (obj)));
            } while (true);
        } else {
            obj2 = obj;
        }
        ((BeanSerializerBuilder) (obj1)).setObjectIdWriter(constructObjectIdHandler(serializerprovider, beandescription, ((List) (obj2))));
        ((BeanSerializerBuilder) (obj1)).setProperties(((List) (obj2)));
        ((BeanSerializerBuilder) (obj1)).setFilterId(findFilterId(serializationconfig, beandescription));
        obj2 = beandescription.findAnyGetter();
        if (obj2 != null) {
            if (serializationconfig.canOverrideAccessModifiers())
                ((AnnotatedMember) (obj2)).fixAccess(serializationconfig.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
            JavaType javatype = ((AnnotatedMember) (obj2)).getType();
            boolean flag = serializationconfig.isEnabled(MapperFeature.USE_STATIC_TYPING);
            obj = javatype.getContentType();
            TypeSerializer typeserializer = createTypeSerializer(serializationconfig, ((JavaType) (obj)));
            serializerprovider = findSerializerFromAnnotation(serializerprovider, ((com.fasterxml.jackson.databind.introspect.Annotated) (obj2)));
            if (serializerprovider == null)
                serializerprovider = MapSerializer.construct(null, javatype, flag, typeserializer, null, null, null);
            ((BeanSerializerBuilder) (obj1)).setAnyGetter(new AnyGetterWriter(new com.fasterxml.jackson.databind.BeanProperty.Std(PropertyName.construct(((AnnotatedMember) (obj2)).getName()), ((JavaType) (obj)), null, beandescription.getClassAnnotations(), ((AnnotatedMember) (obj2)), PropertyMetadata.STD_OPTIONAL), ((AnnotatedMember) (obj2)), serializerprovider));
        }
        processViews(serializationconfig, ((BeanSerializerBuilder) (obj1)));
        if (_factoryConfig.hasSerializerModifiers()) {
            Iterator iterator = _factoryConfig.serializerModifiers().iterator();
            serializerprovider = ((SerializerProvider) (obj1));
            do {
                obj = serializerprovider;
                if (!iterator.hasNext())
                    break;
                serializerprovider = ((BeanSerializerModifier)iterator.next()).updateBuilder(serializationconfig, beandescription, serializerprovider);
            } while (true);
        } else {
            obj = obj1;
        }
        obj1 = ((BeanSerializerBuilder) (obj)).build();
        serializerprovider = ((SerializerProvider) (obj1));
        if (obj1 == null) {
            serializerprovider = ((SerializerProvider) (obj1));
            if (beandescription.hasKnownClassAnnotations())
                serializerprovider = ((BeanSerializerBuilder) (obj)).createDummy();
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected BeanSerializerBuilder constructBeanSerializerBuilder(BeanDescription beandescription) {
        return new BeanSerializerBuilder(beandescription);
    }

    protected BeanPropertyWriter constructFilteredBeanWriter(BeanPropertyWriter beanpropertywriter, Class aclass[]) {
        return FilteredBeanPropertyWriter.constructViewBased(beanpropertywriter, aclass);
    }

    protected ObjectIdWriter constructObjectIdHandler(SerializerProvider serializerprovider, BeanDescription beandescription, List list) {
        Object obj;
        ObjectIdInfo objectidinfo;
        obj = null;
        objectidinfo = beandescription.getObjectIdInfo();
        if (objectidinfo != null) goto _L2; else goto _L1
_L1:
        serializerprovider = obj;
_L4:
        return serializerprovider;
_L2:
        Object obj1 = objectidinfo.getGeneratorType();
        if (obj1 == com/fasterxml/jackson/annotation/ObjectIdGenerators$PropertyGenerator) {
            obj1 = objectidinfo.getPropertyName().getSimpleName();
            int j = list.size();
            int i = 0;
            do {
                if (i == j)
                    throw new IllegalArgumentException((new StringBuilder()).append("Invalid Object Id definition for ").append(beandescription.getBeanClass().getName()).append(": can not find property with name '").append(((String) (obj1))).append("'").toString());
                serializerprovider = (BeanPropertyWriter)list.get(i);
                if (((String) (obj1)).equals(serializerprovider.getName())) {
                    if (i > 0) {
                        list.remove(i);
                        list.add(0, serializerprovider);
                    }
                    beandescription = serializerprovider.getType();
                    serializerprovider = new PropertyBasedObjectIdGenerator(objectidinfo, serializerprovider);
                    serializerprovider = ObjectIdWriter.construct(beandescription, (PropertyName)null, serializerprovider, objectidinfo.getAlwaysAsId());
                    continue; /* Loop/switch isn't completed */
                }
                i++;
            } while (true);
        }
        list = serializerprovider.constructType(((java.lang.reflect.Type) (obj1)));
        list = serializerprovider.getTypeFactory().findTypeParameters(list, com/fasterxml/jackson/annotation/ObjectIdGenerator)[0];
        serializerprovider = serializerprovider.objectIdGeneratorInstance(beandescription.getClassInfo(), objectidinfo);
        serializerprovider = ObjectIdWriter.construct(list, objectidinfo.getPropertyName(), serializerprovider, objectidinfo.getAlwaysAsId());
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected PropertyBuilder constructPropertyBuilder(SerializationConfig serializationconfig, BeanDescription beandescription) {
        return new PropertyBuilder(serializationconfig, beandescription);
    }

    public JsonSerializer createSerializer(SerializerProvider serializerprovider, JavaType javatype) {
        SerializationConfig serializationconfig = serializerprovider.getConfig();
        Object obj1 = serializationconfig.introspect(javatype);
        JsonSerializer jsonserializer = findSerializerFromAnnotation(serializerprovider, ((BeanDescription) (obj1)).getClassInfo());
        if (jsonserializer != null) {
            serializerprovider = jsonserializer;
        } else {
            Object obj = serializationconfig.getAnnotationIntrospector();
            boolean flag;
            if (obj == null)
                obj = javatype;
            else
                obj = ((AnnotationIntrospector) (obj)).refineSerializationType(serializationconfig, ((BeanDescription) (obj1)).getClassInfo(), javatype);
            if (obj == javatype) {
                flag = false;
                javatype = ((JavaType) (obj1));
            } else
            if (!((JavaType) (obj)).hasRawClass(javatype.getRawClass())) {
                javatype = serializationconfig.introspect(((JavaType) (obj)));
                flag = true;
            } else {
                flag = true;
                javatype = ((JavaType) (obj1));
            }
            obj1 = javatype.findSerializationConverter();
            if (obj1 == null) {
                serializerprovider = _createSerializer2(serializerprovider, ((JavaType) (obj)), javatype, flag);
            } else {
                JavaType javatype1 = ((Converter) (obj1)).getOutputType(serializerprovider.getTypeFactory());
                if (!javatype1.hasRawClass(((JavaType) (obj)).getRawClass())) {
                    javatype = serializationconfig.introspect(javatype1);
                    jsonserializer = findSerializerFromAnnotation(serializerprovider, javatype.getClassInfo());
                }
                obj = jsonserializer;
                if (jsonserializer == null) {
                    obj = jsonserializer;
                    if (!javatype1.isJavaLangObject())
                        obj = _createSerializer2(serializerprovider, javatype1, javatype, true);
                }
                serializerprovider = new StdDelegatingSerializer(((Converter) (obj1)), javatype1, ((JsonSerializer) (obj)));
            }
        }
        return serializerprovider;
    }

    protected Iterable customSerializers() {
        return _factoryConfig.serializers();
    }

    protected List filterBeanProperties(SerializationConfig serializationconfig, BeanDescription beandescription, List list) {
        serializationconfig = serializationconfig.getAnnotationIntrospector().findPropertiesToIgnore(beandescription.getClassInfo(), true);
        if (serializationconfig != null && serializationconfig.length > 0) {
            beandescription = ArrayBuilders.arrayToSet(serializationconfig);
            serializationconfig = list.iterator();
            do {
                if (!serializationconfig.hasNext())
                    break;
                if (beandescription.contains(((BeanPropertyWriter)serializationconfig.next()).getName()))
                    serializationconfig.remove();
            } while (true);
        }
        return list;
    }

    protected List findBeanProperties(SerializerProvider serializerprovider, BeanDescription beandescription, BeanSerializerBuilder beanserializerbuilder) {
        Object obj = null;
        Object obj1 = beandescription.findProperties();
        SerializationConfig serializationconfig = serializerprovider.getConfig();
        removeIgnorableTypes(serializationconfig, beandescription, ((List) (obj1)));
        if (serializationconfig.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS))
            removeSetterlessGetters(serializationconfig, beandescription, ((List) (obj1)));
        if (((List) (obj1)).isEmpty()) {
            serializerprovider = obj;
        } else {
            boolean flag1 = usesStaticTyping(serializationconfig, beandescription, null);
            PropertyBuilder propertybuilder = constructPropertyBuilder(serializationconfig, beandescription);
            beandescription = new ArrayList(((List) (obj1)).size());
            boolean flag2 = serializationconfig.canOverrideAccessModifiers();
            boolean flag;
            if (flag2 && serializationconfig.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS))
                flag = true;
            else
                flag = false;
            obj1 = ((List) (obj1)).iterator();
            do {
                if (!((Iterator) (obj1)).hasNext())
                    break;
                BeanPropertyDefinition beanpropertydefinition = (BeanPropertyDefinition)((Iterator) (obj1)).next();
                AnnotatedMember annotatedmember = beanpropertydefinition.getAccessor();
                if (beanpropertydefinition.isTypeId()) {
                    if (annotatedmember != null) {
                        if (flag2)
                            annotatedmember.fixAccess(flag);
                        beanserializerbuilder.setTypeId(annotatedmember);
                    }
                } else {
                    com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty referenceproperty = beanpropertydefinition.findReferenceType();
                    if (referenceproperty == null || !referenceproperty.isBackReference())
                        if (annotatedmember instanceof AnnotatedMethod)
                            beandescription.add(_constructWriter(serializerprovider, beanpropertydefinition, propertybuilder, flag1, (AnnotatedMethod)annotatedmember));
                        else
                            beandescription.add(_constructWriter(serializerprovider, beanpropertydefinition, propertybuilder, flag1, (AnnotatedField)annotatedmember));
                }
            } while (true);
            serializerprovider = beandescription;
        }
        return serializerprovider;
    }

    public JsonSerializer findBeanSerializer(SerializerProvider serializerprovider, JavaType javatype, BeanDescription beandescription) {
        if (!isPotentialBeanType(javatype.getRawClass()) && !javatype.isEnumType())
            serializerprovider = null;
        else
            serializerprovider = constructBeanSerializer(serializerprovider, beandescription);
        return serializerprovider;
    }

    public TypeSerializer findPropertyContentTypeSerializer(JavaType javatype, SerializationConfig serializationconfig, AnnotatedMember annotatedmember) {
        JavaType javatype1 = javatype.getContentType();
        javatype = serializationconfig.getAnnotationIntrospector().findPropertyContentTypeResolver(serializationconfig, annotatedmember, javatype);
        if (javatype == null)
            javatype = createTypeSerializer(serializationconfig, javatype1);
        else
            javatype = javatype.buildTypeSerializer(serializationconfig, javatype1, serializationconfig.getSubtypeResolver().collectAndResolveSubtypesByClass(serializationconfig, annotatedmember, javatype1));
        return javatype;
    }

    public TypeSerializer findPropertyTypeSerializer(JavaType javatype, SerializationConfig serializationconfig, AnnotatedMember annotatedmember) {
        TypeResolverBuilder typeresolverbuilder = serializationconfig.getAnnotationIntrospector().findPropertyTypeResolver(serializationconfig, annotatedmember, javatype);
        if (typeresolverbuilder == null)
            javatype = createTypeSerializer(serializationconfig, javatype);
        else
            javatype = typeresolverbuilder.buildTypeSerializer(serializationconfig, javatype, serializationconfig.getSubtypeResolver().collectAndResolveSubtypesByClass(serializationconfig, annotatedmember, javatype));
        return javatype;
    }

    public JsonSerializer findReferenceSerializer(SerializerProvider serializerprovider, ReferenceType referencetype, BeanDescription beandescription, boolean flag) {
        Object obj1 = referencetype.getContentType();
        Object obj = (TypeSerializer)((JavaType) (obj1)).getTypeHandler();
        SerializationConfig serializationconfig = serializerprovider.getConfig();
        JsonSerializer jsonserializer;
        if (obj == null)
            serializerprovider = createTypeSerializer(serializationconfig, ((JavaType) (obj1)));
        else
            serializerprovider = ((SerializerProvider) (obj));
        jsonserializer = (JsonSerializer)((JavaType) (obj1)).getValueHandler();
        obj1 = customSerializers().iterator();
        if (!((Iterator) (obj1)).hasNext()) goto _L2; else goto _L1
_L1:
        obj = ((Serializers)((Iterator) (obj1)).next()).findReferenceSerializer(serializationconfig, referencetype, beandescription, serializerprovider, jsonserializer);
        if (obj == null)
            break MISSING_BLOCK_LABEL_57;
        serializerprovider = ((SerializerProvider) (obj));
_L4:
        return serializerprovider;
_L2:
        if (referencetype.isTypeOrSubTypeOf(java/util/concurrent/atomic/AtomicReference))
            serializerprovider = new AtomicReferenceSerializer(referencetype, flag, serializerprovider, jsonserializer);
        else
            serializerprovider = null;
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected boolean isPotentialBeanType(Class class1) {
        boolean flag;
        if (ClassUtil.canBeABeanType(class1) == null && !ClassUtil.isProxyType(class1))
            flag = true;
        else
            flag = false;
        return flag;
    }

    protected void processViews(SerializationConfig serializationconfig, BeanSerializerBuilder beanserializerbuilder) {
        int i;
        int k;
        int l;
        boolean flag;
        List list;
        BeanPropertyWriter abeanpropertywriter[];
        list = beanserializerbuilder.getProperties();
        flag = serializationconfig.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION);
        l = list.size();
        abeanpropertywriter = new BeanPropertyWriter[l];
        k = 0;
        i = 0;
_L2:
        int j;
        BeanPropertyWriter beanpropertywriter;
        if (k >= l)
            break MISSING_BLOCK_LABEL_111;
        beanpropertywriter = (BeanPropertyWriter)list.get(k);
        serializationconfig = beanpropertywriter.getViews();
        if (serializationconfig != null)
            break; /* Loop/switch isn't completed */
        j = i;
        if (!flag)
            break MISSING_BLOCK_LABEL_105;
        abeanpropertywriter[k] = beanpropertywriter;
_L3:
        k++;
        if (true) goto _L2; else goto _L1
_L1:
        j = i + 1;
        abeanpropertywriter[k] = constructFilteredBeanWriter(beanpropertywriter, serializationconfig);
        i = j;
          goto _L3
        if (!flag || i != 0)
            beanserializerbuilder.setFilteredProperties(abeanpropertywriter);
        return;
    }

    protected void removeIgnorableTypes(SerializationConfig serializationconfig, BeanDescription beandescription, List list) {
        AnnotationIntrospector annotationintrospector = serializationconfig.getAnnotationIntrospector();
        HashMap hashmap = new HashMap();
        Iterator iterator = list.iterator();
        do {
            if (!iterator.hasNext())
                break;
            beandescription = ((BeanPropertyDefinition)iterator.next()).getAccessor();
            if (beandescription == null) {
                iterator.remove();
            } else {
                Class class1 = beandescription.getRawType();
                list = (Boolean)hashmap.get(class1);
                beandescription = list;
                if (list == null) {
                    list = annotationintrospector.isIgnorableType(serializationconfig.introspectClassAnnotations(class1).getClassInfo());
                    beandescription = list;
                    if (list == null)
                        beandescription = Boolean.FALSE;
                    hashmap.put(class1, beandescription);
                }
                if (beandescription.booleanValue())
                    iterator.remove();
            }
        } while (true);
    }

    protected List removeOverlappingTypeIds(SerializerProvider serializerprovider, BeanDescription beandescription, BeanSerializerBuilder beanserializerbuilder, List list) {
        int i;
        int j;
        j = list.size();
        i = 0;
_L2:
        if (i >= j)
            break MISSING_BLOCK_LABEL_115;
        serializerprovider = (BeanPropertyWriter)list.get(i);
        beandescription = serializerprovider.getTypeSerializer();
        if (beandescription != null && beandescription.getTypeInclusion() == com.fasterxml.jackson.annotation.JsonTypeInfo.As.EXTERNAL_PROPERTY)
            break; /* Loop/switch isn't completed */
_L4:
        i++;
        if (true) goto _L2; else goto _L1
_L1:
        PropertyName propertyname;
        propertyname = PropertyName.construct(beandescription.getPropertyName());
        beandescription = list.iterator();
_L6:
        if (!beandescription.hasNext()) goto _L4; else goto _L3
_L3:
        beanserializerbuilder = (BeanPropertyWriter)beandescription.next();
        if (beanserializerbuilder == serializerprovider || !beanserializerbuilder.wouldConflictWithName(propertyname)) goto _L6; else goto _L5
_L5:
        serializerprovider.assignTypeSerializer(null);
          goto _L4
        return list;
    }

    protected void removeSetterlessGetters(SerializationConfig serializationconfig, BeanDescription beandescription, List list) {
        serializationconfig = list.iterator();
        do {
            if (!serializationconfig.hasNext())
                break;
            beandescription = (BeanPropertyDefinition)serializationconfig.next();
            if (!beandescription.couldDeserialize() && !beandescription.isExplicitlyIncluded())
                serializationconfig.remove();
        } while (true);
    }

    public SerializerFactory withConfig(SerializerFactoryConfig serializerfactoryconfig) {
        if (_factoryConfig == serializerfactoryconfig) {
            serializerfactoryconfig = this;
        } else {
            if (getClass() != com/fasterxml/jackson/databind/ser/BeanSerializerFactory)
                throw new IllegalStateException((new StringBuilder()).append("Subtype of BeanSerializerFactory (").append(getClass().getName()).append(") has not properly overridden method 'withAdditionalSerializers': can not instantiate subtype with ").append("additional serializer definitions").toString());
            serializerfactoryconfig = new BeanSerializerFactory(serializerfactoryconfig);
        }
        return serializerfactoryconfig;
    }

}
