// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.std;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.ContextualSerializer;
import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.util.concurrent.atomic.AtomicReference;

// Referenced classes of package com.fasterxml.jackson.databind.ser.std:
//            StdSerializer

public class AtomicReferenceSerializer extends StdSerializer
    implements ContextualSerializer {

    private static final long serialVersionUID = 1L;
    protected final com.fasterxml.jackson.annotation.JsonInclude.Include _contentInclusion;
    protected transient PropertySerializerMap _dynamicSerializers;
    protected final BeanProperty _property;
    protected final JavaType _referredType;
    protected final NameTransformer _unwrapper;
    protected final JsonSerializer _valueSerializer;
    protected final TypeSerializer _valueTypeSerializer;

    protected AtomicReferenceSerializer(AtomicReferenceSerializer atomicreferenceserializer, BeanProperty beanproperty, TypeSerializer typeserializer, JsonSerializer jsonserializer, NameTransformer nametransformer, com.fasterxml.jackson.annotation.JsonInclude.Include include) {
        super(atomicreferenceserializer);
        _referredType = atomicreferenceserializer._referredType;
        _dynamicSerializers = atomicreferenceserializer._dynamicSerializers;
        _property = beanproperty;
        _valueTypeSerializer = typeserializer;
        _valueSerializer = jsonserializer;
        _unwrapper = nametransformer;
        if (include == com.fasterxml.jackson.annotation.JsonInclude.Include.USE_DEFAULTS || include == com.fasterxml.jackson.annotation.JsonInclude.Include.ALWAYS)
            _contentInclusion = null;
        else
            _contentInclusion = include;
    }

    public AtomicReferenceSerializer(ReferenceType referencetype, boolean flag, TypeSerializer typeserializer, JsonSerializer jsonserializer) {
        super(referencetype);
        _referredType = referencetype.getReferencedType();
        _property = null;
        _valueTypeSerializer = typeserializer;
        _valueSerializer = jsonserializer;
        _unwrapper = null;
        _contentInclusion = null;
        _dynamicSerializers = PropertySerializerMap.emptyForProperties();
    }

    private final JsonSerializer _findCachedSerializer(SerializerProvider serializerprovider, Class class1) {
        JsonSerializer jsonserializer = _dynamicSerializers.serializerFor(class1);
        Object obj = jsonserializer;
        if (jsonserializer == null) {
            obj = _findSerializer(serializerprovider, class1, _property);
            serializerprovider = ((SerializerProvider) (obj));
            if (_unwrapper != null)
                serializerprovider = ((JsonSerializer) (obj)).unwrappingSerializer(_unwrapper);
            _dynamicSerializers = _dynamicSerializers.newWith(class1, serializerprovider);
            obj = serializerprovider;
        }
        return ((JsonSerializer) (obj));
    }

    private final JsonSerializer _findSerializer(SerializerProvider serializerprovider, JavaType javatype, BeanProperty beanproperty) {
        return serializerprovider.findTypedValueSerializer(javatype, true, beanproperty);
    }

    private final JsonSerializer _findSerializer(SerializerProvider serializerprovider, Class class1, BeanProperty beanproperty) {
        return serializerprovider.findTypedValueSerializer(class1, true, beanproperty);
    }

    protected boolean _useStatic(SerializerProvider serializerprovider, BeanProperty beanproperty, JavaType javatype) {
        boolean flag = false;
        if (!javatype.isJavaLangObject()) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        if (javatype.isFinal()) {
            flag = true;
            continue; /* Loop/switch isn't completed */
        }
        if (javatype.useStaticType()) {
            flag = true;
            continue; /* Loop/switch isn't completed */
        }
        javatype = serializerprovider.getAnnotationIntrospector();
        if (javatype != null && beanproperty != null && beanproperty.getMember() != null) {
            beanproperty = javatype.findSerializationTyping(beanproperty.getMember());
            if (beanproperty == com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing.STATIC) {
                flag = true;
                continue; /* Loop/switch isn't completed */
            }
            if (beanproperty == com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing.DYNAMIC)
                continue; /* Loop/switch isn't completed */
        }
        flag = serializerprovider.isEnabled(MapperFeature.USE_STATIC_TYPING);
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
        JsonSerializer jsonserializer = _valueSerializer;
        javatype = jsonserializer;
        if (jsonserializer == null) {
            JsonSerializer jsonserializer1 = _findSerializer(jsonformatvisitorwrapper.getProvider(), _referredType, _property);
            javatype = jsonserializer1;
            if (_unwrapper != null)
                javatype = jsonserializer1.unwrappingSerializer(_unwrapper);
        }
        javatype.acceptJsonFormatVisitor(jsonformatvisitorwrapper, _referredType);
    }

    public JsonSerializer createContextual(SerializerProvider serializerprovider, BeanProperty beanproperty) {
        Object obj1;
        Object obj = _valueTypeSerializer;
        TypeSerializer typeserializer = ((TypeSerializer) (obj));
        if (obj != null)
            typeserializer = ((TypeSerializer) (obj)).forProperty(beanproperty);
        obj1 = findAnnotatedContentSerializer(serializerprovider, beanproperty);
        obj = obj1;
        if (obj1 == null) {
            obj = _valueSerializer;
            if (obj == null) {
                if (_useStatic(serializerprovider, beanproperty, _referredType))
                    obj = _findSerializer(serializerprovider, _referredType, beanproperty);
            } else {
                obj = serializerprovider.handlePrimaryContextualization(((JsonSerializer) (obj)), beanproperty);
            }
        }
        obj1 = _contentInclusion;
        if (beanproperty == null) goto _L2; else goto _L1
_L1:
        serializerprovider = beanproperty.findPropertyInclusion(serializerprovider.getConfig(), java/util/concurrent/atomic/AtomicReference).getContentInclusion();
        if (serializerprovider == obj1 || serializerprovider == com.fasterxml.jackson.annotation.JsonInclude.Include.USE_DEFAULTS) goto _L2; else goto _L3
_L3:
        return withResolved(beanproperty, typeserializer, ((JsonSerializer) (obj)), _unwrapper, serializerprovider);
_L2:
        serializerprovider = ((SerializerProvider) (obj1));
        if (true) goto _L3; else goto _L4
_L4:
    }

    public volatile boolean isEmpty(SerializerProvider serializerprovider, Object obj) {
        return isEmpty(serializerprovider, (AtomicReference)obj);
    }

    public boolean isEmpty(SerializerProvider serializerprovider, AtomicReference atomicreference) {
        boolean flag = true;
        if (atomicreference != null) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        Object obj = atomicreference.get();
        if (obj != null)
            if (_contentInclusion == null) {
                flag = false;
            } else {
                JsonSerializer jsonserializer = _valueSerializer;
                atomicreference = jsonserializer;
                if (jsonserializer == null)
                    try {
                        atomicreference = _findCachedSerializer(serializerprovider, obj.getClass());
                    }
                    // Misplaced declaration of an exception variable
                    catch (SerializerProvider serializerprovider) {
                        throw new RuntimeJsonMappingException(serializerprovider);
                    }
                flag = atomicreference.isEmpty(serializerprovider, obj);
            }
        if (true) goto _L1; else goto _L3
_L3:
    }

    public boolean isUnwrappingSerializer() {
        boolean flag;
        if (_unwrapper != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public volatile void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        serialize((AtomicReference)obj, jsongenerator, serializerprovider);
    }

    public void serialize(AtomicReference atomicreference, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        Object obj = atomicreference.get();
        if (obj == null) {
            if (_unwrapper == null)
                serializerprovider.defaultSerializeNull(jsongenerator);
        } else {
            JsonSerializer jsonserializer = _valueSerializer;
            atomicreference = jsonserializer;
            if (jsonserializer == null)
                atomicreference = _findCachedSerializer(serializerprovider, obj.getClass());
            if (_valueTypeSerializer != null)
                atomicreference.serializeWithType(obj, jsongenerator, serializerprovider, _valueTypeSerializer);
            else
                atomicreference.serialize(obj, jsongenerator, serializerprovider);
        }
    }

    public volatile void serializeWithType(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, TypeSerializer typeserializer) {
        serializeWithType((AtomicReference)obj, jsongenerator, serializerprovider, typeserializer);
    }

    public void serializeWithType(AtomicReference atomicreference, JsonGenerator jsongenerator, SerializerProvider serializerprovider, TypeSerializer typeserializer) {
        Object obj = atomicreference.get();
        if (obj == null) {
            if (_unwrapper == null)
                serializerprovider.defaultSerializeNull(jsongenerator);
        } else {
            JsonSerializer jsonserializer = _valueSerializer;
            atomicreference = jsonserializer;
            if (jsonserializer == null)
                atomicreference = _findCachedSerializer(serializerprovider, obj.getClass());
            atomicreference.serializeWithType(obj, jsongenerator, serializerprovider, typeserializer);
        }
    }

    public JsonSerializer unwrappingSerializer(NameTransformer nametransformer) {
        JsonSerializer jsonserializer1 = _valueSerializer;
        JsonSerializer jsonserializer = jsonserializer1;
        if (jsonserializer1 != null)
            jsonserializer = jsonserializer1.unwrappingSerializer(nametransformer);
        if (_unwrapper != null)
            nametransformer = NameTransformer.chainedTransformer(nametransformer, _unwrapper);
        return withResolved(_property, _valueTypeSerializer, jsonserializer, nametransformer, _contentInclusion);
    }

    protected AtomicReferenceSerializer withResolved(BeanProperty beanproperty, TypeSerializer typeserializer, JsonSerializer jsonserializer, NameTransformer nametransformer, com.fasterxml.jackson.annotation.JsonInclude.Include include) {
        if (_property == beanproperty && include == _contentInclusion && _valueTypeSerializer == typeserializer && _valueSerializer == jsonserializer && _unwrapper == nametransformer)
            beanproperty = this;
        else
            beanproperty = new AtomicReferenceSerializer(this, beanproperty, typeserializer, jsonserializer, nametransformer, include);
        return beanproperty;
    }
}
