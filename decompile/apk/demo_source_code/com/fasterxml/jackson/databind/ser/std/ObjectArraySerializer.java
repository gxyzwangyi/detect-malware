// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.std;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsonschema.JsonSchema;
import com.fasterxml.jackson.databind.jsonschema.SchemaAware;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.ContainerSerializer;
import com.fasterxml.jackson.databind.ser.ContextualSerializer;
import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Type;

// Referenced classes of package com.fasterxml.jackson.databind.ser.std:
//            ArraySerializerBase

public class ObjectArraySerializer extends ArraySerializerBase
    implements ContextualSerializer {

    protected PropertySerializerMap _dynamicSerializers;
    protected JsonSerializer _elementSerializer;
    protected final JavaType _elementType;
    protected final boolean _staticTyping;
    protected final TypeSerializer _valueTypeSerializer;

    public ObjectArraySerializer(JavaType javatype, boolean flag, TypeSerializer typeserializer, JsonSerializer jsonserializer) {
        super([Ljava/lang/Object;);
        _elementType = javatype;
        _staticTyping = flag;
        _valueTypeSerializer = typeserializer;
        _dynamicSerializers = PropertySerializerMap.emptyForProperties();
        _elementSerializer = jsonserializer;
    }

    public ObjectArraySerializer(ObjectArraySerializer objectarrayserializer, BeanProperty beanproperty, TypeSerializer typeserializer, JsonSerializer jsonserializer, Boolean boolean1) {
        super(objectarrayserializer, beanproperty, boolean1);
        _elementType = objectarrayserializer._elementType;
        _valueTypeSerializer = typeserializer;
        _staticTyping = objectarrayserializer._staticTyping;
        _dynamicSerializers = objectarrayserializer._dynamicSerializers;
        _elementSerializer = jsonserializer;
    }

    public ObjectArraySerializer(ObjectArraySerializer objectarrayserializer, TypeSerializer typeserializer) {
        super(objectarrayserializer);
        _elementType = objectarrayserializer._elementType;
        _valueTypeSerializer = typeserializer;
        _staticTyping = objectarrayserializer._staticTyping;
        _dynamicSerializers = objectarrayserializer._dynamicSerializers;
        _elementSerializer = objectarrayserializer._elementSerializer;
    }

    protected final JsonSerializer _findAndAddDynamic(PropertySerializerMap propertyserializermap, JavaType javatype, SerializerProvider serializerprovider) {
        javatype = propertyserializermap.findAndAddSecondarySerializer(javatype, serializerprovider, _property);
        if (propertyserializermap != ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (javatype)).map)
            _dynamicSerializers = ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (javatype)).map;
        return ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (javatype)).serializer;
    }

    protected final JsonSerializer _findAndAddDynamic(PropertySerializerMap propertyserializermap, Class class1, SerializerProvider serializerprovider) {
        class1 = propertyserializermap.findAndAddSecondarySerializer(class1, serializerprovider, _property);
        if (propertyserializermap != ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (class1)).map)
            _dynamicSerializers = ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (class1)).map;
        return ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (class1)).serializer;
    }

    public JsonSerializer _withResolved(BeanProperty beanproperty, Boolean boolean1) {
        return new ObjectArraySerializer(this, beanproperty, _valueTypeSerializer, _elementSerializer, boolean1);
    }

    public ContainerSerializer _withValueTypeSerializer(TypeSerializer typeserializer) {
        return new ObjectArraySerializer(_elementType, _staticTyping, typeserializer, _elementSerializer);
    }

    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
        JsonArrayFormatVisitor jsonarrayformatvisitor = jsonformatvisitorwrapper.expectArrayFormat(javatype);
        if (jsonarrayformatvisitor != null) {
            JavaType javatype1 = jsonformatvisitorwrapper.getProvider().getTypeFactory().moreSpecificType(_elementType, javatype.getContentType());
            if (javatype1 == null)
                throw JsonMappingException.from(jsonformatvisitorwrapper.getProvider(), "Could not resolve type");
            JsonSerializer jsonserializer = _elementSerializer;
            javatype = jsonserializer;
            if (jsonserializer == null)
                javatype = jsonformatvisitorwrapper.getProvider().findValueSerializer(javatype1, _property);
            jsonarrayformatvisitor.itemsFormat(javatype, javatype1);
        }
    }

    public JsonSerializer createContextual(SerializerProvider serializerprovider, BeanProperty beanproperty) {
        Object obj;
        Object obj1;
        TypeSerializer typeserializer;
        Boolean boolean1;
        boolean1 = null;
        typeserializer = _valueTypeSerializer;
        if (typeserializer != null)
            typeserializer = typeserializer.forProperty(beanproperty);
        if (beanproperty == null)
            break MISSING_BLOCK_LABEL_201;
        obj = beanproperty.getMember();
        obj1 = serializerprovider.getAnnotationIntrospector();
        if (obj == null) goto _L2; else goto _L1
_L1:
        obj1 = ((AnnotationIntrospector) (obj1)).findContentSerializer(((com.fasterxml.jackson.databind.introspect.Annotated) (obj)));
        if (obj1 == null) goto _L2; else goto _L3
_L3:
        obj1 = serializerprovider.serializerInstance(((com.fasterxml.jackson.databind.introspect.Annotated) (obj)), obj1);
_L4:
        com.fasterxml.jackson.annotation.JsonFormat.Value value = beanproperty.findPropertyFormat(serializerprovider.getConfig(), _handledType);
        obj = obj1;
        if (value != null) {
            boolean1 = value.getFeature(com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED);
            obj = obj1;
        }
_L5:
        obj1 = obj;
        if (obj == null)
            obj1 = _elementSerializer;
        obj1 = findConvertingContentSerializer(serializerprovider, beanproperty, ((JsonSerializer) (obj1)));
        if (obj1 == null) {
            obj = obj1;
            if (_elementType != null) {
                obj = obj1;
                if (_staticTyping) {
                    obj = obj1;
                    if (!_elementType.isJavaLangObject())
                        obj = serializerprovider.findValueSerializer(_elementType, beanproperty);
                }
            }
        } else {
            obj = serializerprovider.handleSecondaryContextualization(((JsonSerializer) (obj1)), beanproperty);
        }
        return withResolved(beanproperty, typeserializer, ((JsonSerializer) (obj)), boolean1);
_L2:
        obj1 = null;
          goto _L4
        obj = null;
          goto _L5
    }

    public JsonSerializer getContentSerializer() {
        return _elementSerializer;
    }

    public JavaType getContentType() {
        return _elementType;
    }

    public JsonNode getSchema(SerializerProvider serializerprovider, Type type) {
        ObjectNode objectnode = createSchemaNode("array", true);
        if (type != null) {
            type = serializerprovider.constructType(type);
            if (type.isArrayType()) {
                type = ((ArrayType)type).getContentType().getRawClass();
                if (type == java/lang/Object) {
                    objectnode.set("items", JsonSchema.getDefaultSchemaNode());
                } else {
                    type = serializerprovider.findValueSerializer(type, _property);
                    if (type instanceof SchemaAware)
                        serializerprovider = ((SchemaAware)type).getSchema(serializerprovider, null);
                    else
                        serializerprovider = JsonSchema.getDefaultSchemaNode();
                    objectnode.set("items", serializerprovider);
                }
            }
        }
        return objectnode;
    }

    public volatile boolean hasSingleElement(Object obj) {
        return hasSingleElement((Object[])obj);
    }

    public boolean hasSingleElement(Object aobj[]) {
        boolean flag = true;
        if (aobj.length != 1)
            flag = false;
        return flag;
    }

    public volatile boolean isEmpty(SerializerProvider serializerprovider, Object obj) {
        return isEmpty(serializerprovider, (Object[])obj);
    }

    public boolean isEmpty(SerializerProvider serializerprovider, Object aobj[]) {
        boolean flag;
        if (aobj == null || aobj.length == 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public volatile void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        serialize((Object[])obj, jsongenerator, serializerprovider);
    }

    public final void serialize(Object aobj[], JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        int i = aobj.length;
        if (i == 1 && (_unwrapSingle == null && serializerprovider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED) || _unwrapSingle == Boolean.TRUE)) {
            serializeContents(aobj, jsongenerator, serializerprovider);
        } else {
            jsongenerator.writeStartArray(i);
            serializeContents(aobj, jsongenerator, serializerprovider);
            jsongenerator.writeEndArray();
        }
    }

    public volatile void serializeContents(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        serializeContents((Object[])obj, jsongenerator, serializerprovider);
    }

    public void serializeContents(Object aobj[], JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        int k = aobj.length;
        if (k != 0) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (_elementSerializer != null) {
            serializeContentsUsing(aobj, jsongenerator, serializerprovider, _elementSerializer);
            continue; /* Loop/switch isn't completed */
        }
        if (_valueTypeSerializer == null)
            break; /* Loop/switch isn't completed */
        serializeTypedContents(aobj, jsongenerator, serializerprovider);
        if (true) goto _L1; else goto _L3
_L3:
        int j = 0;
        int i = 0;
        Object obj = null;
        Object obj1 = null;
        JsonSerializer jsonserializer;
        JsonSerializer jsonserializer1;
        PropertySerializerMap propertyserializermap;
        Class class1;
        try {
            propertyserializermap = _dynamicSerializers;
        }
        // Misplaced declaration of an exception variable
        catch (Object aobj[]) {
            throw aobj;
        }
        // Misplaced declaration of an exception variable
        catch (Object aobj[]) {
            for (; (aobj instanceof InvocationTargetException) && ((Throwable) (aobj)).getCause() != null; aobj = ((Throwable) (aobj)).getCause());
            if (aobj instanceof Error)
                throw (Error)aobj;
            else
                throw JsonMappingException.wrapWithPath(((Throwable) (aobj)), obj, j);
        }
_L7:
        if (i >= k) goto _L1; else goto _L4
_L4:
        obj1 = aobj[i];
        if (obj1 != null) goto _L6; else goto _L5
_L5:
        obj = obj1;
        j = i;
        serializerprovider.defaultSerializeNull(jsongenerator);
_L12:
        i++;
          goto _L7
_L6:
        obj = obj1;
        j = i;
        class1 = obj1.getClass();
        obj = obj1;
        j = i;
        jsonserializer1 = propertyserializermap.serializerFor(class1);
        jsonserializer = jsonserializer1;
        if (jsonserializer1 != null) goto _L9; else goto _L8
_L8:
        obj = obj1;
        j = i;
        if (!_elementType.hasGenericTypes()) goto _L11; else goto _L10
_L10:
        obj = obj1;
        j = i;
        jsonserializer = _findAndAddDynamic(propertyserializermap, serializerprovider.constructSpecializedType(_elementType, class1), serializerprovider);
_L9:
        obj = obj1;
        j = i;
        jsonserializer.serialize(obj1, jsongenerator, serializerprovider);
          goto _L12
_L11:
        obj = obj1;
        j = i;
        jsonserializer = _findAndAddDynamic(propertyserializermap, class1, serializerprovider);
          goto _L9
    }

    public void serializeContentsUsing(Object aobj[], JsonGenerator jsongenerator, SerializerProvider serializerprovider, JsonSerializer jsonserializer) {
        int i;
        int j;
        TypeSerializer typeserializer;
        j = aobj.length;
        typeserializer = _valueTypeSerializer;
        Object obj = null;
        i = 0;
_L2:
        if (i >= j)
            break MISSING_BLOCK_LABEL_135;
        Object obj1 = aobj[i];
        if (obj1 != null)
            break; /* Loop/switch isn't completed */
        Object obj2 = obj1;
        try {
            serializerprovider.defaultSerializeNull(jsongenerator);
        }
        // Misplaced declaration of an exception variable
        catch (Object aobj[]) {
            throw aobj;
        }
        // Misplaced declaration of an exception variable
        catch (Object aobj[]) {
            for (; (aobj instanceof InvocationTargetException) && ((Throwable) (aobj)).getCause() != null; aobj = ((Throwable) (aobj)).getCause());
            if (aobj instanceof Error)
                throw (Error)aobj;
            else
                throw JsonMappingException.wrapWithPath(((Throwable) (aobj)), obj2, i);
        }
_L3:
        i++;
        if (true) goto _L2; else goto _L1
_L1:
        if (typeserializer != null)
            break MISSING_BLOCK_LABEL_73;
        obj2 = obj1;
        jsonserializer.serialize(obj1, jsongenerator, serializerprovider);
          goto _L3
        obj2 = obj1;
        jsonserializer.serializeWithType(obj1, jsongenerator, serializerprovider, typeserializer);
          goto _L3
    }

    public void serializeTypedContents(Object aobj[], JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        int k = aobj.length;
        TypeSerializer typeserializer = _valueTypeSerializer;
        int j = 0;
        int i = 0;
        Object obj = null;
        Object obj1 = null;
        JsonSerializer jsonserializer;
        JsonSerializer jsonserializer1;
        PropertySerializerMap propertyserializermap;
        Class class1;
        try {
            propertyserializermap = _dynamicSerializers;
        }
        // Misplaced declaration of an exception variable
        catch (Object aobj[]) {
            throw aobj;
        }
        // Misplaced declaration of an exception variable
        catch (Object aobj[]) {
            for (; (aobj instanceof InvocationTargetException) && ((Throwable) (aobj)).getCause() != null; aobj = ((Throwable) (aobj)).getCause());
            if (aobj instanceof Error)
                throw (Error)aobj;
            else
                throw JsonMappingException.wrapWithPath(((Throwable) (aobj)), obj, j);
        }
        if (i >= k)
            break MISSING_BLOCK_LABEL_193;
        obj1 = aobj[i];
        if (obj1 != null)
            break; /* Loop/switch isn't completed */
        obj = obj1;
        j = i;
        serializerprovider.defaultSerializeNull(jsongenerator);
_L4:
        i++;
        if (true) goto _L2; else goto _L1
_L2:
        break MISSING_BLOCK_LABEL_28;
_L1:
        obj = obj1;
        j = i;
        class1 = obj1.getClass();
        obj = obj1;
        j = i;
        jsonserializer1 = propertyserializermap.serializerFor(class1);
        jsonserializer = jsonserializer1;
        if (jsonserializer1 != null)
            break MISSING_BLOCK_LABEL_125;
        obj = obj1;
        j = i;
        jsonserializer = _findAndAddDynamic(propertyserializermap, class1, serializerprovider);
        obj = obj1;
        j = i;
        jsonserializer.serializeWithType(obj1, jsongenerator, serializerprovider, typeserializer);
        if (true) goto _L4; else goto _L3
_L3:
    }

    public ObjectArraySerializer withResolved(BeanProperty beanproperty, TypeSerializer typeserializer, JsonSerializer jsonserializer, Boolean boolean1) {
        if (_property == beanproperty && jsonserializer == _elementSerializer && _valueTypeSerializer == typeserializer && _unwrapSingle == boolean1)
            beanproperty = this;
        else
            beanproperty = new ObjectArraySerializer(this, beanproperty, typeserializer, jsonserializer, boolean1);
        return beanproperty;
    }
}
