// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.std;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsonschema.JsonSchema;
import com.fasterxml.jackson.databind.jsonschema.SchemaAware;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.ContainerSerializer;
import com.fasterxml.jackson.databind.ser.ContextualSerializer;
import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
import java.lang.reflect.Type;

public abstract class AsArraySerializerBase extends ContainerSerializer
    implements ContextualSerializer {

    protected PropertySerializerMap _dynamicSerializers;
    protected final JsonSerializer _elementSerializer;
    protected final JavaType _elementType;
    protected final BeanProperty _property;
    protected final boolean _staticTyping;
    protected final Boolean _unwrapSingle;
    protected final TypeSerializer _valueTypeSerializer;

    protected AsArraySerializerBase(AsArraySerializerBase asarrayserializerbase, BeanProperty beanproperty, TypeSerializer typeserializer, JsonSerializer jsonserializer) {
        this(asarrayserializerbase, beanproperty, typeserializer, jsonserializer, asarrayserializerbase._unwrapSingle);
    }

    protected AsArraySerializerBase(AsArraySerializerBase asarrayserializerbase, BeanProperty beanproperty, TypeSerializer typeserializer, JsonSerializer jsonserializer, Boolean boolean1) {
        super(asarrayserializerbase);
        _elementType = asarrayserializerbase._elementType;
        _staticTyping = asarrayserializerbase._staticTyping;
        _valueTypeSerializer = typeserializer;
        _property = beanproperty;
        _elementSerializer = jsonserializer;
        _dynamicSerializers = asarrayserializerbase._dynamicSerializers;
        _unwrapSingle = boolean1;
    }

    protected AsArraySerializerBase(Class class1, JavaType javatype, boolean flag, TypeSerializer typeserializer, BeanProperty beanproperty, JsonSerializer jsonserializer) {
label0:
        {
            boolean flag1 = false;
            super(class1, false);
            _elementType = javatype;
            if (!flag) {
                flag = flag1;
                if (javatype == null)
                    break label0;
                flag = flag1;
                if (!javatype.isFinal())
                    break label0;
            }
            flag = true;
        }
        _staticTyping = flag;
        _valueTypeSerializer = typeserializer;
        _property = beanproperty;
        _elementSerializer = jsonserializer;
        _dynamicSerializers = PropertySerializerMap.emptyForProperties();
        _unwrapSingle = null;
    }

    protected AsArraySerializerBase(Class class1, JavaType javatype, boolean flag, TypeSerializer typeserializer, JsonSerializer jsonserializer) {
label0:
        {
            boolean flag1 = false;
            super(class1, false);
            _elementType = javatype;
            if (!flag) {
                flag = flag1;
                if (javatype == null)
                    break label0;
                flag = flag1;
                if (!javatype.isFinal())
                    break label0;
            }
            flag = true;
        }
        _staticTyping = flag;
        _valueTypeSerializer = typeserializer;
        _property = null;
        _elementSerializer = jsonserializer;
        _dynamicSerializers = PropertySerializerMap.emptyForProperties();
        _unwrapSingle = null;
    }

    protected final JsonSerializer _findAndAddDynamic(PropertySerializerMap propertyserializermap, JavaType javatype, SerializerProvider serializerprovider) {
        javatype = propertyserializermap.findAndAddSecondarySerializer(javatype, serializerprovider, _property);
        if (propertyserializermap != ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (javatype)).map)
            _dynamicSerializers = ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (javatype)).map;
        return ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (javatype)).serializer;
    }

    protected final JsonSerializer _findAndAddDynamic(PropertySerializerMap propertyserializermap, Class class1, SerializerProvider serializerprovider) {
        class1 = propertyserializermap.findAndAddSecondarySerializer(class1, serializerprovider, _property);
        if (propertyserializermap != ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (class1)).map)
            _dynamicSerializers = ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (class1)).map;
        return ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (class1)).serializer;
    }

    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
        JsonSerializer jsonserializer1 = _elementSerializer;
        JsonSerializer jsonserializer = jsonserializer1;
        if (jsonserializer1 == null)
            jsonserializer = jsonformatvisitorwrapper.getProvider().findValueSerializer(_elementType, _property);
        visitArrayFormat(jsonformatvisitorwrapper, javatype, jsonserializer, _elementType);
    }

    public JsonSerializer createContextual(SerializerProvider serializerprovider, BeanProperty beanproperty) {
        Object obj;
        Object obj1;
        TypeSerializer typeserializer;
        Boolean boolean1;
        boolean1 = null;
        typeserializer = _valueTypeSerializer;
        if (typeserializer != null)
            typeserializer = typeserializer.forProperty(beanproperty);
        if (beanproperty == null)
            break MISSING_BLOCK_LABEL_239;
        obj1 = serializerprovider.getAnnotationIntrospector();
        obj = beanproperty.getMember();
        if (obj == null) goto _L2; else goto _L1
_L1:
        obj1 = ((AnnotationIntrospector) (obj1)).findContentSerializer(((com.fasterxml.jackson.databind.introspect.Annotated) (obj)));
        if (obj1 == null) goto _L2; else goto _L3
_L3:
        obj1 = serializerprovider.serializerInstance(((com.fasterxml.jackson.databind.introspect.Annotated) (obj)), obj1);
_L4:
        com.fasterxml.jackson.annotation.JsonFormat.Value value = beanproperty.findPropertyFormat(serializerprovider.getConfig(), _handledType);
        obj = obj1;
        if (value != null) {
            boolean1 = value.getFeature(com.fasterxml.jackson.annotation.JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED);
            obj = obj1;
        }
_L5:
label0:
        {
            obj1 = obj;
            if (obj == null)
                obj1 = _elementSerializer;
            obj1 = findConvertingContentSerializer(serializerprovider, beanproperty, ((JsonSerializer) (obj1)));
            if (obj1 == null) {
                obj = obj1;
                if (_elementType != null) {
                    obj = obj1;
                    if (_staticTyping) {
                        obj = obj1;
                        if (!_elementType.isJavaLangObject())
                            obj = serializerprovider.findValueSerializer(_elementType, beanproperty);
                    }
                }
            } else {
                obj = serializerprovider.handleSecondaryContextualization(((JsonSerializer) (obj1)), beanproperty);
            }
            if (obj == _elementSerializer && beanproperty == _property && _valueTypeSerializer == typeserializer) {
                serializerprovider = this;
                if (_unwrapSingle == boolean1)
                    break label0;
            }
            serializerprovider = withResolved(beanproperty, typeserializer, ((JsonSerializer) (obj)), boolean1);
        }
        return serializerprovider;
_L2:
        obj1 = null;
          goto _L4
        obj = null;
          goto _L5
    }

    public JsonSerializer getContentSerializer() {
        return _elementSerializer;
    }

    public JavaType getContentType() {
        return _elementType;
    }

    public JsonNode getSchema(SerializerProvider serializerprovider, Type type) {
        ObjectNode objectnode;
        objectnode = createSchemaNode("array", true);
        type = _elementType;
        if (type == null) goto _L2; else goto _L1
_L1:
        if (type.getRawClass() == java/lang/Object) goto _L4; else goto _L3
_L3:
        type = serializerprovider.findValueSerializer(type, _property);
        if (!(type instanceof SchemaAware)) goto _L4; else goto _L5
_L5:
        serializerprovider = ((SchemaAware)type).getSchema(serializerprovider, null);
_L7:
        type = serializerprovider;
        if (serializerprovider == null)
            type = JsonSchema.getDefaultSchemaNode();
        objectnode.set("items", type);
_L2:
        return objectnode;
_L4:
        serializerprovider = null;
        if (true) goto _L7; else goto _L6
_L6:
    }

    public void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        if (serializerprovider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED) && hasSingleElement(obj)) {
            serializeContents(obj, jsongenerator, serializerprovider);
        } else {
            jsongenerator.writeStartArray();
            jsongenerator.setCurrentValue(obj);
            serializeContents(obj, jsongenerator, serializerprovider);
            jsongenerator.writeEndArray();
        }
    }

    protected abstract void serializeContents(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider);

    public void serializeWithType(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, TypeSerializer typeserializer) {
        typeserializer.writeTypePrefixForArray(obj, jsongenerator);
        jsongenerator.setCurrentValue(obj);
        serializeContents(obj, jsongenerator, serializerprovider);
        typeserializer.writeTypeSuffixForArray(obj, jsongenerator);
    }

    public final AsArraySerializerBase withResolved(BeanProperty beanproperty, TypeSerializer typeserializer, JsonSerializer jsonserializer) {
        return withResolved(beanproperty, typeserializer, jsonserializer, _unwrapSingle);
    }

    public abstract AsArraySerializerBase withResolved(BeanProperty beanproperty, TypeSerializer typeserializer, JsonSerializer jsonserializer, Boolean boolean1);
}
