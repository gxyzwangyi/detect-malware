// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser;

import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.introspect.*;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.util.*;

// Referenced classes of package com.fasterxml.jackson.databind.ser:
//            BeanPropertyWriter

public class PropertyBuilder {

    private static final Object NO_DEFAULT_MARKER;
    protected final AnnotationIntrospector _annotationIntrospector;
    protected final BeanDescription _beanDesc;
    protected final SerializationConfig _config;
    protected Object _defaultBean;
    protected final com.fasterxml.jackson.annotation.JsonInclude.Value _defaultInclusion;

    public PropertyBuilder(SerializationConfig serializationconfig, BeanDescription beandescription) {
        _config = serializationconfig;
        _beanDesc = beandescription;
        _defaultInclusion = beandescription.findPropertyInclusion(serializationconfig.getDefaultPropertyInclusion());
        _annotationIntrospector = _config.getAnnotationIntrospector();
    }

    protected Object _throwWrapped(Exception exception, String s, Object obj) {
        for (; exception.getCause() != null; exception = exception.getCause());
        if (exception instanceof Error)
            throw (Error)exception;
        if (exception instanceof RuntimeException)
            throw (RuntimeException)exception;
        else
            throw new IllegalArgumentException((new StringBuilder()).append("Failed to get property '").append(s).append("' of default ").append(obj.getClass().getName()).append(" instance").toString());
    }

    protected BeanPropertyWriter buildWriter(SerializerProvider serializerprovider, BeanPropertyDefinition beanpropertydefinition, JavaType javatype, JsonSerializer jsonserializer, TypeSerializer typeserializer, TypeSerializer typeserializer1, AnnotatedMember annotatedmember, 
            boolean flag) {
        JavaType javatype2 = findSerializationType(annotatedmember, flag, javatype);
        static class _cls1 {

            static final int $SwitchMap$com$fasterxml$jackson$annotation$JsonInclude$Include[];

            static  {
                $SwitchMap$com$fasterxml$jackson$annotation$JsonInclude$Include = new int[com.fasterxml.jackson.annotation.JsonInclude.Include.values().length];
                NoSuchFieldError nosuchfielderror;
                try {
                    $SwitchMap$com$fasterxml$jackson$annotation$JsonInclude$Include[com.fasterxml.jackson.annotation.JsonInclude.Include.NON_DEFAULT.ordinal()] = 1;
                }
                catch (NoSuchFieldError nosuchfielderror4) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$annotation$JsonInclude$Include[com.fasterxml.jackson.annotation.JsonInclude.Include.NON_ABSENT.ordinal()] = 2;
                }
                catch (NoSuchFieldError nosuchfielderror3) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$annotation$JsonInclude$Include[com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY.ordinal()] = 3;
                }
                catch (NoSuchFieldError nosuchfielderror2) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$annotation$JsonInclude$Include[com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL.ordinal()] = 4;
                }
                catch (NoSuchFieldError nosuchfielderror1) { }
                $SwitchMap$com$fasterxml$jackson$annotation$JsonInclude$Include[com.fasterxml.jackson.annotation.JsonInclude.Include.ALWAYS.ordinal()] = 5;
_L2:
                return;
                nosuchfielderror;
                if (true) goto _L2; else goto _L1
_L1:
            }
        }

        boolean flag1;
        JavaType javatype1;
        com.fasterxml.jackson.annotation.JsonInclude.Include include;
        if (typeserializer1 != null) {
            javatype1 = javatype2;
            if (javatype2 == null)
                javatype1 = javatype;
            if (javatype1.getContentType() == null)
                throw new IllegalStateException((new StringBuilder()).append("Problem trying to create BeanPropertyWriter for property '").append(beanpropertydefinition.getName()).append("' (of type ").append(_beanDesc.getType()).append("); serialization type ").append(javatype1).append(" has no content").toString());
            javatype1 = javatype1.withContentTypeHandler(typeserializer1);
            javatype1.getContentType();
        } else {
            javatype1 = javatype2;
        }
        javatype2 = null;
        include = _defaultInclusion.withOverrides(beanpropertydefinition.findInclusion()).getValueInclusion();
        typeserializer1 = include;
        if (include == com.fasterxml.jackson.annotation.JsonInclude.Include.USE_DEFAULTS)
            typeserializer1 = com.fasterxml.jackson.annotation.JsonInclude.Include.ALWAYS;
        _cls1..SwitchMap.com.fasterxml.jackson.annotation.JsonInclude.Include[typeserializer1.ordinal()];
        JVM INSTR tableswitch 1 4: default 188
    //                   1 302
    //                   2 390
    //                   3 411
    //                   4 422;
           goto _L1 _L2 _L3 _L4 _L5
_L1:
        flag = false;
_L7:
        flag1 = flag;
        if (!javatype.isContainerType())
            break MISSING_BLOCK_LABEL_428;
        flag1 = flag;
        if (_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS))
            break MISSING_BLOCK_LABEL_428;
        typeserializer1 = ((TypeSerializer) (BeanPropertyWriter.MARKER_FOR_EMPTY));
_L6:
        beanpropertydefinition = new BeanPropertyWriter(beanpropertydefinition, annotatedmember, _beanDesc.getClassAnnotations(), javatype, jsonserializer, typeserializer, javatype1, flag, typeserializer1);
        javatype = ((JavaType) (_annotationIntrospector.findNullSerializer(annotatedmember)));
        if (javatype != null)
            beanpropertydefinition.assignNullSerializer(serializerprovider.serializerInstance(annotatedmember, javatype));
        javatype = _annotationIntrospector.findUnwrappingNameTransformer(annotatedmember);
        serializerprovider = beanpropertydefinition;
        if (javatype != null)
            serializerprovider = beanpropertydefinition.unwrappingWriter(javatype);
        return serializerprovider;
_L2:
        if (javatype1 == null)
            typeserializer1 = javatype;
        else
            typeserializer1 = javatype1;
        if (_defaultInclusion.getValueInclusion() == com.fasterxml.jackson.annotation.JsonInclude.Include.NON_DEFAULT)
            typeserializer1 = ((TypeSerializer) (getPropertyDefaultValue(beanpropertydefinition.getName(), annotatedmember, typeserializer1)));
        else
            typeserializer1 = ((TypeSerializer) (getDefaultValue(typeserializer1)));
        if (typeserializer1 == null)
            flag = true;
        else
        if (typeserializer1.getClass().isArray()) {
            typeserializer1 = ((TypeSerializer) (ArrayBuilders.getArrayComparator(typeserializer1)));
            flag = false;
        } else {
            flag = false;
        }
          goto _L6
_L3:
        flag1 = true;
        if (!javatype.isReferenceType())
            break MISSING_BLOCK_LABEL_428;
        typeserializer1 = ((TypeSerializer) (BeanPropertyWriter.MARKER_FOR_EMPTY));
        flag = true;
          goto _L6
_L4:
        typeserializer1 = ((TypeSerializer) (BeanPropertyWriter.MARKER_FOR_EMPTY));
        flag = true;
          goto _L6
_L5:
        flag = true;
          goto _L7
        flag = flag1;
        typeserializer1 = javatype2;
          goto _L6
    }

    protected JavaType findSerializationType(Annotated annotated, boolean flag, JavaType javatype) {
        boolean flag2;
        Object obj;
        JavaType javatype1;
        flag2 = true;
        javatype1 = _annotationIntrospector.refineSerializationType(_config, annotated, javatype);
        obj = javatype;
        if (javatype1 == javatype) goto _L2; else goto _L1
_L1:
        obj = javatype1.getRawClass();
        javatype = javatype.getRawClass();
          goto _L3
_L5:
        obj = javatype1;
        flag = true;
_L2:
        annotated = _annotationIntrospector.findSerializationTyping(annotated);
        boolean flag1 = flag;
        if (annotated != null) {
            flag1 = flag;
            if (annotated != com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing.DEFAULT_TYPING) {
                if (annotated == com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing.STATIC)
                    flag = flag2;
                else
                    flag = false;
                flag1 = flag;
            }
        }
        if (flag1)
            annotated = ((JavaType) (obj)).withStaticTyping();
        else
            annotated = null;
        return annotated;
_L3:
        if (((Class) (obj)).isAssignableFrom(javatype) || javatype.isAssignableFrom(((Class) (obj)))) goto _L5; else goto _L4
_L4:
        throw new IllegalArgumentException((new StringBuilder()).append("Illegal concrete-type annotation for method '").append(annotated.getName()).append("': class ").append(((Class) (obj)).getName()).append(" not a super-type of (declared) class ").append(javatype.getName()).toString());
    }

    public Annotations getClassAnnotations() {
        return _beanDesc.getClassAnnotations();
    }

    protected Object getDefaultBean() {
        Object obj1 = _defaultBean;
        Object obj = obj1;
        if (obj1 == null) {
            Object obj2 = _beanDesc.instantiateBean(_config.canOverrideAccessModifiers());
            obj = obj2;
            if (obj2 == null)
                obj = NO_DEFAULT_MARKER;
            _defaultBean = obj;
        }
        if (obj == NO_DEFAULT_MARKER)
            obj = null;
        else
            obj = _defaultBean;
        return obj;
    }

    protected Object getDefaultValue(JavaType javatype) {
        Class class1 = javatype.getRawClass();
        Class class2 = ClassUtil.primitiveType(class1);
        if (class2 != null)
            javatype = ((JavaType) (ClassUtil.defaultValue(class2)));
        else
        if (javatype.isContainerType() || javatype.isReferenceType())
            javatype = com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY;
        else
        if (class1 == java/lang/String)
            javatype = "";
        else
            javatype = null;
        return javatype;
    }

    protected Object getPropertyDefaultValue(String s, AnnotatedMember annotatedmember, JavaType javatype) {
        Object obj = getDefaultBean();
        if (obj != null) goto _L2; else goto _L1
_L1:
        s = ((String) (getDefaultValue(javatype)));
_L4:
        return s;
_L2:
        annotatedmember = ((AnnotatedMember) (annotatedmember.getValue(obj)));
        s = annotatedmember;
        continue; /* Loop/switch isn't completed */
        annotatedmember;
        s = ((String) (_throwWrapped(annotatedmember, s, obj)));
        if (true) goto _L4; else goto _L3
_L3:
    }

    static  {
        NO_DEFAULT_MARKER = Boolean.FALSE;
    }
}
