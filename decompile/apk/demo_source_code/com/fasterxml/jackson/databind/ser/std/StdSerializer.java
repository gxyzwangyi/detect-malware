// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ser.std;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsonFormatVisitors.*;
import com.fasterxml.jackson.databind.jsonschema.SchemaAware;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.PropertyFilter;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Converter;
import java.io.IOException;
import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Type;

// Referenced classes of package com.fasterxml.jackson.databind.ser.std:
//            StdDelegatingSerializer

public abstract class StdSerializer extends JsonSerializer
    implements JsonFormatVisitable, SchemaAware, Serializable {

    private static final Object CONVERTING_CONTENT_CONVERTER_LOCK = new Object();
    private static final long serialVersionUID = 1L;
    protected final Class _handledType;

    protected StdSerializer(JavaType javatype) {
        _handledType = javatype.getRawClass();
    }

    protected StdSerializer(StdSerializer stdserializer) {
        _handledType = stdserializer._handledType;
    }

    protected StdSerializer(Class class1) {
        _handledType = class1;
    }

    protected StdSerializer(Class class1, boolean flag) {
        _handledType = class1;
    }

    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
        jsonformatvisitorwrapper.expectAnyFormat(javatype);
    }

    protected ObjectNode createObjectNode() {
        return JsonNodeFactory.instance.objectNode();
    }

    protected ObjectNode createSchemaNode(String s) {
        ObjectNode objectnode = createObjectNode();
        objectnode.put("type", s);
        return objectnode;
    }

    protected ObjectNode createSchemaNode(String s, boolean flag) {
        s = createSchemaNode(s);
        if (!flag) {
            if (!flag)
                flag = true;
            else
                flag = false;
            s.put("required", flag);
        }
        return s;
    }

    protected JsonSerializer findAnnotatedContentSerializer(SerializerProvider serializerprovider, BeanProperty beanproperty) {
        if (beanproperty == null) goto _L2; else goto _L1
_L1:
        Object obj;
        beanproperty = beanproperty.getMember();
        obj = serializerprovider.getAnnotationIntrospector();
        if (beanproperty == null) goto _L2; else goto _L3
_L3:
        obj = ((AnnotationIntrospector) (obj)).findContentSerializer(beanproperty);
        if (obj == null) goto _L2; else goto _L4
_L4:
        serializerprovider = serializerprovider.serializerInstance(beanproperty, obj);
_L6:
        return serializerprovider;
_L2:
        serializerprovider = null;
        if (true) goto _L6; else goto _L5
_L5:
    }

    protected JsonSerializer findConvertingContentSerializer(SerializerProvider serializerprovider, BeanProperty beanproperty, JsonSerializer jsonserializer) {
        Object obj = serializerprovider.getAttribute(CONVERTING_CONTENT_CONVERTER_LOCK);
        if (obj == null || obj != Boolean.TRUE) goto _L2; else goto _L1
_L1:
        obj = jsonserializer;
_L4:
        return ((JsonSerializer) (obj));
_L2:
        Object obj1;
        com.fasterxml.jackson.databind.introspect.AnnotatedMember annotatedmember;
        obj1 = serializerprovider.getAnnotationIntrospector();
        obj = jsonserializer;
        if (obj1 == null)
            continue; /* Loop/switch isn't completed */
        obj = jsonserializer;
        if (beanproperty == null)
            continue; /* Loop/switch isn't completed */
        annotatedmember = beanproperty.getMember();
        obj = jsonserializer;
        if (annotatedmember == null)
            continue; /* Loop/switch isn't completed */
        serializerprovider.setAttribute(CONVERTING_CONTENT_CONVERTER_LOCK, Boolean.TRUE);
        obj1 = ((AnnotationIntrospector) (obj1)).findSerializationContentConverter(annotatedmember);
        serializerprovider.setAttribute(CONVERTING_CONTENT_CONVERTER_LOCK, null);
        obj = jsonserializer;
        if (obj1 != null) {
            obj1 = serializerprovider.converterInstance(beanproperty.getMember(), obj1);
            obj = ((Converter) (obj1)).getOutputType(serializerprovider.getTypeFactory());
            beanproperty = jsonserializer;
            if (jsonserializer == null) {
                beanproperty = jsonserializer;
                if (!((JavaType) (obj)).isJavaLangObject())
                    beanproperty = serializerprovider.findValueSerializer(((JavaType) (obj)));
            }
            obj = new StdDelegatingSerializer(((Converter) (obj1)), ((JavaType) (obj)), beanproperty);
        }
        if (true) goto _L4; else goto _L3
_L3:
        beanproperty;
        serializerprovider.setAttribute(CONVERTING_CONTENT_CONVERTER_LOCK, null);
        throw beanproperty;
    }

    protected Boolean findFormatFeature(SerializerProvider serializerprovider, BeanProperty beanproperty, Class class1, com.fasterxml.jackson.annotation.JsonFormat.Feature feature) {
        serializerprovider = findFormatOverrides(serializerprovider, beanproperty, class1);
        if (serializerprovider != null)
            serializerprovider = serializerprovider.getFeature(feature);
        else
            serializerprovider = null;
        return serializerprovider;
    }

    protected com.fasterxml.jackson.annotation.JsonFormat.Value findFormatOverrides(SerializerProvider serializerprovider, BeanProperty beanproperty, Class class1) {
        if (beanproperty != null)
            serializerprovider = beanproperty.findPropertyFormat(serializerprovider.getConfig(), class1);
        else
            serializerprovider = serializerprovider.getDefaultPropertyFormat(class1);
        return serializerprovider;
    }

    protected PropertyFilter findPropertyFilter(SerializerProvider serializerprovider, Object obj, Object obj1) {
        FilterProvider filterprovider = serializerprovider.getFilterProvider();
        if (filterprovider == null)
            throw JsonMappingException.from(serializerprovider, (new StringBuilder()).append("Can not resolve PropertyFilter with id '").append(obj).append("'; no FilterProvider configured").toString());
        else
            return filterprovider.findPropertyFilter(obj, obj1);
    }

    public JsonNode getSchema(SerializerProvider serializerprovider, Type type) {
        return createSchemaNode("string");
    }

    public JsonNode getSchema(SerializerProvider serializerprovider, Type type, boolean flag) {
        serializerprovider = (ObjectNode)getSchema(serializerprovider, type);
        if (!flag) {
            if (!flag)
                flag = true;
            else
                flag = false;
            serializerprovider.put("required", flag);
        }
        return serializerprovider;
    }

    public Class handledType() {
        return _handledType;
    }

    protected boolean isDefaultSerializer(JsonSerializer jsonserializer) {
        return ClassUtil.isJacksonStdImpl(jsonserializer);
    }

    public abstract void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider);

    protected void visitArrayFormat(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype, JsonSerializer jsonserializer, JavaType javatype1) {
        if (jsonformatvisitorwrapper != null) {
            jsonformatvisitorwrapper = jsonformatvisitorwrapper.expectArrayFormat(javatype);
            if (jsonformatvisitorwrapper != null && jsonserializer != null)
                jsonformatvisitorwrapper.itemsFormat(jsonserializer, javatype1);
        }
    }

    protected void visitArrayFormat(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype, JsonFormatTypes jsonformattypes) {
        if (jsonformatvisitorwrapper != null) {
            jsonformatvisitorwrapper = jsonformatvisitorwrapper.expectArrayFormat(javatype);
            if (jsonformatvisitorwrapper != null)
                jsonformatvisitorwrapper.itemsFormat(jsonformattypes);
        }
    }

    protected void visitFloatFormat(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype, com.fasterxml.jackson.core.JsonParser.NumberType numbertype) {
        if (jsonformatvisitorwrapper != null) {
            jsonformatvisitorwrapper = jsonformatvisitorwrapper.expectNumberFormat(javatype);
            if (jsonformatvisitorwrapper != null)
                jsonformatvisitorwrapper.numberType(numbertype);
        }
    }

    protected void visitIntFormat(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype, com.fasterxml.jackson.core.JsonParser.NumberType numbertype) {
        if (jsonformatvisitorwrapper != null) {
            jsonformatvisitorwrapper = jsonformatvisitorwrapper.expectIntegerFormat(javatype);
            if (jsonformatvisitorwrapper != null && numbertype != null)
                jsonformatvisitorwrapper.numberType(numbertype);
        }
    }

    protected void visitIntFormat(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype, com.fasterxml.jackson.core.JsonParser.NumberType numbertype, JsonValueFormat jsonvalueformat) {
        if (jsonformatvisitorwrapper != null) {
            jsonformatvisitorwrapper = jsonformatvisitorwrapper.expectIntegerFormat(javatype);
            if (jsonformatvisitorwrapper != null) {
                if (numbertype != null)
                    jsonformatvisitorwrapper.numberType(numbertype);
                if (jsonvalueformat != null)
                    jsonformatvisitorwrapper.format(jsonvalueformat);
            }
        }
    }

    protected void visitStringFormat(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
        if (jsonformatvisitorwrapper != null)
            jsonformatvisitorwrapper.expectStringFormat(javatype);
    }

    protected void visitStringFormat(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype, JsonValueFormat jsonvalueformat) {
        if (jsonformatvisitorwrapper != null) {
            jsonformatvisitorwrapper = jsonformatvisitorwrapper.expectStringFormat(javatype);
            if (jsonformatvisitorwrapper != null)
                jsonformatvisitorwrapper.format(jsonvalueformat);
        }
    }

    public void wrapAndThrow(SerializerProvider serializerprovider, Throwable throwable, Object obj, int i) {
        for (; (throwable instanceof InvocationTargetException) && throwable.getCause() != null; throwable = throwable.getCause());
        if (throwable instanceof Error)
            throw (Error)throwable;
        boolean flag;
        if (serializerprovider == null || serializerprovider.isEnabled(SerializationFeature.WRAP_EXCEPTIONS))
            flag = true;
        else
            flag = false;
        if (throwable instanceof IOException) {
            if (!flag || !(throwable instanceof JsonMappingException))
                throw (IOException)throwable;
        } else
        if (!flag && (throwable instanceof RuntimeException))
            throw (RuntimeException)throwable;
        throw JsonMappingException.wrapWithPath(throwable, obj, i);
    }

    public void wrapAndThrow(SerializerProvider serializerprovider, Throwable throwable, Object obj, String s) {
        for (; (throwable instanceof InvocationTargetException) && throwable.getCause() != null; throwable = throwable.getCause());
        if (throwable instanceof Error)
            throw (Error)throwable;
        boolean flag;
        if (serializerprovider == null || serializerprovider.isEnabled(SerializationFeature.WRAP_EXCEPTIONS))
            flag = true;
        else
            flag = false;
        if (throwable instanceof IOException) {
            if (!flag || !(throwable instanceof JsonMappingException))
                throw (IOException)throwable;
        } else
        if (!flag && (throwable instanceof RuntimeException))
            throw (RuntimeException)throwable;
        throw JsonMappingException.wrapWithPath(throwable, obj, s);
    }

}
