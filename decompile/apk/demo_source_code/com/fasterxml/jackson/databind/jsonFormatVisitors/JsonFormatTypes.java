// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.jsonFormatVisitors;

import java.util.HashMap;
import java.util.Map;

public final class JsonFormatTypes extends Enum {

    private static final JsonFormatTypes $VALUES[];
    public static final JsonFormatTypes ANY;
    public static final JsonFormatTypes ARRAY;
    public static final JsonFormatTypes BOOLEAN;
    public static final JsonFormatTypes INTEGER;
    public static final JsonFormatTypes NULL;
    public static final JsonFormatTypes NUMBER;
    public static final JsonFormatTypes OBJECT;
    public static final JsonFormatTypes STRING;
    private static final Map _byLCName;

    private JsonFormatTypes(String s, int i) {
        super(s, i);
    }

    public static JsonFormatTypes forValue(String s) {
        return (JsonFormatTypes)_byLCName.get(s);
    }

    public static JsonFormatTypes valueOf(String s) {
        return (JsonFormatTypes)Enum.valueOf(com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes, s);
    }

    public static JsonFormatTypes[] values() {
        return (JsonFormatTypes[])$VALUES.clone();
    }

    public String value() {
        return name().toLowerCase();
    }

    static  {
        int i = 0;
        STRING = new JsonFormatTypes("STRING", 0);
        NUMBER = new JsonFormatTypes("NUMBER", 1);
        INTEGER = new JsonFormatTypes("INTEGER", 2);
        BOOLEAN = new JsonFormatTypes("BOOLEAN", 3);
        OBJECT = new JsonFormatTypes("OBJECT", 4);
        ARRAY = new JsonFormatTypes("ARRAY", 5);
        NULL = new JsonFormatTypes("NULL", 6);
        ANY = new JsonFormatTypes("ANY", 7);
        $VALUES = (new JsonFormatTypes[] {
            STRING, NUMBER, INTEGER, BOOLEAN, OBJECT, ARRAY, NULL, ANY
        });
        _byLCName = new HashMap();
        JsonFormatTypes ajsonformattypes[] = values();
        for (int j = ajsonformattypes.length; i < j; i++) {
            JsonFormatTypes jsonformattypes = ajsonformattypes[i];
            _byLCName.put(jsonformattypes.name().toLowerCase(), jsonformattypes);
        }

    }
}
