// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.util;

import java.io.Serializable;

public class ViewMatcher
    implements Serializable {
    private static final class Multi extends ViewMatcher
        implements Serializable {

        private static final long serialVersionUID = 1L;
        private final Class _views[];

        public boolean isVisibleForView(Class class1) {
            boolean flag1 = false;
            int j = _views.length;
            int i = 0;
            do {
label0:
                {
                    boolean flag = flag1;
                    if (i < j) {
                        Class class2 = _views[i];
                        if (class1 != class2 && !class2.isAssignableFrom(class1))
                            break label0;
                        flag = true;
                    }
                    return flag;
                }
                i++;
            } while (true);
        }

        public Multi(Class aclass[]) {
            _views = aclass;
        }
    }

    private static final class Single extends ViewMatcher {

        private static final long serialVersionUID = 1L;
        private final Class _view;

        public boolean isVisibleForView(Class class1) {
            boolean flag;
            if (class1 == _view || _view.isAssignableFrom(class1))
                flag = true;
            else
                flag = false;
            return flag;
        }

        public Single(Class class1) {
            _view = class1;
        }
    }


    protected static final ViewMatcher EMPTY = new ViewMatcher();
    private static final long serialVersionUID = 1L;

    public ViewMatcher() {
    }

    public static ViewMatcher construct(Class aclass[]) {
        if (aclass != null) goto _L2; else goto _L1
_L1:
        aclass = EMPTY;
_L4:
        return aclass;
_L2:
        switch (aclass.length) {
        default:
            aclass = new Multi(aclass);
            break;

        case 0: // '\0'
            aclass = EMPTY;
            break;

        case 1: // '\001'
            aclass = new Single(aclass[0]);
            break;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public boolean isVisibleForView(Class class1) {
        return false;
    }

}
