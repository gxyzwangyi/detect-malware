// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.util;

import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.type.ClassKey;
import java.io.Serializable;

// Referenced classes of package com.fasterxml.jackson.databind.util:
//            LRUMap

public class RootNameLookup
    implements Serializable {

    private static final long serialVersionUID = 1L;
    protected transient LRUMap _rootNames;

    public RootNameLookup() {
        _rootNames = new LRUMap(20, 200);
    }

    public PropertyName findRootName(JavaType javatype, MapperConfig mapperconfig) {
        return findRootName(javatype.getRawClass(), mapperconfig);
    }

    public PropertyName findRootName(Class class1, MapperConfig mapperconfig) {
        PropertyName propertyname;
        ClassKey classkey;
        classkey = new ClassKey(class1);
        propertyname = (PropertyName)_rootNames.get(classkey);
        if (propertyname == null) goto _L2; else goto _L1
_L1:
        mapperconfig = propertyname;
_L4:
        return mapperconfig;
_L2:
label0:
        {
            Object obj = mapperconfig.introspectClassAnnotations(class1);
            obj = mapperconfig.getAnnotationIntrospector().findRootName(((BeanDescription) (obj)).getClassInfo());
            if (obj != null) {
                mapperconfig = ((MapperConfig) (obj));
                if (((PropertyName) (obj)).hasSimpleName())
                    break label0;
            }
            mapperconfig = PropertyName.construct(class1.getSimpleName());
        }
        _rootNames.put(classkey, mapperconfig);
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected Object readResolve() {
        return new RootNameLookup();
    }
}
