// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.util;

import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.*;
import java.util.*;

// Referenced classes of package com.fasterxml.jackson.databind.util:
//            ClassUtil

public class SimpleBeanPropertyDefinition extends BeanPropertyDefinition {

    protected final PropertyName _fullName;
    protected final com.fasterxml.jackson.annotation.JsonInclude.Value _inclusion;
    protected final AnnotationIntrospector _introspector;
    protected final AnnotatedMember _member;
    protected final PropertyMetadata _metadata;
    protected final String _name;

    protected SimpleBeanPropertyDefinition(AnnotatedMember annotatedmember, PropertyName propertyname, AnnotationIntrospector annotationintrospector, PropertyMetadata propertymetadata, com.fasterxml.jackson.annotation.JsonInclude.Include include) {
        if (include == null || include == com.fasterxml.jackson.annotation.JsonInclude.Include.USE_DEFAULTS)
            include = EMPTY_INCLUDE;
        else
            include = com.fasterxml.jackson.annotation.JsonInclude.Value.construct(include, null);
        this(annotatedmember, propertyname, annotationintrospector, propertymetadata, ((com.fasterxml.jackson.annotation.JsonInclude.Value) (include)));
    }

    protected SimpleBeanPropertyDefinition(AnnotatedMember annotatedmember, PropertyName propertyname, AnnotationIntrospector annotationintrospector, PropertyMetadata propertymetadata, com.fasterxml.jackson.annotation.JsonInclude.Value value) {
        _introspector = annotationintrospector;
        _member = annotatedmember;
        _fullName = propertyname;
        _name = propertyname.getSimpleName();
        annotatedmember = propertymetadata;
        if (propertymetadata == null)
            annotatedmember = PropertyMetadata.STD_OPTIONAL;
        _metadata = annotatedmember;
        _inclusion = value;
    }

    protected SimpleBeanPropertyDefinition(AnnotatedMember annotatedmember, String s, AnnotationIntrospector annotationintrospector) {
        this(annotatedmember, new PropertyName(s), annotationintrospector, null, EMPTY_INCLUDE);
    }

    public static SimpleBeanPropertyDefinition construct(MapperConfig mapperconfig, AnnotatedMember annotatedmember) {
        PropertyName propertyname = PropertyName.construct(annotatedmember.getName());
        if (mapperconfig == null)
            mapperconfig = null;
        else
            mapperconfig = mapperconfig.getAnnotationIntrospector();
        return new SimpleBeanPropertyDefinition(annotatedmember, propertyname, mapperconfig, null, EMPTY_INCLUDE);
    }

    public static SimpleBeanPropertyDefinition construct(MapperConfig mapperconfig, AnnotatedMember annotatedmember, PropertyName propertyname) {
        return construct(mapperconfig, annotatedmember, propertyname, null, EMPTY_INCLUDE);
    }

    public static SimpleBeanPropertyDefinition construct(MapperConfig mapperconfig, AnnotatedMember annotatedmember, PropertyName propertyname, PropertyMetadata propertymetadata, com.fasterxml.jackson.annotation.JsonInclude.Include include) {
        if (mapperconfig == null)
            mapperconfig = null;
        else
            mapperconfig = mapperconfig.getAnnotationIntrospector();
        return new SimpleBeanPropertyDefinition(annotatedmember, propertyname, mapperconfig, propertymetadata, include);
    }

    public static SimpleBeanPropertyDefinition construct(MapperConfig mapperconfig, AnnotatedMember annotatedmember, PropertyName propertyname, PropertyMetadata propertymetadata, com.fasterxml.jackson.annotation.JsonInclude.Value value) {
        if (mapperconfig == null)
            mapperconfig = null;
        else
            mapperconfig = mapperconfig.getAnnotationIntrospector();
        return new SimpleBeanPropertyDefinition(annotatedmember, propertyname, mapperconfig, propertymetadata, value);
    }

    public static SimpleBeanPropertyDefinition construct(MapperConfig mapperconfig, AnnotatedMember annotatedmember, String s) {
        s = PropertyName.construct(s);
        if (mapperconfig == null)
            mapperconfig = null;
        else
            mapperconfig = mapperconfig.getAnnotationIntrospector();
        return new SimpleBeanPropertyDefinition(annotatedmember, s, mapperconfig, null, EMPTY_INCLUDE);
    }

    public com.fasterxml.jackson.annotation.JsonInclude.Value findInclusion() {
        return _inclusion;
    }

    public AnnotatedMember getAccessor() {
        AnnotatedMethod annotatedmethod = getGetter();
        Object obj = annotatedmethod;
        if (annotatedmethod == null)
            obj = getField();
        return ((AnnotatedMember) (obj));
    }

    public AnnotatedParameter getConstructorParameter() {
        AnnotatedParameter annotatedparameter;
        if (_member instanceof AnnotatedParameter)
            annotatedparameter = (AnnotatedParameter)_member;
        else
            annotatedparameter = null;
        return annotatedparameter;
    }

    public Iterator getConstructorParameters() {
        Object obj = getConstructorParameter();
        if (obj == null)
            obj = ClassUtil.emptyIterator();
        else
            obj = Collections.singleton(obj).iterator();
        return ((Iterator) (obj));
    }

    public AnnotatedField getField() {
        AnnotatedField annotatedfield;
        if (_member instanceof AnnotatedField)
            annotatedfield = (AnnotatedField)_member;
        else
            annotatedfield = null;
        return annotatedfield;
    }

    public PropertyName getFullName() {
        return _fullName;
    }

    public AnnotatedMethod getGetter() {
        AnnotatedMethod annotatedmethod;
        if ((_member instanceof AnnotatedMethod) && ((AnnotatedMethod)_member).getParameterCount() == 0)
            annotatedmethod = (AnnotatedMethod)_member;
        else
            annotatedmethod = null;
        return annotatedmethod;
    }

    public String getInternalName() {
        return getName();
    }

    public PropertyMetadata getMetadata() {
        return _metadata;
    }

    public AnnotatedMember getMutator() {
        AnnotatedParameter annotatedparameter = getConstructorParameter();
        Object obj = annotatedparameter;
        if (annotatedparameter == null) {
            AnnotatedMethod annotatedmethod = getSetter();
            obj = annotatedmethod;
            if (annotatedmethod == null)
                obj = getField();
        }
        return ((AnnotatedMember) (obj));
    }

    public String getName() {
        return _fullName.getSimpleName();
    }

    public AnnotatedMember getNonConstructorMutator() {
        AnnotatedMethod annotatedmethod = getSetter();
        Object obj = annotatedmethod;
        if (annotatedmethod == null)
            obj = getField();
        return ((AnnotatedMember) (obj));
    }

    public AnnotatedMember getPrimaryMember() {
        return _member;
    }

    public AnnotatedMethod getSetter() {
        AnnotatedMethod annotatedmethod;
        if ((_member instanceof AnnotatedMethod) && ((AnnotatedMethod)_member).getParameterCount() == 1)
            annotatedmethod = (AnnotatedMethod)_member;
        else
            annotatedmethod = null;
        return annotatedmethod;
    }

    public PropertyName getWrapperName() {
        PropertyName propertyname;
        if (_introspector == null && _member != null)
            propertyname = null;
        else
            propertyname = _introspector.findWrapperName(_member);
        return propertyname;
    }

    public boolean hasConstructorParameter() {
        return _member instanceof AnnotatedParameter;
    }

    public boolean hasField() {
        return _member instanceof AnnotatedField;
    }

    public boolean hasGetter() {
        boolean flag;
        if (getGetter() != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean hasName(PropertyName propertyname) {
        return _fullName.equals(propertyname);
    }

    public boolean hasSetter() {
        boolean flag;
        if (getSetter() != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean isExplicitlyIncluded() {
        return false;
    }

    public boolean isExplicitlyNamed() {
        return false;
    }

    public BeanPropertyDefinition withInclusion(com.fasterxml.jackson.annotation.JsonInclude.Value value) {
        if (_inclusion == value)
            value = this;
        else
            value = new SimpleBeanPropertyDefinition(_member, _fullName, _introspector, _metadata, value);
        return value;
    }

    public BeanPropertyDefinition withMetadata(PropertyMetadata propertymetadata) {
        if (propertymetadata.equals(_metadata))
            propertymetadata = this;
        else
            propertymetadata = new SimpleBeanPropertyDefinition(_member, _fullName, _introspector, propertymetadata, _inclusion);
        return propertymetadata;
    }

    public BeanPropertyDefinition withName(PropertyName propertyname) {
        if (_fullName.equals(propertyname))
            propertyname = this;
        else
            propertyname = new SimpleBeanPropertyDefinition(_member, propertyname, _introspector, _metadata, _inclusion);
        return propertyname;
    }

    public BeanPropertyDefinition withName(String s) {
        return withSimpleName(s);
    }

    public BeanPropertyDefinition withSimpleName(String s) {
        if (_fullName.hasSimpleName(s) && !_fullName.hasNamespace())
            s = this;
        else
            s = new SimpleBeanPropertyDefinition(_member, new PropertyName(s), _introspector, _metadata, _inclusion);
        return s;
    }
}
