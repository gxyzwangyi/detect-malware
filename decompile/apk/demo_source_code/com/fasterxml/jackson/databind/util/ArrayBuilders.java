// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.util;

import java.lang.reflect.Array;
import java.util.*;

// Referenced classes of package com.fasterxml.jackson.databind.util:
//            PrimitiveArrayBuilder

public final class ArrayBuilders {
    public static final class BooleanBuilder extends PrimitiveArrayBuilder {

        public volatile Object _constructArray(int i) {
            return _constructArray(i);
        }

        public final boolean[] _constructArray(int i) {
            return new boolean[i];
        }

        public BooleanBuilder() {
        }
    }

    public static final class ByteBuilder extends PrimitiveArrayBuilder {

        public volatile Object _constructArray(int i) {
            return _constructArray(i);
        }

        public final byte[] _constructArray(int i) {
            return new byte[i];
        }

        public ByteBuilder() {
        }
    }

    public static final class DoubleBuilder extends PrimitiveArrayBuilder {

        public volatile Object _constructArray(int i) {
            return _constructArray(i);
        }

        public final double[] _constructArray(int i) {
            return new double[i];
        }

        public DoubleBuilder() {
        }
    }

    public static final class FloatBuilder extends PrimitiveArrayBuilder {

        public volatile Object _constructArray(int i) {
            return _constructArray(i);
        }

        public final float[] _constructArray(int i) {
            return new float[i];
        }

        public FloatBuilder() {
        }
    }

    public static final class IntBuilder extends PrimitiveArrayBuilder {

        public volatile Object _constructArray(int i) {
            return _constructArray(i);
        }

        public final int[] _constructArray(int i) {
            return new int[i];
        }

        public IntBuilder() {
        }
    }

    public static final class LongBuilder extends PrimitiveArrayBuilder {

        public volatile Object _constructArray(int i) {
            return _constructArray(i);
        }

        public final long[] _constructArray(int i) {
            return new long[i];
        }

        public LongBuilder() {
        }
    }

    public static final class ShortBuilder extends PrimitiveArrayBuilder {

        public volatile Object _constructArray(int i) {
            return _constructArray(i);
        }

        public final short[] _constructArray(int i) {
            return new short[i];
        }

        public ShortBuilder() {
        }
    }


    private BooleanBuilder _booleanBuilder;
    private ByteBuilder _byteBuilder;
    private DoubleBuilder _doubleBuilder;
    private FloatBuilder _floatBuilder;
    private IntBuilder _intBuilder;
    private LongBuilder _longBuilder;
    private ShortBuilder _shortBuilder;

    public ArrayBuilders() {
        _booleanBuilder = null;
        _byteBuilder = null;
        _shortBuilder = null;
        _intBuilder = null;
        _longBuilder = null;
        _floatBuilder = null;
        _doubleBuilder = null;
    }

    public static List addToList(List list, Object obj) {
        Object obj1 = list;
        if (list == null)
            obj1 = new ArrayList();
        ((List) (obj1)).add(obj);
        return ((List) (obj1));
    }

    public static ArrayList arrayToList(Object aobj[]) {
        ArrayList arraylist = new ArrayList();
        if (aobj != null) {
            int j = aobj.length;
            for (int i = 0; i < j; i++)
                arraylist.add(aobj[i]);

        }
        return arraylist;
    }

    public static HashSet arrayToSet(Object aobj[]) {
        HashSet hashset = new HashSet();
        if (aobj != null) {
            int j = aobj.length;
            for (int i = 0; i < j; i++)
                hashset.add(aobj[i]);

        }
        return hashset;
    }

    public static Object getArrayComparator(Object obj) {
        int i = Array.getLength(obj);
        return new Object(obj.getClass(), i, obj) {

            final Object val$defaultValue;
            final Class val$defaultValueType;
            final int val$length;

            public boolean equals(Object obj1) {
                boolean flag1 = false;
                if (obj1 != this) goto _L2; else goto _L1
_L1:
                boolean flag = true;
_L9:
                return flag;
_L2:
                int j;
                flag = flag1;
                if (obj1 == null)
                    continue; /* Loop/switch isn't completed */
                flag = flag1;
                if (obj1.getClass() != defaultValueType)
                    continue; /* Loop/switch isn't completed */
                flag = flag1;
                if (Array.getLength(obj1) != length)
                    continue; /* Loop/switch isn't completed */
                j = 0;
_L5:
                Object obj2;
                Object obj3;
                if (j >= length)
                    break; /* Loop/switch isn't completed */
                obj2 = Array.get(defaultValue, j);
                obj3 = Array.get(obj1, j);
                  goto _L3
_L7:
                j++;
                if (true) goto _L5; else goto _L4
_L3:
                if (obj2 == obj3 || obj2 == null || obj2.equals(obj3)) goto _L7; else goto _L6
_L6:
                flag = flag1;
                continue; /* Loop/switch isn't completed */
_L4:
                flag = true;
                if (true) goto _L9; else goto _L8
_L8:
            }

             {
                defaultValueType = class1;
                length = i;
                defaultValue = obj;
                super();
            }
        }
;
    }

    public static Object[] insertInList(Object aobj[], Object obj) {
        int i = aobj.length;
        Object aobj1[] = (Object[])(Object[])Array.newInstance(((Object) (aobj)).getClass().getComponentType(), i + 1);
        if (i > 0)
            System.arraycopy(((Object) (aobj)), 0, ((Object) (aobj1)), 1, i);
        aobj1[0] = obj;
        return aobj1;
    }

    public static Object[] insertInListNoDup(Object aobj[], Object obj) {
        int i;
        int j;
        j = aobj.length;
        i = 0;
_L3:
        if (i >= j)
            break MISSING_BLOCK_LABEL_93;
        if (aobj[i] != obj) goto _L2; else goto _L1
_L1:
        if (i == 0) {
            obj = ((Object) (aobj));
        } else {
            Object aobj1[] = (Object[])(Object[])Array.newInstance(((Object) (aobj)).getClass().getComponentType(), j);
            System.arraycopy(((Object) (aobj)), 0, ((Object) (aobj1)), 1, i);
            aobj1[0] = obj;
            i++;
            j -= i;
            obj = ((Object) (aobj1));
            if (j > 0) {
                System.arraycopy(((Object) (aobj)), i, ((Object) (aobj1)), i, j);
                obj = ((Object) (aobj1));
            }
        }
_L4:
        return ((Object []) (obj));
_L2:
        i++;
          goto _L3
        Object aobj2[] = (Object[])(Object[])Array.newInstance(((Object) (aobj)).getClass().getComponentType(), j + 1);
        if (j > 0)
            System.arraycopy(((Object) (aobj)), 0, ((Object) (aobj2)), 1, j);
        aobj2[0] = obj;
        obj = ((Object) (aobj2));
          goto _L4
    }

    public static HashSet setAndArray(Set set, Object aobj[]) {
        HashSet hashset = new HashSet();
        if (set != null)
            hashset.addAll(set);
        if (aobj != null) {
            int j = aobj.length;
            for (int i = 0; i < j; i++)
                hashset.add(aobj[i]);

        }
        return hashset;
    }

    public BooleanBuilder getBooleanBuilder() {
        if (_booleanBuilder == null)
            _booleanBuilder = new BooleanBuilder();
        return _booleanBuilder;
    }

    public ByteBuilder getByteBuilder() {
        if (_byteBuilder == null)
            _byteBuilder = new ByteBuilder();
        return _byteBuilder;
    }

    public DoubleBuilder getDoubleBuilder() {
        if (_doubleBuilder == null)
            _doubleBuilder = new DoubleBuilder();
        return _doubleBuilder;
    }

    public FloatBuilder getFloatBuilder() {
        if (_floatBuilder == null)
            _floatBuilder = new FloatBuilder();
        return _floatBuilder;
    }

    public IntBuilder getIntBuilder() {
        if (_intBuilder == null)
            _intBuilder = new IntBuilder();
        return _intBuilder;
    }

    public LongBuilder getLongBuilder() {
        if (_longBuilder == null)
            _longBuilder = new LongBuilder();
        return _longBuilder;
    }

    public ShortBuilder getShortBuilder() {
        if (_shortBuilder == null)
            _shortBuilder = new ShortBuilder();
        return _shortBuilder;
    }
}
