// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.util;

import java.io.Serializable;
import java.util.*;

public final class CompactStringObjectMap
    implements Serializable {

    private static final CompactStringObjectMap EMPTY = new CompactStringObjectMap(1, 0, new Object[4]);
    private static final long serialVersionUID = 1L;
    private final Object _hashArea[];
    private final int _hashMask;
    private final int _spillCount;

    private CompactStringObjectMap(int i, int j, Object aobj[]) {
        _hashMask = i;
        _spillCount = j;
        _hashArea = aobj;
    }

    private final Object _find2(String s, int i, Object obj) {
        Object obj1 = null;
        if (obj != null) goto _L2; else goto _L1
_L1:
        obj = obj1;
_L4:
        return obj;
_L2:
        int j;
        int k;
        j = _hashMask + 1;
        i = (i >> 1) + j << 1;
        Object obj2 = _hashArea[i];
        if (s.equals(obj2)) {
            obj = _hashArea[i + 1];
            continue; /* Loop/switch isn't completed */
        }
        obj = obj1;
        if (obj2 == null)
            continue; /* Loop/switch isn't completed */
        j = j + (j >> 1) << 1;
        k = _spillCount;
        i = j;
_L5:
        obj = obj1;
        if (i < k + j) {
label0:
            {
                obj = _hashArea[i];
                if (obj != s && !s.equals(obj))
                    break label0;
                obj = _hashArea[i + 1];
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
        i += 2;
          goto _L5
        if (true) goto _L4; else goto _L6
_L6:
    }

    public static CompactStringObjectMap construct(Map map) {
        if (map.isEmpty()) {
            map = EMPTY;
        } else {
            int l1 = findSize(map.size());
            int k1 = l1 - 1;
            Object obj = ((Object) (new Object[((l1 >> 1) + l1) * 2]));
            Iterator iterator = map.entrySet().iterator();
            int k = 0;
            while (iterator.hasNext())  {
                java.util.Map.Entry entry = (java.util.Map.Entry)iterator.next();
                String s = (String)entry.getKey();
                int i2 = s.hashCode() & k1;
                int l = i2 + i2;
                int j = k;
                map = ((Map) (obj));
                int i = l;
                if (obj[l] != null) {
                    int i1 = (i2 >> 1) + l1 << 1;
                    j = k;
                    map = ((Map) (obj));
                    i = i1;
                    if (obj[i1] != null) {
                        int j1 = ((l1 >> 1) + l1 << 1) + k;
                        j = k += 2;
                        map = ((Map) (obj));
                        i = j1;
                        if (j1 >= obj.length) {
                            map = ((Map) (Arrays.copyOf(((Object []) (obj)), obj.length + 4)));
                            i = j1;
                            j = k;
                        }
                    }
                }
                map[i] = s;
                map[i + 1] = entry.getValue();
                k = j;
                obj = map;
            }
            map = new CompactStringObjectMap(k1, k, ((Object []) (obj)));
        }
        return map;
    }

    private static final int findSize(int i) {
        if (i > 5) goto _L2; else goto _L1
_L1:
        byte byte0 = 8;
_L4:
        return byte0;
_L2:
        if (i > 12)
            break; /* Loop/switch isn't completed */
        byte0 = 16;
        if (true) goto _L4; else goto _L3
_L3:
        int j = 32;
        do {
            byte0 = j;
            if (j >= i + (i >> 2))
                continue;
            j += j;
        } while (true);
        if (true) goto _L4; else goto _L5
_L5:
    }

    public Object find(String s) {
        int i = s.hashCode() & _hashMask;
        int j = i << 1;
        Object obj = _hashArea[j];
        if (obj == s || s.equals(obj))
            s = ((String) (_hashArea[j + 1]));
        else
            s = ((String) (_find2(s, i, obj)));
        return s;
    }

    public List keys() {
        int j = _hashArea.length;
        ArrayList arraylist = new ArrayList(j >> 2);
        for (int i = 0; i < j; i += 2) {
            Object obj = _hashArea[i];
            if (obj != null)
                arraylist.add((String)obj);
        }

        return arraylist;
    }

}
