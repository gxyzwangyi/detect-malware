// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.util;

import com.fasterxml.jackson.core.io.NumberInput;
import java.text.*;
import java.util.*;

public class StdDateFormat extends DateFormat {

    protected static final String ALL_FORMATS[] = {
        "yyyy-MM-dd'T'HH:mm:ss.SSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "EEE, dd MMM yyyy HH:mm:ss zzz", "yyyy-MM-dd"
    };
    protected static final DateFormat DATE_FORMAT_ISO8601;
    protected static final DateFormat DATE_FORMAT_ISO8601_Z;
    protected static final DateFormat DATE_FORMAT_PLAIN;
    protected static final DateFormat DATE_FORMAT_RFC1123;
    public static final String DATE_FORMAT_STR_ISO8601 = "yyyy-MM-dd'T'HH:mm:ss.SSSZ";
    protected static final String DATE_FORMAT_STR_ISO8601_Z = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";
    protected static final String DATE_FORMAT_STR_PLAIN = "yyyy-MM-dd";
    protected static final String DATE_FORMAT_STR_RFC1123 = "EEE, dd MMM yyyy HH:mm:ss zzz";
    private static final Locale DEFAULT_LOCALE;
    private static final TimeZone DEFAULT_TIMEZONE;
    public static final StdDateFormat instance = new StdDateFormat();
    protected transient DateFormat _formatISO8601;
    protected transient DateFormat _formatISO8601_z;
    protected transient DateFormat _formatPlain;
    protected transient DateFormat _formatRFC1123;
    protected Boolean _lenient;
    protected final Locale _locale;
    protected transient TimeZone _timezone;

    public StdDateFormat() {
        _locale = DEFAULT_LOCALE;
    }

    public StdDateFormat(TimeZone timezone, Locale locale) {
        _timezone = timezone;
        _locale = locale;
    }

    protected StdDateFormat(TimeZone timezone, Locale locale, Boolean boolean1) {
        _timezone = timezone;
        _locale = locale;
        _lenient = boolean1;
    }

    private static final DateFormat _cloneFormat(DateFormat dateformat, String s, TimeZone timezone, Locale locale, Boolean boolean1) {
        if (locale.equals(DEFAULT_LOCALE)) goto _L2; else goto _L1
_L1:
        s = new SimpleDateFormat(s, locale);
        dateformat = timezone;
        if (timezone == null)
            dateformat = DEFAULT_TIMEZONE;
        s.setTimeZone(dateformat);
        dateformat = s;
_L4:
        if (boolean1 != null)
            dateformat.setLenient(boolean1.booleanValue());
        return dateformat;
_L2:
        s = (DateFormat)dateformat.clone();
        dateformat = s;
        if (timezone != null) {
            s.setTimeZone(timezone);
            dateformat = s;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static TimeZone getDefaultTimeZone() {
        return DEFAULT_TIMEZONE;
    }

    public static DateFormat getISO8601Format(TimeZone timezone) {
        return getISO8601Format(timezone, DEFAULT_LOCALE);
    }

    public static DateFormat getISO8601Format(TimeZone timezone, Locale locale) {
        return _cloneFormat(DATE_FORMAT_ISO8601, "yyyy-MM-dd'T'HH:mm:ss.SSSZ", timezone, locale, null);
    }

    public static DateFormat getRFC1123Format(TimeZone timezone) {
        return getRFC1123Format(timezone, DEFAULT_LOCALE);
    }

    public static DateFormat getRFC1123Format(TimeZone timezone, Locale locale) {
        return _cloneFormat(DATE_FORMAT_RFC1123, "EEE, dd MMM yyyy HH:mm:ss zzz", timezone, locale, null);
    }

    private static final boolean hasTimeZone(String s) {
        int i;
        boolean flag1;
        flag1 = true;
        i = s.length();
        if (i < 6) goto _L2; else goto _L1
_L1:
        char c;
        boolean flag;
        c = s.charAt(i - 6);
        flag = flag1;
        if (c == '+') goto _L4; else goto _L3
_L3:
        if (c != '-') goto _L6; else goto _L5
_L5:
        flag = flag1;
_L4:
        return flag;
_L6:
        char c1 = s.charAt(i - 5);
        flag = flag1;
        if (c1 == '+')
            continue; /* Loop/switch isn't completed */
        flag = flag1;
        if (c1 == '-')
            continue; /* Loop/switch isn't completed */
        i = s.charAt(i - 3);
        flag = flag1;
        if (i == '+')
            continue; /* Loop/switch isn't completed */
        flag = flag1;
        if (i == '-')
            continue; /* Loop/switch isn't completed */
_L2:
        flag = false;
        if (true) goto _L4; else goto _L7
_L7:
    }

    protected void _clearFormats() {
        _formatRFC1123 = null;
        _formatISO8601 = null;
        _formatISO8601_z = null;
        _formatPlain = null;
    }

    public StdDateFormat clone() {
        return new StdDateFormat(_timezone, _locale, _lenient);
    }

    public volatile Object clone() {
        return clone();
    }

    public boolean equals(Object obj) {
        boolean flag;
        if (obj == this)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public StringBuffer format(Date date, StringBuffer stringbuffer, FieldPosition fieldposition) {
        if (_formatISO8601 == null)
            _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, "yyyy-MM-dd'T'HH:mm:ss.SSSZ", _timezone, _locale, _lenient);
        return _formatISO8601.format(date, stringbuffer, fieldposition);
    }

    public TimeZone getTimeZone() {
        return _timezone;
    }

    public int hashCode() {
        return System.identityHashCode(this);
    }

    public boolean isLenient() {
        boolean flag;
        if (_lenient == null)
            flag = true;
        else
            flag = _lenient.booleanValue();
        return flag;
    }

    protected boolean looksLikeISO8601(String s) {
        boolean flag1 = false;
        boolean flag = flag1;
        if (s.length() >= 5) {
            flag = flag1;
            if (Character.isDigit(s.charAt(0))) {
                flag = flag1;
                if (Character.isDigit(s.charAt(3))) {
                    flag = flag1;
                    if (s.charAt(4) == '-')
                        flag = true;
                }
            }
        }
        return flag;
    }

    public Date parse(String s) {
        String s1 = s.trim();
        ParsePosition parseposition = new ParsePosition(0);
        if (looksLikeISO8601(s1)) {
            s = parseAsISO8601(s1, parseposition, true);
        } else {
            int i = s1.length();
            int k;
            char c;
label0:
            do {
                do {
                    k = i - 1;
                    if (k < 0)
                        break label0;
                    c = s1.charAt(k);
                    if (c < '0')
                        break;
                    i = k;
                } while (c <= '9');
                if (k > 0)
                    break;
                i = k;
            } while (c == '-');
            if (k < 0 && (s1.charAt(0) == '-' || NumberInput.inLongRange(s1, false)))
                s = new Date(Long.parseLong(s1));
            else
                s = parseAsRFC1123(s1, parseposition);
        }
        if (s != null)
            return s;
        s = new StringBuilder();
        String as[] = ALL_FORMATS;
        int l = as.length;
        int j = 0;
        while (j < l)  {
            String s2 = as[j];
            if (s.length() > 0)
                s.append("\", \"");
            else
                s.append('"');
            s.append(s2);
            j++;
        }
        s.append('"');
        throw new ParseException(String.format("Can not parse date \"%s\": not compatible with any of standard forms (%s)", new Object[] {
            s1, s.toString()
        }), parseposition.getErrorIndex());
    }

    public Date parse(String s, ParsePosition parseposition) {
        if (looksLikeISO8601(s)) {
            try {
                s = parseAsISO8601(s, parseposition, false);
            }
            // Misplaced declaration of an exception variable
            catch (String s) {
                s = null;
            }
        } else {
            int i = s.length();
            int j;
            char c;
label0:
            do {
                do {
                    j = i - 1;
                    if (j < 0)
                        break label0;
                    c = s.charAt(j);
                    if (c < '0')
                        break;
                    i = j;
                } while (c <= '9');
                if (j > 0)
                    break;
                i = j;
            } while (c == '-');
            if (j < 0 && (s.charAt(0) == '-' || NumberInput.inLongRange(s, false)))
                s = new Date(Long.parseLong(s));
            else
                s = parseAsRFC1123(s, parseposition);
        }
        return s;
    }

    protected Date parseAsISO8601(String s, ParsePosition parseposition, boolean flag) {
        int i = s.length();
        char c = s.charAt(i - 1);
        Object obj;
        Object obj1;
        String s1;
        if (i <= 10 && Character.isDigit(c)) {
            DateFormat dateformat = _formatPlain;
            String s2 = "yyyy-MM-dd";
            obj1 = s2;
            obj = dateformat;
            s1 = s;
            if (dateformat == null) {
                obj = _cloneFormat(DATE_FORMAT_PLAIN, "yyyy-MM-dd", _timezone, _locale, _lenient);
                _formatPlain = ((DateFormat) (obj));
                s1 = s;
                obj1 = s2;
            }
        } else {
label0:
            {
                if (c != 'Z')
                    break label0;
                obj1 = _formatISO8601_z;
                obj = obj1;
                if (obj1 == null) {
                    obj = _cloneFormat(DATE_FORMAT_ISO8601_Z, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", _timezone, _locale, _lenient);
                    _formatISO8601_z = ((DateFormat) (obj));
                }
                int j;
                String s3;
                DateFormat dateformat1;
                if (s.charAt(i - 4) == ':') {
                    s = new StringBuilder(s);
                    s.insert(i - 1, ".000");
                    s1 = s.toString();
                    obj1 = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";
                } else {
                    obj1 = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";
                    s1 = s;
                }
            }
        }
        s = ((DateFormat) (obj)).parse(s1, parseposition);
        if (s == null)
            throw new ParseException(String.format("Can not parse date \"%s\": while it seems to fit format '%s', parsing fails (leniency? %s)", new Object[] {
                s1, obj1, _lenient
            }), parseposition.getErrorIndex());
        else
            return s;
        if (!hasTimeZone(s))
            break MISSING_BLOCK_LABEL_549;
        j = s.charAt(i - 3);
        if (j != 58) goto _L2; else goto _L1
_L1:
        s = new StringBuilder(s);
        s.delete(i - 3, i - 2);
        obj = s.toString();
_L22:
        j = ((String) (obj)).length();
        i = j - ((String) (obj)).lastIndexOf('T') - 6;
        s1 = ((String) (obj));
        if (i >= 12) goto _L4; else goto _L3
_L3:
        j -= 5;
        s = new StringBuilder(((String) (obj)));
        i;
        JVM INSTR tableswitch 5 11: default 380
    //                   5 536
    //                   6 526
    //                   7 380
    //                   8 514
    //                   9 501
    //                   10 488
    //                   11 476;
           goto _L5 _L6 _L7 _L5 _L8 _L9 _L10 _L11
_L5:
        break; /* Loop/switch isn't completed */
_L6:
        break MISSING_BLOCK_LABEL_536;
_L13:
        s1 = s.toString();
_L4:
        s = _formatISO8601;
        if (_formatISO8601 == null) {
            s = _cloneFormat(DATE_FORMAT_ISO8601, "yyyy-MM-dd'T'HH:mm:ss.SSSZ", _timezone, _locale, _lenient);
            _formatISO8601 = s;
        }
        obj1 = "yyyy-MM-dd'T'HH:mm:ss.SSSZ";
        obj = s;
        break MISSING_BLOCK_LABEL_92;
_L2:
        if (j != 43) {
            obj = s;
            if (j != 45)
                continue; /* Loop/switch isn't completed */
        }
        obj = (new StringBuilder()).append(s).append("00").toString();
        continue; /* Loop/switch isn't completed */
_L11:
        s.insert(j, '0');
        continue; /* Loop/switch isn't completed */
_L10:
        s.insert(j, "00");
        continue; /* Loop/switch isn't completed */
_L9:
        s.insert(j, "000");
        continue; /* Loop/switch isn't completed */
_L8:
        s.insert(j, ".000");
        continue; /* Loop/switch isn't completed */
_L7:
        s.insert(j, "00.000");
        s.insert(j, ":00.000");
        if (true) goto _L13; else goto _L12
_L12:
        obj = new StringBuilder(s);
        i = i - s.lastIndexOf('T') - 1;
        if (i >= 12) goto _L15; else goto _L14
_L14:
        i;
        JVM INSTR tableswitch 9 11: default 608
    //                   9 710
    //                   10 702
    //                   11 694;
           goto _L16 _L17 _L18 _L19
_L17:
        break MISSING_BLOCK_LABEL_710;
_L16:
        ((StringBuilder) (obj)).append(".000");
_L15:
        ((StringBuilder) (obj)).append('Z');
        s = ((StringBuilder) (obj)).toString();
        dateformat1 = _formatISO8601_z;
        s3 = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";
        obj1 = s3;
        obj = dateformat1;
        s1 = s;
        if (dateformat1 == null) {
            obj = _cloneFormat(DATE_FORMAT_ISO8601_Z, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", _timezone, _locale, _lenient);
            _formatISO8601_z = ((DateFormat) (obj));
            obj1 = s3;
            s1 = s;
        }
        break MISSING_BLOCK_LABEL_92;
_L19:
        ((StringBuilder) (obj)).append('0');
_L18:
        ((StringBuilder) (obj)).append('0');
        ((StringBuilder) (obj)).append('0');
        if (true) goto _L15; else goto _L20
_L20:
        if (true) goto _L22; else goto _L21
_L21:
    }

    protected Date parseAsRFC1123(String s, ParsePosition parseposition) {
        if (_formatRFC1123 == null)
            _formatRFC1123 = _cloneFormat(DATE_FORMAT_RFC1123, "EEE, dd MMM yyyy HH:mm:ss zzz", _timezone, _locale, _lenient);
        return _formatRFC1123.parse(s, parseposition);
    }

    public void setLenient(boolean flag) {
        Boolean boolean1 = Boolean.valueOf(flag);
        if (_lenient != boolean1) {
            _lenient = boolean1;
            _clearFormats();
        }
    }

    public void setTimeZone(TimeZone timezone) {
        if (!timezone.equals(_timezone)) {
            _clearFormats();
            _timezone = timezone;
        }
    }

    public String toString() {
        String s1 = (new StringBuilder()).append("DateFormat ").append(getClass().getName()).toString();
        TimeZone timezone = _timezone;
        String s = s1;
        if (timezone != null)
            s = (new StringBuilder()).append(s1).append(" (timezone: ").append(timezone).append(")").toString();
        return (new StringBuilder()).append(s).append("(locale: ").append(_locale).append(")").toString();
    }

    public StdDateFormat withLocale(Locale locale) {
        if (locale.equals(_locale))
            locale = this;
        else
            locale = new StdDateFormat(_timezone, locale, _lenient);
        return locale;
    }

    public StdDateFormat withTimeZone(TimeZone timezone) {
        TimeZone timezone1 = timezone;
        if (timezone == null)
            timezone1 = DEFAULT_TIMEZONE;
        timezone = this;
        if (timezone1 != _timezone)
            if (timezone1.equals(_timezone))
                timezone = this;
            else
                timezone = new StdDateFormat(timezone1, _locale, _lenient);
        return timezone;
    }

    static  {
        DEFAULT_TIMEZONE = TimeZone.getTimeZone("UTC");
        DEFAULT_LOCALE = Locale.US;
        DATE_FORMAT_RFC1123 = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", DEFAULT_LOCALE);
        DATE_FORMAT_RFC1123.setTimeZone(DEFAULT_TIMEZONE);
        DATE_FORMAT_ISO8601 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ", DEFAULT_LOCALE);
        DATE_FORMAT_ISO8601.setTimeZone(DEFAULT_TIMEZONE);
        DATE_FORMAT_ISO8601_Z = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", DEFAULT_LOCALE);
        DATE_FORMAT_ISO8601_Z.setTimeZone(DEFAULT_TIMEZONE);
        DATE_FORMAT_PLAIN = new SimpleDateFormat("yyyy-MM-dd", DEFAULT_LOCALE);
        DATE_FORMAT_PLAIN.setTimeZone(DEFAULT_TIMEZONE);
    }
}
