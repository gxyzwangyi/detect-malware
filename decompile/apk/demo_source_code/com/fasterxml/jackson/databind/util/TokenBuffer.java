// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.util;

import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.core.base.ParserMinimalBase;
import com.fasterxml.jackson.core.json.JsonReadContext;
import com.fasterxml.jackson.core.json.JsonWriteContext;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.cfg.PackageVersion;
import java.io.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.TreeMap;

// Referenced classes of package com.fasterxml.jackson.databind.util:
//            RawValue

public class TokenBuffer extends JsonGenerator {
    protected static final class Parser extends ParserMinimalBase {

        protected transient ByteArrayBuilder _byteBuilder;
        protected boolean _closed;
        protected ObjectCodec _codec;
        protected final boolean _hasNativeIds;
        protected final boolean _hasNativeObjectIds;
        protected final boolean _hasNativeTypeIds;
        protected JsonLocation _location;
        protected JsonReadContext _parsingContext;
        protected Segment _segment;
        protected int _segmentPtr;

        protected final void _checkIsNumber() {
            if (_currToken == null || !_currToken.isNumeric())
                throw _constructError((new StringBuilder()).append("Current token (").append(_currToken).append(") not numeric, can not use numeric value accessors").toString());
            else
                return;
        }

        protected final Object _currentObject() {
            return _segment.get(_segmentPtr);
        }

        protected void _handleEOF() {
            _throwInternal();
        }

        public boolean canReadObjectId() {
            return _hasNativeObjectIds;
        }

        public boolean canReadTypeId() {
            return _hasNativeTypeIds;
        }

        public void close() {
            if (!_closed)
                _closed = true;
        }

        public BigInteger getBigIntegerValue() {
            Object obj = getNumberValue();
            if (obj instanceof BigInteger)
                obj = (BigInteger)obj;
            else
            if (getNumberType() == com.fasterxml.jackson.core.JsonParser.NumberType.BIG_DECIMAL)
                obj = ((BigDecimal)obj).toBigInteger();
            else
                obj = BigInteger.valueOf(((Number) (obj)).longValue());
            return ((BigInteger) (obj));
        }

        public byte[] getBinaryValue(Base64Variant base64variant) {
            if (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT) goto _L2; else goto _L1
_L1:
            Object obj = _currentObject();
            if (!(obj instanceof byte[])) goto _L2; else goto _L3
_L3:
            base64variant = (byte[])(byte[])obj;
_L5:
            return base64variant;
_L2:
            if (_currToken != JsonToken.VALUE_STRING)
                throw _constructError((new StringBuilder()).append("Current token (").append(_currToken).append(") not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary").toString());
            String s = getText();
            if (s == null) {
                base64variant = null;
            } else {
                ByteArrayBuilder bytearraybuilder = _byteBuilder;
                if (bytearraybuilder == null) {
                    bytearraybuilder = new ByteArrayBuilder(100);
                    _byteBuilder = bytearraybuilder;
                } else {
                    _byteBuilder.reset();
                }
                _decodeBase64(s, bytearraybuilder, base64variant);
                base64variant = bytearraybuilder.toByteArray();
            }
            if (true) goto _L5; else goto _L4
_L4:
        }

        public ObjectCodec getCodec() {
            return _codec;
        }

        public JsonLocation getCurrentLocation() {
            JsonLocation jsonlocation;
            if (_location == null)
                jsonlocation = JsonLocation.NA;
            else
                jsonlocation = _location;
            return jsonlocation;
        }

        public String getCurrentName() {
            String s;
            if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY)
                s = _parsingContext.getParent().getCurrentName();
            else
                s = _parsingContext.getCurrentName();
            return s;
        }

        public BigDecimal getDecimalValue() {
            Object obj = getNumberValue();
            if (!(obj instanceof BigDecimal)) goto _L2; else goto _L1
_L1:
            obj = (BigDecimal)obj;
_L4:
            return ((BigDecimal) (obj));
_L2:
            static class _cls1 {

                static final int $SwitchMap$com$fasterxml$jackson$core$JsonParser$NumberType[];
                static final int $SwitchMap$com$fasterxml$jackson$core$JsonToken[];

                static  {
                    $SwitchMap$com$fasterxml$jackson$core$JsonParser$NumberType = new int[com.fasterxml.jackson.core.JsonParser.NumberType.values().length];
                    NoSuchFieldError nosuchfielderror;
                    try {
                        $SwitchMap$com$fasterxml$jackson$core$JsonParser$NumberType[com.fasterxml.jackson.core.JsonParser.NumberType.INT.ordinal()] = 1;
                    }
                    catch (NoSuchFieldError nosuchfielderror16) { }
                    try {
                        $SwitchMap$com$fasterxml$jackson$core$JsonParser$NumberType[com.fasterxml.jackson.core.JsonParser.NumberType.BIG_INTEGER.ordinal()] = 2;
                    }
                    catch (NoSuchFieldError nosuchfielderror15) { }
                    try {
                        $SwitchMap$com$fasterxml$jackson$core$JsonParser$NumberType[com.fasterxml.jackson.core.JsonParser.NumberType.BIG_DECIMAL.ordinal()] = 3;
                    }
                    catch (NoSuchFieldError nosuchfielderror14) { }
                    try {
                        $SwitchMap$com$fasterxml$jackson$core$JsonParser$NumberType[com.fasterxml.jackson.core.JsonParser.NumberType.FLOAT.ordinal()] = 4;
                    }
                    catch (NoSuchFieldError nosuchfielderror13) { }
                    try {
                        $SwitchMap$com$fasterxml$jackson$core$JsonParser$NumberType[com.fasterxml.jackson.core.JsonParser.NumberType.LONG.ordinal()] = 5;
                    }
                    catch (NoSuchFieldError nosuchfielderror12) { }
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken = new int[JsonToken.values().length];
                    try {
                        $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.START_OBJECT.ordinal()] = 1;
                    }
                    catch (NoSuchFieldError nosuchfielderror11) { }
                    try {
                        $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.END_OBJECT.ordinal()] = 2;
                    }
                    catch (NoSuchFieldError nosuchfielderror10) { }
                    try {
                        $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.START_ARRAY.ordinal()] = 3;
                    }
                    catch (NoSuchFieldError nosuchfielderror9) { }
                    try {
                        $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.END_ARRAY.ordinal()] = 4;
                    }
                    catch (NoSuchFieldError nosuchfielderror8) { }
                    try {
                        $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.FIELD_NAME.ordinal()] = 5;
                    }
                    catch (NoSuchFieldError nosuchfielderror7) { }
                    try {
                        $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_STRING.ordinal()] = 6;
                    }
                    catch (NoSuchFieldError nosuchfielderror6) { }
                    try {
                        $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_NUMBER_INT.ordinal()] = 7;
                    }
                    catch (NoSuchFieldError nosuchfielderror5) { }
                    try {
                        $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_NUMBER_FLOAT.ordinal()] = 8;
                    }
                    catch (NoSuchFieldError nosuchfielderror4) { }
                    try {
                        $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_TRUE.ordinal()] = 9;
                    }
                    catch (NoSuchFieldError nosuchfielderror3) { }
                    try {
                        $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_FALSE.ordinal()] = 10;
                    }
                    catch (NoSuchFieldError nosuchfielderror2) { }
                    try {
                        $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_NULL.ordinal()] = 11;
                    }
                    catch (NoSuchFieldError nosuchfielderror1) { }
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_EMBEDDED_OBJECT.ordinal()] = 12;
_L2:
                    return;
                    nosuchfielderror;
                    if (true) goto _L2; else goto _L1
_L1:
                }
            }

            switch (_cls1..SwitchMap.com.fasterxml.jackson.core.JsonParser.NumberType[getNumberType().ordinal()]) {
            case 3: // '\003'
            case 4: // '\004'
            default:
                obj = BigDecimal.valueOf(((Number) (obj)).doubleValue());
                break;

            case 1: // '\001'
            case 5: // '\005'
                obj = BigDecimal.valueOf(((Number) (obj)).longValue());
                break;

            case 2: // '\002'
                obj = new BigDecimal((BigInteger)obj);
                break;
            }
            if (true) goto _L4; else goto _L3
_L3:
        }

        public double getDoubleValue() {
            return getNumberValue().doubleValue();
        }

        public Object getEmbeddedObject() {
            Object obj;
            if (_currToken == JsonToken.VALUE_EMBEDDED_OBJECT)
                obj = _currentObject();
            else
                obj = null;
            return obj;
        }

        public float getFloatValue() {
            return getNumberValue().floatValue();
        }

        public int getIntValue() {
            int i;
            if (_currToken == JsonToken.VALUE_NUMBER_INT)
                i = ((Number)_currentObject()).intValue();
            else
                i = getNumberValue().intValue();
            return i;
        }

        public long getLongValue() {
            return getNumberValue().longValue();
        }

        public com.fasterxml.jackson.core.JsonParser.NumberType getNumberType() {
            Object obj = getNumberValue();
            if (obj instanceof Integer)
                obj = com.fasterxml.jackson.core.JsonParser.NumberType.INT;
            else
            if (obj instanceof Long)
                obj = com.fasterxml.jackson.core.JsonParser.NumberType.LONG;
            else
            if (obj instanceof Double)
                obj = com.fasterxml.jackson.core.JsonParser.NumberType.DOUBLE;
            else
            if (obj instanceof BigDecimal)
                obj = com.fasterxml.jackson.core.JsonParser.NumberType.BIG_DECIMAL;
            else
            if (obj instanceof BigInteger)
                obj = com.fasterxml.jackson.core.JsonParser.NumberType.BIG_INTEGER;
            else
            if (obj instanceof Float)
                obj = com.fasterxml.jackson.core.JsonParser.NumberType.FLOAT;
            else
            if (obj instanceof Short)
                obj = com.fasterxml.jackson.core.JsonParser.NumberType.INT;
            else
                obj = null;
            return ((com.fasterxml.jackson.core.JsonParser.NumberType) (obj));
        }

        public final Number getNumberValue() {
            _checkIsNumber();
            Object obj = _currentObject();
            if (obj instanceof Number)
                obj = (Number)obj;
            else
            if (obj instanceof String) {
                obj = (String)obj;
                if (((String) (obj)).indexOf('.') >= 0)
                    obj = Double.valueOf(Double.parseDouble(((String) (obj))));
                else
                    obj = Long.valueOf(Long.parseLong(((String) (obj))));
            } else
            if (obj == null)
                obj = null;
            else
                throw new IllegalStateException((new StringBuilder()).append("Internal error: entry should be a Number, but is of type ").append(obj.getClass().getName()).toString());
            return ((Number) (obj));
        }

        public Object getObjectId() {
            return _segment.findObjectId(_segmentPtr);
        }

        public JsonStreamContext getParsingContext() {
            return _parsingContext;
        }

        public String getText() {
            Object obj1 = null;
            if (_currToken != JsonToken.VALUE_STRING && _currToken != JsonToken.FIELD_NAME) goto _L2; else goto _L1
_L1:
            Object obj;
            obj = _currentObject();
            if (obj instanceof String)
                obj = (String)obj;
            else
            if (obj == null)
                obj = null;
            else
                obj = obj.toString();
_L4:
            return ((String) (obj));
_L2:
            obj = obj1;
            if (_currToken != null)
                switch (_cls1..SwitchMap.com.fasterxml.jackson.core.JsonToken[_currToken.ordinal()]) {
                default:
                    obj = _currToken.asString();
                    break;

                case 7: // '\007'
                case 8: // '\b'
                    Object obj2 = _currentObject();
                    obj = obj1;
                    if (obj2 != null)
                        obj = obj2.toString();
                    break;
                }
            if (true) goto _L4; else goto _L3
_L3:
        }

        public char[] getTextCharacters() {
            char ac[] = getText();
            if (ac == null)
                ac = null;
            else
                ac = ac.toCharArray();
            return ac;
        }

        public int getTextLength() {
            String s = getText();
            int i;
            if (s == null)
                i = 0;
            else
                i = s.length();
            return i;
        }

        public int getTextOffset() {
            return 0;
        }

        public JsonLocation getTokenLocation() {
            return getCurrentLocation();
        }

        public Object getTypeId() {
            return _segment.findTypeId(_segmentPtr);
        }

        public boolean hasTextCharacters() {
            return false;
        }

        public boolean isClosed() {
            return _closed;
        }

        public String nextFieldName() {
            Object obj;
            Object obj1;
            obj1 = null;
            obj = obj1;
            if (_closed) goto _L2; else goto _L1
_L1:
            if (_segment != null) goto _L4; else goto _L3
_L3:
            obj = obj1;
_L2:
            return ((String) (obj));
_L4:
            int i = _segmentPtr + 1;
            if (i < 16 && _segment.type(i) == JsonToken.FIELD_NAME) {
                _segmentPtr = i;
                obj = _segment.get(i);
                if (obj instanceof String)
                    obj = (String)obj;
                else
                    obj = obj.toString();
                _parsingContext.setCurrentName(((String) (obj)));
            } else {
                obj = obj1;
                if (nextToken() == JsonToken.FIELD_NAME)
                    obj = getCurrentName();
            }
            if (true) goto _L2; else goto _L5
_L5:
        }

        public JsonToken nextToken() {
            Object obj;
            Object obj1;
            obj1 = null;
            obj = obj1;
            if (_closed) goto _L2; else goto _L1
_L1:
            if (_segment != null) goto _L4; else goto _L3
_L3:
            obj = obj1;
_L2:
            return ((JsonToken) (obj));
_L4:
            int i = _segmentPtr + 1;
            _segmentPtr = i;
            if (i >= 16) {
                _segmentPtr = 0;
                _segment = _segment.next();
                obj = obj1;
                if (_segment == null)
                    continue; /* Loop/switch isn't completed */
            }
            _currToken = _segment.type(_segmentPtr);
            if (_currToken != JsonToken.FIELD_NAME)
                break; /* Loop/switch isn't completed */
            obj = _currentObject();
            if (obj instanceof String)
                obj = (String)obj;
            else
                obj = obj.toString();
            _parsingContext.setCurrentName(((String) (obj)));
_L6:
            obj = _currToken;
            if (true) goto _L2; else goto _L5
_L5:
            if (_currToken == JsonToken.START_OBJECT)
                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
            else
            if (_currToken == JsonToken.START_ARRAY)
                _parsingContext = _parsingContext.createChildArrayContext(-1, -1);
            else
            if (_currToken == JsonToken.END_OBJECT || _currToken == JsonToken.END_ARRAY) {
                _parsingContext = _parsingContext.getParent();
                if (_parsingContext == null)
                    _parsingContext = JsonReadContext.createRootContext(null);
            }
              goto _L6
            if (true) goto _L2; else goto _L7
_L7:
        }

        public void overrideCurrentName(String s) {
            JsonReadContext jsonreadcontext;
label0:
            {
                JsonReadContext jsonreadcontext1 = _parsingContext;
                if (_currToken != JsonToken.START_OBJECT) {
                    jsonreadcontext = jsonreadcontext1;
                    if (_currToken != JsonToken.START_ARRAY)
                        break label0;
                }
                jsonreadcontext = jsonreadcontext1.getParent();
            }
            try {
                jsonreadcontext.setCurrentName(s);
                return;
            }
            // Misplaced declaration of an exception variable
            catch (String s) {
                throw new RuntimeException(s);
            }
        }

        public JsonToken peekNextToken() {
            JsonToken jsontoken = null;
            if (!_closed) goto _L2; else goto _L1
_L1:
            return jsontoken;
_L2:
            Segment segment = _segment;
            int i = _segmentPtr + 1;
            if (i >= 16) {
                if (segment == null)
                    segment = null;
                else
                    segment = segment.next();
                i = 0;
            }
            if (segment != null)
                jsontoken = segment.type(i);
            if (true) goto _L1; else goto _L3
_L3:
        }

        public int readBinaryValue(Base64Variant base64variant, OutputStream outputstream) {
            int i = 0;
            base64variant = getBinaryValue(base64variant);
            if (base64variant != null) {
                outputstream.write(base64variant, 0, base64variant.length);
                i = base64variant.length;
            }
            return i;
        }

        public void setCodec(ObjectCodec objectcodec) {
            _codec = objectcodec;
        }

        public void setLocation(JsonLocation jsonlocation) {
            _location = jsonlocation;
        }

        public Version version() {
            return PackageVersion.VERSION;
        }

        public Parser(Segment segment, ObjectCodec objectcodec, boolean flag, boolean flag1) {
            super(0);
            _location = null;
            _segment = segment;
            _segmentPtr = -1;
            _codec = objectcodec;
            _parsingContext = JsonReadContext.createRootContext(null);
            _hasNativeTypeIds = flag;
            _hasNativeObjectIds = flag1;
            _hasNativeIds = flag | flag1;
        }
    }

    protected static final class Segment {

        public static final int TOKENS_PER_SEGMENT = 16;
        private static final JsonToken TOKEN_TYPES_BY_INDEX[];
        protected TreeMap _nativeIds;
        protected Segment _next;
        protected long _tokenTypes;
        protected final Object _tokens[] = new Object[16];

        private final int _objectIdIndex(int i) {
            return i + i + 1;
        }

        private final int _typeIdIndex(int i) {
            return i + i;
        }

        private final void assignNativeIds(int i, Object obj, Object obj1) {
            if (_nativeIds == null)
                _nativeIds = new TreeMap();
            if (obj != null)
                _nativeIds.put(Integer.valueOf(_objectIdIndex(i)), obj);
            if (obj1 != null)
                _nativeIds.put(Integer.valueOf(_typeIdIndex(i)), obj1);
        }

        private void set(int i, int j, Object obj) {
            _tokens[i] = obj;
            long l1 = j;
            long l = l1;
            if (i > 0)
                l = l1 << (i << 2);
            _tokenTypes = l | _tokenTypes;
        }

        private void set(int i, int j, Object obj, Object obj1, Object obj2) {
            _tokens[i] = obj;
            long l1 = j;
            long l = l1;
            if (i > 0)
                l = l1 << (i << 2);
            _tokenTypes = l | _tokenTypes;
            assignNativeIds(i, obj1, obj2);
        }

        private void set(int i, JsonToken jsontoken) {
            long l1 = jsontoken.ordinal();
            long l = l1;
            if (i > 0)
                l = l1 << (i << 2);
            _tokenTypes = l | _tokenTypes;
        }

        private void set(int i, JsonToken jsontoken, Object obj) {
            _tokens[i] = obj;
            long l1 = jsontoken.ordinal();
            long l = l1;
            if (i > 0)
                l = l1 << (i << 2);
            _tokenTypes = l | _tokenTypes;
        }

        private void set(int i, JsonToken jsontoken, Object obj, Object obj1) {
            long l1 = jsontoken.ordinal();
            long l = l1;
            if (i > 0)
                l = l1 << (i << 2);
            _tokenTypes = l | _tokenTypes;
            assignNativeIds(i, obj, obj1);
        }

        private void set(int i, JsonToken jsontoken, Object obj, Object obj1, Object obj2) {
            _tokens[i] = obj;
            long l1 = jsontoken.ordinal();
            long l = l1;
            if (i > 0)
                l = l1 << (i << 2);
            _tokenTypes = l | _tokenTypes;
            assignNativeIds(i, obj1, obj2);
        }

        public Segment append(int i, JsonToken jsontoken) {
            if (i < 16) {
                set(i, jsontoken);
                jsontoken = null;
            } else {
                _next = new Segment();
                _next.set(0, jsontoken);
                jsontoken = _next;
            }
            return jsontoken;
        }

        public Segment append(int i, JsonToken jsontoken, Object obj) {
            if (i < 16) {
                set(i, jsontoken, obj);
                jsontoken = null;
            } else {
                _next = new Segment();
                _next.set(0, jsontoken, obj);
                jsontoken = _next;
            }
            return jsontoken;
        }

        public Segment append(int i, JsonToken jsontoken, Object obj, Object obj1) {
            if (i < 16) {
                set(i, jsontoken, obj, obj1);
                jsontoken = null;
            } else {
                _next = new Segment();
                _next.set(0, jsontoken, obj, obj1);
                jsontoken = _next;
            }
            return jsontoken;
        }

        public Segment append(int i, JsonToken jsontoken, Object obj, Object obj1, Object obj2) {
            if (i < 16) {
                set(i, jsontoken, obj, obj1, obj2);
                jsontoken = null;
            } else {
                _next = new Segment();
                _next.set(0, jsontoken, obj, obj1, obj2);
                jsontoken = _next;
            }
            return jsontoken;
        }

        public Segment appendRaw(int i, int j, Object obj) {
            if (i < 16) {
                set(i, j, obj);
                obj = null;
            } else {
                _next = new Segment();
                _next.set(0, j, obj);
                obj = _next;
            }
            return ((Segment) (obj));
        }

        public Segment appendRaw(int i, int j, Object obj, Object obj1, Object obj2) {
            if (i < 16) {
                set(i, j, obj, obj1, obj2);
                obj = null;
            } else {
                _next = new Segment();
                _next.set(0, j, obj, obj1, obj2);
                obj = _next;
            }
            return ((Segment) (obj));
        }

        public Object findObjectId(int i) {
            Object obj;
            if (_nativeIds == null)
                obj = null;
            else
                obj = _nativeIds.get(Integer.valueOf(_objectIdIndex(i)));
            return obj;
        }

        public Object findTypeId(int i) {
            Object obj;
            if (_nativeIds == null)
                obj = null;
            else
                obj = _nativeIds.get(Integer.valueOf(_typeIdIndex(i)));
            return obj;
        }

        public Object get(int i) {
            return _tokens[i];
        }

        public boolean hasIds() {
            boolean flag;
            if (_nativeIds != null)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public Segment next() {
            return _next;
        }

        public int rawType(int i) {
            long l1 = _tokenTypes;
            long l = l1;
            if (i > 0)
                l = l1 >> (i << 2);
            return (int)l & 0xf;
        }

        public JsonToken type(int i) {
            long l1 = _tokenTypes;
            long l = l1;
            if (i > 0)
                l = l1 >> (i << 2);
            i = (int)l;
            return TOKEN_TYPES_BY_INDEX[i & 0xf];
        }

        static  {
            TOKEN_TYPES_BY_INDEX = new JsonToken[16];
            JsonToken ajsontoken[] = JsonToken.values();
            System.arraycopy(ajsontoken, 1, TOKEN_TYPES_BY_INDEX, 1, Math.min(15, ajsontoken.length - 1));
        }

        public Segment() {
        }
    }


    protected static final int DEFAULT_GENERATOR_FEATURES = com.fasterxml.jackson.core.JsonGenerator.Feature.collectDefaults();
    protected int _appendAt;
    protected boolean _closed;
    protected Segment _first;
    protected boolean _forceBigDecimal;
    protected int _generatorFeatures;
    protected boolean _hasNativeId;
    protected boolean _hasNativeObjectIds;
    protected boolean _hasNativeTypeIds;
    protected Segment _last;
    protected boolean _mayHaveNativeIds;
    protected ObjectCodec _objectCodec;
    protected Object _objectId;
    protected Object _typeId;
    protected JsonWriteContext _writeContext;

    public TokenBuffer(JsonParser jsonparser) {
        this(jsonparser, ((DeserializationContext) (null)));
    }

    public TokenBuffer(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        boolean flag = false;
        super();
        _hasNativeId = false;
        _objectCodec = jsonparser.getCodec();
        _generatorFeatures = DEFAULT_GENERATOR_FEATURES;
        _writeContext = JsonWriteContext.createRootContext(null);
        Segment segment = new Segment();
        _last = segment;
        _first = segment;
        _appendAt = 0;
        _hasNativeTypeIds = jsonparser.canReadTypeId();
        _hasNativeObjectIds = jsonparser.canReadObjectId();
        _mayHaveNativeIds = _hasNativeTypeIds | _hasNativeObjectIds;
        if (deserializationcontext != null)
            flag = deserializationcontext.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);
        _forceBigDecimal = flag;
    }

    public TokenBuffer(ObjectCodec objectcodec) {
        this(objectcodec, false);
    }

    public TokenBuffer(ObjectCodec objectcodec, boolean flag) {
        _hasNativeId = false;
        _objectCodec = objectcodec;
        _generatorFeatures = DEFAULT_GENERATOR_FEATURES;
        _writeContext = JsonWriteContext.createRootContext(null);
        objectcodec = new Segment();
        _last = objectcodec;
        _first = objectcodec;
        _appendAt = 0;
        _hasNativeTypeIds = flag;
        _hasNativeObjectIds = flag;
        _mayHaveNativeIds = _hasNativeTypeIds | _hasNativeObjectIds;
    }

    private final void _appendNativeIds(StringBuilder stringbuilder) {
        Object obj = _last.findObjectId(_appendAt - 1);
        if (obj != null)
            stringbuilder.append("[objectId=").append(String.valueOf(obj)).append(']');
        obj = _last.findTypeId(_appendAt - 1);
        if (obj != null)
            stringbuilder.append("[typeId=").append(String.valueOf(obj)).append(']');
    }

    private final void _checkNativeIds(JsonParser jsonparser) {
        Object obj = jsonparser.getTypeId();
        _typeId = obj;
        if (obj != null)
            _hasNativeId = true;
        jsonparser = ((JsonParser) (jsonparser.getObjectId()));
        _objectId = jsonparser;
        if (jsonparser != null)
            _hasNativeId = true;
    }

    protected final void _append(JsonToken jsontoken) {
        if (_hasNativeId)
            jsontoken = _last.append(_appendAt, jsontoken, _objectId, _typeId);
        else
            jsontoken = _last.append(_appendAt, jsontoken);
        if (jsontoken == null) {
            _appendAt = _appendAt + 1;
        } else {
            _last = jsontoken;
            _appendAt = 1;
        }
    }

    protected final void _append(JsonToken jsontoken, Object obj) {
        if (_hasNativeId)
            jsontoken = _last.append(_appendAt, jsontoken, obj, _objectId, _typeId);
        else
            jsontoken = _last.append(_appendAt, jsontoken, obj);
        if (jsontoken == null) {
            _appendAt = _appendAt + 1;
        } else {
            _last = jsontoken;
            _appendAt = 1;
        }
    }

    protected final void _appendRaw(int i, Object obj) {
        if (_hasNativeId)
            obj = _last.appendRaw(_appendAt, i, obj, _objectId, _typeId);
        else
            obj = _last.appendRaw(_appendAt, i, obj);
        if (obj == null) {
            _appendAt = _appendAt + 1;
        } else {
            _last = ((Segment) (obj));
            _appendAt = 1;
        }
    }

    protected final void _appendValue(JsonToken jsontoken) {
        _writeContext.writeValue();
        if (_hasNativeId)
            jsontoken = _last.append(_appendAt, jsontoken, _objectId, _typeId);
        else
            jsontoken = _last.append(_appendAt, jsontoken);
        if (jsontoken == null) {
            _appendAt = _appendAt + 1;
        } else {
            _last = jsontoken;
            _appendAt = 1;
        }
    }

    protected final void _appendValue(JsonToken jsontoken, Object obj) {
        _writeContext.writeValue();
        if (_hasNativeId)
            jsontoken = _last.append(_appendAt, jsontoken, obj, _objectId, _typeId);
        else
            jsontoken = _last.append(_appendAt, jsontoken, obj);
        if (jsontoken == null) {
            _appendAt = _appendAt + 1;
        } else {
            _last = jsontoken;
            _appendAt = 1;
        }
    }

    protected void _reportUnsupportedOperation() {
        throw new UnsupportedOperationException("Called operation not supported for TokenBuffer");
    }

    public TokenBuffer append(TokenBuffer tokenbuffer) {
        if (!_hasNativeTypeIds)
            _hasNativeTypeIds = tokenbuffer.canWriteTypeId();
        if (!_hasNativeObjectIds)
            _hasNativeObjectIds = tokenbuffer.canWriteObjectId();
        _mayHaveNativeIds = _hasNativeTypeIds | _hasNativeObjectIds;
        for (tokenbuffer = tokenbuffer.asParser(); tokenbuffer.nextToken() != null; copyCurrentStructure(tokenbuffer));
        return this;
    }

    public JsonParser asParser() {
        return asParser(_objectCodec);
    }

    public JsonParser asParser(JsonParser jsonparser) {
        Parser parser = new Parser(_first, jsonparser.getCodec(), _hasNativeTypeIds, _hasNativeObjectIds);
        parser.setLocation(jsonparser.getTokenLocation());
        return parser;
    }

    public JsonParser asParser(ObjectCodec objectcodec) {
        return new Parser(_first, objectcodec, _hasNativeTypeIds, _hasNativeObjectIds);
    }

    public boolean canWriteBinaryNatively() {
        return true;
    }

    public boolean canWriteObjectId() {
        return _hasNativeObjectIds;
    }

    public boolean canWriteTypeId() {
        return _hasNativeTypeIds;
    }

    public void close() {
        _closed = true;
    }

    public void copyCurrentEvent(JsonParser jsonparser) {
        if (_mayHaveNativeIds)
            _checkNativeIds(jsonparser);
        _cls1..SwitchMap.com.fasterxml.jackson.core.JsonToken[jsonparser.getCurrentToken().ordinal()];
        JVM INSTR tableswitch 1 12: default 84
    //                   1 94
    //                   2 99
    //                   3 106
    //                   4 113
    //                   5 120
    //                   6 131
    //                   7 168
    //                   8 233
    //                   9 317
    //                   10 325
    //                   11 333
    //                   12 340;
           goto _L1 _L2 _L3 _L4 _L5 _L6 _L7 _L8 _L9 _L10 _L11 _L12 _L13
_L1:
        throw new RuntimeException("Internal error: should never end up through this code path");
_L2:
        writeStartObject();
_L15:
        return;
_L3:
        writeEndObject();
        continue; /* Loop/switch isn't completed */
_L4:
        writeStartArray();
        continue; /* Loop/switch isn't completed */
_L5:
        writeEndArray();
        continue; /* Loop/switch isn't completed */
_L6:
        writeFieldName(jsonparser.getCurrentName());
        continue; /* Loop/switch isn't completed */
_L7:
        if (jsonparser.hasTextCharacters())
            writeString(jsonparser.getTextCharacters(), jsonparser.getTextOffset(), jsonparser.getTextLength());
        else
            writeString(jsonparser.getText());
        continue; /* Loop/switch isn't completed */
_L8:
        switch (_cls1..SwitchMap.com.fasterxml.jackson.core.JsonParser.NumberType[jsonparser.getNumberType().ordinal()]) {
        default:
            writeNumber(jsonparser.getLongValue());
            break;

        case 1: // '\001'
            writeNumber(jsonparser.getIntValue());
            break;

        case 2: // '\002'
            writeNumber(jsonparser.getBigIntegerValue());
            break;
        }
        if (false)
            ;
        continue; /* Loop/switch isn't completed */
_L9:
        if (_forceBigDecimal) {
            writeNumber(jsonparser.getDecimalValue());
        } else {
            switch (_cls1..SwitchMap.com.fasterxml.jackson.core.JsonParser.NumberType[jsonparser.getNumberType().ordinal()]) {
            default:
                writeNumber(jsonparser.getDoubleValue());
                break;

            case 3: // '\003'
                writeNumber(jsonparser.getDecimalValue());
                break;

            case 4: // '\004'
                writeNumber(jsonparser.getFloatValue());
                break;
            }
            if (false)
                ;
        }
        continue; /* Loop/switch isn't completed */
_L10:
        writeBoolean(true);
        continue; /* Loop/switch isn't completed */
_L11:
        writeBoolean(false);
        continue; /* Loop/switch isn't completed */
_L12:
        writeNull();
        continue; /* Loop/switch isn't completed */
_L13:
        writeObject(jsonparser.getEmbeddedObject());
        if (true) goto _L15; else goto _L14
_L14:
    }

    public void copyCurrentStructure(JsonParser jsonparser) {
        JsonToken jsontoken;
        JsonToken jsontoken1 = jsonparser.getCurrentToken();
        jsontoken = jsontoken1;
        if (jsontoken1 == JsonToken.FIELD_NAME) {
            if (_mayHaveNativeIds)
                _checkNativeIds(jsonparser);
            writeFieldName(jsonparser.getCurrentName());
            jsontoken = jsonparser.nextToken();
        }
        if (_mayHaveNativeIds)
            _checkNativeIds(jsonparser);
        _cls1..SwitchMap.com.fasterxml.jackson.core.JsonToken[jsontoken.ordinal()];
        JVM INSTR tableswitch 1 3: default 84
    //                   1 119
    //                   2 84
    //                   3 90;
           goto _L1 _L2 _L1 _L3
_L1:
        copyCurrentEvent(jsonparser);
_L5:
        return;
_L3:
        writeStartArray();
        for (; jsonparser.nextToken() != JsonToken.END_ARRAY; copyCurrentStructure(jsonparser));
        writeEndArray();
        continue; /* Loop/switch isn't completed */
_L2:
        writeStartObject();
        for (; jsonparser.nextToken() != JsonToken.END_OBJECT; copyCurrentStructure(jsonparser));
        writeEndObject();
        if (true) goto _L5; else goto _L4
_L4:
    }

    public TokenBuffer deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (jsonparser.getCurrentTokenId() != JsonToken.FIELD_NAME.id()) {
            copyCurrentStructure(jsonparser);
        } else {
            writeStartObject();
            JsonToken jsontoken;
            do {
                copyCurrentStructure(jsonparser);
                jsontoken = jsonparser.nextToken();
            } while (jsontoken == JsonToken.FIELD_NAME);
            if (jsontoken != JsonToken.END_OBJECT)
                throw deserializationcontext.mappingException((new StringBuilder()).append("Expected END_OBJECT after copying contents of a JsonParser into TokenBuffer, got ").append(jsontoken).toString());
            writeEndObject();
        }
        return this;
    }

    public JsonGenerator disable(com.fasterxml.jackson.core.JsonGenerator.Feature feature) {
        _generatorFeatures = _generatorFeatures & ~feature.getMask();
        return this;
    }

    public JsonGenerator enable(com.fasterxml.jackson.core.JsonGenerator.Feature feature) {
        _generatorFeatures = _generatorFeatures | feature.getMask();
        return this;
    }

    public JsonToken firstToken() {
        JsonToken jsontoken;
        if (_first != null)
            jsontoken = _first.type(0);
        else
            jsontoken = null;
        return jsontoken;
    }

    public void flush() {
    }

    public TokenBuffer forceUseOfBigDecimal(boolean flag) {
        _forceBigDecimal = flag;
        return this;
    }

    public ObjectCodec getCodec() {
        return _objectCodec;
    }

    public int getFeatureMask() {
        return _generatorFeatures;
    }

    public volatile JsonStreamContext getOutputContext() {
        return getOutputContext();
    }

    public final JsonWriteContext getOutputContext() {
        return _writeContext;
    }

    public boolean isClosed() {
        return _closed;
    }

    public boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature feature) {
        boolean flag;
        if ((_generatorFeatures & feature.getMask()) != 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public JsonGenerator overrideStdFeatures(int i, int j) {
        _generatorFeatures = getFeatureMask() & ~j | i & j;
        return this;
    }

    public void serialize(JsonGenerator jsongenerator) {
        int i;
        int k;
        boolean flag;
        Segment segment;
        segment = _first;
        flag = _mayHaveNativeIds;
        if (flag && segment.hasIds())
            i = 1;
        else
            i = 0;
        k = -1;
_L17:
        if (++k < 16)
            break MISSING_BLOCK_LABEL_644;
        segment = segment.next();
        if (segment != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        int j;
        JsonToken jsontoken;
        Object obj5;
        if (flag && segment.hasIds())
            i = 1;
        else
            i = 0;
        k = 0;
        j = i;
        i = k;
_L19:
        jsontoken = segment.type(i);
        if (jsontoken == null) goto _L1; else goto _L3
_L3:
        if (j != 0) {
            obj5 = segment.findObjectId(i);
            if (obj5 != null)
                jsongenerator.writeObjectId(obj5);
            obj5 = segment.findTypeId(i);
            if (obj5 != null)
                jsongenerator.writeTypeId(obj5);
        }
        _cls1..SwitchMap.com.fasterxml.jackson.core.JsonToken[jsontoken.ordinal()];
        JVM INSTR tableswitch 1 12: default 208
    //                   1 223
    //                   2 235
    //                   3 242
    //                   4 249
    //                   5 256
    //                   6 296
    //                   7 336
    //                   8 448
    //                   9 584
    //                   10 592
    //                   11 600
    //                   12 607;
           goto _L4 _L5 _L6 _L7 _L8 _L9 _L10 _L11 _L12 _L13 _L14 _L15 _L16
_L16:
        break MISSING_BLOCK_LABEL_607;
_L4:
        throw new RuntimeException("Internal error: should never end up through this code path");
_L5:
        jsongenerator.writeStartObject();
_L18:
        k = i;
        i = j;
          goto _L17
_L6:
        jsongenerator.writeEndObject();
          goto _L18
_L7:
        jsongenerator.writeStartArray();
          goto _L18
_L8:
        jsongenerator.writeEndArray();
          goto _L18
_L9:
        Object obj = segment.get(i);
        if (obj instanceof SerializableString)
            jsongenerator.writeFieldName((SerializableString)obj);
        else
            jsongenerator.writeFieldName((String)obj);
          goto _L18
_L10:
        Object obj1 = segment.get(i);
        if (obj1 instanceof SerializableString)
            jsongenerator.writeString((SerializableString)obj1);
        else
            jsongenerator.writeString((String)obj1);
          goto _L18
_L11:
        Object obj2 = segment.get(i);
        if (obj2 instanceof Integer)
            jsongenerator.writeNumber(((Integer)obj2).intValue());
        else
        if (obj2 instanceof BigInteger)
            jsongenerator.writeNumber((BigInteger)obj2);
        else
        if (obj2 instanceof Long)
            jsongenerator.writeNumber(((Long)obj2).longValue());
        else
        if (obj2 instanceof Short)
            jsongenerator.writeNumber(((Short)obj2).shortValue());
        else
            jsongenerator.writeNumber(((Number)obj2).intValue());
          goto _L18
_L12:
        Object obj3 = segment.get(i);
        if (obj3 instanceof Double)
            jsongenerator.writeNumber(((Double)obj3).doubleValue());
        else
        if (obj3 instanceof BigDecimal)
            jsongenerator.writeNumber((BigDecimal)obj3);
        else
        if (obj3 instanceof Float)
            jsongenerator.writeNumber(((Float)obj3).floatValue());
        else
        if (obj3 == null)
            jsongenerator.writeNull();
        else
        if (obj3 instanceof String)
            jsongenerator.writeNumber((String)obj3);
        else
            throw new JsonGenerationException(String.format("Unrecognized value type for VALUE_NUMBER_FLOAT: %s, can not serialize", new Object[] {
                obj3.getClass().getName()
            }), jsongenerator);
          goto _L18
_L13:
        jsongenerator.writeBoolean(true);
          goto _L18
_L14:
        jsongenerator.writeBoolean(false);
          goto _L18
_L15:
        jsongenerator.writeNull();
          goto _L18
        Object obj4 = segment.get(i);
        if (obj4 instanceof RawValue)
            ((RawValue)obj4).serialize(jsongenerator);
        else
            jsongenerator.writeObject(obj4);
          goto _L18
        j = i;
        i = k;
          goto _L19
    }

    public JsonGenerator setCodec(ObjectCodec objectcodec) {
        _objectCodec = objectcodec;
        return this;
    }

    public JsonGenerator setFeatureMask(int i) {
        _generatorFeatures = i;
        return this;
    }

    public String toString() {
        boolean flag;
        int i;
        JsonToken jsontoken;
        StringBuilder stringbuilder;
        JsonParser jsonparser;
        i = 0;
        stringbuilder = new StringBuilder();
        stringbuilder.append("[TokenBuffer: ");
        jsonparser = asParser();
        if (_hasNativeTypeIds || _hasNativeObjectIds)
            flag = true;
        else
            flag = false;
_L1:
        try {
            jsontoken = jsonparser.nextToken();
        }
        catch (IOException ioexception) {
            throw new IllegalStateException(ioexception);
        }
        if (jsontoken == null) {
            if (i >= 100)
                stringbuilder.append(" ... (truncated ").append(i - 100).append(" entries)");
            stringbuilder.append(']');
            return stringbuilder.toString();
        }
        if (!flag)
            break MISSING_BLOCK_LABEL_109;
        _appendNativeIds(stringbuilder);
        if (i >= 100)
            break MISSING_BLOCK_LABEL_172;
        if (i <= 0)
            break MISSING_BLOCK_LABEL_128;
        stringbuilder.append(", ");
        stringbuilder.append(jsontoken.toString());
        if (jsontoken == JsonToken.FIELD_NAME) {
            stringbuilder.append('(');
            stringbuilder.append(jsonparser.getCurrentName());
            stringbuilder.append(')');
        }
        i++;
          goto _L1
    }

    public JsonGenerator useDefaultPrettyPrinter() {
        return this;
    }

    public Version version() {
        return PackageVersion.VERSION;
    }

    public int writeBinary(Base64Variant base64variant, InputStream inputstream, int i) {
        throw new UnsupportedOperationException();
    }

    public void writeBinary(Base64Variant base64variant, byte abyte0[], int i, int j) {
        base64variant = new byte[j];
        System.arraycopy(abyte0, i, base64variant, 0, j);
        writeObject(base64variant);
    }

    public void writeBoolean(boolean flag) {
        JsonToken jsontoken;
        if (flag)
            jsontoken = JsonToken.VALUE_TRUE;
        else
            jsontoken = JsonToken.VALUE_FALSE;
        _appendValue(jsontoken);
    }

    public final void writeEndArray() {
        _append(JsonToken.END_ARRAY);
        JsonWriteContext jsonwritecontext = _writeContext.getParent();
        if (jsonwritecontext != null)
            _writeContext = jsonwritecontext;
    }

    public final void writeEndObject() {
        _append(JsonToken.END_OBJECT);
        JsonWriteContext jsonwritecontext = _writeContext.getParent();
        if (jsonwritecontext != null)
            _writeContext = jsonwritecontext;
    }

    public void writeFieldName(SerializableString serializablestring) {
        _writeContext.writeFieldName(serializablestring.getValue());
        _append(JsonToken.FIELD_NAME, serializablestring);
    }

    public final void writeFieldName(String s) {
        _writeContext.writeFieldName(s);
        _append(JsonToken.FIELD_NAME, s);
    }

    public void writeNull() {
        _appendValue(JsonToken.VALUE_NULL);
    }

    public void writeNumber(double d) {
        _appendValue(JsonToken.VALUE_NUMBER_FLOAT, Double.valueOf(d));
    }

    public void writeNumber(float f) {
        _appendValue(JsonToken.VALUE_NUMBER_FLOAT, Float.valueOf(f));
    }

    public void writeNumber(int i) {
        _appendValue(JsonToken.VALUE_NUMBER_INT, Integer.valueOf(i));
    }

    public void writeNumber(long l) {
        _appendValue(JsonToken.VALUE_NUMBER_INT, Long.valueOf(l));
    }

    public void writeNumber(String s) {
        _appendValue(JsonToken.VALUE_NUMBER_FLOAT, s);
    }

    public void writeNumber(BigDecimal bigdecimal) {
        if (bigdecimal == null)
            writeNull();
        else
            _appendValue(JsonToken.VALUE_NUMBER_FLOAT, bigdecimal);
    }

    public void writeNumber(BigInteger biginteger) {
        if (biginteger == null)
            writeNull();
        else
            _appendValue(JsonToken.VALUE_NUMBER_INT, biginteger);
    }

    public void writeNumber(short word0) {
        _appendValue(JsonToken.VALUE_NUMBER_INT, Short.valueOf(word0));
    }

    public void writeObject(Object obj) {
        if (obj == null)
            writeNull();
        else
        if (obj.getClass() == [B || (obj instanceof RawValue))
            _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, obj);
        else
        if (_objectCodec == null)
            _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, obj);
        else
            _objectCodec.writeValue(this, obj);
    }

    public void writeObjectId(Object obj) {
        _objectId = obj;
        _hasNativeId = true;
    }

    public void writeRaw(char c) {
        _reportUnsupportedOperation();
    }

    public void writeRaw(SerializableString serializablestring) {
        _reportUnsupportedOperation();
    }

    public void writeRaw(String s) {
        _reportUnsupportedOperation();
    }

    public void writeRaw(String s, int i, int j) {
        _reportUnsupportedOperation();
    }

    public void writeRaw(char ac[], int i, int j) {
        _reportUnsupportedOperation();
    }

    public void writeRawUTF8String(byte abyte0[], int i, int j) {
        _reportUnsupportedOperation();
    }

    public void writeRawValue(String s) {
        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(s));
    }

    public void writeRawValue(String s, int i, int j) {
        String s1;
label0:
        {
            if (i <= 0) {
                s1 = s;
                if (j == s.length())
                    break label0;
            }
            s1 = s.substring(i, i + j);
        }
        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, new RawValue(s1));
    }

    public void writeRawValue(char ac[], int i, int j) {
        _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, new String(ac, i, j));
    }

    public final void writeStartArray() {
        _writeContext.writeValue();
        _append(JsonToken.START_ARRAY);
        _writeContext = _writeContext.createChildArrayContext();
    }

    public final void writeStartObject() {
        _writeContext.writeValue();
        _append(JsonToken.START_OBJECT);
        _writeContext = _writeContext.createChildObjectContext();
    }

    public void writeString(SerializableString serializablestring) {
        if (serializablestring == null)
            writeNull();
        else
            _appendValue(JsonToken.VALUE_STRING, serializablestring);
    }

    public void writeString(String s) {
        if (s == null)
            writeNull();
        else
            _appendValue(JsonToken.VALUE_STRING, s);
    }

    public void writeString(char ac[], int i, int j) {
        writeString(new String(ac, i, j));
    }

    public void writeTree(TreeNode treenode) {
        if (treenode == null)
            writeNull();
        else
        if (_objectCodec == null)
            _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, treenode);
        else
            _objectCodec.writeTree(this, treenode);
    }

    public void writeTypeId(Object obj) {
        _typeId = obj;
        _hasNativeId = true;
    }

    public void writeUTF8String(byte abyte0[], int i, int j) {
        _reportUnsupportedOperation();
    }

}
