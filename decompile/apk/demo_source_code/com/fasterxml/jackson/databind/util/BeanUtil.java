// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.util;

import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;

// Referenced classes of package com.fasterxml.jackson.databind.util:
//            ClassUtil

public class BeanUtil {

    public BeanUtil() {
    }

    protected static boolean isCglibGetCallbacks(AnnotatedMethod annotatedmethod) {
        boolean flag;
        boolean flag1;
        flag1 = false;
        annotatedmethod = annotatedmethod.getRawType();
        flag = flag1;
        if (annotatedmethod == null) goto _L2; else goto _L1
_L1:
        if (annotatedmethod.isArray()) goto _L4; else goto _L3
_L3:
        flag = flag1;
_L2:
        return flag;
_L4:
        annotatedmethod = ClassUtil.getPackageName(annotatedmethod.getComponentType());
        flag = flag1;
        if (annotatedmethod == null)
            continue; /* Loop/switch isn't completed */
        flag = flag1;
        if (!annotatedmethod.contains(".cglib"))
            continue; /* Loop/switch isn't completed */
        if (!annotatedmethod.startsWith("net.sf.cglib") && !annotatedmethod.startsWith("org.hibernate.repackage.cglib")) {
            flag = flag1;
            if (!annotatedmethod.startsWith("org.springframework.cglib"))
                continue; /* Loop/switch isn't completed */
        }
        flag = true;
        if (true) goto _L2; else goto _L5
_L5:
    }

    protected static boolean isGroovyMetaClassGetter(AnnotatedMethod annotatedmethod) {
        boolean flag;
        boolean flag1;
        flag1 = false;
        annotatedmethod = annotatedmethod.getRawType();
        flag = flag1;
        if (annotatedmethod == null) goto _L2; else goto _L1
_L1:
        if (!annotatedmethod.isArray()) goto _L4; else goto _L3
_L3:
        flag = flag1;
_L2:
        return flag;
_L4:
        annotatedmethod = ClassUtil.getPackageName(annotatedmethod);
        flag = flag1;
        if (annotatedmethod != null) {
            flag = flag1;
            if (annotatedmethod.startsWith("groovy.lang"))
                flag = true;
        }
        if (true) goto _L2; else goto _L5
_L5:
    }

    protected static boolean isGroovyMetaClassSetter(AnnotatedMethod annotatedmethod) {
        boolean flag1 = false;
        annotatedmethod = ClassUtil.getPackageName(annotatedmethod.getRawParameterType(0));
        boolean flag = flag1;
        if (annotatedmethod != null) {
            flag = flag1;
            if (annotatedmethod.startsWith("groovy.lang"))
                flag = true;
        }
        return flag;
    }

    protected static String legacyManglePropertyName(String s, int i) {
        int j = s.length();
        if (j != i) goto _L2; else goto _L1
_L1:
        s = null;
_L4:
        return s;
_L2:
        StringBuilder stringbuilder;
        char c = s.charAt(i);
        char c2 = Character.toLowerCase(c);
        if (c == c2) {
            s = s.substring(i);
            continue; /* Loop/switch isn't completed */
        }
        stringbuilder = new StringBuilder(j - i);
        stringbuilder.append(c2);
        i++;
_L5:
        char c1;
label0:
        {
            if (i < j) {
                char c3 = s.charAt(i);
                c1 = Character.toLowerCase(c3);
                if (c3 != c1)
                    break label0;
                stringbuilder.append(s, i, j);
            }
            s = stringbuilder.toString();
        }
        if (true) goto _L4; else goto _L3
_L3:
        stringbuilder.append(c1);
        i++;
          goto _L5
        if (true) goto _L4; else goto _L6
_L6:
    }

    public static String okNameForGetter(AnnotatedMethod annotatedmethod) {
        return okNameForGetter(annotatedmethod, false);
    }

    public static String okNameForGetter(AnnotatedMethod annotatedmethod, boolean flag) {
        String s2 = annotatedmethod.getName();
        String s1 = okNameForIsGetter(annotatedmethod, s2, flag);
        String s = s1;
        if (s1 == null)
            s = okNameForRegularGetter(annotatedmethod, s2, flag);
        return s;
    }

    public static String okNameForIsGetter(AnnotatedMethod annotatedmethod, String s) {
        return okNameForIsGetter(annotatedmethod, s, false);
    }

    public static String okNameForIsGetter(AnnotatedMethod annotatedmethod, String s, boolean flag) {
        if (!s.startsWith("is")) goto _L2; else goto _L1
_L1:
        annotatedmethod = annotatedmethod.getRawType();
        if (annotatedmethod != java/lang/Boolean && annotatedmethod != Boolean.TYPE) goto _L2; else goto _L3
_L3:
        if (flag)
            annotatedmethod = stdManglePropertyName(s, 2);
        else
            annotatedmethod = legacyManglePropertyName(s, 2);
_L5:
        return annotatedmethod;
_L2:
        annotatedmethod = null;
        if (true) goto _L5; else goto _L4
_L4:
    }

    public static String okNameForMutator(AnnotatedMethod annotatedmethod, String s) {
        return okNameForMutator(annotatedmethod, s, false);
    }

    public static String okNameForMutator(AnnotatedMethod annotatedmethod, String s, boolean flag) {
        annotatedmethod = annotatedmethod.getName();
        if (annotatedmethod.startsWith(s)) {
            if (flag)
                annotatedmethod = stdManglePropertyName(annotatedmethod, s.length());
            else
                annotatedmethod = legacyManglePropertyName(annotatedmethod, s.length());
        } else {
            annotatedmethod = null;
        }
        return annotatedmethod;
    }

    public static String okNameForRegularGetter(AnnotatedMethod annotatedmethod, String s) {
        return okNameForRegularGetter(annotatedmethod, s, false);
    }

    public static String okNameForRegularGetter(AnnotatedMethod annotatedmethod, String s, boolean flag) {
        String s1;
        Object obj;
        obj = null;
        s1 = obj;
        if (!s.startsWith("get")) goto _L2; else goto _L1
_L1:
        if (!"getCallbacks".equals(s)) goto _L4; else goto _L3
_L3:
        if (!isCglibGetCallbacks(annotatedmethod)) goto _L6; else goto _L5
_L5:
        s1 = obj;
_L2:
        return s1;
_L4:
        if ("getMetaClass".equals(s)) {
            s1 = obj;
            if (isGroovyMetaClassGetter(annotatedmethod))
                continue; /* Loop/switch isn't completed */
        }
_L6:
        if (flag)
            s1 = stdManglePropertyName(s, 3);
        else
            s1 = legacyManglePropertyName(s, 3);
        if (true) goto _L2; else goto _L7
_L7:
    }

    public static String okNameForSetter(AnnotatedMethod annotatedmethod) {
        return okNameForSetter(annotatedmethod, false);
    }

    public static String okNameForSetter(AnnotatedMethod annotatedmethod, boolean flag) {
        String s1 = okNameForMutator(annotatedmethod, "set", flag);
        if (s1 == null) goto _L2; else goto _L1
_L1:
        String s = s1;
        if (!"metaClass".equals(s1)) goto _L4; else goto _L3
_L3:
        if (isGroovyMetaClassSetter(annotatedmethod)) goto _L2; else goto _L5
_L5:
        s = s1;
_L4:
        return s;
_L2:
        s = null;
        if (true) goto _L4; else goto _L6
_L6:
    }

    protected static String stdManglePropertyName(String s, int i) {
        int j = s.length();
        if (j == i) {
            s = null;
        } else {
            char c1 = s.charAt(i);
            char c = Character.toLowerCase(c1);
            if (c1 == c)
                s = s.substring(i);
            else
            if (i + 1 < j && Character.isUpperCase(s.charAt(i + 1))) {
                s = s.substring(i);
            } else {
                StringBuilder stringbuilder = new StringBuilder(j - i);
                stringbuilder.append(c);
                stringbuilder.append(s, i + 1, j);
                s = stringbuilder.toString();
            }
        }
        return s;
    }
}
