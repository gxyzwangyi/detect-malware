// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.util;

import java.io.Serializable;

public abstract class NameTransformer {
    public static class Chained extends NameTransformer
        implements Serializable {

        private static final long serialVersionUID = 1L;
        protected final NameTransformer _t1;
        protected final NameTransformer _t2;

        public String reverse(String s) {
            String s1 = _t1.reverse(s);
            s = s1;
            if (s1 != null)
                s = _t2.reverse(s1);
            return s;
        }

        public String toString() {
            return (new StringBuilder()).append("[ChainedTransformer(").append(_t1).append(", ").append(_t2).append(")]").toString();
        }

        public String transform(String s) {
            return _t1.transform(_t2.transform(s));
        }

        public Chained(NameTransformer nametransformer, NameTransformer nametransformer1) {
            _t1 = nametransformer;
            _t2 = nametransformer1;
        }
    }

    protected static final class NopTransformer extends NameTransformer
        implements Serializable {

        private static final long serialVersionUID = 1L;

        public String reverse(String s) {
            return s;
        }

        public String transform(String s) {
            return s;
        }

        protected NopTransformer() {
        }
    }


    public static final NameTransformer NOP = new NopTransformer();

    protected NameTransformer() {
    }

    public static NameTransformer chainedTransformer(NameTransformer nametransformer, NameTransformer nametransformer1) {
        return new Chained(nametransformer, nametransformer1);
    }

    public static NameTransformer simpleTransformer(String s, String s1) {
        boolean flag1 = true;
        boolean flag;
        if (s != null && s.length() > 0)
            flag = true;
        else
            flag = false;
        if (s1 == null || s1.length() <= 0)
            flag1 = false;
        if (flag) {
            if (flag1)
                s = new NameTransformer(s, s1) {

                    final String val$prefix;
                    final String val$suffix;

                    public String reverse(String s2) {
                        if (!s2.startsWith(prefix)) goto _L2; else goto _L1
_L1:
                        s2 = s2.substring(prefix.length());
                        if (!s2.endsWith(suffix)) goto _L2; else goto _L3
_L3:
                        s2 = s2.substring(0, s2.length() - suffix.length());
_L5:
                        return s2;
_L2:
                        s2 = null;
                        if (true) goto _L5; else goto _L4
_L4:
                    }

                    public String toString() {
                        return (new StringBuilder()).append("[PreAndSuffixTransformer('").append(prefix).append("','").append(suffix).append("')]").toString();
                    }

                    public String transform(String s2) {
                        return (new StringBuilder()).append(prefix).append(s2).append(suffix).toString();
                    }

             {
                prefix = s;
                suffix = s1;
                super();
            }
                }
;
            else
                s = new NameTransformer(s) {

                    final String val$prefix;

                    public String reverse(String s2) {
                        if (s2.startsWith(prefix))
                            s2 = s2.substring(prefix.length());
                        else
                            s2 = null;
                        return s2;
                    }

                    public String toString() {
                        return (new StringBuilder()).append("[PrefixTransformer('").append(prefix).append("')]").toString();
                    }

                    public String transform(String s2) {
                        return (new StringBuilder()).append(prefix).append(s2).toString();
                    }

             {
                prefix = s;
                super();
            }
                }
;
        } else
        if (flag1)
            s = new NameTransformer(s1) {

                final String val$suffix;

                public String reverse(String s2) {
                    if (s2.endsWith(suffix))
                        s2 = s2.substring(0, s2.length() - suffix.length());
                    else
                        s2 = null;
                    return s2;
                }

                public String toString() {
                    return (new StringBuilder()).append("[SuffixTransformer('").append(suffix).append("')]").toString();
                }

                public String transform(String s2) {
                    return (new StringBuilder()).append(s2).append(suffix).toString();
                }

             {
                suffix = s;
                super();
            }
            }
;
        else
            s = NOP;
        return s;
    }

    public abstract String reverse(String s);

    public abstract String transform(String s);

}
