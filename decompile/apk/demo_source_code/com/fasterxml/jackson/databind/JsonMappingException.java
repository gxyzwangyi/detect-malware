// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind;

import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.databind.util.ClassUtil;
import java.io.*;
import java.util.*;

// Referenced classes of package com.fasterxml.jackson.databind:
//            DeserializationContext, SerializerProvider

public class JsonMappingException extends JsonProcessingException {
    public static class Reference
        implements Serializable {

        private static final long serialVersionUID = 1L;
        protected String _asString;
        protected String _fieldName;
        protected Object _from;
        protected int _index;

        public String getFieldName() {
            return _fieldName;
        }

        public Object getFrom() {
            return _from;
        }

        public int getIndex() {
            return _index;
        }

        public void setFieldName(String s) {
            _fieldName = s;
        }

        public void setFrom(Object obj) {
            _from = obj;
        }

        public void setIndex(int i) {
            _index = i;
        }

        public String toString() {
            if (_asString == null) {
                StringBuilder stringbuilder = new StringBuilder();
                if (_from == null) {
                    stringbuilder.append("UNKNOWN");
                } else {
                    Class class1;
                    String s;
                    if (_from instanceof Class)
                        class1 = (Class)_from;
                    else
                        class1 = _from.getClass();
                    s = ClassUtil.getPackageName(class1);
                    if (s != null) {
                        stringbuilder.append(s);
                        stringbuilder.append('.');
                    }
                    stringbuilder.append(class1.getSimpleName());
                }
                stringbuilder.append('[');
                if (_fieldName != null) {
                    stringbuilder.append('"');
                    stringbuilder.append(_fieldName);
                    stringbuilder.append('"');
                } else
                if (_index >= 0)
                    stringbuilder.append(_index);
                else
                    stringbuilder.append('?');
                stringbuilder.append(']');
                _asString = stringbuilder.toString();
            }
            return _asString;
        }

        Object writeReplace() {
            return new Reference(this, toString(), null);
        }

        protected Reference() {
            _index = -1;
        }

        private Reference(Reference reference, String s, Object obj) {
            _index = -1;
            _asString = s;
            _from = obj;
            _fieldName = reference._fieldName;
            _index = reference._index;
        }

        public Reference(Object obj) {
            _index = -1;
            _from = obj;
        }

        public Reference(Object obj, int i) {
            _index = -1;
            _from = obj;
            _index = i;
        }

        public Reference(Object obj, String s) {
            _index = -1;
            _from = obj;
            if (s == null) {
                throw new NullPointerException("Can not pass null fieldName");
            } else {
                _fieldName = s;
                return;
            }
        }
    }


    static final int MAX_REFS_TO_LIST = 1000;
    private static final long serialVersionUID = 1L;
    protected LinkedList _path;
    protected transient Closeable _processor;

    public JsonMappingException(Closeable closeable, String s) {
        super(s);
        _processor = closeable;
        if (closeable instanceof JsonParser)
            _location = ((JsonParser)closeable).getTokenLocation();
    }

    public JsonMappingException(Closeable closeable, String s, JsonLocation jsonlocation) {
        super(s, jsonlocation);
        _processor = closeable;
    }

    public JsonMappingException(Closeable closeable, String s, Throwable throwable) {
        super(s, throwable);
        _processor = closeable;
        if (closeable instanceof JsonParser)
            _location = ((JsonParser)closeable).getTokenLocation();
    }

    public JsonMappingException(String s) {
        super(s);
    }

    public JsonMappingException(String s, JsonLocation jsonlocation) {
        super(s, jsonlocation);
    }

    public JsonMappingException(String s, JsonLocation jsonlocation, Throwable throwable) {
        super(s, jsonlocation, throwable);
    }

    public JsonMappingException(String s, Throwable throwable) {
        super(s, throwable);
    }

    public static JsonMappingException from(JsonGenerator jsongenerator, String s) {
        return new JsonMappingException(jsongenerator, s, (Throwable)null);
    }

    public static JsonMappingException from(JsonGenerator jsongenerator, String s, Throwable throwable) {
        return new JsonMappingException(jsongenerator, s, throwable);
    }

    public static JsonMappingException from(JsonParser jsonparser, String s) {
        return new JsonMappingException(jsonparser, s);
    }

    public static JsonMappingException from(JsonParser jsonparser, String s, Throwable throwable) {
        return new JsonMappingException(jsonparser, s, throwable);
    }

    public static JsonMappingException from(DeserializationContext deserializationcontext, String s) {
        return new JsonMappingException(deserializationcontext.getParser(), s);
    }

    public static JsonMappingException from(DeserializationContext deserializationcontext, String s, Throwable throwable) {
        return new JsonMappingException(deserializationcontext.getParser(), s, throwable);
    }

    public static JsonMappingException from(SerializerProvider serializerprovider, String s) {
        return new JsonMappingException(((Closeable) (null)), s);
    }

    public static JsonMappingException from(SerializerProvider serializerprovider, String s, Throwable throwable) {
        return new JsonMappingException(((Closeable) (null)), s, throwable);
    }

    public static JsonMappingException fromUnexpectedIOE(IOException ioexception) {
        return new JsonMappingException(((Closeable) (null)), String.format("Unexpected IOException (of type %s): %s", new Object[] {
            ioexception.getClass().getName(), ioexception.getMessage()
        }));
    }

    public static JsonMappingException wrapWithPath(Throwable throwable, Reference reference) {
        if (!(throwable instanceof JsonMappingException)) goto _L2; else goto _L1
_L1:
        throwable = (JsonMappingException)throwable;
_L4:
        throwable.prependPath(reference);
        return throwable;
_L2:
        String s;
        Object obj;
        s = throwable.getMessage();
        if (s == null || s.length() == 0)
            s = (new StringBuilder()).append("(was ").append(throwable.getClass().getName()).append(")").toString();
        if (!(throwable instanceof JsonProcessingException))
            break; /* Loop/switch isn't completed */
        obj = ((JsonProcessingException)throwable).getProcessor();
        if (!(obj instanceof Closeable))
            break; /* Loop/switch isn't completed */
        obj = (Closeable)obj;
_L5:
        throwable = new JsonMappingException(((Closeable) (obj)), s, throwable);
        if (true) goto _L4; else goto _L3
_L3:
        obj = null;
          goto _L5
        if (true) goto _L4; else goto _L6
_L6:
    }

    public static JsonMappingException wrapWithPath(Throwable throwable, Object obj, int i) {
        return wrapWithPath(throwable, new Reference(obj, i));
    }

    public static JsonMappingException wrapWithPath(Throwable throwable, Object obj, String s) {
        return wrapWithPath(throwable, new Reference(obj, s));
    }

    protected void _appendPathDesc(StringBuilder stringbuilder) {
        if (_path != null) {
            Iterator iterator = _path.iterator();
            while (iterator.hasNext())  {
                stringbuilder.append(((Reference)iterator.next()).toString());
                if (iterator.hasNext())
                    stringbuilder.append("->");
            }
        }
    }

    protected String _buildMessage() {
        Object obj = super.getMessage();
        if (_path != null) {
            if (obj == null)
                obj = new StringBuilder();
            else
                obj = new StringBuilder(((String) (obj)));
            ((StringBuilder) (obj)).append(" (through reference chain: ");
            obj = getPathReference(((StringBuilder) (obj)));
            ((StringBuilder) (obj)).append(')');
            obj = ((StringBuilder) (obj)).toString();
        }
        return ((String) (obj));
    }

    public String getLocalizedMessage() {
        return _buildMessage();
    }

    public String getMessage() {
        return _buildMessage();
    }

    public List getPath() {
        List list;
        if (_path == null)
            list = Collections.emptyList();
        else
            list = Collections.unmodifiableList(_path);
        return list;
    }

    public String getPathReference() {
        return getPathReference(new StringBuilder()).toString();
    }

    public StringBuilder getPathReference(StringBuilder stringbuilder) {
        _appendPathDesc(stringbuilder);
        return stringbuilder;
    }

    public Object getProcessor() {
        return _processor;
    }

    public void prependPath(Reference reference) {
        if (_path == null)
            _path = new LinkedList();
        if (_path.size() < 1000)
            _path.addFirst(reference);
    }

    public void prependPath(Object obj, int i) {
        prependPath(new Reference(obj, i));
    }

    public void prependPath(Object obj, String s) {
        prependPath(new Reference(obj, s));
    }

    public String toString() {
        return (new StringBuilder()).append(getClass().getName()).append(": ").append(getMessage()).toString();
    }
}
