// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.ArrayBlockingQueue;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            CollectionDeserializer

public class ArrayBlockingQueueDeserializer extends CollectionDeserializer {

    private static final long serialVersionUID = 1L;

    public ArrayBlockingQueueDeserializer(JavaType javatype, JsonDeserializer jsondeserializer, TypeDeserializer typedeserializer, ValueInstantiator valueinstantiator) {
        super(javatype, jsondeserializer, typedeserializer, valueinstantiator);
    }

    protected ArrayBlockingQueueDeserializer(JavaType javatype, JsonDeserializer jsondeserializer, TypeDeserializer typedeserializer, ValueInstantiator valueinstantiator, JsonDeserializer jsondeserializer1, Boolean boolean1) {
        super(javatype, jsondeserializer, typedeserializer, valueinstantiator, jsondeserializer1, boolean1);
    }

    protected ArrayBlockingQueueDeserializer(ArrayBlockingQueueDeserializer arrayblockingqueuedeserializer) {
        super(arrayblockingqueuedeserializer);
    }

    public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        return deserialize(jsonparser, deserializationcontext);
    }

    public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj) {
        return deserialize(jsonparser, deserializationcontext, (Collection)obj);
    }

    public Collection deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (_delegateDeserializer == null) goto _L2; else goto _L1
_L1:
        jsonparser = (Collection)_valueInstantiator.createUsingDelegate(deserializationcontext, _delegateDeserializer.deserialize(jsonparser, deserializationcontext));
_L4:
        return jsonparser;
_L2:
        if (jsonparser.getCurrentToken() == JsonToken.VALUE_STRING) {
            String s = jsonparser.getText();
            if (s.length() == 0) {
                jsonparser = (Collection)_valueInstantiator.createFromString(deserializationcontext, s);
                continue; /* Loop/switch isn't completed */
            }
        }
        jsonparser = deserialize(jsonparser, deserializationcontext, ((Collection) (null)));
        if (true) goto _L4; else goto _L3
_L3:
    }

    public Collection deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext, Collection collection) {
        if (jsonparser.isExpectedStartArrayToken()) goto _L2; else goto _L1
_L1:
        collection = handleNonArray(jsonparser, deserializationcontext, new ArrayBlockingQueue(1));
_L7:
        return collection;
_L2:
        ArrayList arraylist;
        JsonDeserializer jsondeserializer;
        TypeDeserializer typedeserializer;
        arraylist = new ArrayList();
        jsondeserializer = _valueDeserializer;
        typedeserializer = _valueTypeDeserializer;
_L4:
        Object obj;
        obj = jsonparser.nextToken();
        if (obj == JsonToken.END_ARRAY)
            break MISSING_BLOCK_LABEL_130;
        if (obj != JsonToken.VALUE_NULL)
            break; /* Loop/switch isn't completed */
        obj = jsondeserializer.getNullValue(deserializationcontext);
_L5:
        arraylist.add(obj);
        if (true) goto _L4; else goto _L3
_L3:
label0:
        {
            if (typedeserializer != null)
                break label0;
            try {
                obj = jsondeserializer.deserialize(jsonparser, deserializationcontext);
            }
            // Misplaced declaration of an exception variable
            catch (JsonParser jsonparser) {
                throw JsonMappingException.wrapWithPath(jsonparser, arraylist, arraylist.size());
            }
        }
          goto _L5
        obj = jsondeserializer.deserializeWithType(jsonparser, deserializationcontext, typedeserializer);
          goto _L5
        if (collection != null)
            collection.addAll(arraylist);
        else
            collection = new ArrayBlockingQueue(arraylist.size(), false, arraylist);
        if (true) goto _L7; else goto _L6
_L6:
    }

    public Object deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
        return typedeserializer.deserializeTypedFromArray(jsonparser, deserializationcontext);
    }

    protected ArrayBlockingQueueDeserializer withResolved(JsonDeserializer jsondeserializer, JsonDeserializer jsondeserializer1, TypeDeserializer typedeserializer, Boolean boolean1) {
        if (jsondeserializer == _delegateDeserializer && jsondeserializer1 == _valueDeserializer && typedeserializer == _valueTypeDeserializer && _unwrapSingle == boolean1)
            jsondeserializer = this;
        else
            jsondeserializer = new ArrayBlockingQueueDeserializer(_collectionType, jsondeserializer1, typedeserializer, _valueInstantiator, jsondeserializer, boolean1);
        return jsondeserializer;
    }

    protected volatile CollectionDeserializer withResolved(JsonDeserializer jsondeserializer, JsonDeserializer jsondeserializer1, TypeDeserializer typedeserializer, Boolean boolean1) {
        return withResolved(jsondeserializer, jsondeserializer1, typedeserializer, boolean1);
    }
}
