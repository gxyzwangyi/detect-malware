// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.ContextualDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import java.util.EnumSet;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            StdDeserializer

public class EnumSetDeserializer extends StdDeserializer
    implements ContextualDeserializer {

    private static final long serialVersionUID = 1L;
    protected final Class _enumClass;
    protected JsonDeserializer _enumDeserializer;
    protected final JavaType _enumType;
    protected final Boolean _unwrapSingle;

    public EnumSetDeserializer(JavaType javatype, JsonDeserializer jsondeserializer) {
        super(java/util/EnumSet);
        _enumType = javatype;
        _enumClass = javatype.getRawClass();
        if (!_enumClass.isEnum()) {
            throw new IllegalArgumentException((new StringBuilder()).append("Type ").append(javatype).append(" not Java Enum type").toString());
        } else {
            _enumDeserializer = jsondeserializer;
            _unwrapSingle = null;
            return;
        }
    }

    protected EnumSetDeserializer(EnumSetDeserializer enumsetdeserializer, JsonDeserializer jsondeserializer, Boolean boolean1) {
        super(java/util/EnumSet);
        _enumType = enumsetdeserializer._enumType;
        _enumClass = enumsetdeserializer._enumClass;
        _enumDeserializer = jsondeserializer;
        _unwrapSingle = boolean1;
    }

    private EnumSet constructSet() {
        return EnumSet.noneOf(_enumClass);
    }

    public JsonDeserializer createContextual(DeserializationContext deserializationcontext, BeanProperty beanproperty) {
        Boolean boolean1 = findFormatFeature(deserializationcontext, beanproperty, java/util/EnumSet, com.fasterxml.jackson.annotation.JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
        JsonDeserializer jsondeserializer = _enumDeserializer;
        if (jsondeserializer == null)
            deserializationcontext = deserializationcontext.findContextualValueDeserializer(_enumType, beanproperty);
        else
            deserializationcontext = deserializationcontext.handleSecondaryContextualization(jsondeserializer, beanproperty, _enumType);
        return withResolved(deserializationcontext, boolean1);
    }

    public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        return deserialize(jsonparser, deserializationcontext);
    }

    public EnumSet deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (jsonparser.isExpectedStartArrayToken()) goto _L2; else goto _L1
_L1:
        jsonparser = handleNonArray(jsonparser, deserializationcontext);
_L6:
        return jsonparser;
_L2:
        EnumSet enumset = constructSet();
_L4:
        JsonToken jsontoken = jsonparser.nextToken();
        if (jsontoken == JsonToken.END_ARRAY)
            break; /* Loop/switch isn't completed */
        if (jsontoken == JsonToken.VALUE_NULL)
            throw deserializationcontext.mappingException(_enumClass);
        Enum enum;
        try {
            enum = (Enum)_enumDeserializer.deserialize(jsonparser, deserializationcontext);
        }
        // Misplaced declaration of an exception variable
        catch (JsonParser jsonparser) {
            throw JsonMappingException.wrapWithPath(jsonparser, enumset, enumset.size());
        }
        if (enum == null)
            continue; /* Loop/switch isn't completed */
        enumset.add(enum);
        if (true) goto _L4; else goto _L3
_L3:
        jsonparser = enumset;
        if (true) goto _L6; else goto _L5
_L5:
    }

    public Object deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
        return typedeserializer.deserializeTypedFromArray(jsonparser, deserializationcontext);
    }

    protected EnumSet handleNonArray(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        boolean flag;
        if (_unwrapSingle == Boolean.TRUE || _unwrapSingle == null && deserializationcontext.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY))
            flag = true;
        else
            flag = false;
        if (!flag)
            throw deserializationcontext.mappingException(java/util/EnumSet);
        EnumSet enumset = constructSet();
        if (jsonparser.hasToken(JsonToken.VALUE_NULL))
            throw deserializationcontext.mappingException(_enumClass);
        try {
            jsonparser = (Enum)_enumDeserializer.deserialize(jsonparser, deserializationcontext);
        }
        // Misplaced declaration of an exception variable
        catch (JsonParser jsonparser) {
            throw JsonMappingException.wrapWithPath(jsonparser, enumset, enumset.size());
        }
        if (jsonparser == null)
            break MISSING_BLOCK_LABEL_94;
        enumset.add(jsonparser);
        return enumset;
    }

    public boolean isCachable() {
        boolean flag;
        if (_enumType.getValueHandler() != null)
            flag = false;
        else
            flag = true;
        return flag;
    }

    public EnumSetDeserializer withDeserializer(JsonDeserializer jsondeserializer) {
        if (_enumDeserializer == jsondeserializer)
            jsondeserializer = this;
        else
            jsondeserializer = new EnumSetDeserializer(this, jsondeserializer, _unwrapSingle);
        return jsondeserializer;
    }

    public EnumSetDeserializer withResolved(JsonDeserializer jsondeserializer, Boolean boolean1) {
        if (_unwrapSingle == boolean1 && _enumDeserializer == jsondeserializer)
            jsondeserializer = this;
        else
            jsondeserializer = new EnumSetDeserializer(this, jsondeserializer, boolean1);
        return jsondeserializer;
    }
}
