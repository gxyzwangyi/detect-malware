// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.ContextualDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import java.util.EnumMap;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            ContainerDeserializerBase

public class EnumMapDeserializer extends ContainerDeserializerBase
    implements ContextualDeserializer {

    private static final long serialVersionUID = 1L;
    protected final Class _enumClass;
    protected KeyDeserializer _keyDeserializer;
    protected final JavaType _mapType;
    protected JsonDeserializer _valueDeserializer;
    protected final TypeDeserializer _valueTypeDeserializer;

    public EnumMapDeserializer(JavaType javatype, KeyDeserializer keydeserializer, JsonDeserializer jsondeserializer, TypeDeserializer typedeserializer) {
        super(javatype);
        _mapType = javatype;
        _enumClass = javatype.getKeyType().getRawClass();
        _keyDeserializer = keydeserializer;
        _valueDeserializer = jsondeserializer;
        _valueTypeDeserializer = typedeserializer;
    }

    protected EnumMap constructMap() {
        return new EnumMap(_enumClass);
    }

    public JsonDeserializer createContextual(DeserializationContext deserializationcontext, BeanProperty beanproperty) {
        Object obj = _keyDeserializer;
        KeyDeserializer keydeserializer = ((KeyDeserializer) (obj));
        if (obj == null)
            keydeserializer = deserializationcontext.findKeyDeserializer(_mapType.getKeyType(), beanproperty);
        Object obj1 = _valueDeserializer;
        obj = _mapType.getContentType();
        if (obj1 == null)
            deserializationcontext = deserializationcontext.findContextualValueDeserializer(((JavaType) (obj)), beanproperty);
        else
            deserializationcontext = deserializationcontext.handleSecondaryContextualization(((JsonDeserializer) (obj1)), beanproperty, ((JavaType) (obj)));
        obj1 = _valueTypeDeserializer;
        obj = obj1;
        if (obj1 != null)
            obj = ((TypeDeserializer) (obj1)).forProperty(beanproperty);
        return withResolved(keydeserializer, deserializationcontext, ((TypeDeserializer) (obj)));
    }

    public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        return deserialize(jsonparser, deserializationcontext);
    }

    public EnumMap deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (jsonparser.getCurrentToken() == JsonToken.START_OBJECT) goto _L2; else goto _L1
_L1:
        jsonparser = (EnumMap)_deserializeFromEmpty(jsonparser, deserializationcontext);
_L7:
        return jsonparser;
_L2:
        EnumMap enummap;
        TypeDeserializer typedeserializer;
        JsonDeserializer jsondeserializer;
        enummap = constructMap();
        jsondeserializer = _valueDeserializer;
        typedeserializer = _valueTypeDeserializer;
_L4:
        Object obj;
        Enum enum;
        String s;
        if (jsonparser.nextToken() != JsonToken.FIELD_NAME)
            break MISSING_BLOCK_LABEL_210;
        s = jsonparser.getCurrentName();
        enum = (Enum)_keyDeserializer.deserializeKey(s, deserializationcontext);
        if (enum == null) {
            if (!deserializationcontext.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL))
                throw deserializationcontext.weirdStringException(s, _enumClass, (new StringBuilder()).append("value not one of declared Enum instance names for ").append(_mapType.getKeyType()).toString());
            jsonparser.nextToken();
            jsonparser.skipChildren();
            continue; /* Loop/switch isn't completed */
        }
        obj = jsonparser.nextToken();
        if (obj != JsonToken.VALUE_NULL)
            break; /* Loop/switch isn't completed */
        obj = jsondeserializer.getNullValue(deserializationcontext);
_L5:
        enummap.put(enum, obj);
        if (true) goto _L4; else goto _L3
_L3:
label0:
        {
            if (typedeserializer != null)
                break label0;
            try {
                obj = jsondeserializer.deserialize(jsonparser, deserializationcontext);
            }
            // Misplaced declaration of an exception variable
            catch (JsonParser jsonparser) {
                wrapAndThrow(jsonparser, enummap, s);
                jsonparser = null;
                continue; /* Loop/switch isn't completed */
            }
        }
          goto _L5
        obj = jsondeserializer.deserializeWithType(jsonparser, deserializationcontext, typedeserializer);
          goto _L5
        jsonparser = enummap;
        if (true) goto _L7; else goto _L6
_L6:
    }

    public Object deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
        return typedeserializer.deserializeTypedFromObject(jsonparser, deserializationcontext);
    }

    public JsonDeserializer getContentDeserializer() {
        return _valueDeserializer;
    }

    public JavaType getContentType() {
        return _mapType.getContentType();
    }

    public boolean isCachable() {
        boolean flag;
        if (_valueDeserializer == null && _keyDeserializer == null && _valueTypeDeserializer == null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public EnumMapDeserializer withResolved(KeyDeserializer keydeserializer, JsonDeserializer jsondeserializer, TypeDeserializer typedeserializer) {
        if (keydeserializer == _keyDeserializer && jsondeserializer == _valueDeserializer && typedeserializer == _valueTypeDeserializer)
            keydeserializer = this;
        else
            keydeserializer = new EnumMapDeserializer(_mapType, keydeserializer, jsondeserializer, _valueTypeDeserializer);
        return keydeserializer;
    }
}
