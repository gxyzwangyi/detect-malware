// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.*;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import java.util.Collection;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            StdDeserializer

public abstract class DelegatingDeserializer extends StdDeserializer
    implements ContextualDeserializer, ResolvableDeserializer {

    private static final long serialVersionUID = 1L;
    protected final JsonDeserializer _delegatee;

    public DelegatingDeserializer(JsonDeserializer jsondeserializer) {
        super(_figureType(jsondeserializer));
        _delegatee = jsondeserializer;
    }

    private static Class _figureType(JsonDeserializer jsondeserializer) {
        jsondeserializer = jsondeserializer.handledType();
        if (jsondeserializer == null)
            jsondeserializer = java/lang/Object;
        return jsondeserializer;
    }

    protected JsonDeserializer _createContextual(DeserializationContext deserializationcontext, BeanProperty beanproperty, JsonDeserializer jsondeserializer) {
        if (jsondeserializer == _delegatee)
            deserializationcontext = this;
        else
            deserializationcontext = newDelegatingInstance(jsondeserializer);
        return deserializationcontext;
    }

    public JsonDeserializer createContextual(DeserializationContext deserializationcontext, BeanProperty beanproperty) {
        com.fasterxml.jackson.databind.JavaType javatype = deserializationcontext.constructType(_delegatee.handledType());
        deserializationcontext = deserializationcontext.handleSecondaryContextualization(_delegatee, beanproperty, javatype);
        if (deserializationcontext == _delegatee)
            deserializationcontext = this;
        else
            deserializationcontext = newDelegatingInstance(deserializationcontext);
        return deserializationcontext;
    }

    public Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        return _delegatee.deserialize(jsonparser, deserializationcontext);
    }

    public Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj) {
        return _delegatee.deserialize(jsonparser, deserializationcontext, obj);
    }

    public Object deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
        return _delegatee.deserializeWithType(jsonparser, deserializationcontext, typedeserializer);
    }

    public SettableBeanProperty findBackReference(String s) {
        return _delegatee.findBackReference(s);
    }

    public JsonDeserializer getDelegatee() {
        return _delegatee;
    }

    public Object getEmptyValue() {
        return _delegatee.getEmptyValue();
    }

    public Object getEmptyValue(DeserializationContext deserializationcontext) {
        return _delegatee.getEmptyValue(deserializationcontext);
    }

    public Collection getKnownPropertyNames() {
        return _delegatee.getKnownPropertyNames();
    }

    public Object getNullValue() {
        return _delegatee.getNullValue();
    }

    public Object getNullValue(DeserializationContext deserializationcontext) {
        return _delegatee.getNullValue(deserializationcontext);
    }

    public ObjectIdReader getObjectIdReader() {
        return _delegatee.getObjectIdReader();
    }

    public boolean isCachable() {
        return _delegatee.isCachable();
    }

    protected abstract JsonDeserializer newDelegatingInstance(JsonDeserializer jsondeserializer);

    public JsonDeserializer replaceDelegatee(JsonDeserializer jsondeserializer) {
        if (jsondeserializer == _delegatee)
            jsondeserializer = this;
        else
            jsondeserializer = newDelegatingInstance(jsondeserializer);
        return jsondeserializer;
    }

    public void resolve(DeserializationContext deserializationcontext) {
        if (_delegatee instanceof ResolvableDeserializer)
            ((ResolvableDeserializer)_delegatee).resolve(deserializationcontext);
    }
}
