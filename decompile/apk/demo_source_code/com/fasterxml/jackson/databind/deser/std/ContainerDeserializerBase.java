// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            StdDeserializer

public abstract class ContainerDeserializerBase extends StdDeserializer {

    protected ContainerDeserializerBase(JavaType javatype) {
        super(javatype);
    }

    public SettableBeanProperty findBackReference(String s) {
        JsonDeserializer jsondeserializer = getContentDeserializer();
        if (jsondeserializer == null)
            throw new IllegalArgumentException((new StringBuilder()).append("Can not handle managed/back reference '").append(s).append("': type: container deserializer of type ").append(getClass().getName()).append(" returned null for 'getContentDeserializer()'").toString());
        else
            return jsondeserializer.findBackReference(s);
    }

    public abstract JsonDeserializer getContentDeserializer();

    public abstract JavaType getContentType();

    protected void wrapAndThrow(Throwable throwable, Object obj, String s) {
        for (; (throwable instanceof InvocationTargetException) && throwable.getCause() != null; throwable = throwable.getCause());
        if (throwable instanceof Error)
            throw (Error)throwable;
        if ((throwable instanceof IOException) && !(throwable instanceof JsonMappingException))
            throw (IOException)throwable;
        String s1 = s;
        if (s == null)
            s1 = "N/A";
        throw JsonMappingException.wrapWithPath(throwable, obj, s1);
    }
}
