// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.ClassUtil;
import java.io.File;
import java.net.*;
import java.nio.charset.Charset;
import java.util.*;
import java.util.regex.Pattern;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            StdScalarDeserializer

public abstract class FromStringDeserializer extends StdScalarDeserializer {
    public static class Std extends FromStringDeserializer {

        public static final int STD_CHARSET = 9;
        public static final int STD_CLASS = 4;
        public static final int STD_CURRENCY = 6;
        public static final int STD_FILE = 1;
        public static final int STD_INET_ADDRESS = 11;
        public static final int STD_INET_SOCKET_ADDRESS = 12;
        public static final int STD_JAVA_TYPE = 5;
        public static final int STD_LOCALE = 8;
        public static final int STD_PATTERN = 7;
        public static final int STD_TIME_ZONE = 10;
        public static final int STD_URI = 3;
        public static final int STD_URL = 2;
        private static final long serialVersionUID = 1L;
        protected final int _kind;

        protected Object _deserialize(String s, DeserializationContext deserializationcontext) {
            _kind;
            JVM INSTR tableswitch 1 12: default 68
        //                       1 76
        //                       2 87
        //                       3 99
        //                       4 107
        //                       5 130
        //                       6 142
        //                       7 150
        //                       8 158
        //                       9 245
        //                       10 253
        //                       11 261
        //                       12 269;
               goto _L1 _L2 _L3 _L4 _L5 _L6 _L7 _L8 _L9 _L10 _L11 _L12 _L13
_L1:
            throw new IllegalArgumentException();
_L2:
            s = new File(s);
_L15:
            return s;
_L3:
            s = new URL(s);
            continue; /* Loop/switch isn't completed */
_L4:
            s = URI.create(s);
            continue; /* Loop/switch isn't completed */
_L5:
            try {
                s = deserializationcontext.findClass(s);
            }
            // Misplaced declaration of an exception variable
            catch (String s) {
                throw deserializationcontext.instantiationException(_valueClass, ClassUtil.getRootCause(s));
            }
            continue; /* Loop/switch isn't completed */
_L6:
            s = deserializationcontext.getTypeFactory().constructFromCanonical(s);
            continue; /* Loop/switch isn't completed */
_L7:
            s = Currency.getInstance(s);
            continue; /* Loop/switch isn't completed */
_L8:
            s = Pattern.compile(s);
            continue; /* Loop/switch isn't completed */
_L9:
            int i = s.indexOf('_');
            if (i < 0) {
                s = new Locale(s);
            } else {
                deserializationcontext = s.substring(0, i);
                s = s.substring(i + 1);
                i = s.indexOf('_');
                if (i < 0)
                    s = new Locale(deserializationcontext, s);
                else
                    s = new Locale(deserializationcontext, s.substring(0, i), s.substring(i + 1));
            }
            continue; /* Loop/switch isn't completed */
_L10:
            s = Charset.forName(s);
            continue; /* Loop/switch isn't completed */
_L11:
            s = TimeZone.getTimeZone(s);
            continue; /* Loop/switch isn't completed */
_L12:
            s = InetAddress.getByName(s);
            continue; /* Loop/switch isn't completed */
_L13:
            if (s.startsWith("[")) {
                int l = s.lastIndexOf(']');
                if (l == -1)
                    throw new InvalidFormatException(deserializationcontext.getParser(), "Bracketed IPv6 address must contain closing bracket", s, java/net/InetSocketAddress);
                int j = s.indexOf(':', l);
                if (j > -1)
                    j = Integer.parseInt(s.substring(j + 1));
                else
                    j = 0;
                s = new InetSocketAddress(s.substring(0, l + 1), j);
            } else {
                int k = s.indexOf(':');
                if (k >= 0 && s.indexOf(':', k + 1) < 0) {
                    int i1 = Integer.parseInt(s.substring(k + 1));
                    s = new InetSocketAddress(s.substring(0, k), i1);
                } else {
                    s = new InetSocketAddress(s, 0);
                }
            }
            if (true) goto _L15; else goto _L14
_L14:
        }

        protected Object _deserializeFromEmptyString() {
            Object obj;
            if (_kind == 3)
                obj = URI.create("");
            else
            if (_kind == 8)
                obj = Locale.ROOT;
            else
                obj = _deserializeFromEmptyString();
            return obj;
        }

        protected Std(Class class1, int i) {
            super(class1);
            _kind = i;
        }
    }


    protected FromStringDeserializer(Class class1) {
        super(class1);
    }

    public static Std findDeserializer(Class class1) {
        int i;
        if (class1 == java/io/File)
            i = 1;
        else
        if (class1 == java/net/URL)
            i = 2;
        else
        if (class1 == java/net/URI)
            i = 3;
        else
        if (class1 == java/lang/Class)
            i = 4;
        else
        if (class1 == com/fasterxml/jackson/databind/JavaType)
            i = 5;
        else
        if (class1 == java/util/Currency)
            i = 6;
        else
        if (class1 == java/util/regex/Pattern)
            i = 7;
        else
        if (class1 == java/util/Locale)
            i = 8;
        else
        if (class1 == java/nio/charset/Charset)
            i = 9;
        else
        if (class1 == java/util/TimeZone)
            i = 10;
        else
        if (class1 == java/net/InetAddress) {
            i = 11;
        } else {
label0:
            {
                if (class1 != java/net/InetSocketAddress)
                    break label0;
                i = 12;
            }
        }
        class1 = new Std(class1, i);
_L2:
        return class1;
        class1 = null;
        if (true) goto _L2; else goto _L1
_L1:
    }

    public static Class[] types() {
        return (new Class[] {
            java/io/File, java/net/URL, java/net/URI, java/lang/Class, com/fasterxml/jackson/databind/JavaType, java/util/Currency, java/util/regex/Pattern, java/util/Locale, java/nio/charset/Charset, java/util/TimeZone, 
            java/net/InetAddress, java/net/InetSocketAddress
        });
    }

    protected abstract Object _deserialize(String s, DeserializationContext deserializationcontext);

    protected Object _deserializeEmbedded(Object obj, DeserializationContext deserializationcontext) {
        throw deserializationcontext.mappingException("Don't know how to convert embedded Object of type %s into %s", new Object[] {
            obj.getClass().getName(), _valueClass.getName()
        });
    }

    protected Object _deserializeFromEmptyString() {
        return null;
    }

    public Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        Object obj;
        Object obj1;
        obj = null;
        obj1 = null;
        if (jsonparser.getCurrentToken() != JsonToken.START_ARRAY || !deserializationcontext.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) goto _L2; else goto _L1
_L1:
        jsonparser.nextToken();
        obj = deserialize(jsonparser, deserializationcontext);
        if (jsonparser.nextToken() != JsonToken.END_ARRAY)
            throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.END_ARRAY, (new StringBuilder()).append("Attempted to unwrap single value array for single '").append(_valueClass.getName()).append("' value but there was more than a single value in the array").toString());
          goto _L3
_L2:
        String s = jsonparser.getValueAsString();
        if (s == null) goto _L5; else goto _L4
_L4:
        if (s.length() == 0) goto _L7; else goto _L6
_L6:
        s = s.trim();
        if (s.length() != 0) goto _L8; else goto _L7
_L7:
        obj = _deserializeFromEmptyString();
_L3:
        return obj;
_L8:
        try {
            obj1 = _deserialize(s, deserializationcontext);
        }
        // Misplaced declaration of an exception variable
        catch (JsonParser jsonparser) {
            obj1 = "not a valid textual representation";
            obj = obj1;
            if (jsonparser != null) {
                String s1 = jsonparser.getMessage();
                obj = obj1;
                if (s1 != null)
                    obj = (new StringBuilder()).append("not a valid textual representation").append(", problem: ").append(s1).toString();
            }
            deserializationcontext = deserializationcontext.weirdStringException(s, _valueClass, ((String) (obj)));
            if (jsonparser != null)
                deserializationcontext.initCause(jsonparser);
            throw deserializationcontext;
        }
label0:
        {
            jsonparser = ((JsonParser) (obj));
            if (obj1 != null) {
                obj = obj1;
                continue; /* Loop/switch isn't completed */
            }
            break label0;
        }
_L5:
        if (jsonparser.getCurrentToken() != JsonToken.VALUE_EMBEDDED_OBJECT)
            break; /* Loop/switch isn't completed */
        jsonparser = ((JsonParser) (jsonparser.getEmbeddedObject()));
        obj = obj1;
        if (jsonparser != null)
            if (_valueClass.isAssignableFrom(jsonparser.getClass()))
                obj = jsonparser;
            else
                obj = _deserializeEmbedded(jsonparser, deserializationcontext);
        if (true) goto _L3; else goto _L9
_L9:
        throw deserializationcontext.mappingException(_valueClass);
    }
}
