// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.impl;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import java.util.ArrayList;
import java.util.HashMap;

// Referenced classes of package com.fasterxml.jackson.databind.deser.impl:
//            PropertyBasedCreator, PropertyValueBuffer

public class ExternalTypeHandler {
    public static class Builder {

        private final HashMap _nameToPropertyIndex = new HashMap();
        private final ArrayList _properties = new ArrayList();

        public void addExternal(SettableBeanProperty settablebeanproperty, TypeDeserializer typedeserializer) {
            Integer integer = Integer.valueOf(_properties.size());
            _properties.add(new ExtTypedProperty(settablebeanproperty, typedeserializer));
            _nameToPropertyIndex.put(settablebeanproperty.getName(), integer);
            _nameToPropertyIndex.put(typedeserializer.getPropertyName(), integer);
        }

        public ExternalTypeHandler build() {
            return new ExternalTypeHandler((ExtTypedProperty[])_properties.toArray(new ExtTypedProperty[_properties.size()]), _nameToPropertyIndex, null, null);
        }

        public Builder() {
        }
    }

    private static final class ExtTypedProperty {

        private final SettableBeanProperty _property;
        private final TypeDeserializer _typeDeserializer;
        private final String _typePropertyName;

        public String getDefaultTypeId() {
            String s = null;
            Class class1 = _typeDeserializer.getDefaultImpl();
            if (class1 != null)
                s = _typeDeserializer.getTypeIdResolver().idFromValueAndType(null, class1);
            return s;
        }

        public SettableBeanProperty getProperty() {
            return _property;
        }

        public String getTypePropertyName() {
            return _typePropertyName;
        }

        public boolean hasDefaultType() {
            boolean flag;
            if (_typeDeserializer.getDefaultImpl() != null)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public boolean hasTypePropertyName(String s) {
            return s.equals(_typePropertyName);
        }

        public ExtTypedProperty(SettableBeanProperty settablebeanproperty, TypeDeserializer typedeserializer) {
            _property = settablebeanproperty;
            _typeDeserializer = typedeserializer;
            _typePropertyName = typedeserializer.getPropertyName();
        }
    }


    private final HashMap _nameToPropertyIndex;
    private final ExtTypedProperty _properties[];
    private final TokenBuffer _tokens[];
    private final String _typeIds[];

    protected ExternalTypeHandler(ExternalTypeHandler externaltypehandler) {
        _properties = externaltypehandler._properties;
        _nameToPropertyIndex = externaltypehandler._nameToPropertyIndex;
        int i = _properties.length;
        _typeIds = new String[i];
        _tokens = new TokenBuffer[i];
    }

    protected ExternalTypeHandler(ExtTypedProperty aexttypedproperty[], HashMap hashmap, String as[], TokenBuffer atokenbuffer[]) {
        _properties = aexttypedproperty;
        _nameToPropertyIndex = hashmap;
        _typeIds = as;
        _tokens = atokenbuffer;
    }

    protected final Object _deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext, int i, String s) {
        JsonParser jsonparser1 = _tokens[i].asParser(jsonparser);
        if (jsonparser1.nextToken() == JsonToken.VALUE_NULL) {
            jsonparser = null;
        } else {
            TokenBuffer tokenbuffer = new TokenBuffer(jsonparser, deserializationcontext);
            tokenbuffer.writeStartArray();
            tokenbuffer.writeString(s);
            tokenbuffer.copyCurrentStructure(jsonparser1);
            tokenbuffer.writeEndArray();
            jsonparser = tokenbuffer.asParser(jsonparser);
            jsonparser.nextToken();
            jsonparser = ((JsonParser) (_properties[i].getProperty().deserialize(jsonparser, deserializationcontext)));
        }
        return jsonparser;
    }

    protected final void _deserializeAndSet(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj, int i, String s) {
        JsonParser jsonparser1 = _tokens[i].asParser(jsonparser);
        if (jsonparser1.nextToken() == JsonToken.VALUE_NULL) {
            _properties[i].getProperty().set(obj, null);
        } else {
            TokenBuffer tokenbuffer = new TokenBuffer(jsonparser, deserializationcontext);
            tokenbuffer.writeStartArray();
            tokenbuffer.writeString(s);
            tokenbuffer.copyCurrentStructure(jsonparser1);
            tokenbuffer.writeEndArray();
            jsonparser = tokenbuffer.asParser(jsonparser);
            jsonparser.nextToken();
            _properties[i].getProperty().deserializeAndSet(jsonparser, deserializationcontext, obj);
        }
    }

    public Object complete(JsonParser jsonparser, DeserializationContext deserializationcontext, PropertyValueBuffer propertyvaluebuffer, PropertyBasedCreator propertybasedcreator) {
        int i;
        int l;
        Object aobj[];
        l = _properties.length;
        aobj = new Object[l];
        i = 0;
_L5:
        String s;
        if (i >= l)
            break MISSING_BLOCK_LABEL_171;
        s = _typeIds[i];
        if (s != null) goto _L2; else goto _L1
_L1:
        if (_tokens[i] != null) goto _L4; else goto _L3
_L3:
        i++;
          goto _L5
_L4:
        if (!_properties[i].hasDefaultType())
            throw deserializationcontext.mappingException("Missing external type id property '%s'", new Object[] {
                _properties[i].getTypePropertyName()
            });
        s = _properties[i].getDefaultTypeId();
_L7:
        aobj[i] = _deserialize(jsonparser, deserializationcontext, i, s);
          goto _L3
_L2:
        if (_tokens[i] != null) goto _L7; else goto _L6
_L6:
        throw deserializationcontext.mappingException("Missing property '%s' for external type id '%s'", new Object[] {
            _properties[i].getProperty().getName(), _properties[i].getTypePropertyName()
        });
        for (int j = 0; j < l; j++) {
            jsonparser = _properties[j].getProperty();
            if (propertybasedcreator.findCreatorProperty(jsonparser.getName()) != null)
                propertyvaluebuffer.assignParameter(jsonparser, aobj[j]);
        }

        jsonparser = ((JsonParser) (propertybasedcreator.build(deserializationcontext, propertyvaluebuffer)));
        for (int k = 0; k < l; k++) {
            deserializationcontext = _properties[k].getProperty();
            if (propertybasedcreator.findCreatorProperty(deserializationcontext.getName()) == null)
                deserializationcontext.set(jsonparser, aobj[k]);
        }

        return jsonparser;
    }

    public Object complete(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj) {
        int i;
        int j;
        j = _properties.length;
        i = 0;
_L5:
        if (i >= j) goto _L2; else goto _L1
_L1:
        Object obj2 = _typeIds[i];
        if (obj2 != null) goto _L4; else goto _L3
_L3:
        Object obj1;
        TokenBuffer tokenbuffer = _tokens[i];
        if (tokenbuffer != null) {
label0:
            {
                JsonToken jsontoken = tokenbuffer.firstToken();
                obj1 = obj2;
                if (jsontoken == null)
                    break MISSING_BLOCK_LABEL_183;
                obj1 = obj2;
                if (!jsontoken.isScalarValue())
                    break MISSING_BLOCK_LABEL_183;
                obj2 = tokenbuffer.asParser(jsonparser);
                ((JsonParser) (obj2)).nextToken();
                obj1 = _properties[i].getProperty();
                obj2 = TypeDeserializer.deserializeIfNatural(((JsonParser) (obj2)), deserializationcontext, ((SettableBeanProperty) (obj1)).getType());
                if (obj2 == null)
                    break label0;
                ((SettableBeanProperty) (obj1)).set(obj, obj2);
            }
        }
_L6:
        i++;
          goto _L5
        if (!_properties[i].hasDefaultType())
            throw deserializationcontext.mappingException("Missing external type id property '%s'", new Object[] {
                _properties[i].getTypePropertyName()
            });
        obj1 = _properties[i].getDefaultTypeId();
_L7:
        _deserializeAndSet(jsonparser, deserializationcontext, obj, i, ((String) (obj1)));
          goto _L6
_L4:
        if (_tokens[i] == null)
            throw deserializationcontext.mappingException("Missing property '%s' for external type id '%s'", new Object[] {
                _properties[i].getProperty().getName(), _properties[i].getTypePropertyName()
            });
        break MISSING_BLOCK_LABEL_249;
_L2:
        return obj;
        obj1 = obj2;
          goto _L7
    }

    public boolean handlePropertyValue(JsonParser jsonparser, DeserializationContext deserializationcontext, String s, Object obj) {
        boolean flag1;
        boolean flag2;
        Integer integer;
        flag1 = false;
        flag2 = false;
        integer = (Integer)_nameToPropertyIndex.get(s);
        if (integer != null) goto _L2; else goto _L1
_L1:
        return flag2;
_L2:
        boolean flag;
        int i;
        i = integer.intValue();
        if (!_properties[i].hasTypePropertyName(s))
            break; /* Loop/switch isn't completed */
        _typeIds[i] = jsonparser.getText();
        jsonparser.skipChildren();
        if (obj != null && _tokens[i] != null)
            flag = true;
        else
            flag = false;
_L4:
        if (flag) {
            s = _typeIds[i];
            _typeIds[i] = null;
            _deserializeAndSet(jsonparser, deserializationcontext, obj, i, s);
            _tokens[i] = null;
        }
        flag2 = true;
        if (true) goto _L1; else goto _L3
_L3:
        s = new TokenBuffer(jsonparser, deserializationcontext);
        s.copyCurrentStructure(jsonparser);
        _tokens[i] = s;
        flag = flag1;
        if (obj != null) {
            flag = flag1;
            if (_typeIds[i] != null)
                flag = true;
        }
          goto _L4
        if (true) goto _L1; else goto _L5
_L5:
    }

    public boolean handleTypePropertyValue(JsonParser jsonparser, DeserializationContext deserializationcontext, String s, Object obj) {
        boolean flag1 = false;
        Integer integer = (Integer)_nameToPropertyIndex.get(s);
        boolean flag2;
        if (integer == null) {
            flag2 = false;
        } else {
            int i = integer.intValue();
            if (!_properties[i].hasTypePropertyName(s)) {
                flag2 = false;
            } else {
                s = jsonparser.getText();
                boolean flag = flag1;
                if (obj != null) {
                    flag = flag1;
                    if (_tokens[i] != null)
                        flag = true;
                }
                if (flag) {
                    _deserializeAndSet(jsonparser, deserializationcontext, obj, i, s);
                    _tokens[i] = null;
                } else {
                    _typeIds[i] = s;
                }
                flag2 = true;
            }
        }
        return flag2;
    }

    public ExternalTypeHandler start() {
        return new ExternalTypeHandler(this);
    }
}
