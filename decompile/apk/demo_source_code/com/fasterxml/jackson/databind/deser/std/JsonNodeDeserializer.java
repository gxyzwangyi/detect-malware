// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.node.*;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            BaseNodeDeserializer

public class JsonNodeDeserializer extends BaseNodeDeserializer {
    static final class ArrayDeserializer extends BaseNodeDeserializer {

        protected static final ArrayDeserializer _instance = new ArrayDeserializer();
        private static final long serialVersionUID = 1L;

        public static ArrayDeserializer getInstance() {
            return _instance;
        }

        public ArrayNode deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            if (jsonparser.isExpectedStartArrayToken())
                return deserializeArray(jsonparser, deserializationcontext, deserializationcontext.getNodeFactory());
            else
                throw deserializationcontext.mappingException(com/fasterxml/jackson/databind/node/ArrayNode);
        }

        public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return deserialize(jsonparser, deserializationcontext);
        }


        protected ArrayDeserializer() {
            super(com/fasterxml/jackson/databind/node/ArrayNode);
        }
    }

    static final class ObjectDeserializer extends BaseNodeDeserializer {

        protected static final ObjectDeserializer _instance = new ObjectDeserializer();
        private static final long serialVersionUID = 1L;

        public static ObjectDeserializer getInstance() {
            return _instance;
        }

        public ObjectNode deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            if (jsonparser.isExpectedStartObjectToken() || jsonparser.hasToken(JsonToken.FIELD_NAME))
                jsonparser = deserializeObject(jsonparser, deserializationcontext, deserializationcontext.getNodeFactory());
            else
            if (jsonparser.hasToken(JsonToken.END_OBJECT))
                jsonparser = deserializationcontext.getNodeFactory().objectNode();
            else
                throw deserializationcontext.mappingException(com/fasterxml/jackson/databind/node/ObjectNode);
            return jsonparser;
        }

        public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return deserialize(jsonparser, deserializationcontext);
        }


        protected ObjectDeserializer() {
            super(com/fasterxml/jackson/databind/node/ObjectNode);
        }
    }


    private static final JsonNodeDeserializer instance = new JsonNodeDeserializer();

    protected JsonNodeDeserializer() {
        super(com/fasterxml/jackson/databind/JsonNode);
    }

    public static JsonDeserializer getDeserializer(Class class1) {
        if (class1 == com/fasterxml/jackson/databind/node/ObjectNode)
            class1 = ObjectDeserializer.getInstance();
        else
        if (class1 == com/fasterxml/jackson/databind/node/ArrayNode)
            class1 = ArrayDeserializer.getInstance();
        else
            class1 = instance;
        return class1;
    }

    public JsonNode deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        jsonparser.getCurrentTokenId();
        JVM INSTR tableswitch 1 3: default 32
    //                   1 45
    //                   2 32
    //                   3 59;
           goto _L1 _L2 _L1 _L3
_L1:
        jsonparser = deserializeAny(jsonparser, deserializationcontext, deserializationcontext.getNodeFactory());
_L5:
        return jsonparser;
_L2:
        jsonparser = deserializeObject(jsonparser, deserializationcontext, deserializationcontext.getNodeFactory());
        continue; /* Loop/switch isn't completed */
_L3:
        jsonparser = deserializeArray(jsonparser, deserializationcontext, deserializationcontext.getNodeFactory());
        if (true) goto _L5; else goto _L4
_L4:
    }

    public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        return deserialize(jsonparser, deserializationcontext);
    }

    public volatile Object deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
        return super.deserializeWithType(jsonparser, deserializationcontext, typedeserializer);
    }

    public JsonNode getNullValue() {
        return NullNode.getInstance();
    }

    public JsonNode getNullValue(DeserializationContext deserializationcontext) {
        return NullNode.getInstance();
    }

    public volatile Object getNullValue() {
        return getNullValue();
    }

    public volatile Object getNullValue(DeserializationContext deserializationcontext) {
        return getNullValue(deserializationcontext);
    }

    public volatile boolean isCachable() {
        return super.isCachable();
    }

}
