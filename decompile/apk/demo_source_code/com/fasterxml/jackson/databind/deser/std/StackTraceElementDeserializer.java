// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.*;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            StdScalarDeserializer

public class StackTraceElementDeserializer extends StdScalarDeserializer {

    private static final long serialVersionUID = 1L;

    public StackTraceElementDeserializer() {
        super(java/lang/StackTraceElement);
    }

    public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        return deserialize(jsonparser, deserializationcontext);
    }

    public StackTraceElement deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        Object obj = jsonparser.getCurrentToken();
        if (obj == JsonToken.START_OBJECT) {
            obj = "";
            String s = "";
            String s1 = "";
            int i = -1;
            do {
                JsonToken jsontoken = jsonparser.nextValue();
                if (jsontoken == JsonToken.END_OBJECT)
                    break;
                String s2 = jsonparser.getCurrentName();
                if ("className".equals(s2))
                    obj = jsonparser.getText();
                else
                if ("fileName".equals(s2))
                    s1 = jsonparser.getText();
                else
                if ("lineNumber".equals(s2)) {
                    if (jsontoken.isNumeric())
                        i = jsonparser.getIntValue();
                    else
                        throw JsonMappingException.from(jsonparser, (new StringBuilder()).append("Non-numeric token (").append(jsontoken).append(") for property 'lineNumber'").toString());
                } else
                if ("methodName".equals(s2))
                    s = jsonparser.getText();
                else
                if (!"nativeMethod".equals(s2))
                    handleUnknownProperty(jsonparser, deserializationcontext, _valueClass, s2);
            } while (true);
            obj = new StackTraceElement(((String) (obj)), s, s1, i);
        } else
        if (obj == JsonToken.START_ARRAY && deserializationcontext.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {
            jsonparser.nextToken();
            obj = deserialize(jsonparser, deserializationcontext);
            if (jsonparser.nextToken() != JsonToken.END_ARRAY)
                throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'java.lang.StackTraceElement' value but there was more than a single value in the array");
        } else {
            throw deserializationcontext.mappingException(_valueClass, ((JsonToken) (obj)));
        }
        return ((StackTraceElement) (obj));
    }
}
