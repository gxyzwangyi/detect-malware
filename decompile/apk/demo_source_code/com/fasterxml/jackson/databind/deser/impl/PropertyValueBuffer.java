// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.impl;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.SettableAnyProperty;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import java.util.BitSet;

// Referenced classes of package com.fasterxml.jackson.databind.deser.impl:
//            ObjectIdReader, ReadableObjectId, PropertyValue

public class PropertyValueBuffer {

    protected PropertyValue _buffered;
    protected final DeserializationContext _context;
    protected final Object _creatorParameters[];
    protected Object _idValue;
    protected final ObjectIdReader _objectIdReader;
    protected int _paramsNeeded;
    protected int _paramsSeen;
    protected final BitSet _paramsSeenBig;
    protected final JsonParser _parser;

    public PropertyValueBuffer(JsonParser jsonparser, DeserializationContext deserializationcontext, int i, ObjectIdReader objectidreader) {
        _parser = jsonparser;
        _context = deserializationcontext;
        _paramsNeeded = i;
        _objectIdReader = objectidreader;
        _creatorParameters = new Object[i];
        if (i < 32)
            _paramsSeenBig = null;
        else
            _paramsSeenBig = new BitSet();
    }

    protected Object _findMissing(SettableBeanProperty settablebeanproperty) {
        if (settablebeanproperty.getInjectableValueId() != null) {
            settablebeanproperty = ((SettableBeanProperty) (_context.findInjectableValue(settablebeanproperty.getInjectableValueId(), settablebeanproperty, null)));
        } else {
            if (settablebeanproperty.isRequired())
                throw _context.mappingException("Missing required creator property '%s' (index %d)", new Object[] {
                    settablebeanproperty.getName(), Integer.valueOf(settablebeanproperty.getCreatorIndex())
                });
            if (_context.isEnabled(DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES))
                throw _context.mappingException("Missing creator property '%s' (index %d); DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES enabled", new Object[] {
                    settablebeanproperty.getName(), Integer.valueOf(settablebeanproperty.getCreatorIndex())
                });
            settablebeanproperty = ((SettableBeanProperty) (settablebeanproperty.getValueDeserializer().getNullValue(_context)));
        }
        return settablebeanproperty;
    }

    public boolean assignParameter(int i, Object obj) {
        _creatorParameters[i] = obj;
        return false;
    }

    public boolean assignParameter(SettableBeanProperty settablebeanproperty, Object obj) {
        int k;
        boolean flag;
        flag = true;
        k = settablebeanproperty.getCreatorIndex();
        _creatorParameters[k] = obj;
        if (_paramsSeenBig != null) goto _L2; else goto _L1
_L1:
        int i;
        i = _paramsSeen;
        k = 1 << k | i;
        if (i == k) goto _L4; else goto _L3
_L3:
        _paramsSeen = k;
        i = _paramsNeeded - 1;
        _paramsNeeded = i;
        if (i > 0) goto _L4; else goto _L5
_L5:
        return flag;
_L2:
        if (!_paramsSeenBig.get(k)) {
            int j = _paramsNeeded - 1;
            _paramsNeeded = j;
            if (j <= 0)
                continue; /* Loop/switch isn't completed */
            _paramsSeenBig.set(k);
        }
_L4:
        flag = false;
        if (true) goto _L5; else goto _L6
_L6:
    }

    public void bufferAnyProperty(SettableAnyProperty settableanyproperty, String s, Object obj) {
        _buffered = new PropertyValue.Any(_buffered, obj, settableanyproperty, s);
    }

    public void bufferMapProperty(Object obj, Object obj1) {
        _buffered = new PropertyValue.Map(_buffered, obj1, obj);
    }

    public void bufferProperty(SettableBeanProperty settablebeanproperty, Object obj) {
        _buffered = new PropertyValue.Regular(_buffered, obj, settablebeanproperty);
    }

    protected PropertyValue buffered() {
        return _buffered;
    }

    protected Object[] getParameters(SettableBeanProperty asettablebeanproperty[]) {
        int i = 0;
        int j = 0;
        if (_paramsNeeded > 0)
            if (_paramsSeenBig == null) {
                i = _paramsSeen;
                for (int l = _creatorParameters.length; j < l;) {
                    if ((i & 1) == 0)
                        _creatorParameters[j] = _findMissing(asettablebeanproperty[j]);
                    j++;
                    i >>= 1;
                }

            } else {
                int k = _creatorParameters.length;
                do {
                    i = _paramsSeenBig.nextClearBit(i);
                    if (i >= k)
                        break;
                    _creatorParameters[i] = _findMissing(asettablebeanproperty[i]);
                    i++;
                } while (true);
            }
        return _creatorParameters;
    }

    public Object handleIdValue(DeserializationContext deserializationcontext, Object obj) {
label0:
        {
            Object obj1 = obj;
            if (_objectIdReader != null) {
                if (_idValue == null)
                    break label0;
                deserializationcontext.findObjectId(_idValue, _objectIdReader.generator, _objectIdReader.resolver).bindItem(obj);
                deserializationcontext = _objectIdReader.idProperty;
                obj1 = obj;
                if (deserializationcontext != null)
                    obj1 = deserializationcontext.setAndReturn(obj, _idValue);
            }
            return obj1;
        }
        throw deserializationcontext.mappingException("No _idValue when handleIdValue called, on instance of %s", new Object[] {
            obj.getClass().getName()
        });
    }

    public boolean isComplete() {
        boolean flag;
        if (_paramsNeeded <= 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean readIdProperty(String s) {
        boolean flag;
        if (_objectIdReader != null && s.equals(_objectIdReader.propertyName.getSimpleName())) {
            _idValue = _objectIdReader.readObjectReference(_parser, _context);
            flag = true;
        } else {
            flag = false;
        }
        return flag;
    }
}
