// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;

public class StdValueInstantiator extends ValueInstantiator
    implements Serializable {

    private static final long serialVersionUID = 1L;
    protected SettableBeanProperty _arrayDelegateArguments[];
    protected AnnotatedWithParams _arrayDelegateCreator;
    protected JavaType _arrayDelegateType;
    protected SettableBeanProperty _constructorArguments[];
    protected AnnotatedWithParams _defaultCreator;
    protected SettableBeanProperty _delegateArguments[];
    protected AnnotatedWithParams _delegateCreator;
    protected JavaType _delegateType;
    protected AnnotatedWithParams _fromBooleanCreator;
    protected AnnotatedWithParams _fromDoubleCreator;
    protected AnnotatedWithParams _fromIntCreator;
    protected AnnotatedWithParams _fromLongCreator;
    protected AnnotatedWithParams _fromStringCreator;
    protected AnnotatedParameter _incompleteParameter;
    protected final String _valueTypeDesc;
    protected AnnotatedWithParams _withArgsCreator;

    public StdValueInstantiator(DeserializationConfig deserializationconfig, JavaType javatype) {
        if (javatype == null)
            deserializationconfig = "UNKNOWN TYPE";
        else
            deserializationconfig = javatype.toString();
        _valueTypeDesc = deserializationconfig;
    }

    public StdValueInstantiator(DeserializationConfig deserializationconfig, Class class1) {
        if (class1 == null)
            deserializationconfig = "UNKNOWN TYPE";
        else
            deserializationconfig = class1.getName();
        _valueTypeDesc = deserializationconfig;
    }

    protected StdValueInstantiator(StdValueInstantiator stdvalueinstantiator) {
        _valueTypeDesc = stdvalueinstantiator._valueTypeDesc;
        _defaultCreator = stdvalueinstantiator._defaultCreator;
        _constructorArguments = stdvalueinstantiator._constructorArguments;
        _withArgsCreator = stdvalueinstantiator._withArgsCreator;
        _delegateType = stdvalueinstantiator._delegateType;
        _delegateCreator = stdvalueinstantiator._delegateCreator;
        _delegateArguments = stdvalueinstantiator._delegateArguments;
        _arrayDelegateType = stdvalueinstantiator._arrayDelegateType;
        _arrayDelegateCreator = stdvalueinstantiator._arrayDelegateCreator;
        _arrayDelegateArguments = stdvalueinstantiator._arrayDelegateArguments;
        _fromStringCreator = stdvalueinstantiator._fromStringCreator;
        _fromIntCreator = stdvalueinstantiator._fromIntCreator;
        _fromLongCreator = stdvalueinstantiator._fromLongCreator;
        _fromDoubleCreator = stdvalueinstantiator._fromDoubleCreator;
        _fromBooleanCreator = stdvalueinstantiator._fromBooleanCreator;
    }

    private Object _createUsingDelegate(AnnotatedWithParams annotatedwithparams, SettableBeanProperty asettablebeanproperty[], DeserializationContext deserializationcontext, Object obj) {
        if (annotatedwithparams == null)
            throw new IllegalStateException((new StringBuilder()).append("No delegate constructor for ").append(getValueTypeDesc()).toString());
        if (asettablebeanproperty != null) goto _L2; else goto _L1
_L1:
        int i;
        int j;
        Object aobj[];
        SettableBeanProperty settablebeanproperty;
        try {
            annotatedwithparams = ((AnnotatedWithParams) (annotatedwithparams.call1(obj)));
        }
        // Misplaced declaration of an exception variable
        catch (AnnotatedWithParams annotatedwithparams) {
            throw rewrapCtorProblem(deserializationcontext, annotatedwithparams);
        }
_L6:
        return annotatedwithparams;
_L2:
        j = asettablebeanproperty.length;
        aobj = new Object[j];
        i = 0;
_L4:
        if (i >= j)
            break MISSING_BLOCK_LABEL_120;
        settablebeanproperty = asettablebeanproperty[i];
        if (settablebeanproperty != null)
            break; /* Loop/switch isn't completed */
        aobj[i] = obj;
_L5:
        i++;
        if (true) goto _L4; else goto _L3
_L3:
        aobj[i] = deserializationcontext.findInjectableValue(settablebeanproperty.getInjectableValueId(), settablebeanproperty, null);
          goto _L5
        annotatedwithparams = ((AnnotatedWithParams) (annotatedwithparams.call(aobj)));
          goto _L6
    }

    public boolean canCreateFromBoolean() {
        boolean flag;
        if (_fromBooleanCreator != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean canCreateFromDouble() {
        boolean flag;
        if (_fromDoubleCreator != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean canCreateFromInt() {
        boolean flag;
        if (_fromIntCreator != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean canCreateFromLong() {
        boolean flag;
        if (_fromLongCreator != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean canCreateFromObjectWith() {
        boolean flag;
        if (_withArgsCreator != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean canCreateFromString() {
        boolean flag;
        if (_fromStringCreator != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean canCreateUsingArrayDelegate() {
        boolean flag;
        if (_arrayDelegateType != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean canCreateUsingDefault() {
        boolean flag;
        if (_defaultCreator != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean canCreateUsingDelegate() {
        boolean flag;
        if (_delegateType != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public void configureFromArraySettings(AnnotatedWithParams annotatedwithparams, JavaType javatype, SettableBeanProperty asettablebeanproperty[]) {
        _arrayDelegateCreator = annotatedwithparams;
        _arrayDelegateType = javatype;
        _arrayDelegateArguments = asettablebeanproperty;
    }

    public void configureFromBooleanCreator(AnnotatedWithParams annotatedwithparams) {
        _fromBooleanCreator = annotatedwithparams;
    }

    public void configureFromDoubleCreator(AnnotatedWithParams annotatedwithparams) {
        _fromDoubleCreator = annotatedwithparams;
    }

    public void configureFromIntCreator(AnnotatedWithParams annotatedwithparams) {
        _fromIntCreator = annotatedwithparams;
    }

    public void configureFromLongCreator(AnnotatedWithParams annotatedwithparams) {
        _fromLongCreator = annotatedwithparams;
    }

    public void configureFromObjectSettings(AnnotatedWithParams annotatedwithparams, AnnotatedWithParams annotatedwithparams1, JavaType javatype, SettableBeanProperty asettablebeanproperty[], AnnotatedWithParams annotatedwithparams2, SettableBeanProperty asettablebeanproperty1[]) {
        _defaultCreator = annotatedwithparams;
        _delegateCreator = annotatedwithparams1;
        _delegateType = javatype;
        _delegateArguments = asettablebeanproperty;
        _withArgsCreator = annotatedwithparams2;
        _constructorArguments = asettablebeanproperty1;
    }

    public void configureFromStringCreator(AnnotatedWithParams annotatedwithparams) {
        _fromStringCreator = annotatedwithparams;
    }

    public void configureIncompleteParameter(AnnotatedParameter annotatedparameter) {
        _incompleteParameter = annotatedparameter;
    }

    public Object createFromBoolean(DeserializationContext deserializationcontext, boolean flag) {
        if (_fromBooleanCreator == null)
            throw deserializationcontext.mappingException("Can not instantiate value of type %s from Boolean value (%s); no single-boolean/Boolean-arg constructor/factory method", new Object[] {
                getValueTypeDesc(), Boolean.valueOf(flag)
            });
        Object obj;
        try {
            obj = _fromBooleanCreator.call1(Boolean.valueOf(flag));
        }
        catch (Throwable throwable) {
            throw rewrapCtorProblem(deserializationcontext, throwable);
        }
        return obj;
    }

    public Object createFromDouble(DeserializationContext deserializationcontext, double d) {
        if (_fromDoubleCreator == null)
            throw deserializationcontext.mappingException("Can not instantiate value of type %s from Floating-point number (%s); no one-double/Double-arg constructor/factory method", new Object[] {
                getValueTypeDesc(), Double.valueOf(d)
            });
        Object obj;
        try {
            obj = _fromDoubleCreator.call1(Double.valueOf(d));
        }
        catch (Throwable throwable) {
            throw rewrapCtorProblem(deserializationcontext, throwable);
        }
        return obj;
    }

    public Object createFromInt(DeserializationContext deserializationcontext, int i) {
        if (_fromIntCreator == null) goto _L2; else goto _L1
_L1:
        Object obj = _fromIntCreator.call1(Integer.valueOf(i));
        deserializationcontext = ((DeserializationContext) (obj));
_L4:
        return deserializationcontext;
_L2:
        Object obj1;
        try {
            if (_fromLongCreator == null)
                break; /* Loop/switch isn't completed */
            obj1 = _fromLongCreator.call1(Long.valueOf(i));
        }
        catch (Throwable throwable) {
            throw rewrapCtorProblem(deserializationcontext, throwable);
        }
        deserializationcontext = ((DeserializationContext) (obj1));
        if (true) goto _L4; else goto _L3
_L3:
        throw deserializationcontext.mappingException("Can not instantiate value of type %s from Integral number (%s); no single-int-arg constructor/factory method", new Object[] {
            getValueTypeDesc(), Integer.valueOf(i)
        });
    }

    public Object createFromLong(DeserializationContext deserializationcontext, long l) {
        if (_fromLongCreator == null)
            throw deserializationcontext.mappingException("Can not instantiate value of type %s from Long integral number (%s); no single-long-arg constructor/factory method", new Object[] {
                getValueTypeDesc(), Long.valueOf(l)
            });
        Object obj;
        try {
            obj = _fromLongCreator.call1(Long.valueOf(l));
        }
        catch (Throwable throwable) {
            throw rewrapCtorProblem(deserializationcontext, throwable);
        }
        return obj;
    }

    public Object createFromObjectWith(DeserializationContext deserializationcontext, Object aobj[]) {
        if (_withArgsCreator == null)
            throw new IllegalStateException((new StringBuilder()).append("No with-args constructor for ").append(getValueTypeDesc()).toString());
        try {
            aobj = ((Object []) (_withArgsCreator.call(aobj)));
        }
        // Misplaced declaration of an exception variable
        catch (Object aobj[]) {
            throw rewrapCtorProblem(deserializationcontext, ((Throwable) (aobj)));
        }
        return ((Object) (aobj));
    }

    public Object createFromString(DeserializationContext deserializationcontext, String s) {
        if (_fromStringCreator == null) {
            deserializationcontext = ((DeserializationContext) (_createFromStringFallbacks(deserializationcontext, s)));
        } else {
            try {
                s = ((String) (_fromStringCreator.call1(s)));
            }
            // Misplaced declaration of an exception variable
            catch (String s) {
                throw rewrapCtorProblem(deserializationcontext, s);
            }
            deserializationcontext = s;
        }
        return deserializationcontext;
    }

    public Object createUsingArrayDelegate(DeserializationContext deserializationcontext, Object obj) {
        if (_arrayDelegateCreator == null)
            deserializationcontext = ((DeserializationContext) (createUsingDelegate(deserializationcontext, obj)));
        else
            deserializationcontext = ((DeserializationContext) (_createUsingDelegate(_arrayDelegateCreator, _arrayDelegateArguments, deserializationcontext, obj)));
        return deserializationcontext;
    }

    public Object createUsingDefault(DeserializationContext deserializationcontext) {
        if (_defaultCreator == null)
            throw new IllegalStateException((new StringBuilder()).append("No default constructor for ").append(getValueTypeDesc()).toString());
        Object obj;
        try {
            obj = _defaultCreator.call();
        }
        catch (Throwable throwable) {
            throw rewrapCtorProblem(deserializationcontext, throwable);
        }
        return obj;
    }

    public Object createUsingDelegate(DeserializationContext deserializationcontext, Object obj) {
        return _createUsingDelegate(_delegateCreator, _delegateArguments, deserializationcontext, obj);
    }

    public AnnotatedWithParams getArrayDelegateCreator() {
        return _arrayDelegateCreator;
    }

    public JavaType getArrayDelegateType(DeserializationConfig deserializationconfig) {
        return _arrayDelegateType;
    }

    public AnnotatedWithParams getDefaultCreator() {
        return _defaultCreator;
    }

    public AnnotatedWithParams getDelegateCreator() {
        return _delegateCreator;
    }

    public JavaType getDelegateType(DeserializationConfig deserializationconfig) {
        return _delegateType;
    }

    public SettableBeanProperty[] getFromObjectArguments(DeserializationConfig deserializationconfig) {
        return _constructorArguments;
    }

    public AnnotatedParameter getIncompleteParameter() {
        return _incompleteParameter;
    }

    public String getValueTypeDesc() {
        return _valueTypeDesc;
    }

    public AnnotatedWithParams getWithArgsCreator() {
        return _withArgsCreator;
    }

    protected JsonMappingException rewrapCtorProblem(DeserializationContext deserializationcontext, Throwable throwable) {
        Throwable throwable1;
label0:
        {
            if (!(throwable instanceof ExceptionInInitializerError)) {
                throwable1 = throwable;
                if (!(throwable instanceof InvocationTargetException))
                    break label0;
            }
            Throwable throwable2 = throwable.getCause();
            throwable1 = throwable;
            if (throwable2 != null)
                throwable1 = throwable2;
        }
        return wrapAsJsonMappingException(deserializationcontext, throwable1);
    }

    protected JsonMappingException unwrapAndWrapException(DeserializationContext deserializationcontext, Throwable throwable) {
        Throwable throwable1 = throwable;
_L3:
        if (throwable1 == null)
            break MISSING_BLOCK_LABEL_28;
        if (!(throwable1 instanceof JsonMappingException)) goto _L2; else goto _L1
_L1:
        deserializationcontext = (JsonMappingException)throwable1;
_L4:
        return deserializationcontext;
_L2:
        throwable1 = throwable1.getCause();
          goto _L3
        String s = String.format("Instantiation of %s value failed (%s): %s", new Object[] {
            getValueTypeDesc(), throwable.getClass().getName(), throwable.getMessage()
        });
        deserializationcontext = JsonMappingException.from(deserializationcontext.getParser(), s, throwable);
          goto _L4
    }

    protected JsonMappingException wrapAsJsonMappingException(DeserializationContext deserializationcontext, Throwable throwable) {
        if (throwable instanceof JsonMappingException) {
            deserializationcontext = (JsonMappingException)throwable;
        } else {
            String s = String.format("Instantiation of %s value failed (%s): %s", new Object[] {
                getValueTypeDesc(), throwable.getClass().getName(), throwable.getMessage()
            });
            deserializationcontext = JsonMappingException.from(deserializationcontext.getParser(), s, throwable);
        }
        return deserializationcontext;
    }

    protected JsonMappingException wrapException(Throwable throwable) {
        Throwable throwable1 = throwable;
_L3:
        if (throwable1 == null)
            break MISSING_BLOCK_LABEL_28;
        if (!(throwable1 instanceof JsonMappingException)) goto _L2; else goto _L1
_L1:
        throwable = (JsonMappingException)throwable1;
_L4:
        return throwable;
_L2:
        throwable1 = throwable1.getCause();
          goto _L3
        throwable = new JsonMappingException(null, (new StringBuilder()).append("Instantiation of ").append(getValueTypeDesc()).append(" value failed: ").append(throwable.getMessage()).toString(), throwable);
          goto _L4
    }
}
