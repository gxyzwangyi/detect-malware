// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.deser.ContextualDeserializer;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.sql.Date;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashSet;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            StdScalarDeserializer

public class DateDeserializers {
    public static class CalendarDeserializer extends DateBasedDeserializer {

        protected final Class _calendarClass;

        public volatile JsonDeserializer createContextual(DeserializationContext deserializationcontext, BeanProperty beanproperty) {
            return super.createContextual(deserializationcontext, beanproperty);
        }

        public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return deserialize(jsonparser, deserializationcontext);
        }

        public Calendar deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            jsonparser = _parseDate(jsonparser, deserializationcontext);
            if (jsonparser != null) goto _L2; else goto _L1
_L1:
            jsonparser = null;
_L4:
            return jsonparser;
_L2:
            if (_calendarClass == null) {
                jsonparser = deserializationcontext.constructCalendar(jsonparser);
                continue; /* Loop/switch isn't completed */
            }
            Calendar calendar;
            java.util.TimeZone timezone;
            try {
                calendar = (Calendar)_calendarClass.newInstance();
                calendar.setTimeInMillis(jsonparser.getTime());
                timezone = deserializationcontext.getTimeZone();
            }
            // Misplaced declaration of an exception variable
            catch (JsonParser jsonparser) {
                throw deserializationcontext.instantiationException(_calendarClass, jsonparser);
            }
            jsonparser = calendar;
            if (timezone == null)
                continue; /* Loop/switch isn't completed */
            calendar.setTimeZone(timezone);
            jsonparser = calendar;
            if (true) goto _L4; else goto _L3
_L3:
        }

        protected CalendarDeserializer withDateFormat(DateFormat dateformat, String s) {
            return new CalendarDeserializer(this, dateformat, s);
        }

        protected volatile DateBasedDeserializer withDateFormat(DateFormat dateformat, String s) {
            return withDateFormat(dateformat, s);
        }

        public CalendarDeserializer() {
            super(java/util/Calendar);
            _calendarClass = null;
        }

        public CalendarDeserializer(CalendarDeserializer calendardeserializer, DateFormat dateformat, String s) {
            super(calendardeserializer, dateformat, s);
            _calendarClass = calendardeserializer._calendarClass;
        }

        public CalendarDeserializer(Class class1) {
            super(class1);
            _calendarClass = class1;
        }
    }

    protected static abstract class DateBasedDeserializer extends StdScalarDeserializer
        implements ContextualDeserializer {

        protected final DateFormat _customFormat;
        protected final String _formatString;

        protected java.util.Date _parseDate(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            if (_customFormat == null) goto _L2; else goto _L1
_L1:
            Object obj = jsonparser.getCurrentToken();
            if (obj != JsonToken.VALUE_STRING) goto _L4; else goto _L3
_L3:
            String s;
            s = jsonparser.getText().trim();
            if (s.length() == 0)
                obj = (java.util.Date)getEmptyValue(deserializationcontext);
            else
                synchronized (_customFormat) {
                    obj = _customFormat.parse(s);
                }
_L6:
            return ((java.util.Date) (obj));
            JVM INSTR monitorenter ;
            deserializationcontext;
            jsonparser;
            JVM INSTR monitorexit ;
            throw deserializationcontext;
            obj;
            IllegalArgumentException illegalargumentexception = JVM INSTR new #74  <Class IllegalArgumentException>;
            deserializationcontext = JVM INSTR new #76  <Class StringBuilder>;
            deserializationcontext.StringBuilder();
            illegalargumentexception.IllegalArgumentException(deserializationcontext.append("Failed to parse Date value '").append(s).append("' (format: \"").append(_formatString).append("\"): ").append(((ParseException) (obj)).getMessage()).toString());
            throw illegalargumentexception;
_L4:
            if (obj == JsonToken.START_ARRAY && deserializationcontext.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {
                jsonparser.nextToken();
                obj = _parseDate(jsonparser, deserializationcontext);
                if (jsonparser.nextToken() != JsonToken.END_ARRAY)
                    throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'java.util.Date' value but there was more than a single value in the array");
                continue; /* Loop/switch isn't completed */
            }
_L2:
            obj = super._parseDate(jsonparser, deserializationcontext);
            if (true) goto _L6; else goto _L5
_L5:
        }

        public JsonDeserializer createContextual(DeserializationContext deserializationcontext, BeanProperty beanproperty) {
            Object obj = this;
            if (beanproperty == null) goto _L2; else goto _L1
_L1:
            com.fasterxml.jackson.annotation.JsonFormat.Value value;
            value = deserializationcontext.getAnnotationIntrospector().findFormat(beanproperty.getMember());
            obj = this;
            if (value == null) goto _L2; else goto _L3
_L3:
            java.util.TimeZone timezone = value.getTimeZone();
            if (!value.hasPattern()) goto _L5; else goto _L4
_L4:
            obj = value.getPattern();
            if (value.hasLocale())
                beanproperty = value.getLocale();
            else
                beanproperty = deserializationcontext.getLocale();
            beanproperty = new SimpleDateFormat(((String) (obj)), beanproperty);
            if (timezone == null)
                deserializationcontext = deserializationcontext.getTimeZone();
            else
                deserializationcontext = timezone;
            beanproperty.setTimeZone(deserializationcontext);
            obj = withDateFormat(beanproperty, ((String) (obj)));
_L2:
            return ((JsonDeserializer) (obj));
_L5:
            obj = this;
            if (timezone != null) {
                beanproperty = deserializationcontext.getConfig().getDateFormat();
                if (beanproperty.getClass() == com/fasterxml/jackson/databind/util/StdDateFormat) {
                    if (value.hasLocale())
                        deserializationcontext = value.getLocale();
                    else
                        deserializationcontext = deserializationcontext.getLocale();
                    deserializationcontext = ((StdDateFormat)beanproperty).withTimeZone(timezone).withLocale(deserializationcontext);
                } else {
                    deserializationcontext = (DateFormat)beanproperty.clone();
                    deserializationcontext.setTimeZone(timezone);
                }
                obj = withDateFormat(deserializationcontext, _formatString);
            }
            if (true) goto _L2; else goto _L6
_L6:
        }

        protected abstract DateBasedDeserializer withDateFormat(DateFormat dateformat, String s);

        protected DateBasedDeserializer(DateBasedDeserializer datebaseddeserializer, DateFormat dateformat, String s) {
            super(datebaseddeserializer._valueClass);
            _customFormat = dateformat;
            _formatString = s;
        }

        protected DateBasedDeserializer(Class class1) {
            super(class1);
            _customFormat = null;
            _formatString = null;
        }
    }

    public static class DateDeserializer extends DateBasedDeserializer {

        public static final DateDeserializer instance = new DateDeserializer();

        public volatile JsonDeserializer createContextual(DeserializationContext deserializationcontext, BeanProperty beanproperty) {
            return super.createContextual(deserializationcontext, beanproperty);
        }

        public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return deserialize(jsonparser, deserializationcontext);
        }

        public java.util.Date deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return _parseDate(jsonparser, deserializationcontext);
        }

        protected volatile DateBasedDeserializer withDateFormat(DateFormat dateformat, String s) {
            return withDateFormat(dateformat, s);
        }

        protected DateDeserializer withDateFormat(DateFormat dateformat, String s) {
            return new DateDeserializer(this, dateformat, s);
        }


        public DateDeserializer() {
            super(java/util/Date);
        }

        public DateDeserializer(DateDeserializer datedeserializer, DateFormat dateformat, String s) {
            super(datedeserializer, dateformat, s);
        }
    }

    public static class SqlDateDeserializer extends DateBasedDeserializer {

        public volatile JsonDeserializer createContextual(DeserializationContext deserializationcontext, BeanProperty beanproperty) {
            return super.createContextual(deserializationcontext, beanproperty);
        }

        public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return deserialize(jsonparser, deserializationcontext);
        }

        public Date deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            jsonparser = _parseDate(jsonparser, deserializationcontext);
            if (jsonparser == null)
                jsonparser = null;
            else
                jsonparser = new Date(jsonparser.getTime());
            return jsonparser;
        }

        protected volatile DateBasedDeserializer withDateFormat(DateFormat dateformat, String s) {
            return withDateFormat(dateformat, s);
        }

        protected SqlDateDeserializer withDateFormat(DateFormat dateformat, String s) {
            return new SqlDateDeserializer(this, dateformat, s);
        }

        public SqlDateDeserializer() {
            super(java/sql/Date);
        }

        public SqlDateDeserializer(SqlDateDeserializer sqldatedeserializer, DateFormat dateformat, String s) {
            super(sqldatedeserializer, dateformat, s);
        }
    }

    public static class TimestampDeserializer extends DateBasedDeserializer {

        public volatile JsonDeserializer createContextual(DeserializationContext deserializationcontext, BeanProperty beanproperty) {
            return super.createContextual(deserializationcontext, beanproperty);
        }

        public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return deserialize(jsonparser, deserializationcontext);
        }

        public Timestamp deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            jsonparser = _parseDate(jsonparser, deserializationcontext);
            if (jsonparser == null)
                jsonparser = null;
            else
                jsonparser = new Timestamp(jsonparser.getTime());
            return jsonparser;
        }

        protected volatile DateBasedDeserializer withDateFormat(DateFormat dateformat, String s) {
            return withDateFormat(dateformat, s);
        }

        protected TimestampDeserializer withDateFormat(DateFormat dateformat, String s) {
            return new TimestampDeserializer(this, dateformat, s);
        }

        public TimestampDeserializer() {
            super(java/sql/Timestamp);
        }

        public TimestampDeserializer(TimestampDeserializer timestampdeserializer, DateFormat dateformat, String s) {
            super(timestampdeserializer, dateformat, s);
        }
    }


    private static final HashSet _classNames;

    public DateDeserializers() {
    }

    public static JsonDeserializer find(Class class1, String s) {
        if (!_classNames.contains(s)) goto _L2; else goto _L1
_L1:
        if (class1 != java/util/Calendar) goto _L4; else goto _L3
_L3:
        class1 = new CalendarDeserializer();
_L6:
        return class1;
_L4:
        if (class1 == java/util/Date) {
            class1 = DateDeserializer.instance;
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == java/sql/Date) {
            class1 = new SqlDateDeserializer();
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == java/sql/Timestamp) {
            class1 = new TimestampDeserializer();
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == java/util/GregorianCalendar) {
            class1 = new CalendarDeserializer(java/util/GregorianCalendar);
            continue; /* Loop/switch isn't completed */
        }
_L2:
        class1 = null;
        if (true) goto _L6; else goto _L5
_L5:
    }

    static  {
        int i = 0;
        _classNames = new HashSet();
        Class aclass[] = new Class[5];
        aclass[0] = java/util/Calendar;
        aclass[1] = java/util/GregorianCalendar;
        aclass[2] = java/sql/Date;
        aclass[3] = java/util/Date;
        aclass[4] = java/sql/Timestamp;
        for (int j = aclass.length; i < j; i++) {
            Class class1 = aclass[i];
            _classNames.add(class1.getName());
        }

    }
}
