// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.KeyDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.EnumResolver;
import java.io.Serializable;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            StdKeyDeserializer

public class StdKeyDeserializers
    implements KeyDeserializers, Serializable {

    private static final long serialVersionUID = 1L;

    public StdKeyDeserializers() {
    }

    public static KeyDeserializer constructDelegatingKeyDeserializer(DeserializationConfig deserializationconfig, JavaType javatype, JsonDeserializer jsondeserializer) {
        return new StdKeyDeserializer.DelegatingKD(javatype.getRawClass(), jsondeserializer);
    }

    public static KeyDeserializer constructEnumKeyDeserializer(EnumResolver enumresolver) {
        return new StdKeyDeserializer.EnumKD(enumresolver, null);
    }

    public static KeyDeserializer constructEnumKeyDeserializer(EnumResolver enumresolver, AnnotatedMethod annotatedmethod) {
        return new StdKeyDeserializer.EnumKD(enumresolver, annotatedmethod);
    }

    public static KeyDeserializer findStringBasedKeyDeserializer(DeserializationConfig deserializationconfig, JavaType javatype) {
        javatype = deserializationconfig.introspect(javatype);
        java.lang.reflect.Constructor constructor = javatype.findSingleArgConstructor(new Class[] {
            java/lang/String
        });
        if (constructor != null) {
            if (deserializationconfig.canOverrideAccessModifiers())
                ClassUtil.checkAndFixAccess(constructor, deserializationconfig.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
            deserializationconfig = new StdKeyDeserializer.StringCtorKeyDeserializer(constructor);
        } else {
            javatype = javatype.findFactoryMethod(new Class[] {
                java/lang/String
            });
            if (javatype != null) {
                if (deserializationconfig.canOverrideAccessModifiers())
                    ClassUtil.checkAndFixAccess(javatype, deserializationconfig.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
                deserializationconfig = new StdKeyDeserializer.StringFactoryKeyDeserializer(javatype);
            } else {
                deserializationconfig = null;
            }
        }
        return deserializationconfig;
    }

    public KeyDeserializer findKeyDeserializer(JavaType javatype, DeserializationConfig deserializationconfig, BeanDescription beandescription) {
        deserializationconfig = javatype.getRawClass();
        javatype = deserializationconfig;
        if (deserializationconfig.isPrimitive())
            javatype = ClassUtil.wrapperType(deserializationconfig);
        return StdKeyDeserializer.forType(javatype);
    }
}
