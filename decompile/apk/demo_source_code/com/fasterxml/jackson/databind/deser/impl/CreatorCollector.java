// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.impl;

import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.*;
import com.fasterxml.jackson.databind.deser.std.StdValueInstantiator;
import com.fasterxml.jackson.databind.introspect.*;
import com.fasterxml.jackson.databind.util.ClassUtil;
import java.io.Serializable;
import java.lang.reflect.Member;
import java.util.*;

public class CreatorCollector {
    protected static final class Vanilla extends ValueInstantiator
        implements Serializable {

        public static final int TYPE_COLLECTION = 1;
        public static final int TYPE_HASH_MAP = 3;
        public static final int TYPE_MAP = 2;
        private static final long serialVersionUID = 1L;
        private final int _type;

        public boolean canCreateUsingDefault() {
            return true;
        }

        public boolean canInstantiate() {
            return true;
        }

        public Object createUsingDefault(DeserializationContext deserializationcontext) {
            _type;
            JVM INSTR tableswitch 1 3: default 32
        //                       1 62
        //                       2 72
        //                       3 83;
               goto _L1 _L2 _L3 _L4
_L1:
            throw new IllegalStateException((new StringBuilder()).append("Unknown type ").append(_type).toString());
_L2:
            deserializationcontext = new ArrayList();
_L6:
            return deserializationcontext;
_L3:
            deserializationcontext = new LinkedHashMap();
            continue; /* Loop/switch isn't completed */
_L4:
            deserializationcontext = new HashMap();
            if (true) goto _L6; else goto _L5
_L5:
        }

        public String getValueTypeDesc() {
            _type;
            JVM INSTR tableswitch 1 3: default 32
        //                       1 40
        //                       2 49
        //                       3 58;
               goto _L1 _L2 _L3 _L4
_L1:
            String s = java/lang/Object.getName();
_L6:
            return s;
_L2:
            s = java/util/ArrayList.getName();
            continue; /* Loop/switch isn't completed */
_L3:
            s = java/util/LinkedHashMap.getName();
            continue; /* Loop/switch isn't completed */
_L4:
            s = java/util/HashMap.getName();
            if (true) goto _L6; else goto _L5
_L5:
        }

        public Vanilla(int i) {
            _type = i;
        }
    }


    protected static final int C_ARRAY_DELEGATE = 8;
    protected static final int C_BOOLEAN = 5;
    protected static final int C_DEFAULT = 0;
    protected static final int C_DELEGATE = 6;
    protected static final int C_DOUBLE = 4;
    protected static final int C_INT = 2;
    protected static final int C_LONG = 3;
    protected static final int C_PROPS = 7;
    protected static final int C_STRING = 1;
    protected static final String TYPE_DESCS[] = {
        "default", "String", "int", "long", "double", "boolean", "delegate", "property-based"
    };
    protected SettableBeanProperty _arrayDelegateArgs[];
    protected final BeanDescription _beanDesc;
    protected final boolean _canFixAccess;
    protected final AnnotatedWithParams _creators[] = new AnnotatedWithParams[9];
    protected SettableBeanProperty _delegateArgs[];
    protected int _explicitCreators;
    protected final boolean _forceAccess;
    protected boolean _hasNonDefaultCreator;
    protected AnnotatedParameter _incompleteParameter;
    protected SettableBeanProperty _propertyBasedArgs[];

    public CreatorCollector(BeanDescription beandescription, MapperConfig mapperconfig) {
        _explicitCreators = 0;
        _hasNonDefaultCreator = false;
        _beanDesc = beandescription;
        _canFixAccess = mapperconfig.canOverrideAccessModifiers();
        _forceAccess = mapperconfig.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS);
    }

    private JavaType _computeDelegateType(AnnotatedWithParams annotatedwithparams, SettableBeanProperty asettablebeanproperty[]) {
        if (_hasNonDefaultCreator && annotatedwithparams != null) goto _L2; else goto _L1
_L1:
        annotatedwithparams = null;
_L5:
        return annotatedwithparams;
_L2:
        int i;
        int j;
        if (asettablebeanproperty == null)
            break MISSING_BLOCK_LABEL_52;
        j = asettablebeanproperty.length;
        i = 0;
_L6:
        if (i >= j)
            break MISSING_BLOCK_LABEL_52;
        if (asettablebeanproperty[i] != null) goto _L4; else goto _L3
_L3:
        annotatedwithparams = annotatedwithparams.getParameterType(i);
          goto _L5
_L4:
        i++;
          goto _L6
        i = 0;
          goto _L3
    }

    private AnnotatedMember _fixAccess(AnnotatedMember annotatedmember) {
        if (annotatedmember != null && _canFixAccess)
            ClassUtil.checkAndFixAccess((Member)annotatedmember.getAnnotated(), _forceAccess);
        return annotatedmember;
    }

    public void addBooleanCreator(AnnotatedWithParams annotatedwithparams) {
        addBooleanCreator(annotatedwithparams, false);
    }

    public void addBooleanCreator(AnnotatedWithParams annotatedwithparams, boolean flag) {
        verifyNonDup(annotatedwithparams, 5, flag);
    }

    public void addDelegatingCreator(AnnotatedWithParams annotatedwithparams, boolean flag, SettableBeanProperty asettablebeanproperty[]) {
        if (annotatedwithparams.getParameterType(0).isCollectionLikeType()) {
            verifyNonDup(annotatedwithparams, 8, flag);
            _arrayDelegateArgs = asettablebeanproperty;
        } else {
            verifyNonDup(annotatedwithparams, 6, flag);
            _delegateArgs = asettablebeanproperty;
        }
    }

    public void addDelegatingCreator(AnnotatedWithParams annotatedwithparams, CreatorProperty acreatorproperty[]) {
        addDelegatingCreator(annotatedwithparams, false, ((SettableBeanProperty []) (acreatorproperty)));
    }

    public void addDoubleCreator(AnnotatedWithParams annotatedwithparams) {
        addBooleanCreator(annotatedwithparams, false);
    }

    public void addDoubleCreator(AnnotatedWithParams annotatedwithparams, boolean flag) {
        verifyNonDup(annotatedwithparams, 4, flag);
    }

    public void addIncompeteParameter(AnnotatedParameter annotatedparameter) {
        if (_incompleteParameter == null)
            _incompleteParameter = annotatedparameter;
    }

    public void addIntCreator(AnnotatedWithParams annotatedwithparams) {
        addBooleanCreator(annotatedwithparams, false);
    }

    public void addIntCreator(AnnotatedWithParams annotatedwithparams, boolean flag) {
        verifyNonDup(annotatedwithparams, 2, flag);
    }

    public void addLongCreator(AnnotatedWithParams annotatedwithparams) {
        addBooleanCreator(annotatedwithparams, false);
    }

    public void addLongCreator(AnnotatedWithParams annotatedwithparams, boolean flag) {
        verifyNonDup(annotatedwithparams, 3, flag);
    }

    public void addPropertyCreator(AnnotatedWithParams annotatedwithparams, boolean flag, SettableBeanProperty asettablebeanproperty[]) {
        int i;
        int j;
        HashMap hashmap;
        verifyNonDup(annotatedwithparams, 7, flag);
        if (asettablebeanproperty.length <= 1)
            break MISSING_BLOCK_LABEL_142;
        hashmap = new HashMap();
        j = asettablebeanproperty.length;
        i = 0;
_L2:
        String s;
        if (i >= j)
            break MISSING_BLOCK_LABEL_142;
        s = asettablebeanproperty[i].getName();
        if (s.length() != 0 || asettablebeanproperty[i].getInjectableValueId() == null)
            break; /* Loop/switch isn't completed */
_L4:
        i++;
        if (true) goto _L2; else goto _L1
_L1:
        if ((annotatedwithparams = (Integer)hashmap.put(s, Integer.valueOf(i))) == null) goto _L4; else goto _L3
_L3:
        throw new IllegalArgumentException((new StringBuilder()).append("Duplicate creator property \"").append(s).append("\" (index ").append(annotatedwithparams).append(" vs ").append(i).append(")").toString());
        _propertyBasedArgs = asettablebeanproperty;
        return;
    }

    public void addPropertyCreator(AnnotatedWithParams annotatedwithparams, CreatorProperty acreatorproperty[]) {
        addPropertyCreator(annotatedwithparams, false, ((SettableBeanProperty []) (acreatorproperty)));
    }

    public void addStringCreator(AnnotatedWithParams annotatedwithparams) {
        addStringCreator(annotatedwithparams, false);
    }

    public void addStringCreator(AnnotatedWithParams annotatedwithparams, boolean flag) {
        verifyNonDup(annotatedwithparams, 1, flag);
    }

    public ValueInstantiator constructValueInstantiator(DeserializationConfig deserializationconfig) {
        JavaType javatype;
        JavaType javatype1;
        JavaType javatype2;
        javatype = _computeDelegateType(_creators[6], _delegateArgs);
        javatype1 = _computeDelegateType(_creators[8], _arrayDelegateArgs);
        javatype2 = _beanDesc.getType();
        if (_hasNonDefaultCreator) goto _L2; else goto _L1
_L1:
        Class class1 = javatype2.getRawClass();
        if (class1 != java/util/Collection && class1 != java/util/List && class1 != java/util/ArrayList) goto _L4; else goto _L3
_L3:
        deserializationconfig = new Vanilla(1);
_L6:
        return deserializationconfig;
_L4:
        if (class1 == java/util/Map || class1 == java/util/LinkedHashMap) {
            deserializationconfig = new Vanilla(2);
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == java/util/HashMap) {
            deserializationconfig = new Vanilla(3);
            continue; /* Loop/switch isn't completed */
        }
_L2:
        deserializationconfig = new StdValueInstantiator(deserializationconfig, javatype2);
        deserializationconfig.configureFromObjectSettings(_creators[0], _creators[6], javatype, _delegateArgs, _creators[7], _propertyBasedArgs);
        deserializationconfig.configureFromArraySettings(_creators[8], javatype1, _arrayDelegateArgs);
        deserializationconfig.configureFromStringCreator(_creators[1]);
        deserializationconfig.configureFromIntCreator(_creators[2]);
        deserializationconfig.configureFromLongCreator(_creators[3]);
        deserializationconfig.configureFromDoubleCreator(_creators[4]);
        deserializationconfig.configureFromBooleanCreator(_creators[5]);
        deserializationconfig.configureIncompleteParameter(_incompleteParameter);
        if (true) goto _L6; else goto _L5
_L5:
    }

    public boolean hasDefaultCreator() {
        boolean flag = false;
        if (_creators[0] != null)
            flag = true;
        return flag;
    }

    public boolean hasDelegatingCreator() {
        boolean flag;
        if (_creators[6] != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean hasPropertyBasedCreator() {
        boolean flag;
        if (_creators[7] != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public void setDefaultCreator(AnnotatedWithParams annotatedwithparams) {
        _creators[0] = (AnnotatedWithParams)_fixAccess(annotatedwithparams);
    }

    protected void verifyNonDup(AnnotatedWithParams annotatedwithparams, int i, boolean flag) {
        boolean flag1;
        int j;
        AnnotatedWithParams annotatedwithparams1;
        flag1 = true;
        j = 1 << i;
        _hasNonDefaultCreator = true;
        annotatedwithparams1 = _creators[i];
        if (annotatedwithparams1 == null) goto _L2; else goto _L1
_L1:
        if ((_explicitCreators & j) == 0) goto _L4; else goto _L3
_L3:
        if (flag) goto _L6; else goto _L5
_L5:
        return;
_L4:
        if (flag)
            flag1 = false;
_L6:
        if (flag1 && annotatedwithparams1.getClass() == annotatedwithparams.getClass()) {
            Class class2 = annotatedwithparams1.getRawParameterType(0);
            Class class1 = annotatedwithparams.getRawParameterType(0);
            if (class2 == class1)
                throw new IllegalArgumentException((new StringBuilder()).append("Conflicting ").append(TYPE_DESCS[i]).append(" creators: already had explicitly marked ").append(annotatedwithparams1).append(", encountered ").append(annotatedwithparams).toString());
            if (class1.isAssignableFrom(class2))
                continue; /* Loop/switch isn't completed */
        }
_L2:
        if (flag)
            _explicitCreators = _explicitCreators | j;
        _creators[i] = (AnnotatedWithParams)_fixAccess(annotatedwithparams);
        if (true) goto _L5; else goto _L7
_L7:
    }

}
