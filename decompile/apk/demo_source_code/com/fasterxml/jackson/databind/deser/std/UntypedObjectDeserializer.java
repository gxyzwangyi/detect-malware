// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.ContextualDeserializer;
import com.fasterxml.jackson.databind.deser.ResolvableDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.ObjectBuffer;
import java.util.*;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            StdDeserializer

public class UntypedObjectDeserializer extends StdDeserializer
    implements ContextualDeserializer, ResolvableDeserializer {
    public static class Vanilla extends StdDeserializer {

        private static final long serialVersionUID = 1L;
        public static final Vanilla std = new Vanilla();

        public Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            jsonparser.getCurrentTokenId();
            JVM INSTR tableswitch 1 12: default 68
        //                       1 75
        //                       2 267
        //                       3 106
        //                       4 68
        //                       5 96
        //                       6 183
        //                       7 191
        //                       8 219
        //                       9 248
        //                       10 255
        //                       11 262
        //                       12 175;
               goto _L1 _L2 _L3 _L4 _L1 _L5 _L6 _L7 _L8 _L9 _L10 _L11 _L12
_L1:
            throw deserializationcontext.mappingException(java/lang/Object);
_L2:
            if (jsonparser.nextToken() != JsonToken.END_OBJECT) goto _L5; else goto _L13
_L13:
            jsonparser = new LinkedHashMap(2);
_L15:
            return jsonparser;
_L5:
            jsonparser = ((JsonParser) (mapObject(jsonparser, deserializationcontext)));
            continue; /* Loop/switch isn't completed */
_L4:
            if (jsonparser.nextToken() == JsonToken.END_ARRAY) {
                if (deserializationcontext.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY))
                    jsonparser = ((JsonParser) (UntypedObjectDeserializer.NO_OBJECTS));
                else
                    jsonparser = new ArrayList(2);
            } else
            if (deserializationcontext.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY))
                jsonparser = ((JsonParser) (mapArrayToArray(jsonparser, deserializationcontext)));
            else
                jsonparser = ((JsonParser) (mapArray(jsonparser, deserializationcontext)));
            continue; /* Loop/switch isn't completed */
_L12:
            jsonparser = ((JsonParser) (jsonparser.getEmbeddedObject()));
            continue; /* Loop/switch isn't completed */
_L6:
            jsonparser = jsonparser.getText();
            continue; /* Loop/switch isn't completed */
_L7:
            if (deserializationcontext.hasSomeOfFeatures(F_MASK_INT_COERCIONS))
                jsonparser = ((JsonParser) (_coerceIntegral(jsonparser, deserializationcontext)));
            else
                jsonparser = jsonparser.getNumberValue();
            continue; /* Loop/switch isn't completed */
_L8:
            if (deserializationcontext.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS))
                jsonparser = jsonparser.getDecimalValue();
            else
                jsonparser = Double.valueOf(jsonparser.getDoubleValue());
            continue; /* Loop/switch isn't completed */
_L9:
            jsonparser = Boolean.TRUE;
            continue; /* Loop/switch isn't completed */
_L10:
            jsonparser = Boolean.FALSE;
            continue; /* Loop/switch isn't completed */
_L11:
            jsonparser = null;
            continue; /* Loop/switch isn't completed */
_L3:
            jsonparser = new LinkedHashMap(2);
            if (true) goto _L15; else goto _L14
_L14:
        }

        public Object deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
            jsonparser.getCurrentTokenId();
            JVM INSTR tableswitch 1 12: default 68
        //                       1 75
        //                       2 68
        //                       3 75
        //                       4 68
        //                       5 75
        //                       6 84
        //                       7 92
        //                       8 118
        //                       9 147
        //                       10 154
        //                       11 169
        //                       12 161;
               goto _L1 _L2 _L1 _L2 _L1 _L2 _L3 _L4 _L5 _L6 _L7 _L8 _L9
_L1:
            throw deserializationcontext.mappingException(java/lang/Object);
_L2:
            jsonparser = ((JsonParser) (typedeserializer.deserializeTypedFromAny(jsonparser, deserializationcontext)));
_L11:
            return jsonparser;
_L3:
            jsonparser = jsonparser.getText();
            continue; /* Loop/switch isn't completed */
_L4:
            if (deserializationcontext.isEnabled(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS))
                jsonparser = jsonparser.getBigIntegerValue();
            else
                jsonparser = jsonparser.getNumberValue();
            continue; /* Loop/switch isn't completed */
_L5:
            if (deserializationcontext.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS))
                jsonparser = jsonparser.getDecimalValue();
            else
                jsonparser = Double.valueOf(jsonparser.getDoubleValue());
            continue; /* Loop/switch isn't completed */
_L6:
            jsonparser = Boolean.TRUE;
            continue; /* Loop/switch isn't completed */
_L7:
            jsonparser = Boolean.FALSE;
            continue; /* Loop/switch isn't completed */
_L9:
            jsonparser = ((JsonParser) (jsonparser.getEmbeddedObject()));
            continue; /* Loop/switch isn't completed */
_L8:
            jsonparser = null;
            if (true) goto _L11; else goto _L10
_L10:
        }

        protected Object mapArray(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            int j = 2;
            Object obj = deserialize(jsonparser, deserializationcontext);
            if (jsonparser.nextToken() == JsonToken.END_ARRAY) {
                jsonparser = new ArrayList(2);
                jsonparser.add(obj);
            } else {
                Object obj1 = deserialize(jsonparser, deserializationcontext);
                if (jsonparser.nextToken() == JsonToken.END_ARRAY) {
                    jsonparser = new ArrayList(2);
                    jsonparser.add(obj);
                    jsonparser.add(obj1);
                } else {
                    ObjectBuffer objectbuffer = deserializationcontext.leaseObjectBuffer();
                    Object aobj1[] = objectbuffer.resetAndStart();
                    aobj1[0] = obj;
                    aobj1[1] = obj1;
                    int i = 2;
                    do {
                        Object obj2 = deserialize(jsonparser, deserializationcontext);
                        int k = j + 1;
                        int l;
                        Object aobj[];
                        if (i >= aobj1.length) {
                            aobj = objectbuffer.appendCompletedChunk(aobj1);
                            i = 0;
                        } else {
                            aobj = aobj1;
                        }
                        l = i + 1;
                        aobj[i] = obj2;
                        j = k;
                        i = l;
                        aobj1 = aobj;
                    } while (jsonparser.nextToken() != JsonToken.END_ARRAY);
                    jsonparser = new ArrayList(k);
                    objectbuffer.completeAndClearBuffer(aobj, l, jsonparser);
                }
            }
            return jsonparser;
        }

        protected Object[] mapArrayToArray(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            ObjectBuffer objectbuffer = deserializationcontext.leaseObjectBuffer();
            Object aobj1[] = objectbuffer.resetAndStart();
            int i = 0;
            do {
                Object obj = deserialize(jsonparser, deserializationcontext);
                int j;
                Object aobj[];
                if (i >= aobj1.length) {
                    aobj = objectbuffer.appendCompletedChunk(aobj1);
                    i = 0;
                } else {
                    aobj = aobj1;
                }
                j = i + 1;
                aobj[i] = obj;
                i = j;
                aobj1 = aobj;
            } while (jsonparser.nextToken() != JsonToken.END_ARRAY);
            return objectbuffer.completeAndClearBuffer(aobj, j);
        }

        protected Object mapObject(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            String s1 = jsonparser.getText();
            jsonparser.nextToken();
            Object obj = deserialize(jsonparser, deserializationcontext);
            String s2 = jsonparser.nextFieldName();
            if (s2 == null) {
                jsonparser = new LinkedHashMap(2);
                jsonparser.put(s1, obj);
            } else {
                jsonparser.nextToken();
                Object obj1 = deserialize(jsonparser, deserializationcontext);
                String s = jsonparser.nextFieldName();
                if (s == null) {
                    jsonparser = new LinkedHashMap(4);
                    jsonparser.put(s1, obj);
                    jsonparser.put(s2, obj1);
                } else {
                    LinkedHashMap linkedhashmap = new LinkedHashMap();
                    linkedhashmap.put(s1, obj);
                    linkedhashmap.put(s2, obj1);
                    do {
                        jsonparser.nextToken();
                        linkedhashmap.put(s, deserialize(jsonparser, deserializationcontext));
                        obj = jsonparser.nextFieldName();
                        s = ((String) (obj));
                    } while (obj != null);
                    jsonparser = linkedhashmap;
                }
            }
            return jsonparser;
        }


        public Vanilla() {
            super(java/lang/Object);
        }
    }


    protected static final Object NO_OBJECTS[] = new Object[0];
    public static final UntypedObjectDeserializer instance = new UntypedObjectDeserializer(null, null);
    private static final long serialVersionUID = 1L;
    protected JsonDeserializer _listDeserializer;
    protected JavaType _listType;
    protected JsonDeserializer _mapDeserializer;
    protected JavaType _mapType;
    protected JsonDeserializer _numberDeserializer;
    protected JsonDeserializer _stringDeserializer;

    public UntypedObjectDeserializer() {
        this(null, null);
    }

    public UntypedObjectDeserializer(JavaType javatype, JavaType javatype1) {
        super(java/lang/Object);
        _listType = javatype;
        _mapType = javatype1;
    }

    public UntypedObjectDeserializer(UntypedObjectDeserializer untypedobjectdeserializer, JsonDeserializer jsondeserializer, JsonDeserializer jsondeserializer1, JsonDeserializer jsondeserializer2, JsonDeserializer jsondeserializer3) {
        super(java/lang/Object);
        _mapDeserializer = jsondeserializer;
        _listDeserializer = jsondeserializer1;
        _stringDeserializer = jsondeserializer2;
        _numberDeserializer = jsondeserializer3;
        _listType = untypedobjectdeserializer._listType;
        _mapType = untypedobjectdeserializer._mapType;
    }

    protected JsonDeserializer _clearIfStdImpl(JsonDeserializer jsondeserializer) {
        JsonDeserializer jsondeserializer1 = jsondeserializer;
        if (ClassUtil.isJacksonStdImpl(jsondeserializer))
            jsondeserializer1 = null;
        return jsondeserializer1;
    }

    protected JsonDeserializer _findCustomDeser(DeserializationContext deserializationcontext, JavaType javatype) {
        return deserializationcontext.findNonContextualValueDeserializer(javatype);
    }

    protected JsonDeserializer _withResolved(JsonDeserializer jsondeserializer, JsonDeserializer jsondeserializer1, JsonDeserializer jsondeserializer2, JsonDeserializer jsondeserializer3) {
        return new UntypedObjectDeserializer(this, jsondeserializer, jsondeserializer1, jsondeserializer2, jsondeserializer3);
    }

    public JsonDeserializer createContextual(DeserializationContext deserializationcontext, BeanProperty beanproperty) {
        deserializationcontext = this;
        if (_stringDeserializer == null) {
            deserializationcontext = this;
            if (_numberDeserializer == null) {
                deserializationcontext = this;
                if (_mapDeserializer == null) {
                    deserializationcontext = this;
                    if (_listDeserializer == null) {
                        deserializationcontext = this;
                        if (getClass() == com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer)
                            deserializationcontext = Vanilla.std;
                    }
                }
            }
        }
        return deserializationcontext;
    }

    public Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        jsonparser.getCurrentTokenId();
        JVM INSTR tableswitch 1 12: default 68
    //                   1 75
    //                   2 75
    //                   3 104
    //                   4 68
    //                   5 75
    //                   6 162
    //                   7 190
    //                   8 238
    //                   9 287
    //                   10 294
    //                   11 301
    //                   12 154;
           goto _L1 _L2 _L2 _L3 _L1 _L2 _L4 _L5 _L6 _L7 _L8 _L9 _L10
_L1:
        throw deserializationcontext.mappingException(java/lang/Object);
_L2:
        if (_mapDeserializer != null)
            jsonparser = ((JsonParser) (_mapDeserializer.deserialize(jsonparser, deserializationcontext)));
        else
            jsonparser = ((JsonParser) (mapObject(jsonparser, deserializationcontext)));
_L12:
        return jsonparser;
_L3:
        if (deserializationcontext.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY))
            jsonparser = ((JsonParser) (mapArrayToArray(jsonparser, deserializationcontext)));
        else
        if (_listDeserializer != null)
            jsonparser = ((JsonParser) (_listDeserializer.deserialize(jsonparser, deserializationcontext)));
        else
            jsonparser = ((JsonParser) (mapArray(jsonparser, deserializationcontext)));
        continue; /* Loop/switch isn't completed */
_L10:
        jsonparser = ((JsonParser) (jsonparser.getEmbeddedObject()));
        continue; /* Loop/switch isn't completed */
_L4:
        if (_stringDeserializer != null)
            jsonparser = ((JsonParser) (_stringDeserializer.deserialize(jsonparser, deserializationcontext)));
        else
            jsonparser = jsonparser.getText();
        continue; /* Loop/switch isn't completed */
_L5:
        if (_numberDeserializer != null)
            jsonparser = ((JsonParser) (_numberDeserializer.deserialize(jsonparser, deserializationcontext)));
        else
        if (deserializationcontext.hasSomeOfFeatures(F_MASK_INT_COERCIONS))
            jsonparser = ((JsonParser) (_coerceIntegral(jsonparser, deserializationcontext)));
        else
            jsonparser = jsonparser.getNumberValue();
        continue; /* Loop/switch isn't completed */
_L6:
        if (_numberDeserializer != null)
            jsonparser = ((JsonParser) (_numberDeserializer.deserialize(jsonparser, deserializationcontext)));
        else
        if (deserializationcontext.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS))
            jsonparser = jsonparser.getDecimalValue();
        else
            jsonparser = Double.valueOf(jsonparser.getDoubleValue());
        continue; /* Loop/switch isn't completed */
_L7:
        jsonparser = Boolean.TRUE;
        continue; /* Loop/switch isn't completed */
_L8:
        jsonparser = Boolean.FALSE;
        continue; /* Loop/switch isn't completed */
_L9:
        jsonparser = null;
        if (true) goto _L12; else goto _L11
_L11:
    }

    public Object deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
        jsonparser.getCurrentTokenId();
        JVM INSTR tableswitch 1 12: default 68
    //                   1 75
    //                   2 68
    //                   3 75
    //                   4 68
    //                   5 75
    //                   6 92
    //                   7 120
    //                   8 168
    //                   9 217
    //                   10 224
    //                   11 231
    //                   12 84;
           goto _L1 _L2 _L1 _L2 _L1 _L2 _L3 _L4 _L5 _L6 _L7 _L8 _L9
_L1:
        throw deserializationcontext.mappingException(java/lang/Object);
_L2:
        jsonparser = ((JsonParser) (typedeserializer.deserializeTypedFromAny(jsonparser, deserializationcontext)));
_L11:
        return jsonparser;
_L9:
        jsonparser = ((JsonParser) (jsonparser.getEmbeddedObject()));
        continue; /* Loop/switch isn't completed */
_L3:
        if (_stringDeserializer != null)
            jsonparser = ((JsonParser) (_stringDeserializer.deserialize(jsonparser, deserializationcontext)));
        else
            jsonparser = jsonparser.getText();
        continue; /* Loop/switch isn't completed */
_L4:
        if (_numberDeserializer != null)
            jsonparser = ((JsonParser) (_numberDeserializer.deserialize(jsonparser, deserializationcontext)));
        else
        if (deserializationcontext.hasSomeOfFeatures(F_MASK_INT_COERCIONS))
            jsonparser = ((JsonParser) (_coerceIntegral(jsonparser, deserializationcontext)));
        else
            jsonparser = jsonparser.getNumberValue();
        continue; /* Loop/switch isn't completed */
_L5:
        if (_numberDeserializer != null)
            jsonparser = ((JsonParser) (_numberDeserializer.deserialize(jsonparser, deserializationcontext)));
        else
        if (deserializationcontext.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS))
            jsonparser = jsonparser.getDecimalValue();
        else
            jsonparser = Double.valueOf(jsonparser.getDoubleValue());
        continue; /* Loop/switch isn't completed */
_L6:
        jsonparser = Boolean.TRUE;
        continue; /* Loop/switch isn't completed */
_L7:
        jsonparser = Boolean.FALSE;
        continue; /* Loop/switch isn't completed */
_L8:
        jsonparser = null;
        if (true) goto _L11; else goto _L10
_L10:
    }

    public boolean isCachable() {
        return true;
    }

    protected Object mapArray(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        int j = 2;
        if (jsonparser.nextToken() == JsonToken.END_ARRAY) {
            jsonparser = new ArrayList(2);
        } else {
            Object obj = deserialize(jsonparser, deserializationcontext);
            if (jsonparser.nextToken() == JsonToken.END_ARRAY) {
                jsonparser = new ArrayList(2);
                jsonparser.add(obj);
            } else {
                Object obj1 = deserialize(jsonparser, deserializationcontext);
                if (jsonparser.nextToken() == JsonToken.END_ARRAY) {
                    jsonparser = new ArrayList(2);
                    jsonparser.add(obj);
                    jsonparser.add(obj1);
                } else {
                    ObjectBuffer objectbuffer = deserializationcontext.leaseObjectBuffer();
                    Object aobj1[] = objectbuffer.resetAndStart();
                    aobj1[0] = obj;
                    aobj1[1] = obj1;
                    int i = 2;
                    do {
                        Object obj2 = deserialize(jsonparser, deserializationcontext);
                        int k = j + 1;
                        int l;
                        Object aobj[];
                        if (i >= aobj1.length) {
                            aobj = objectbuffer.appendCompletedChunk(aobj1);
                            i = 0;
                        } else {
                            aobj = aobj1;
                        }
                        l = i + 1;
                        aobj[i] = obj2;
                        j = k;
                        i = l;
                        aobj1 = aobj;
                    } while (jsonparser.nextToken() != JsonToken.END_ARRAY);
                    jsonparser = new ArrayList(k);
                    objectbuffer.completeAndClearBuffer(aobj, l, jsonparser);
                }
            }
        }
        return jsonparser;
    }

    protected Object[] mapArrayToArray(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (jsonparser.nextToken() == JsonToken.END_ARRAY) {
            jsonparser = ((JsonParser) (NO_OBJECTS));
        } else {
            ObjectBuffer objectbuffer = deserializationcontext.leaseObjectBuffer();
            Object aobj1[] = objectbuffer.resetAndStart();
            int i = 0;
            do {
                Object obj = deserialize(jsonparser, deserializationcontext);
                int j;
                Object aobj[];
                if (i >= aobj1.length) {
                    aobj = objectbuffer.appendCompletedChunk(aobj1);
                    i = 0;
                } else {
                    aobj = aobj1;
                }
                j = i + 1;
                aobj[i] = obj;
                i = j;
                aobj1 = aobj;
            } while (jsonparser.nextToken() != JsonToken.END_ARRAY);
            jsonparser = ((JsonParser) (objectbuffer.completeAndClearBuffer(aobj, j)));
        }
        return jsonparser;
    }

    protected Object mapObject(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        Object obj = jsonparser.getCurrentToken();
        if (obj == JsonToken.START_OBJECT)
            obj = jsonparser.nextFieldName();
        else
        if (obj == JsonToken.FIELD_NAME) {
            obj = jsonparser.getCurrentName();
        } else {
            if (obj != JsonToken.END_OBJECT)
                throw deserializationcontext.mappingException(handledType(), jsonparser.getCurrentToken());
            obj = null;
        }
        if (obj == null) {
            jsonparser = new LinkedHashMap(2);
        } else {
            jsonparser.nextToken();
            Object obj1 = deserialize(jsonparser, deserializationcontext);
            String s1 = jsonparser.nextFieldName();
            if (s1 == null) {
                jsonparser = new LinkedHashMap(2);
                jsonparser.put(obj, obj1);
            } else {
                jsonparser.nextToken();
                Object obj2 = deserialize(jsonparser, deserializationcontext);
                String s = jsonparser.nextFieldName();
                if (s == null) {
                    jsonparser = new LinkedHashMap(4);
                    jsonparser.put(obj, obj1);
                    jsonparser.put(s1, obj2);
                } else {
                    LinkedHashMap linkedhashmap = new LinkedHashMap();
                    linkedhashmap.put(obj, obj1);
                    linkedhashmap.put(s1, obj2);
                    obj = s;
                    do {
                        jsonparser.nextToken();
                        linkedhashmap.put(obj, deserialize(jsonparser, deserializationcontext));
                        s = jsonparser.nextFieldName();
                        obj = s;
                    } while (s != null);
                    jsonparser = linkedhashmap;
                }
            }
        }
        return jsonparser;
    }

    public void resolve(DeserializationContext deserializationcontext) {
        JavaType javatype1 = deserializationcontext.constructType(java/lang/Object);
        JavaType javatype = deserializationcontext.constructType(java/lang/String);
        TypeFactory typefactory = deserializationcontext.getTypeFactory();
        if (_listType == null)
            _listDeserializer = _clearIfStdImpl(_findCustomDeser(deserializationcontext, typefactory.constructCollectionType(java/util/List, javatype1)));
        else
            _listDeserializer = _findCustomDeser(deserializationcontext, _listType);
        if (_mapType == null)
            _mapDeserializer = _clearIfStdImpl(_findCustomDeser(deserializationcontext, typefactory.constructMapType(java/util/Map, javatype, javatype1)));
        else
            _mapDeserializer = _findCustomDeser(deserializationcontext, _mapType);
        _stringDeserializer = _clearIfStdImpl(_findCustomDeser(deserializationcontext, javatype));
        _numberDeserializer = _clearIfStdImpl(_findCustomDeser(deserializationcontext, typefactory.constructType(java/lang/Number)));
        javatype = TypeFactory.unknownType();
        _mapDeserializer = deserializationcontext.handleSecondaryContextualization(_mapDeserializer, null, javatype);
        _listDeserializer = deserializationcontext.handleSecondaryContextualization(_listDeserializer, null, javatype);
        _stringDeserializer = deserializationcontext.handleSecondaryContextualization(_stringDeserializer, null, javatype);
        _numberDeserializer = deserializationcontext.handleSecondaryContextualization(_numberDeserializer, null, javatype);
    }

}
