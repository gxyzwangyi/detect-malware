// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.ContextualDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import java.util.concurrent.atomic.AtomicReference;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            StdDeserializer

public class AtomicReferenceDeserializer extends StdDeserializer
    implements ContextualDeserializer {

    private static final long serialVersionUID = 1L;
    protected final JavaType _referencedType;
    protected final JsonDeserializer _valueDeserializer;
    protected final TypeDeserializer _valueTypeDeserializer;

    public AtomicReferenceDeserializer(JavaType javatype) {
        this(javatype, null, null);
    }

    public AtomicReferenceDeserializer(JavaType javatype, TypeDeserializer typedeserializer, JsonDeserializer jsondeserializer) {
        super(java/util/concurrent/atomic/AtomicReference);
        _referencedType = javatype;
        _valueDeserializer = jsondeserializer;
        _valueTypeDeserializer = typedeserializer;
    }

    public JsonDeserializer createContextual(DeserializationContext deserializationcontext, BeanProperty beanproperty) {
        Object obj = _valueDeserializer;
        TypeDeserializer typedeserializer = _valueTypeDeserializer;
        if (obj == null)
            deserializationcontext = deserializationcontext.findContextualValueDeserializer(_referencedType, beanproperty);
        else
            deserializationcontext = deserializationcontext.handleSecondaryContextualization(((JsonDeserializer) (obj)), beanproperty, _referencedType);
        obj = typedeserializer;
        if (typedeserializer != null)
            obj = typedeserializer.forProperty(beanproperty);
        return withResolved(((TypeDeserializer) (obj)), deserializationcontext);
    }

    public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        return deserialize(jsonparser, deserializationcontext);
    }

    public AtomicReference deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (_valueTypeDeserializer == null)
            jsonparser = ((JsonParser) (_valueDeserializer.deserialize(jsonparser, deserializationcontext)));
        else
            jsonparser = ((JsonParser) (_valueDeserializer.deserializeWithType(jsonparser, deserializationcontext, _valueTypeDeserializer)));
        return new AtomicReference(jsonparser);
    }

    public Object deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
        typedeserializer = jsonparser.getCurrentToken();
        if (typedeserializer == JsonToken.VALUE_NULL)
            jsonparser = getNullValue(deserializationcontext);
        else
        if (typedeserializer != null && typedeserializer.isScalarValue())
            jsonparser = deserialize(jsonparser, deserializationcontext);
        else
        if (_valueTypeDeserializer == null)
            jsonparser = deserialize(jsonparser, deserializationcontext);
        else
            jsonparser = new AtomicReference(_valueTypeDeserializer.deserializeTypedFromAny(jsonparser, deserializationcontext));
        return jsonparser;
    }

    public volatile Object getNullValue() {
        return getNullValue();
    }

    public volatile Object getNullValue(DeserializationContext deserializationcontext) {
        return getNullValue(deserializationcontext);
    }

    public AtomicReference getNullValue() {
        return new AtomicReference();
    }

    public AtomicReference getNullValue(DeserializationContext deserializationcontext) {
        return new AtomicReference();
    }

    public AtomicReferenceDeserializer withResolved(TypeDeserializer typedeserializer, JsonDeserializer jsondeserializer) {
        if (jsondeserializer == _valueDeserializer && typedeserializer == _valueTypeDeserializer)
            typedeserializer = this;
        else
            typedeserializer = new AtomicReferenceDeserializer(_referencedType, typedeserializer, jsondeserializer);
        return typedeserializer;
    }
}
