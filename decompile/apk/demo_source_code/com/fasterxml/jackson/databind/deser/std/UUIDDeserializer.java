// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.Base64Variants;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import java.util.Arrays;
import java.util.UUID;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            FromStringDeserializer

public class UUIDDeserializer extends FromStringDeserializer {

    static final int HEX_DIGITS[];
    private static final long serialVersionUID = 1L;

    public UUIDDeserializer() {
        super(java/util/UUID);
    }

    static int _badChar(String s, int i, DeserializationContext deserializationcontext, char c) {
        String s1 = String.format("Non-hex character '%c' (value 0x%s), not valid for UUID String: input String '%s'", new Object[] {
            Character.valueOf(c), Integer.toHexString(c), s
        });
        throw InvalidFormatException.from(deserializationcontext.getParser(), s1, s, java/util/UUID);
    }

    private void _badFormat(String s, DeserializationContext deserializationcontext) {
        throw InvalidFormatException.from(deserializationcontext.getParser(), String.format("UUID has to be represented by standard 36-char representation: input String '%s'", new Object[] {
            s
        }), s, handledType());
    }

    private UUID _fromBytes(byte abyte0[], DeserializationContext deserializationcontext) {
        if (abyte0.length != 16)
            throw InvalidFormatException.from(deserializationcontext.getParser(), (new StringBuilder()).append("Can only construct UUIDs from byte[16]; got ").append(abyte0.length).append(" bytes").toString(), abyte0, handledType());
        else
            return new UUID(_long(abyte0, 0), _long(abyte0, 8));
    }

    private static int _int(byte abyte0[], int i) {
        return abyte0[i] << 24 | (abyte0[i + 1] & 0xff) << 16 | (abyte0[i + 2] & 0xff) << 8 | abyte0[i + 3] & 0xff;
    }

    private static long _long(byte abyte0[], int i) {
        return (long)_int(abyte0, i) << 32 | ((long)_int(abyte0, i + 4) << 32) >>> 32;
    }

    static int byteFromChars(String s, int i, DeserializationContext deserializationcontext) {
        char c;
        char c1;
        c = s.charAt(i);
        c1 = s.charAt(i + 1);
        if (c > '\177' || c1 > '\177') goto _L2; else goto _L1
_L1:
        int j = HEX_DIGITS[c] << 4 | HEX_DIGITS[c1];
        if (j < 0) goto _L2; else goto _L3
_L3:
        i = j;
_L5:
        return i;
_L2:
        if (c > '\177' || HEX_DIGITS[c] < 0)
            i = _badChar(s, i, deserializationcontext, c);
        else
            i = _badChar(s, i + 1, deserializationcontext, c1);
        if (true) goto _L5; else goto _L4
_L4:
    }

    static int intFromChars(String s, int i, DeserializationContext deserializationcontext) {
        return (byteFromChars(s, i, deserializationcontext) << 24) + (byteFromChars(s, i + 2, deserializationcontext) << 16) + (byteFromChars(s, i + 4, deserializationcontext) << 8) + byteFromChars(s, i + 6, deserializationcontext);
    }

    static int shortFromChars(String s, int i, DeserializationContext deserializationcontext) {
        return (byteFromChars(s, i, deserializationcontext) << 8) + byteFromChars(s, i + 2, deserializationcontext);
    }

    protected volatile Object _deserialize(String s, DeserializationContext deserializationcontext) {
        return _deserialize(s, deserializationcontext);
    }

    protected UUID _deserialize(String s, DeserializationContext deserializationcontext) {
        if (s.length() == 36) goto _L2; else goto _L1
_L1:
        if (s.length() != 24) goto _L4; else goto _L3
_L3:
        s = _fromBytes(Base64Variants.getDefaultVariant().decode(s), deserializationcontext);
_L6:
        return s;
_L4:
        _badFormat(s, deserializationcontext);
_L2:
        if (s.charAt(8) != '-' || s.charAt(13) != '-' || s.charAt(18) != '-' || s.charAt(23) != '-')
            _badFormat(s, deserializationcontext);
        long l1 = intFromChars(s, 0, deserializationcontext);
        long l2 = shortFromChars(s, 9, deserializationcontext);
        long l = shortFromChars(s, 14, deserializationcontext);
        long l3 = shortFromChars(s, 19, deserializationcontext) << 16 | shortFromChars(s, 24, deserializationcontext);
        s = new UUID((l2 << 16 | l) + (l1 << 32), ((long)intFromChars(s, 28, deserializationcontext) << 32) >>> 32 | l3 << 32);
        if (true) goto _L6; else goto _L5
_L5:
    }

    protected volatile Object _deserializeEmbedded(Object obj, DeserializationContext deserializationcontext) {
        return _deserializeEmbedded(obj, deserializationcontext);
    }

    protected UUID _deserializeEmbedded(Object obj, DeserializationContext deserializationcontext) {
        if (obj instanceof byte[]) {
            obj = _fromBytes((byte[])(byte[])obj, deserializationcontext);
        } else {
            super._deserializeEmbedded(obj, deserializationcontext);
            obj = null;
        }
        return ((UUID) (obj));
    }

    static  {
        boolean flag = false;
        HEX_DIGITS = new int[127];
        Arrays.fill(HEX_DIGITS, -1);
        int i = 0;
        int j;
        do {
            j = ((flag) ? 1 : 0);
            if (i >= 10)
                break;
            HEX_DIGITS[i + 48] = i;
            i++;
        } while (true);
        for (; j < 6; j++) {
            HEX_DIGITS[j + 97] = j + 10;
            HEX_DIGITS[j + 65] = j + 10;
        }

    }
}
