// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.impl;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.introspect.*;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.util.Annotations;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;

public final class FieldProperty extends SettableBeanProperty {

    private static final long serialVersionUID = 1L;
    protected final AnnotatedField _annotated;
    protected final transient Field _field;

    protected FieldProperty(FieldProperty fieldproperty) {
        super(fieldproperty);
        _annotated = fieldproperty._annotated;
        fieldproperty = _annotated.getAnnotated();
        if (fieldproperty == null) {
            throw new IllegalArgumentException("Missing field (broken JDK (de)serialization?)");
        } else {
            _field = fieldproperty;
            return;
        }
    }

    protected FieldProperty(FieldProperty fieldproperty, JsonDeserializer jsondeserializer) {
        super(fieldproperty, jsondeserializer);
        _annotated = fieldproperty._annotated;
        _field = fieldproperty._field;
    }

    protected FieldProperty(FieldProperty fieldproperty, PropertyName propertyname) {
        super(fieldproperty, propertyname);
        _annotated = fieldproperty._annotated;
        _field = fieldproperty._field;
    }

    public FieldProperty(BeanPropertyDefinition beanpropertydefinition, JavaType javatype, TypeDeserializer typedeserializer, Annotations annotations, AnnotatedField annotatedfield) {
        super(beanpropertydefinition, javatype, typedeserializer, annotations);
        _annotated = annotatedfield;
        _field = annotatedfield.getAnnotated();
    }

    public void deserializeAndSet(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj) {
        deserializationcontext = ((DeserializationContext) (deserialize(jsonparser, deserializationcontext)));
        _field.set(obj, deserializationcontext);
_L1:
        return;
        obj;
        _throwAsIOE(jsonparser, ((Exception) (obj)), deserializationcontext);
          goto _L1
    }

    public Object deserializeSetAndReturn(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj) {
        Object obj1 = deserialize(jsonparser, deserializationcontext);
        try {
            _field.set(obj, obj1);
        }
        // Misplaced declaration of an exception variable
        catch (DeserializationContext deserializationcontext) {
            _throwAsIOE(jsonparser, deserializationcontext, obj1);
        }
        return obj;
    }

    public Annotation getAnnotation(Class class1) {
        if (_annotated == null)
            class1 = null;
        else
            class1 = _annotated.getAnnotation(class1);
        return class1;
    }

    public AnnotatedMember getMember() {
        return _annotated;
    }

    Object readResolve() {
        return new FieldProperty(this);
    }

    public final void set(Object obj, Object obj1) {
        _field.set(obj, obj1);
_L1:
        return;
        obj;
        _throwAsIOE(((Exception) (obj)), obj1);
          goto _L1
    }

    public Object setAndReturn(Object obj, Object obj1) {
        try {
            _field.set(obj, obj1);
        }
        catch (Exception exception) {
            _throwAsIOE(exception, obj1);
        }
        return obj;
    }

    public volatile SettableBeanProperty withName(PropertyName propertyname) {
        return withName(propertyname);
    }

    public FieldProperty withName(PropertyName propertyname) {
        return new FieldProperty(this, propertyname);
    }

    public volatile SettableBeanProperty withValueDeserializer(JsonDeserializer jsondeserializer) {
        return withValueDeserializer(jsondeserializer);
    }

    public FieldProperty withValueDeserializer(JsonDeserializer jsondeserializer) {
        return new FieldProperty(this, jsondeserializer);
    }
}
