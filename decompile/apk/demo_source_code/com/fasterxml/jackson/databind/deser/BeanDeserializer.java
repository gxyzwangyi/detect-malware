// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.impl.BeanAsArrayDeserializer;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator;
import com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer;
import com.fasterxml.jackson.databind.deser.impl.UnwrappedPropertyHandler;
import com.fasterxml.jackson.databind.util.NameTransformer;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Map;

// Referenced classes of package com.fasterxml.jackson.databind.deser:
//            BeanDeserializerBase, ValueInstantiator, SettableBeanProperty, SettableAnyProperty, 
//            BeanDeserializerBuilder

public class BeanDeserializer extends BeanDeserializerBase
    implements Serializable {

    private static final long serialVersionUID = 1L;

    protected BeanDeserializer(BeanDeserializerBase beandeserializerbase) {
        super(beandeserializerbase, beandeserializerbase._ignoreAllUnknown);
    }

    public BeanDeserializer(BeanDeserializerBase beandeserializerbase, ObjectIdReader objectidreader) {
        super(beandeserializerbase, objectidreader);
    }

    protected BeanDeserializer(BeanDeserializerBase beandeserializerbase, NameTransformer nametransformer) {
        super(beandeserializerbase, nametransformer);
    }

    public BeanDeserializer(BeanDeserializerBase beandeserializerbase, HashSet hashset) {
        super(beandeserializerbase, hashset);
    }

    protected BeanDeserializer(BeanDeserializerBase beandeserializerbase, boolean flag) {
        super(beandeserializerbase, flag);
    }

    public BeanDeserializer(BeanDeserializerBuilder beandeserializerbuilder, BeanDescription beandescription, BeanPropertyMap beanpropertymap, Map map, HashSet hashset, boolean flag, boolean flag1) {
        super(beandeserializerbuilder, beandescription, beanpropertymap, map, hashset, flag, flag1);
    }

    private final Object vanillaDeserialize(JsonParser jsonparser, DeserializationContext deserializationcontext, JsonToken jsontoken) {
        Object obj1 = _valueInstantiator.createUsingDefault(deserializationcontext);
        jsonparser.setCurrentValue(obj1);
        if (jsonparser.hasTokenId(5)) {
            jsontoken = jsonparser.getCurrentName();
            do {
                jsonparser.nextToken();
                Object obj = _beanProperties.find(jsontoken);
                if (obj != null)
                    try {
                        ((SettableBeanProperty) (obj)).deserializeAndSet(jsonparser, deserializationcontext, obj1);
                    }
                    catch (Exception exception) {
                        wrapAndThrow(exception, obj1, jsontoken, deserializationcontext);
                    }
                else
                    handleUnknownVanilla(jsonparser, deserializationcontext, obj1, jsontoken);
                obj = jsonparser.nextFieldName();
                jsontoken = ((JsonToken) (obj));
            } while (obj != null);
        }
        return obj1;
    }

    protected final Object _deserializeOther(JsonParser jsonparser, DeserializationContext deserializationcontext, JsonToken jsontoken) {
        static class _cls1 {

            static final int $SwitchMap$com$fasterxml$jackson$core$JsonToken[];

            static  {
                $SwitchMap$com$fasterxml$jackson$core$JsonToken = new int[JsonToken.values().length];
                NoSuchFieldError nosuchfielderror;
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_STRING.ordinal()] = 1;
                }
                catch (NoSuchFieldError nosuchfielderror9) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_NUMBER_INT.ordinal()] = 2;
                }
                catch (NoSuchFieldError nosuchfielderror8) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_NUMBER_FLOAT.ordinal()] = 3;
                }
                catch (NoSuchFieldError nosuchfielderror7) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_EMBEDDED_OBJECT.ordinal()] = 4;
                }
                catch (NoSuchFieldError nosuchfielderror6) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_TRUE.ordinal()] = 5;
                }
                catch (NoSuchFieldError nosuchfielderror5) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_FALSE.ordinal()] = 6;
                }
                catch (NoSuchFieldError nosuchfielderror4) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_NULL.ordinal()] = 7;
                }
                catch (NoSuchFieldError nosuchfielderror3) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.START_ARRAY.ordinal()] = 8;
                }
                catch (NoSuchFieldError nosuchfielderror2) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.FIELD_NAME.ordinal()] = 9;
                }
                catch (NoSuchFieldError nosuchfielderror1) { }
                $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.END_OBJECT.ordinal()] = 10;
_L2:
                return;
                nosuchfielderror;
                if (true) goto _L2; else goto _L1
_L1:
            }
        }

        _cls1..SwitchMap.com.fasterxml.jackson.core.JsonToken[jsontoken.ordinal()];
        JVM INSTR tableswitch 1 10: default 64
    //                   1 73
    //                   2 82
    //                   3 92
    //                   4 102
    //                   5 112
    //                   6 112
    //                   7 122
    //                   8 132
    //                   9 142
    //                   10 142;
           goto _L1 _L2 _L3 _L4 _L5 _L6 _L6 _L7 _L8 _L9 _L9
_L1:
        throw deserializationcontext.mappingException(handledType());
_L2:
        jsonparser = ((JsonParser) (deserializeFromString(jsonparser, deserializationcontext)));
_L11:
        return jsonparser;
_L3:
        jsonparser = ((JsonParser) (deserializeFromNumber(jsonparser, deserializationcontext)));
        continue; /* Loop/switch isn't completed */
_L4:
        jsonparser = ((JsonParser) (deserializeFromDouble(jsonparser, deserializationcontext)));
        continue; /* Loop/switch isn't completed */
_L5:
        jsonparser = ((JsonParser) (deserializeFromEmbedded(jsonparser, deserializationcontext)));
        continue; /* Loop/switch isn't completed */
_L6:
        jsonparser = ((JsonParser) (deserializeFromBoolean(jsonparser, deserializationcontext)));
        continue; /* Loop/switch isn't completed */
_L7:
        jsonparser = ((JsonParser) (deserializeFromNull(jsonparser, deserializationcontext)));
        continue; /* Loop/switch isn't completed */
_L8:
        jsonparser = ((JsonParser) (deserializeFromArray(jsonparser, deserializationcontext)));
        continue; /* Loop/switch isn't completed */
_L9:
        if (_vanillaProcessing)
            jsonparser = ((JsonParser) (vanillaDeserialize(jsonparser, deserializationcontext, jsontoken)));
        else
        if (_objectIdReader != null)
            jsonparser = ((JsonParser) (deserializeWithObjectId(jsonparser, deserializationcontext)));
        else
            jsonparser = ((JsonParser) (deserializeFromObject(jsonparser, deserializationcontext)));
        if (true) goto _L11; else goto _L10
_L10:
    }

    protected Object _deserializeUsingPropertyBased(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        Object obj;
        Object obj1;
        PropertyValueBuffer propertyvaluebuffer;
        PropertyBasedCreator propertybasedcreator;
        propertybasedcreator = _propertyBasedCreator;
        propertyvaluebuffer = propertybasedcreator.startBuilding(jsonparser, deserializationcontext, _objectIdReader);
        obj1 = jsonparser.getCurrentToken();
        obj = null;
_L2:
        if (obj1 != JsonToken.FIELD_NAME)
            break MISSING_BLOCK_LABEL_381;
        Object obj2 = jsonparser.getCurrentName();
        jsonparser.nextToken();
        SettableBeanProperty settablebeanproperty = propertybasedcreator.findCreatorProperty(((String) (obj2)));
        if (settablebeanproperty != null) {
            {
                obj1 = obj;
                if (!propertyvaluebuffer.assignParameter(settablebeanproperty, _deserializeWithErrorWrapping(jsonparser, deserializationcontext, settablebeanproperty)))
                    break MISSING_BLOCK_LABEL_200;
                jsonparser.nextToken();
                try {
                    obj1 = propertybasedcreator.build(deserializationcontext, propertyvaluebuffer);
                }
                // Misplaced declaration of an exception variable
                catch (Object obj1) {
                    wrapInstantiationProblem(((Throwable) (obj1)), deserializationcontext);
                    obj1 = null;
                }
                if (obj1 == null)
                    throw deserializationcontext.instantiationException(_beanType.getRawClass(), "JSON Creator returned null");
                jsonparser.setCurrentValue(obj1);
                if (obj1.getClass() != _beanType.getRawClass()) {
                    jsonparser = ((JsonParser) (handlePolymorphic(jsonparser, deserializationcontext, obj1, ((TokenBuffer) (obj)))));
                } else {
                    if (obj != null)
                        obj = handleUnknownProperties(deserializationcontext, obj1, ((TokenBuffer) (obj)));
                    else
                        obj = obj1;
                    jsonparser = ((JsonParser) (deserialize(jsonparser, deserializationcontext, obj)));
                }
            }
            return jsonparser;
        }
        if (propertyvaluebuffer.readIdProperty(((String) (obj2)))) {
            obj1 = obj;
        } else {
            obj1 = _beanProperties.find(((String) (obj2)));
            if (obj1 != null) {
                propertyvaluebuffer.bufferProperty(((SettableBeanProperty) (obj1)), _deserializeWithErrorWrapping(jsonparser, deserializationcontext, ((SettableBeanProperty) (obj1))));
                obj1 = obj;
            } else {
label0:
                {
                    if (_ignorableProps == null || !_ignorableProps.contains(obj2))
                        break label0;
                    handleIgnoredProperty(jsonparser, deserializationcontext, handledType(), ((String) (obj2)));
                    obj1 = obj;
                }
            }
        }
_L3:
        obj2 = jsonparser.nextToken();
        obj = obj1;
        obj1 = obj2;
        if (true) goto _L2; else goto _L1
_L1:
        if (_anySetter == null)
            break MISSING_BLOCK_LABEL_347;
        propertyvaluebuffer.bufferAnyProperty(_anySetter, ((String) (obj2)), _anySetter.deserialize(jsonparser, deserializationcontext));
        obj1 = obj;
          goto _L3
        obj1;
        wrapAndThrow(((Throwable) (obj1)), _beanType.getRawClass(), ((String) (obj2)), deserializationcontext);
        obj1 = obj;
          goto _L3
        obj1 = obj;
        if (obj == null)
            obj1 = new TokenBuffer(jsonparser, deserializationcontext);
        ((TokenBuffer) (obj1)).writeFieldName(((String) (obj2)));
        ((TokenBuffer) (obj1)).copyCurrentStructure(jsonparser);
          goto _L3
        try {
            jsonparser = ((JsonParser) (propertybasedcreator.build(deserializationcontext, propertyvaluebuffer)));
        }
        // Misplaced declaration of an exception variable
        catch (JsonParser jsonparser) {
            wrapInstantiationProblem(jsonparser, deserializationcontext);
            jsonparser = null;
        }
        if (obj != null)
            if (jsonparser.getClass() != _beanType.getRawClass())
                jsonparser = ((JsonParser) (handlePolymorphic(null, deserializationcontext, jsonparser, ((TokenBuffer) (obj)))));
            else
                jsonparser = ((JsonParser) (handleUnknownProperties(deserializationcontext, jsonparser, ((TokenBuffer) (obj)))));
        break MISSING_BLOCK_LABEL_161;
    }

    protected final Object _deserializeWithErrorWrapping(JsonParser jsonparser, DeserializationContext deserializationcontext, SettableBeanProperty settablebeanproperty) {
        try {
            jsonparser = ((JsonParser) (settablebeanproperty.deserialize(jsonparser, deserializationcontext)));
        }
        // Misplaced declaration of an exception variable
        catch (JsonParser jsonparser) {
            wrapAndThrow(jsonparser, _beanType.getRawClass(), settablebeanproperty.getName(), deserializationcontext);
            jsonparser = null;
        }
        return jsonparser;
    }

    protected Object _missingToken(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        throw deserializationcontext.endOfInputException(handledType());
    }

    protected BeanDeserializerBase asArrayDeserializer() {
        return new BeanAsArrayDeserializer(this, _beanProperties.getPropertiesInInsertionOrder());
    }

    public Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (jsonparser.isExpectedStartObjectToken()) {
            if (_vanillaProcessing) {
                jsonparser = ((JsonParser) (vanillaDeserialize(jsonparser, deserializationcontext, jsonparser.nextToken())));
            } else {
                jsonparser.nextToken();
                if (_objectIdReader != null)
                    jsonparser = ((JsonParser) (deserializeWithObjectId(jsonparser, deserializationcontext)));
                else
                    jsonparser = ((JsonParser) (deserializeFromObject(jsonparser, deserializationcontext)));
            }
        } else {
            jsonparser = ((JsonParser) (_deserializeOther(jsonparser, deserializationcontext, jsonparser.getCurrentToken())));
        }
        return jsonparser;
    }

    public Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj) {
        jsonparser.setCurrentValue(obj);
        if (_injectables != null)
            injectValues(deserializationcontext, obj);
        if (_unwrappedPropertyHandler == null) goto _L2; else goto _L1
_L1:
        Object obj1 = deserializeWithUnwrapped(jsonparser, deserializationcontext, obj);
_L4:
        return obj1;
_L2:
        if (_externalTypeIdHandler != null) {
            obj1 = deserializeWithExternalTypeId(jsonparser, deserializationcontext, obj);
            continue; /* Loop/switch isn't completed */
        }
        String s1;
        if (jsonparser.isExpectedStartObjectToken()) {
            String s = jsonparser.nextFieldName();
            obj1 = obj;
            if (s == null)
                continue; /* Loop/switch isn't completed */
            obj1 = s;
        } else {
            obj1 = obj;
            if (!jsonparser.hasTokenId(5))
                continue; /* Loop/switch isn't completed */
            obj1 = jsonparser.getCurrentName();
        }
        s1 = ((String) (obj1));
        if (_needViewProcesing) {
            Class class1 = deserializationcontext.getActiveView();
            s1 = ((String) (obj1));
            if (class1 != null) {
                obj1 = deserializeWithView(jsonparser, deserializationcontext, obj, class1);
                continue; /* Loop/switch isn't completed */
            }
        }
        do {
            jsonparser.nextToken();
            obj1 = _beanProperties.find(s1);
            if (obj1 != null)
                try {
                    ((SettableBeanProperty) (obj1)).deserializeAndSet(jsonparser, deserializationcontext, obj);
                }
                catch (Exception exception) {
                    wrapAndThrow(exception, obj, s1, deserializationcontext);
                }
            else
                handleUnknownVanilla(jsonparser, deserializationcontext, obj, s1);
            obj1 = jsonparser.nextFieldName();
            s1 = ((String) (obj1));
        } while (obj1 != null);
        obj1 = obj;
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected Object deserializeFromNull(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (jsonparser.requiresCustomCodec()) {
            Object obj = new TokenBuffer(jsonparser, deserializationcontext);
            ((TokenBuffer) (obj)).writeEndObject();
            obj = ((TokenBuffer) (obj)).asParser(jsonparser);
            ((JsonParser) (obj)).nextToken();
            if (_vanillaProcessing)
                jsonparser = ((JsonParser) (vanillaDeserialize(((JsonParser) (obj)), deserializationcontext, JsonToken.END_OBJECT)));
            else
                jsonparser = ((JsonParser) (deserializeFromObject(((JsonParser) (obj)), deserializationcontext)));
            ((JsonParser) (obj)).close();
            return jsonparser;
        } else {
            throw deserializationcontext.mappingException(handledType());
        }
    }

    public Object deserializeFromObject(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (_objectIdReader == null || !_objectIdReader.maySerializeAsObject() || !jsonparser.hasTokenId(5) || !_objectIdReader.isValidReferencePropertyName(jsonparser.getCurrentName(), jsonparser)) goto _L2; else goto _L1
_L1:
        jsonparser = ((JsonParser) (deserializeFromObjectId(jsonparser, deserializationcontext)));
_L4:
        return jsonparser;
_L2:
        if (_nonStandardCreation) {
            if (_unwrappedPropertyHandler != null)
                jsonparser = ((JsonParser) (deserializeWithUnwrapped(jsonparser, deserializationcontext)));
            else
            if (_externalTypeIdHandler != null) {
                jsonparser = ((JsonParser) (deserializeWithExternalTypeId(jsonparser, deserializationcontext)));
            } else {
                Object obj = deserializeFromObjectUsingNonDefault(jsonparser, deserializationcontext);
                jsonparser = ((JsonParser) (obj));
                if (_injectables != null) {
                    injectValues(deserializationcontext, obj);
                    jsonparser = ((JsonParser) (obj));
                }
            }
            continue; /* Loop/switch isn't completed */
        }
        Object obj2 = _valueInstantiator.createUsingDefault(deserializationcontext);
        jsonparser.setCurrentValue(obj2);
        if (jsonparser.canReadObjectId()) {
            Object obj1 = jsonparser.getObjectId();
            if (obj1 != null)
                _handleTypedObjectId(jsonparser, deserializationcontext, obj2, obj1);
        }
        if (_injectables != null)
            injectValues(deserializationcontext, obj2);
        if (_needViewProcesing) {
            Class class1 = deserializationcontext.getActiveView();
            if (class1 != null) {
                jsonparser = ((JsonParser) (deserializeWithView(jsonparser, deserializationcontext, obj2, class1)));
                continue; /* Loop/switch isn't completed */
            }
        }
        if (jsonparser.hasTokenId(5)) {
            String s = jsonparser.getCurrentName();
            do {
                jsonparser.nextToken();
                Object obj3 = _beanProperties.find(s);
                if (obj3 != null)
                    try {
                        ((SettableBeanProperty) (obj3)).deserializeAndSet(jsonparser, deserializationcontext, obj2);
                    }
                    catch (Exception exception) {
                        wrapAndThrow(exception, obj2, s, deserializationcontext);
                    }
                else
                    handleUnknownVanilla(jsonparser, deserializationcontext, obj2, s);
                obj3 = jsonparser.nextFieldName();
                s = ((String) (obj3));
            } while (obj3 != null);
        }
        jsonparser = ((JsonParser) (obj2));
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        Object obj;
        ExternalTypeHandler externaltypehandler;
        TokenBuffer tokenbuffer;
        PropertyBasedCreator propertybasedcreator;
        PropertyValueBuffer propertyvaluebuffer;
        externaltypehandler = _externalTypeIdHandler.start();
        propertybasedcreator = _propertyBasedCreator;
        propertyvaluebuffer = propertybasedcreator.startBuilding(jsonparser, deserializationcontext, _objectIdReader);
        tokenbuffer = new TokenBuffer(jsonparser, deserializationcontext);
        tokenbuffer.writeStartObject();
        obj = jsonparser.getCurrentToken();
_L4:
        String s;
        if (obj != JsonToken.FIELD_NAME)
            break; /* Loop/switch isn't completed */
        s = jsonparser.getCurrentName();
        jsonparser.nextToken();
        obj = propertybasedcreator.findCreatorProperty(s);
        if (obj == null) goto _L2; else goto _L1
_L6:
        obj = jsonparser.nextToken();
        if (true) goto _L4; else goto _L3
_L1:
        if (externaltypehandler.handlePropertyValue(jsonparser, deserializationcontext, s, null) || !propertyvaluebuffer.assignParameter(((SettableBeanProperty) (obj)), _deserializeWithErrorWrapping(jsonparser, deserializationcontext, ((SettableBeanProperty) (obj))))) goto _L6; else goto _L5
_L5:
        obj = jsonparser.nextToken();
        Object obj1 = propertybasedcreator.build(deserializationcontext, propertyvaluebuffer);
        for (; obj == JsonToken.FIELD_NAME; obj = jsonparser.nextToken()) {
            jsonparser.nextToken();
            tokenbuffer.copyCurrentStructure(jsonparser);
        }

        break MISSING_BLOCK_LABEL_176;
        Exception exception;
        exception;
        wrapAndThrow(exception, _beanType.getRawClass(), s, deserializationcontext);
          goto _L6
        if (obj1.getClass() != _beanType.getRawClass())
            throw deserializationcontext.mappingException("Can not create polymorphic instances with unwrapped values");
        jsonparser = ((JsonParser) (externaltypehandler.complete(jsonparser, deserializationcontext, obj1)));
_L7:
        return jsonparser;
_L2:
        if (!propertyvaluebuffer.readIdProperty(s)) {
            SettableBeanProperty settablebeanproperty = _beanProperties.find(s);
            if (settablebeanproperty != null)
                propertyvaluebuffer.bufferProperty(settablebeanproperty, settablebeanproperty.deserialize(jsonparser, deserializationcontext));
            else
            if (!externaltypehandler.handlePropertyValue(jsonparser, deserializationcontext, s, null))
                if (_ignorableProps != null && _ignorableProps.contains(s))
                    handleIgnoredProperty(jsonparser, deserializationcontext, handledType(), s);
                else
                if (_anySetter != null)
                    propertyvaluebuffer.bufferAnyProperty(_anySetter, s, _anySetter.deserialize(jsonparser, deserializationcontext));
        }
          goto _L6
_L3:
        try {
            jsonparser = ((JsonParser) (externaltypehandler.complete(jsonparser, deserializationcontext, propertyvaluebuffer, propertybasedcreator)));
        }
        // Misplaced declaration of an exception variable
        catch (JsonParser jsonparser) {
            wrapInstantiationProblem(jsonparser, deserializationcontext);
            jsonparser = null;
        }
          goto _L7
    }

    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        TokenBuffer tokenbuffer;
        PropertyValueBuffer propertyvaluebuffer;
        PropertyBasedCreator propertybasedcreator;
        propertybasedcreator = _propertyBasedCreator;
        propertyvaluebuffer = propertybasedcreator.startBuilding(jsonparser, deserializationcontext, _objectIdReader);
        tokenbuffer = new TokenBuffer(jsonparser, deserializationcontext);
        tokenbuffer.writeStartObject();
        Object obj = jsonparser.getCurrentToken();
        while (obj == JsonToken.FIELD_NAME)  {
            obj = jsonparser.getCurrentName();
            jsonparser.nextToken();
            Object obj2 = propertybasedcreator.findCreatorProperty(((String) (obj)));
            if (obj2 != null) {
                if (propertyvaluebuffer.assignParameter(((SettableBeanProperty) (obj2)), _deserializeWithErrorWrapping(jsonparser, deserializationcontext, ((SettableBeanProperty) (obj2))))) {
                    obj = jsonparser.nextToken();
                    try {
                        obj2 = propertybasedcreator.build(deserializationcontext, propertyvaluebuffer);
                        break MISSING_BLOCK_LABEL_103;
                    }
                    // Misplaced declaration of an exception variable
                    catch (Object obj) {
                        wrapInstantiationProblem(((Throwable) (obj)), deserializationcontext);
                    }
                }
            } else
            if (!propertyvaluebuffer.readIdProperty(((String) (obj)))) {
                SettableBeanProperty settablebeanproperty = _beanProperties.find(((String) (obj)));
                if (settablebeanproperty != null)
                    propertyvaluebuffer.bufferProperty(settablebeanproperty, _deserializeWithErrorWrapping(jsonparser, deserializationcontext, settablebeanproperty));
                else
                if (_ignorableProps != null && _ignorableProps.contains(obj)) {
                    handleIgnoredProperty(jsonparser, deserializationcontext, handledType(), ((String) (obj)));
                } else {
                    tokenbuffer.writeFieldName(((String) (obj)));
                    tokenbuffer.copyCurrentStructure(jsonparser);
                    if (_anySetter != null)
                        try {
                            propertyvaluebuffer.bufferAnyProperty(_anySetter, ((String) (obj)), _anySetter.deserialize(jsonparser, deserializationcontext));
                        }
                        catch (Exception exception) {
                            wrapAndThrow(exception, _beanType.getRawClass(), ((String) (obj)), deserializationcontext);
                        }
                }
            }
            obj = jsonparser.nextToken();
        }
          goto _L1
        jsonparser.setCurrentValue(obj2);
        for (; obj == JsonToken.FIELD_NAME; obj = jsonparser.nextToken()) {
            jsonparser.nextToken();
            tokenbuffer.copyCurrentStructure(jsonparser);
        }

        tokenbuffer.writeEndObject();
        if (obj2.getClass() != _beanType.getRawClass()) {
            tokenbuffer.close();
            throw deserializationcontext.mappingException("Can not create polymorphic instances with unwrapped values");
        }
        jsonparser = ((JsonParser) (_unwrappedPropertyHandler.processUnwrapped(jsonparser, deserializationcontext, obj2, tokenbuffer)));
_L3:
        return jsonparser;
_L1:
        Object obj1 = propertybasedcreator.build(deserializationcontext, propertyvaluebuffer);
        jsonparser = ((JsonParser) (_unwrappedPropertyHandler.processUnwrapped(jsonparser, deserializationcontext, obj1, tokenbuffer)));
        continue; /* Loop/switch isn't completed */
        jsonparser;
        wrapInstantiationProblem(jsonparser, deserializationcontext);
        jsonparser = null;
        if (true) goto _L3; else goto _L2
_L2:
    }

    protected Object deserializeWithExternalTypeId(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (_propertyBasedCreator != null)
            jsonparser = ((JsonParser) (deserializeUsingPropertyBasedWithExternalTypeId(jsonparser, deserializationcontext)));
        else
        if (_delegateDeserializer != null)
            jsonparser = ((JsonParser) (_valueInstantiator.createUsingDelegate(deserializationcontext, _delegateDeserializer.deserialize(jsonparser, deserializationcontext))));
        else
            jsonparser = ((JsonParser) (deserializeWithExternalTypeId(jsonparser, deserializationcontext, _valueInstantiator.createUsingDefault(deserializationcontext))));
        return jsonparser;
    }

    protected Object deserializeWithExternalTypeId(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj) {
        Class class1;
        Object obj1;
        ExternalTypeHandler externaltypehandler;
        if (_needViewProcesing)
            class1 = deserializationcontext.getActiveView();
        else
            class1 = null;
        externaltypehandler = _externalTypeIdHandler.start();
        obj1 = jsonparser.getCurrentToken();
        while (obj1 == JsonToken.FIELD_NAME)  {
            obj1 = jsonparser.getCurrentName();
            JsonToken jsontoken = jsonparser.nextToken();
            SettableBeanProperty settablebeanproperty = _beanProperties.find(((String) (obj1)));
            if (settablebeanproperty != null) {
                if (jsontoken.isScalarValue())
                    externaltypehandler.handleTypePropertyValue(jsonparser, deserializationcontext, ((String) (obj1)), obj);
                if (class1 != null && !settablebeanproperty.visibleInView(class1))
                    jsonparser.skipChildren();
                else
                    try {
                        settablebeanproperty.deserializeAndSet(jsonparser, deserializationcontext, obj);
                    }
                    catch (Exception exception) {
                        wrapAndThrow(exception, obj, ((String) (obj1)), deserializationcontext);
                    }
            } else
            if (_ignorableProps != null && _ignorableProps.contains(obj1))
                handleIgnoredProperty(jsonparser, deserializationcontext, obj, ((String) (obj1)));
            else
            if (!externaltypehandler.handlePropertyValue(jsonparser, deserializationcontext, ((String) (obj1)), obj))
                if (_anySetter != null)
                    try {
                        _anySetter.deserializeAndSet(jsonparser, deserializationcontext, obj, ((String) (obj1)));
                    }
                    catch (Exception exception1) {
                        wrapAndThrow(exception1, obj, ((String) (obj1)), deserializationcontext);
                    }
                else
                    handleUnknownProperty(jsonparser, deserializationcontext, obj, ((String) (obj1)));
            obj1 = jsonparser.nextToken();
        }
        return externaltypehandler.complete(jsonparser, deserializationcontext, obj);
    }

    protected Object deserializeWithUnwrapped(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        String s = null;
        if (_delegateDeserializer == null) goto _L2; else goto _L1
_L1:
        jsonparser = ((JsonParser) (_valueInstantiator.createUsingDelegate(deserializationcontext, _delegateDeserializer.deserialize(jsonparser, deserializationcontext))));
_L4:
        return jsonparser;
_L2:
        if (_propertyBasedCreator != null) {
            jsonparser = ((JsonParser) (deserializeUsingPropertyBasedWithUnwrapped(jsonparser, deserializationcontext)));
            continue; /* Loop/switch isn't completed */
        }
        TokenBuffer tokenbuffer = new TokenBuffer(jsonparser, deserializationcontext);
        tokenbuffer.writeStartObject();
        Object obj = _valueInstantiator.createUsingDefault(deserializationcontext);
        jsonparser.setCurrentValue(obj);
        if (_injectables != null)
            injectValues(deserializationcontext, obj);
        Class class1;
        if (_needViewProcesing)
            class1 = deserializationcontext.getActiveView();
        else
            class1 = null;
        if (jsonparser.hasTokenId(5))
            s = jsonparser.getCurrentName();
        while (s != null)  {
            jsonparser.nextToken();
            SettableBeanProperty settablebeanproperty = _beanProperties.find(s);
            if (settablebeanproperty != null) {
                if (class1 != null && !settablebeanproperty.visibleInView(class1))
                    jsonparser.skipChildren();
                else
                    try {
                        settablebeanproperty.deserializeAndSet(jsonparser, deserializationcontext, obj);
                    }
                    catch (Exception exception) {
                        wrapAndThrow(exception, obj, s, deserializationcontext);
                    }
            } else
            if (_ignorableProps != null && _ignorableProps.contains(s)) {
                handleIgnoredProperty(jsonparser, deserializationcontext, obj, s);
            } else {
                tokenbuffer.writeFieldName(s);
                tokenbuffer.copyCurrentStructure(jsonparser);
                if (_anySetter != null)
                    try {
                        _anySetter.deserializeAndSet(jsonparser, deserializationcontext, obj, s);
                    }
                    catch (Exception exception1) {
                        wrapAndThrow(exception1, obj, s, deserializationcontext);
                    }
            }
            s = jsonparser.nextFieldName();
        }
        tokenbuffer.writeEndObject();
        _unwrappedPropertyHandler.processUnwrapped(jsonparser, deserializationcontext, obj, tokenbuffer);
        jsonparser = ((JsonParser) (obj));
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected Object deserializeWithUnwrapped(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj) {
        Object obj2 = jsonparser.getCurrentToken();
        Object obj1 = obj2;
        if (obj2 == JsonToken.START_OBJECT)
            obj1 = jsonparser.nextToken();
        TokenBuffer tokenbuffer = new TokenBuffer(jsonparser, deserializationcontext);
        tokenbuffer.writeStartObject();
        if (_needViewProcesing)
            obj2 = deserializationcontext.getActiveView();
        else
            obj2 = null;
        while (obj1 == JsonToken.FIELD_NAME)  {
            obj1 = jsonparser.getCurrentName();
            SettableBeanProperty settablebeanproperty = _beanProperties.find(((String) (obj1)));
            jsonparser.nextToken();
            if (settablebeanproperty != null) {
                if (obj2 != null && !settablebeanproperty.visibleInView(((Class) (obj2))))
                    jsonparser.skipChildren();
                else
                    try {
                        settablebeanproperty.deserializeAndSet(jsonparser, deserializationcontext, obj);
                    }
                    catch (Exception exception) {
                        wrapAndThrow(exception, obj, ((String) (obj1)), deserializationcontext);
                    }
            } else
            if (_ignorableProps != null && _ignorableProps.contains(obj1)) {
                handleIgnoredProperty(jsonparser, deserializationcontext, obj, ((String) (obj1)));
            } else {
                tokenbuffer.writeFieldName(((String) (obj1)));
                tokenbuffer.copyCurrentStructure(jsonparser);
                if (_anySetter != null)
                    _anySetter.deserializeAndSet(jsonparser, deserializationcontext, obj, ((String) (obj1)));
            }
            obj1 = jsonparser.nextToken();
        }
        tokenbuffer.writeEndObject();
        _unwrappedPropertyHandler.processUnwrapped(jsonparser, deserializationcontext, obj, tokenbuffer);
        return obj;
    }

    protected final Object deserializeWithView(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj, Class class1) {
        if (jsonparser.hasTokenId(5)) {
            Object obj1 = jsonparser.getCurrentName();
            do {
                jsonparser.nextToken();
                Object obj2 = _beanProperties.find(((String) (obj1)));
                if (obj2 != null) {
                    if (!((SettableBeanProperty) (obj2)).visibleInView(class1))
                        jsonparser.skipChildren();
                    else
                        try {
                            ((SettableBeanProperty) (obj2)).deserializeAndSet(jsonparser, deserializationcontext, obj);
                        }
                        catch (Exception exception) {
                            wrapAndThrow(exception, obj, ((String) (obj1)), deserializationcontext);
                        }
                } else {
                    handleUnknownVanilla(jsonparser, deserializationcontext, obj, ((String) (obj1)));
                }
                obj2 = jsonparser.nextFieldName();
                obj1 = obj2;
            } while (obj2 != null);
        }
        return obj;
    }

    public JsonDeserializer unwrappingDeserializer(NameTransformer nametransformer) {
        if (getClass() != com/fasterxml/jackson/databind/deser/BeanDeserializer)
            nametransformer = this;
        else
            nametransformer = new BeanDeserializer(this, nametransformer);
        return nametransformer;
    }

    public BeanDeserializer withIgnorableProperties(HashSet hashset) {
        return new BeanDeserializer(this, hashset);
    }

    public volatile BeanDeserializerBase withIgnorableProperties(HashSet hashset) {
        return withIgnorableProperties(hashset);
    }

    public BeanDeserializer withObjectIdReader(ObjectIdReader objectidreader) {
        return new BeanDeserializer(this, objectidreader);
    }

    public volatile BeanDeserializerBase withObjectIdReader(ObjectIdReader objectidreader) {
        return withObjectIdReader(objectidreader);
    }
}
