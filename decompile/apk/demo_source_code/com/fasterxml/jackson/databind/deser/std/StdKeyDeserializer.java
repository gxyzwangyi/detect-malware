// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.core.io.NumberInput;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.EnumResolver;
import java.io.IOException;
import java.io.Serializable;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.net.URI;
import java.net.URL;
import java.util.*;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            FromStringDeserializer

public class StdKeyDeserializer extends KeyDeserializer
    implements Serializable {
    static final class DelegatingKD extends KeyDeserializer
        implements Serializable {

        private static final long serialVersionUID = 1L;
        protected final JsonDeserializer _delegate;
        protected final Class _keyClass;

        public final Object deserializeKey(String s, DeserializationContext deserializationcontext) {
            Object obj1;
            if (s == null) {
                obj1 = null;
            } else {
                Object obj;
                try {
                    obj = _delegate.deserialize(deserializationcontext.getParser(), deserializationcontext);
                }
                catch (Exception exception) {
                    throw deserializationcontext.weirdKeyException(_keyClass, s, (new StringBuilder()).append("not a valid representation: ").append(exception.getMessage()).toString());
                }
                obj1 = obj;
                if (obj == null)
                    throw deserializationcontext.weirdKeyException(_keyClass, s, "not a valid representation");
            }
            return obj1;
        }

        public Class getKeyClass() {
            return _keyClass;
        }

        protected DelegatingKD(Class class1, JsonDeserializer jsondeserializer) {
            _keyClass = class1;
            _delegate = jsondeserializer;
        }
    }

    static final class EnumKD extends StdKeyDeserializer {

        private static final long serialVersionUID = 1L;
        protected final EnumResolver _byNameResolver;
        protected EnumResolver _byToStringResolver;
        protected final AnnotatedMethod _factory;

        private EnumResolver _getToStringResolver() {
            EnumResolver enumresolver;
            EnumResolver enumresolver1;
            enumresolver1 = _byToStringResolver;
            enumresolver = enumresolver1;
            if (enumresolver1 != null) goto _L2; else goto _L1
_L1:
            this;
            JVM INSTR monitorenter ;
            enumresolver = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass());
            this;
            JVM INSTR monitorexit ;
_L2:
            return enumresolver;
            Exception exception;
            exception;
            this;
            JVM INSTR monitorexit ;
            throw exception;
        }

        public Object _parse(String s, DeserializationContext deserializationcontext) {
            if (_factory == null) goto _L2; else goto _L1
_L1:
            Object obj = _factory.call1(s);
            s = ((String) (obj));
_L4:
            return s;
            Exception exception;
            exception;
            ClassUtil.unwrapAndThrowAsIAE(exception);
_L2:
            EnumResolver enumresolver;
            Enum enum;
            if (deserializationcontext.isEnabled(DeserializationFeature.READ_ENUMS_USING_TO_STRING))
                enumresolver = _getToStringResolver();
            else
                enumresolver = _byNameResolver;
            enum = enumresolver.findEnum(s);
            if (enum == null && !deserializationcontext.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL))
                throw deserializationcontext.weirdKeyException(_keyClass, s, (new StringBuilder()).append("not one of values excepted for Enum class: ").append(enumresolver.getEnumIds()).toString());
            s = enum;
            if (true) goto _L4; else goto _L3
_L3:
        }

        protected EnumKD(EnumResolver enumresolver, AnnotatedMethod annotatedmethod) {
            super(-1, enumresolver.getEnumClass());
            _byNameResolver = enumresolver;
            _factory = annotatedmethod;
        }
    }

    static final class StringCtorKeyDeserializer extends StdKeyDeserializer {

        private static final long serialVersionUID = 1L;
        protected final Constructor _ctor;

        public Object _parse(String s, DeserializationContext deserializationcontext) {
            return _ctor.newInstance(new Object[] {
                s
            });
        }

        public StringCtorKeyDeserializer(Constructor constructor) {
            super(-1, constructor.getDeclaringClass());
            _ctor = constructor;
        }
    }

    static final class StringFactoryKeyDeserializer extends StdKeyDeserializer {

        private static final long serialVersionUID = 1L;
        final Method _factoryMethod;

        public Object _parse(String s, DeserializationContext deserializationcontext) {
            return _factoryMethod.invoke(null, new Object[] {
                s
            });
        }

        public StringFactoryKeyDeserializer(Method method) {
            super(-1, method.getDeclaringClass());
            _factoryMethod = method;
        }
    }

    static final class StringKD extends StdKeyDeserializer {

        private static final StringKD sObject = new StringKD(java/lang/Object);
        private static final StringKD sString = new StringKD(java/lang/String);
        private static final long serialVersionUID = 1L;

        public static StringKD forType(Class class1) {
            if (class1 == java/lang/String)
                class1 = sString;
            else
            if (class1 == java/lang/Object)
                class1 = sObject;
            else
                class1 = new StringKD(class1);
            return class1;
        }

        public Object deserializeKey(String s, DeserializationContext deserializationcontext) {
            return s;
        }


        private StringKD(Class class1) {
            super(-1, class1);
        }
    }


    public static final int TYPE_BOOLEAN = 1;
    public static final int TYPE_BYTE = 2;
    public static final int TYPE_CALENDAR = 11;
    public static final int TYPE_CHAR = 4;
    public static final int TYPE_CLASS = 15;
    public static final int TYPE_CURRENCY = 16;
    public static final int TYPE_DATE = 10;
    public static final int TYPE_DOUBLE = 8;
    public static final int TYPE_FLOAT = 7;
    public static final int TYPE_INT = 5;
    public static final int TYPE_LOCALE = 9;
    public static final int TYPE_LONG = 6;
    public static final int TYPE_SHORT = 3;
    public static final int TYPE_URI = 13;
    public static final int TYPE_URL = 14;
    public static final int TYPE_UUID = 12;
    private static final long serialVersionUID = 1L;
    protected final FromStringDeserializer _deser;
    protected final Class _keyClass;
    protected final int _kind;

    protected StdKeyDeserializer(int i, Class class1) {
        this(i, class1, null);
    }

    protected StdKeyDeserializer(int i, Class class1, FromStringDeserializer fromstringdeserializer) {
        _kind = i;
        _keyClass = class1;
        _deser = fromstringdeserializer;
    }

    public static StdKeyDeserializer forType(Class class1) {
        if (class1 != java/lang/String && class1 != java/lang/Object) goto _L2; else goto _L1
_L1:
        class1 = StringKD.forType(class1);
_L8:
        return class1;
_L2:
        if (class1 != java/util/UUID) goto _L4; else goto _L3
_L3:
        byte byte0 = 12;
_L6:
        class1 = new StdKeyDeserializer(byte0, class1);
        continue; /* Loop/switch isn't completed */
_L4:
        if (class1 == java/lang/Integer) {
            byte0 = 5;
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == java/lang/Long) {
            byte0 = 6;
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == java/util/Date) {
            byte0 = 10;
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == java/util/Calendar) {
            byte0 = 11;
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == java/lang/Boolean) {
            byte0 = 1;
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == java/lang/Byte) {
            byte0 = 2;
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == java/lang/Character) {
            byte0 = 4;
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == java/lang/Short) {
            byte0 = 3;
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == java/lang/Float) {
            byte0 = 7;
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == java/lang/Double) {
            byte0 = 8;
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == java/net/URI) {
            byte0 = 13;
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == java/net/URL) {
            byte0 = 14;
            continue; /* Loop/switch isn't completed */
        }
        if (class1 != java/lang/Class)
            break; /* Loop/switch isn't completed */
        byte0 = 15;
        if (true) goto _L6; else goto _L5
_L5:
        if (class1 == java/util/Locale)
            class1 = new StdKeyDeserializer(9, class1, FromStringDeserializer.findDeserializer(java/util/Locale));
        else
        if (class1 == java/util/Currency)
            class1 = new StdKeyDeserializer(16, class1, FromStringDeserializer.findDeserializer(java/util/Currency));
        else
            class1 = null;
        if (true) goto _L8; else goto _L7
_L7:
    }

    protected Object _parse(String s, DeserializationContext deserializationcontext) {
        Object obj = null;
        _kind;
        JVM INSTR tableswitch 1 16: default 84
    //                   1 89
    //                   2 133
    //                   3 173
    //                   4 214
    //                   5 246
    //                   6 258
    //                   7 270
    //                   8 283
    //                   9 295
    //                   10 357
    //                   11 366
    //                   12 391
    //                   13 399
    //                   14 407
    //                   15 419
    //                   16 326;
           goto _L1 _L2 _L3 _L4 _L5 _L6 _L7 _L8 _L9 _L10 _L11 _L12 _L13 _L14 _L15 _L16 _L17
_L1:
        s = ((String) (obj));
_L19:
        return s;
_L2:
        if ("true".equals(s))
            s = Boolean.TRUE;
        else
        if ("false".equals(s))
            s = Boolean.FALSE;
        else
            throw deserializationcontext.weirdKeyException(_keyClass, s, "value not 'true' or 'false'");
        continue; /* Loop/switch isn't completed */
_L3:
        int i = _parseInt(s);
        if (i < -128 || i > 255)
            throw deserializationcontext.weirdKeyException(_keyClass, s, "overflow, value can not be represented as 8-bit value");
        s = Byte.valueOf((byte)i);
        continue; /* Loop/switch isn't completed */
_L4:
        int j = _parseInt(s);
        if (j < -32768 || j > 32767)
            throw deserializationcontext.weirdKeyException(_keyClass, s, "overflow, value can not be represented as 16-bit value");
        s = Short.valueOf((short)j);
        continue; /* Loop/switch isn't completed */
_L5:
        if (s.length() == 1)
            s = Character.valueOf(s.charAt(0));
        else
            throw deserializationcontext.weirdKeyException(_keyClass, s, "can only convert 1-character Strings");
        continue; /* Loop/switch isn't completed */
_L6:
        s = Integer.valueOf(_parseInt(s));
        continue; /* Loop/switch isn't completed */
_L7:
        s = Long.valueOf(_parseLong(s));
        continue; /* Loop/switch isn't completed */
_L8:
        s = Float.valueOf((float)_parseDouble(s));
        continue; /* Loop/switch isn't completed */
_L9:
        s = Double.valueOf(_parseDouble(s));
        continue; /* Loop/switch isn't completed */
_L10:
        try {
            obj = _deser._deserialize(s, deserializationcontext);
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            throw deserializationcontext.weirdKeyException(_keyClass, s, "unable to parse key as locale");
        }
        s = ((String) (obj));
        continue; /* Loop/switch isn't completed */
_L17:
        try {
            obj = _deser._deserialize(s, deserializationcontext);
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            throw deserializationcontext.weirdKeyException(_keyClass, s, "unable to parse key as currency");
        }
        s = ((String) (obj));
        continue; /* Loop/switch isn't completed */
_L11:
        s = deserializationcontext.parseDate(s);
        continue; /* Loop/switch isn't completed */
_L12:
        Date date = deserializationcontext.parseDate(s);
        s = ((String) (obj));
        if (date != null)
            s = deserializationcontext.constructCalendar(date);
        continue; /* Loop/switch isn't completed */
_L13:
        s = UUID.fromString(s);
        continue; /* Loop/switch isn't completed */
_L14:
        s = URI.create(s);
        continue; /* Loop/switch isn't completed */
_L15:
        s = new URL(s);
        continue; /* Loop/switch isn't completed */
_L16:
        Class class1;
        try {
            class1 = deserializationcontext.findClass(s);
        }
        catch (Exception exception) {
            throw deserializationcontext.weirdKeyException(_keyClass, s, "unable to parse key as Class");
        }
        s = class1;
        if (true) goto _L19; else goto _L18
_L18:
    }

    protected double _parseDouble(String s) {
        return NumberInput.parseDouble(s);
    }

    protected int _parseInt(String s) {
        return Integer.parseInt(s);
    }

    protected long _parseLong(String s) {
        return Long.parseLong(s);
    }

    public Object deserializeKey(String s, DeserializationContext deserializationcontext) {
        Object obj1 = null;
        if (s != null) goto _L2; else goto _L1
_L1:
        Object obj = obj1;
_L3:
        return obj;
_L2:
        try {
            obj = _parse(s, deserializationcontext);
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            throw deserializationcontext.weirdKeyException(_keyClass, s, (new StringBuilder()).append("not a valid representation: ").append(((Exception) (obj)).getMessage()).toString());
        }
        if (obj == null) goto _L4; else goto _L3
_L4:
        if (!_keyClass.isEnum())
            break; /* Loop/switch isn't completed */
        obj = obj1;
        if (deserializationcontext.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) goto _L3; else goto _L5
_L5:
        throw deserializationcontext.weirdKeyException(_keyClass, s, "not a valid representation");
    }

    public Class getKeyClass() {
        return _keyClass;
    }
}
