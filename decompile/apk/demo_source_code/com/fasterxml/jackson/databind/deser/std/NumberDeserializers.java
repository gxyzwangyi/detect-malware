// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.HashSet;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            StdScalarDeserializer

public class NumberDeserializers {
    public static class BigDecimalDeserializer extends StdScalarDeserializer {

        public static final BigDecimalDeserializer instance = new BigDecimalDeserializer();

        public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return deserialize(jsonparser, deserializationcontext);
        }

        public BigDecimal deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            jsonparser.getCurrentTokenId();
            JVM INSTR tableswitch 3 8: default 44
        //                       3 109
        //                       4 44
        //                       5 44
        //                       6 64
        //                       7 57
        //                       8 57;
               goto _L1 _L2 _L1 _L1 _L3 _L4 _L4
_L1:
            throw deserializationcontext.mappingException(_valueClass, jsonparser.getCurrentToken());
_L4:
            Object obj = jsonparser.getDecimalValue();
_L6:
            return ((BigDecimal) (obj));
_L3:
            jsonparser = jsonparser.getText().trim();
            if (jsonparser.length() == 0)
                obj = null;
            else
                try {
                    obj = new BigDecimal(jsonparser);
                }
                // Misplaced declaration of an exception variable
                catch (Object obj) {
                    throw deserializationcontext.weirdStringException(jsonparser, _valueClass, "not a valid representation");
                }
            if (true)
                continue; /* Loop/switch isn't completed */
_L2:
            if (!deserializationcontext.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))
                continue; /* Loop/switch isn't completed */
            jsonparser.nextToken();
            obj = deserialize(jsonparser, deserializationcontext);
            if (jsonparser.nextToken() != JsonToken.END_ARRAY)
                throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'BigDecimal' value but there was more than a single value in the array");
            if (true) goto _L6; else goto _L5
_L5:
            if (true) goto _L1; else goto _L7
_L7:
        }


        public BigDecimalDeserializer() {
            super(java/math/BigDecimal);
        }
    }

    public static class BigIntegerDeserializer extends StdScalarDeserializer {

        public static final BigIntegerDeserializer instance = new BigIntegerDeserializer();

        public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return deserialize(jsonparser, deserializationcontext);
        }

        public BigInteger deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            jsonparser.getCurrentTokenId();
            JVM INSTR tableswitch 3 8: default 44
        //                       3 135
        //                       4 44
        //                       5 44
        //                       6 178
        //                       7 57
        //                       8 106;
               goto _L1 _L2 _L1 _L1 _L3 _L4 _L5
_L3:
            break MISSING_BLOCK_LABEL_178;
_L7:
            throw deserializationcontext.mappingException(_valueClass, jsonparser.getCurrentToken());
_L4:
            static class _cls1 {

                static final int $SwitchMap$com$fasterxml$jackson$core$JsonParser$NumberType[];

                static  {
                    $SwitchMap$com$fasterxml$jackson$core$JsonParser$NumberType = new int[com.fasterxml.jackson.core.JsonParser.NumberType.values().length];
                    NoSuchFieldError nosuchfielderror;
                    try {
                        $SwitchMap$com$fasterxml$jackson$core$JsonParser$NumberType[com.fasterxml.jackson.core.JsonParser.NumberType.INT.ordinal()] = 1;
                    }
                    catch (NoSuchFieldError nosuchfielderror2) { }
                    try {
                        $SwitchMap$com$fasterxml$jackson$core$JsonParser$NumberType[com.fasterxml.jackson.core.JsonParser.NumberType.LONG.ordinal()] = 2;
                    }
                    catch (NoSuchFieldError nosuchfielderror1) { }
                    $SwitchMap$com$fasterxml$jackson$core$JsonParser$NumberType[com.fasterxml.jackson.core.JsonParser.NumberType.BIG_INTEGER.ordinal()] = 3;
_L2:
                    return;
                    nosuchfielderror;
                    if (true) goto _L2; else goto _L1
_L1:
                }
            }

            BigInteger biginteger;
            switch (_cls1..SwitchMap.com.fasterxml.jackson.core.JsonParser.NumberType[jsonparser.getNumberType().ordinal()]) {
            default:
                break;

            case 1: // '\001'
            case 2: // '\002'
            case 3: // '\003'
                biginteger = jsonparser.getBigIntegerValue();
                break; /* Loop/switch isn't completed */
            }
_L1:
            if (true) goto _L7; else goto _L6
_L6:
            return biginteger;
_L5:
            if (!deserializationcontext.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT))
                _failDoubleToIntCoercion(jsonparser, deserializationcontext, "java.math.BigInteger");
            biginteger = jsonparser.getDecimalValue().toBigInteger();
              goto _L6
_L2:
            if (!deserializationcontext.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) goto _L7; else goto _L8
_L8:
            jsonparser.nextToken();
            biginteger = deserialize(jsonparser, deserializationcontext);
            if (jsonparser.nextToken() == JsonToken.END_ARRAY) goto _L6; else goto _L9
_L9:
            throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'BigInteger' value but there was more than a single value in the array");
            jsonparser = jsonparser.getText().trim();
            if (jsonparser.length() == 0)
                biginteger = null;
            else
                try {
                    biginteger = new BigInteger(jsonparser);
                }
                catch (IllegalArgumentException illegalargumentexception) {
                    throw deserializationcontext.weirdStringException(jsonparser, _valueClass, "not a valid representation");
                }
              goto _L6
        }


        public BigIntegerDeserializer() {
            super(java/math/BigInteger);
        }
    }

    public static final class BooleanDeserializer extends PrimitiveOrWrapperDeserializer {

        static final BooleanDeserializer primitiveInstance;
        private static final long serialVersionUID = 1L;
        static final BooleanDeserializer wrapperInstance = new BooleanDeserializer(java/lang/Boolean, null);

        public Boolean deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return _parseBoolean(jsonparser, deserializationcontext);
        }

        public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return deserialize(jsonparser, deserializationcontext);
        }

        public Boolean deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
            return _parseBoolean(jsonparser, deserializationcontext);
        }

        public volatile Object deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
            return deserializeWithType(jsonparser, deserializationcontext, typedeserializer);
        }

        static  {
            primitiveInstance = new BooleanDeserializer(Boolean.TYPE, Boolean.FALSE);
        }

        public BooleanDeserializer(Class class1, Boolean boolean1) {
            super(class1, boolean1);
        }
    }

    public static class ByteDeserializer extends PrimitiveOrWrapperDeserializer {

        static final ByteDeserializer primitiveInstance;
        private static final long serialVersionUID = 1L;
        static final ByteDeserializer wrapperInstance = new ByteDeserializer(java/lang/Byte, null);

        public Byte deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return _parseByte(jsonparser, deserializationcontext);
        }

        public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return deserialize(jsonparser, deserializationcontext);
        }

        static  {
            primitiveInstance = new ByteDeserializer(Byte.TYPE, Byte.valueOf((byte)0));
        }

        public ByteDeserializer(Class class1, Byte byte1) {
            super(class1, byte1);
        }
    }

    public static class CharacterDeserializer extends PrimitiveOrWrapperDeserializer {

        static final CharacterDeserializer primitiveInstance;
        private static final long serialVersionUID = 1L;
        static final CharacterDeserializer wrapperInstance = new CharacterDeserializer(java/lang/Character, null);

        public Character deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            jsonparser.getCurrentTokenId();
            JVM INSTR tableswitch 3 7: default 40
        //                       3 128
        //                       4 40
        //                       5 40
        //                       6 78
        //                       7 53;
               goto _L1 _L2 _L1 _L1 _L3 _L4
_L1:
            int i;
            throw deserializationcontext.mappingException(_valueClass, jsonparser.getCurrentToken());
_L4:
            if ((i = jsonparser.getIntValue()) < 0 || i > 65535) goto _L1; else goto _L5
_L5:
            Object obj = Character.valueOf((char)i);
_L6:
            return ((Character) (obj));
_L3:
            obj = jsonparser.getText();
            if (((String) (obj)).length() != 1)
                continue; /* Loop/switch isn't completed */
            obj = Character.valueOf(((String) (obj)).charAt(0));
              goto _L6
            if (((String) (obj)).length() != 0) goto _L1; else goto _L7
_L7:
            obj = (Character)getEmptyValue(deserializationcontext);
              goto _L6
_L2:
            if (!deserializationcontext.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) goto _L1; else goto _L8
_L8:
            jsonparser.nextToken();
            obj = deserialize(jsonparser, deserializationcontext);
            if (jsonparser.nextToken() != JsonToken.END_ARRAY)
                throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.END_ARRAY, (new StringBuilder()).append("Attempted to unwrap single value array for single '").append(_valueClass.getName()).append("' value but there was more than a single value in the array").toString());
              goto _L6
        }

        public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return deserialize(jsonparser, deserializationcontext);
        }

        static  {
            primitiveInstance = new CharacterDeserializer(Character.TYPE, Character.valueOf('\0'));
        }

        public CharacterDeserializer(Class class1, Character character) {
            super(class1, character);
        }
    }

    public static class DoubleDeserializer extends PrimitiveOrWrapperDeserializer {

        static final DoubleDeserializer primitiveInstance;
        private static final long serialVersionUID = 1L;
        static final DoubleDeserializer wrapperInstance = new DoubleDeserializer(java/lang/Double, null);

        public Double deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return _parseDouble(jsonparser, deserializationcontext);
        }

        public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return deserialize(jsonparser, deserializationcontext);
        }

        public Double deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
            return _parseDouble(jsonparser, deserializationcontext);
        }

        public volatile Object deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
            return deserializeWithType(jsonparser, deserializationcontext, typedeserializer);
        }

        static  {
            primitiveInstance = new DoubleDeserializer(Double.TYPE, Double.valueOf(0.0D));
        }

        public DoubleDeserializer(Class class1, Double double1) {
            super(class1, double1);
        }
    }

    public static class FloatDeserializer extends PrimitiveOrWrapperDeserializer {

        static final FloatDeserializer primitiveInstance;
        private static final long serialVersionUID = 1L;
        static final FloatDeserializer wrapperInstance = new FloatDeserializer(java/lang/Float, null);

        public Float deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return _parseFloat(jsonparser, deserializationcontext);
        }

        public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return deserialize(jsonparser, deserializationcontext);
        }

        static  {
            primitiveInstance = new FloatDeserializer(Float.TYPE, Float.valueOf(0.0F));
        }

        public FloatDeserializer(Class class1, Float float1) {
            super(class1, float1);
        }
    }

    public static final class IntegerDeserializer extends PrimitiveOrWrapperDeserializer {

        static final IntegerDeserializer primitiveInstance;
        private static final long serialVersionUID = 1L;
        static final IntegerDeserializer wrapperInstance = new IntegerDeserializer(java/lang/Integer, null);

        public Integer deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            if (jsonparser.hasToken(JsonToken.VALUE_NUMBER_INT))
                jsonparser = Integer.valueOf(jsonparser.getIntValue());
            else
                jsonparser = _parseInteger(jsonparser, deserializationcontext);
            return jsonparser;
        }

        public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return deserialize(jsonparser, deserializationcontext);
        }

        public Integer deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
            if (jsonparser.hasToken(JsonToken.VALUE_NUMBER_INT))
                jsonparser = Integer.valueOf(jsonparser.getIntValue());
            else
                jsonparser = _parseInteger(jsonparser, deserializationcontext);
            return jsonparser;
        }

        public volatile Object deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
            return deserializeWithType(jsonparser, deserializationcontext, typedeserializer);
        }

        public boolean isCachable() {
            return true;
        }

        static  {
            primitiveInstance = new IntegerDeserializer(Integer.TYPE, Integer.valueOf(0));
        }

        public IntegerDeserializer(Class class1, Integer integer) {
            super(class1, integer);
        }
    }

    public static final class LongDeserializer extends PrimitiveOrWrapperDeserializer {

        static final LongDeserializer primitiveInstance;
        private static final long serialVersionUID = 1L;
        static final LongDeserializer wrapperInstance = new LongDeserializer(java/lang/Long, null);

        public Long deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            if (jsonparser.hasToken(JsonToken.VALUE_NUMBER_INT))
                jsonparser = Long.valueOf(jsonparser.getLongValue());
            else
                jsonparser = _parseLong(jsonparser, deserializationcontext);
            return jsonparser;
        }

        public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return deserialize(jsonparser, deserializationcontext);
        }

        public boolean isCachable() {
            return true;
        }

        static  {
            primitiveInstance = new LongDeserializer(Long.TYPE, Long.valueOf(0L));
        }

        public LongDeserializer(Class class1, Long long1) {
            super(class1, long1);
        }
    }

    public static class NumberDeserializer extends StdScalarDeserializer {

        public static final NumberDeserializer instance = new NumberDeserializer();

        public Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            jsonparser.getCurrentTokenId();
            JVM INSTR tableswitch 3 8: default 44
        //                       3 349
        //                       4 44
        //                       5 44
        //                       6 118
        //                       7 57
        //                       8 87;
               goto _L1 _L2 _L1 _L1 _L3 _L4 _L5
_L1:
            throw deserializationcontext.mappingException(_valueClass, jsonparser.getCurrentToken());
_L4:
            Object obj;
            if (deserializationcontext.hasSomeOfFeatures(F_MASK_INT_COERCIONS))
                obj = _coerceIntegral(jsonparser, deserializationcontext);
            else
                obj = jsonparser.getNumberValue();
_L6:
            return obj;
_L5:
            if (deserializationcontext.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS))
                obj = jsonparser.getDecimalValue();
            else
                obj = Double.valueOf(jsonparser.getDoubleValue());
            continue; /* Loop/switch isn't completed */
_L3:
            jsonparser = jsonparser.getText().trim();
            if (jsonparser.length() == 0) {
                obj = getEmptyValue(deserializationcontext);
                continue; /* Loop/switch isn't completed */
            }
            if (_hasTextualNull(jsonparser)) {
                obj = getNullValue(deserializationcontext);
                continue; /* Loop/switch isn't completed */
            }
            if (_isPosInf(jsonparser)) {
                obj = Double.valueOf((1.0D / 0.0D));
                continue; /* Loop/switch isn't completed */
            }
            if (_isNegInf(jsonparser)) {
                obj = Double.valueOf((-1.0D / 0.0D));
                continue; /* Loop/switch isn't completed */
            }
            if (_isNaN(jsonparser)) {
                obj = Double.valueOf((0.0D / 0.0D));
                continue; /* Loop/switch isn't completed */
            }
            if (!_isIntNumber(jsonparser)) {
                if (deserializationcontext.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {
                    obj = new BigDecimal(jsonparser);
                    continue; /* Loop/switch isn't completed */
                }
                try {
                    obj = new Double(jsonparser);
                }
                // Misplaced declaration of an exception variable
                catch (Object obj) {
                    throw deserializationcontext.weirdStringException(jsonparser, _valueClass, "not a valid number");
                }
                continue; /* Loop/switch isn't completed */
            }
            if (deserializationcontext.isEnabled(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS)) {
                obj = new BigInteger(jsonparser);
                continue; /* Loop/switch isn't completed */
            }
            long l = Long.parseLong(jsonparser);
            if (deserializationcontext.isEnabled(DeserializationFeature.USE_LONG_FOR_INTS) || l > 0x7fffffffL || l < 0x80000000L)
                break MISSING_BLOCK_LABEL_340;
            obj = Integer.valueOf((int)l);
            continue; /* Loop/switch isn't completed */
            obj = Long.valueOf(l);
            if (true) goto _L6; else goto _L2
_L2:
            if (!deserializationcontext.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))
                continue; /* Loop/switch isn't completed */
            jsonparser.nextToken();
            obj = deserialize(jsonparser, deserializationcontext);
            if (jsonparser.nextToken() != JsonToken.END_ARRAY)
                throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.END_ARRAY, (new StringBuilder()).append("Attempted to unwrap single value array for single '").append(_valueClass.getName()).append("' value but there was more than a single value in the array").toString());
            if (true) goto _L6; else goto _L7
_L7:
            if (true) goto _L1; else goto _L8
_L8:
        }

        public Object deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
            jsonparser.getCurrentTokenId();
            JVM INSTR tableswitch 6 8: default 32
        //                       6 41
        //                       7 41
        //                       8 41;
               goto _L1 _L2 _L2 _L2
_L1:
            jsonparser = ((JsonParser) (typedeserializer.deserializeTypedFromScalar(jsonparser, deserializationcontext)));
_L4:
            return jsonparser;
_L2:
            jsonparser = ((JsonParser) (deserialize(jsonparser, deserializationcontext)));
            if (true) goto _L4; else goto _L3
_L3:
        }


        public NumberDeserializer() {
            super(java/lang/Number);
        }
    }

    protected static abstract class PrimitiveOrWrapperDeserializer extends StdScalarDeserializer {

        private static final long serialVersionUID = 1L;
        protected final Object _nullValue;
        protected final boolean _primitive;

        public Object getEmptyValue(DeserializationContext deserializationcontext) {
            if (_primitive && deserializationcontext.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES))
                throw deserializationcontext.mappingException("Can not map Empty String as null into type %s (set DeserializationConfig.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES to 'false' to allow)", new Object[] {
                    handledType().toString()
                });
            else
                return _nullValue;
        }

        public final Object getNullValue() {
            return _nullValue;
        }

        public final Object getNullValue(DeserializationContext deserializationcontext) {
            if (_primitive && deserializationcontext.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES))
                throw deserializationcontext.mappingException("Can not map JSON null into type %s (set DeserializationConfig.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES to 'false' to allow)", new Object[] {
                    handledType().toString()
                });
            else
                return _nullValue;
        }

        protected PrimitiveOrWrapperDeserializer(Class class1, Object obj) {
            super(class1);
            _nullValue = obj;
            _primitive = class1.isPrimitive();
        }
    }

    public static class ShortDeserializer extends PrimitiveOrWrapperDeserializer {

        static final ShortDeserializer primitiveInstance;
        private static final long serialVersionUID = 1L;
        static final ShortDeserializer wrapperInstance = new ShortDeserializer(java/lang/Short, null);

        public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return deserialize(jsonparser, deserializationcontext);
        }

        public Short deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return _parseShort(jsonparser, deserializationcontext);
        }

        static  {
            primitiveInstance = new ShortDeserializer(Short.TYPE, Short.valueOf((short)0));
        }

        public ShortDeserializer(Class class1, Short short1) {
            super(class1, short1);
        }
    }


    private static final HashSet _classNames;

    public NumberDeserializers() {
    }

    public static JsonDeserializer find(Class class1, String s) {
        if (!class1.isPrimitive()) goto _L2; else goto _L1
_L1:
        if (class1 != Integer.TYPE) goto _L4; else goto _L3
_L3:
        class1 = IntegerDeserializer.primitiveInstance;
_L6:
        return class1;
_L4:
        if (class1 == Boolean.TYPE) {
            class1 = BooleanDeserializer.primitiveInstance;
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == Long.TYPE) {
            class1 = LongDeserializer.primitiveInstance;
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == Double.TYPE) {
            class1 = DoubleDeserializer.primitiveInstance;
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == Character.TYPE) {
            class1 = CharacterDeserializer.primitiveInstance;
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == Byte.TYPE) {
            class1 = ByteDeserializer.primitiveInstance;
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == Short.TYPE) {
            class1 = ShortDeserializer.primitiveInstance;
            continue; /* Loop/switch isn't completed */
        }
        if (class1 != Float.TYPE)
            break; /* Loop/switch isn't completed */
        class1 = FloatDeserializer.primitiveInstance;
        continue; /* Loop/switch isn't completed */
_L2:
        if (_classNames.contains(s)) {
            if (class1 == java/lang/Integer) {
                class1 = IntegerDeserializer.wrapperInstance;
                continue; /* Loop/switch isn't completed */
            }
            if (class1 == java/lang/Boolean) {
                class1 = BooleanDeserializer.wrapperInstance;
                continue; /* Loop/switch isn't completed */
            }
            if (class1 == java/lang/Long) {
                class1 = LongDeserializer.wrapperInstance;
                continue; /* Loop/switch isn't completed */
            }
            if (class1 == java/lang/Double) {
                class1 = DoubleDeserializer.wrapperInstance;
                continue; /* Loop/switch isn't completed */
            }
            if (class1 == java/lang/Character) {
                class1 = CharacterDeserializer.wrapperInstance;
                continue; /* Loop/switch isn't completed */
            }
            if (class1 == java/lang/Byte) {
                class1 = ByteDeserializer.wrapperInstance;
                continue; /* Loop/switch isn't completed */
            }
            if (class1 == java/lang/Short) {
                class1 = ShortDeserializer.wrapperInstance;
                continue; /* Loop/switch isn't completed */
            }
            if (class1 == java/lang/Float) {
                class1 = FloatDeserializer.wrapperInstance;
                continue; /* Loop/switch isn't completed */
            }
            if (class1 == java/lang/Number) {
                class1 = NumberDeserializer.instance;
                continue; /* Loop/switch isn't completed */
            }
            if (class1 == java/math/BigDecimal) {
                class1 = BigDecimalDeserializer.instance;
                continue; /* Loop/switch isn't completed */
            }
            if (class1 != java/math/BigInteger)
                break; /* Loop/switch isn't completed */
            class1 = BigIntegerDeserializer.instance;
        } else {
            class1 = null;
        }
        if (true) goto _L6; else goto _L5
_L5:
        throw new IllegalArgumentException((new StringBuilder()).append("Internal error: can't find deserializer for ").append(class1.getName()).toString());
    }

    static  {
        int i = 0;
        _classNames = new HashSet();
        Class aclass[] = new Class[11];
        aclass[0] = java/lang/Boolean;
        aclass[1] = java/lang/Byte;
        aclass[2] = java/lang/Short;
        aclass[3] = java/lang/Character;
        aclass[4] = java/lang/Integer;
        aclass[5] = java/lang/Long;
        aclass[6] = java/lang/Float;
        aclass[7] = java/lang/Double;
        aclass[8] = java/lang/Number;
        aclass[9] = java/math/BigDecimal;
        aclass[10] = java/math/BigInteger;
        for (int j = aclass.length; i < j; i++) {
            Class class1 = aclass[i];
            _classNames.add(class1.getName());
        }

    }
}
