// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.ContextualDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.util.ObjectBuffer;
import java.lang.reflect.Array;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            ContainerDeserializerBase

public class ObjectArrayDeserializer extends ContainerDeserializerBase
    implements ContextualDeserializer {

    private static final long serialVersionUID = 1L;
    protected final ArrayType _arrayType;
    protected final Class _elementClass;
    protected JsonDeserializer _elementDeserializer;
    protected final TypeDeserializer _elementTypeDeserializer;
    protected final boolean _untyped;
    protected final Boolean _unwrapSingle;

    protected ObjectArrayDeserializer(ObjectArrayDeserializer objectarraydeserializer, JsonDeserializer jsondeserializer, TypeDeserializer typedeserializer, Boolean boolean1) {
        super(objectarraydeserializer._arrayType);
        _arrayType = objectarraydeserializer._arrayType;
        _elementClass = objectarraydeserializer._elementClass;
        _untyped = objectarraydeserializer._untyped;
        _elementDeserializer = jsondeserializer;
        _elementTypeDeserializer = typedeserializer;
        _unwrapSingle = boolean1;
    }

    public ObjectArrayDeserializer(ArrayType arraytype, JsonDeserializer jsondeserializer, TypeDeserializer typedeserializer) {
        super(arraytype);
        _arrayType = arraytype;
        _elementClass = arraytype.getContentType().getRawClass();
        boolean flag;
        if (_elementClass == java/lang/Object)
            flag = true;
        else
            flag = false;
        _untyped = flag;
        _elementDeserializer = jsondeserializer;
        _elementTypeDeserializer = typedeserializer;
        _unwrapSingle = null;
    }

    public JsonDeserializer createContextual(DeserializationContext deserializationcontext, BeanProperty beanproperty) {
        Object obj = _elementDeserializer;
        Boolean boolean1 = findFormatFeature(deserializationcontext, beanproperty, _arrayType.getRawClass(), com.fasterxml.jackson.annotation.JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
        Object obj1 = findConvertingContentDeserializer(deserializationcontext, beanproperty, ((JsonDeserializer) (obj)));
        obj = _arrayType.getContentType();
        if (obj1 == null)
            deserializationcontext = deserializationcontext.findContextualValueDeserializer(((JavaType) (obj)), beanproperty);
        else
            deserializationcontext = deserializationcontext.handleSecondaryContextualization(((JsonDeserializer) (obj1)), beanproperty, ((JavaType) (obj)));
        obj1 = _elementTypeDeserializer;
        obj = obj1;
        if (obj1 != null)
            obj = ((TypeDeserializer) (obj1)).forProperty(beanproperty);
        return withResolved(((TypeDeserializer) (obj)), deserializationcontext, boolean1);
    }

    public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        return ((Object) (deserialize(jsonparser, deserializationcontext)));
    }

    public Object[] deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (jsonparser.isExpectedStartArrayToken()) goto _L2; else goto _L1
_L1:
        jsonparser = ((JsonParser) (handleNonArray(jsonparser, deserializationcontext)));
_L8:
        return jsonparser;
_L2:
        int i;
        Object aobj[];
        ObjectBuffer objectbuffer;
        TypeDeserializer typedeserializer;
        objectbuffer = deserializationcontext.leaseObjectBuffer();
        aobj = objectbuffer.resetAndStart();
        typedeserializer = _elementTypeDeserializer;
        i = 0;
_L5:
        int j;
        Object obj;
        Object aobj1[];
        j = i;
        aobj1 = aobj;
        try {
            obj = jsonparser.nextToken();
        }
        // Misplaced declaration of an exception variable
        catch (JsonParser jsonparser) {
            throw JsonMappingException.wrapWithPath(jsonparser, ((Object) (aobj1)), j + objectbuffer.bufferedSize());
        }
        j = i;
        aobj1 = aobj;
        if (obj == JsonToken.END_ARRAY)
            break MISSING_BLOCK_LABEL_211;
        j = i;
        aobj1 = aobj;
        if (obj != JsonToken.VALUE_NULL) goto _L4; else goto _L3
_L3:
        j = i;
        aobj1 = aobj;
        obj = _elementDeserializer.getNullValue(deserializationcontext);
_L6:
        j = i;
        aobj1 = aobj;
        if (i < aobj.length)
            break MISSING_BLOCK_LABEL_129;
        j = i;
        aobj1 = aobj;
        aobj = objectbuffer.appendCompletedChunk(aobj);
        i = 0;
        j = i + 1;
        aobj[i] = obj;
        i = j;
          goto _L5
_L4:
        if (typedeserializer != null)
            break MISSING_BLOCK_LABEL_188;
        j = i;
        aobj1 = aobj;
        obj = _elementDeserializer.deserialize(jsonparser, deserializationcontext);
          goto _L6
        j = i;
        aobj1 = aobj;
        obj = _elementDeserializer.deserializeWithType(jsonparser, deserializationcontext, typedeserializer);
          goto _L6
        if (_untyped)
            jsonparser = ((JsonParser) (objectbuffer.completeAndClearBuffer(aobj, i)));
        else
            jsonparser = ((JsonParser) (objectbuffer.completeAndClearBuffer(aobj, i, _elementClass)));
        deserializationcontext.returnObjectBuffer(objectbuffer);
        if (true) goto _L8; else goto _L7
_L7:
    }

    protected Byte[] deserializeFromBase64(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        jsonparser = jsonparser.getBinaryValue(deserializationcontext.getBase64Variant());
        deserializationcontext = new Byte[jsonparser.length];
        int i = 0;
        for (int j = jsonparser.length; i < j; i++)
            deserializationcontext[i] = Byte.valueOf(jsonparser[i]);

        return deserializationcontext;
    }

    public volatile Object deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
        return ((Object) (deserializeWithType(jsonparser, deserializationcontext, typedeserializer)));
    }

    public Object[] deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
        return (Object[])(Object[])typedeserializer.deserializeTypedFromArray(jsonparser, deserializationcontext);
    }

    public JsonDeserializer getContentDeserializer() {
        return _elementDeserializer;
    }

    public JavaType getContentType() {
        return _arrayType.getContentType();
    }

    protected Object[] handleNonArray(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (!jsonparser.hasToken(JsonToken.VALUE_STRING) || !deserializationcontext.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT) || jsonparser.getText().length() != 0) goto _L2; else goto _L1
_L1:
        deserializationcontext = null;
_L8:
        return deserializationcontext;
_L2:
        boolean flag;
        if (_unwrapSingle == Boolean.TRUE || _unwrapSingle == null && deserializationcontext.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY))
            flag = true;
        else
            flag = false;
        if (flag) goto _L4; else goto _L3
_L3:
        if (jsonparser.getCurrentToken() == JsonToken.VALUE_STRING && _elementClass == java/lang/Byte)
            deserializationcontext = deserializeFromBase64(jsonparser, deserializationcontext);
        else
            throw deserializationcontext.mappingException(_arrayType.getRawClass());
          goto _L5
_L4:
        if (jsonparser.getCurrentToken() != JsonToken.VALUE_NULL) goto _L7; else goto _L6
_L6:
        jsonparser = ((JsonParser) (_elementDeserializer.getNullValue(deserializationcontext)));
_L9:
        if (_untyped)
            deserializationcontext = ((DeserializationContext) (new Object[1]));
        else
            deserializationcontext = ((DeserializationContext) ((Object[])(Object[])Array.newInstance(_elementClass, 1)));
        deserializationcontext[0] = jsonparser;
_L5:
        if (true) goto _L8; else goto _L7
_L7:
        if (_elementTypeDeserializer == null)
            jsonparser = ((JsonParser) (_elementDeserializer.deserialize(jsonparser, deserializationcontext)));
        else
            jsonparser = ((JsonParser) (_elementDeserializer.deserializeWithType(jsonparser, deserializationcontext, _elementTypeDeserializer)));
          goto _L9
    }

    public boolean isCachable() {
        boolean flag;
        if (_elementDeserializer == null && _elementTypeDeserializer == null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public ObjectArrayDeserializer withDeserializer(TypeDeserializer typedeserializer, JsonDeserializer jsondeserializer) {
        return withResolved(typedeserializer, jsondeserializer, _unwrapSingle);
    }

    public ObjectArrayDeserializer withResolved(TypeDeserializer typedeserializer, JsonDeserializer jsondeserializer, Boolean boolean1) {
        if (boolean1 == _unwrapSingle && jsondeserializer == _elementDeserializer && typedeserializer == _elementTypeDeserializer)
            typedeserializer = this;
        else
            typedeserializer = new ObjectArrayDeserializer(this, jsondeserializer, typedeserializer, boolean1);
        return typedeserializer;
    }
}
