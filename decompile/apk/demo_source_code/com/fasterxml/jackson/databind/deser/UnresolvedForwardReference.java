// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser;

import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
import java.util.*;

// Referenced classes of package com.fasterxml.jackson.databind.deser:
//            UnresolvedId

public class UnresolvedForwardReference extends JsonMappingException {

    private static final long serialVersionUID = 1L;
    private ReadableObjectId _roid;
    private List _unresolvedIds;

    public UnresolvedForwardReference(JsonParser jsonparser, String s) {
        super(jsonparser, s);
        _unresolvedIds = new ArrayList();
    }

    public UnresolvedForwardReference(JsonParser jsonparser, String s, JsonLocation jsonlocation, ReadableObjectId readableobjectid) {
        super(jsonparser, s, jsonlocation);
        _roid = readableobjectid;
    }

    public UnresolvedForwardReference(String s) {
        super(s);
        _unresolvedIds = new ArrayList();
    }

    public UnresolvedForwardReference(String s, JsonLocation jsonlocation, ReadableObjectId readableobjectid) {
        super(s, jsonlocation);
        _roid = readableobjectid;
    }

    public void addUnresolvedId(Object obj, Class class1, JsonLocation jsonlocation) {
        _unresolvedIds.add(new UnresolvedId(obj, class1, jsonlocation));
    }

    public String getMessage() {
        Object obj = super.getMessage();
        if (_unresolvedIds != null) {
            StringBuilder stringbuilder = new StringBuilder(((String) (obj)));
            obj = _unresolvedIds.iterator();
            do {
                if (!((Iterator) (obj)).hasNext())
                    break;
                stringbuilder.append(((UnresolvedId)((Iterator) (obj)).next()).toString());
                if (((Iterator) (obj)).hasNext())
                    stringbuilder.append(", ");
            } while (true);
            stringbuilder.append('.');
            obj = stringbuilder.toString();
        }
        return ((String) (obj));
    }

    public ReadableObjectId getRoid() {
        return _roid;
    }

    public Object getUnresolvedId() {
        return _roid.getKey().key;
    }

    public List getUnresolvedIds() {
        return _unresolvedIds;
    }
}
