// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser;

import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.deser.impl.CreatorCollector;
import com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer;
import com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer;
import com.fasterxml.jackson.databind.deser.std.CollectionDeserializer;
import com.fasterxml.jackson.databind.deser.std.DateDeserializers;
import com.fasterxml.jackson.databind.deser.std.EnumDeserializer;
import com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer;
import com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer;
import com.fasterxml.jackson.databind.deser.std.JdkDeserializers;
import com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator;
import com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer;
import com.fasterxml.jackson.databind.deser.std.MapDeserializer;
import com.fasterxml.jackson.databind.deser.std.MapEntryDeserializer;
import com.fasterxml.jackson.databind.deser.std.NumberDeserializers;
import com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer;
import com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer;
import com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer;
import com.fasterxml.jackson.databind.deser.std.StringDeserializer;
import com.fasterxml.jackson.databind.deser.std.TokenBufferDeserializer;
import com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer;
import com.fasterxml.jackson.databind.ext.OptionalHandlerFactory;
import com.fasterxml.jackson.databind.introspect.*;
import com.fasterxml.jackson.databind.jsontype.*;
import com.fasterxml.jackson.databind.type.*;
import com.fasterxml.jackson.databind.util.*;
import java.io.Serializable;
import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicReference;

// Referenced classes of package com.fasterxml.jackson.databind.deser:
//            DeserializerFactory, SettableBeanProperty, Deserializers, ValueInstantiator, 
//            CreatorProperty, BeanDeserializerModifier, AbstractDeserializer, KeyDeserializers, 
//            ValueInstantiators

public abstract class BasicDeserializerFactory extends DeserializerFactory
    implements Serializable {

    private static final Class CLASS_CHAR_BUFFER = java/lang/CharSequence;
    private static final Class CLASS_ITERABLE = java/lang/Iterable;
    private static final Class CLASS_MAP_ENTRY = java/util/Map$Entry;
    private static final Class CLASS_OBJECT = java/lang/Object;
    private static final Class CLASS_STRING = java/lang/String;
    protected static final PropertyName UNWRAPPED_CREATOR_PARAM_NAME = new PropertyName("@JsonUnwrapped");
    static final HashMap _collectionFallbacks;
    static final HashMap _mapFallbacks;
    protected final DeserializerFactoryConfig _factoryConfig;

    protected BasicDeserializerFactory(DeserializerFactoryConfig deserializerfactoryconfig) {
        _factoryConfig = deserializerfactoryconfig;
    }

    private KeyDeserializer _createEnumKeyDeserializer(DeserializationContext deserializationcontext, JavaType javatype) {
        KeyDeserializer keydeserializer;
        Class class1;
        DeserializationConfig deserializationconfig;
        BeanDescription beandescription;
        deserializationconfig = deserializationcontext.getConfig();
        class1 = javatype.getRawClass();
        beandescription = deserializationconfig.introspect(javatype);
        keydeserializer = findKeyDeserializerFromAnnotation(deserializationcontext, beandescription.getClassInfo());
        if (keydeserializer == null) goto _L2; else goto _L1
_L1:
        deserializationcontext = keydeserializer;
_L4:
        return deserializationcontext;
_L2:
        Object obj = _findCustomEnumDeserializer(class1, deserializationconfig, beandescription);
        if (obj != null) {
            deserializationcontext = StdKeyDeserializers.constructDelegatingKeyDeserializer(deserializationconfig, javatype, ((JsonDeserializer) (obj)));
            continue; /* Loop/switch isn't completed */
        }
        obj = findDeserializerFromAnnotation(deserializationcontext, beandescription.getClassInfo());
        if (obj != null) {
            deserializationcontext = StdKeyDeserializers.constructDelegatingKeyDeserializer(deserializationconfig, javatype, ((JsonDeserializer) (obj)));
            continue; /* Loop/switch isn't completed */
        }
        obj = constructEnumResolver(class1, deserializationconfig, beandescription.findJsonValueMethod());
        javatype = deserializationconfig.getAnnotationIntrospector();
        for (Iterator iterator = beandescription.getFactoryMethods().iterator(); iterator.hasNext();) {
            AnnotatedMethod annotatedmethod = (AnnotatedMethod)iterator.next();
            if (javatype.hasCreatorAnnotation(annotatedmethod)) {
                if (annotatedmethod.getParameterCount() == 1 && annotatedmethod.getRawReturnType().isAssignableFrom(class1)) {
                    if (annotatedmethod.getRawParameterType(0) != java/lang/String)
                        throw new IllegalArgumentException((new StringBuilder()).append("Parameter #0 type for factory method (").append(annotatedmethod).append(") not suitable, must be java.lang.String").toString());
                    if (deserializationconfig.canOverrideAccessModifiers())
                        ClassUtil.checkAndFixAccess(annotatedmethod.getMember(), deserializationcontext.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
                    deserializationcontext = StdKeyDeserializers.constructEnumKeyDeserializer(((EnumResolver) (obj)), annotatedmethod);
                } else {
                    throw new IllegalArgumentException((new StringBuilder()).append("Unsuitable method (").append(annotatedmethod).append(") decorated with @JsonCreator (for Enum type ").append(class1.getName()).append(")").toString());
                }
                continue; /* Loop/switch isn't completed */
            }
        }

        deserializationcontext = StdKeyDeserializers.constructEnumKeyDeserializer(((EnumResolver) (obj)));
        if (true) goto _L4; else goto _L3
_L3:
    }

    private ValueInstantiator _findStdValueInstantiator(DeserializationConfig deserializationconfig, BeanDescription beandescription) {
        if (beandescription.getBeanClass() == com/fasterxml/jackson/core/JsonLocation)
            deserializationconfig = new JsonLocationInstantiator();
        else
            deserializationconfig = null;
        return deserializationconfig;
    }

    private JavaType _mapAbstractType2(DeserializationConfig deserializationconfig, JavaType javatype) {
        Class class1 = javatype.getRawClass();
        if (!_factoryConfig.hasAbstractTypeResolvers()) goto _L2; else goto _L1
_L1:
        Iterator iterator = _factoryConfig.abstractTypeResolvers().iterator();
_L5:
        if (!iterator.hasNext()) goto _L2; else goto _L3
_L3:
        JavaType javatype1 = ((AbstractTypeResolver)iterator.next()).findTypeMapping(deserializationconfig, javatype);
        if (javatype1 == null || javatype1.getRawClass() == class1) goto _L5; else goto _L4
_L4:
        deserializationconfig = javatype1;
_L7:
        return deserializationconfig;
_L2:
        deserializationconfig = null;
        if (true) goto _L7; else goto _L6
_L6:
    }

    protected void _addDeserializerConstructors(DeserializationContext deserializationcontext, BeanDescription beandescription, VisibilityChecker visibilitychecker, AnnotationIntrospector annotationintrospector, CreatorCollector creatorcollector, Map map) {
        LinkedList linkedlist;
        Iterator iterator;
        AnnotatedConstructor annotatedconstructor = beandescription.findDefaultConstructor();
        if (annotatedconstructor != null && (!creatorcollector.hasDefaultCreator() || annotationintrospector.hasCreatorAnnotation(annotatedconstructor)))
            creatorcollector.setDefaultCreator(annotatedconstructor);
        linkedlist = null;
        iterator = beandescription.getConstructors().iterator();
_L12:
        if (!iterator.hasNext()) goto _L2; else goto _L1
_L1:
        int l2;
        boolean flag;
        AnnotatedConstructor annotatedconstructor1;
        BeanPropertyDefinition abeanpropertydefinition[];
        annotatedconstructor1 = (AnnotatedConstructor)iterator.next();
        flag = annotationintrospector.hasCreatorAnnotation(annotatedconstructor1);
        abeanpropertydefinition = (BeanPropertyDefinition[])map.get(annotatedconstructor1);
        l2 = annotatedconstructor1.getParameterCount();
        if (l2 != 1) goto _L4; else goto _L3
_L3:
        Object obj;
        if (abeanpropertydefinition == null)
            obj = null;
        else
            obj = abeanpropertydefinition[0];
        if (_checkIfCreatorPropertyBased(annotationintrospector, annotatedconstructor1, ((BeanPropertyDefinition) (obj)))) {
            AnnotatedParameter annotatedparameter;
            if (obj == null)
                obj = null;
            else
                obj = ((BeanPropertyDefinition) (obj)).getFullName();
            annotatedparameter = annotatedconstructor1.getParameter(0);
            creatorcollector.addPropertyCreator(annotatedconstructor1, flag, new SettableBeanProperty[] {
                constructCreatorProperty(deserializationcontext, beandescription, ((PropertyName) (obj)), 0, annotatedparameter, annotationintrospector.findInjectableValueId(annotatedparameter))
            });
        } else {
            _handleSingleArgumentConstructor(deserializationcontext, beandescription, visibilitychecker, annotationintrospector, creatorcollector, annotatedconstructor1, flag, visibilitychecker.isCreatorVisible(annotatedconstructor1));
            if (obj != null)
                ((POJOPropertyBuilder)obj).removeConstructors();
        }
          goto _L5
_L4:
        Object obj1 = null;
        SettableBeanProperty asettablebeanproperty[] = new SettableBeanProperty[l2];
        int k = 0;
        int i = 0;
        int j = 0;
        int l = 0;
        while (l < l2)  {
            AnnotatedParameter annotatedparameter1 = annotatedconstructor1.getParameter(l);
            int j1;
            Object obj2;
            PropertyName propertyname;
            Object obj3;
            if (abeanpropertydefinition == null)
                obj2 = null;
            else
                obj2 = abeanpropertydefinition[l];
            obj3 = annotationintrospector.findInjectableValueId(annotatedparameter1);
            if (obj2 == null)
                propertyname = null;
            else
                propertyname = ((BeanPropertyDefinition) (obj2)).getFullName();
            if (obj2 != null && ((BeanPropertyDefinition) (obj2)).isExplicitlyNamed()) {
                asettablebeanproperty[l] = constructCreatorProperty(deserializationcontext, beandescription, propertyname, l, annotatedparameter1, obj3);
                int i1 = j;
                k++;
                j = i;
                i = i1;
            } else
            if (obj3 != null) {
                asettablebeanproperty[l] = constructCreatorProperty(deserializationcontext, beandescription, propertyname, l, annotatedparameter1, obj3);
                int k1 = j + 1;
                j = i;
                i = k1;
            } else
            if (annotationintrospector.findUnwrappingNameTransformer(annotatedparameter1) != null) {
                asettablebeanproperty[l] = constructCreatorProperty(deserializationcontext, beandescription, UNWRAPPED_CREATOR_PARAM_NAME, l, annotatedparameter1, null);
                int l1 = i;
                k++;
                i = j;
                j = l1;
            } else
            if (flag && propertyname != null && !propertyname.isEmpty()) {
                asettablebeanproperty[l] = constructCreatorProperty(deserializationcontext, beandescription, propertyname, l, annotatedparameter1, obj3);
                int i2 = i + 1;
                i = j;
                j = i2;
            } else
            if (obj1 == null) {
                int j2 = j;
                j = i;
                i = j2;
                obj1 = annotatedparameter1;
            } else {
                int k2 = i;
                i = j;
                j = k2;
            }
            l++;
            j1 = j;
            j = i;
            i = j1;
        }
        if (!flag && k <= 0 && j <= 0) goto _L7; else goto _L6
_L6:
        if (k + i + j != l2) goto _L9; else goto _L8
_L8:
        creatorcollector.addPropertyCreator(annotatedconstructor1, flag, asettablebeanproperty);
          goto _L5
_L9:
        if (k != 0 || j + 1 != l2) goto _L11; else goto _L10
_L10:
        creatorcollector.addDelegatingCreator(annotatedconstructor1, flag, asettablebeanproperty);
          goto _L5
_L11:
        obj2 = _findImplicitParamName(((AnnotatedParameter) (obj1)), annotationintrospector);
        if (obj2 == null || ((PropertyName) (obj2)).isEmpty()) {
            i = ((AnnotatedParameter) (obj1)).getIndex();
            if (i == 0 && ClassUtil.isNonStaticInnerClass(annotatedconstructor1.getDeclaringClass()))
                throw new IllegalArgumentException((new StringBuilder()).append("Non-static inner classes like ").append(annotatedconstructor1.getDeclaringClass().getName()).append(" can not use @JsonCreator for constructors").toString());
            else
                throw new IllegalArgumentException((new StringBuilder()).append("Argument #").append(i).append(" of constructor ").append(annotatedconstructor1).append(" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator").toString());
        }
_L7:
        if (!creatorcollector.hasDefaultCreator()) {
            if (linkedlist == null)
                obj1 = new LinkedList();
            else
                obj1 = linkedlist;
            ((List) (obj1)).add(annotatedconstructor1);
        } else {
            obj1 = linkedlist;
        }
        linkedlist = ((LinkedList) (obj1));
_L5:
        if (true) goto _L12; else goto _L2
_L2:
        if (linkedlist != null && !creatorcollector.hasDelegatingCreator() && !creatorcollector.hasPropertyBasedCreator())
            _checkImplicitlyNamedConstructors(deserializationcontext, beandescription, visibilitychecker, annotationintrospector, creatorcollector, linkedlist);
        return;
    }

    protected void _addDeserializerFactoryMethods(DeserializationContext deserializationcontext, BeanDescription beandescription, VisibilityChecker visibilitychecker, AnnotationIntrospector annotationintrospector, CreatorCollector creatorcollector, Map map) {
        DeserializationConfig deserializationconfig = deserializationcontext.getConfig();
        Iterator iterator = beandescription.getFactoryMethods().iterator();
        do {
            if (!iterator.hasNext())
                break;
            AnnotatedMethod annotatedmethod = (AnnotatedMethod)iterator.next();
            boolean flag = annotationintrospector.hasCreatorAnnotation(annotatedmethod);
            int l1 = annotatedmethod.getParameterCount();
            if (l1 == 0) {
                if (flag)
                    creatorcollector.setDefaultCreator(annotatedmethod);
                continue;
            }
            BeanPropertyDefinition abeanpropertydefinition[] = (BeanPropertyDefinition[])map.get(annotatedmethod);
            if (l1 == 1) {
                BeanPropertyDefinition beanpropertydefinition;
                if (abeanpropertydefinition == null)
                    beanpropertydefinition = null;
                else
                    beanpropertydefinition = abeanpropertydefinition[0];
                if (!_checkIfCreatorPropertyBased(annotationintrospector, annotatedmethod, beanpropertydefinition)) {
                    _handleSingleArgumentFactory(deserializationconfig, beandescription, visibilitychecker, annotationintrospector, creatorcollector, annotatedmethod, flag);
                    continue;
                }
            } else
            if (!flag)
                continue;
            BeanPropertyDefinition beanpropertydefinition1 = null;
            SettableBeanProperty asettablebeanproperty[] = new SettableBeanProperty[l1];
            int l = 0;
            int k = 0;
            int i1 = 0;
            int j = 0;
            while (j < l1)  {
                AnnotatedParameter annotatedparameter = annotatedmethod.getParameter(j);
                int i;
                int j1;
                int k1;
                Object obj;
                PropertyName propertyname;
                Object obj1;
                if (abeanpropertydefinition == null)
                    obj = null;
                else
                    obj = abeanpropertydefinition[j];
                obj1 = annotationintrospector.findInjectableValueId(annotatedparameter);
                if (obj == null)
                    propertyname = null;
                else
                    propertyname = ((BeanPropertyDefinition) (obj)).getFullName();
                if (obj != null && ((BeanPropertyDefinition) (obj)).isExplicitlyNamed()) {
                    k1 = k + 1;
                    asettablebeanproperty[j] = constructCreatorProperty(deserializationcontext, beandescription, propertyname, j, annotatedparameter, obj1);
                    obj = beanpropertydefinition1;
                    i = l;
                    j1 = i1;
                } else
                if (obj1 != null) {
                    j1 = i1 + 1;
                    asettablebeanproperty[j] = constructCreatorProperty(deserializationcontext, beandescription, propertyname, j, annotatedparameter, obj1);
                    k1 = k;
                    i = l;
                    obj = beanpropertydefinition1;
                } else
                if (annotationintrospector.findUnwrappingNameTransformer(annotatedparameter) != null) {
                    asettablebeanproperty[j] = constructCreatorProperty(deserializationcontext, beandescription, UNWRAPPED_CREATOR_PARAM_NAME, j, annotatedparameter, null);
                    i = l + 1;
                    j1 = i1;
                    k1 = k;
                    obj = beanpropertydefinition1;
                } else
                if (flag && propertyname != null && !propertyname.isEmpty()) {
                    i = l + 1;
                    asettablebeanproperty[j] = constructCreatorProperty(deserializationcontext, beandescription, propertyname, j, annotatedparameter, obj1);
                    j1 = i1;
                    k1 = k;
                    obj = beanpropertydefinition1;
                } else {
                    j1 = i1;
                    k1 = k;
                    i = l;
                    obj = annotatedparameter;
                    if (beanpropertydefinition1 != null) {
                        j1 = i1;
                        k1 = k;
                        i = l;
                        obj = beanpropertydefinition1;
                    }
                }
                j++;
                beanpropertydefinition1 = ((BeanPropertyDefinition) (obj));
                i1 = j1;
                k = k1;
                l = i;
            }
            if (flag || k > 0 || i1 > 0)
                if (k + l + i1 == l1)
                    creatorcollector.addPropertyCreator(annotatedmethod, flag, asettablebeanproperty);
                else
                if (k == 0 && i1 + 1 == l1)
                    creatorcollector.addDelegatingCreator(annotatedmethod, flag, asettablebeanproperty);
                else
                    throw new IllegalArgumentException((new StringBuilder()).append("Argument #").append(beanpropertydefinition1.getIndex()).append(" of factory method ").append(annotatedmethod).append(" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator").toString());
        } while (true);
    }

    protected boolean _checkIfCreatorPropertyBased(AnnotationIntrospector annotationintrospector, AnnotatedWithParams annotatedwithparams, BeanPropertyDefinition beanpropertydefinition) {
        boolean flag1;
        com.fasterxml.jackson.annotation.JsonCreator.Mode mode;
        flag1 = true;
        mode = annotationintrospector.findCreatorBinding(annotatedwithparams);
        if (mode != com.fasterxml.jackson.annotation.JsonCreator.Mode.PROPERTIES) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        if (mode == com.fasterxml.jackson.annotation.JsonCreator.Mode.DELEGATING) {
            flag = false;
            continue; /* Loop/switch isn't completed */
        }
        if (beanpropertydefinition != null) {
            flag = flag1;
            if (beanpropertydefinition.isExplicitlyNamed())
                continue; /* Loop/switch isn't completed */
        }
        flag = flag1;
        if (annotationintrospector.findInjectableValueId(annotatedwithparams.getParameter(0)) != null)
            continue; /* Loop/switch isn't completed */
        if (beanpropertydefinition != null) {
            annotationintrospector = beanpropertydefinition.getName();
            if (annotationintrospector != null && !annotationintrospector.isEmpty()) {
                flag = flag1;
                if (beanpropertydefinition.couldSerialize())
                    continue; /* Loop/switch isn't completed */
            }
        }
        flag = false;
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected void _checkImplicitlyNamedConstructors(DeserializationContext deserializationcontext, BeanDescription beandescription, VisibilityChecker visibilitychecker, AnnotationIntrospector annotationintrospector, CreatorCollector creatorcollector, List list) {
        Iterator iterator = list.iterator();
        SettableBeanProperty asettablebeanproperty[] = null;
        list = null;
label0:
        do {
            Object obj;
            SettableBeanProperty asettablebeanproperty1[];
label1:
            {
                obj = list;
                if (iterator.hasNext()) {
                    obj = (AnnotatedConstructor)iterator.next();
                    if (!visibilitychecker.isCreatorVisible(((AnnotatedMember) (obj))))
                        continue;
                    int k = ((AnnotatedConstructor) (obj)).getParameterCount();
                    asettablebeanproperty1 = new SettableBeanProperty[k];
                    for (int i = 0; i < k; i++) {
                        AnnotatedParameter annotatedparameter = ((AnnotatedConstructor) (obj)).getParameter(i);
                        PropertyName propertyname = _findParamName(annotatedparameter, annotationintrospector);
                        if (propertyname == null || propertyname.isEmpty())
                            continue label0;
                        asettablebeanproperty1[i] = constructCreatorProperty(deserializationcontext, beandescription, propertyname, annotatedparameter.getIndex(), annotatedparameter, null);
                    }

                    if (list == null)
                        break label1;
                    obj = null;
                }
                if (obj != null) {
                    creatorcollector.addPropertyCreator(((AnnotatedWithParams) (obj)), false, asettablebeanproperty);
                    annotationintrospector = (BasicBeanDescription)beandescription;
                    int l = asettablebeanproperty.length;
                    for (int j = 0; j < l; j++) {
                        visibilitychecker = asettablebeanproperty[j];
                        beandescription = visibilitychecker.getFullName();
                        if (!annotationintrospector.hasProperty(beandescription))
                            annotationintrospector.addProperty(SimpleBeanPropertyDefinition.construct(deserializationcontext.getConfig(), visibilitychecker.getMember(), beandescription));
                    }

                }
                break label0;
            }
            asettablebeanproperty = asettablebeanproperty1;
            list = ((List) (obj));
        } while (true);
    }

    protected ValueInstantiator _constructDefaultValueInstantiator(DeserializationContext deserializationcontext, BeanDescription beandescription) {
        CreatorCollector creatorcollector = new CreatorCollector(beandescription, deserializationcontext.getConfig());
        AnnotationIntrospector annotationintrospector = deserializationcontext.getAnnotationIntrospector();
        DeserializationConfig deserializationconfig = deserializationcontext.getConfig();
        VisibilityChecker visibilitychecker = deserializationconfig.getDefaultVisibilityChecker();
        visibilitychecker = annotationintrospector.findAutoDetectVisibility(beandescription.getClassInfo(), visibilitychecker);
        Map map = _findCreatorsFromProperties(deserializationcontext, beandescription);
        _addDeserializerFactoryMethods(deserializationcontext, beandescription, visibilitychecker, annotationintrospector, creatorcollector, map);
        if (beandescription.getType().isConcrete())
            _addDeserializerConstructors(deserializationcontext, beandescription, visibilitychecker, annotationintrospector, creatorcollector, map);
        return creatorcollector.constructValueInstantiator(deserializationconfig);
    }

    protected Map _findCreatorsFromProperties(DeserializationContext deserializationcontext, BeanDescription beandescription) {
        Iterator iterator;
        deserializationcontext = Collections.emptyMap();
        iterator = beandescription.findProperties().iterator();
        beandescription = deserializationcontext;
_L2:
        Iterator iterator1;
        BeanPropertyDefinition beanpropertydefinition;
        if (!iterator.hasNext())
            break MISSING_BLOCK_LABEL_213;
        beanpropertydefinition = (BeanPropertyDefinition)iterator.next();
        iterator1 = beanpropertydefinition.getConstructorParameters();
        deserializationcontext = beandescription;
_L5:
        beandescription = deserializationcontext;
        if (!iterator1.hasNext()) goto _L2; else goto _L1
_L1:
        int i;
        AnnotatedWithParams annotatedwithparams;
        AnnotatedParameter annotatedparameter = (AnnotatedParameter)iterator1.next();
        annotatedwithparams = annotatedparameter.getOwner();
        beandescription = (BeanPropertyDefinition[])deserializationcontext.get(annotatedwithparams);
        i = annotatedparameter.getIndex();
        if (beandescription != null) goto _L4; else goto _L3
_L3:
        if (deserializationcontext.isEmpty())
            deserializationcontext = new LinkedHashMap();
        beandescription = new BeanPropertyDefinition[annotatedwithparams.getParameterCount()];
        deserializationcontext.put(annotatedwithparams, beandescription);
_L7:
        beandescription[i] = beanpropertydefinition;
          goto _L5
_L4:
        if (beandescription[i] == null) goto _L7; else goto _L6
_L6:
        throw new IllegalStateException((new StringBuilder()).append("Conflict: parameter #").append(i).append(" of ").append(annotatedwithparams).append(" bound to more than one property; ").append(beandescription[i]).append(" vs ").append(beanpropertydefinition).toString());
        return beandescription;
    }

    protected JsonDeserializer _findCustomArrayDeserializer(ArrayType arraytype, DeserializationConfig deserializationconfig, BeanDescription beandescription, TypeDeserializer typedeserializer, JsonDeserializer jsondeserializer) {
        Iterator iterator = _factoryConfig.deserializers().iterator();
_L4:
        if (!iterator.hasNext()) goto _L2; else goto _L1
_L1:
        JsonDeserializer jsondeserializer1 = ((Deserializers)iterator.next()).findArrayDeserializer(arraytype, deserializationconfig, beandescription, typedeserializer, jsondeserializer);
        if (jsondeserializer1 == null) goto _L4; else goto _L3
_L3:
        arraytype = jsondeserializer1;
_L6:
        return arraytype;
_L2:
        arraytype = null;
        if (true) goto _L6; else goto _L5
_L5:
    }

    protected JsonDeserializer _findCustomBeanDeserializer(JavaType javatype, DeserializationConfig deserializationconfig, BeanDescription beandescription) {
        Iterator iterator = _factoryConfig.deserializers().iterator();
_L4:
        if (!iterator.hasNext()) goto _L2; else goto _L1
_L1:
        JsonDeserializer jsondeserializer = ((Deserializers)iterator.next()).findBeanDeserializer(javatype, deserializationconfig, beandescription);
        if (jsondeserializer == null) goto _L4; else goto _L3
_L3:
        javatype = jsondeserializer;
_L6:
        return javatype;
_L2:
        javatype = null;
        if (true) goto _L6; else goto _L5
_L5:
    }

    protected JsonDeserializer _findCustomCollectionDeserializer(CollectionType collectiontype, DeserializationConfig deserializationconfig, BeanDescription beandescription, TypeDeserializer typedeserializer, JsonDeserializer jsondeserializer) {
        Iterator iterator = _factoryConfig.deserializers().iterator();
_L4:
        if (!iterator.hasNext()) goto _L2; else goto _L1
_L1:
        JsonDeserializer jsondeserializer1 = ((Deserializers)iterator.next()).findCollectionDeserializer(collectiontype, deserializationconfig, beandescription, typedeserializer, jsondeserializer);
        if (jsondeserializer1 == null) goto _L4; else goto _L3
_L3:
        collectiontype = jsondeserializer1;
_L6:
        return collectiontype;
_L2:
        collectiontype = null;
        if (true) goto _L6; else goto _L5
_L5:
    }

    protected JsonDeserializer _findCustomCollectionLikeDeserializer(CollectionLikeType collectionliketype, DeserializationConfig deserializationconfig, BeanDescription beandescription, TypeDeserializer typedeserializer, JsonDeserializer jsondeserializer) {
        Iterator iterator = _factoryConfig.deserializers().iterator();
_L4:
        if (!iterator.hasNext()) goto _L2; else goto _L1
_L1:
        JsonDeserializer jsondeserializer1 = ((Deserializers)iterator.next()).findCollectionLikeDeserializer(collectionliketype, deserializationconfig, beandescription, typedeserializer, jsondeserializer);
        if (jsondeserializer1 == null) goto _L4; else goto _L3
_L3:
        collectionliketype = jsondeserializer1;
_L6:
        return collectionliketype;
_L2:
        collectionliketype = null;
        if (true) goto _L6; else goto _L5
_L5:
    }

    protected JsonDeserializer _findCustomEnumDeserializer(Class class1, DeserializationConfig deserializationconfig, BeanDescription beandescription) {
        Iterator iterator = _factoryConfig.deserializers().iterator();
_L4:
        if (!iterator.hasNext()) goto _L2; else goto _L1
_L1:
        JsonDeserializer jsondeserializer = ((Deserializers)iterator.next()).findEnumDeserializer(class1, deserializationconfig, beandescription);
        if (jsondeserializer == null) goto _L4; else goto _L3
_L3:
        class1 = jsondeserializer;
_L6:
        return class1;
_L2:
        class1 = null;
        if (true) goto _L6; else goto _L5
_L5:
    }

    protected JsonDeserializer _findCustomMapDeserializer(MapType maptype, DeserializationConfig deserializationconfig, BeanDescription beandescription, KeyDeserializer keydeserializer, TypeDeserializer typedeserializer, JsonDeserializer jsondeserializer) {
        Iterator iterator = _factoryConfig.deserializers().iterator();
_L4:
        if (!iterator.hasNext()) goto _L2; else goto _L1
_L1:
        JsonDeserializer jsondeserializer1 = ((Deserializers)iterator.next()).findMapDeserializer(maptype, deserializationconfig, beandescription, keydeserializer, typedeserializer, jsondeserializer);
        if (jsondeserializer1 == null) goto _L4; else goto _L3
_L3:
        maptype = jsondeserializer1;
_L6:
        return maptype;
_L2:
        maptype = null;
        if (true) goto _L6; else goto _L5
_L5:
    }

    protected JsonDeserializer _findCustomMapLikeDeserializer(MapLikeType mapliketype, DeserializationConfig deserializationconfig, BeanDescription beandescription, KeyDeserializer keydeserializer, TypeDeserializer typedeserializer, JsonDeserializer jsondeserializer) {
        Iterator iterator = _factoryConfig.deserializers().iterator();
_L4:
        if (!iterator.hasNext()) goto _L2; else goto _L1
_L1:
        JsonDeserializer jsondeserializer1 = ((Deserializers)iterator.next()).findMapLikeDeserializer(mapliketype, deserializationconfig, beandescription, keydeserializer, typedeserializer, jsondeserializer);
        if (jsondeserializer1 == null) goto _L4; else goto _L3
_L3:
        mapliketype = jsondeserializer1;
_L6:
        return mapliketype;
_L2:
        mapliketype = null;
        if (true) goto _L6; else goto _L5
_L5:
    }

    protected JsonDeserializer _findCustomReferenceDeserializer(ReferenceType referencetype, DeserializationConfig deserializationconfig, BeanDescription beandescription, TypeDeserializer typedeserializer, JsonDeserializer jsondeserializer) {
        Iterator iterator = _factoryConfig.deserializers().iterator();
_L4:
        if (!iterator.hasNext()) goto _L2; else goto _L1
_L1:
        JsonDeserializer jsondeserializer1 = ((Deserializers)iterator.next()).findReferenceDeserializer(referencetype, deserializationconfig, beandescription, typedeserializer, jsondeserializer);
        if (jsondeserializer1 == null) goto _L4; else goto _L3
_L3:
        referencetype = jsondeserializer1;
_L6:
        return referencetype;
_L2:
        referencetype = null;
        if (true) goto _L6; else goto _L5
_L5:
    }

    protected JsonDeserializer _findCustomTreeNodeDeserializer(Class class1, DeserializationConfig deserializationconfig, BeanDescription beandescription) {
        Iterator iterator = _factoryConfig.deserializers().iterator();
_L4:
        if (!iterator.hasNext()) goto _L2; else goto _L1
_L1:
        JsonDeserializer jsondeserializer = ((Deserializers)iterator.next()).findTreeNodeDeserializer(class1, deserializationconfig, beandescription);
        if (jsondeserializer == null) goto _L4; else goto _L3
_L3:
        class1 = jsondeserializer;
_L6:
        return class1;
_L2:
        class1 = null;
        if (true) goto _L6; else goto _L5
_L5:
    }

    protected PropertyName _findExplicitParamName(AnnotatedParameter annotatedparameter, AnnotationIntrospector annotationintrospector) {
        if (annotatedparameter != null && annotationintrospector != null)
            annotatedparameter = annotationintrospector.findNameForDeserialization(annotatedparameter);
        else
            annotatedparameter = null;
        return annotatedparameter;
    }

    protected PropertyName _findImplicitParamName(AnnotatedParameter annotatedparameter, AnnotationIntrospector annotationintrospector) {
        annotatedparameter = annotationintrospector.findImplicitPropertyName(annotatedparameter);
        if (annotatedparameter != null && !annotatedparameter.isEmpty())
            annotatedparameter = PropertyName.construct(annotatedparameter);
        else
            annotatedparameter = null;
        return annotatedparameter;
    }

    protected AnnotatedMethod _findJsonValueFor(DeserializationConfig deserializationconfig, JavaType javatype) {
        if (javatype == null)
            deserializationconfig = null;
        else
            deserializationconfig = deserializationconfig.introspect(javatype).findJsonValueMethod();
        return deserializationconfig;
    }

    protected PropertyName _findParamName(AnnotatedParameter annotatedparameter, AnnotationIntrospector annotationintrospector) {
        if (annotatedparameter == null || annotationintrospector == null) goto _L2; else goto _L1
_L1:
        PropertyName propertyname = annotationintrospector.findNameForDeserialization(annotatedparameter);
        if (propertyname == null) goto _L4; else goto _L3
_L3:
        annotatedparameter = propertyname;
_L6:
        return annotatedparameter;
_L4:
        annotatedparameter = annotationintrospector.findImplicitPropertyName(annotatedparameter);
        if (annotatedparameter != null && !annotatedparameter.isEmpty()) {
            annotatedparameter = PropertyName.construct(annotatedparameter);
            continue; /* Loop/switch isn't completed */
        }
_L2:
        annotatedparameter = null;
        if (true) goto _L6; else goto _L5
_L5:
    }

    protected JavaType _findRemappedType(DeserializationConfig deserializationconfig, Class class1) {
label0:
        {
            JavaType javatype = mapAbstractType(deserializationconfig, deserializationconfig.constructType(class1));
            if (javatype != null) {
                deserializationconfig = javatype;
                if (!javatype.hasRawClass(class1))
                    break label0;
            }
            deserializationconfig = null;
        }
        return deserializationconfig;
    }

    protected boolean _handleSingleArgumentConstructor(DeserializationContext deserializationcontext, BeanDescription beandescription, VisibilityChecker visibilitychecker, AnnotationIntrospector annotationintrospector, CreatorCollector creatorcollector, AnnotatedConstructor annotatedconstructor, boolean flag, 
            boolean flag1) {
        boolean flag3;
        flag3 = true;
        deserializationcontext = annotatedconstructor.getRawParameterType(0);
        if (deserializationcontext != java/lang/String && deserializationcontext != java/lang/CharSequence) goto _L2; else goto _L1
_L1:
        boolean flag2;
label0:
        {
            if (!flag) {
                flag2 = flag3;
                if (!flag1)
                    break label0;
            }
            creatorcollector.addStringCreator(annotatedconstructor, flag);
            flag2 = flag3;
        }
_L4:
        return flag2;
_L2:
        if (deserializationcontext == Integer.TYPE || deserializationcontext == java/lang/Integer) {
            if (!flag) {
                flag2 = flag3;
                if (!flag1)
                    continue; /* Loop/switch isn't completed */
            }
            creatorcollector.addIntCreator(annotatedconstructor, flag);
            flag2 = flag3;
            continue; /* Loop/switch isn't completed */
        }
        if (deserializationcontext == Long.TYPE || deserializationcontext == java/lang/Long) {
            if (!flag) {
                flag2 = flag3;
                if (!flag1)
                    continue; /* Loop/switch isn't completed */
            }
            creatorcollector.addLongCreator(annotatedconstructor, flag);
            flag2 = flag3;
            continue; /* Loop/switch isn't completed */
        }
        if (deserializationcontext == Double.TYPE || deserializationcontext == java/lang/Double) {
            if (!flag) {
                flag2 = flag3;
                if (!flag1)
                    continue; /* Loop/switch isn't completed */
            }
            creatorcollector.addDoubleCreator(annotatedconstructor, flag);
            flag2 = flag3;
            continue; /* Loop/switch isn't completed */
        }
        if (deserializationcontext == Boolean.TYPE || deserializationcontext == java/lang/Boolean) {
            if (!flag) {
                flag2 = flag3;
                if (!flag1)
                    continue; /* Loop/switch isn't completed */
            }
            creatorcollector.addBooleanCreator(annotatedconstructor, flag);
            flag2 = flag3;
        } else
        if (flag) {
            creatorcollector.addDelegatingCreator(annotatedconstructor, flag, null);
            flag2 = flag3;
        } else {
            flag2 = false;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected boolean _handleSingleArgumentFactory(DeserializationConfig deserializationconfig, BeanDescription beandescription, VisibilityChecker visibilitychecker, AnnotationIntrospector annotationintrospector, CreatorCollector creatorcollector, AnnotatedMethod annotatedmethod, boolean flag) {
        boolean flag2;
        flag2 = true;
        deserializationconfig = annotatedmethod.getRawParameterType(0);
        if (deserializationconfig != java/lang/String && deserializationconfig != java/lang/CharSequence) goto _L2; else goto _L1
_L1:
        boolean flag1;
label0:
        {
            if (!flag) {
                flag1 = flag2;
                if (!visibilitychecker.isCreatorVisible(annotatedmethod))
                    break label0;
            }
            creatorcollector.addStringCreator(annotatedmethod, flag);
            flag1 = flag2;
        }
_L4:
        return flag1;
_L2:
        if (deserializationconfig == Integer.TYPE || deserializationconfig == java/lang/Integer) {
            if (!flag) {
                flag1 = flag2;
                if (!visibilitychecker.isCreatorVisible(annotatedmethod))
                    continue; /* Loop/switch isn't completed */
            }
            creatorcollector.addIntCreator(annotatedmethod, flag);
            flag1 = flag2;
            continue; /* Loop/switch isn't completed */
        }
        if (deserializationconfig == Long.TYPE || deserializationconfig == java/lang/Long) {
            if (!flag) {
                flag1 = flag2;
                if (!visibilitychecker.isCreatorVisible(annotatedmethod))
                    continue; /* Loop/switch isn't completed */
            }
            creatorcollector.addLongCreator(annotatedmethod, flag);
            flag1 = flag2;
            continue; /* Loop/switch isn't completed */
        }
        if (deserializationconfig == Double.TYPE || deserializationconfig == java/lang/Double) {
            if (!flag) {
                flag1 = flag2;
                if (!visibilitychecker.isCreatorVisible(annotatedmethod))
                    continue; /* Loop/switch isn't completed */
            }
            creatorcollector.addDoubleCreator(annotatedmethod, flag);
            flag1 = flag2;
            continue; /* Loop/switch isn't completed */
        }
        if (deserializationconfig == Boolean.TYPE || deserializationconfig == java/lang/Boolean) {
            if (!flag) {
                flag1 = flag2;
                if (!visibilitychecker.isCreatorVisible(annotatedmethod))
                    continue; /* Loop/switch isn't completed */
            }
            creatorcollector.addBooleanCreator(annotatedmethod, flag);
            flag1 = flag2;
        } else
        if (flag) {
            creatorcollector.addDelegatingCreator(annotatedmethod, flag, null);
            flag1 = flag2;
        } else {
            flag1 = false;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected boolean _hasExplicitParamName(AnnotatedParameter annotatedparameter, AnnotationIntrospector annotationintrospector) {
        boolean flag1 = false;
        boolean flag = flag1;
        if (annotatedparameter != null) {
            flag = flag1;
            if (annotationintrospector != null) {
                annotatedparameter = annotationintrospector.findNameForDeserialization(annotatedparameter);
                flag = flag1;
                if (annotatedparameter != null) {
                    flag = flag1;
                    if (annotatedparameter.hasSimpleName())
                        flag = true;
                }
            }
        }
        return flag;
    }

    protected CollectionType _mapAbstractCollectionType(JavaType javatype, DeserializationConfig deserializationconfig) {
        Class class1 = javatype.getRawClass();
        class1 = (Class)_collectionFallbacks.get(class1.getName());
        if (class1 == null)
            javatype = null;
        else
            javatype = (CollectionType)deserializationconfig.constructSpecializedType(javatype, class1);
        return javatype;
    }

    public ValueInstantiator _valueInstantiatorInstance(DeserializationConfig deserializationconfig, Annotated annotated, Object obj) {
        if (obj != null) goto _L2; else goto _L1
_L1:
        deserializationconfig = null;
_L4:
        return deserializationconfig;
_L2:
        if (obj instanceof ValueInstantiator) {
            deserializationconfig = (ValueInstantiator)obj;
            continue; /* Loop/switch isn't completed */
        }
        if (!(obj instanceof Class))
            throw new IllegalStateException((new StringBuilder()).append("AnnotationIntrospector returned key deserializer definition of type ").append(obj.getClass().getName()).append("; expected type KeyDeserializer or Class<KeyDeserializer> instead").toString());
        obj = (Class)obj;
        if (ClassUtil.isBogusClass(((Class) (obj)))) {
            deserializationconfig = null;
            continue; /* Loop/switch isn't completed */
        }
        if (!com/fasterxml/jackson/databind/deser/ValueInstantiator.isAssignableFrom(((Class) (obj))))
            throw new IllegalStateException((new StringBuilder()).append("AnnotationIntrospector returned Class ").append(((Class) (obj)).getName()).append("; expected Class<ValueInstantiator>").toString());
        HandlerInstantiator handlerinstantiator = deserializationconfig.getHandlerInstantiator();
        if (handlerinstantiator != null) {
            annotated = handlerinstantiator.valueInstantiatorInstance(deserializationconfig, annotated, ((Class) (obj)));
            if (annotated != null) {
                deserializationconfig = annotated;
                continue; /* Loop/switch isn't completed */
            }
        }
        deserializationconfig = (ValueInstantiator)ClassUtil.createInstance(((Class) (obj)), deserializationconfig.canOverrideAccessModifiers());
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected SettableBeanProperty constructCreatorProperty(DeserializationContext deserializationcontext, BeanDescription beandescription, PropertyName propertyname, int i, AnnotatedParameter annotatedparameter, Object obj) {
        DeserializationConfig deserializationconfig = deserializationcontext.getConfig();
        Object obj2 = deserializationcontext.getAnnotationIntrospector();
        Object obj1;
        Object obj3;
        Object obj4;
        JavaType javatype;
        if (obj2 == null) {
            obj1 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
        } else {
            obj1 = ((AnnotationIntrospector) (obj2)).hasRequiredMarker(annotatedparameter);
            boolean flag;
            if (obj1 != null && ((Boolean) (obj1)).booleanValue())
                flag = true;
            else
                flag = false;
            obj1 = PropertyMetadata.construct(flag, ((AnnotationIntrospector) (obj2)).findPropertyDescription(annotatedparameter), ((AnnotationIntrospector) (obj2)).findPropertyIndex(annotatedparameter), ((AnnotationIntrospector) (obj2)).findPropertyDefaultValue(annotatedparameter));
        }
        obj4 = beandescription.resolveType(annotatedparameter.getParameterType());
        obj2 = new com.fasterxml.jackson.databind.BeanProperty.Std(propertyname, ((JavaType) (obj4)), ((AnnotationIntrospector) (obj2)).findWrapperName(annotatedparameter), beandescription.getClassAnnotations(), annotatedparameter, ((PropertyMetadata) (obj1)));
        obj3 = resolveType(deserializationcontext, beandescription, ((JavaType) (obj4)), annotatedparameter);
        if (obj3 != obj4)
            obj2 = ((com.fasterxml.jackson.databind.BeanProperty.Std) (obj2)).withType(((JavaType) (obj3)));
        obj4 = findDeserializerFromAnnotation(deserializationcontext, annotatedparameter);
        javatype = modifyTypeByAnnotation(deserializationcontext, annotatedparameter, ((JavaType) (obj3)));
        obj3 = (TypeDeserializer)javatype.getTypeHandler();
        if (obj3 == null)
            obj3 = findTypeDeserializer(deserializationconfig, javatype);
        propertyname = new CreatorProperty(propertyname, javatype, ((com.fasterxml.jackson.databind.BeanProperty.Std) (obj2)).getWrapperName(), ((TypeDeserializer) (obj3)), beandescription.getClassAnnotations(), annotatedparameter, i, obj, ((PropertyMetadata) (obj1)));
        beandescription = propertyname;
        if (obj4 != null)
            beandescription = propertyname.withValueDeserializer(deserializationcontext.handlePrimaryContextualization(((JsonDeserializer) (obj4)), propertyname, javatype));
        return beandescription;
    }

    protected EnumResolver constructEnumResolver(Class class1, DeserializationConfig deserializationconfig, AnnotatedMethod annotatedmethod) {
        if (annotatedmethod != null) {
            annotatedmethod = annotatedmethod.getAnnotated();
            if (deserializationconfig.canOverrideAccessModifiers())
                ClassUtil.checkAndFixAccess(annotatedmethod, deserializationconfig.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
            class1 = EnumResolver.constructUnsafeUsingMethod(class1, annotatedmethod);
        } else {
            class1 = EnumResolver.constructUnsafe(class1, deserializationconfig.getAnnotationIntrospector());
        }
        return class1;
    }

    public JsonDeserializer createArrayDeserializer(DeserializationContext deserializationcontext, ArrayType arraytype, BeanDescription beandescription) {
        TypeDeserializer typedeserializer;
        JsonDeserializer jsondeserializer;
        DeserializationConfig deserializationconfig;
        JsonDeserializer jsondeserializer1;
        JavaType javatype;
        deserializationconfig = deserializationcontext.getConfig();
        javatype = arraytype.getContentType();
        jsondeserializer1 = (JsonDeserializer)javatype.getValueHandler();
        typedeserializer = (TypeDeserializer)javatype.getTypeHandler();
        if (typedeserializer == null)
            typedeserializer = findTypeDeserializer(deserializationconfig, javatype);
        jsondeserializer = _findCustomArrayDeserializer(arraytype, deserializationconfig, beandescription, typedeserializer, jsondeserializer1);
        deserializationcontext = jsondeserializer;
        if (jsondeserializer != null) goto _L2; else goto _L1
_L1:
        if (jsondeserializer1 != null) goto _L4; else goto _L3
_L3:
        deserializationcontext = javatype.getRawClass();
        if (!javatype.isPrimitive()) goto _L6; else goto _L5
_L5:
        deserializationcontext = PrimitiveArrayDeserializers.forType(deserializationcontext);
_L7:
        return deserializationcontext;
_L6:
        if (deserializationcontext != java/lang/String)
            break; /* Loop/switch isn't completed */
        deserializationcontext = StringArrayDeserializer.instance;
        if (true) goto _L7; else goto _L4
_L4:
        deserializationcontext = new ObjectArrayDeserializer(arraytype, jsondeserializer1, typedeserializer);
_L2:
        if (!_factoryConfig.hasDeserializerModifiers())
            continue;
        Iterator iterator = _factoryConfig.deserializerModifiers().iterator();
        Object obj = deserializationcontext;
        do {
            deserializationcontext = ((DeserializationContext) (obj));
            if (!iterator.hasNext())
                continue;
            obj = ((BeanDeserializerModifier)iterator.next()).modifyArrayDeserializer(deserializationconfig, arraytype, beandescription, ((JsonDeserializer) (obj)));
        } while (true);
        if (true) goto _L7; else goto _L8
_L8:
    }

    public JsonDeserializer createCollectionDeserializer(DeserializationContext deserializationcontext, CollectionType collectiontype, BeanDescription beandescription) {
        Object obj;
        Object obj1;
        TypeDeserializer typedeserializer;
        BeanDescription beandescription2;
        CollectionType collectiontype2;
        DeserializationConfig deserializationconfig;
        JavaType javatype;
        JsonDeserializer jsondeserializer;
        javatype = collectiontype.getContentType();
        jsondeserializer = (JsonDeserializer)javatype.getValueHandler();
        deserializationconfig = deserializationcontext.getConfig();
        typedeserializer = (TypeDeserializer)javatype.getTypeHandler();
        if (typedeserializer == null)
            typedeserializer = findTypeDeserializer(deserializationconfig, javatype);
        obj = _findCustomCollectionDeserializer(collectiontype, deserializationconfig, beandescription, typedeserializer, jsondeserializer);
        obj1 = obj;
        if (obj == null) {
            Class class1 = collectiontype.getRawClass();
            obj1 = obj;
            if (jsondeserializer == null) {
                obj1 = obj;
                if (java/util/EnumSet.isAssignableFrom(class1))
                    obj1 = new EnumSetDeserializer(javatype, null);
            }
        }
        obj = obj1;
        collectiontype2 = collectiontype;
        beandescription2 = beandescription;
        if (obj1 != null) goto _L2; else goto _L1
_L1:
        CollectionType collectiontype1;
        BeanDescription beandescription1;
label0:
        {
            Object obj2;
            if (!collectiontype.isInterface()) {
                obj2 = obj1;
                collectiontype1 = collectiontype;
                beandescription1 = beandescription;
                if (!collectiontype.isAbstract())
                    break label0;
            }
            collectiontype1 = _mapAbstractCollectionType(collectiontype, deserializationconfig);
            if (collectiontype1 == null) {
                if (collectiontype.getTypeHandler() == null)
                    throw new IllegalArgumentException((new StringBuilder()).append("Can not find a deserializer for non-concrete Collection type ").append(collectiontype).toString());
                obj2 = AbstractDeserializer.constructForNonPOJO(beandescription);
                beandescription1 = beandescription;
                collectiontype1 = collectiontype;
            } else {
                beandescription1 = deserializationconfig.introspectForCreation(collectiontype1);
                obj2 = obj1;
            }
        }
        obj = obj2;
        collectiontype2 = collectiontype1;
        beandescription2 = beandescription1;
        if (obj2 != null) goto _L2; else goto _L3
_L3:
        deserializationcontext = findValueInstantiator(deserializationcontext, beandescription1);
        if (deserializationcontext.canCreateUsingDefault() || collectiontype1.getRawClass() != java/util/concurrent/ArrayBlockingQueue) goto _L5; else goto _L4
_L4:
        collectiontype = new ArrayBlockingQueueDeserializer(collectiontype1, jsondeserializer, typedeserializer, deserializationcontext);
_L7:
        return collectiontype;
_L5:
        if (javatype.getRawClass() == java/lang/String) {
            obj = new StringCollectionDeserializer(collectiontype1, jsondeserializer, deserializationcontext);
            beandescription2 = beandescription1;
            collectiontype2 = collectiontype1;
        } else {
            obj = new CollectionDeserializer(collectiontype1, jsondeserializer, typedeserializer, deserializationcontext);
            collectiontype2 = collectiontype1;
            beandescription2 = beandescription1;
        }
_L2:
        if (_factoryConfig.hasDeserializerModifiers()) {
            beandescription = _factoryConfig.deserializerModifiers().iterator();
            deserializationcontext = ((DeserializationContext) (obj));
            do {
                collectiontype = deserializationcontext;
                if (!beandescription.hasNext())
                    continue; /* Loop/switch isn't completed */
                deserializationcontext = ((BeanDeserializerModifier)beandescription.next()).modifyCollectionDeserializer(deserializationconfig, collectiontype2, beandescription2, deserializationcontext);
            } while (true);
        }
        collectiontype = ((CollectionType) (obj));
        if (true) goto _L7; else goto _L6
_L6:
    }

    public JsonDeserializer createCollectionLikeDeserializer(DeserializationContext deserializationcontext, CollectionLikeType collectionliketype, BeanDescription beandescription) {
        JavaType javatype = collectionliketype.getContentType();
        Object obj = (JsonDeserializer)javatype.getValueHandler();
        DeserializationConfig deserializationconfig = deserializationcontext.getConfig();
        deserializationcontext = (TypeDeserializer)javatype.getTypeHandler();
        if (deserializationcontext == null)
            deserializationcontext = findTypeDeserializer(deserializationconfig, javatype);
        deserializationcontext = _findCustomCollectionLikeDeserializer(collectionliketype, deserializationconfig, beandescription, deserializationcontext, ((JsonDeserializer) (obj)));
        obj = deserializationcontext;
        if (deserializationcontext != null) {
            obj = deserializationcontext;
            if (_factoryConfig.hasDeserializerModifiers()) {
                for (obj = _factoryConfig.deserializerModifiers().iterator(); ((Iterator) (obj)).hasNext();)
                    deserializationcontext = ((BeanDeserializerModifier)((Iterator) (obj)).next()).modifyCollectionLikeDeserializer(deserializationconfig, collectionliketype, beandescription, deserializationcontext);

                obj = deserializationcontext;
            }
        }
        return ((JsonDeserializer) (obj));
    }

    public JsonDeserializer createEnumDeserializer(DeserializationContext deserializationcontext, JavaType javatype, BeanDescription beandescription) {
        Object obj;
        DeserializationConfig deserializationconfig;
        Object obj1;
        deserializationconfig = deserializationcontext.getConfig();
        obj1 = javatype.getRawClass();
        obj = _findCustomEnumDeserializer(((Class) (obj1)), deserializationconfig, beandescription);
        if (obj != null) goto _L2; else goto _L1
_L1:
        Iterator iterator = beandescription.getFactoryMethods().iterator();
_L6:
        if (!iterator.hasNext()) goto _L4; else goto _L3
_L3:
        AnnotatedMethod annotatedmethod = (AnnotatedMethod)iterator.next();
        if (!deserializationcontext.getAnnotationIntrospector().hasCreatorAnnotation(annotatedmethod)) goto _L6; else goto _L5
_L5:
        if (annotatedmethod.getParameterCount() != 1 || !annotatedmethod.getRawReturnType().isAssignableFrom(((Class) (obj1)))) goto _L8; else goto _L7
_L7:
        obj = EnumDeserializer.deserializerForCreator(deserializationconfig, ((Class) (obj1)), annotatedmethod);
_L4:
        deserializationcontext = ((DeserializationContext) (obj));
        if (obj == null)
            deserializationcontext = new EnumDeserializer(constructEnumResolver(((Class) (obj1)), deserializationconfig, beandescription.findJsonValueMethod()));
        break MISSING_BLOCK_LABEL_134;
_L8:
        throw new IllegalArgumentException((new StringBuilder()).append("Unsuitable method (").append(annotatedmethod).append(") decorated with @JsonCreator (for Enum type ").append(((Class) (obj1)).getName()).append(")").toString());
_L10:
        if (_factoryConfig.hasDeserializerModifiers()) {
            obj1 = _factoryConfig.deserializerModifiers().iterator();
            do {
                obj = deserializationcontext;
                if (!((Iterator) (obj1)).hasNext())
                    break;
                deserializationcontext = ((BeanDeserializerModifier)((Iterator) (obj1)).next()).modifyEnumDeserializer(deserializationconfig, javatype, beandescription, deserializationcontext);
            } while (true);
        } else {
            obj = deserializationcontext;
        }
        return ((JsonDeserializer) (obj));
_L2:
        deserializationcontext = ((DeserializationContext) (obj));
        if (true) goto _L10; else goto _L9
_L9:
    }

    public KeyDeserializer createKeyDeserializer(DeserializationContext deserializationcontext, JavaType javatype) {
        KeyDeserializer keydeserializer;
        KeyDeserializer keydeserializer2;
        DeserializationConfig deserializationconfig;
label0:
        {
            deserializationconfig = deserializationcontext.getConfig();
            keydeserializer = null;
            KeyDeserializer keydeserializer1 = null;
            if (!_factoryConfig.hasKeyDeserializers())
                break label0;
            BeanDescription beandescription = deserializationconfig.introspectClassAnnotations(javatype.getRawClass());
            Iterator iterator1 = _factoryConfig.keyDeserializers().iterator();
            keydeserializer = keydeserializer1;
            do {
                if (!iterator1.hasNext())
                    break label0;
                keydeserializer1 = ((KeyDeserializers)iterator1.next()).findKeyDeserializer(javatype, deserializationconfig, beandescription);
                keydeserializer = keydeserializer1;
            } while (keydeserializer1 == null);
            keydeserializer = keydeserializer1;
        }
        keydeserializer2 = keydeserializer;
        if (keydeserializer != null) goto _L2; else goto _L1
_L1:
        if (!javatype.isEnumType()) goto _L4; else goto _L3
_L3:
        deserializationcontext = _createEnumKeyDeserializer(deserializationcontext, javatype);
_L6:
        return deserializationcontext;
_L4:
        keydeserializer2 = StdKeyDeserializers.findStringBasedKeyDeserializer(deserializationconfig, javatype);
_L2:
        deserializationcontext = keydeserializer2;
        if (keydeserializer2 != null) {
            deserializationcontext = keydeserializer2;
            if (_factoryConfig.hasDeserializerModifiers()) {
                Iterator iterator = _factoryConfig.deserializerModifiers().iterator();
                deserializationcontext = keydeserializer2;
                while (iterator.hasNext()) 
                    deserializationcontext = ((BeanDeserializerModifier)iterator.next()).modifyKeyDeserializer(deserializationconfig, javatype, deserializationcontext);
            }
        }
        if (true) goto _L6; else goto _L5
_L5:
    }

    public JsonDeserializer createMapDeserializer(DeserializationContext deserializationcontext, MapType maptype, BeanDescription beandescription) {
        Object obj;
        Object obj1;
        TypeDeserializer typedeserializer;
        Object obj2;
        DeserializationConfig deserializationconfig;
        JsonDeserializer jsondeserializer;
        KeyDeserializer keydeserializer;
        deserializationconfig = deserializationcontext.getConfig();
        obj2 = maptype.getKeyType();
        obj = maptype.getContentType();
        jsondeserializer = (JsonDeserializer)((JavaType) (obj)).getValueHandler();
        keydeserializer = (KeyDeserializer)((JavaType) (obj2)).getValueHandler();
        typedeserializer = (TypeDeserializer)((JavaType) (obj)).getTypeHandler();
        if (typedeserializer == null)
            typedeserializer = findTypeDeserializer(deserializationconfig, ((JavaType) (obj)));
        obj = _findCustomMapDeserializer(maptype, deserializationconfig, beandescription, keydeserializer, typedeserializer, jsondeserializer);
        obj1 = obj;
        if (obj != null) goto _L2; else goto _L1
_L1:
        Object obj3;
        obj3 = maptype.getRawClass();
        if (java/util/EnumMap.isAssignableFrom(((Class) (obj3)))) {
            obj = ((JavaType) (obj2)).getRawClass();
            if (obj == null || !((Class) (obj)).isEnum())
                throw new IllegalArgumentException("Can not construct EnumMap; generic (key) type not available");
            obj = new EnumMapDeserializer(maptype, null, jsondeserializer, typedeserializer);
        }
        obj1 = obj;
        if (obj != null) goto _L2; else goto _L3
_L3:
        if (maptype.isInterface() || maptype.isAbstract()) {
            obj1 = (Class)_mapFallbacks.get(((Class) (obj3)).getName());
            if (obj1 != null) {
                obj1 = (MapType)deserializationconfig.constructSpecializedType(maptype, ((Class) (obj1)));
                beandescription = deserializationconfig.introspectForCreation(((JavaType) (obj1)));
            } else {
                if (maptype.getTypeHandler() == null)
                    throw new IllegalArgumentException((new StringBuilder()).append("Can not find a deserializer for non-concrete Map type ").append(maptype).toString());
                obj = AbstractDeserializer.constructForNonPOJO(beandescription);
                obj1 = maptype;
            }
        } else {
            obj1 = maptype;
        }
        maptype = ((MapType) (obj));
        obj2 = obj1;
        obj3 = beandescription;
        if (obj == null) {
            maptype = new MapDeserializer(((JavaType) (obj1)), findValueInstantiator(deserializationcontext, beandescription), keydeserializer, jsondeserializer, typedeserializer);
            maptype.setIgnorableProperties(deserializationconfig.getAnnotationIntrospector().findPropertiesToIgnore(beandescription.getClassInfo(), false));
            obj3 = beandescription;
            obj2 = obj1;
        }
_L5:
        deserializationcontext = maptype;
        if (_factoryConfig.hasDeserializerModifiers()) {
            beandescription = _factoryConfig.deserializerModifiers().iterator();
            do {
                deserializationcontext = maptype;
                if (!beandescription.hasNext())
                    break;
                maptype = ((BeanDeserializerModifier)beandescription.next()).modifyMapDeserializer(deserializationconfig, ((MapType) (obj2)), ((BeanDescription) (obj3)), maptype);
            } while (true);
        }
        return deserializationcontext;
_L2:
        obj2 = maptype;
        maptype = ((MapType) (obj1));
        obj3 = beandescription;
        if (true) goto _L5; else goto _L4
_L4:
    }

    public JsonDeserializer createMapLikeDeserializer(DeserializationContext deserializationcontext, MapLikeType mapliketype, BeanDescription beandescription) {
        Object obj1 = mapliketype.getKeyType();
        JavaType javatype = mapliketype.getContentType();
        DeserializationConfig deserializationconfig = deserializationcontext.getConfig();
        Object obj = (JsonDeserializer)javatype.getValueHandler();
        obj1 = (KeyDeserializer)((JavaType) (obj1)).getValueHandler();
        deserializationcontext = (TypeDeserializer)javatype.getTypeHandler();
        if (deserializationcontext == null)
            deserializationcontext = findTypeDeserializer(deserializationconfig, javatype);
        deserializationcontext = _findCustomMapLikeDeserializer(mapliketype, deserializationconfig, beandescription, ((KeyDeserializer) (obj1)), deserializationcontext, ((JsonDeserializer) (obj)));
        obj = deserializationcontext;
        if (deserializationcontext != null) {
            obj = deserializationcontext;
            if (_factoryConfig.hasDeserializerModifiers()) {
                for (obj = _factoryConfig.deserializerModifiers().iterator(); ((Iterator) (obj)).hasNext();)
                    deserializationcontext = ((BeanDeserializerModifier)((Iterator) (obj)).next()).modifyMapLikeDeserializer(deserializationconfig, mapliketype, beandescription, deserializationcontext);

                obj = deserializationcontext;
            }
        }
        return ((JsonDeserializer) (obj));
    }

    public JsonDeserializer createReferenceDeserializer(DeserializationContext deserializationcontext, ReferenceType referencetype, BeanDescription beandescription) {
        JsonDeserializer jsondeserializer;
        DeserializationConfig deserializationconfig;
        JavaType javatype;
        JsonDeserializer jsondeserializer1;
        javatype = referencetype.getContentType();
        jsondeserializer1 = (JsonDeserializer)javatype.getValueHandler();
        deserializationconfig = deserializationcontext.getConfig();
        deserializationcontext = (TypeDeserializer)javatype.getTypeHandler();
        if (deserializationcontext == null)
            deserializationcontext = findTypeDeserializer(deserializationconfig, javatype);
        jsondeserializer = _findCustomReferenceDeserializer(referencetype, deserializationconfig, beandescription, deserializationcontext, jsondeserializer1);
        if (jsondeserializer != null || !java/util/concurrent/atomic/AtomicReference.isAssignableFrom(referencetype.getRawClass())) goto _L2; else goto _L1
_L1:
        deserializationcontext = new AtomicReferenceDeserializer(javatype, deserializationcontext, jsondeserializer1);
_L4:
        return deserializationcontext;
_L2:
        deserializationcontext = jsondeserializer;
        if (jsondeserializer != null) {
            deserializationcontext = jsondeserializer;
            if (_factoryConfig.hasDeserializerModifiers()) {
                Iterator iterator = _factoryConfig.deserializerModifiers().iterator();
                deserializationcontext = jsondeserializer;
                while (iterator.hasNext()) 
                    deserializationcontext = ((BeanDeserializerModifier)iterator.next()).modifyReferenceDeserializer(deserializationconfig, referencetype, beandescription, deserializationcontext);
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public JsonDeserializer createTreeDeserializer(DeserializationConfig deserializationconfig, JavaType javatype, BeanDescription beandescription) {
        javatype = javatype.getRawClass();
        deserializationconfig = _findCustomTreeNodeDeserializer(javatype, deserializationconfig, beandescription);
        if (deserializationconfig == null)
            deserializationconfig = JsonNodeDeserializer.getDeserializer(javatype);
        return deserializationconfig;
    }

    public JsonDeserializer findDefaultDeserializer(DeserializationContext deserializationcontext, JavaType javatype, BeanDescription beandescription) {
        Class class1 = javatype.getRawClass();
        if (class1 != CLASS_OBJECT) goto _L2; else goto _L1
_L1:
        Object obj;
        deserializationcontext = deserializationcontext.getConfig();
        if (_factoryConfig.hasAbstractTypeResolvers()) {
            javatype = _findRemappedType(deserializationcontext, java/util/List);
            deserializationcontext = _findRemappedType(deserializationcontext, java/util/Map);
        } else {
            deserializationcontext = null;
            javatype = null;
        }
        obj = new UntypedObjectDeserializer(javatype, deserializationcontext);
_L4:
        return ((JsonDeserializer) (obj));
_L2:
        if (class1 == CLASS_STRING || class1 == CLASS_CHAR_BUFFER) {
            obj = StringDeserializer.instance;
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == CLASS_ITERABLE) {
            obj = deserializationcontext.getTypeFactory();
            javatype = ((TypeFactory) (obj)).findTypeParameters(javatype, CLASS_ITERABLE);
            if (javatype == null || javatype.length != 1)
                javatype = TypeFactory.unknownType();
            else
                javatype = javatype[0];
            obj = createCollectionDeserializer(deserializationcontext, ((TypeFactory) (obj)).constructCollectionType(java/util/Collection, javatype), beandescription);
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == CLASS_MAP_ENTRY) {
            beandescription = javatype.containedType(0);
            if (beandescription == null)
                beandescription = TypeFactory.unknownType();
            obj = javatype.containedType(1);
            if (obj == null)
                obj = TypeFactory.unknownType();
            Object obj1 = (TypeDeserializer)((JavaType) (obj)).getTypeHandler();
            String s;
            if (obj1 == null)
                deserializationcontext = findTypeDeserializer(deserializationcontext.getConfig(), ((JavaType) (obj)));
            else
                deserializationcontext = ((DeserializationContext) (obj1));
            obj = (JsonDeserializer)((JavaType) (obj)).getValueHandler();
            obj = new MapEntryDeserializer(javatype, (KeyDeserializer)beandescription.getValueHandler(), ((JsonDeserializer) (obj)), deserializationcontext);
            continue; /* Loop/switch isn't completed */
        }
        s = class1.getName();
        if (class1.isPrimitive() || s.startsWith("java.")) {
            obj = NumberDeserializers.find(class1, s);
            obj1 = obj;
            if (obj == null)
                obj1 = DateDeserializers.find(class1, s);
            obj = obj1;
            if (obj1 != null)
                continue; /* Loop/switch isn't completed */
        }
        if (class1 == com/fasterxml/jackson/databind/util/TokenBuffer) {
            obj = new TokenBufferDeserializer();
        } else {
            deserializationcontext = findOptionalStdDeserializer(deserializationcontext, javatype, beandescription);
            obj = deserializationcontext;
            if (deserializationcontext == null)
                obj = JdkDeserializers.find(class1, s);
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected JsonDeserializer findDeserializerFromAnnotation(DeserializationContext deserializationcontext, Annotated annotated) {
        Object obj = deserializationcontext.getAnnotationIntrospector().findDeserializer(annotated);
        if (obj == null)
            deserializationcontext = null;
        else
            deserializationcontext = deserializationcontext.deserializerInstance(annotated, obj);
        return deserializationcontext;
    }

    protected KeyDeserializer findKeyDeserializerFromAnnotation(DeserializationContext deserializationcontext, Annotated annotated) {
        Object obj = deserializationcontext.getAnnotationIntrospector().findKeyDeserializer(annotated);
        if (obj == null)
            deserializationcontext = null;
        else
            deserializationcontext = deserializationcontext.keyDeserializerInstance(annotated, obj);
        return deserializationcontext;
    }

    protected JsonDeserializer findOptionalStdDeserializer(DeserializationContext deserializationcontext, JavaType javatype, BeanDescription beandescription) {
        return OptionalHandlerFactory.instance.findDeserializer(javatype, deserializationcontext.getConfig(), beandescription);
    }

    public TypeDeserializer findPropertyContentTypeDeserializer(DeserializationConfig deserializationconfig, JavaType javatype, AnnotatedMember annotatedmember) {
        TypeResolverBuilder typeresolverbuilder = deserializationconfig.getAnnotationIntrospector().findPropertyContentTypeResolver(deserializationconfig, annotatedmember, javatype);
        javatype = javatype.getContentType();
        if (typeresolverbuilder == null)
            deserializationconfig = findTypeDeserializer(deserializationconfig, javatype);
        else
            deserializationconfig = typeresolverbuilder.buildTypeDeserializer(deserializationconfig, javatype, deserializationconfig.getSubtypeResolver().collectAndResolveSubtypesByTypeId(deserializationconfig, annotatedmember, javatype));
        return deserializationconfig;
    }

    public TypeDeserializer findPropertyTypeDeserializer(DeserializationConfig deserializationconfig, JavaType javatype, AnnotatedMember annotatedmember) {
        TypeResolverBuilder typeresolverbuilder = deserializationconfig.getAnnotationIntrospector().findPropertyTypeResolver(deserializationconfig, annotatedmember, javatype);
        if (typeresolverbuilder == null)
            deserializationconfig = findTypeDeserializer(deserializationconfig, javatype);
        else
            deserializationconfig = typeresolverbuilder.buildTypeDeserializer(deserializationconfig, javatype, deserializationconfig.getSubtypeResolver().collectAndResolveSubtypesByTypeId(deserializationconfig, annotatedmember, javatype));
        return deserializationconfig;
    }

    public TypeDeserializer findTypeDeserializer(DeserializationConfig deserializationconfig, JavaType javatype) {
        Object obj;
        Collection collection;
        Object obj1;
        Object obj3;
        collection = null;
        obj1 = null;
        obj3 = deserializationconfig.introspectClassAnnotations(javatype.getRawClass()).getClassInfo();
        obj = deserializationconfig.getAnnotationIntrospector().findTypeResolver(deserializationconfig, ((com.fasterxml.jackson.databind.introspect.AnnotatedClass) (obj3)), javatype);
        if (obj != null) goto _L2; else goto _L1
_L1:
        obj3 = deserializationconfig.getDefaultTyper(javatype);
        obj = obj3;
        if (obj3 != null) goto _L4; else goto _L3
_L3:
        deserializationconfig = obj1;
_L6:
        return deserializationconfig;
_L2:
        collection = deserializationconfig.getSubtypeResolver().collectAndResolveSubtypesByTypeId(deserializationconfig, ((com.fasterxml.jackson.databind.introspect.AnnotatedClass) (obj3)));
_L4:
        Object obj2 = obj;
        if (((TypeResolverBuilder) (obj)).getDefaultImpl() == null) {
            obj2 = obj;
            if (javatype.isAbstract()) {
                JavaType javatype1 = mapAbstractType(deserializationconfig, javatype);
                obj2 = obj;
                if (javatype1 != null) {
                    obj2 = obj;
                    if (javatype1.getRawClass() != javatype.getRawClass())
                        obj2 = ((TypeResolverBuilder) (obj)).defaultImpl(javatype1.getRawClass());
                }
            }
        }
        deserializationconfig = ((TypeResolverBuilder) (obj2)).buildTypeDeserializer(deserializationconfig, javatype, collection);
        if (true) goto _L6; else goto _L5
_L5:
    }

    public ValueInstantiator findValueInstantiator(DeserializationContext deserializationcontext, BeanDescription beandescription) {
        ValueInstantiator valueinstantiator;
label0:
        {
            DeserializationConfig deserializationconfig = deserializationcontext.getConfig();
            valueinstantiator = null;
            com.fasterxml.jackson.databind.introspect.AnnotatedClass annotatedclass = beandescription.getClassInfo();
            Object obj = deserializationcontext.getAnnotationIntrospector().findValueInstantiator(annotatedclass);
            if (obj != null)
                valueinstantiator = _valueInstantiatorInstance(deserializationconfig, annotatedclass, obj);
            obj = valueinstantiator;
            if (valueinstantiator == null) {
                valueinstantiator = _findStdValueInstantiator(deserializationconfig, beandescription);
                obj = valueinstantiator;
                if (valueinstantiator == null)
                    obj = _constructDefaultValueInstantiator(deserializationcontext, beandescription);
            }
            if (_factoryConfig.hasValueInstantiators()) {
                Iterator iterator = _factoryConfig.valueInstantiators().iterator();
                ValueInstantiators valueinstantiators;
                do {
                    valueinstantiator = ((ValueInstantiator) (obj));
                    if (!iterator.hasNext())
                        break label0;
                    valueinstantiators = (ValueInstantiators)iterator.next();
                    valueinstantiator = valueinstantiators.findValueInstantiator(deserializationconfig, beandescription, ((ValueInstantiator) (obj)));
                    obj = valueinstantiator;
                } while (valueinstantiator != null);
                throw JsonMappingException.from(deserializationcontext.getParser(), (new StringBuilder()).append("Broken registered ValueInstantiators (of type ").append(valueinstantiators.getClass().getName()).append("): returned null ValueInstantiator").toString());
            }
            valueinstantiator = ((ValueInstantiator) (obj));
        }
        if (valueinstantiator.getIncompleteParameter() != null) {
            beandescription = valueinstantiator.getIncompleteParameter();
            deserializationcontext = beandescription.getOwner();
            throw new IllegalArgumentException((new StringBuilder()).append("Argument #").append(beandescription.getIndex()).append(" of constructor ").append(deserializationcontext).append(" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator").toString());
        } else {
            return valueinstantiator;
        }
    }

    public DeserializerFactoryConfig getFactoryConfig() {
        return _factoryConfig;
    }

    public JavaType mapAbstractType(DeserializationConfig deserializationconfig, JavaType javatype) {
        do {
            JavaType javatype1 = _mapAbstractType2(deserializationconfig, javatype);
            if (javatype1 == null)
                return javatype;
            Class class2 = javatype.getRawClass();
            Class class1 = javatype1.getRawClass();
            if (class2 == class1 || !class2.isAssignableFrom(class1))
                throw new IllegalArgumentException((new StringBuilder()).append("Invalid abstract type resolution from ").append(javatype).append(" to ").append(javatype1).append(": latter is not a subtype of former").toString());
            javatype = javatype1;
        } while (true);
    }

    protected JavaType modifyTypeByAnnotation(DeserializationContext deserializationcontext, Annotated annotated, JavaType javatype) {
        AnnotationIntrospector annotationintrospector = deserializationcontext.getAnnotationIntrospector();
        if (annotationintrospector != null) {
            Object obj = javatype;
            if (javatype.isMapLikeType()) {
                JavaType javatype1 = javatype.getKeyType();
                obj = javatype;
                if (javatype1 != null) {
                    obj = javatype;
                    if (javatype1.getValueHandler() == null) {
                        KeyDeserializer keydeserializer = deserializationcontext.keyDeserializerInstance(annotated, annotationintrospector.findKeyDeserializer(annotated));
                        obj = javatype;
                        if (keydeserializer != null) {
                            obj = ((MapLikeType)javatype).withKeyValueHandler(keydeserializer);
                            ((JavaType) (obj)).getKeyType();
                        }
                    }
                }
            }
            JavaType javatype2 = ((JavaType) (obj)).getContentType();
            javatype = ((JavaType) (obj));
            if (javatype2 != null) {
                javatype = ((JavaType) (obj));
                if (javatype2.getValueHandler() == null) {
                    JsonDeserializer jsondeserializer = deserializationcontext.deserializerInstance(annotated, annotationintrospector.findContentDeserializer(annotated));
                    javatype = ((JavaType) (obj));
                    if (jsondeserializer != null)
                        javatype = ((JavaType) (obj)).withContentValueHandler(jsondeserializer);
                }
            }
            javatype = annotationintrospector.refineDeserializationType(deserializationcontext.getConfig(), annotated, javatype);
        }
        return javatype;
    }

    protected JavaType resolveType(DeserializationContext deserializationcontext, BeanDescription beandescription, JavaType javatype, AnnotatedMember annotatedmember) {
        AnnotationIntrospector annotationintrospector = deserializationcontext.getAnnotationIntrospector();
        if (annotationintrospector != null) goto _L2; else goto _L1
_L1:
        return javatype;
_L2:
label0:
        {
            Object obj = javatype;
            if (javatype.isMapLikeType()) {
                obj = javatype;
                if (javatype.getKeyType() != null) {
                    beandescription = deserializationcontext.keyDeserializerInstance(annotatedmember, annotationintrospector.findKeyDeserializer(annotatedmember));
                    obj = javatype;
                    if (beandescription != null) {
                        obj = ((MapLikeType)javatype).withKeyValueHandler(beandescription);
                        ((JavaType) (obj)).getKeyType();
                    }
                }
            }
            if (!((JavaType) (obj)).isContainerType()) {
                beandescription = ((BeanDescription) (obj));
                if (!((JavaType) (obj)).isReferenceType())
                    break label0;
            }
            beandescription = deserializationcontext.deserializerInstance(annotatedmember, annotationintrospector.findContentDeserializer(annotatedmember));
            javatype = ((JavaType) (obj));
            if (beandescription != null)
                javatype = ((JavaType) (obj)).withContentValueHandler(beandescription);
            beandescription = javatype;
            if (annotatedmember instanceof AnnotatedMember) {
                TypeDeserializer typedeserializer = findPropertyContentTypeDeserializer(deserializationcontext.getConfig(), javatype, annotatedmember);
                beandescription = javatype;
                if (typedeserializer != null)
                    beandescription = javatype.withContentTypeHandler(typedeserializer);
            }
        }
        if (annotatedmember instanceof AnnotatedMember)
            deserializationcontext = findPropertyTypeDeserializer(deserializationcontext.getConfig(), beandescription, annotatedmember);
        else
            deserializationcontext = findTypeDeserializer(deserializationcontext.getConfig(), beandescription);
        javatype = beandescription;
        if (deserializationcontext != null)
            javatype = beandescription.withTypeHandler(deserializationcontext);
        if (true) goto _L1; else goto _L3
_L3:
    }

    public final DeserializerFactory withAbstractTypeResolver(AbstractTypeResolver abstracttyperesolver) {
        return withConfig(_factoryConfig.withAbstractTypeResolver(abstracttyperesolver));
    }

    public final DeserializerFactory withAdditionalDeserializers(Deserializers deserializers) {
        return withConfig(_factoryConfig.withAdditionalDeserializers(deserializers));
    }

    public final DeserializerFactory withAdditionalKeyDeserializers(KeyDeserializers keydeserializers) {
        return withConfig(_factoryConfig.withAdditionalKeyDeserializers(keydeserializers));
    }

    protected abstract DeserializerFactory withConfig(DeserializerFactoryConfig deserializerfactoryconfig);

    public final DeserializerFactory withDeserializerModifier(BeanDeserializerModifier beandeserializermodifier) {
        return withConfig(_factoryConfig.withDeserializerModifier(beandeserializermodifier));
    }

    public final DeserializerFactory withValueInstantiators(ValueInstantiators valueinstantiators) {
        return withConfig(_factoryConfig.withValueInstantiators(valueinstantiators));
    }

    static  {
        _mapFallbacks = new HashMap();
        _mapFallbacks.put(java/util/Map.getName(), java/util/LinkedHashMap);
        _mapFallbacks.put(java/util/concurrent/ConcurrentMap.getName(), java/util/concurrent/ConcurrentHashMap);
        _mapFallbacks.put(java/util/SortedMap.getName(), java/util/TreeMap);
        _mapFallbacks.put(java/util/NavigableMap.getName(), java/util/TreeMap);
        _mapFallbacks.put(java/util/concurrent/ConcurrentNavigableMap.getName(), java/util/concurrent/ConcurrentSkipListMap);
        _collectionFallbacks = new HashMap();
        _collectionFallbacks.put(java/util/Collection.getName(), java/util/ArrayList);
        _collectionFallbacks.put(java/util/List.getName(), java/util/ArrayList);
        _collectionFallbacks.put(java/util/Set.getName(), java/util/HashSet);
        _collectionFallbacks.put(java/util/SortedSet.getName(), java/util/TreeSet);
        _collectionFallbacks.put(java/util/Queue.getName(), java/util/LinkedList);
        _collectionFallbacks.put("java.util.Deque", java/util/LinkedList);
        _collectionFallbacks.put("java.util.NavigableSet", java/util/TreeSet);
    }
}
