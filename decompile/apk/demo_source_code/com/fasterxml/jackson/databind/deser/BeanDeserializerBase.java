// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser;

import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler;
import com.fasterxml.jackson.databind.deser.impl.InnerClassProperty;
import com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty;
import com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator;
import com.fasterxml.jackson.databind.deser.impl.PropertyBasedObjectIdGenerator;
import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
import com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer;
import com.fasterxml.jackson.databind.deser.impl.UnwrappedPropertyHandler;
import com.fasterxml.jackson.databind.deser.impl.ValueInjector;
import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.exc.IgnoredPropertyException;
import com.fasterxml.jackson.databind.introspect.*;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.type.ClassKey;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.*;
import java.io.IOException;
import java.io.Serializable;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.*;

// Referenced classes of package com.fasterxml.jackson.databind.deser:
//            ContextualDeserializer, ResolvableDeserializer, BeanDeserializerBuilder, ValueInstantiator, 
//            SettableBeanProperty, UnresolvedForwardReference, SettableAnyProperty

public abstract class BeanDeserializerBase extends StdDeserializer
    implements ContextualDeserializer, ResolvableDeserializer, Serializable {

    protected static final PropertyName TEMP_PROPERTY_NAME = new PropertyName("#temporary-name");
    private static final long serialVersionUID = 1L;
    protected SettableAnyProperty _anySetter;
    protected JsonDeserializer _arrayDelegateDeserializer;
    protected final Map _backRefs;
    protected final BeanPropertyMap _beanProperties;
    protected final JavaType _beanType;
    private final transient Annotations _classAnnotations;
    protected JsonDeserializer _delegateDeserializer;
    protected ExternalTypeHandler _externalTypeIdHandler;
    protected final HashSet _ignorableProps;
    protected final boolean _ignoreAllUnknown;
    protected final ValueInjector _injectables[];
    protected final boolean _needViewProcesing;
    protected boolean _nonStandardCreation;
    protected final ObjectIdReader _objectIdReader;
    protected PropertyBasedCreator _propertyBasedCreator;
    protected final com.fasterxml.jackson.annotation.JsonFormat.Shape _serializationShape;
    protected transient HashMap _subDeserializers;
    protected UnwrappedPropertyHandler _unwrappedPropertyHandler;
    protected final ValueInstantiator _valueInstantiator;
    protected boolean _vanillaProcessing;

    protected BeanDeserializerBase(BeanDeserializerBase beandeserializerbase) {
        this(beandeserializerbase, beandeserializerbase._ignoreAllUnknown);
    }

    public BeanDeserializerBase(BeanDeserializerBase beandeserializerbase, ObjectIdReader objectidreader) {
        super(beandeserializerbase._beanType);
        _classAnnotations = beandeserializerbase._classAnnotations;
        _beanType = beandeserializerbase._beanType;
        _valueInstantiator = beandeserializerbase._valueInstantiator;
        _delegateDeserializer = beandeserializerbase._delegateDeserializer;
        _propertyBasedCreator = beandeserializerbase._propertyBasedCreator;
        _backRefs = beandeserializerbase._backRefs;
        _ignorableProps = beandeserializerbase._ignorableProps;
        _ignoreAllUnknown = beandeserializerbase._ignoreAllUnknown;
        _anySetter = beandeserializerbase._anySetter;
        _injectables = beandeserializerbase._injectables;
        _nonStandardCreation = beandeserializerbase._nonStandardCreation;
        _unwrappedPropertyHandler = beandeserializerbase._unwrappedPropertyHandler;
        _needViewProcesing = beandeserializerbase._needViewProcesing;
        _serializationShape = beandeserializerbase._serializationShape;
        _objectIdReader = objectidreader;
        if (objectidreader == null) {
            _beanProperties = beandeserializerbase._beanProperties;
            _vanillaProcessing = beandeserializerbase._vanillaProcessing;
        } else {
            objectidreader = new ObjectIdValueProperty(objectidreader, PropertyMetadata.STD_REQUIRED);
            _beanProperties = beandeserializerbase._beanProperties.withProperty(objectidreader);
            _vanillaProcessing = false;
        }
    }

    protected BeanDeserializerBase(BeanDeserializerBase beandeserializerbase, NameTransformer nametransformer) {
        super(beandeserializerbase._beanType);
        _classAnnotations = beandeserializerbase._classAnnotations;
        _beanType = beandeserializerbase._beanType;
        _valueInstantiator = beandeserializerbase._valueInstantiator;
        _delegateDeserializer = beandeserializerbase._delegateDeserializer;
        _propertyBasedCreator = beandeserializerbase._propertyBasedCreator;
        _backRefs = beandeserializerbase._backRefs;
        _ignorableProps = beandeserializerbase._ignorableProps;
        boolean flag;
        UnwrappedPropertyHandler unwrappedpropertyhandler;
        UnwrappedPropertyHandler unwrappedpropertyhandler1;
        if (nametransformer != null || beandeserializerbase._ignoreAllUnknown)
            flag = true;
        else
            flag = false;
        _ignoreAllUnknown = flag;
        _anySetter = beandeserializerbase._anySetter;
        _injectables = beandeserializerbase._injectables;
        _objectIdReader = beandeserializerbase._objectIdReader;
        _nonStandardCreation = beandeserializerbase._nonStandardCreation;
        unwrappedpropertyhandler1 = beandeserializerbase._unwrappedPropertyHandler;
        if (nametransformer != null) {
            unwrappedpropertyhandler = unwrappedpropertyhandler1;
            if (unwrappedpropertyhandler1 != null)
                unwrappedpropertyhandler = unwrappedpropertyhandler1.renameAll(nametransformer);
            _beanProperties = beandeserializerbase._beanProperties.renameAll(nametransformer);
        } else {
            _beanProperties = beandeserializerbase._beanProperties;
            unwrappedpropertyhandler = unwrappedpropertyhandler1;
        }
        _unwrappedPropertyHandler = unwrappedpropertyhandler;
        _needViewProcesing = beandeserializerbase._needViewProcesing;
        _serializationShape = beandeserializerbase._serializationShape;
        _vanillaProcessing = false;
    }

    public BeanDeserializerBase(BeanDeserializerBase beandeserializerbase, HashSet hashset) {
        super(beandeserializerbase._beanType);
        _classAnnotations = beandeserializerbase._classAnnotations;
        _beanType = beandeserializerbase._beanType;
        _valueInstantiator = beandeserializerbase._valueInstantiator;
        _delegateDeserializer = beandeserializerbase._delegateDeserializer;
        _propertyBasedCreator = beandeserializerbase._propertyBasedCreator;
        _backRefs = beandeserializerbase._backRefs;
        _ignorableProps = hashset;
        _ignoreAllUnknown = beandeserializerbase._ignoreAllUnknown;
        _anySetter = beandeserializerbase._anySetter;
        _injectables = beandeserializerbase._injectables;
        _nonStandardCreation = beandeserializerbase._nonStandardCreation;
        _unwrappedPropertyHandler = beandeserializerbase._unwrappedPropertyHandler;
        _needViewProcesing = beandeserializerbase._needViewProcesing;
        _serializationShape = beandeserializerbase._serializationShape;
        _vanillaProcessing = beandeserializerbase._vanillaProcessing;
        _objectIdReader = beandeserializerbase._objectIdReader;
        _beanProperties = beandeserializerbase._beanProperties;
    }

    protected BeanDeserializerBase(BeanDeserializerBase beandeserializerbase, boolean flag) {
        super(beandeserializerbase._beanType);
        _classAnnotations = beandeserializerbase._classAnnotations;
        _beanType = beandeserializerbase._beanType;
        _valueInstantiator = beandeserializerbase._valueInstantiator;
        _delegateDeserializer = beandeserializerbase._delegateDeserializer;
        _propertyBasedCreator = beandeserializerbase._propertyBasedCreator;
        _beanProperties = beandeserializerbase._beanProperties;
        _backRefs = beandeserializerbase._backRefs;
        _ignorableProps = beandeserializerbase._ignorableProps;
        _ignoreAllUnknown = flag;
        _anySetter = beandeserializerbase._anySetter;
        _injectables = beandeserializerbase._injectables;
        _objectIdReader = beandeserializerbase._objectIdReader;
        _nonStandardCreation = beandeserializerbase._nonStandardCreation;
        _unwrappedPropertyHandler = beandeserializerbase._unwrappedPropertyHandler;
        _needViewProcesing = beandeserializerbase._needViewProcesing;
        _serializationShape = beandeserializerbase._serializationShape;
        _vanillaProcessing = beandeserializerbase._vanillaProcessing;
    }

    protected BeanDeserializerBase(BeanDeserializerBuilder beandeserializerbuilder, BeanDescription beandescription, BeanPropertyMap beanpropertymap, Map map, HashSet hashset, boolean flag, boolean flag1) {
        boolean flag2 = true;
        Object obj = null;
        super(beandescription.getType());
        _classAnnotations = beandescription.getClassInfo().getAnnotations();
        _beanType = beandescription.getType();
        _valueInstantiator = beandeserializerbuilder.getValueInstantiator();
        _beanProperties = beanpropertymap;
        _backRefs = map;
        _ignorableProps = hashset;
        _ignoreAllUnknown = flag;
        _anySetter = beandeserializerbuilder.getAnySetter();
        beanpropertymap = beandeserializerbuilder.getInjectables();
        if (beanpropertymap == null || beanpropertymap.isEmpty())
            beanpropertymap = null;
        else
            beanpropertymap = (ValueInjector[])beanpropertymap.toArray(new ValueInjector[beanpropertymap.size()]);
        _injectables = beanpropertymap;
        _objectIdReader = beandeserializerbuilder.getObjectIdReader();
        if (_unwrappedPropertyHandler != null || _valueInstantiator.canCreateUsingDelegate() || _valueInstantiator.canCreateFromObjectWith() || !_valueInstantiator.canCreateUsingDefault())
            flag = true;
        else
            flag = false;
        _nonStandardCreation = flag;
        beandeserializerbuilder = beandescription.findExpectedFormat(null);
        if (beandeserializerbuilder == null)
            beandeserializerbuilder = obj;
        else
            beandeserializerbuilder = beandeserializerbuilder.getShape();
        _serializationShape = beandeserializerbuilder;
        _needViewProcesing = flag1;
        if (!_nonStandardCreation && _injectables == null && !_needViewProcesing && _objectIdReader == null)
            flag = flag2;
        else
            flag = false;
        _vanillaProcessing = flag;
    }

    private JsonDeserializer _findDelegateDeserializer(DeserializationContext deserializationcontext, JavaType javatype, AnnotatedWithParams annotatedwithparams) {
        com.fasterxml.jackson.databind.BeanProperty.Std std = new com.fasterxml.jackson.databind.BeanProperty.Std(TEMP_PROPERTY_NAME, javatype, null, _classAnnotations, annotatedwithparams, PropertyMetadata.STD_OPTIONAL);
        TypeDeserializer typedeserializer = (TypeDeserializer)javatype.getTypeHandler();
        annotatedwithparams = typedeserializer;
        if (typedeserializer == null)
            annotatedwithparams = deserializationcontext.getConfig().findTypeDeserializer(javatype);
        deserializationcontext = findDeserializer(deserializationcontext, javatype, std);
        if (annotatedwithparams != null)
            deserializationcontext = new TypeWrappedDeserializer(annotatedwithparams.forProperty(std), deserializationcontext);
        return deserializationcontext;
    }

    private Throwable throwOrReturnThrowable(Throwable throwable, DeserializationContext deserializationcontext) {
        for (; (throwable instanceof InvocationTargetException) && throwable.getCause() != null; throwable = throwable.getCause());
        if (throwable instanceof Error)
            throw (Error)throwable;
        boolean flag;
        if (deserializationcontext == null || deserializationcontext.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS))
            flag = true;
        else
            flag = false;
        if (throwable instanceof IOException) {
            if (!flag || !(throwable instanceof JsonProcessingException))
                throw (IOException)throwable;
        } else
        if (!flag && (throwable instanceof RuntimeException))
            throw (RuntimeException)throwable;
        return throwable;
    }

    protected Object _convertObjectId(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj, JsonDeserializer jsondeserializer) {
        jsonparser = new TokenBuffer(jsonparser, deserializationcontext);
        if (obj instanceof String)
            jsonparser.writeString((String)obj);
        else
        if (obj instanceof Long)
            jsonparser.writeNumber(((Long)obj).longValue());
        else
        if (obj instanceof Integer)
            jsonparser.writeNumber(((Integer)obj).intValue());
        else
            jsonparser.writeObject(obj);
        jsonparser = jsonparser.asParser();
        jsonparser.nextToken();
        return jsondeserializer.deserialize(jsonparser, deserializationcontext);
    }

    protected abstract Object _deserializeUsingPropertyBased(JsonParser jsonparser, DeserializationContext deserializationcontext);

    protected JsonDeserializer _findSubclassDeserializer(DeserializationContext deserializationcontext, Object obj, TokenBuffer tokenbuffer) {
        this;
        JVM INSTR monitorenter ;
        if (_subDeserializers != null) goto _L2; else goto _L1
_L1:
        tokenbuffer = null;
_L7:
        this;
        JVM INSTR monitorexit ;
        if (tokenbuffer == null) goto _L4; else goto _L3
_L3:
        return tokenbuffer;
_L2:
        tokenbuffer = _subDeserializers;
        ClassKey classkey = JVM INSTR new #348 <Class ClassKey>;
        classkey.ClassKey(obj.getClass());
        tokenbuffer = (JsonDeserializer)tokenbuffer.get(classkey);
        continue; /* Loop/switch isn't completed */
        deserializationcontext;
        this;
        JVM INSTR monitorexit ;
        throw deserializationcontext;
_L4:
        deserializationcontext = deserializationcontext.findRootValueDeserializer(deserializationcontext.constructType(obj.getClass()));
        tokenbuffer = deserializationcontext;
        if (deserializationcontext == null) goto _L3; else goto _L5
_L5:
        this;
        JVM INSTR monitorenter ;
        if (_subDeserializers == null) {
            tokenbuffer = JVM INSTR new #359 <Class HashMap>;
            tokenbuffer.HashMap();
            _subDeserializers = tokenbuffer;
        }
        HashMap hashmap = _subDeserializers;
        tokenbuffer = JVM INSTR new #348 <Class ClassKey>;
        tokenbuffer.ClassKey(obj.getClass());
        hashmap.put(tokenbuffer, deserializationcontext);
        this;
        JVM INSTR monitorexit ;
        tokenbuffer = deserializationcontext;
          goto _L3
        deserializationcontext;
        this;
        JVM INSTR monitorexit ;
        throw deserializationcontext;
        if (true) goto _L7; else goto _L6
_L6:
    }

    protected Object _handleTypedObjectId(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj, Object obj1) {
        JsonDeserializer jsondeserializer = _objectIdReader.getDeserializer();
        if (jsondeserializer.handledType() != obj1.getClass())
            obj1 = _convertObjectId(jsonparser, deserializationcontext, obj1, jsondeserializer);
        deserializationcontext.findObjectId(obj1, _objectIdReader.generator, _objectIdReader.resolver).bindItem(obj);
        deserializationcontext = _objectIdReader.idProperty;
        jsonparser = ((JsonParser) (obj));
        if (deserializationcontext != null)
            jsonparser = ((JsonParser) (deserializationcontext.setAndReturn(obj, obj1)));
        return jsonparser;
    }

    protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationContext deserializationcontext, SettableBeanProperty settablebeanproperty) {
        Object obj;
        Object obj1;
        obj1 = settablebeanproperty.getValueDeserializer();
        obj = settablebeanproperty;
        if (!(obj1 instanceof BeanDeserializerBase)) goto _L2; else goto _L1
_L1:
        obj = settablebeanproperty;
        if (((BeanDeserializerBase)obj1).getValueInstantiator().canCreateUsingDefault()) goto _L2; else goto _L3
_L3:
        Class class1;
        class1 = settablebeanproperty.getType().getRawClass();
        obj1 = ClassUtil.getOuterClass(class1);
        obj = settablebeanproperty;
        if (obj1 == null) goto _L2; else goto _L4
_L4:
        obj = settablebeanproperty;
        if (obj1 != _beanType.getRawClass()) goto _L2; else goto _L5
_L5:
        int i;
        int j;
        Constructor aconstructor[];
        aconstructor = class1.getConstructors();
        j = aconstructor.length;
        i = 0;
_L10:
        obj = settablebeanproperty;
        if (i >= j) goto _L2; else goto _L6
_L6:
        Constructor constructor;
        constructor = aconstructor[i];
        obj = constructor.getParameterTypes();
        if (obj.length != 1 || obj[0] != obj1) goto _L8; else goto _L7
_L7:
        if (deserializationcontext.canOverrideAccessModifiers())
            ClassUtil.checkAndFixAccess(constructor, deserializationcontext.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
        obj = new InnerClassProperty(settablebeanproperty, constructor);
_L2:
        return ((SettableBeanProperty) (obj));
_L8:
        i++;
        if (true) goto _L10; else goto _L9
_L9:
    }

    protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext deserializationcontext, SettableBeanProperty settablebeanproperty) {
        String s = settablebeanproperty.getManagedReferenceName();
        if (s != null) {
            SettableBeanProperty settablebeanproperty1 = settablebeanproperty.getValueDeserializer().findBackReference(s);
            if (settablebeanproperty1 == null)
                throw new IllegalArgumentException((new StringBuilder()).append("Can not handle managed/back reference '").append(s).append("': no back reference property found from type ").append(settablebeanproperty.getType()).toString());
            deserializationcontext = _beanType;
            JavaType javatype = settablebeanproperty1.getType();
            boolean flag = settablebeanproperty.getType().isContainerType();
            if (!javatype.getRawClass().isAssignableFrom(deserializationcontext.getRawClass()))
                throw new IllegalArgumentException((new StringBuilder()).append("Can not handle managed/back reference '").append(s).append("': back reference type (").append(javatype.getRawClass().getName()).append(") not compatible with managed type (").append(deserializationcontext.getRawClass().getName()).append(")").toString());
            settablebeanproperty = new ManagedReferenceProperty(settablebeanproperty, s, settablebeanproperty1, _classAnnotations, flag);
        }
        return settablebeanproperty;
    }

    protected SettableBeanProperty _resolveUnwrappedProperty(DeserializationContext deserializationcontext, SettableBeanProperty settablebeanproperty) {
        Object obj = settablebeanproperty.getMember();
        if (obj == null) goto _L2; else goto _L1
_L1:
        obj = deserializationcontext.getAnnotationIntrospector().findUnwrappingNameTransformer(((com.fasterxml.jackson.databind.introspect.AnnotatedMember) (obj)));
        if (obj == null) goto _L2; else goto _L3
_L3:
        deserializationcontext = settablebeanproperty.getValueDeserializer();
        obj = deserializationcontext.unwrappingDeserializer(((NameTransformer) (obj)));
        if (obj == deserializationcontext || obj == null) goto _L2; else goto _L4
_L4:
        deserializationcontext = settablebeanproperty.withValueDeserializer(((JsonDeserializer) (obj)));
_L6:
        return deserializationcontext;
_L2:
        deserializationcontext = null;
        if (true) goto _L6; else goto _L5
_L5:
    }

    protected SettableBeanProperty _resolvedObjectIdProperty(DeserializationContext deserializationcontext, SettableBeanProperty settablebeanproperty) {
        deserializationcontext = settablebeanproperty.getObjectIdInfo();
        ObjectIdReader objectidreader = settablebeanproperty.getValueDeserializer().getObjectIdReader();
        if (deserializationcontext != null || objectidreader != null)
            settablebeanproperty = new ObjectIdReferenceProperty(settablebeanproperty, deserializationcontext);
        return settablebeanproperty;
    }

    protected abstract BeanDeserializerBase asArrayDeserializer();

    public JsonDeserializer createContextual(DeserializationContext deserializationcontext, BeanProperty beanproperty) {
        ObjectIdReader objectidreader = _objectIdReader;
        AnnotationIntrospector annotationintrospector = deserializationcontext.getAnnotationIntrospector();
        Object obj;
        if (beanproperty == null || annotationintrospector == null)
            obj = null;
        else
            obj = beanproperty.getMember();
        beanproperty = objectidreader;
        if (obj != null) {
            beanproperty = objectidreader;
            if (annotationintrospector != null) {
                Object obj2 = annotationintrospector.findObjectIdInfo(((com.fasterxml.jackson.databind.introspect.Annotated) (obj)));
                beanproperty = objectidreader;
                if (obj2 != null) {
                    ObjectIdInfo objectidinfo = annotationintrospector.findObjectReferenceInfo(((com.fasterxml.jackson.databind.introspect.Annotated) (obj)), ((ObjectIdInfo) (obj2)));
                    beanproperty = objectidinfo.getGeneratorType();
                    com.fasterxml.jackson.annotation.ObjectIdResolver objectidresolver = deserializationcontext.objectIdResolverInstance(((com.fasterxml.jackson.databind.introspect.Annotated) (obj)), objectidinfo);
                    Object obj1;
                    if (beanproperty == com/fasterxml/jackson/annotation/ObjectIdGenerators$PropertyGenerator) {
                        obj1 = objectidinfo.getPropertyName();
                        beanproperty = findProperty(((PropertyName) (obj1)));
                        if (beanproperty == null)
                            throw new IllegalArgumentException((new StringBuilder()).append("Invalid Object Id definition for ").append(handledType().getName()).append(": can not find property with name '").append(obj1).append("'").toString());
                        obj2 = beanproperty.getType();
                        obj1 = new PropertyBasedObjectIdGenerator(objectidinfo.getScope());
                    } else {
                        beanproperty = deserializationcontext.constructType(beanproperty);
                        obj2 = deserializationcontext.getTypeFactory().findTypeParameters(beanproperty, com/fasterxml/jackson/annotation/ObjectIdGenerator)[0];
                        obj1 = deserializationcontext.objectIdGeneratorInstance(((com.fasterxml.jackson.databind.introspect.Annotated) (obj)), objectidinfo);
                        beanproperty = null;
                    }
                    deserializationcontext = deserializationcontext.findRootValueDeserializer(((JavaType) (obj2)));
                    beanproperty = ObjectIdReader.construct(((JavaType) (obj2)), objectidinfo.getPropertyName(), ((ObjectIdGenerator) (obj1)), deserializationcontext, beanproperty, objectidresolver);
                }
            }
        }
        if (beanproperty != null && beanproperty != _objectIdReader)
            beanproperty = withObjectIdReader(beanproperty);
        else
            beanproperty = this;
        deserializationcontext = beanproperty;
        if (obj != null) {
            obj1 = annotationintrospector.findPropertiesToIgnore(((com.fasterxml.jackson.databind.introspect.Annotated) (obj)), false);
            deserializationcontext = beanproperty;
            if (obj1 != null) {
                deserializationcontext = beanproperty;
                if (obj1.length != 0)
                    deserializationcontext = beanproperty.withIgnorableProperties(ArrayBuilders.setAndArray(((BeanDeserializerBase) (beanproperty))._ignorableProps, ((Object []) (obj1))));
            }
        }
        if (obj == null) goto _L2; else goto _L1
_L1:
        beanproperty = annotationintrospector.findFormat(((com.fasterxml.jackson.databind.introspect.Annotated) (obj)));
        if (beanproperty == null) goto _L2; else goto _L3
_L3:
        beanproperty = beanproperty.getShape();
_L5:
        obj = beanproperty;
        if (beanproperty == null)
            obj = _serializationShape;
        if (obj == com.fasterxml.jackson.annotation.JsonFormat.Shape.ARRAY)
            deserializationcontext = deserializationcontext.asArrayDeserializer();
        return deserializationcontext;
_L2:
        beanproperty = null;
        if (true) goto _L5; else goto _L4
_L4:
    }

    public Iterator creatorProperties() {
        Iterator iterator;
        if (_propertyBasedCreator == null)
            iterator = Collections.emptyList().iterator();
        else
            iterator = _propertyBasedCreator.properties().iterator();
        return iterator;
    }

    public Object deserializeFromArray(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (_arrayDelegateDeserializer == null) goto _L2; else goto _L1
_L1:
        Object obj1 = _valueInstantiator.createUsingArrayDelegate(deserializationcontext, _arrayDelegateDeserializer.deserialize(jsonparser, deserializationcontext));
        Object obj = obj1;
        if (_injectables == null)
            break MISSING_BLOCK_LABEL_46;
        injectValues(deserializationcontext, obj1);
        obj = obj1;
_L4:
        return obj;
        obj;
        wrapInstantiationProblem(((Throwable) (obj)), deserializationcontext);
_L2:
        if (_delegateDeserializer == null)
            break MISSING_BLOCK_LABEL_111;
        obj1 = _valueInstantiator.createUsingArrayDelegate(deserializationcontext, _delegateDeserializer.deserialize(jsonparser, deserializationcontext));
        obj = obj1;
        if (_injectables == null)
            continue; /* Loop/switch isn't completed */
        injectValues(deserializationcontext, obj1);
        obj = obj1;
        continue; /* Loop/switch isn't completed */
        obj;
        wrapInstantiationProblem(((Throwable) (obj)), deserializationcontext);
        if (deserializationcontext.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {
            if (jsonparser.nextToken() == JsonToken.END_ARRAY && deserializationcontext.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) {
                obj = null;
            } else {
                obj = deserialize(jsonparser, deserializationcontext);
                if (jsonparser.nextToken() != JsonToken.END_ARRAY)
                    throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.END_ARRAY, (new StringBuilder()).append("Attempted to unwrap single value array for single '").append(_valueClass.getName()).append("' value but there was more than a single value in the array").toString());
            }
        } else
        if (deserializationcontext.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) {
            if (jsonparser.nextToken() == JsonToken.END_ARRAY)
                obj = null;
            else
                throw deserializationcontext.mappingException(handledType(), JsonToken.START_ARRAY);
        } else {
            throw deserializationcontext.mappingException(handledType());
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public Object deserializeFromBoolean(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (_delegateDeserializer != null && !_valueInstantiator.canCreateFromBoolean()) {
            Object obj = _valueInstantiator.createUsingDelegate(deserializationcontext, _delegateDeserializer.deserialize(jsonparser, deserializationcontext));
            jsonparser = ((JsonParser) (obj));
            if (_injectables != null) {
                injectValues(deserializationcontext, obj);
                jsonparser = ((JsonParser) (obj));
            }
        } else {
            boolean flag;
            if (jsonparser.getCurrentToken() == JsonToken.VALUE_TRUE)
                flag = true;
            else
                flag = false;
            jsonparser = ((JsonParser) (_valueInstantiator.createFromBoolean(deserializationcontext, flag)));
        }
        return jsonparser;
    }

    public Object deserializeFromDouble(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        com.fasterxml.jackson.core.JsonParser.NumberType numbertype = jsonparser.getNumberType();
        if (numbertype == com.fasterxml.jackson.core.JsonParser.NumberType.DOUBLE || numbertype == com.fasterxml.jackson.core.JsonParser.NumberType.FLOAT) {
            if (_delegateDeserializer != null && !_valueInstantiator.canCreateFromDouble()) {
                Object obj = _valueInstantiator.createUsingDelegate(deserializationcontext, _delegateDeserializer.deserialize(jsonparser, deserializationcontext));
                jsonparser = ((JsonParser) (obj));
                if (_injectables != null) {
                    injectValues(deserializationcontext, obj);
                    jsonparser = ((JsonParser) (obj));
                }
            } else {
                jsonparser = ((JsonParser) (_valueInstantiator.createFromDouble(deserializationcontext, jsonparser.getDoubleValue())));
            }
        } else
        if (_delegateDeserializer != null)
            jsonparser = ((JsonParser) (_valueInstantiator.createUsingDelegate(deserializationcontext, _delegateDeserializer.deserialize(jsonparser, deserializationcontext))));
        else
            throw deserializationcontext.instantiationException(handledType(), "no suitable creator method found to deserialize from JSON floating-point number");
        return jsonparser;
    }

    public Object deserializeFromEmbedded(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (_objectIdReader != null)
            jsonparser = ((JsonParser) (deserializeFromObjectId(jsonparser, deserializationcontext)));
        else
            jsonparser = ((JsonParser) (jsonparser.getEmbeddedObject()));
        return jsonparser;
    }

    public Object deserializeFromNumber(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (_objectIdReader == null) goto _L2; else goto _L1
_L1:
        jsonparser = ((JsonParser) (deserializeFromObjectId(jsonparser, deserializationcontext)));
_L4:
        return jsonparser;
_L2:
        static class _cls1 {

            static final int $SwitchMap$com$fasterxml$jackson$core$JsonParser$NumberType[];

            static  {
                $SwitchMap$com$fasterxml$jackson$core$JsonParser$NumberType = new int[com.fasterxml.jackson.core.JsonParser.NumberType.values().length];
                NoSuchFieldError nosuchfielderror;
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonParser$NumberType[com.fasterxml.jackson.core.JsonParser.NumberType.INT.ordinal()] = 1;
                }
                catch (NoSuchFieldError nosuchfielderror1) { }
                $SwitchMap$com$fasterxml$jackson$core$JsonParser$NumberType[com.fasterxml.jackson.core.JsonParser.NumberType.LONG.ordinal()] = 2;
_L2:
                return;
                nosuchfielderror;
                if (true) goto _L2; else goto _L1
_L1:
            }
        }

        switch (_cls1..SwitchMap.com.fasterxml.jackson.core.JsonParser.NumberType[jsonparser.getNumberType().ordinal()]) {
        default:
            if (_delegateDeserializer == null)
                break; /* Loop/switch isn't completed */
            Object obj = _valueInstantiator.createUsingDelegate(deserializationcontext, _delegateDeserializer.deserialize(jsonparser, deserializationcontext));
            jsonparser = ((JsonParser) (obj));
            if (_injectables != null) {
                injectValues(deserializationcontext, obj);
                jsonparser = ((JsonParser) (obj));
            }
            break;

        case 1: // '\001'
            if (_delegateDeserializer != null && !_valueInstantiator.canCreateFromInt()) {
                Object obj1 = _valueInstantiator.createUsingDelegate(deserializationcontext, _delegateDeserializer.deserialize(jsonparser, deserializationcontext));
                jsonparser = ((JsonParser) (obj1));
                if (_injectables != null) {
                    injectValues(deserializationcontext, obj1);
                    jsonparser = ((JsonParser) (obj1));
                }
            } else {
                jsonparser = ((JsonParser) (_valueInstantiator.createFromInt(deserializationcontext, jsonparser.getIntValue())));
            }
            break;

        case 2: // '\002'
            if (_delegateDeserializer != null && !_valueInstantiator.canCreateFromInt()) {
                Object obj2 = _valueInstantiator.createUsingDelegate(deserializationcontext, _delegateDeserializer.deserialize(jsonparser, deserializationcontext));
                jsonparser = ((JsonParser) (obj2));
                if (_injectables != null) {
                    injectValues(deserializationcontext, obj2);
                    jsonparser = ((JsonParser) (obj2));
                }
            } else {
                jsonparser = ((JsonParser) (_valueInstantiator.createFromLong(deserializationcontext, jsonparser.getLongValue())));
            }
            break;
        }
        if (true) goto _L4; else goto _L3
_L3:
        throw deserializationcontext.instantiationException(handledType(), "no suitable creator method found to deserialize from JSON integer number");
    }

    public abstract Object deserializeFromObject(JsonParser jsonparser, DeserializationContext deserializationcontext);

    protected Object deserializeFromObjectId(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        Object obj = _objectIdReader.readObjectReference(jsonparser, deserializationcontext);
        ReadableObjectId readableobjectid = deserializationcontext.findObjectId(obj, _objectIdReader.generator, _objectIdReader.resolver);
        deserializationcontext = ((DeserializationContext) (readableobjectid.resolve()));
        if (deserializationcontext == null)
            throw new UnresolvedForwardReference(jsonparser, (new StringBuilder()).append("Could not resolve Object Id [").append(obj).append("] (for ").append(_beanType).append(").").toString(), jsonparser.getCurrentLocation(), readableobjectid);
        else
            return deserializationcontext;
    }

    protected Object deserializeFromObjectUsingNonDefault(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (_delegateDeserializer == null) goto _L2; else goto _L1
_L1:
        jsonparser = ((JsonParser) (_valueInstantiator.createUsingDelegate(deserializationcontext, _delegateDeserializer.deserialize(jsonparser, deserializationcontext))));
_L4:
        return jsonparser;
_L2:
        if (_propertyBasedCreator == null)
            break; /* Loop/switch isn't completed */
        jsonparser = ((JsonParser) (_deserializeUsingPropertyBased(jsonparser, deserializationcontext)));
        if (true) goto _L4; else goto _L3
_L3:
        if (_beanType.isAbstract())
            throw JsonMappingException.from(jsonparser, (new StringBuilder()).append("Can not instantiate abstract type ").append(_beanType).append(" (need to add/enable type information?)").toString());
        else
            throw JsonMappingException.from(jsonparser, (new StringBuilder()).append("No suitable constructor found for type ").append(_beanType).append(": can not instantiate from JSON object (missing default constructor or creator, or perhaps need to add/enable type information?)").toString());
    }

    public Object deserializeFromString(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (_objectIdReader == null) goto _L2; else goto _L1
_L1:
        jsonparser = ((JsonParser) (deserializeFromObjectId(jsonparser, deserializationcontext)));
_L4:
        return jsonparser;
_L2:
        if (_delegateDeserializer != null && !_valueInstantiator.canCreateFromString()) {
            Object obj = _valueInstantiator.createUsingDelegate(deserializationcontext, _delegateDeserializer.deserialize(jsonparser, deserializationcontext));
            jsonparser = ((JsonParser) (obj));
            if (_injectables != null) {
                injectValues(deserializationcontext, obj);
                jsonparser = ((JsonParser) (obj));
            }
        } else {
            jsonparser = ((JsonParser) (_valueInstantiator.createFromString(deserializationcontext, jsonparser.getText())));
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected Object deserializeWithObjectId(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        return deserializeFromObject(jsonparser, deserializationcontext);
    }

    public Object deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
        if (_objectIdReader == null) goto _L2; else goto _L1
_L1:
        if (!jsonparser.canReadObjectId()) goto _L4; else goto _L3
_L3:
        Object obj = jsonparser.getObjectId();
        if (obj == null) goto _L4; else goto _L5
_L5:
        jsonparser = ((JsonParser) (_handleTypedObjectId(jsonparser, deserializationcontext, typedeserializer.deserializeTypedFromObject(jsonparser, deserializationcontext), obj)));
_L7:
        return jsonparser;
_L4:
        JsonToken jsontoken1 = jsonparser.getCurrentToken();
        if (jsontoken1 != null) {
            if (jsontoken1.isScalarValue()) {
                jsonparser = ((JsonParser) (deserializeFromObjectId(jsonparser, deserializationcontext)));
                continue; /* Loop/switch isn't completed */
            }
            JsonToken jsontoken = jsontoken1;
            if (jsontoken1 == JsonToken.START_OBJECT)
                jsontoken = jsonparser.nextToken();
            if (jsontoken == JsonToken.FIELD_NAME && _objectIdReader.maySerializeAsObject() && _objectIdReader.isValidReferencePropertyName(jsonparser.getCurrentName(), jsonparser)) {
                jsonparser = ((JsonParser) (deserializeFromObjectId(jsonparser, deserializationcontext)));
                continue; /* Loop/switch isn't completed */
            }
        }
_L2:
        jsonparser = ((JsonParser) (typedeserializer.deserializeTypedFromObject(jsonparser, deserializationcontext)));
        if (true) goto _L7; else goto _L6
_L6:
    }

    public SettableBeanProperty findBackReference(String s) {
        if (_backRefs == null)
            s = null;
        else
            s = (SettableBeanProperty)_backRefs.get(s);
        return s;
    }

    protected JsonDeserializer findConvertingDeserializer(DeserializationContext deserializationcontext, SettableBeanProperty settablebeanproperty) {
        Object obj = deserializationcontext.getAnnotationIntrospector();
        if (obj == null) goto _L2; else goto _L1
_L1:
        obj = ((AnnotationIntrospector) (obj)).findDeserializationConverter(settablebeanproperty.getMember());
        if (obj == null) goto _L2; else goto _L3
_L3:
        Converter converter = deserializationcontext.converterInstance(settablebeanproperty.getMember(), obj);
        obj = converter.getInputType(deserializationcontext.getTypeFactory());
        deserializationcontext = new StdDelegatingDeserializer(converter, ((JavaType) (obj)), deserializationcontext.findContextualValueDeserializer(((JavaType) (obj)), settablebeanproperty));
_L5:
        return deserializationcontext;
_L2:
        deserializationcontext = null;
        if (true) goto _L5; else goto _L4
_L4:
    }

    public SettableBeanProperty findProperty(int i) {
        SettableBeanProperty settablebeanproperty;
        SettableBeanProperty settablebeanproperty1;
        if (_beanProperties == null)
            settablebeanproperty = null;
        else
            settablebeanproperty = _beanProperties.find(i);
        settablebeanproperty1 = settablebeanproperty;
        if (settablebeanproperty == null) {
            settablebeanproperty1 = settablebeanproperty;
            if (_propertyBasedCreator != null)
                settablebeanproperty1 = _propertyBasedCreator.findCreatorProperty(i);
        }
        return settablebeanproperty1;
    }

    public SettableBeanProperty findProperty(PropertyName propertyname) {
        return findProperty(propertyname.getSimpleName());
    }

    public SettableBeanProperty findProperty(String s) {
        SettableBeanProperty settablebeanproperty;
        SettableBeanProperty settablebeanproperty1;
        if (_beanProperties == null)
            settablebeanproperty = null;
        else
            settablebeanproperty = _beanProperties.find(s);
        settablebeanproperty1 = settablebeanproperty;
        if (settablebeanproperty == null) {
            settablebeanproperty1 = settablebeanproperty;
            if (_propertyBasedCreator != null)
                settablebeanproperty1 = _propertyBasedCreator.findCreatorProperty(s);
        }
        return settablebeanproperty1;
    }

    public final Class getBeanClass() {
        return _beanType.getRawClass();
    }

    public Collection getKnownPropertyNames() {
        ArrayList arraylist = new ArrayList();
        for (Iterator iterator = _beanProperties.iterator(); iterator.hasNext(); arraylist.add(((SettableBeanProperty)iterator.next()).getName()));
        return arraylist;
    }

    public ObjectIdReader getObjectIdReader() {
        return _objectIdReader;
    }

    public int getPropertyCount() {
        return _beanProperties.size();
    }

    public ValueInstantiator getValueInstantiator() {
        return _valueInstantiator;
    }

    public JavaType getValueType() {
        return _beanType;
    }

    protected void handleIgnoredProperty(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj, String s) {
        if (deserializationcontext.isEnabled(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES)) {
            throw IgnoredPropertyException.from(jsonparser, obj, s, getKnownPropertyNames());
        } else {
            jsonparser.skipChildren();
            return;
        }
    }

    protected Object handlePolymorphic(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj, TokenBuffer tokenbuffer) {
label0:
        {
            {
                JsonDeserializer jsondeserializer = _findSubclassDeserializer(deserializationcontext, obj, tokenbuffer);
                if (jsondeserializer == null)
                    break label0;
                if (tokenbuffer != null) {
                    tokenbuffer.writeEndObject();
                    tokenbuffer = tokenbuffer.asParser();
                    tokenbuffer.nextToken();
                    tokenbuffer = ((TokenBuffer) (jsondeserializer.deserialize(tokenbuffer, deserializationcontext, obj)));
                } else {
                    tokenbuffer = ((TokenBuffer) (obj));
                }
                obj = tokenbuffer;
                if (jsonparser != null)
                    obj = jsondeserializer.deserialize(jsonparser, deserializationcontext, tokenbuffer);
            }
            return obj;
        }
        if (tokenbuffer != null)
            tokenbuffer = ((TokenBuffer) (handleUnknownProperties(deserializationcontext, obj, tokenbuffer)));
        else
            tokenbuffer = ((TokenBuffer) (obj));
        obj = tokenbuffer;
        if (jsonparser != null)
            obj = deserialize(jsonparser, deserializationcontext, tokenbuffer);
        if (false)
            ;
        else
            break MISSING_BLOCK_LABEL_66;
    }

    protected Object handleUnknownProperties(DeserializationContext deserializationcontext, Object obj, TokenBuffer tokenbuffer) {
        tokenbuffer.writeEndObject();
        for (JsonParser jsonparser = tokenbuffer.asParser(); jsonparser.nextToken() != JsonToken.END_OBJECT; handleUnknownProperty(jsonparser, deserializationcontext, obj, tokenbuffer)) {
            tokenbuffer = jsonparser.getCurrentName();
            jsonparser.nextToken();
        }

        return obj;
    }

    protected void handleUnknownProperty(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj, String s) {
        if (_ignoreAllUnknown) {
            jsonparser.skipChildren();
        } else {
            if (_ignorableProps != null && _ignorableProps.contains(s))
                handleIgnoredProperty(jsonparser, deserializationcontext, obj, s);
            super.handleUnknownProperty(jsonparser, deserializationcontext, obj, s);
        }
    }

    protected void handleUnknownVanilla(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj, String s) {
        if (_ignorableProps != null && _ignorableProps.contains(s))
            handleIgnoredProperty(jsonparser, deserializationcontext, obj, s);
        else
        if (_anySetter != null)
            try {
                _anySetter.deserializeAndSet(jsonparser, deserializationcontext, obj, s);
            }
            // Misplaced declaration of an exception variable
            catch (JsonParser jsonparser) {
                wrapAndThrow(jsonparser, obj, s, deserializationcontext);
            }
        else
            handleUnknownProperty(jsonparser, deserializationcontext, obj, s);
    }

    public Class handledType() {
        return _beanType.getRawClass();
    }

    public boolean hasProperty(String s) {
        boolean flag;
        if (_beanProperties.find(s) != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean hasViews() {
        return _needViewProcesing;
    }

    protected void injectValues(DeserializationContext deserializationcontext, Object obj) {
        ValueInjector avalueinjector[] = _injectables;
        int j = avalueinjector.length;
        for (int i = 0; i < j; i++)
            avalueinjector[i].inject(deserializationcontext, obj);

    }

    public boolean isCachable() {
        return true;
    }

    public Iterator properties() {
        if (_beanProperties == null)
            throw new IllegalStateException("Can only call after BeanDeserializer has been resolved");
        else
            return _beanProperties.iterator();
    }

    public void replaceProperty(SettableBeanProperty settablebeanproperty, SettableBeanProperty settablebeanproperty1) {
        _beanProperties.replace(settablebeanproperty1);
    }

    public void resolve(DeserializationContext deserializationcontext) {
        com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler.Builder builder1;
        Object obj;
        SettableBeanProperty asettablebeanproperty[];
        Iterator iterator;
        Object obj1 = null;
        if (_valueInstantiator.canCreateFromObjectWith()) {
            SettableBeanProperty asettablebeanproperty1[] = _valueInstantiator.getFromObjectArguments(deserializationcontext.getConfig());
            int k = asettablebeanproperty1.length;
            int i = 0;
            com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler.Builder builder = null;
            do {
                obj = builder;
                asettablebeanproperty = asettablebeanproperty1;
                if (i >= k)
                    break;
                SettableBeanProperty settablebeanproperty = asettablebeanproperty1[i];
                obj = builder;
                if (settablebeanproperty.hasValueTypeDeserializer()) {
                    asettablebeanproperty = settablebeanproperty.getValueTypeDeserializer();
                    obj = builder;
                    if (asettablebeanproperty.getTypeInclusion() == com.fasterxml.jackson.annotation.JsonTypeInfo.As.EXTERNAL_PROPERTY) {
                        obj = builder;
                        if (builder == null)
                            obj = new com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler.Builder();
                        ((com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler.Builder) (obj)).addExternal(settablebeanproperty, asettablebeanproperty);
                    }
                }
                i++;
                builder = ((com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler.Builder) (obj));
            } while (true);
        } else {
            asettablebeanproperty = null;
            obj = null;
        }
        iterator = _beanProperties.iterator();
        builder1 = ((com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler.Builder) (obj));
        obj = obj1;
_L11:
        if (!iterator.hasNext()) goto _L2; else goto _L1
_L1:
        Object obj3 = (SettableBeanProperty)iterator.next();
        Object obj2;
        SettableBeanProperty settablebeanproperty1;
        if (!((SettableBeanProperty) (obj3)).hasValueDeserializer()) {
            JsonDeserializer jsondeserializer = findConvertingDeserializer(deserializationcontext, ((SettableBeanProperty) (obj3)));
            obj2 = jsondeserializer;
            if (jsondeserializer == null)
                obj2 = findDeserializer(deserializationcontext, ((SettableBeanProperty) (obj3)).getType(), ((BeanProperty) (obj3)));
            obj2 = ((SettableBeanProperty) (obj3)).withValueDeserializer(((JsonDeserializer) (obj2)));
        } else {
            JsonDeserializer jsondeserializer1 = ((SettableBeanProperty) (obj3)).getValueDeserializer();
            obj2 = deserializationcontext.handlePrimaryContextualization(jsondeserializer1, ((BeanProperty) (obj3)), ((SettableBeanProperty) (obj3)).getType());
            int j;
            int l;
            boolean flag;
            if (obj2 != jsondeserializer1)
                obj2 = ((SettableBeanProperty) (obj3)).withValueDeserializer(((JsonDeserializer) (obj2)));
            else
                obj2 = obj3;
        }
        settablebeanproperty1 = _resolveManagedReferenceProperty(deserializationcontext, ((SettableBeanProperty) (obj2)));
        obj2 = settablebeanproperty1;
        if (!(settablebeanproperty1 instanceof ManagedReferenceProperty))
            obj2 = _resolvedObjectIdProperty(deserializationcontext, settablebeanproperty1);
        settablebeanproperty1 = _resolveUnwrappedProperty(deserializationcontext, ((SettableBeanProperty) (obj2)));
        if (settablebeanproperty1 != null) {
            if (obj == null)
                obj = new UnwrappedPropertyHandler();
            ((UnwrappedPropertyHandler) (obj)).addProperty(settablebeanproperty1);
            _beanProperties.remove(settablebeanproperty1);
            continue; /* Loop/switch isn't completed */
        }
        obj2 = _resolveInnerClassValuedProperty(deserializationcontext, ((SettableBeanProperty) (obj2)));
        if (obj2 == obj3) goto _L4; else goto _L3
_L3:
        _beanProperties.replace(((SettableBeanProperty) (obj2)));
        if (asettablebeanproperty == null) goto _L4; else goto _L5
_L5:
        l = asettablebeanproperty.length;
        j = 0;
_L9:
        if (j >= l) goto _L4; else goto _L6
_L6:
        if (asettablebeanproperty[j] != obj3) goto _L8; else goto _L7
_L7:
        asettablebeanproperty[j] = obj2;
_L4:
        if (((SettableBeanProperty) (obj2)).hasValueTypeDeserializer()) {
            obj3 = ((SettableBeanProperty) (obj2)).getValueTypeDeserializer();
            if (((TypeDeserializer) (obj3)).getTypeInclusion() == com.fasterxml.jackson.annotation.JsonTypeInfo.As.EXTERNAL_PROPERTY) {
                if (builder1 == null)
                    builder1 = new com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler.Builder();
                builder1.addExternal(((SettableBeanProperty) (obj2)), ((TypeDeserializer) (obj3)));
                _beanProperties.remove(((SettableBeanProperty) (obj2)));
            }
        }
        continue; /* Loop/switch isn't completed */
_L8:
        j++;
        if (true) goto _L9; else goto _L2
_L2:
        if (_anySetter != null && !_anySetter.hasValueDeserializer())
            _anySetter = _anySetter.withValueDeserializer(findDeserializer(deserializationcontext, _anySetter.getType(), _anySetter.getProperty()));
        if (_valueInstantiator.canCreateUsingDelegate()) {
            obj2 = _valueInstantiator.getDelegateType(deserializationcontext.getConfig());
            if (obj2 == null)
                throw new IllegalArgumentException((new StringBuilder()).append("Invalid delegate-creator definition for ").append(_beanType).append(": value instantiator (").append(_valueInstantiator.getClass().getName()).append(") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'").toString());
            _delegateDeserializer = _findDelegateDeserializer(deserializationcontext, ((JavaType) (obj2)), _valueInstantiator.getDelegateCreator());
        }
        if (_valueInstantiator.canCreateUsingArrayDelegate()) {
            obj2 = _valueInstantiator.getArrayDelegateType(deserializationcontext.getConfig());
            if (obj2 == null)
                throw new IllegalArgumentException((new StringBuilder()).append("Invalid array-delegate-creator definition for ").append(_beanType).append(": value instantiator (").append(_valueInstantiator.getClass().getName()).append(") returned true for 'canCreateUsingArrayDelegate()', but null for 'getArrayDelegateType()'").toString());
            _arrayDelegateDeserializer = _findDelegateDeserializer(deserializationcontext, ((JavaType) (obj2)), _valueInstantiator.getArrayDelegateCreator());
        }
        if (asettablebeanproperty != null)
            _propertyBasedCreator = PropertyBasedCreator.construct(deserializationcontext, _valueInstantiator, asettablebeanproperty);
        if (builder1 != null) {
            _externalTypeIdHandler = builder1.build();
            _nonStandardCreation = true;
        }
        _unwrappedPropertyHandler = ((UnwrappedPropertyHandler) (obj));
        if (obj != null)
            _nonStandardCreation = true;
        if (_vanillaProcessing && !_nonStandardCreation)
            flag = true;
        else
            flag = false;
        _vanillaProcessing = flag;
        return;
        if (true) goto _L11; else goto _L10
_L10:
    }

    public abstract JsonDeserializer unwrappingDeserializer(NameTransformer nametransformer);

    public abstract BeanDeserializerBase withIgnorableProperties(HashSet hashset);

    public abstract BeanDeserializerBase withObjectIdReader(ObjectIdReader objectidreader);

    public void wrapAndThrow(Throwable throwable, Object obj, int i, DeserializationContext deserializationcontext) {
        throw JsonMappingException.wrapWithPath(throwOrReturnThrowable(throwable, deserializationcontext), obj, i);
    }

    public void wrapAndThrow(Throwable throwable, Object obj, String s, DeserializationContext deserializationcontext) {
        throw JsonMappingException.wrapWithPath(throwOrReturnThrowable(throwable, deserializationcontext), obj, s);
    }

    protected void wrapInstantiationProblem(Throwable throwable, DeserializationContext deserializationcontext) {
        for (; (throwable instanceof InvocationTargetException) && throwable.getCause() != null; throwable = throwable.getCause());
        if (throwable instanceof Error)
            throw (Error)throwable;
        boolean flag;
        if (deserializationcontext == null || deserializationcontext.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS))
            flag = true;
        else
            flag = false;
        if (throwable instanceof IOException)
            throw (IOException)throwable;
        if (!flag && (throwable instanceof RuntimeException))
            throw (RuntimeException)throwable;
        else
            throw deserializationcontext.instantiationException(_beanType.getRawClass(), throwable);
    }

}
