// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.ContextualDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.util.ArrayBuilders;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            StdDeserializer

public abstract class PrimitiveArrayDeserializers extends StdDeserializer
    implements ContextualDeserializer {
    static final class BooleanDeser extends PrimitiveArrayDeserializers {

        private static final long serialVersionUID = 1L;

        public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return deserialize(jsonparser, deserializationcontext);
        }

        public boolean[] deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            if (jsonparser.isExpectedStartArrayToken()) goto _L2; else goto _L1
_L1:
            jsonparser = (boolean[])handleNonArray(jsonparser, deserializationcontext);
_L6:
            return jsonparser;
_L2:
            int i;
            boolean aflag[];
            com.fasterxml.jackson.databind.util.ArrayBuilders.BooleanBuilder booleanbuilder;
            booleanbuilder = deserializationcontext.getArrayBuilders().getBooleanBuilder();
            aflag = (boolean[])booleanbuilder.resetAndStart();
            i = 0;
_L4:
            int j;
            boolean aflag1[];
            j = i;
            aflag1 = aflag;
            if (jsonparser.nextToken() == JsonToken.END_ARRAY)
                break; /* Loop/switch isn't completed */
            j = i;
            aflag1 = aflag;
            boolean flag;
            try {
                flag = _parseBooleanPrimitive(jsonparser, deserializationcontext);
            }
            // Misplaced declaration of an exception variable
            catch (JsonParser jsonparser) {
                throw JsonMappingException.wrapWithPath(jsonparser, aflag1, j + booleanbuilder.bufferedSize());
            }
            j = i;
            aflag1 = aflag;
            if (i < aflag.length)
                break MISSING_BLOCK_LABEL_108;
            j = i;
            aflag1 = aflag;
            aflag = (boolean[])booleanbuilder.appendCompletedChunk(aflag, i);
            i = 0;
            j = i + 1;
            aflag[i] = flag;
            i = j;
            if (true) goto _L4; else goto _L3
_L3:
            jsonparser = (boolean[])booleanbuilder.completeAndClearBuffer(aflag, i);
            if (true) goto _L6; else goto _L5
_L5:
        }

        protected volatile Object handleSingleElementUnwrapped(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return handleSingleElementUnwrapped(jsonparser, deserializationcontext);
        }

        protected boolean[] handleSingleElementUnwrapped(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return (new boolean[] {
                _parseBooleanPrimitive(jsonparser, deserializationcontext)
            });
        }

        protected PrimitiveArrayDeserializers withResolved(Boolean boolean1) {
            return new BooleanDeser(this, boolean1);
        }

        public BooleanDeser() {
            super([Z);
        }

        protected BooleanDeser(BooleanDeser booleandeser, Boolean boolean1) {
            super(booleandeser, boolean1);
        }
    }

    static final class ByteDeser extends PrimitiveArrayDeserializers {

        private static final long serialVersionUID = 1L;

        public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return deserialize(jsonparser, deserializationcontext);
        }

        public byte[] deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            JsonToken jsontoken = jsonparser.getCurrentToken();
            if (jsontoken != JsonToken.VALUE_STRING) goto _L2; else goto _L1
_L1:
            jsonparser = jsonparser.getBinaryValue(deserializationcontext.getBase64Variant());
_L9:
            return jsonparser;
_L2:
            int i;
            byte abyte0[];
            com.fasterxml.jackson.databind.util.ArrayBuilders.ByteBuilder bytebuilder;
            if (jsontoken == JsonToken.VALUE_EMBEDDED_OBJECT) {
                Object obj = jsonparser.getEmbeddedObject();
                if (obj == null) {
                    jsonparser = null;
                    continue; /* Loop/switch isn't completed */
                }
                if (obj instanceof byte[]) {
                    jsonparser = (byte[])(byte[])obj;
                    continue; /* Loop/switch isn't completed */
                }
            }
            if (!jsonparser.isExpectedStartArrayToken()) {
                jsonparser = (byte[])handleNonArray(jsonparser, deserializationcontext);
                continue; /* Loop/switch isn't completed */
            }
            bytebuilder = deserializationcontext.getArrayBuilders().getByteBuilder();
            abyte0 = (byte[])bytebuilder.resetAndStart();
            i = 0;
_L6:
            byte byte0;
            int j;
            byte abyte1[];
            JsonToken jsontoken1;
            j = i;
            abyte1 = abyte0;
            try {
                jsontoken1 = jsonparser.nextToken();
            }
            // Misplaced declaration of an exception variable
            catch (JsonParser jsonparser) {
                throw JsonMappingException.wrapWithPath(jsonparser, abyte1, j + bytebuilder.bufferedSize());
            }
            j = i;
            abyte1 = abyte0;
            if (jsontoken1 == JsonToken.END_ARRAY)
                break MISSING_BLOCK_LABEL_303;
            j = i;
            abyte1 = abyte0;
            if (jsontoken1 == JsonToken.VALUE_NUMBER_INT) goto _L4; else goto _L3
_L3:
            j = i;
            abyte1 = abyte0;
            if (jsontoken1 != JsonToken.VALUE_NUMBER_FLOAT) goto _L5; else goto _L4
_L4:
            j = i;
            abyte1 = abyte0;
            byte0 = jsonparser.getByteValue();
_L7:
            j = i;
            abyte1 = abyte0;
            if (i < abyte0.length)
                break MISSING_BLOCK_LABEL_227;
            j = i;
            abyte1 = abyte0;
            abyte0 = (byte[])bytebuilder.appendCompletedChunk(abyte0, i);
            i = 0;
            j = i + 1;
            abyte0[i] = byte0;
            i = j;
              goto _L6
_L5:
            j = i;
            abyte1 = abyte0;
            if (jsontoken1 == JsonToken.VALUE_NULL)
                break MISSING_BLOCK_LABEL_298;
            j = i;
            abyte1 = abyte0;
            throw deserializationcontext.mappingException(_valueClass.getComponentType());
            byte0 = 0;
              goto _L7
            jsonparser = (byte[])bytebuilder.completeAndClearBuffer(abyte0, i);
            if (true) goto _L9; else goto _L8
_L8:
        }

        protected volatile Object handleSingleElementUnwrapped(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return handleSingleElementUnwrapped(jsonparser, deserializationcontext);
        }

        protected byte[] handleSingleElementUnwrapped(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            JsonToken jsontoken = jsonparser.getCurrentToken();
            byte byte0;
            if (jsontoken == JsonToken.VALUE_NUMBER_INT || jsontoken == JsonToken.VALUE_NUMBER_FLOAT) {
                byte0 = jsonparser.getByteValue();
            } else {
                if (jsontoken != JsonToken.VALUE_NULL)
                    throw deserializationcontext.mappingException(_valueClass.getComponentType());
                byte0 = 0;
            }
            return (new byte[] {
                byte0
            });
        }

        protected PrimitiveArrayDeserializers withResolved(Boolean boolean1) {
            return new ByteDeser(this, boolean1);
        }

        public ByteDeser() {
            super([B);
        }

        protected ByteDeser(ByteDeser bytedeser, Boolean boolean1) {
            super(bytedeser, boolean1);
        }
    }

    static final class CharDeser extends PrimitiveArrayDeserializers {

        private static final long serialVersionUID = 1L;

        public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return deserialize(jsonparser, deserializationcontext);
        }

        public char[] deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            Object obj = jsonparser.getCurrentToken();
            if (obj != JsonToken.VALUE_STRING) goto _L2; else goto _L1
_L1:
            deserializationcontext = jsonparser.getTextCharacters();
            int j = jsonparser.getTextOffset();
            int i = jsonparser.getTextLength();
            jsonparser = new char[i];
            System.arraycopy(deserializationcontext, j, jsonparser, 0, i);
_L4:
            return jsonparser;
_L2:
            if (jsonparser.isExpectedStartArrayToken()) {
                obj = new StringBuilder(64);
                do {
                    Object obj1 = jsonparser.nextToken();
                    if (obj1 == JsonToken.END_ARRAY)
                        break;
                    if (obj1 != JsonToken.VALUE_STRING)
                        throw deserializationcontext.mappingException(Character.TYPE);
                    obj1 = jsonparser.getText();
                    if (((String) (obj1)).length() != 1)
                        throw JsonMappingException.from(jsonparser, (new StringBuilder()).append("Can not convert a JSON String of length ").append(((String) (obj1)).length()).append(" into a char element of char array").toString());
                    ((StringBuilder) (obj)).append(((String) (obj1)).charAt(0));
                } while (true);
                jsonparser = ((StringBuilder) (obj)).toString().toCharArray();
                continue; /* Loop/switch isn't completed */
            }
            if (obj != JsonToken.VALUE_EMBEDDED_OBJECT)
                break; /* Loop/switch isn't completed */
            jsonparser = ((JsonParser) (jsonparser.getEmbeddedObject()));
            if (jsonparser == null) {
                jsonparser = null;
                continue; /* Loop/switch isn't completed */
            }
            if (jsonparser instanceof char[]) {
                jsonparser = (char[])(char[])jsonparser;
                continue; /* Loop/switch isn't completed */
            }
            if (jsonparser instanceof String) {
                jsonparser = ((String)jsonparser).toCharArray();
                continue; /* Loop/switch isn't completed */
            }
            if (!(jsonparser instanceof byte[]))
                break; /* Loop/switch isn't completed */
            jsonparser = Base64Variants.getDefaultVariant().encode((byte[])(byte[])jsonparser, false).toCharArray();
            if (true) goto _L4; else goto _L3
_L3:
            throw deserializationcontext.mappingException(_valueClass);
        }

        protected volatile Object handleSingleElementUnwrapped(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return handleSingleElementUnwrapped(jsonparser, deserializationcontext);
        }

        protected char[] handleSingleElementUnwrapped(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            throw deserializationcontext.mappingException(_valueClass);
        }

        protected PrimitiveArrayDeserializers withResolved(Boolean boolean1) {
            return this;
        }

        public CharDeser() {
            super([C);
        }

        protected CharDeser(CharDeser chardeser, Boolean boolean1) {
            super(chardeser, boolean1);
        }
    }

    static final class DoubleDeser extends PrimitiveArrayDeserializers {

        private static final long serialVersionUID = 1L;

        public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return deserialize(jsonparser, deserializationcontext);
        }

        public double[] deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            if (jsonparser.isExpectedStartArrayToken()) goto _L2; else goto _L1
_L1:
            jsonparser = (double[])handleNonArray(jsonparser, deserializationcontext);
_L6:
            return jsonparser;
_L2:
            int i;
            double ad[];
            com.fasterxml.jackson.databind.util.ArrayBuilders.DoubleBuilder doublebuilder;
            doublebuilder = deserializationcontext.getArrayBuilders().getDoubleBuilder();
            ad = (double[])doublebuilder.resetAndStart();
            i = 0;
_L4:
            int j;
            double ad1[];
            j = i;
            ad1 = ad;
            if (jsonparser.nextToken() == JsonToken.END_ARRAY)
                break; /* Loop/switch isn't completed */
            j = i;
            ad1 = ad;
            double d;
            try {
                d = _parseDoublePrimitive(jsonparser, deserializationcontext);
            }
            // Misplaced declaration of an exception variable
            catch (JsonParser jsonparser) {
                throw JsonMappingException.wrapWithPath(jsonparser, ad1, j + doublebuilder.bufferedSize());
            }
            j = i;
            ad1 = ad;
            if (i < ad.length)
                break MISSING_BLOCK_LABEL_115;
            j = i;
            ad1 = ad;
            ad = (double[])doublebuilder.appendCompletedChunk(ad, i);
            i = 0;
            j = i + 1;
            ad[i] = d;
            i = j;
            if (true) goto _L4; else goto _L3
_L3:
            jsonparser = (double[])doublebuilder.completeAndClearBuffer(ad, i);
            if (true) goto _L6; else goto _L5
_L5:
        }

        protected volatile Object handleSingleElementUnwrapped(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return handleSingleElementUnwrapped(jsonparser, deserializationcontext);
        }

        protected double[] handleSingleElementUnwrapped(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return (new double[] {
                _parseDoublePrimitive(jsonparser, deserializationcontext)
            });
        }

        protected PrimitiveArrayDeserializers withResolved(Boolean boolean1) {
            return new DoubleDeser(this, boolean1);
        }

        public DoubleDeser() {
            super([D);
        }

        protected DoubleDeser(DoubleDeser doubledeser, Boolean boolean1) {
            super(doubledeser, boolean1);
        }
    }

    static final class FloatDeser extends PrimitiveArrayDeserializers {

        private static final long serialVersionUID = 1L;

        public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return deserialize(jsonparser, deserializationcontext);
        }

        public float[] deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            if (jsonparser.isExpectedStartArrayToken()) goto _L2; else goto _L1
_L1:
            jsonparser = (float[])handleNonArray(jsonparser, deserializationcontext);
_L6:
            return jsonparser;
_L2:
            int i;
            float af[];
            com.fasterxml.jackson.databind.util.ArrayBuilders.FloatBuilder floatbuilder;
            floatbuilder = deserializationcontext.getArrayBuilders().getFloatBuilder();
            af = (float[])floatbuilder.resetAndStart();
            i = 0;
_L4:
            int j;
            float af1[];
            j = i;
            af1 = af;
            if (jsonparser.nextToken() == JsonToken.END_ARRAY)
                break; /* Loop/switch isn't completed */
            j = i;
            af1 = af;
            float f;
            try {
                f = _parseFloatPrimitive(jsonparser, deserializationcontext);
            }
            // Misplaced declaration of an exception variable
            catch (JsonParser jsonparser) {
                throw JsonMappingException.wrapWithPath(jsonparser, af1, j + floatbuilder.bufferedSize());
            }
            j = i;
            af1 = af;
            if (i < af.length)
                break MISSING_BLOCK_LABEL_115;
            j = i;
            af1 = af;
            af = (float[])floatbuilder.appendCompletedChunk(af, i);
            i = 0;
            j = i + 1;
            af[i] = f;
            i = j;
            if (true) goto _L4; else goto _L3
_L3:
            jsonparser = (float[])floatbuilder.completeAndClearBuffer(af, i);
            if (true) goto _L6; else goto _L5
_L5:
        }

        protected volatile Object handleSingleElementUnwrapped(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return handleSingleElementUnwrapped(jsonparser, deserializationcontext);
        }

        protected float[] handleSingleElementUnwrapped(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return (new float[] {
                _parseFloatPrimitive(jsonparser, deserializationcontext)
            });
        }

        protected PrimitiveArrayDeserializers withResolved(Boolean boolean1) {
            return new FloatDeser(this, boolean1);
        }

        public FloatDeser() {
            super([F);
        }

        protected FloatDeser(FloatDeser floatdeser, Boolean boolean1) {
            super(floatdeser, boolean1);
        }
    }

    static final class IntDeser extends PrimitiveArrayDeserializers {

        public static final IntDeser instance = new IntDeser();
        private static final long serialVersionUID = 1L;

        public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return deserialize(jsonparser, deserializationcontext);
        }

        public int[] deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            if (jsonparser.isExpectedStartArrayToken()) goto _L2; else goto _L1
_L1:
            jsonparser = (int[])handleNonArray(jsonparser, deserializationcontext);
_L6:
            return jsonparser;
_L2:
            int i;
            int ai[];
            com.fasterxml.jackson.databind.util.ArrayBuilders.IntBuilder intbuilder;
            intbuilder = deserializationcontext.getArrayBuilders().getIntBuilder();
            ai = (int[])intbuilder.resetAndStart();
            i = 0;
_L4:
            int j;
            int ai1[];
            j = i;
            ai1 = ai;
            if (jsonparser.nextToken() == JsonToken.END_ARRAY)
                break; /* Loop/switch isn't completed */
            j = i;
            ai1 = ai;
            int k;
            try {
                k = _parseIntPrimitive(jsonparser, deserializationcontext);
            }
            // Misplaced declaration of an exception variable
            catch (JsonParser jsonparser) {
                throw JsonMappingException.wrapWithPath(jsonparser, ai1, j + intbuilder.bufferedSize());
            }
            j = i;
            ai1 = ai;
            if (i < ai.length)
                break MISSING_BLOCK_LABEL_108;
            j = i;
            ai1 = ai;
            ai = (int[])intbuilder.appendCompletedChunk(ai, i);
            i = 0;
            j = i + 1;
            ai[i] = k;
            i = j;
            if (true) goto _L4; else goto _L3
_L3:
            jsonparser = (int[])intbuilder.completeAndClearBuffer(ai, i);
            if (true) goto _L6; else goto _L5
_L5:
        }

        protected volatile Object handleSingleElementUnwrapped(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return handleSingleElementUnwrapped(jsonparser, deserializationcontext);
        }

        protected int[] handleSingleElementUnwrapped(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return (new int[] {
                _parseIntPrimitive(jsonparser, deserializationcontext)
            });
        }

        protected PrimitiveArrayDeserializers withResolved(Boolean boolean1) {
            return new IntDeser(this, boolean1);
        }


        public IntDeser() {
            super([I);
        }

        protected IntDeser(IntDeser intdeser, Boolean boolean1) {
            super(intdeser, boolean1);
        }
    }

    static final class LongDeser extends PrimitiveArrayDeserializers {

        public static final LongDeser instance = new LongDeser();
        private static final long serialVersionUID = 1L;

        public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return deserialize(jsonparser, deserializationcontext);
        }

        public long[] deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            if (jsonparser.isExpectedStartArrayToken()) goto _L2; else goto _L1
_L1:
            jsonparser = (long[])handleNonArray(jsonparser, deserializationcontext);
_L6:
            return jsonparser;
_L2:
            int i;
            long al[];
            com.fasterxml.jackson.databind.util.ArrayBuilders.LongBuilder longbuilder;
            longbuilder = deserializationcontext.getArrayBuilders().getLongBuilder();
            al = (long[])longbuilder.resetAndStart();
            i = 0;
_L4:
            int j;
            long al1[];
            j = i;
            al1 = al;
            if (jsonparser.nextToken() == JsonToken.END_ARRAY)
                break; /* Loop/switch isn't completed */
            j = i;
            al1 = al;
            long l;
            try {
                l = _parseLongPrimitive(jsonparser, deserializationcontext);
            }
            // Misplaced declaration of an exception variable
            catch (JsonParser jsonparser) {
                throw JsonMappingException.wrapWithPath(jsonparser, al1, j + longbuilder.bufferedSize());
            }
            j = i;
            al1 = al;
            if (i < al.length)
                break MISSING_BLOCK_LABEL_108;
            j = i;
            al1 = al;
            al = (long[])longbuilder.appendCompletedChunk(al, i);
            i = 0;
            j = i + 1;
            al[i] = l;
            i = j;
            if (true) goto _L4; else goto _L3
_L3:
            jsonparser = (long[])longbuilder.completeAndClearBuffer(al, i);
            if (true) goto _L6; else goto _L5
_L5:
        }

        protected volatile Object handleSingleElementUnwrapped(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return handleSingleElementUnwrapped(jsonparser, deserializationcontext);
        }

        protected long[] handleSingleElementUnwrapped(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return (new long[] {
                _parseLongPrimitive(jsonparser, deserializationcontext)
            });
        }

        protected PrimitiveArrayDeserializers withResolved(Boolean boolean1) {
            return new LongDeser(this, boolean1);
        }


        public LongDeser() {
            super([J);
        }

        protected LongDeser(LongDeser longdeser, Boolean boolean1) {
            super(longdeser, boolean1);
        }
    }

    static final class ShortDeser extends PrimitiveArrayDeserializers {

        private static final long serialVersionUID = 1L;

        public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return deserialize(jsonparser, deserializationcontext);
        }

        public short[] deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            if (jsonparser.isExpectedStartArrayToken()) goto _L2; else goto _L1
_L1:
            jsonparser = (short[])handleNonArray(jsonparser, deserializationcontext);
_L6:
            return jsonparser;
_L2:
            int i;
            short aword0[];
            com.fasterxml.jackson.databind.util.ArrayBuilders.ShortBuilder shortbuilder;
            shortbuilder = deserializationcontext.getArrayBuilders().getShortBuilder();
            aword0 = (short[])shortbuilder.resetAndStart();
            i = 0;
_L4:
            int j;
            short aword1[];
            j = i;
            aword1 = aword0;
            if (jsonparser.nextToken() == JsonToken.END_ARRAY)
                break; /* Loop/switch isn't completed */
            j = i;
            aword1 = aword0;
            short word0;
            try {
                word0 = _parseShortPrimitive(jsonparser, deserializationcontext);
            }
            // Misplaced declaration of an exception variable
            catch (JsonParser jsonparser) {
                throw JsonMappingException.wrapWithPath(jsonparser, aword1, j + shortbuilder.bufferedSize());
            }
            j = i;
            aword1 = aword0;
            if (i < aword0.length)
                break MISSING_BLOCK_LABEL_115;
            j = i;
            aword1 = aword0;
            aword0 = (short[])shortbuilder.appendCompletedChunk(aword0, i);
            i = 0;
            j = i + 1;
            aword0[i] = word0;
            i = j;
            if (true) goto _L4; else goto _L3
_L3:
            jsonparser = (short[])shortbuilder.completeAndClearBuffer(aword0, i);
            if (true) goto _L6; else goto _L5
_L5:
        }

        protected volatile Object handleSingleElementUnwrapped(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return handleSingleElementUnwrapped(jsonparser, deserializationcontext);
        }

        protected short[] handleSingleElementUnwrapped(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            return (new short[] {
                _parseShortPrimitive(jsonparser, deserializationcontext)
            });
        }

        protected PrimitiveArrayDeserializers withResolved(Boolean boolean1) {
            return new ShortDeser(this, boolean1);
        }

        public ShortDeser() {
            super([S);
        }

        protected ShortDeser(ShortDeser shortdeser, Boolean boolean1) {
            super(shortdeser, boolean1);
        }
    }


    protected final Boolean _unwrapSingle;

    protected PrimitiveArrayDeserializers(PrimitiveArrayDeserializers primitivearraydeserializers, Boolean boolean1) {
        super(primitivearraydeserializers._valueClass);
        _unwrapSingle = boolean1;
    }

    protected PrimitiveArrayDeserializers(Class class1) {
        super(class1);
        _unwrapSingle = null;
    }

    public static JsonDeserializer forType(Class class1) {
        if (class1 == Integer.TYPE)
            class1 = IntDeser.instance;
        else
        if (class1 == Long.TYPE)
            class1 = LongDeser.instance;
        else
        if (class1 == Byte.TYPE)
            class1 = new ByteDeser();
        else
        if (class1 == Short.TYPE)
            class1 = new ShortDeser();
        else
        if (class1 == Float.TYPE)
            class1 = new FloatDeser();
        else
        if (class1 == Double.TYPE)
            class1 = new DoubleDeser();
        else
        if (class1 == Boolean.TYPE)
            class1 = new BooleanDeser();
        else
        if (class1 == Character.TYPE)
            class1 = new CharDeser();
        else
            throw new IllegalStateException();
        return class1;
    }

    public JsonDeserializer createContextual(DeserializationContext deserializationcontext, BeanProperty beanproperty) {
        deserializationcontext = findFormatFeature(deserializationcontext, beanproperty, _valueClass, com.fasterxml.jackson.annotation.JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
        if (deserializationcontext == _unwrapSingle)
            deserializationcontext = this;
        else
            deserializationcontext = withResolved(deserializationcontext);
        return deserializationcontext;
    }

    public Object deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
        return typedeserializer.deserializeTypedFromArray(jsonparser, deserializationcontext);
    }

    protected Object handleNonArray(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (jsonparser.hasToken(JsonToken.VALUE_STRING) && deserializationcontext.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT) && jsonparser.getText().length() == 0) {
            jsonparser = null;
        } else {
            boolean flag;
            if (_unwrapSingle == Boolean.TRUE || _unwrapSingle == null && deserializationcontext.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY))
                flag = true;
            else
                flag = false;
            if (flag)
                jsonparser = ((JsonParser) (handleSingleElementUnwrapped(jsonparser, deserializationcontext)));
            else
                throw deserializationcontext.mappingException(_valueClass);
        }
        return jsonparser;
    }

    protected abstract Object handleSingleElementUnwrapped(JsonParser jsonparser, DeserializationContext deserializationcontext);

    protected abstract PrimitiveArrayDeserializers withResolved(Boolean boolean1);
}
