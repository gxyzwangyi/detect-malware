// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import java.io.Serializable;
import java.util.Map;

// Referenced classes of package com.fasterxml.jackson.databind.deser:
//            BeanDeserializerBuilder, UnresolvedForwardReference, SettableBeanProperty

public class AbstractDeserializer extends JsonDeserializer
    implements Serializable {

    private static final long serialVersionUID = 1L;
    protected final boolean _acceptBoolean;
    protected final boolean _acceptDouble;
    protected final boolean _acceptInt;
    protected final boolean _acceptString;
    protected final Map _backRefProperties;
    protected final JavaType _baseType;
    protected final ObjectIdReader _objectIdReader;

    protected AbstractDeserializer(BeanDescription beandescription) {
label0:
        {
            boolean flag1 = false;
            super();
            _baseType = beandescription.getType();
            _objectIdReader = null;
            _backRefProperties = null;
            beandescription = _baseType.getRawClass();
            _acceptString = beandescription.isAssignableFrom(java/lang/String);
            boolean flag;
            if (beandescription == Boolean.TYPE || beandescription.isAssignableFrom(java/lang/Boolean))
                flag = true;
            else
                flag = false;
            _acceptBoolean = flag;
            if (beandescription == Integer.TYPE || beandescription.isAssignableFrom(java/lang/Integer))
                flag = true;
            else
                flag = false;
            _acceptInt = flag;
            if (beandescription != Double.TYPE) {
                flag = flag1;
                if (!beandescription.isAssignableFrom(java/lang/Double))
                    break label0;
            }
            flag = true;
        }
        _acceptDouble = flag;
    }

    public AbstractDeserializer(BeanDeserializerBuilder beandeserializerbuilder, BeanDescription beandescription, Map map) {
label0:
        {
            boolean flag1 = false;
            super();
            _baseType = beandescription.getType();
            _objectIdReader = beandeserializerbuilder.getObjectIdReader();
            _backRefProperties = map;
            beandeserializerbuilder = _baseType.getRawClass();
            _acceptString = beandeserializerbuilder.isAssignableFrom(java/lang/String);
            boolean flag;
            if (beandeserializerbuilder == Boolean.TYPE || beandeserializerbuilder.isAssignableFrom(java/lang/Boolean))
                flag = true;
            else
                flag = false;
            _acceptBoolean = flag;
            if (beandeserializerbuilder == Integer.TYPE || beandeserializerbuilder.isAssignableFrom(java/lang/Integer))
                flag = true;
            else
                flag = false;
            _acceptInt = flag;
            if (beandeserializerbuilder != Double.TYPE) {
                flag = flag1;
                if (!beandeserializerbuilder.isAssignableFrom(java/lang/Double))
                    break label0;
            }
            flag = true;
        }
        _acceptDouble = flag;
    }

    public static AbstractDeserializer constructForNonPOJO(BeanDescription beandescription) {
        return new AbstractDeserializer(beandescription);
    }

    protected Object _deserializeFromObjectId(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        Object obj = _objectIdReader.readObjectReference(jsonparser, deserializationcontext);
        deserializationcontext = deserializationcontext.findObjectId(obj, _objectIdReader.generator, _objectIdReader.resolver);
        Object obj1 = deserializationcontext.resolve();
        if (obj1 == null)
            throw new UnresolvedForwardReference(jsonparser, (new StringBuilder()).append("Could not resolve Object Id [").append(obj).append("] -- unresolved forward-reference?").toString(), jsonparser.getCurrentLocation(), deserializationcontext);
        else
            return obj1;
    }

    protected Object _deserializeIfNatural(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        jsonparser.getCurrentTokenId();
        JVM INSTR tableswitch 6 10: default 40
    //                   6 44
    //                   7 59
    //                   8 77
    //                   9 95
    //                   10 109;
           goto _L1 _L2 _L3 _L4 _L5 _L6
_L1:
        jsonparser = null;
_L8:
        return jsonparser;
_L2:
        if (!_acceptString) goto _L1; else goto _L7
_L7:
        jsonparser = jsonparser.getText();
          goto _L8
_L3:
        if (!_acceptInt) goto _L1; else goto _L9
_L9:
        jsonparser = Integer.valueOf(jsonparser.getIntValue());
          goto _L8
_L4:
        if (!_acceptDouble) goto _L1; else goto _L10
_L10:
        jsonparser = Double.valueOf(jsonparser.getDoubleValue());
          goto _L8
_L5:
        if (!_acceptBoolean) goto _L1; else goto _L11
_L11:
        jsonparser = Boolean.TRUE;
          goto _L8
_L6:
        if (!_acceptBoolean) goto _L1; else goto _L12
_L12:
        jsonparser = Boolean.FALSE;
          goto _L8
    }

    public Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        throw deserializationcontext.instantiationException(_baseType.getRawClass(), "abstract types either need to be mapped to concrete types, have custom deserializer, or be instantiated with additional type information");
    }

    public Object deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
        if (_objectIdReader == null) goto _L2; else goto _L1
_L1:
        JsonToken jsontoken = jsonparser.getCurrentToken();
        if (jsontoken == null) goto _L2; else goto _L3
_L3:
        if (!jsontoken.isScalarValue()) goto _L5; else goto _L4
_L4:
        Object obj = _deserializeFromObjectId(jsonparser, deserializationcontext);
_L7:
        return obj;
_L5:
        obj = jsontoken;
        if (jsontoken == JsonToken.START_OBJECT)
            obj = jsonparser.nextToken();
        if (obj == JsonToken.FIELD_NAME && _objectIdReader.maySerializeAsObject() && _objectIdReader.isValidReferencePropertyName(jsonparser.getCurrentName(), jsonparser)) {
            obj = _deserializeFromObjectId(jsonparser, deserializationcontext);
            continue; /* Loop/switch isn't completed */
        }
_L2:
        Object obj1 = _deserializeIfNatural(jsonparser, deserializationcontext);
        obj = obj1;
        if (obj1 == null)
            obj = typedeserializer.deserializeTypedFromObject(jsonparser, deserializationcontext);
        if (true) goto _L7; else goto _L6
_L6:
    }

    public SettableBeanProperty findBackReference(String s) {
        if (_backRefProperties == null)
            s = null;
        else
            s = (SettableBeanProperty)_backRefProperties.get(s);
        return s;
    }

    public ObjectIdReader getObjectIdReader() {
        return _objectIdReader;
    }

    public Class handledType() {
        return _baseType.getRawClass();
    }

    public boolean isCachable() {
        return true;
    }
}
