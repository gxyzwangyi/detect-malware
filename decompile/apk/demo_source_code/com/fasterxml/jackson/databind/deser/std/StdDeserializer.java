// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.io.NumberInput;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Converter;
import java.io.Serializable;
import java.util.Date;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            StdDelegatingDeserializer

public abstract class StdDeserializer extends JsonDeserializer
    implements Serializable {

    protected static final int F_MASK_INT_COERCIONS;
    private static final long serialVersionUID = 1L;
    protected final Class _valueClass;

    protected StdDeserializer(JavaType javatype) {
        if (javatype == null)
            javatype = null;
        else
            javatype = javatype.getRawClass();
        _valueClass = javatype;
    }

    protected StdDeserializer(StdDeserializer stddeserializer) {
        _valueClass = stddeserializer._valueClass;
    }

    protected StdDeserializer(Class class1) {
        _valueClass = class1;
    }

    protected static final double parseDouble(String s) {
        double d;
        if ("2.2250738585072012e-308".equals(s))
            d = 2.2250738585072014E-308D;
        else
            d = Double.parseDouble(s);
        return d;
    }

    protected Object _coerceIntegral(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        int i = deserializationcontext.getDeserializationFeatures();
        if (DeserializationFeature.USE_BIG_INTEGER_FOR_INTS.enabledIn(i))
            jsonparser = jsonparser.getBigIntegerValue();
        else
        if (DeserializationFeature.USE_LONG_FOR_INTS.enabledIn(i))
            jsonparser = Long.valueOf(jsonparser.getLongValue());
        else
            jsonparser = jsonparser.getBigIntegerValue();
        return jsonparser;
    }

    protected Object _deserializeFromEmpty(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        JsonToken jsontoken = jsonparser.getCurrentToken();
        if (jsontoken != JsonToken.START_ARRAY) goto _L2; else goto _L1
_L1:
        if (!deserializationcontext.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) goto _L4; else goto _L3
_L3:
        if (jsonparser.nextToken() != JsonToken.END_ARRAY) goto _L6; else goto _L5
_L5:
        return null;
_L6:
        throw deserializationcontext.mappingException(handledType(), JsonToken.START_ARRAY);
_L2:
        if (jsontoken == JsonToken.VALUE_STRING && deserializationcontext.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT) && jsonparser.getText().trim().isEmpty()) goto _L5; else goto _L4
_L4:
        throw deserializationcontext.mappingException(handledType());
    }

    protected void _failDoubleToIntCoercion(JsonParser jsonparser, DeserializationContext deserializationcontext, String s) {
        throw deserializationcontext.mappingException("Can not coerce a floating-point value ('%s') into %s; enable `DeserializationFeature.ACCEPT_FLOAT_AS_INT` to allow", new Object[] {
            jsonparser.getValueAsString(), s
        });
    }

    protected boolean _hasTextualNull(String s) {
        return "null".equals(s);
    }

    protected final boolean _isIntNumber(String s) {
        int j;
        boolean flag;
        boolean flag1;
        flag1 = false;
        j = s.length();
        flag = flag1;
        if (j <= 0) goto _L2; else goto _L1
_L1:
        int i;
        i = s.charAt(0);
        char c;
        if (i == '-' || i == '+')
            i = 1;
        else
            i = 0;
_L6:
        if (i >= j)
            break MISSING_BLOCK_LABEL_84;
        c = s.charAt(i);
        flag = flag1;
        if (c > '9') goto _L2; else goto _L3
_L3:
        if (c >= '0') goto _L5; else goto _L4
_L4:
        flag = flag1;
_L2:
        return flag;
_L5:
        i++;
          goto _L6
        flag = true;
          goto _L2
    }

    protected final boolean _isNaN(String s) {
        return "NaN".equals(s);
    }

    protected final boolean _isNegInf(String s) {
        boolean flag;
        if ("-Infinity".equals(s) || "-INF".equals(s))
            flag = true;
        else
            flag = false;
        return flag;
    }

    protected final boolean _isPosInf(String s) {
        boolean flag;
        if ("Infinity".equals(s) || "INF".equals(s))
            flag = true;
        else
            flag = false;
        return flag;
    }

    protected final Boolean _parseBoolean(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        Object obj = jsonparser.getCurrentToken();
        if (obj != JsonToken.VALUE_TRUE) goto _L2; else goto _L1
_L1:
        obj = Boolean.TRUE;
_L4:
        return ((Boolean) (obj));
_L2:
        if (obj == JsonToken.VALUE_FALSE) {
            obj = Boolean.FALSE;
            continue; /* Loop/switch isn't completed */
        }
        if (obj == JsonToken.VALUE_NUMBER_INT) {
            if (jsonparser.getNumberType() == com.fasterxml.jackson.core.JsonParser.NumberType.INT) {
                if (jsonparser.getIntValue() == 0)
                    obj = Boolean.FALSE;
                else
                    obj = Boolean.TRUE;
            } else {
                obj = Boolean.valueOf(_parseBooleanFromOther(jsonparser, deserializationcontext));
            }
            continue; /* Loop/switch isn't completed */
        }
        if (obj == JsonToken.VALUE_NULL) {
            obj = (Boolean)getNullValue(deserializationcontext);
            continue; /* Loop/switch isn't completed */
        }
        if (obj != JsonToken.VALUE_STRING)
            break; /* Loop/switch isn't completed */
        jsonparser = jsonparser.getText().trim();
        if ("true".equals(jsonparser) || "True".equals(jsonparser))
            obj = Boolean.TRUE;
        else
        if ("false".equals(jsonparser) || "False".equals(jsonparser))
            obj = Boolean.FALSE;
        else
        if (jsonparser.length() == 0)
            obj = (Boolean)getEmptyValue(deserializationcontext);
        else
        if (_hasTextualNull(jsonparser))
            obj = (Boolean)getNullValue(deserializationcontext);
        else
            throw deserializationcontext.weirdStringException(jsonparser, _valueClass, "only \"true\" or \"false\" recognized");
        if (true) goto _L4; else goto _L3
_L3:
        if (obj == JsonToken.START_ARRAY && deserializationcontext.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {
            jsonparser.nextToken();
            obj = _parseBoolean(jsonparser, deserializationcontext);
            if (jsonparser.nextToken() != JsonToken.END_ARRAY)
                throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Boolean' value but there was more than a single value in the array");
        } else {
            throw deserializationcontext.mappingException(_valueClass, ((JsonToken) (obj)));
        }
        if (true) goto _L4; else goto _L5
_L5:
    }

    protected final boolean _parseBooleanFromOther(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        boolean flag;
        if (jsonparser.getNumberType() == com.fasterxml.jackson.core.JsonParser.NumberType.LONG) {
            if (jsonparser.getLongValue() == 0L)
                jsonparser = Boolean.FALSE;
            else
                jsonparser = Boolean.TRUE;
            flag = jsonparser.booleanValue();
        } else {
            jsonparser = jsonparser.getText();
            if ("0.0".equals(jsonparser) || "0".equals(jsonparser))
                flag = Boolean.FALSE.booleanValue();
            else
                flag = Boolean.TRUE.booleanValue();
        }
        return flag;
    }

    protected final boolean _parseBooleanPrimitive(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        boolean flag1;
        boolean flag2;
        JsonToken jsontoken;
        flag2 = true;
        flag1 = false;
        jsontoken = jsonparser.getCurrentToken();
        if (jsontoken != JsonToken.VALUE_TRUE) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        flag = flag1;
        if (jsontoken == JsonToken.VALUE_FALSE)
            continue; /* Loop/switch isn't completed */
        flag = flag1;
        if (jsontoken == JsonToken.VALUE_NULL)
            continue; /* Loop/switch isn't completed */
        if (jsontoken == JsonToken.VALUE_NUMBER_INT) {
            if (jsonparser.getNumberType() == com.fasterxml.jackson.core.JsonParser.NumberType.INT) {
                if (jsonparser.getIntValue() != 0)
                    flag = flag2;
                else
                    flag = false;
            } else {
                flag = _parseBooleanFromOther(jsonparser, deserializationcontext);
            }
            continue; /* Loop/switch isn't completed */
        }
        if (jsontoken != JsonToken.VALUE_STRING)
            break; /* Loop/switch isn't completed */
        jsonparser = jsonparser.getText().trim();
        if ("true".equals(jsonparser) || "True".equals(jsonparser)) {
            flag = true;
        } else {
            flag = flag1;
            if (!"false".equals(jsonparser)) {
                flag = flag1;
                if (!"False".equals(jsonparser)) {
                    flag = flag1;
                    if (jsonparser.length() != 0) {
                        flag = flag1;
                        if (!_hasTextualNull(jsonparser))
                            throw deserializationcontext.weirdStringException(jsonparser, _valueClass, "only \"true\" or \"false\" recognized");
                    }
                }
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
        if (jsontoken == JsonToken.START_ARRAY && deserializationcontext.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {
            jsonparser.nextToken();
            flag = _parseBooleanPrimitive(jsonparser, deserializationcontext);
            if (jsonparser.nextToken() != JsonToken.END_ARRAY)
                throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'boolean' value but there was more than a single value in the array");
        } else {
            throw deserializationcontext.mappingException(_valueClass, jsontoken);
        }
        if (true) goto _L4; else goto _L5
_L5:
    }

    protected Byte _parseByte(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        Object obj = jsonparser.getCurrentToken();
        if (obj != JsonToken.VALUE_NUMBER_INT) goto _L2; else goto _L1
_L1:
        obj = Byte.valueOf(jsonparser.getByteValue());
_L4:
        return ((Byte) (obj));
_L2:
        if (obj != JsonToken.VALUE_STRING)
            break MISSING_BLOCK_LABEL_139;
        jsonparser = jsonparser.getText().trim();
        if (_hasTextualNull(jsonparser)) {
            obj = (Byte)getNullValue(deserializationcontext);
            continue; /* Loop/switch isn't completed */
        }
        if (jsonparser.length() == 0) {
            obj = (Byte)getEmptyValue(deserializationcontext);
            continue; /* Loop/switch isn't completed */
        }
        int i;
        try {
            i = NumberInput.parseInt(jsonparser);
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            throw deserializationcontext.weirdStringException(jsonparser, _valueClass, "not a valid Byte value");
        }
        if (i < -128 || i > 255)
            throw deserializationcontext.weirdStringException(jsonparser, _valueClass, "overflow, value can not be represented as 8-bit value");
        obj = Byte.valueOf((byte)i);
        continue; /* Loop/switch isn't completed */
        if (obj == JsonToken.VALUE_NUMBER_FLOAT) {
            if (!deserializationcontext.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT))
                _failDoubleToIntCoercion(jsonparser, deserializationcontext, "Byte");
            obj = Byte.valueOf(jsonparser.getByteValue());
            continue; /* Loop/switch isn't completed */
        }
        if (obj != JsonToken.VALUE_NULL)
            break; /* Loop/switch isn't completed */
        obj = (Byte)getNullValue(deserializationcontext);
        if (true) goto _L4; else goto _L3
_L3:
        if (obj == JsonToken.START_ARRAY && deserializationcontext.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {
            jsonparser.nextToken();
            obj = _parseByte(jsonparser, deserializationcontext);
            if (jsonparser.nextToken() != JsonToken.END_ARRAY)
                throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array");
        } else {
            throw deserializationcontext.mappingException(_valueClass, ((JsonToken) (obj)));
        }
        if (true) goto _L4; else goto _L5
_L5:
    }

    protected Date _parseDate(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        Object obj = jsonparser.getCurrentToken();
        if (obj != JsonToken.VALUE_NUMBER_INT) goto _L2; else goto _L1
_L1:
        obj = new Date(jsonparser.getLongValue());
_L4:
        return ((Date) (obj));
_L2:
        if (obj == JsonToken.VALUE_NULL) {
            obj = (Date)getNullValue(deserializationcontext);
            continue; /* Loop/switch isn't completed */
        }
        if (obj != JsonToken.VALUE_STRING)
            break; /* Loop/switch isn't completed */
        obj = null;
        try {
            jsonparser = jsonparser.getText().trim();
        }
        // Misplaced declaration of an exception variable
        catch (JsonParser jsonparser) {
            throw deserializationcontext.weirdStringException(((String) (obj)), _valueClass, (new StringBuilder()).append("not a valid representation (error: ").append(jsonparser.getMessage()).append(")").toString());
        }
        obj = jsonparser;
        if (jsonparser.length() != 0)
            break MISSING_BLOCK_LABEL_87;
        obj = jsonparser;
        jsonparser = (Date)getEmptyValue(deserializationcontext);
        obj = jsonparser;
        continue; /* Loop/switch isn't completed */
        obj = jsonparser;
        if (!_hasTextualNull(jsonparser))
            break MISSING_BLOCK_LABEL_113;
        obj = jsonparser;
        jsonparser = (Date)getNullValue(deserializationcontext);
        obj = jsonparser;
        continue; /* Loop/switch isn't completed */
        obj = jsonparser;
        jsonparser = deserializationcontext.parseDate(jsonparser);
        obj = jsonparser;
        if (true) goto _L4; else goto _L3
_L3:
        if (obj == JsonToken.START_ARRAY && deserializationcontext.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {
            jsonparser.nextToken();
            obj = _parseDate(jsonparser, deserializationcontext);
            if (jsonparser.nextToken() != JsonToken.END_ARRAY)
                throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'java.util.Date' value but there was more than a single value in the array");
        } else {
            throw deserializationcontext.mappingException(_valueClass, ((JsonToken) (obj)));
        }
        if (true) goto _L4; else goto _L5
_L5:
    }

    protected final Double _parseDouble(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        Object obj = jsonparser.getCurrentToken();
        if (obj != JsonToken.VALUE_NUMBER_INT && obj != JsonToken.VALUE_NUMBER_FLOAT) goto _L2; else goto _L1
_L1:
        obj = Double.valueOf(jsonparser.getDoubleValue());
_L13:
        return ((Double) (obj));
_L2:
        if (obj != JsonToken.VALUE_STRING) goto _L4; else goto _L3
_L3:
        obj = jsonparser.getText().trim();
        if (((String) (obj)).length() == 0) {
            obj = (Double)getEmptyValue(deserializationcontext);
            continue; /* Loop/switch isn't completed */
        }
        if (_hasTextualNull(((String) (obj)))) {
            obj = (Double)getNullValue(deserializationcontext);
            continue; /* Loop/switch isn't completed */
        }
        ((String) (obj)).charAt(0);
        JVM INSTR lookupswitch 3: default 136
    //                   45: 191
    //                   73: 151
    //                   78: 171;
           goto _L5 _L6 _L7 _L8
_L5:
        double d;
        try {
            d = parseDouble(((String) (obj)));
        }
        // Misplaced declaration of an exception variable
        catch (JsonParser jsonparser) {
            throw deserializationcontext.weirdStringException(((String) (obj)), _valueClass, "not a valid Double value");
        }
        obj = Double.valueOf(d);
        continue; /* Loop/switch isn't completed */
_L7:
        if (!_isPosInf(((String) (obj)))) goto _L5; else goto _L9
_L9:
        obj = Double.valueOf((1.0D / 0.0D));
        continue; /* Loop/switch isn't completed */
_L8:
        if (!_isNaN(((String) (obj)))) goto _L5; else goto _L10
_L10:
        obj = Double.valueOf((0.0D / 0.0D));
        continue; /* Loop/switch isn't completed */
_L6:
        if (!_isNegInf(((String) (obj)))) goto _L5; else goto _L11
_L11:
        obj = Double.valueOf((-1.0D / 0.0D));
        continue; /* Loop/switch isn't completed */
_L4:
        if (obj != JsonToken.VALUE_NULL)
            break; /* Loop/switch isn't completed */
        obj = (Double)getNullValue(deserializationcontext);
        if (true) goto _L13; else goto _L12
_L12:
        if (obj == JsonToken.START_ARRAY && deserializationcontext.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {
            jsonparser.nextToken();
            obj = _parseDouble(jsonparser, deserializationcontext);
            if (jsonparser.nextToken() != JsonToken.END_ARRAY)
                throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Double' value but there was more than a single value in the array");
        } else {
            throw deserializationcontext.mappingException(_valueClass, ((JsonToken) (obj)));
        }
        if (true) goto _L13; else goto _L14
_L14:
    }

    protected final double _parseDoublePrimitive(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        double d1;
        Object obj;
        d1 = 0.0D;
        obj = jsonparser.getCurrentToken();
        if (obj != JsonToken.VALUE_NUMBER_INT && obj != JsonToken.VALUE_NUMBER_FLOAT) goto _L2; else goto _L1
_L1:
        double d = jsonparser.getDoubleValue();
_L11:
        return d;
_L2:
        if (obj != JsonToken.VALUE_STRING)
            break; /* Loop/switch isn't completed */
        obj = jsonparser.getText().trim();
        d = d1;
        if (((String) (obj)).length() == 0)
            continue; /* Loop/switch isn't completed */
        d = d1;
        if (_hasTextualNull(((String) (obj))))
            continue; /* Loop/switch isn't completed */
        ((String) (obj)).charAt(0);
        JVM INSTR lookupswitch 3: default 112
    //                   45: 153
    //                   73: 121
    //                   78: 137;
           goto _L3 _L4 _L5 _L6
_L3:
        try {
            d = parseDouble(((String) (obj)));
        }
        // Misplaced declaration of an exception variable
        catch (JsonParser jsonparser) {
            throw deserializationcontext.weirdStringException(((String) (obj)), _valueClass, "not a valid double value");
        }
        continue; /* Loop/switch isn't completed */
_L5:
        if (!_isPosInf(((String) (obj)))) goto _L3; else goto _L7
_L7:
        d = (1.0D / 0.0D);
        continue; /* Loop/switch isn't completed */
_L6:
        if (!_isNaN(((String) (obj)))) goto _L3; else goto _L8
_L8:
        d = (0.0D / 0.0D);
        continue; /* Loop/switch isn't completed */
_L4:
        if (!_isNegInf(((String) (obj)))) goto _L3; else goto _L9
_L9:
        d = (-1.0D / 0.0D);
        if (true) goto _L11; else goto _L10
_L10:
        d = d1;
        if (obj != JsonToken.VALUE_NULL)
            if (obj == JsonToken.START_ARRAY && deserializationcontext.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {
                jsonparser.nextToken();
                d = _parseDoublePrimitive(jsonparser, deserializationcontext);
                if (jsonparser.nextToken() != JsonToken.END_ARRAY)
                    throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array");
            } else {
                throw deserializationcontext.mappingException(_valueClass, ((JsonToken) (obj)));
            }
        if (true) goto _L11; else goto _L12
_L12:
    }

    protected final Float _parseFloat(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        Object obj = jsonparser.getCurrentToken();
        if (obj != JsonToken.VALUE_NUMBER_INT && obj != JsonToken.VALUE_NUMBER_FLOAT) goto _L2; else goto _L1
_L1:
        obj = Float.valueOf(jsonparser.getFloatValue());
_L13:
        return ((Float) (obj));
_L2:
        if (obj != JsonToken.VALUE_STRING) goto _L4; else goto _L3
_L3:
        obj = jsonparser.getText().trim();
        if (((String) (obj)).length() == 0) {
            obj = (Float)getEmptyValue(deserializationcontext);
            continue; /* Loop/switch isn't completed */
        }
        if (_hasTextualNull(((String) (obj)))) {
            obj = (Float)getNullValue(deserializationcontext);
            continue; /* Loop/switch isn't completed */
        }
        ((String) (obj)).charAt(0);
        JVM INSTR lookupswitch 3: default 136
    //                   45: 191
    //                   73: 151
    //                   78: 171;
           goto _L5 _L6 _L7 _L8
_L5:
        float f;
        try {
            f = Float.parseFloat(((String) (obj)));
        }
        // Misplaced declaration of an exception variable
        catch (JsonParser jsonparser) {
            throw deserializationcontext.weirdStringException(((String) (obj)), _valueClass, "not a valid Float value");
        }
        obj = Float.valueOf(f);
        continue; /* Loop/switch isn't completed */
_L7:
        if (!_isPosInf(((String) (obj)))) goto _L5; else goto _L9
_L9:
        obj = Float.valueOf((1.0F / 0.0F));
        continue; /* Loop/switch isn't completed */
_L8:
        if (!_isNaN(((String) (obj)))) goto _L5; else goto _L10
_L10:
        obj = Float.valueOf((0.0F / 0.0F));
        continue; /* Loop/switch isn't completed */
_L6:
        if (!_isNegInf(((String) (obj)))) goto _L5; else goto _L11
_L11:
        obj = Float.valueOf((-1.0F / 0.0F));
        continue; /* Loop/switch isn't completed */
_L4:
        if (obj != JsonToken.VALUE_NULL)
            break; /* Loop/switch isn't completed */
        obj = (Float)getNullValue(deserializationcontext);
        if (true) goto _L13; else goto _L12
_L12:
        if (obj == JsonToken.START_ARRAY && deserializationcontext.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {
            jsonparser.nextToken();
            obj = _parseFloat(jsonparser, deserializationcontext);
            if (jsonparser.nextToken() != JsonToken.END_ARRAY)
                throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array");
        } else {
            throw deserializationcontext.mappingException(_valueClass, ((JsonToken) (obj)));
        }
        if (true) goto _L13; else goto _L14
_L14:
    }

    protected final float _parseFloatPrimitive(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        float f1;
        Object obj;
        f1 = 0.0F;
        obj = jsonparser.getCurrentToken();
        if (obj != JsonToken.VALUE_NUMBER_INT && obj != JsonToken.VALUE_NUMBER_FLOAT) goto _L2; else goto _L1
_L1:
        float f = jsonparser.getFloatValue();
_L11:
        return f;
_L2:
        if (obj != JsonToken.VALUE_STRING)
            break; /* Loop/switch isn't completed */
        jsonparser = jsonparser.getText().trim();
        f = f1;
        if (jsonparser.length() == 0)
            continue; /* Loop/switch isn't completed */
        f = f1;
        if (_hasTextualNull(jsonparser))
            continue; /* Loop/switch isn't completed */
        jsonparser.charAt(0);
        JVM INSTR lookupswitch 3: default 108
    //                   45: 146
    //                   73: 116
    //                   78: 131;
           goto _L3 _L4 _L5 _L6
_L3:
        try {
            f = Float.parseFloat(jsonparser);
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            throw deserializationcontext.weirdStringException(jsonparser, _valueClass, "not a valid float value");
        }
        continue; /* Loop/switch isn't completed */
_L5:
        if (!_isPosInf(jsonparser)) goto _L3; else goto _L7
_L7:
        f = (1.0F / 0.0F);
        continue; /* Loop/switch isn't completed */
_L6:
        if (!_isNaN(jsonparser)) goto _L3; else goto _L8
_L8:
        f = (0.0F / 0.0F);
        continue; /* Loop/switch isn't completed */
_L4:
        if (!_isNegInf(jsonparser)) goto _L3; else goto _L9
_L9:
        f = (-1.0F / 0.0F);
        if (true) goto _L11; else goto _L10
_L10:
        f = f1;
        if (obj != JsonToken.VALUE_NULL)
            if (obj == JsonToken.START_ARRAY && deserializationcontext.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {
                jsonparser.nextToken();
                f = _parseFloatPrimitive(jsonparser, deserializationcontext);
                if (jsonparser.nextToken() != JsonToken.END_ARRAY)
                    throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'float' value but there was more than a single value in the array");
            } else {
                throw deserializationcontext.mappingException(_valueClass, ((JsonToken) (obj)));
            }
        if (true) goto _L11; else goto _L12
_L12:
    }

    protected final int _parseIntPrimitive(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        boolean flag = false;
        if (!jsonparser.hasToken(JsonToken.VALUE_NUMBER_INT)) goto _L2; else goto _L1
_L1:
        int i = jsonparser.getIntValue();
_L4:
        return i;
_L2:
        int j;
        long l;
        Object obj;
        obj = jsonparser.getCurrentToken();
        if (obj != JsonToken.VALUE_STRING)
            break MISSING_BLOCK_LABEL_197;
        jsonparser = jsonparser.getText().trim();
        i = ((flag) ? 1 : 0);
        if (_hasTextualNull(jsonparser))
            continue; /* Loop/switch isn't completed */
        StringBuilder stringbuilder;
        try {
            j = jsonparser.length();
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            throw deserializationcontext.weirdStringException(jsonparser, _valueClass, "not a valid int value");
        }
        if (j <= 9)
            break MISSING_BLOCK_LABEL_181;
        l = Long.parseLong(jsonparser);
        if (l >= 0x80000000L && l <= 0x7fffffffL)
            break MISSING_BLOCK_LABEL_174;
        obj = _valueClass;
        stringbuilder = JVM INSTR new #325 <Class StringBuilder>;
        stringbuilder.StringBuilder();
        throw deserializationcontext.weirdStringException(jsonparser, ((Class) (obj)), stringbuilder.append("Overflow: numeric value (").append(jsonparser).append(") out of range of int (").append(0x80000000).append(" - ").append(0x7fffffff).append(")").toString());
        i = (int)l;
        continue; /* Loop/switch isn't completed */
        i = ((flag) ? 1 : 0);
        if (j == 0)
            continue; /* Loop/switch isn't completed */
        i = NumberInput.parseInt(jsonparser);
        continue; /* Loop/switch isn't completed */
        if (obj != JsonToken.VALUE_NUMBER_FLOAT)
            break; /* Loop/switch isn't completed */
        if (!deserializationcontext.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT))
            _failDoubleToIntCoercion(jsonparser, deserializationcontext, "int");
        i = jsonparser.getValueAsInt();
        if (true) goto _L4; else goto _L3
_L3:
        i = ((flag) ? 1 : 0);
        if (obj != JsonToken.VALUE_NULL)
            if (obj == JsonToken.START_ARRAY && deserializationcontext.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {
                jsonparser.nextToken();
                i = _parseIntPrimitive(jsonparser, deserializationcontext);
                if (jsonparser.nextToken() != JsonToken.END_ARRAY)
                    throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'int' value but there was more than a single value in the array");
            } else {
                throw deserializationcontext.mappingException(_valueClass, ((JsonToken) (obj)));
            }
        if (true) goto _L4; else goto _L5
_L5:
    }

    protected final Integer _parseInteger(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        jsonparser.getCurrentTokenId();
        JVM INSTR tableswitch 3 11: default 56
    //                   3 317
    //                   4 56
    //                   5 56
    //                   6 112
    //                   7 69
    //                   8 81
    //                   9 56
    //                   10 56
    //                   11 304;
           goto _L1 _L2 _L1 _L1 _L3 _L4 _L5 _L1 _L1 _L6
_L1:
        throw deserializationcontext.mappingException(_valueClass, jsonparser.getCurrentToken());
_L4:
        Object obj = Integer.valueOf(jsonparser.getIntValue());
_L7:
        return ((Integer) (obj));
_L5:
        if (!deserializationcontext.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT))
            _failDoubleToIntCoercion(jsonparser, deserializationcontext, "Integer");
        obj = Integer.valueOf(jsonparser.getValueAsInt());
        continue; /* Loop/switch isn't completed */
_L3:
        jsonparser = jsonparser.getText().trim();
        int i;
        long l;
        i = jsonparser.length();
        if (_hasTextualNull(jsonparser)) {
            obj = (Integer)getNullValue(deserializationcontext);
            continue; /* Loop/switch isn't completed */
        }
        if (i <= 9)
            break MISSING_BLOCK_LABEL_273;
        Class class1;
        try {
            l = Long.parseLong(jsonparser);
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            throw deserializationcontext.weirdStringException(jsonparser, _valueClass, "not a valid Integer value");
        }
        if (l >= 0x80000000L && l <= 0x7fffffffL)
            break MISSING_BLOCK_LABEL_260;
        class1 = _valueClass;
        obj = JVM INSTR new #325 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        throw deserializationcontext.weirdStringException(jsonparser, class1, ((StringBuilder) (obj)).append("Overflow: numeric value (").append(jsonparser).append(") out of range of Integer (").append(0x80000000).append(" - ").append(0x7fffffff).append(")").toString());
        i = (int)l;
        obj = Integer.valueOf(i);
        continue; /* Loop/switch isn't completed */
        if (i != 0)
            break MISSING_BLOCK_LABEL_290;
        obj = (Integer)getEmptyValue(deserializationcontext);
        continue; /* Loop/switch isn't completed */
        i = NumberInput.parseInt(jsonparser);
        obj = Integer.valueOf(i);
        continue; /* Loop/switch isn't completed */
_L6:
        obj = (Integer)getNullValue(deserializationcontext);
        if (true) goto _L7; else goto _L2
_L2:
        if (!deserializationcontext.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))
            continue; /* Loop/switch isn't completed */
        jsonparser.nextToken();
        obj = _parseInteger(jsonparser, deserializationcontext);
        if (jsonparser.nextToken() != JsonToken.END_ARRAY)
            throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Integer' value but there was more than a single value in the array");
        if (true) goto _L7; else goto _L8
_L8:
        if (true) goto _L1; else goto _L9
_L9:
    }

    protected final Long _parseLong(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        jsonparser.getCurrentTokenId();
        JVM INSTR tableswitch 3 11: default 56
    //                   3 203
    //                   4 56
    //                   5 56
    //                   6 112
    //                   7 69
    //                   8 81
    //                   9 56
    //                   10 56
    //                   11 190;
           goto _L1 _L2 _L1 _L1 _L3 _L4 _L5 _L1 _L1 _L6
_L1:
        throw deserializationcontext.mappingException(_valueClass, jsonparser.getCurrentToken());
_L4:
        Object obj = Long.valueOf(jsonparser.getLongValue());
_L7:
        return ((Long) (obj));
_L5:
        if (!deserializationcontext.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT))
            _failDoubleToIntCoercion(jsonparser, deserializationcontext, "Long");
        obj = Long.valueOf(jsonparser.getValueAsLong());
        continue; /* Loop/switch isn't completed */
_L3:
        jsonparser = jsonparser.getText().trim();
        if (jsonparser.length() == 0)
            obj = (Long)getEmptyValue(deserializationcontext);
        else
        if (_hasTextualNull(jsonparser)) {
            obj = (Long)getNullValue(deserializationcontext);
        } else {
            long l;
            try {
                l = NumberInput.parseLong(jsonparser);
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) {
                throw deserializationcontext.weirdStringException(jsonparser, _valueClass, "not a valid Long value");
            }
            obj = Long.valueOf(l);
        }
        continue; /* Loop/switch isn't completed */
_L6:
        obj = (Long)getNullValue(deserializationcontext);
        if (true) goto _L7; else goto _L2
_L2:
        if (!deserializationcontext.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))
            continue; /* Loop/switch isn't completed */
        jsonparser.nextToken();
        obj = _parseLong(jsonparser, deserializationcontext);
        if (jsonparser.nextToken() != JsonToken.END_ARRAY)
            throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Long' value but there was more than a single value in the array");
        if (true) goto _L7; else goto _L8
_L8:
        if (true) goto _L1; else goto _L9
_L9:
    }

    protected final long _parseLongPrimitive(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        long l;
        long l1;
        l1 = 0L;
        l = l1;
        jsonparser.getCurrentTokenId();
        JVM INSTR tableswitch 3 11: default 60
    //                   3 159
    //                   4 60
    //                   5 60
    //                   6 107
    //                   7 73
    //                   8 80
    //                   9 60
    //                   10 60
    //                   11 78;
           goto _L1 _L2 _L1 _L1 _L3 _L4 _L5 _L1 _L1 _L6
_L1:
        break MISSING_BLOCK_LABEL_60;
_L6:
        break; /* Loop/switch isn't completed */
_L10:
        throw deserializationcontext.mappingException(_valueClass, jsonparser.getCurrentToken());
_L4:
        l = jsonparser.getLongValue();
_L7:
        return l;
_L5:
        if (!deserializationcontext.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT))
            _failDoubleToIntCoercion(jsonparser, deserializationcontext, "long");
        l = jsonparser.getValueAsLong();
        continue; /* Loop/switch isn't completed */
_L3:
        jsonparser = jsonparser.getText().trim();
        l = l1;
        if (jsonparser.length() != 0) {
            l = l1;
            if (!_hasTextualNull(jsonparser))
                try {
                    l = NumberInput.parseLong(jsonparser);
                }
                catch (IllegalArgumentException illegalargumentexception) {
                    throw deserializationcontext.weirdStringException(jsonparser, _valueClass, "not a valid long value");
                }
        }
        if (true) goto _L7; else goto _L2
_L2:
        if (!deserializationcontext.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))
            continue; /* Loop/switch isn't completed */
        jsonparser.nextToken();
        l = _parseLongPrimitive(jsonparser, deserializationcontext);
        if (jsonparser.nextToken() != JsonToken.END_ARRAY)
            throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'long' value but there was more than a single value in the array");
        if (true) goto _L7; else goto _L8
_L8:
        if (true) goto _L10; else goto _L9
_L9:
    }

    protected Short _parseShort(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        Object obj = jsonparser.getCurrentToken();
        if (obj != JsonToken.VALUE_NUMBER_INT) goto _L2; else goto _L1
_L1:
        obj = Short.valueOf(jsonparser.getShortValue());
_L4:
        return ((Short) (obj));
_L2:
        if (obj != JsonToken.VALUE_STRING)
            break MISSING_BLOCK_LABEL_140;
        jsonparser = jsonparser.getText().trim();
        if (jsonparser.length() == 0) {
            obj = (Short)getEmptyValue(deserializationcontext);
            continue; /* Loop/switch isn't completed */
        }
        if (_hasTextualNull(jsonparser)) {
            obj = (Short)getNullValue(deserializationcontext);
            continue; /* Loop/switch isn't completed */
        }
        int i;
        try {
            i = NumberInput.parseInt(jsonparser);
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            throw deserializationcontext.weirdStringException(jsonparser, _valueClass, "not a valid Short value");
        }
        if (i < -32768 || i > 32767)
            throw deserializationcontext.weirdStringException(jsonparser, _valueClass, "overflow, value can not be represented as 16-bit value");
        obj = Short.valueOf((short)i);
        continue; /* Loop/switch isn't completed */
        if (obj == JsonToken.VALUE_NUMBER_FLOAT) {
            if (!deserializationcontext.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT))
                _failDoubleToIntCoercion(jsonparser, deserializationcontext, "Short");
            obj = Short.valueOf(jsonparser.getShortValue());
            continue; /* Loop/switch isn't completed */
        }
        if (obj != JsonToken.VALUE_NULL)
            break; /* Loop/switch isn't completed */
        obj = (Short)getNullValue(deserializationcontext);
        if (true) goto _L4; else goto _L3
_L3:
        if (obj == JsonToken.START_ARRAY && deserializationcontext.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {
            jsonparser.nextToken();
            obj = _parseShort(jsonparser, deserializationcontext);
            if (jsonparser.nextToken() != JsonToken.END_ARRAY)
                throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Short' value but there was more than a single value in the array");
        } else {
            throw deserializationcontext.mappingException(_valueClass, ((JsonToken) (obj)));
        }
        if (true) goto _L4; else goto _L5
_L5:
    }

    protected final short _parseShortPrimitive(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        int i = _parseIntPrimitive(jsonparser, deserializationcontext);
        if (i < -32768 || i > 32767)
            throw deserializationcontext.weirdStringException(String.valueOf(i), _valueClass, "overflow, value can not be represented as 16-bit value");
        else
            return (short)i;
    }

    protected final String _parseString(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        Object obj = jsonparser.getCurrentToken();
        if (obj != JsonToken.VALUE_STRING) goto _L2; else goto _L1
_L1:
        obj = jsonparser.getText();
_L4:
        return ((String) (obj));
_L2:
        if (obj != JsonToken.START_ARRAY || !deserializationcontext.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))
            break; /* Loop/switch isn't completed */
        jsonparser.nextToken();
        obj = _parseString(jsonparser, deserializationcontext);
        if (jsonparser.nextToken() != JsonToken.END_ARRAY)
            throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'String' value but there was more than a single value in the array");
        if (true) goto _L4; else goto _L3
_L3:
        String s = jsonparser.getValueAsString();
        obj = s;
        if (s == null)
            throw deserializationcontext.mappingException(java/lang/String, jsonparser.getCurrentToken());
        if (true) goto _L4; else goto _L5
_L5:
    }

    public Object deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
        return typedeserializer.deserializeTypedFromAny(jsonparser, deserializationcontext);
    }

    protected JsonDeserializer findConvertingContentDeserializer(DeserializationContext deserializationcontext, BeanProperty beanproperty, JsonDeserializer jsondeserializer) {
        Object obj1 = deserializationcontext.getAnnotationIntrospector();
        Object obj = jsondeserializer;
        if (obj1 != null) {
            obj = jsondeserializer;
            if (beanproperty != null) {
                com.fasterxml.jackson.databind.introspect.AnnotatedMember annotatedmember = beanproperty.getMember();
                obj = jsondeserializer;
                if (annotatedmember != null) {
                    obj1 = ((AnnotationIntrospector) (obj1)).findDeserializationContentConverter(annotatedmember);
                    obj = jsondeserializer;
                    if (obj1 != null) {
                        Converter converter = deserializationcontext.converterInstance(beanproperty.getMember(), obj1);
                        obj1 = converter.getInputType(deserializationcontext.getTypeFactory());
                        obj = jsondeserializer;
                        if (jsondeserializer == null)
                            obj = deserializationcontext.findContextualValueDeserializer(((JavaType) (obj1)), beanproperty);
                        obj = new StdDelegatingDeserializer(converter, ((JavaType) (obj1)), ((JsonDeserializer) (obj)));
                    }
                }
            }
        }
        return ((JsonDeserializer) (obj));
    }

    protected JsonDeserializer findDeserializer(DeserializationContext deserializationcontext, JavaType javatype, BeanProperty beanproperty) {
        return deserializationcontext.findContextualValueDeserializer(javatype, beanproperty);
    }

    protected Boolean findFormatFeature(DeserializationContext deserializationcontext, BeanProperty beanproperty, Class class1, com.fasterxml.jackson.annotation.JsonFormat.Feature feature) {
        deserializationcontext = findFormatOverrides(deserializationcontext, beanproperty, class1);
        if (deserializationcontext != null)
            deserializationcontext = deserializationcontext.getFeature(feature);
        else
            deserializationcontext = null;
        return deserializationcontext;
    }

    protected com.fasterxml.jackson.annotation.JsonFormat.Value findFormatOverrides(DeserializationContext deserializationcontext, BeanProperty beanproperty, Class class1) {
        if (beanproperty != null)
            deserializationcontext = beanproperty.findPropertyFormat(deserializationcontext.getConfig(), class1);
        else
            deserializationcontext = deserializationcontext.getDefaultPropertyFormat(class1);
        return deserializationcontext;
    }

    public final Class getValueClass() {
        return _valueClass;
    }

    public JavaType getValueType() {
        return null;
    }

    protected void handleUnknownProperty(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj, String s) {
        Object obj1 = obj;
        if (obj == null)
            obj1 = handledType();
        if (!deserializationcontext.handleUnknownProperty(jsonparser, this, obj1, s)) {
            deserializationcontext.reportUnknownProperty(obj1, s, this);
            jsonparser.skipChildren();
        }
    }

    public Class handledType() {
        return _valueClass;
    }

    protected boolean isDefaultDeserializer(JsonDeserializer jsondeserializer) {
        return ClassUtil.isJacksonStdImpl(jsondeserializer);
    }

    protected boolean isDefaultKeyDeserializer(KeyDeserializer keydeserializer) {
        return ClassUtil.isJacksonStdImpl(keydeserializer);
    }

    static  {
        F_MASK_INT_COERCIONS = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS.getMask() | DeserializationFeature.USE_LONG_FOR_INTS.getMask();
    }
}
