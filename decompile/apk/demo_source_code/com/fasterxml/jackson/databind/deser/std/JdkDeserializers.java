// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.databind.JsonDeserializer;
import java.nio.ByteBuffer;
import java.util.HashSet;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            FromStringDeserializer, UUIDDeserializer, StackTraceElementDeserializer, AtomicBooleanDeserializer, 
//            ByteBufferDeserializer

public class JdkDeserializers {

    private static final HashSet _classNames;

    public JdkDeserializers() {
    }

    public static JsonDeserializer find(Class class1, String s) {
        if (!_classNames.contains(s)) goto _L2; else goto _L1
_L1:
        s = FromStringDeserializer.findDeserializer(class1);
        if (s == null) goto _L4; else goto _L3
_L3:
        class1 = s;
_L6:
        return class1;
_L4:
        if (class1 == java/util/UUID) {
            class1 = new UUIDDeserializer();
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == java/lang/StackTraceElement) {
            class1 = new StackTraceElementDeserializer();
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == java/util/concurrent/atomic/AtomicBoolean) {
            class1 = new AtomicBooleanDeserializer();
            continue; /* Loop/switch isn't completed */
        }
        if (class1 == java/nio/ByteBuffer) {
            class1 = new ByteBufferDeserializer();
            continue; /* Loop/switch isn't completed */
        }
_L2:
        class1 = null;
        if (true) goto _L6; else goto _L5
_L5:
    }

    static  {
        boolean flag = false;
        _classNames = new HashSet();
        Class aclass[] = new Class[4];
        aclass[0] = java/util/UUID;
        aclass[1] = java/util/concurrent/atomic/AtomicBoolean;
        aclass[2] = java/lang/StackTraceElement;
        aclass[3] = java/nio/ByteBuffer;
        int k = aclass.length;
        for (int i = 0; i < k; i++) {
            Class class1 = aclass[i];
            _classNames.add(class1.getName());
        }

        aclass = FromStringDeserializer.types();
        k = aclass.length;
        for (int j = ((flag) ? 1 : 0); j < k; j++) {
            Class class2 = aclass[j];
            _classNames.add(class2.getName());
        }

    }
}
