// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser;

import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.type.*;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Converter;
import java.io.Serializable;
import java.util.HashMap;
import java.util.concurrent.ConcurrentHashMap;

// Referenced classes of package com.fasterxml.jackson.databind.deser:
//            ResolvableDeserializer, DeserializerFactory

public final class DeserializerCache
    implements Serializable {

    private static final long serialVersionUID = 1L;
    protected final ConcurrentHashMap _cachedDeserializers = new ConcurrentHashMap(64, 0.75F, 4);
    protected final HashMap _incompleteDeserializers = new HashMap(8);

    public DeserializerCache() {
    }

    private boolean _hasCustomValueHandler(JavaType javatype) {
        boolean flag;
label0:
        {
            boolean flag1 = false;
            flag = flag1;
            if (!javatype.isContainerType())
                break label0;
            javatype = javatype.getContentType();
            flag = flag1;
            if (javatype == null)
                break label0;
            if (javatype.getValueHandler() == null) {
                flag = flag1;
                if (javatype.getTypeHandler() == null)
                    break label0;
            }
            flag = true;
        }
        return flag;
    }

    private Class _verifyAsClass(Object obj, String s, Class class1) {
        if (obj != null) goto _L2; else goto _L1
_L1:
        obj = null;
_L4:
        return ((Class) (obj));
_L2:
        if (!(obj instanceof Class))
            throw new IllegalStateException((new StringBuilder()).append("AnnotationIntrospector.").append(s).append("() returned value of type ").append(obj.getClass().getName()).append(": expected type JsonSerializer or Class<JsonSerializer> instead").toString());
        s = (Class)obj;
        if (s != class1) {
            obj = s;
            if (!ClassUtil.isBogusClass(s))
                continue; /* Loop/switch isn't completed */
        }
        obj = null;
        if (true) goto _L4; else goto _L3
_L3:
    }

    private JavaType modifyTypeByAnnotation(DeserializationContext deserializationcontext, Annotated annotated, JavaType javatype) {
        AnnotationIntrospector annotationintrospector = deserializationcontext.getAnnotationIntrospector();
        if (annotationintrospector != null) {
            Object obj = javatype;
            if (javatype.isMapLikeType()) {
                JavaType javatype1 = javatype.getKeyType();
                obj = javatype;
                if (javatype1 != null) {
                    obj = javatype;
                    if (javatype1.getValueHandler() == null) {
                        Object obj1 = annotationintrospector.findKeyDeserializer(annotated);
                        obj = javatype;
                        if (obj1 != null) {
                            obj1 = deserializationcontext.keyDeserializerInstance(annotated, obj1);
                            obj = javatype;
                            if (obj1 != null) {
                                obj = ((MapLikeType)javatype).withKeyValueHandler(obj1);
                                ((JavaType) (obj)).getKeyType();
                            }
                        }
                    }
                }
            }
            javatype = ((JavaType) (obj)).getContentType();
            Object obj2 = obj;
            if (javatype != null) {
                obj2 = obj;
                if (javatype.getValueHandler() == null) {
                    javatype = ((JavaType) (annotationintrospector.findContentDeserializer(annotated)));
                    obj2 = obj;
                    if (javatype != null) {
                        if (javatype instanceof JsonDeserializer) {
                            javatype = (JsonDeserializer)javatype;
                            javatype = null;
                        } else {
                            javatype = _verifyAsClass(javatype, "findContentDeserializer", com/fasterxml/jackson/databind/JsonDeserializer$None);
                            if (javatype != null)
                                javatype = deserializationcontext.deserializerInstance(annotated, javatype);
                            else
                                javatype = null;
                        }
                        obj2 = obj;
                        if (javatype != null)
                            obj2 = ((JavaType) (obj)).withContentValueHandler(javatype);
                    }
                }
            }
            javatype = annotationintrospector.refineDeserializationType(deserializationcontext.getConfig(), annotated, ((JavaType) (obj2)));
        }
        return javatype;
    }

    protected JsonDeserializer _createAndCache2(DeserializationContext deserializationcontext, DeserializerFactory deserializerfactory, JavaType javatype) {
        try {
            deserializerfactory = _createDeserializer(deserializationcontext, deserializerfactory, javatype);
        }
        // Misplaced declaration of an exception variable
        catch (DeserializerFactory deserializerfactory) {
            throw JsonMappingException.from(deserializationcontext, deserializerfactory.getMessage(), deserializerfactory);
        }
        if (deserializerfactory != null) goto _L2; else goto _L1
_L1:
        deserializationcontext = null;
_L4:
        return deserializationcontext;
_L2:
        boolean flag1 = deserializerfactory instanceof ResolvableDeserializer;
        boolean flag;
        if (!_hasCustomValueHandler(javatype) && deserializerfactory.isCachable())
            flag = true;
        else
            flag = false;
        if (flag1) {
            _incompleteDeserializers.put(javatype, deserializerfactory);
            ((ResolvableDeserializer)deserializerfactory).resolve(deserializationcontext);
            _incompleteDeserializers.remove(javatype);
        }
        deserializationcontext = deserializerfactory;
        if (flag) {
            _cachedDeserializers.put(javatype, deserializerfactory);
            deserializationcontext = deserializerfactory;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected JsonDeserializer _createAndCacheValueDeserializer(DeserializationContext deserializationcontext, DeserializerFactory deserializerfactory, JavaType javatype) {
        HashMap hashmap = _incompleteDeserializers;
        hashmap;
        JVM INSTR monitorenter ;
        JsonDeserializer jsondeserializer = _findCachedDeserializer(javatype);
        if (jsondeserializer == null) goto _L2; else goto _L1
_L1:
        hashmap;
        JVM INSTR monitorexit ;
        deserializationcontext = jsondeserializer;
_L4:
        return deserializationcontext;
_L2:
        int i = _incompleteDeserializers.size();
        if (i <= 0)
            break MISSING_BLOCK_LABEL_76;
        jsondeserializer = (JsonDeserializer)_incompleteDeserializers.get(javatype);
        if (jsondeserializer == null)
            break MISSING_BLOCK_LABEL_76;
        hashmap;
        JVM INSTR monitorexit ;
        deserializationcontext = jsondeserializer;
        continue; /* Loop/switch isn't completed */
        deserializationcontext;
        hashmap;
        JVM INSTR monitorexit ;
        throw deserializationcontext;
        deserializationcontext = _createAndCache2(deserializationcontext, deserializerfactory, javatype);
        if (i != 0)
            break MISSING_BLOCK_LABEL_106;
        if (_incompleteDeserializers.size() > 0)
            _incompleteDeserializers.clear();
        hashmap;
        JVM INSTR monitorexit ;
        if (true) goto _L4; else goto _L3
_L3:
        deserializationcontext;
        if (i != 0)
            break MISSING_BLOCK_LABEL_135;
        if (_incompleteDeserializers.size() > 0)
            _incompleteDeserializers.clear();
        throw deserializationcontext;
    }

    protected JsonDeserializer _createDeserializer(DeserializationContext deserializationcontext, DeserializerFactory deserializerfactory, JavaType javatype) {
        Object obj;
        DeserializationConfig deserializationconfig;
label0:
        {
            deserializationconfig = deserializationcontext.getConfig();
            if (!javatype.isAbstract() && !javatype.isMapLikeType()) {
                obj = javatype;
                if (!javatype.isCollectionLikeType())
                    break label0;
            }
            obj = deserializerfactory.mapAbstractType(deserializationconfig, javatype);
        }
        javatype = deserializationconfig.introspect(((JavaType) (obj)));
        JsonDeserializer jsondeserializer = findDeserializerFromAnnotation(deserializationcontext, javatype.getClassInfo());
        if (jsondeserializer != null) {
            deserializationcontext = jsondeserializer;
        } else {
            JavaType javatype2 = modifyTypeByAnnotation(deserializationcontext, javatype.getClassInfo(), ((JavaType) (obj)));
            JavaType javatype1 = ((JavaType) (obj));
            if (javatype2 != obj) {
                javatype = deserializationconfig.introspect(javatype2);
                javatype1 = javatype2;
            }
            obj = javatype.findPOJOBuilder();
            if (obj != null) {
                deserializationcontext = deserializerfactory.createBuilderBasedDeserializer(deserializationcontext, javatype1, javatype, ((Class) (obj)));
            } else {
                Converter converter = javatype.findDeserializationConverter();
                if (converter == null) {
                    deserializationcontext = _createDeserializer2(deserializationcontext, deserializerfactory, javatype1, javatype);
                } else {
                    JavaType javatype3 = converter.getInputType(deserializationcontext.getTypeFactory());
                    if (!javatype3.hasRawClass(javatype1.getRawClass()))
                        javatype = deserializationconfig.introspect(javatype3);
                    deserializationcontext = new StdDelegatingDeserializer(converter, javatype3, _createDeserializer2(deserializationcontext, deserializerfactory, javatype3, javatype));
                }
            }
        }
        return deserializationcontext;
    }

    protected JsonDeserializer _createDeserializer2(DeserializationContext deserializationcontext, DeserializerFactory deserializerfactory, JavaType javatype, BeanDescription beandescription) {
        DeserializationConfig deserializationconfig = deserializationcontext.getConfig();
        if (!javatype.isEnumType()) goto _L2; else goto _L1
_L1:
        deserializationcontext = deserializerfactory.createEnumDeserializer(deserializationcontext, javatype, beandescription);
_L4:
        return deserializationcontext;
_L2:
        if (javatype.isContainerType()) {
            if (javatype.isArrayType()) {
                deserializationcontext = deserializerfactory.createArrayDeserializer(deserializationcontext, (ArrayType)javatype, beandescription);
                continue; /* Loop/switch isn't completed */
            }
            if (javatype.isMapLikeType()) {
                javatype = (MapLikeType)javatype;
                if (javatype.isTrueMapType())
                    deserializationcontext = deserializerfactory.createMapDeserializer(deserializationcontext, (MapType)javatype, beandescription);
                else
                    deserializationcontext = deserializerfactory.createMapLikeDeserializer(deserializationcontext, javatype, beandescription);
                continue; /* Loop/switch isn't completed */
            }
            if (javatype.isCollectionLikeType()) {
                com.fasterxml.jackson.annotation.JsonFormat.Value value = beandescription.findExpectedFormat(null);
                if (value == null || value.getShape() != com.fasterxml.jackson.annotation.JsonFormat.Shape.OBJECT) {
                    javatype = (CollectionLikeType)javatype;
                    if (javatype.isTrueCollectionType())
                        deserializationcontext = deserializerfactory.createCollectionDeserializer(deserializationcontext, (CollectionType)javatype, beandescription);
                    else
                        deserializationcontext = deserializerfactory.createCollectionLikeDeserializer(deserializationcontext, javatype, beandescription);
                    continue; /* Loop/switch isn't completed */
                }
            }
        }
        if (javatype.isReferenceType())
            deserializationcontext = deserializerfactory.createReferenceDeserializer(deserializationcontext, (ReferenceType)javatype, beandescription);
        else
        if (com/fasterxml/jackson/databind/JsonNode.isAssignableFrom(javatype.getRawClass()))
            deserializationcontext = deserializerfactory.createTreeDeserializer(deserializationconfig, javatype, beandescription);
        else
            deserializationcontext = deserializerfactory.createBeanDeserializer(deserializationcontext, javatype, beandescription);
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected JsonDeserializer _findCachedDeserializer(JavaType javatype) {
        if (javatype == null)
            throw new IllegalArgumentException("Null JavaType passed");
        if (_hasCustomValueHandler(javatype))
            javatype = null;
        else
            javatype = (JsonDeserializer)_cachedDeserializers.get(javatype);
        return javatype;
    }

    protected KeyDeserializer _handleUnknownKeyDeserializer(DeserializationContext deserializationcontext, JavaType javatype) {
        throw JsonMappingException.from(deserializationcontext, (new StringBuilder()).append("Can not find a (Map) Key deserializer for type ").append(javatype).toString());
    }

    protected JsonDeserializer _handleUnknownValueDeserializer(DeserializationContext deserializationcontext, JavaType javatype) {
        if (!ClassUtil.isConcrete(javatype.getRawClass()))
            throw JsonMappingException.from(deserializationcontext, (new StringBuilder()).append("Can not find a Value deserializer for abstract type ").append(javatype).toString());
        else
            throw JsonMappingException.from(deserializationcontext, (new StringBuilder()).append("Can not find a Value deserializer for type ").append(javatype).toString());
    }

    public int cachedDeserializersCount() {
        return _cachedDeserializers.size();
    }

    protected Converter findConverter(DeserializationContext deserializationcontext, Annotated annotated) {
        Object obj = deserializationcontext.getAnnotationIntrospector().findDeserializationConverter(annotated);
        if (obj == null)
            deserializationcontext = null;
        else
            deserializationcontext = deserializationcontext.converterInstance(annotated, obj);
        return deserializationcontext;
    }

    protected JsonDeserializer findConvertingDeserializer(DeserializationContext deserializationcontext, Annotated annotated, JsonDeserializer jsondeserializer) {
        annotated = findConverter(deserializationcontext, annotated);
        if (annotated != null)
            jsondeserializer = new StdDelegatingDeserializer(annotated, annotated.getInputType(deserializationcontext.getTypeFactory()), jsondeserializer);
        return jsondeserializer;
    }

    protected JsonDeserializer findDeserializerFromAnnotation(DeserializationContext deserializationcontext, Annotated annotated) {
        Object obj = deserializationcontext.getAnnotationIntrospector().findDeserializer(annotated);
        if (obj == null)
            deserializationcontext = null;
        else
            deserializationcontext = findConvertingDeserializer(deserializationcontext, annotated, deserializationcontext.deserializerInstance(annotated, obj));
        return deserializationcontext;
    }

    public KeyDeserializer findKeyDeserializer(DeserializationContext deserializationcontext, DeserializerFactory deserializerfactory, JavaType javatype) {
        KeyDeserializer keydeserializer = deserializerfactory.createKeyDeserializer(deserializationcontext, javatype);
        if (keydeserializer != null) goto _L2; else goto _L1
_L1:
        deserializerfactory = _handleUnknownKeyDeserializer(deserializationcontext, javatype);
_L4:
        return deserializerfactory;
_L2:
        deserializerfactory = keydeserializer;
        if (keydeserializer instanceof ResolvableDeserializer) {
            ((ResolvableDeserializer)keydeserializer).resolve(deserializationcontext);
            deserializerfactory = keydeserializer;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public JsonDeserializer findValueDeserializer(DeserializationContext deserializationcontext, DeserializerFactory deserializerfactory, JavaType javatype) {
        JsonDeserializer jsondeserializer = _findCachedDeserializer(javatype);
        Object obj = jsondeserializer;
        if (jsondeserializer == null) {
            deserializerfactory = _createAndCacheValueDeserializer(deserializationcontext, deserializerfactory, javatype);
            obj = deserializerfactory;
            if (deserializerfactory == null)
                obj = _handleUnknownValueDeserializer(deserializationcontext, javatype);
        }
        return ((JsonDeserializer) (obj));
    }

    public void flushCachedDeserializers() {
        _cachedDeserializers.clear();
    }

    public boolean hasValueDeserializerFor(DeserializationContext deserializationcontext, DeserializerFactory deserializerfactory, JavaType javatype) {
        JsonDeserializer jsondeserializer1 = _findCachedDeserializer(javatype);
        JsonDeserializer jsondeserializer = jsondeserializer1;
        if (jsondeserializer1 == null)
            jsondeserializer = _createAndCacheValueDeserializer(deserializationcontext, deserializerfactory, javatype);
        boolean flag;
        if (jsondeserializer != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    Object writeReplace() {
        _incompleteDeserializers.clear();
        return this;
    }
}
