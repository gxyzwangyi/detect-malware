// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.ContextualDeserializer;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import java.util.Collection;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            ContainerDeserializerBase

public final class StringCollectionDeserializer extends ContainerDeserializerBase
    implements ContextualDeserializer {

    private static final long serialVersionUID = 1L;
    protected final JavaType _collectionType;
    protected final JsonDeserializer _delegateDeserializer;
    protected final Boolean _unwrapSingle;
    protected final JsonDeserializer _valueDeserializer;
    protected final ValueInstantiator _valueInstantiator;

    public StringCollectionDeserializer(JavaType javatype, JsonDeserializer jsondeserializer, ValueInstantiator valueinstantiator) {
        this(javatype, valueinstantiator, null, jsondeserializer, null);
    }

    protected StringCollectionDeserializer(JavaType javatype, ValueInstantiator valueinstantiator, JsonDeserializer jsondeserializer, JsonDeserializer jsondeserializer1, Boolean boolean1) {
        super(javatype);
        _collectionType = javatype;
        _valueDeserializer = jsondeserializer1;
        _valueInstantiator = valueinstantiator;
        _delegateDeserializer = jsondeserializer;
        _unwrapSingle = boolean1;
    }

    private Collection deserializeUsingCustom(JsonParser jsonparser, DeserializationContext deserializationcontext, Collection collection, JsonDeserializer jsondeserializer) {
        do {
            Object obj;
            if (jsonparser.nextTextValue() == null) {
                obj = jsonparser.getCurrentToken();
                if (obj == JsonToken.END_ARRAY)
                    return collection;
                if (obj == JsonToken.VALUE_NULL)
                    obj = (String)jsondeserializer.getNullValue(deserializationcontext);
                else
                    obj = (String)jsondeserializer.deserialize(jsonparser, deserializationcontext);
            } else {
                obj = (String)jsondeserializer.deserialize(jsonparser, deserializationcontext);
            }
            collection.add(obj);
        } while (true);
    }

    private final Collection handleNonArray(JsonParser jsonparser, DeserializationContext deserializationcontext, Collection collection) {
        boolean flag;
        if (_unwrapSingle == Boolean.TRUE || _unwrapSingle == null && deserializationcontext.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY))
            flag = true;
        else
            flag = false;
        if (!flag)
            throw deserializationcontext.mappingException(_collectionType.getRawClass());
        JsonDeserializer jsondeserializer = _valueDeserializer;
        if (jsonparser.getCurrentToken() == JsonToken.VALUE_NULL) {
            if (jsondeserializer == null)
                jsonparser = null;
            else
                jsonparser = (String)jsondeserializer.getNullValue(deserializationcontext);
        } else
        if (jsondeserializer == null)
            jsonparser = _parseString(jsonparser, deserializationcontext);
        else
            jsonparser = (String)jsondeserializer.deserialize(jsonparser, deserializationcontext);
        collection.add(jsonparser);
        return collection;
    }

    public JsonDeserializer createContextual(DeserializationContext deserializationcontext, BeanProperty beanproperty) {
        Object obj = null;
        JsonDeserializer jsondeserializer;
        JsonDeserializer jsondeserializer1;
        JavaType javatype;
        if (_valueInstantiator != null && _valueInstantiator.getDelegateCreator() != null)
            jsondeserializer1 = findDeserializer(deserializationcontext, _valueInstantiator.getDelegateType(deserializationcontext.getConfig()), beanproperty);
        else
            jsondeserializer1 = null;
        jsondeserializer = _valueDeserializer;
        javatype = _collectionType.getContentType();
        if (jsondeserializer == null) {
            JsonDeserializer jsondeserializer2 = findConvertingContentDeserializer(deserializationcontext, beanproperty, jsondeserializer);
            jsondeserializer = jsondeserializer2;
            if (jsondeserializer2 == null)
                jsondeserializer = deserializationcontext.findContextualValueDeserializer(javatype, beanproperty);
        } else {
            jsondeserializer = deserializationcontext.handleSecondaryContextualization(jsondeserializer, beanproperty, javatype);
        }
        deserializationcontext = findFormatFeature(deserializationcontext, beanproperty, java/util/Collection, com.fasterxml.jackson.annotation.JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
        if (isDefaultDeserializer(jsondeserializer))
            jsondeserializer = obj;
        return withResolved(jsondeserializer1, jsondeserializer, deserializationcontext);
    }

    public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        return deserialize(jsonparser, deserializationcontext);
    }

    public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj) {
        return deserialize(jsonparser, deserializationcontext, (Collection)obj);
    }

    public Collection deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (_delegateDeserializer != null)
            jsonparser = (Collection)_valueInstantiator.createUsingDelegate(deserializationcontext, _delegateDeserializer.deserialize(jsonparser, deserializationcontext));
        else
            jsonparser = deserialize(jsonparser, deserializationcontext, (Collection)_valueInstantiator.createUsingDefault(deserializationcontext));
        return jsonparser;
    }

    public Collection deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext, Collection collection) {
        if (jsonparser.isExpectedStartArrayToken()) goto _L2; else goto _L1
_L1:
        Object obj = handleNonArray(jsonparser, deserializationcontext, collection);
_L4:
        return ((Collection) (obj));
_L2:
        if (_valueDeserializer == null)
            break; /* Loop/switch isn't completed */
        obj = deserializeUsingCustom(jsonparser, deserializationcontext, collection, _valueDeserializer);
        if (true) goto _L4; else goto _L3
_L3:
        String s;
        try {
            s = jsonparser.nextTextValue();
        }
        // Misplaced declaration of an exception variable
        catch (JsonParser jsonparser) {
            throw JsonMappingException.wrapWithPath(jsonparser, collection, collection.size());
        }
        if (s == null)
            break MISSING_BLOCK_LABEL_78;
        collection.add(s);
          goto _L3
        JsonToken jsontoken = jsonparser.getCurrentToken();
        obj = collection;
        if (jsontoken == JsonToken.END_ARRAY) goto _L4; else goto _L5
_L5:
        obj = s;
        if (jsontoken != JsonToken.VALUE_NULL)
            obj = _parseString(jsonparser, deserializationcontext);
        collection.add(obj);
          goto _L3
    }

    public Object deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
        return typedeserializer.deserializeTypedFromArray(jsonparser, deserializationcontext);
    }

    public JsonDeserializer getContentDeserializer() {
        return _valueDeserializer;
    }

    public JavaType getContentType() {
        return _collectionType.getContentType();
    }

    public boolean isCachable() {
        boolean flag;
        if (_valueDeserializer == null && _delegateDeserializer == null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    protected StringCollectionDeserializer withResolved(JsonDeserializer jsondeserializer, JsonDeserializer jsondeserializer1, Boolean boolean1) {
        if (_unwrapSingle == boolean1 && _valueDeserializer == jsondeserializer1 && _delegateDeserializer == jsondeserializer)
            jsondeserializer = this;
        else
            jsondeserializer = new StringCollectionDeserializer(_collectionType, _valueInstantiator, jsondeserializer, jsondeserializer1, boolean1);
        return jsondeserializer;
    }
}
