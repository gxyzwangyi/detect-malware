// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser;

import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;

// Referenced classes of package com.fasterxml.jackson.databind.deser:
//            SettableBeanProperty

public abstract class ValueInstantiator {

    public ValueInstantiator() {
    }

    protected Object _createFromStringFallbacks(DeserializationContext deserializationcontext, String s) {
        if (!canCreateFromBoolean()) goto _L2; else goto _L1
_L1:
        String s1 = s.trim();
        if (!"true".equals(s1)) goto _L4; else goto _L3
_L3:
        deserializationcontext = ((DeserializationContext) (createFromBoolean(deserializationcontext, true)));
_L6:
        return deserializationcontext;
_L4:
        if ("false".equals(s1)) {
            deserializationcontext = ((DeserializationContext) (createFromBoolean(deserializationcontext, false)));
            continue; /* Loop/switch isn't completed */
        }
_L2:
        if (s.length() == 0 && deserializationcontext.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT))
            deserializationcontext = null;
        else
            throw deserializationcontext.mappingException("Can not instantiate value of type %s from String value ('%s'); no single-String constructor/factory method", new Object[] {
                getValueTypeDesc(), s
            });
        if (true) goto _L6; else goto _L5
_L5:
    }

    public boolean canCreateFromBoolean() {
        return false;
    }

    public boolean canCreateFromDouble() {
        return false;
    }

    public boolean canCreateFromInt() {
        return false;
    }

    public boolean canCreateFromLong() {
        return false;
    }

    public boolean canCreateFromObjectWith() {
        return false;
    }

    public boolean canCreateFromString() {
        return false;
    }

    public boolean canCreateUsingArrayDelegate() {
        return false;
    }

    public boolean canCreateUsingDefault() {
        boolean flag;
        if (getDefaultCreator() != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean canCreateUsingDelegate() {
        return false;
    }

    public boolean canInstantiate() {
        boolean flag;
        if (canCreateUsingDefault() || canCreateUsingDelegate() || canCreateFromObjectWith() || canCreateFromString() || canCreateFromInt() || canCreateFromLong() || canCreateFromDouble() || canCreateFromBoolean())
            flag = true;
        else
            flag = false;
        return flag;
    }

    public Object createFromBoolean(DeserializationContext deserializationcontext, boolean flag) {
        throw deserializationcontext.mappingException("Can not instantiate value of type %s from Boolean value (%s)", new Object[] {
            getValueTypeDesc(), Boolean.valueOf(flag)
        });
    }

    public Object createFromDouble(DeserializationContext deserializationcontext, double d) {
        throw deserializationcontext.mappingException("Can not instantiate value of type %s from Floating-point number (%s, double)", new Object[] {
            getValueTypeDesc(), Double.valueOf(d)
        });
    }

    public Object createFromInt(DeserializationContext deserializationcontext, int i) {
        throw deserializationcontext.mappingException("Can not instantiate value of type %s from Integer number (%s, int)", new Object[] {
            getValueTypeDesc(), Integer.valueOf(i)
        });
    }

    public Object createFromLong(DeserializationContext deserializationcontext, long l) {
        throw deserializationcontext.mappingException("Can not instantiate value of type %s from Integer number (%s, long)", new Object[] {
            getValueTypeDesc(), Long.valueOf(l)
        });
    }

    public Object createFromObjectWith(DeserializationContext deserializationcontext, Object aobj[]) {
        throw deserializationcontext.mappingException("Can not instantiate value of type %s with arguments", new Object[] {
            getValueTypeDesc()
        });
    }

    public Object createFromString(DeserializationContext deserializationcontext, String s) {
        return _createFromStringFallbacks(deserializationcontext, s);
    }

    public Object createUsingArrayDelegate(DeserializationContext deserializationcontext, Object obj) {
        throw deserializationcontext.mappingException("Can not instantiate value of type %s using delegate", new Object[] {
            getValueTypeDesc()
        });
    }

    public Object createUsingDefault(DeserializationContext deserializationcontext) {
        throw deserializationcontext.mappingException("Can not instantiate value of type %s; no default creator found", new Object[] {
            getValueTypeDesc()
        });
    }

    public Object createUsingDelegate(DeserializationContext deserializationcontext, Object obj) {
        throw deserializationcontext.mappingException("Can not instantiate value of type %s using delegate", new Object[] {
            getValueTypeDesc()
        });
    }

    public AnnotatedWithParams getArrayDelegateCreator() {
        return null;
    }

    public JavaType getArrayDelegateType(DeserializationConfig deserializationconfig) {
        return null;
    }

    public AnnotatedWithParams getDefaultCreator() {
        return null;
    }

    public AnnotatedWithParams getDelegateCreator() {
        return null;
    }

    public JavaType getDelegateType(DeserializationConfig deserializationconfig) {
        return null;
    }

    public SettableBeanProperty[] getFromObjectArguments(DeserializationConfig deserializationconfig) {
        return null;
    }

    public AnnotatedParameter getIncompleteParameter() {
        return null;
    }

    public abstract String getValueTypeDesc();

    public AnnotatedWithParams getWithArgsCreator() {
        return null;
    }
}
