// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.impl;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.io.IOException;
import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.util.*;

public class BeanPropertyMap
    implements Serializable, Iterable {

    private static final long serialVersionUID = 2L;
    protected final boolean _caseInsensitive;
    private Object _hashArea[];
    private int _hashMask;
    private SettableBeanProperty _propsInOrder[];
    private int _size;
    private int _spillCount;

    public BeanPropertyMap(boolean flag, Collection collection) {
        _caseInsensitive = flag;
        _propsInOrder = (SettableBeanProperty[])collection.toArray(new SettableBeanProperty[collection.size()]);
        init(collection);
    }

    private final SettableBeanProperty _find2(String s, int i, Object obj) {
        Object obj1 = null;
        if (obj != null) goto _L2; else goto _L1
_L1:
        obj = obj1;
_L4:
        return ((SettableBeanProperty) (obj));
_L2:
        int j;
        int k;
        j = _hashMask + 1;
        i = (i >> 1) + j << 1;
        Object obj2 = _hashArea[i];
        if (s.equals(obj2)) {
            obj = (SettableBeanProperty)_hashArea[i + 1];
            continue; /* Loop/switch isn't completed */
        }
        obj = obj1;
        if (obj2 == null)
            continue; /* Loop/switch isn't completed */
        j = j + (j >> 1) << 1;
        k = _spillCount;
        i = j;
_L5:
        obj = obj1;
        if (i < k + j) {
label0:
            {
                obj = _hashArea[i];
                if (obj != s && !s.equals(obj))
                    break label0;
                obj = (SettableBeanProperty)_hashArea[i + 1];
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
        i += 2;
          goto _L5
        if (true) goto _L4; else goto _L6
_L6:
    }

    private final int _findFromOrdered(SettableBeanProperty settablebeanproperty) {
        int i = 0;
        for (int j = _propsInOrder.length; i < j; i++)
            if (_propsInOrder[i] == settablebeanproperty)
                return i;

        throw new IllegalStateException((new StringBuilder()).append("Illegal state: property '").append(settablebeanproperty.getName()).append("' missing from _propsInOrder").toString());
    }

    private final int _findIndexInHash(String s) {
        int i;
        int j;
        i = _hashCode(s);
        j = i << 1;
        if (!s.equals(_hashArea[j])) goto _L2; else goto _L1
_L1:
        i = j + 1;
_L4:
        return i;
_L2:
        int k = _hashMask + 1;
        i = (i >> 1) + k << 1;
        if (s.equals(_hashArea[i])) {
            i++;
            continue; /* Loop/switch isn't completed */
        }
        k = (k >> 1) + k << 1;
        int l = _spillCount;
        i = k;
        do {
            if (i >= l + k)
                break;
            if (s.equals(_hashArea[i])) {
                i++;
                continue; /* Loop/switch isn't completed */
            }
            i += 2;
        } while (true);
        i = -1;
        if (true) goto _L4; else goto _L3
_L3:
    }

    private final int _hashCode(String s) {
        return s.hashCode() & _hashMask;
    }

    public static BeanPropertyMap construct(Collection collection, boolean flag) {
        return new BeanPropertyMap(flag, collection);
    }

    private static final int findSize(int i) {
        if (i > 5) goto _L2; else goto _L1
_L1:
        byte byte0 = 8;
_L4:
        return byte0;
_L2:
        if (i > 12)
            break; /* Loop/switch isn't completed */
        byte0 = 16;
        if (true) goto _L4; else goto _L3
_L3:
        int j = 32;
        do {
            byte0 = j;
            if (j >= i + (i >> 2))
                continue;
            j += j;
        } while (true);
        if (true) goto _L4; else goto _L5
_L5:
    }

    private List properties() {
        ArrayList arraylist = new ArrayList(_size);
        int j = _hashArea.length;
        for (int i = 1; i < j; i += 2) {
            SettableBeanProperty settablebeanproperty = (SettableBeanProperty)_hashArea[i];
            if (settablebeanproperty != null)
                arraylist.add(settablebeanproperty);
        }

        return arraylist;
    }

    protected SettableBeanProperty _rename(SettableBeanProperty settablebeanproperty, NameTransformer nametransformer) {
        if (settablebeanproperty != null) goto _L2; else goto _L1
_L1:
        return settablebeanproperty;
_L2:
        SettableBeanProperty settablebeanproperty1 = settablebeanproperty.withSimpleName(nametransformer.transform(settablebeanproperty.getName()));
        JsonDeserializer jsondeserializer = settablebeanproperty1.getValueDeserializer();
        settablebeanproperty = settablebeanproperty1;
        if (jsondeserializer != null) {
            nametransformer = jsondeserializer.unwrappingDeserializer(nametransformer);
            settablebeanproperty = settablebeanproperty1;
            if (nametransformer != jsondeserializer)
                settablebeanproperty = settablebeanproperty1.withValueDeserializer(nametransformer);
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    public BeanPropertyMap assignIndexes() {
        int i = 0;
        int k = _hashArea.length;
        for (int j = 1; j < k; j += 2) {
            SettableBeanProperty settablebeanproperty = (SettableBeanProperty)_hashArea[j];
            if (settablebeanproperty != null) {
                settablebeanproperty.assignIndex(i);
                i++;
            }
        }

        return this;
    }

    public SettableBeanProperty find(int i) {
        int j;
        int k;
        k = _hashArea.length;
        j = 1;
_L3:
        SettableBeanProperty settablebeanproperty;
        if (j >= k)
            break MISSING_BLOCK_LABEL_47;
        settablebeanproperty = (SettableBeanProperty)_hashArea[j];
        if (settablebeanproperty == null || i != settablebeanproperty.getPropertyIndex()) goto _L2; else goto _L1
_L1:
        return settablebeanproperty;
_L2:
        j += 2;
          goto _L3
        settablebeanproperty = null;
          goto _L1
    }

    public SettableBeanProperty find(String s) {
        if (s == null)
            throw new IllegalArgumentException("Can not pass null property name");
        String s1 = s;
        if (_caseInsensitive)
            s1 = s.toLowerCase();
        int i = s1.hashCode() & _hashMask;
        int j = i << 1;
        s = ((String) (_hashArea[j]));
        if (s == s1 || s1.equals(s))
            s = (SettableBeanProperty)_hashArea[j + 1];
        else
            s = _find2(s1, i, s);
        return s;
    }

    public boolean findDeserializeAndSet(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj, String s) {
        SettableBeanProperty settablebeanproperty = find(s);
        boolean flag;
        if (settablebeanproperty == null) {
            flag = false;
        } else {
            try {
                settablebeanproperty.deserializeAndSet(jsonparser, deserializationcontext, obj);
            }
            // Misplaced declaration of an exception variable
            catch (JsonParser jsonparser) {
                wrapAndThrow(jsonparser, obj, s, deserializationcontext);
            }
            flag = true;
        }
        return flag;
    }

    public SettableBeanProperty[] getPropertiesInInsertionOrder() {
        return _propsInOrder;
    }

    protected final String getPropertyName(SettableBeanProperty settablebeanproperty) {
        if (_caseInsensitive)
            settablebeanproperty = settablebeanproperty.getName().toLowerCase();
        else
            settablebeanproperty = settablebeanproperty.getName();
        return settablebeanproperty;
    }

    protected void init(Collection collection) {
        _size = collection.size();
        int k1 = findSize(_size);
        _hashMask = k1 - 1;
        Object aobj[] = new Object[((k1 >> 1) + k1) * 2];
        Iterator iterator1 = collection.iterator();
        collection = ((Collection) (aobj));
        int k = 0;
        do {
            if (!iterator1.hasNext())
                break;
            SettableBeanProperty settablebeanproperty = (SettableBeanProperty)iterator1.next();
            if (settablebeanproperty != null) {
                String s = getPropertyName(settablebeanproperty);
                int l1 = _hashCode(s);
                int l = l1 << 1;
                int j = k;
                Object obj = collection;
                int i = l;
                if (collection[l] != null) {
                    int i1 = (l1 >> 1) + k1 << 1;
                    j = k;
                    obj = collection;
                    i = i1;
                    if (collection[i1] != null) {
                        int j1 = ((k1 >> 1) + k1 << 1) + k;
                        j = k += 2;
                        obj = collection;
                        i = j1;
                        if (j1 >= collection.length) {
                            obj = ((Object) (Arrays.copyOf(collection, collection.length + 4)));
                            i = j1;
                            j = k;
                        }
                    }
                }
                obj[i] = s;
                obj[i + 1] = settablebeanproperty;
                k = j;
                collection = ((Collection) (obj));
            }
        } while (true);
        _hashArea = collection;
        _spillCount = k;
    }

    public Iterator iterator() {
        return properties().iterator();
    }

    public void remove(SettableBeanProperty settablebeanproperty) {
        int i;
        int j;
        boolean flag1;
        ArrayList arraylist;
        String s;
        arraylist = new ArrayList(_size);
        s = getPropertyName(settablebeanproperty);
        flag1 = false;
        j = _hashArea.length;
        i = 1;
_L2:
        boolean flag;
        SettableBeanProperty settablebeanproperty1;
        if (i >= j)
            break MISSING_BLOCK_LABEL_126;
        settablebeanproperty1 = (SettableBeanProperty)_hashArea[i];
        if (settablebeanproperty1 != null)
            break; /* Loop/switch isn't completed */
        flag = flag1;
_L3:
        i += 2;
        flag1 = flag;
        if (true) goto _L2; else goto _L1
_L1:
label0:
        {
            flag = flag1;
            if (flag1)
                break label0;
            flag1 = s.equals(settablebeanproperty1.getName());
            flag = flag1;
            if (!flag1)
                break label0;
            _propsInOrder[_findFromOrdered(settablebeanproperty1)] = null;
            flag = flag1;
        }
          goto _L3
        arraylist.add(settablebeanproperty1);
          goto _L3
        if (!flag1) {
            throw new NoSuchElementException((new StringBuilder()).append("No entry '").append(settablebeanproperty.getName()).append("' found, can't remove").toString());
        } else {
            init(arraylist);
            return;
        }
    }

    public BeanPropertyMap renameAll(NameTransformer nametransformer) {
        Object obj = this;
        if (nametransformer != null)
            if (nametransformer == NameTransformer.NOP) {
                obj = this;
            } else {
                int j = _propsInOrder.length;
                ArrayList arraylist = new ArrayList(j);
                int i = 0;
                while (i < j)  {
                    obj = _propsInOrder[i];
                    if (obj == null)
                        arraylist.add(obj);
                    else
                        arraylist.add(_rename(((SettableBeanProperty) (obj)), nametransformer));
                    i++;
                }
                obj = new BeanPropertyMap(_caseInsensitive, arraylist);
            }
        return ((BeanPropertyMap) (obj));
    }

    public void replace(SettableBeanProperty settablebeanproperty) {
        Object obj = getPropertyName(settablebeanproperty);
        int i = _findIndexInHash(((String) (obj)));
        if (i >= 0) {
            obj = (SettableBeanProperty)_hashArea[i];
            _hashArea[i] = settablebeanproperty;
            _propsInOrder[_findFromOrdered(((SettableBeanProperty) (obj)))] = settablebeanproperty;
            return;
        } else {
            throw new NoSuchElementException((new StringBuilder()).append("No entry '").append(((String) (obj))).append("' found, can't replace").toString());
        }
    }

    public int size() {
        return _size;
    }

    public String toString() {
        StringBuilder stringbuilder = new StringBuilder();
        stringbuilder.append("Properties=[");
        Iterator iterator1 = iterator();
        for (int i = 0; iterator1.hasNext(); i++) {
            SettableBeanProperty settablebeanproperty = (SettableBeanProperty)iterator1.next();
            if (i > 0)
                stringbuilder.append(", ");
            stringbuilder.append(settablebeanproperty.getName());
            stringbuilder.append('(');
            stringbuilder.append(settablebeanproperty.getType());
            stringbuilder.append(')');
        }

        stringbuilder.append(']');
        return stringbuilder.toString();
    }

    public BeanPropertyMap withProperty(SettableBeanProperty settablebeanproperty) {
        int i;
        int k;
        String s;
        s = getPropertyName(settablebeanproperty);
        k = _hashArea.length;
        i = 1;
_L3:
        SettableBeanProperty settablebeanproperty1;
        if (i >= k)
            break MISSING_BLOCK_LABEL_76;
        settablebeanproperty1 = (SettableBeanProperty)_hashArea[i];
        if (settablebeanproperty1 == null || !settablebeanproperty1.getName().equals(s)) goto _L2; else goto _L1
_L1:
        _hashArea[i] = settablebeanproperty;
        _propsInOrder[_findFromOrdered(settablebeanproperty1)] = settablebeanproperty;
_L4:
        return this;
_L2:
        i += 2;
          goto _L3
        int l1 = _hashCode(s);
        int k1 = _hashMask + 1;
        int l = l1 << 1;
        int j = l;
        if (_hashArea[l] != null) {
            int i1 = (l1 >> 1) + k1 << 1;
            j = i1;
            if (_hashArea[i1] != null) {
                int j1 = ((k1 >> 1) + k1 << 1) + _spillCount;
                _spillCount = _spillCount + 2;
                j = j1;
                if (j1 >= _hashArea.length) {
                    _hashArea = Arrays.copyOf(_hashArea, _hashArea.length + 4);
                    j = j1;
                }
            }
        }
        _hashArea[j] = s;
        _hashArea[j + 1] = settablebeanproperty;
        j = _propsInOrder.length;
        _propsInOrder = (SettableBeanProperty[])Arrays.copyOf(_propsInOrder, j + 1);
        _propsInOrder[j] = settablebeanproperty;
          goto _L4
    }

    protected void wrapAndThrow(Throwable throwable, Object obj, String s, DeserializationContext deserializationcontext) {
        for (; (throwable instanceof InvocationTargetException) && throwable.getCause() != null; throwable = throwable.getCause());
        if (throwable instanceof Error)
            throw (Error)throwable;
        boolean flag;
        if (deserializationcontext == null || deserializationcontext.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS))
            flag = true;
        else
            flag = false;
        if (throwable instanceof IOException) {
            if (!flag || !(throwable instanceof JsonProcessingException))
                throw (IOException)throwable;
        } else
        if (!flag && (throwable instanceof RuntimeException))
            throw (RuntimeException)throwable;
        throw JsonMappingException.wrapWithPath(throwable, obj, s);
    }
}
