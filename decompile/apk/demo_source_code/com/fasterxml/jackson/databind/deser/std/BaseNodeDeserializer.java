// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.node.*;
import com.fasterxml.jackson.databind.util.RawValue;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            StdDeserializer

abstract class BaseNodeDeserializer extends StdDeserializer {

    public BaseNodeDeserializer(Class class1) {
        super(class1);
    }

    protected final JsonNode _fromEmbedded(JsonParser jsonparser, DeserializationContext deserializationcontext, JsonNodeFactory jsonnodefactory) {
        jsonparser = ((JsonParser) (jsonparser.getEmbeddedObject()));
        if (jsonparser == null)
            jsonparser = jsonnodefactory.nullNode();
        else
        if (jsonparser.getClass() == [B)
            jsonparser = jsonnodefactory.binaryNode((byte[])(byte[])jsonparser);
        else
        if (jsonparser instanceof RawValue)
            jsonparser = jsonnodefactory.rawValueNode((RawValue)jsonparser);
        else
        if (jsonparser instanceof JsonNode)
            jsonparser = (JsonNode)jsonparser;
        else
            jsonparser = jsonnodefactory.pojoNode(jsonparser);
        return jsonparser;
    }

    protected final JsonNode _fromFloat(JsonParser jsonparser, DeserializationContext deserializationcontext, JsonNodeFactory jsonnodefactory) {
        if (jsonparser.getNumberType() == com.fasterxml.jackson.core.JsonParser.NumberType.BIG_DECIMAL || deserializationcontext.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS))
            jsonparser = jsonnodefactory.numberNode(jsonparser.getDecimalValue());
        else
            jsonparser = jsonnodefactory.numberNode(jsonparser.getDoubleValue());
        return jsonparser;
    }

    protected final JsonNode _fromInt(JsonParser jsonparser, DeserializationContext deserializationcontext, JsonNodeFactory jsonnodefactory) {
        int i = deserializationcontext.getDeserializationFeatures();
        if ((F_MASK_INT_COERCIONS & i) != 0) {
            if (DeserializationFeature.USE_BIG_INTEGER_FOR_INTS.enabledIn(i))
                deserializationcontext = com.fasterxml.jackson.core.JsonParser.NumberType.BIG_INTEGER;
            else
            if (DeserializationFeature.USE_LONG_FOR_INTS.enabledIn(i))
                deserializationcontext = com.fasterxml.jackson.core.JsonParser.NumberType.LONG;
            else
                deserializationcontext = jsonparser.getNumberType();
        } else {
            deserializationcontext = jsonparser.getNumberType();
        }
        if (deserializationcontext == com.fasterxml.jackson.core.JsonParser.NumberType.INT)
            jsonparser = jsonnodefactory.numberNode(jsonparser.getIntValue());
        else
        if (deserializationcontext == com.fasterxml.jackson.core.JsonParser.NumberType.LONG)
            jsonparser = jsonnodefactory.numberNode(jsonparser.getLongValue());
        else
            jsonparser = jsonnodefactory.numberNode(jsonparser.getBigIntegerValue());
        return jsonparser;
    }

    protected void _handleDuplicateField(JsonParser jsonparser, DeserializationContext deserializationcontext, JsonNodeFactory jsonnodefactory, String s, ObjectNode objectnode, JsonNode jsonnode, JsonNode jsonnode1) {
        if (deserializationcontext.isEnabled(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY))
            _reportProblem(jsonparser, (new StringBuilder()).append("Duplicate field '").append(s).append("' for ObjectNode: not allowed when FAIL_ON_READING_DUP_TREE_KEY enabled").toString());
    }

    protected void _reportProblem(JsonParser jsonparser, String s) {
        throw JsonMappingException.from(jsonparser, s);
    }

    protected final JsonNode deserializeAny(JsonParser jsonparser, DeserializationContext deserializationcontext, JsonNodeFactory jsonnodefactory) {
        jsonparser.getCurrentTokenId();
        JVM INSTR tableswitch 1 12: default 68
    //                   1 77
    //                   2 77
    //                   3 87
    //                   4 68
    //                   5 77
    //                   6 109
    //                   7 121
    //                   8 132
    //                   9 143
    //                   10 152
    //                   11 161
    //                   12 98;
           goto _L1 _L2 _L2 _L3 _L1 _L2 _L4 _L5 _L6 _L7 _L8 _L9 _L10
_L1:
        throw deserializationcontext.mappingException(handledType());
_L2:
        jsonparser = deserializeObject(jsonparser, deserializationcontext, jsonnodefactory);
_L12:
        return jsonparser;
_L3:
        jsonparser = deserializeArray(jsonparser, deserializationcontext, jsonnodefactory);
        continue; /* Loop/switch isn't completed */
_L10:
        jsonparser = _fromEmbedded(jsonparser, deserializationcontext, jsonnodefactory);
        continue; /* Loop/switch isn't completed */
_L4:
        jsonparser = jsonnodefactory.textNode(jsonparser.getText());
        continue; /* Loop/switch isn't completed */
_L5:
        jsonparser = _fromInt(jsonparser, deserializationcontext, jsonnodefactory);
        continue; /* Loop/switch isn't completed */
_L6:
        jsonparser = _fromFloat(jsonparser, deserializationcontext, jsonnodefactory);
        continue; /* Loop/switch isn't completed */
_L7:
        jsonparser = jsonnodefactory.booleanNode(true);
        continue; /* Loop/switch isn't completed */
_L8:
        jsonparser = jsonnodefactory.booleanNode(false);
        continue; /* Loop/switch isn't completed */
_L9:
        jsonparser = jsonnodefactory.nullNode();
        if (true) goto _L12; else goto _L11
_L11:
    }

    protected final ArrayNode deserializeArray(JsonParser jsonparser, DeserializationContext deserializationcontext, JsonNodeFactory jsonnodefactory) {
        ArrayNode arraynode = jsonnodefactory.arrayNode();
        do {
            JsonToken jsontoken = jsonparser.nextToken();
            if (jsontoken == null)
                throw deserializationcontext.mappingException("Unexpected end-of-input when binding data into ArrayNode");
            switch (jsontoken.id()) {
            case 2: // '\002'
            case 5: // '\005'
            case 8: // '\b'
            default:
                arraynode.add(deserializeAny(jsonparser, deserializationcontext, jsonnodefactory));
                break;

            case 1: // '\001'
                arraynode.add(deserializeObject(jsonparser, deserializationcontext, jsonnodefactory));
                break;

            case 3: // '\003'
                arraynode.add(deserializeArray(jsonparser, deserializationcontext, jsonnodefactory));
                break;

            case 12: // '\f'
                arraynode.add(_fromEmbedded(jsonparser, deserializationcontext, jsonnodefactory));
                break;

            case 6: // '\006'
                arraynode.add(jsonnodefactory.textNode(jsonparser.getText()));
                break;

            case 7: // '\007'
                arraynode.add(_fromInt(jsonparser, deserializationcontext, jsonnodefactory));
                break;

            case 9: // '\t'
                arraynode.add(jsonnodefactory.booleanNode(true));
                break;

            case 10: // '\n'
                arraynode.add(jsonnodefactory.booleanNode(false));
                break;

            case 11: // '\013'
                arraynode.add(jsonnodefactory.nullNode());
                break;

            case 4: // '\004'
                return arraynode;
            }
        } while (true);
    }

    protected final ObjectNode deserializeObject(JsonParser jsonparser, DeserializationContext deserializationcontext, JsonNodeFactory jsonnodefactory) {
        ObjectNode objectnode = jsonnodefactory.objectNode();
        if (!jsonparser.isExpectedStartObjectToken()) goto _L2; else goto _L1
_L1:
        String s = jsonparser.nextFieldName();
_L17:
        if (s == null) goto _L4; else goto _L3
_L3:
        Object obj;
        obj = jsonparser.nextToken();
        if (obj == null)
            throw deserializationcontext.mappingException("Unexpected end-of-input when binding data into ObjectNode");
          goto _L5
_L2:
        obj = jsonparser.getCurrentToken();
        if (obj != JsonToken.END_OBJECT) goto _L6; else goto _L4
_L4:
        return objectnode;
_L6:
        if (obj != JsonToken.FIELD_NAME)
            throw deserializationcontext.mappingException(handledType(), jsonparser.getCurrentToken());
        s = jsonparser.getCurrentName();
        continue; /* Loop/switch isn't completed */
_L5:
        ((JsonToken) (obj)).id();
        JVM INSTR tableswitch 1 12: default 156
    //                   1 205
    //                   2 156
    //                   3 217
    //                   4 156
    //                   5 156
    //                   6 241
    //                   7 254
    //                   8 156
    //                   9 266
    //                   10 276
    //                   11 286
    //                   12 229;
           goto _L7 _L8 _L7 _L9 _L7 _L7 _L10 _L11 _L7 _L12 _L13 _L14 _L15
_L14:
        break MISSING_BLOCK_LABEL_286;
_L8:
        break; /* Loop/switch isn't completed */
_L7:
        obj = deserializeAny(jsonparser, deserializationcontext, jsonnodefactory);
_L18:
        JsonNode jsonnode = objectnode.replace(s, ((JsonNode) (obj)));
        if (jsonnode != null)
            _handleDuplicateField(jsonparser, deserializationcontext, jsonnodefactory, s, objectnode, jsonnode, ((JsonNode) (obj)));
        s = jsonparser.nextFieldName();
        if (true) goto _L17; else goto _L16
_L16:
        obj = deserializeObject(jsonparser, deserializationcontext, jsonnodefactory);
          goto _L18
_L9:
        obj = deserializeArray(jsonparser, deserializationcontext, jsonnodefactory);
          goto _L18
_L15:
        obj = _fromEmbedded(jsonparser, deserializationcontext, jsonnodefactory);
          goto _L18
_L10:
        obj = jsonnodefactory.textNode(jsonparser.getText());
          goto _L18
_L11:
        obj = _fromInt(jsonparser, deserializationcontext, jsonnodefactory);
          goto _L18
_L12:
        obj = jsonnodefactory.booleanNode(true);
          goto _L18
_L13:
        obj = jsonnodefactory.booleanNode(false);
          goto _L18
        obj = jsonnodefactory.nullNode();
          goto _L18
    }

    public Object deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
        return typedeserializer.deserializeTypedFromAny(jsonparser, deserializationcontext);
    }

    public boolean isCachable() {
        return true;
    }
}
