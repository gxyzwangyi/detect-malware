// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.impl.BeanAsArrayBuilderDeserializer;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator;
import com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer;
import com.fasterxml.jackson.databind.deser.impl.UnwrappedPropertyHandler;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.util.NameTransformer;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import java.lang.reflect.Method;
import java.util.HashSet;
import java.util.Map;

// Referenced classes of package com.fasterxml.jackson.databind.deser:
//            BeanDeserializerBase, BeanDeserializerBuilder, ValueInstantiator, SettableBeanProperty, 
//            SettableAnyProperty

public class BuilderBasedDeserializer extends BeanDeserializerBase {

    private static final long serialVersionUID = 1L;
    protected final AnnotatedMethod _buildMethod;

    public BuilderBasedDeserializer(BeanDeserializerBuilder beandeserializerbuilder, BeanDescription beandescription, BeanPropertyMap beanpropertymap, Map map, HashSet hashset, boolean flag, boolean flag1) {
        super(beandeserializerbuilder, beandescription, beanpropertymap, map, hashset, flag, flag1);
        _buildMethod = beandeserializerbuilder.getBuildMethod();
        if (_objectIdReader != null)
            throw new IllegalArgumentException((new StringBuilder()).append("Can not use Object Id with Builder-based deserialization (type ").append(beandescription.getType()).append(")").toString());
        else
            return;
    }

    protected BuilderBasedDeserializer(BuilderBasedDeserializer builderbaseddeserializer) {
        this(builderbaseddeserializer, builderbaseddeserializer._ignoreAllUnknown);
    }

    public BuilderBasedDeserializer(BuilderBasedDeserializer builderbaseddeserializer, ObjectIdReader objectidreader) {
        super(builderbaseddeserializer, objectidreader);
        _buildMethod = builderbaseddeserializer._buildMethod;
    }

    protected BuilderBasedDeserializer(BuilderBasedDeserializer builderbaseddeserializer, NameTransformer nametransformer) {
        super(builderbaseddeserializer, nametransformer);
        _buildMethod = builderbaseddeserializer._buildMethod;
    }

    public BuilderBasedDeserializer(BuilderBasedDeserializer builderbaseddeserializer, HashSet hashset) {
        super(builderbaseddeserializer, hashset);
        _buildMethod = builderbaseddeserializer._buildMethod;
    }

    protected BuilderBasedDeserializer(BuilderBasedDeserializer builderbaseddeserializer, boolean flag) {
        super(builderbaseddeserializer, flag);
        _buildMethod = builderbaseddeserializer._buildMethod;
    }

    private final Object vanillaDeserialize(JsonParser jsonparser, DeserializationContext deserializationcontext, JsonToken jsontoken) {
        jsontoken = ((JsonToken) (_valueInstantiator.createUsingDefault(deserializationcontext)));
_L2:
        Object obj;
        String s;
        if (jsonparser.getCurrentToken() == JsonToken.END_OBJECT)
            break MISSING_BLOCK_LABEL_94;
        s = jsonparser.getCurrentName();
        jsonparser.nextToken();
        obj = _beanProperties.find(s);
        if (obj == null)
            break; /* Loop/switch isn't completed */
        obj = ((SettableBeanProperty) (obj)).deserializeSetAndReturn(jsonparser, deserializationcontext, jsontoken);
        jsontoken = ((JsonToken) (obj));
_L3:
        jsonparser.nextToken();
        if (true) goto _L2; else goto _L1
        Exception exception;
        exception;
        wrapAndThrow(exception, jsontoken, s, deserializationcontext);
          goto _L3
_L1:
        handleUnknownVanilla(jsonparser, deserializationcontext, jsontoken, s);
          goto _L3
        return jsontoken;
    }

    protected final Object _deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj) {
        if (_injectables != null)
            injectValues(deserializationcontext, obj);
        if (_unwrappedPropertyHandler == null) goto _L2; else goto _L1
_L1:
        obj = deserializeWithUnwrapped(jsonparser, deserializationcontext, obj);
_L4:
        return obj;
_L2:
        if (_externalTypeIdHandler != null) {
            obj = deserializeWithExternalTypeId(jsonparser, deserializationcontext, obj);
            continue; /* Loop/switch isn't completed */
        }
        if (!_needViewProcesing)
            break; /* Loop/switch isn't completed */
        Class class1 = deserializationcontext.getActiveView();
        if (class1 == null)
            break; /* Loop/switch isn't completed */
        obj = deserializeWithView(jsonparser, deserializationcontext, obj, class1);
        if (true) goto _L4; else goto _L3
_L3:
        Object obj1;
        Object obj2;
        JsonToken jsontoken = jsonparser.getCurrentToken();
        obj2 = jsontoken;
        obj1 = obj;
        if (jsontoken == JsonToken.START_OBJECT) {
            obj2 = jsonparser.nextToken();
            obj1 = obj;
        }
_L6:
        obj = obj1;
        if (obj2 != JsonToken.FIELD_NAME) goto _L4; else goto _L5
_L5:
        obj2 = jsonparser.getCurrentName();
        jsonparser.nextToken();
        obj = _beanProperties.find(((String) (obj2)));
        if (obj == null)
            break MISSING_BLOCK_LABEL_180;
        obj = ((SettableBeanProperty) (obj)).deserializeSetAndReturn(jsonparser, deserializationcontext, obj1);
        obj1 = obj;
_L7:
        obj2 = jsonparser.nextToken();
          goto _L6
        obj;
        wrapAndThrow(((Throwable) (obj)), obj1, ((String) (obj2)), deserializationcontext);
          goto _L7
        handleUnknownVanilla(jsonparser, deserializationcontext, handledType(), ((String) (obj2)));
          goto _L7
    }

    protected final Object _deserializeUsingPropertyBased(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        Object obj;
        Object obj1;
        Object obj2;
        PropertyValueBuffer propertyvaluebuffer;
        PropertyBasedCreator propertybasedcreator;
        obj2 = null;
        propertybasedcreator = _propertyBasedCreator;
        propertyvaluebuffer = propertybasedcreator.startBuilding(jsonparser, deserializationcontext, _objectIdReader);
        obj1 = jsonparser.getCurrentToken();
        obj = null;
_L7:
        if (obj1 != JsonToken.FIELD_NAME) goto _L2; else goto _L1
_L1:
        Object obj3;
        SettableBeanProperty settablebeanproperty;
        obj3 = jsonparser.getCurrentName();
        jsonparser.nextToken();
        settablebeanproperty = propertybasedcreator.findCreatorProperty(((String) (obj3)));
        if (settablebeanproperty == null) goto _L4; else goto _L3
_L3:
        obj1 = obj;
        if (!propertyvaluebuffer.assignParameter(settablebeanproperty, settablebeanproperty.deserialize(jsonparser, deserializationcontext)))
            break MISSING_BLOCK_LABEL_146;
        jsonparser.nextToken();
        obj1 = propertybasedcreator.build(deserializationcontext, propertyvaluebuffer);
        if (obj1.getClass() != _beanType.getRawClass()) {
            jsonparser = ((JsonParser) (handlePolymorphic(jsonparser, deserializationcontext, obj1, ((TokenBuffer) (obj)))));
        } else {
            if (obj != null)
                obj = handleUnknownProperties(deserializationcontext, obj1, ((TokenBuffer) (obj)));
            else
                obj = obj1;
            jsonparser = ((JsonParser) (_deserialize(jsonparser, deserializationcontext, obj)));
        }
        return jsonparser;
        obj1;
        wrapAndThrow(((Throwable) (obj1)), _beanType.getRawClass(), ((String) (obj3)), deserializationcontext);
        obj1 = obj;
_L5:
        obj3 = jsonparser.nextToken();
        obj = obj1;
        obj1 = obj3;
        continue; /* Loop/switch isn't completed */
_L4:
        obj1 = obj;
        if (!propertyvaluebuffer.readIdProperty(((String) (obj3)))) {
            obj1 = _beanProperties.find(((String) (obj3)));
            if (obj1 != null) {
                propertyvaluebuffer.bufferProperty(((SettableBeanProperty) (obj1)), ((SettableBeanProperty) (obj1)).deserialize(jsonparser, deserializationcontext));
                obj1 = obj;
            } else
            if (_ignorableProps != null && _ignorableProps.contains(obj3)) {
                handleIgnoredProperty(jsonparser, deserializationcontext, handledType(), ((String) (obj3)));
                obj1 = obj;
            } else
            if (_anySetter != null) {
                propertyvaluebuffer.bufferAnyProperty(_anySetter, ((String) (obj3)), _anySetter.deserialize(jsonparser, deserializationcontext));
                obj1 = obj;
            } else {
                obj1 = obj;
                if (obj == null)
                    obj1 = new TokenBuffer(jsonparser, deserializationcontext);
                ((TokenBuffer) (obj1)).writeFieldName(((String) (obj3)));
                ((TokenBuffer) (obj1)).copyCurrentStructure(jsonparser);
            }
        }
        if (true) goto _L5; else goto _L2
_L2:
        try {
            jsonparser = ((JsonParser) (propertybasedcreator.build(deserializationcontext, propertyvaluebuffer)));
        }
        // Misplaced declaration of an exception variable
        catch (JsonParser jsonparser) {
            wrapInstantiationProblem(jsonparser, deserializationcontext);
            jsonparser = obj2;
            break MISSING_BLOCK_LABEL_123;
        }
        if (obj != null)
            if (jsonparser.getClass() != _beanType.getRawClass())
                jsonparser = ((JsonParser) (handlePolymorphic(null, deserializationcontext, jsonparser, ((TokenBuffer) (obj)))));
            else
                jsonparser = ((JsonParser) (handleUnknownProperties(deserializationcontext, jsonparser, ((TokenBuffer) (obj)))));
        break MISSING_BLOCK_LABEL_123;
        if (true) goto _L7; else goto _L6
_L6:
    }

    protected volatile BeanDeserializerBase asArrayDeserializer() {
        return asArrayDeserializer();
    }

    protected BeanAsArrayBuilderDeserializer asArrayDeserializer() {
        return new BeanAsArrayBuilderDeserializer(this, _beanProperties.getPropertiesInInsertionOrder(), _buildMethod);
    }

    public final Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        JsonToken jsontoken = jsonparser.getCurrentToken();
        if (jsontoken != JsonToken.START_OBJECT) goto _L2; else goto _L1
_L1:
        jsontoken = jsonparser.nextToken();
        if (_vanillaProcessing)
            jsonparser = ((JsonParser) (finishBuild(deserializationcontext, vanillaDeserialize(jsonparser, deserializationcontext, jsontoken))));
        else
            jsonparser = ((JsonParser) (finishBuild(deserializationcontext, deserializeFromObject(jsonparser, deserializationcontext))));
_L4:
        return jsonparser;
_L2:
        static class _cls1 {

            static final int $SwitchMap$com$fasterxml$jackson$core$JsonToken[];

            static  {
                $SwitchMap$com$fasterxml$jackson$core$JsonToken = new int[JsonToken.values().length];
                NoSuchFieldError nosuchfielderror;
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_STRING.ordinal()] = 1;
                }
                catch (NoSuchFieldError nosuchfielderror8) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_NUMBER_INT.ordinal()] = 2;
                }
                catch (NoSuchFieldError nosuchfielderror7) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_NUMBER_FLOAT.ordinal()] = 3;
                }
                catch (NoSuchFieldError nosuchfielderror6) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_EMBEDDED_OBJECT.ordinal()] = 4;
                }
                catch (NoSuchFieldError nosuchfielderror5) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_TRUE.ordinal()] = 5;
                }
                catch (NoSuchFieldError nosuchfielderror4) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_FALSE.ordinal()] = 6;
                }
                catch (NoSuchFieldError nosuchfielderror3) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.START_ARRAY.ordinal()] = 7;
                }
                catch (NoSuchFieldError nosuchfielderror2) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.FIELD_NAME.ordinal()] = 8;
                }
                catch (NoSuchFieldError nosuchfielderror1) { }
                $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.END_OBJECT.ordinal()] = 9;
_L2:
                return;
                nosuchfielderror;
                if (true) goto _L2; else goto _L1
_L1:
            }
        }

        switch (_cls1..SwitchMap.com.fasterxml.jackson.core.JsonToken[jsontoken.ordinal()]) {
        default:
            throw deserializationcontext.mappingException(handledType());

        case 1: // '\001'
            jsonparser = ((JsonParser) (finishBuild(deserializationcontext, deserializeFromString(jsonparser, deserializationcontext))));
            break;

        case 2: // '\002'
            jsonparser = ((JsonParser) (finishBuild(deserializationcontext, deserializeFromNumber(jsonparser, deserializationcontext))));
            break;

        case 3: // '\003'
            jsonparser = ((JsonParser) (finishBuild(deserializationcontext, deserializeFromDouble(jsonparser, deserializationcontext))));
            break;

        case 4: // '\004'
            jsonparser = ((JsonParser) (jsonparser.getEmbeddedObject()));
            break;

        case 5: // '\005'
        case 6: // '\006'
            jsonparser = ((JsonParser) (finishBuild(deserializationcontext, deserializeFromBoolean(jsonparser, deserializationcontext))));
            break;

        case 7: // '\007'
            jsonparser = ((JsonParser) (finishBuild(deserializationcontext, deserializeFromArray(jsonparser, deserializationcontext))));
            break;

        case 8: // '\b'
        case 9: // '\t'
            jsonparser = ((JsonParser) (finishBuild(deserializationcontext, deserializeFromObject(jsonparser, deserializationcontext))));
            break;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj) {
        return finishBuild(deserializationcontext, _deserialize(jsonparser, deserializationcontext, obj));
    }

    public Object deserializeFromObject(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (!_nonStandardCreation) goto _L2; else goto _L1
_L1:
        Object obj;
        if (_unwrappedPropertyHandler != null)
            obj = deserializeWithUnwrapped(jsonparser, deserializationcontext);
        else
        if (_externalTypeIdHandler != null)
            obj = deserializeWithExternalTypeId(jsonparser, deserializationcontext);
        else
            obj = deserializeFromObjectUsingNonDefault(jsonparser, deserializationcontext);
_L4:
        return obj;
_L2:
        Object obj1;
        obj = _valueInstantiator.createUsingDefault(deserializationcontext);
        if (_injectables != null)
            injectValues(deserializationcontext, obj);
        obj1 = obj;
        if (!_needViewProcesing)
            break; /* Loop/switch isn't completed */
        Class class1 = deserializationcontext.getActiveView();
        obj1 = obj;
        if (class1 == null)
            break; /* Loop/switch isn't completed */
        obj = deserializeWithView(jsonparser, deserializationcontext, obj, class1);
        String s;
        if (true) goto _L4; else goto _L3
_L6:
        jsonparser.nextToken();
        obj1 = obj;
_L3:
        obj = obj1;
        if (jsonparser.getCurrentToken() == JsonToken.END_OBJECT)
            continue; /* Loop/switch isn't completed */
        s = jsonparser.getCurrentName();
        jsonparser.nextToken();
        obj = _beanProperties.find(s);
        if (obj != null) {
            try {
                obj = ((SettableBeanProperty) (obj)).deserializeSetAndReturn(jsonparser, deserializationcontext, obj1);
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) {
                wrapAndThrow(((Throwable) (obj)), obj1, s, deserializationcontext);
                obj = obj1;
            }
        } else {
            handleUnknownVanilla(jsonparser, deserializationcontext, obj1, s);
            obj = obj1;
        }
        if (true) goto _L6; else goto _L5
_L5:
        if (true) goto _L4; else goto _L7
_L7:
    }

    protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        throw new IllegalStateException("Deserialization with Builder, External type id, @JsonCreator not yet implemented");
    }

    protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        TokenBuffer tokenbuffer;
        PropertyValueBuffer propertyvaluebuffer;
        PropertyBasedCreator propertybasedcreator;
        propertybasedcreator = _propertyBasedCreator;
        propertyvaluebuffer = propertybasedcreator.startBuilding(jsonparser, deserializationcontext, _objectIdReader);
        tokenbuffer = new TokenBuffer(jsonparser, deserializationcontext);
        tokenbuffer.writeStartObject();
        Object obj = jsonparser.getCurrentToken();
        while (obj == JsonToken.FIELD_NAME)  {
            String s = jsonparser.getCurrentName();
            jsonparser.nextToken();
            obj = propertybasedcreator.findCreatorProperty(s);
            Object obj2;
            if (obj != null) {
                if (propertyvaluebuffer.assignParameter(((SettableBeanProperty) (obj)), ((SettableBeanProperty) (obj)).deserialize(jsonparser, deserializationcontext))) {
                    obj = jsonparser.nextToken();
                    try {
                        obj2 = propertybasedcreator.build(deserializationcontext, propertyvaluebuffer);
                        break MISSING_BLOCK_LABEL_100;
                    }
                    // Misplaced declaration of an exception variable
                    catch (Object obj) {
                        wrapAndThrow(((Throwable) (obj)), _beanType.getRawClass(), s, deserializationcontext);
                    }
                }
            } else
            if (!propertyvaluebuffer.readIdProperty(s)) {
                SettableBeanProperty settablebeanproperty = _beanProperties.find(s);
                if (settablebeanproperty != null)
                    propertyvaluebuffer.bufferProperty(settablebeanproperty, settablebeanproperty.deserialize(jsonparser, deserializationcontext));
                else
                if (_ignorableProps != null && _ignorableProps.contains(s)) {
                    handleIgnoredProperty(jsonparser, deserializationcontext, handledType(), s);
                } else {
                    tokenbuffer.writeFieldName(s);
                    tokenbuffer.copyCurrentStructure(jsonparser);
                    if (_anySetter != null)
                        propertyvaluebuffer.bufferAnyProperty(_anySetter, s, _anySetter.deserialize(jsonparser, deserializationcontext));
                }
            }
            obj = jsonparser.nextToken();
        }
          goto _L1
        for (; obj == JsonToken.FIELD_NAME; obj = jsonparser.nextToken()) {
            jsonparser.nextToken();
            tokenbuffer.copyCurrentStructure(jsonparser);
        }

        tokenbuffer.writeEndObject();
        if (obj2.getClass() != _beanType.getRawClass())
            throw deserializationcontext.mappingException("Can not create polymorphic instances with unwrapped values");
        jsonparser = ((JsonParser) (_unwrappedPropertyHandler.processUnwrapped(jsonparser, deserializationcontext, obj2, tokenbuffer)));
_L3:
        return jsonparser;
_L1:
        Object obj1 = propertybasedcreator.build(deserializationcontext, propertyvaluebuffer);
        jsonparser = ((JsonParser) (_unwrappedPropertyHandler.processUnwrapped(jsonparser, deserializationcontext, obj1, tokenbuffer)));
        continue; /* Loop/switch isn't completed */
        jsonparser;
        wrapInstantiationProblem(jsonparser, deserializationcontext);
        jsonparser = null;
        if (true) goto _L3; else goto _L2
_L2:
    }

    protected Object deserializeWithExternalTypeId(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (_propertyBasedCreator != null)
            jsonparser = ((JsonParser) (deserializeUsingPropertyBasedWithExternalTypeId(jsonparser, deserializationcontext)));
        else
            jsonparser = ((JsonParser) (deserializeWithExternalTypeId(jsonparser, deserializationcontext, _valueInstantiator.createUsingDefault(deserializationcontext))));
        return jsonparser;
    }

    protected Object deserializeWithExternalTypeId(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj) {
        Object obj1;
        Object obj2;
        ExternalTypeHandler externaltypehandler;
        Class class1;
        JsonToken jsontoken;
        if (_needViewProcesing)
            class1 = deserializationcontext.getActiveView();
        else
            class1 = null;
        externaltypehandler = _externalTypeIdHandler.start();
        obj2 = jsonparser.getCurrentToken();
        if (obj2 != JsonToken.FIELD_NAME)
            break MISSING_BLOCK_LABEL_263;
        obj2 = jsonparser.getCurrentName();
        jsontoken = jsonparser.nextToken();
        obj1 = _beanProperties.find(((String) (obj2)));
        if (obj1 == null)
            break; /* Loop/switch isn't completed */
        if (jsontoken.isScalarValue())
            externaltypehandler.handleTypePropertyValue(jsonparser, deserializationcontext, ((String) (obj2)), obj);
        if (class1 != null && !((SettableBeanProperty) (obj1)).visibleInView(class1)) {
            jsonparser.skipChildren();
            obj1 = obj;
        } else {
            try {
                obj1 = ((SettableBeanProperty) (obj1)).deserializeSetAndReturn(jsonparser, deserializationcontext, obj);
            }
            // Misplaced declaration of an exception variable
            catch (Object obj1) {
                wrapAndThrow(((Throwable) (obj1)), obj, ((String) (obj2)), deserializationcontext);
                obj1 = obj;
            }
        }
_L4:
        obj2 = jsonparser.nextToken();
        obj = obj1;
        if (true) goto _L2; else goto _L1
_L2:
        break MISSING_BLOCK_LABEL_28;
_L1:
label0:
        {
            if (_ignorableProps == null || !_ignorableProps.contains(obj2))
                break label0;
            handleIgnoredProperty(jsonparser, deserializationcontext, obj, ((String) (obj2)));
            obj1 = obj;
        }
        continue; /* Loop/switch isn't completed */
        for (obj1 = obj; externaltypehandler.handlePropertyValue(jsonparser, deserializationcontext, ((String) (obj2)), obj); obj1 = obj)
            continue; /* Loop/switch isn't completed */

        if (_anySetter == null)
            break MISSING_BLOCK_LABEL_248;
        try {
            _anySetter.deserializeAndSet(jsonparser, deserializationcontext, obj, ((String) (obj2)));
        }
        // Misplaced declaration of an exception variable
        catch (Object obj1) {
            wrapAndThrow(((Throwable) (obj1)), obj, ((String) (obj2)), deserializationcontext);
            obj1 = obj;
            continue; /* Loop/switch isn't completed */
        }
        obj1 = obj;
        continue; /* Loop/switch isn't completed */
        handleUnknownProperty(jsonparser, deserializationcontext, obj, ((String) (obj2)));
        obj1 = obj;
        if (true) goto _L4; else goto _L3
_L3:
        return externaltypehandler.complete(jsonparser, deserializationcontext, obj);
    }

    protected Object deserializeWithUnwrapped(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (_delegateDeserializer == null) goto _L2; else goto _L1
_L1:
        Object obj = _valueInstantiator.createUsingDelegate(deserializationcontext, _delegateDeserializer.deserialize(jsonparser, deserializationcontext));
_L8:
        return obj;
_L2:
        Object obj1;
        TokenBuffer tokenbuffer;
        String s;
        if (_propertyBasedCreator != null) {
            obj = deserializeUsingPropertyBasedWithUnwrapped(jsonparser, deserializationcontext);
            continue; /* Loop/switch isn't completed */
        }
        tokenbuffer = new TokenBuffer(jsonparser, deserializationcontext);
        tokenbuffer.writeStartObject();
        obj = _valueInstantiator.createUsingDefault(deserializationcontext);
        if (_injectables != null)
            injectValues(deserializationcontext, obj);
        Class class1;
        if (_needViewProcesing)
            class1 = deserializationcontext.getActiveView();
        else
            class1 = null;
        if (jsonparser.getCurrentToken() == JsonToken.END_OBJECT)
            break MISSING_BLOCK_LABEL_296;
        s = jsonparser.getCurrentName();
        jsonparser.nextToken();
        obj1 = _beanProperties.find(s);
        if (obj1 == null)
            break; /* Loop/switch isn't completed */
        if (class1 != null && !((SettableBeanProperty) (obj1)).visibleInView(class1)) {
            jsonparser.skipChildren();
            obj1 = obj;
        } else {
            try {
                obj1 = ((SettableBeanProperty) (obj1)).deserializeSetAndReturn(jsonparser, deserializationcontext, obj);
            }
            // Misplaced declaration of an exception variable
            catch (Object obj1) {
                wrapAndThrow(((Throwable) (obj1)), obj, s, deserializationcontext);
                obj1 = obj;
            }
        }
_L6:
        jsonparser.nextToken();
        obj = obj1;
        if (true) goto _L4; else goto _L3
_L4:
        break MISSING_BLOCK_LABEL_95;
_L3:
label0:
        {
            if (_ignorableProps == null || !_ignorableProps.contains(s))
                break label0;
            handleIgnoredProperty(jsonparser, deserializationcontext, obj, s);
            obj1 = obj;
        }
        continue; /* Loop/switch isn't completed */
        tokenbuffer.writeFieldName(s);
        tokenbuffer.copyCurrentStructure(jsonparser);
        obj1 = obj;
        if (_anySetter == null)
            continue; /* Loop/switch isn't completed */
        _anySetter.deserializeAndSet(jsonparser, deserializationcontext, obj, s);
        obj1 = obj;
        continue; /* Loop/switch isn't completed */
        Exception exception;
        exception;
        wrapAndThrow(exception, obj, s, deserializationcontext);
        exception = ((Exception) (obj));
        if (true) goto _L6; else goto _L5
_L5:
        tokenbuffer.writeEndObject();
        _unwrappedPropertyHandler.processUnwrapped(jsonparser, deserializationcontext, obj, tokenbuffer);
        if (true) goto _L8; else goto _L7
_L7:
    }

    protected Object deserializeWithUnwrapped(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj) {
        Object obj2 = jsonparser.getCurrentToken();
        Object obj1 = obj2;
        if (obj2 == JsonToken.START_OBJECT)
            obj1 = jsonparser.nextToken();
        TokenBuffer tokenbuffer = new TokenBuffer(jsonparser, deserializationcontext);
        tokenbuffer.writeStartObject();
        if (_needViewProcesing)
            obj2 = deserializationcontext.getActiveView();
        else
            obj2 = null;
        while (obj1 == JsonToken.FIELD_NAME)  {
            obj1 = jsonparser.getCurrentName();
            Object obj3 = _beanProperties.find(((String) (obj1)));
            jsonparser.nextToken();
            if (obj3 != null) {
                if (obj2 != null && !((SettableBeanProperty) (obj3)).visibleInView(((Class) (obj2)))) {
                    jsonparser.skipChildren();
                    obj3 = obj;
                } else {
                    try {
                        obj3 = ((SettableBeanProperty) (obj3)).deserializeSetAndReturn(jsonparser, deserializationcontext, obj);
                    }
                    // Misplaced declaration of an exception variable
                    catch (Object obj3) {
                        wrapAndThrow(((Throwable) (obj3)), obj, ((String) (obj1)), deserializationcontext);
                        obj3 = obj;
                    }
                }
            } else
            if (_ignorableProps != null && _ignorableProps.contains(obj1)) {
                handleIgnoredProperty(jsonparser, deserializationcontext, obj, ((String) (obj1)));
                obj3 = obj;
            } else {
                tokenbuffer.writeFieldName(((String) (obj1)));
                tokenbuffer.copyCurrentStructure(jsonparser);
                obj3 = obj;
                if (_anySetter != null) {
                    _anySetter.deserializeAndSet(jsonparser, deserializationcontext, obj, ((String) (obj1)));
                    obj3 = obj;
                }
            }
            obj1 = jsonparser.nextToken();
            obj = obj3;
        }
        tokenbuffer.writeEndObject();
        _unwrappedPropertyHandler.processUnwrapped(jsonparser, deserializationcontext, obj, tokenbuffer);
        return obj;
    }

    protected final Object deserializeWithView(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj, Class class1) {
        Object obj1 = jsonparser.getCurrentToken();
_L2:
        String s;
        if (obj1 != JsonToken.FIELD_NAME)
            break MISSING_BLOCK_LABEL_108;
        s = jsonparser.getCurrentName();
        jsonparser.nextToken();
        obj1 = _beanProperties.find(s);
        if (obj1 == null)
            break MISSING_BLOCK_LABEL_96;
        if (((SettableBeanProperty) (obj1)).visibleInView(class1))
            break; /* Loop/switch isn't completed */
        jsonparser.skipChildren();
_L3:
        obj1 = jsonparser.nextToken();
        if (true) goto _L2; else goto _L1
_L1:
        obj1 = ((SettableBeanProperty) (obj1)).deserializeSetAndReturn(jsonparser, deserializationcontext, obj);
        obj = obj1;
          goto _L3
        Exception exception;
        exception;
        wrapAndThrow(exception, obj, s, deserializationcontext);
          goto _L3
        handleUnknownVanilla(jsonparser, deserializationcontext, obj, s);
          goto _L3
        return obj;
    }

    protected final Object finishBuild(DeserializationContext deserializationcontext, Object obj) {
        if (_buildMethod != null)
            try {
                obj = _buildMethod.getMember().invoke(obj, new Object[0]);
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) {
                wrapInstantiationProblem(((Throwable) (obj)), deserializationcontext);
                obj = null;
            }
        return obj;
    }

    public JsonDeserializer unwrappingDeserializer(NameTransformer nametransformer) {
        return new BuilderBasedDeserializer(this, nametransformer);
    }

    public volatile BeanDeserializerBase withIgnorableProperties(HashSet hashset) {
        return withIgnorableProperties(hashset);
    }

    public BuilderBasedDeserializer withIgnorableProperties(HashSet hashset) {
        return new BuilderBasedDeserializer(this, hashset);
    }

    public volatile BeanDeserializerBase withObjectIdReader(ObjectIdReader objectidreader) {
        return withObjectIdReader(objectidreader);
    }

    public BuilderBasedDeserializer withObjectIdReader(ObjectIdReader objectidreader) {
        return new BuilderBasedDeserializer(this, objectidreader);
    }
}
