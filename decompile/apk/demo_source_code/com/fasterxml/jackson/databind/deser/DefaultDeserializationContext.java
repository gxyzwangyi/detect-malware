// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.util.ClassUtil;
import java.io.Serializable;
import java.util.*;

// Referenced classes of package com.fasterxml.jackson.databind.deser:
//            UnresolvedForwardReference, ResolvableDeserializer, DeserializerFactory, DeserializerCache

public abstract class DefaultDeserializationContext extends DeserializationContext
    implements Serializable {
    public static final class Impl extends DefaultDeserializationContext {

        private static final long serialVersionUID = 1L;

        public DefaultDeserializationContext copy() {
            Object obj;
            if (getClass() != com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl)
                obj = copy();
            else
                obj = new Impl(this);
            return ((DefaultDeserializationContext) (obj));
        }

        public DefaultDeserializationContext createInstance(DeserializationConfig deserializationconfig, JsonParser jsonparser, InjectableValues injectablevalues) {
            return new Impl(this, deserializationconfig, jsonparser, injectablevalues);
        }

        public DefaultDeserializationContext with(DeserializerFactory deserializerfactory) {
            return new Impl(this, deserializerfactory);
        }

        protected Impl(Impl impl) {
            super(impl);
        }

        protected Impl(Impl impl, DeserializationConfig deserializationconfig, JsonParser jsonparser, InjectableValues injectablevalues) {
            super(impl, deserializationconfig, jsonparser, injectablevalues);
        }

        protected Impl(Impl impl, DeserializerFactory deserializerfactory) {
            super(impl, deserializerfactory);
        }

        public Impl(DeserializerFactory deserializerfactory) {
            super(deserializerfactory, null);
        }
    }


    private static final long serialVersionUID = 1L;
    private List _objectIdResolvers;
    protected transient LinkedHashMap _objectIds;

    protected DefaultDeserializationContext(DefaultDeserializationContext defaultdeserializationcontext) {
        super(defaultdeserializationcontext);
    }

    protected DefaultDeserializationContext(DefaultDeserializationContext defaultdeserializationcontext, DeserializationConfig deserializationconfig, JsonParser jsonparser, InjectableValues injectablevalues) {
        super(defaultdeserializationcontext, deserializationconfig, jsonparser, injectablevalues);
    }

    protected DefaultDeserializationContext(DefaultDeserializationContext defaultdeserializationcontext, DeserializerFactory deserializerfactory) {
        super(defaultdeserializationcontext, deserializerfactory);
    }

    protected DefaultDeserializationContext(DeserializerFactory deserializerfactory, DeserializerCache deserializercache) {
        super(deserializerfactory, deserializercache);
    }

    public void checkUnresolvedObjectId() {
_L2:
        return;
        if (_objectIds == null || !isEnabled(DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS)) goto _L2; else goto _L1
_L1:
        Object obj1;
        obj1 = null;
        Iterator iterator = _objectIds.entrySet().iterator();
        do {
            Object obj3;
            do {
                if (!iterator.hasNext())
                    continue; /* Loop/switch isn't completed */
                obj3 = (ReadableObjectId)((java.util.Map.Entry)iterator.next()).getValue();
            } while (!((ReadableObjectId) (obj3)).hasReferringProperties() || tryToResolveUnresolvedObjectId(((ReadableObjectId) (obj3))));
            Object obj = obj1;
            if (obj1 == null)
                obj = new UnresolvedForwardReference(getParser(), "Unresolved forward references for: ");
            Object obj2 = ((ReadableObjectId) (obj3)).getKey().key;
            obj3 = ((ReadableObjectId) (obj3)).referringProperties();
            do {
                obj1 = obj;
                if (!((Iterator) (obj3)).hasNext())
                    break;
                obj1 = (com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring)((Iterator) (obj3)).next();
                ((UnresolvedForwardReference) (obj)).addUnresolvedId(obj2, ((com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring) (obj1)).getBeanType(), ((com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring) (obj1)).getLocation());
            } while (true);
        } while (true);
        if (obj1 == null) goto _L2; else goto _L3
_L3:
        throw obj1;
    }

    public DefaultDeserializationContext copy() {
        throw new IllegalStateException("DefaultDeserializationContext sub-class not overriding copy()");
    }

    public abstract DefaultDeserializationContext createInstance(DeserializationConfig deserializationconfig, JsonParser jsonparser, InjectableValues injectablevalues);

    protected ReadableObjectId createReadableObjectId(com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey idkey) {
        return new ReadableObjectId(idkey);
    }

    public JsonDeserializer deserializerInstance(Annotated annotated, Object obj) {
        Object obj1;
        Object obj2;
        obj1 = null;
        obj2 = null;
        if (obj != null) goto _L2; else goto _L1
_L1:
        obj = obj2;
_L4:
        return ((JsonDeserializer) (obj));
_L2:
        if (!(obj instanceof JsonDeserializer))
            break; /* Loop/switch isn't completed */
        annotated = (JsonDeserializer)obj;
_L7:
        obj = annotated;
        if (annotated instanceof ResolvableDeserializer) {
            ((ResolvableDeserializer)annotated).resolve(this);
            obj = annotated;
        }
        if (true) goto _L4; else goto _L3
_L3:
        Class class1;
        if (!(obj instanceof Class))
            throw new IllegalStateException((new StringBuilder()).append("AnnotationIntrospector returned deserializer definition of type ").append(obj.getClass().getName()).append("; expected type JsonDeserializer or Class<JsonDeserializer> instead").toString());
        class1 = (Class)obj;
        obj = obj2;
        if (class1 == com/fasterxml/jackson/databind/JsonDeserializer$None) goto _L4; else goto _L5
_L5:
        obj = obj2;
        if (ClassUtil.isBogusClass(class1)) goto _L4; else goto _L6
_L6:
        if (!com/fasterxml/jackson/databind/JsonDeserializer.isAssignableFrom(class1))
            throw new IllegalStateException((new StringBuilder()).append("AnnotationIntrospector returned Class ").append(class1.getName()).append("; expected Class<JsonDeserializer>").toString());
        obj = _config.getHandlerInstantiator();
        if (obj == null)
            obj = obj1;
        else
            obj = ((HandlerInstantiator) (obj)).deserializerInstance(_config, annotated, class1);
        annotated = ((Annotated) (obj));
        if (obj == null)
            annotated = (JsonDeserializer)ClassUtil.createInstance(class1, _config.canOverrideAccessModifiers());
          goto _L7
    }

    public ReadableObjectId findObjectId(Object obj, ObjectIdGenerator objectidgenerator) {
        return findObjectId(obj, objectidgenerator, ((ObjectIdResolver) (new SimpleObjectIdResolver())));
    }

    public ReadableObjectId findObjectId(Object obj, ObjectIdGenerator objectidgenerator, ObjectIdResolver objectidresolver) {
        if (obj != null) goto _L2; else goto _L1
_L1:
        obj = null;
_L7:
        return ((ReadableObjectId) (obj));
_L2:
        com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey idkey = objectidgenerator.key(obj);
        if (_objectIds != null) goto _L4; else goto _L3
_L3:
        _objectIds = new LinkedHashMap();
_L8:
        if (_objectIdResolvers != null) goto _L6; else goto _L5
_L5:
        _objectIdResolvers = new ArrayList(8);
        obj = null;
_L11:
        objectidgenerator = ((ObjectIdGenerator) (obj));
        if (obj == null) {
            objectidgenerator = objectidresolver.newForDeserialization(this);
            _objectIdResolvers.add(objectidgenerator);
        }
        obj = createReadableObjectId(idkey);
        ((ReadableObjectId) (obj)).setResolver(objectidgenerator);
        _objectIds.put(idkey, obj);
        break; /* Loop/switch isn't completed */
_L4:
        obj = (ReadableObjectId)_objectIds.get(idkey);
        if (obj == null) goto _L8; else goto _L7
_L6:
        objectidgenerator = _objectIdResolvers.iterator();
_L12:
        if (!objectidgenerator.hasNext()) goto _L10; else goto _L9
_L9:
        obj = (ObjectIdResolver)objectidgenerator.next();
        if (!((ObjectIdResolver) (obj)).canUseFor(objectidresolver)) goto _L12; else goto _L11
_L10:
        obj = null;
          goto _L11
    }

    public final KeyDeserializer keyDeserializerInstance(Annotated annotated, Object obj) {
        Object obj1;
        Object obj2;
        obj1 = null;
        obj2 = null;
        if (obj != null) goto _L2; else goto _L1
_L1:
        obj = obj2;
_L4:
        return ((KeyDeserializer) (obj));
_L2:
        if (!(obj instanceof KeyDeserializer))
            break; /* Loop/switch isn't completed */
        annotated = (KeyDeserializer)obj;
_L7:
        obj = annotated;
        if (annotated instanceof ResolvableDeserializer) {
            ((ResolvableDeserializer)annotated).resolve(this);
            obj = annotated;
        }
        if (true) goto _L4; else goto _L3
_L3:
        Class class1;
        if (!(obj instanceof Class))
            throw new IllegalStateException((new StringBuilder()).append("AnnotationIntrospector returned key deserializer definition of type ").append(obj.getClass().getName()).append("; expected type KeyDeserializer or Class<KeyDeserializer> instead").toString());
        class1 = (Class)obj;
        obj = obj2;
        if (class1 == com/fasterxml/jackson/databind/KeyDeserializer$None) goto _L4; else goto _L5
_L5:
        obj = obj2;
        if (ClassUtil.isBogusClass(class1)) goto _L4; else goto _L6
_L6:
        if (!com/fasterxml/jackson/databind/KeyDeserializer.isAssignableFrom(class1))
            throw new IllegalStateException((new StringBuilder()).append("AnnotationIntrospector returned Class ").append(class1.getName()).append("; expected Class<KeyDeserializer>").toString());
        obj = _config.getHandlerInstantiator();
        if (obj == null)
            obj = obj1;
        else
            obj = ((HandlerInstantiator) (obj)).keyDeserializerInstance(_config, annotated, class1);
        annotated = ((Annotated) (obj));
        if (obj == null)
            annotated = (KeyDeserializer)ClassUtil.createInstance(class1, _config.canOverrideAccessModifiers());
          goto _L7
    }

    protected boolean tryToResolveUnresolvedObjectId(ReadableObjectId readableobjectid) {
        return readableobjectid.tryToResolveUnresolved(this);
    }

    public abstract DefaultDeserializationContext with(DeserializerFactory deserializerfactory);
}
