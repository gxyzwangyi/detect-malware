// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            StdScalarDeserializer

public final class StringDeserializer extends StdScalarDeserializer {

    public static final StringDeserializer instance = new StringDeserializer();
    private static final long serialVersionUID = 1L;

    public StringDeserializer() {
        super(java/lang/String);
    }

    public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        return deserialize(jsonparser, deserializationcontext);
    }

    public String deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (!jsonparser.hasToken(JsonToken.VALUE_STRING)) goto _L2; else goto _L1
_L1:
        Object obj = jsonparser.getText();
_L4:
        return ((String) (obj));
_L2:
        obj = jsonparser.getCurrentToken();
        if (obj == JsonToken.START_ARRAY && deserializationcontext.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {
            jsonparser.nextToken();
            obj = _parseString(jsonparser, deserializationcontext);
            if (jsonparser.nextToken() != JsonToken.END_ARRAY)
                throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'String' value but there was more than a single value in the array");
            continue; /* Loop/switch isn't completed */
        }
        if (obj != JsonToken.VALUE_EMBEDDED_OBJECT)
            break; /* Loop/switch isn't completed */
        jsonparser = ((JsonParser) (jsonparser.getEmbeddedObject()));
        if (jsonparser == null)
            obj = null;
        else
        if (jsonparser instanceof byte[])
            obj = deserializationcontext.getBase64Variant().encode((byte[])(byte[])jsonparser, false);
        else
            obj = jsonparser.toString();
        if (true) goto _L4; else goto _L3
_L3:
        String s = jsonparser.getValueAsString();
        obj = s;
        if (s == null)
            throw deserializationcontext.mappingException(_valueClass, jsonparser.getCurrentToken());
        if (true) goto _L4; else goto _L5
_L5:
    }

    public volatile Object deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
        return deserializeWithType(jsonparser, deserializationcontext, typedeserializer);
    }

    public String deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
        return deserialize(jsonparser, deserializationcontext);
    }

    public boolean isCachable() {
        return true;
    }

}
