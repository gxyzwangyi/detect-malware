// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.ContextualDeserializer;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.util.*;
import java.io.IOException;
import java.lang.reflect.Method;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            StdScalarDeserializer, StdDeserializer

public class EnumDeserializer extends StdScalarDeserializer {
    protected static class FactoryBasedDeserializer extends StdDeserializer
        implements ContextualDeserializer {

        private static final long serialVersionUID = 1L;
        protected final JsonDeserializer _deser;
        protected final Method _factory;
        protected final Class _inputType;

        public JsonDeserializer createContextual(DeserializationContext deserializationcontext, BeanProperty beanproperty) {
            FactoryBasedDeserializer factorybaseddeserializer = this;
            if (_deser == null) {
                factorybaseddeserializer = this;
                if (_inputType != java/lang/String)
                    factorybaseddeserializer = new FactoryBasedDeserializer(this, deserializationcontext.findContextualValueDeserializer(deserializationcontext.constructType(_inputType), beanproperty));
            }
            return factorybaseddeserializer;
        }

        public Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            if (_deser != null) {
                jsonparser = ((JsonParser) (_deser.deserialize(jsonparser, deserializationcontext)));
            } else {
                JsonToken jsontoken = jsonparser.getCurrentToken();
                if (jsontoken == JsonToken.VALUE_STRING || jsontoken == JsonToken.FIELD_NAME)
                    jsonparser = jsonparser.getText();
                else
                    jsonparser = jsonparser.getValueAsString();
            }
            try {
                jsonparser = ((JsonParser) (_factory.invoke(_valueClass, new Object[] {
                    jsonparser
                })));
            }
            // Misplaced declaration of an exception variable
            catch (JsonParser jsonparser) {
                jsonparser = ClassUtil.getRootCause(jsonparser);
                if (jsonparser instanceof IOException)
                    throw (IOException)jsonparser;
                else
                    throw deserializationcontext.instantiationException(_valueClass, jsonparser);
            }
            return jsonparser;
        }

        public Object deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
            if (_deser == null)
                jsonparser = ((JsonParser) (deserialize(jsonparser, deserializationcontext)));
            else
                jsonparser = ((JsonParser) (typedeserializer.deserializeTypedFromAny(jsonparser, deserializationcontext)));
            return jsonparser;
        }

        protected FactoryBasedDeserializer(FactoryBasedDeserializer factorybaseddeserializer, JsonDeserializer jsondeserializer) {
            super(factorybaseddeserializer._valueClass);
            _inputType = factorybaseddeserializer._inputType;
            _factory = factorybaseddeserializer._factory;
            _deser = jsondeserializer;
        }

        public FactoryBasedDeserializer(Class class1, AnnotatedMethod annotatedmethod, Class class2) {
            super(class1);
            _factory = annotatedmethod.getAnnotated();
            _inputType = class2;
            _deser = null;
        }
    }


    private static final long serialVersionUID = 1L;
    protected Object _enumsByIndex[];
    protected final CompactStringObjectMap _lookupByName;
    protected CompactStringObjectMap _lookupByToString;

    public EnumDeserializer(EnumResolver enumresolver) {
        super(enumresolver.getEnumClass());
        _lookupByName = enumresolver.constructLookup();
        _enumsByIndex = enumresolver.getRawEnums();
    }

    private final Object _deserializeAltString(JsonParser jsonparser, DeserializationContext deserializationcontext, CompactStringObjectMap compactstringobjectmap, String s) {
        Object obj;
        obj = null;
        s = s.trim();
        if (s.length() != 0) goto _L2; else goto _L1
_L1:
        if (!deserializationcontext.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) goto _L4; else goto _L3
_L3:
        jsonparser = obj;
_L7:
        return jsonparser;
_L2:
        int i = s.charAt(0);
        if (i < '0' || i > '9') goto _L4; else goto _L5
_L5:
        i = Integer.parseInt(s);
        if (deserializationcontext.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS))
            _failOnNumber(deserializationcontext, jsonparser, i);
        if (i >= 0)
            try {
                if (i <= _enumsByIndex.length) {
                    jsonparser = ((JsonParser) (_enumsByIndex[i]));
                    continue; /* Loop/switch isn't completed */
                }
            }
            // Misplaced declaration of an exception variable
            catch (JsonParser jsonparser) { }
_L4:
        jsonparser = obj;
        if (!deserializationcontext.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL))
            throw deserializationcontext.weirdStringException(s, _enumClass(), (new StringBuilder()).append("value not one of declared Enum instance names: ").append(compactstringobjectmap.keys()).toString());
        if (true) goto _L7; else goto _L6
_L6:
    }

    public static JsonDeserializer deserializerForCreator(DeserializationConfig deserializationconfig, Class class1, AnnotatedMethod annotatedmethod) {
        Class class2 = annotatedmethod.getRawParameterType(0);
        if (deserializationconfig.canOverrideAccessModifiers())
            ClassUtil.checkAndFixAccess(annotatedmethod.getMember(), deserializationconfig.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
        return new FactoryBasedDeserializer(class1, annotatedmethod, class2);
    }

    protected Object _deserializeOther(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        jsonparser.getCurrentToken();
        if (deserializationcontext.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS) && jsonparser.isExpectedStartArrayToken()) {
            jsonparser.nextToken();
            Object obj = deserialize(jsonparser, deserializationcontext);
            if (jsonparser.nextToken() != JsonToken.END_ARRAY)
                throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.END_ARRAY, (new StringBuilder()).append("Attempted to unwrap single value array for single '").append(_enumClass().getName()).append("' value but there was more than a single value in the array").toString());
            else
                return obj;
        } else {
            throw deserializationcontext.mappingException(_enumClass());
        }
    }

    protected Class _enumClass() {
        return handledType();
    }

    protected void _failOnNumber(DeserializationContext deserializationcontext, JsonParser jsonparser, int i) {
        throw InvalidFormatException.from(jsonparser, String.format("Not allowed to deserialize Enum value out of JSON number (%d): disable DeserializationConfig.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS to allow", new Object[] {
            Integer.valueOf(i)
        }), Integer.valueOf(i), _enumClass());
    }

    protected CompactStringObjectMap _getToStringLookup() {
        CompactStringObjectMap compactstringobjectmap;
        CompactStringObjectMap compactstringobjectmap1 = _lookupByToString;
        compactstringobjectmap = compactstringobjectmap1;
        if (compactstringobjectmap1 != null)
            break MISSING_BLOCK_LABEL_31;
        this;
        JVM INSTR monitorenter ;
        compactstringobjectmap = EnumResolver.constructUnsafeUsingToString(_enumClass()).constructLookup();
        this;
        JVM INSTR monitorexit ;
        _lookupByToString = compactstringobjectmap;
        return compactstringobjectmap;
        Exception exception;
        exception;
        this;
        JVM INSTR monitorexit ;
        throw exception;
    }

    public Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        Object obj = jsonparser.getCurrentToken();
        if (obj == JsonToken.VALUE_STRING || obj == JsonToken.FIELD_NAME) {
            Object obj1;
            String s;
            if (deserializationcontext.isEnabled(DeserializationFeature.READ_ENUMS_USING_TO_STRING))
                obj = _getToStringLookup();
            else
                obj = _lookupByName;
            s = jsonparser.getText();
            obj1 = ((CompactStringObjectMap) (obj)).find(s);
            if (obj1 == null)
                jsonparser = ((JsonParser) (_deserializeAltString(jsonparser, deserializationcontext, ((CompactStringObjectMap) (obj)), s)));
            else
                jsonparser = ((JsonParser) (obj1));
        } else
        if (obj == JsonToken.VALUE_NUMBER_INT) {
            int i = jsonparser.getIntValue();
            if (deserializationcontext.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS))
                _failOnNumber(deserializationcontext, jsonparser, i);
            if (i >= 0 && i <= _enumsByIndex.length) {
                jsonparser = ((JsonParser) (_enumsByIndex[i]));
            } else {
                if (!deserializationcontext.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL))
                    throw deserializationcontext.weirdNumberException(Integer.valueOf(i), _enumClass(), (new StringBuilder()).append("index value outside legal index range [0..").append(_enumsByIndex.length - 1).append("]").toString());
                jsonparser = null;
            }
        } else {
            jsonparser = ((JsonParser) (_deserializeOther(jsonparser, deserializationcontext)));
        }
        return jsonparser;
    }

    public boolean isCachable() {
        return true;
    }
}
