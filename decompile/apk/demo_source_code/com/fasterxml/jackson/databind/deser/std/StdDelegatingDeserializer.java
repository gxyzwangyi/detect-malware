// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.ContextualDeserializer;
import com.fasterxml.jackson.databind.deser.ResolvableDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.util.Converter;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            StdDeserializer

public class StdDelegatingDeserializer extends StdDeserializer
    implements ContextualDeserializer, ResolvableDeserializer {

    private static final long serialVersionUID = 1L;
    protected final Converter _converter;
    protected final JsonDeserializer _delegateDeserializer;
    protected final JavaType _delegateType;

    protected StdDelegatingDeserializer(StdDelegatingDeserializer stddelegatingdeserializer) {
        super(stddelegatingdeserializer);
        _converter = stddelegatingdeserializer._converter;
        _delegateType = stddelegatingdeserializer._delegateType;
        _delegateDeserializer = stddelegatingdeserializer._delegateDeserializer;
    }

    public StdDelegatingDeserializer(Converter converter) {
        super(java/lang/Object);
        _converter = converter;
        _delegateType = null;
        _delegateDeserializer = null;
    }

    public StdDelegatingDeserializer(Converter converter, JavaType javatype, JsonDeserializer jsondeserializer) {
        super(javatype);
        _converter = converter;
        _delegateType = javatype;
        _delegateDeserializer = jsondeserializer;
    }

    protected Object _handleIncompatibleUpdateValue(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj) {
        throw new UnsupportedOperationException(String.format((new StringBuilder()).append("Can not update object of type %s (using deserializer for type %s)").append(obj.getClass().getName()).toString(), new Object[] {
            _delegateType
        }));
    }

    protected Object convertValue(Object obj) {
        return _converter.convert(obj);
    }

    public JsonDeserializer createContextual(DeserializationContext deserializationcontext, BeanProperty beanproperty) {
        if (_delegateDeserializer != null) {
            beanproperty = deserializationcontext.handleSecondaryContextualization(_delegateDeserializer, beanproperty, _delegateType);
            deserializationcontext = this;
            if (beanproperty != _delegateDeserializer)
                deserializationcontext = withDelegate(_converter, _delegateType, beanproperty);
        } else {
            JavaType javatype = _converter.getInputType(deserializationcontext.getTypeFactory());
            deserializationcontext = withDelegate(_converter, javatype, deserializationcontext.findContextualValueDeserializer(javatype, beanproperty));
        }
        return deserializationcontext;
    }

    public Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        jsonparser = ((JsonParser) (_delegateDeserializer.deserialize(jsonparser, deserializationcontext)));
        if (jsonparser == null)
            jsonparser = null;
        else
            jsonparser = ((JsonParser) (convertValue(jsonparser)));
        return jsonparser;
    }

    public Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj) {
        if (_delegateType.getRawClass().isAssignableFrom(obj.getClass()))
            jsonparser = ((JsonParser) (_delegateDeserializer.deserialize(jsonparser, deserializationcontext, obj)));
        else
            jsonparser = ((JsonParser) (_handleIncompatibleUpdateValue(jsonparser, deserializationcontext, obj)));
        return jsonparser;
    }

    public Object deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
        jsonparser = ((JsonParser) (_delegateDeserializer.deserialize(jsonparser, deserializationcontext)));
        if (jsonparser == null)
            jsonparser = null;
        else
            jsonparser = ((JsonParser) (convertValue(jsonparser)));
        return jsonparser;
    }

    public JsonDeserializer getDelegatee() {
        return _delegateDeserializer;
    }

    public Class handledType() {
        return _delegateDeserializer.handledType();
    }

    public void resolve(DeserializationContext deserializationcontext) {
        if (_delegateDeserializer != null && (_delegateDeserializer instanceof ResolvableDeserializer))
            ((ResolvableDeserializer)_delegateDeserializer).resolve(deserializationcontext);
    }

    protected StdDelegatingDeserializer withDelegate(Converter converter, JavaType javatype, JsonDeserializer jsondeserializer) {
        if (getClass() != com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer)
            throw new IllegalStateException((new StringBuilder()).append("Sub-class ").append(getClass().getName()).append(" must override 'withDelegate'").toString());
        else
            return new StdDelegatingDeserializer(converter, javatype, jsondeserializer);
    }
}
