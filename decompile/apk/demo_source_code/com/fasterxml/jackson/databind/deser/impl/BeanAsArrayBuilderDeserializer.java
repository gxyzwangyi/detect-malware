// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.impl;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.*;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.lang.reflect.Method;
import java.util.HashSet;

// Referenced classes of package com.fasterxml.jackson.databind.deser.impl:
//            PropertyBasedCreator, PropertyValueBuffer, ObjectIdReader

public class BeanAsArrayBuilderDeserializer extends BeanDeserializerBase {

    private static final long serialVersionUID = 1L;
    protected final AnnotatedMethod _buildMethod;
    protected final BeanDeserializerBase _delegate;
    protected final SettableBeanProperty _orderedProperties[];

    public BeanAsArrayBuilderDeserializer(BeanDeserializerBase beandeserializerbase, SettableBeanProperty asettablebeanproperty[], AnnotatedMethod annotatedmethod) {
        super(beandeserializerbase);
        _delegate = beandeserializerbase;
        _orderedProperties = asettablebeanproperty;
        _buildMethod = annotatedmethod;
    }

    protected Object _deserializeFromNonArray(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        throw deserializationcontext.mappingException("Can not deserialize a POJO (of type %s) from non-Array representation (token: %s): type/property designed to be serialized as JSON Array", new Object[] {
            _beanType.getRawClass().getName(), jsonparser.getCurrentToken()
        });
    }

    protected Object _deserializeNonVanilla(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (!_nonStandardCreation) goto _L2; else goto _L1
_L1:
        jsonparser = ((JsonParser) (_deserializeWithCreator(jsonparser, deserializationcontext)));
_L4:
        return jsonparser;
_L2:
        Object obj = _valueInstantiator.createUsingDefault(deserializationcontext);
        if (_injectables != null)
            injectValues(deserializationcontext, obj);
        int i;
        int j;
        Class class1;
        SettableBeanProperty asettablebeanproperty[];
        if (_needViewProcesing)
            class1 = deserializationcontext.getActiveView();
        else
            class1 = null;
        asettablebeanproperty = _orderedProperties;
        j = asettablebeanproperty.length;
        i = 0;
        do {
            if (jsonparser.nextToken() == JsonToken.END_ARRAY) {
                jsonparser = ((JsonParser) (obj));
                continue; /* Loop/switch isn't completed */
            }
            if (i == j) {
                if (!_ignoreAllUnknown)
                    throw deserializationcontext.mappingException("Unexpected JSON values; expected at most %d properties (in JSON Array)", new Object[] {
                        Integer.valueOf(j)
                    });
                break;
            }
            SettableBeanProperty settablebeanproperty = asettablebeanproperty[i];
            i++;
            if (settablebeanproperty != null && (class1 == null || settablebeanproperty.visibleInView(class1)))
                try {
                    settablebeanproperty.deserializeSetAndReturn(jsonparser, deserializationcontext, obj);
                }
                catch (Exception exception) {
                    wrapAndThrow(exception, obj, settablebeanproperty.getName(), deserializationcontext);
                }
            else
                jsonparser.skipChildren();
        } while (true);
        for (; jsonparser.nextToken() != JsonToken.END_ARRAY; jsonparser.skipChildren());
        jsonparser = ((JsonParser) (obj));
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected final Object _deserializeUsingPropertyBased(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        int i;
        int j;
        Object obj;
        Object obj2;
        PropertyValueBuffer propertyvaluebuffer;
        PropertyBasedCreator propertybasedcreator;
        SettableBeanProperty asettablebeanproperty[];
        obj2 = null;
        propertybasedcreator = _propertyBasedCreator;
        propertyvaluebuffer = propertybasedcreator.startBuilding(jsonparser, deserializationcontext, _objectIdReader);
        asettablebeanproperty = _orderedProperties;
        j = asettablebeanproperty.length;
        obj = null;
        i = 0;
_L1:
        Object obj1;
        SettableBeanProperty settablebeanproperty;
        if (jsonparser.nextToken() == JsonToken.END_ARRAY)
            break MISSING_BLOCK_LABEL_302;
        if (i < j)
            settablebeanproperty = asettablebeanproperty[i];
        else
            settablebeanproperty = null;
        if (settablebeanproperty == null) {
            jsonparser.skipChildren();
            obj1 = obj;
        } else {
label0:
            {
                if (obj == null)
                    break label0;
                try {
                    obj1 = settablebeanproperty.deserializeSetAndReturn(jsonparser, deserializationcontext, obj);
                }
                // Misplaced declaration of an exception variable
                catch (Object obj1) {
                    wrapAndThrow(((Throwable) (obj1)), obj, settablebeanproperty.getName(), deserializationcontext);
                    obj1 = obj;
                }
            }
        }
_L3:
        i++;
        obj = obj1;
          goto _L1
        String s;
        SettableBeanProperty settablebeanproperty1;
        s = settablebeanproperty.getName();
        settablebeanproperty1 = propertybasedcreator.findCreatorProperty(s);
        if (settablebeanproperty1 == null)
            break MISSING_BLOCK_LABEL_267;
        obj1 = obj;
        if (!propertyvaluebuffer.assignParameter(settablebeanproperty1, settablebeanproperty1.deserialize(jsonparser, deserializationcontext))) goto _L3; else goto _L2
_L2:
        obj1 = propertybasedcreator.build(deserializationcontext, propertyvaluebuffer);
        obj = obj1;
        obj1 = obj;
        if (obj.getClass() != _beanType.getRawClass())
            throw deserializationcontext.mappingException("Can not support implicit polymorphic deserialization for POJOs-as-Arrays style: nominal type %s, actual type %s", new Object[] {
                _beanType.getRawClass().getName(), obj.getClass().getName()
            });
          goto _L3
        obj1;
        wrapAndThrow(((Throwable) (obj1)), _beanType.getRawClass(), s, deserializationcontext);
        obj1 = obj;
          goto _L3
        obj1 = obj;
        if (!propertyvaluebuffer.readIdProperty(s)) {
            propertyvaluebuffer.bufferProperty(settablebeanproperty, settablebeanproperty.deserialize(jsonparser, deserializationcontext));
            obj1 = obj;
        }
          goto _L3
        jsonparser = ((JsonParser) (obj));
        if (obj == null)
            try {
                jsonparser = ((JsonParser) (propertybasedcreator.build(deserializationcontext, propertyvaluebuffer)));
            }
            // Misplaced declaration of an exception variable
            catch (JsonParser jsonparser) {
                wrapInstantiationProblem(jsonparser, deserializationcontext);
                jsonparser = obj2;
            }
        return jsonparser;
    }

    protected Object _deserializeWithCreator(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (_delegateDeserializer == null) goto _L2; else goto _L1
_L1:
        jsonparser = ((JsonParser) (_valueInstantiator.createUsingDelegate(deserializationcontext, _delegateDeserializer.deserialize(jsonparser, deserializationcontext))));
_L4:
        return jsonparser;
_L2:
        if (_propertyBasedCreator == null)
            break; /* Loop/switch isn't completed */
        jsonparser = ((JsonParser) (_deserializeUsingPropertyBased(jsonparser, deserializationcontext)));
        if (true) goto _L4; else goto _L3
_L3:
        if (_beanType.isAbstract())
            throw JsonMappingException.from(jsonparser, (new StringBuilder()).append("Can not instantiate abstract type ").append(_beanType).append(" (need to add/enable type information?)").toString());
        else
            throw JsonMappingException.from(jsonparser, (new StringBuilder()).append("No suitable constructor found for type ").append(_beanType).append(": can not instantiate from JSON object (need to add/enable type information?)").toString());
    }

    protected volatile BeanDeserializerBase asArrayDeserializer() {
        return asArrayDeserializer();
    }

    protected BeanAsArrayBuilderDeserializer asArrayDeserializer() {
        return this;
    }

    public Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (jsonparser.isExpectedStartArrayToken()) goto _L2; else goto _L1
_L1:
        jsonparser = ((JsonParser) (finishBuild(deserializationcontext, _deserializeFromNonArray(jsonparser, deserializationcontext))));
_L7:
        return jsonparser;
_L2:
        int i;
        int j;
        Object obj;
        SettableBeanProperty asettablebeanproperty[];
        if (!_vanillaProcessing) {
            jsonparser = ((JsonParser) (finishBuild(deserializationcontext, _deserializeNonVanilla(jsonparser, deserializationcontext))));
            continue; /* Loop/switch isn't completed */
        }
        obj = _valueInstantiator.createUsingDefault(deserializationcontext);
        asettablebeanproperty = _orderedProperties;
        j = asettablebeanproperty.length;
        i = 0;
_L4:
        SettableBeanProperty settablebeanproperty;
        if (jsonparser.nextToken() == JsonToken.END_ARRAY) {
            jsonparser = ((JsonParser) (finishBuild(deserializationcontext, obj)));
            continue; /* Loop/switch isn't completed */
        }
        if (i == j) {
            if (!_ignoreAllUnknown)
                throw deserializationcontext.mappingException("Unexpected JSON values; expected at most %d properties (in JSON Array)", new Object[] {
                    Integer.valueOf(j)
                });
            break MISSING_BLOCK_LABEL_178;
        }
        settablebeanproperty = asettablebeanproperty[i];
        if (settablebeanproperty == null)
            break; /* Loop/switch isn't completed */
        Object obj1 = settablebeanproperty.deserializeSetAndReturn(jsonparser, deserializationcontext, obj);
        obj = obj1;
_L5:
        i++;
        if (true) goto _L4; else goto _L3
        Exception exception;
        exception;
        wrapAndThrow(exception, obj, settablebeanproperty.getName(), deserializationcontext);
          goto _L5
_L3:
        jsonparser.skipChildren();
          goto _L5
        for (; jsonparser.nextToken() != JsonToken.END_ARRAY; jsonparser.skipChildren());
        jsonparser = ((JsonParser) (finishBuild(deserializationcontext, obj)));
        if (true) goto _L7; else goto _L6
_L6:
    }

    public Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj) {
        int i;
        int j;
        SettableBeanProperty asettablebeanproperty[];
        if (_injectables != null)
            injectValues(deserializationcontext, obj);
        asettablebeanproperty = _orderedProperties;
        j = asettablebeanproperty.length;
        i = 0;
_L3:
        if (jsonparser.nextToken() != JsonToken.END_ARRAY) goto _L2; else goto _L1
_L1:
        jsonparser = ((JsonParser) (finishBuild(deserializationcontext, obj)));
_L5:
        return jsonparser;
_L2:
        SettableBeanProperty settablebeanproperty;
        if (i == j) {
            if (!_ignoreAllUnknown)
                throw deserializationcontext.mappingException("Unexpected JSON values; expected at most %d properties (in JSON Array)", new Object[] {
                    Integer.valueOf(j)
                });
            break MISSING_BLOCK_LABEL_136;
        }
        settablebeanproperty = asettablebeanproperty[i];
        if (settablebeanproperty == null)
            break MISSING_BLOCK_LABEL_128;
        Object obj1 = settablebeanproperty.deserializeSetAndReturn(jsonparser, deserializationcontext, obj);
        obj = obj1;
_L4:
        i++;
          goto _L3
        Exception exception;
        exception;
        wrapAndThrow(exception, obj, settablebeanproperty.getName(), deserializationcontext);
          goto _L4
        jsonparser.skipChildren();
          goto _L4
        for (; jsonparser.nextToken() != JsonToken.END_ARRAY; jsonparser.skipChildren());
        jsonparser = ((JsonParser) (finishBuild(deserializationcontext, obj)));
          goto _L5
    }

    public Object deserializeFromObject(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        return _deserializeFromNonArray(jsonparser, deserializationcontext);
    }

    protected final Object finishBuild(DeserializationContext deserializationcontext, Object obj) {
        obj = _buildMethod.getMember().invoke(obj, new Object[0]);
        deserializationcontext = ((DeserializationContext) (obj));
_L2:
        return deserializationcontext;
        obj;
        wrapInstantiationProblem(((Throwable) (obj)), deserializationcontext);
        deserializationcontext = null;
        if (true) goto _L2; else goto _L1
_L1:
    }

    public JsonDeserializer unwrappingDeserializer(NameTransformer nametransformer) {
        return _delegate.unwrappingDeserializer(nametransformer);
    }

    public volatile BeanDeserializerBase withIgnorableProperties(HashSet hashset) {
        return withIgnorableProperties(hashset);
    }

    public BeanAsArrayBuilderDeserializer withIgnorableProperties(HashSet hashset) {
        return new BeanAsArrayBuilderDeserializer(_delegate.withIgnorableProperties(hashset), _orderedProperties, _buildMethod);
    }

    public volatile BeanDeserializerBase withObjectIdReader(ObjectIdReader objectidreader) {
        return withObjectIdReader(objectidreader);
    }

    public BeanAsArrayBuilderDeserializer withObjectIdReader(ObjectIdReader objectidreader) {
        return new BeanAsArrayBuilderDeserializer(_delegate.withObjectIdReader(objectidreader), _orderedProperties, _buildMethod);
    }
}
