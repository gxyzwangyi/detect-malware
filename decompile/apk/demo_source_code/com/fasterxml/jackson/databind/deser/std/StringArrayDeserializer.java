// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.deser.std;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.ContextualDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.util.ObjectBuffer;

// Referenced classes of package com.fasterxml.jackson.databind.deser.std:
//            StdDeserializer

public final class StringArrayDeserializer extends StdDeserializer
    implements ContextualDeserializer {

    public static final StringArrayDeserializer instance = new StringArrayDeserializer();
    private static final long serialVersionUID = 2L;
    protected JsonDeserializer _elementDeserializer;
    protected final Boolean _unwrapSingle;

    public StringArrayDeserializer() {
        this(null, null);
    }

    protected StringArrayDeserializer(JsonDeserializer jsondeserializer, Boolean boolean1) {
        super([Ljava/lang/String;);
        _elementDeserializer = jsondeserializer;
        _unwrapSingle = boolean1;
    }

    private final String[] handleNonArray(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        String as[];
        Object obj;
        obj = null;
        as = null;
        boolean flag;
        if (_unwrapSingle == Boolean.TRUE || _unwrapSingle == null && deserializationcontext.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY))
            flag = true;
        else
            flag = false;
        if (!flag) goto _L2; else goto _L1
_L1:
        if (jsonparser.hasToken(JsonToken.VALUE_NULL))
            jsonparser = as;
        else
            jsonparser = _parseString(jsonparser, deserializationcontext);
        as = (new String[] {
            jsonparser
        });
_L4:
        return as;
_L2:
        if (!jsonparser.hasToken(JsonToken.VALUE_STRING) || !deserializationcontext.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT))
            break; /* Loop/switch isn't completed */
        as = obj;
        if (jsonparser.getText().length() == 0) goto _L4; else goto _L3
_L3:
        throw deserializationcontext.mappingException(_valueClass);
    }

    protected final String[] _deserializeCustom(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        int i;
        Object aobj[];
        ObjectBuffer objectbuffer;
        JsonDeserializer jsondeserializer;
        objectbuffer = deserializationcontext.leaseObjectBuffer();
        aobj = objectbuffer.resetAndStart();
        jsondeserializer = _elementDeserializer;
        i = 0;
_L5:
        int j = i;
        if (jsonparser.nextTextValue() != null) goto _L2; else goto _L1
_L1:
        Object obj;
        j = i;
        JsonToken jsontoken;
        try {
            obj = jsonparser.getCurrentToken();
        }
        // Misplaced declaration of an exception variable
        catch (JsonParser jsonparser) {
            throw JsonMappingException.wrapWithPath(jsonparser, java/lang/String, j);
        }
        j = i;
        jsontoken = JsonToken.END_ARRAY;
        if (obj == jsontoken) {
            jsonparser = (String[])objectbuffer.completeAndClearBuffer(aobj, i, java/lang/String);
            deserializationcontext.returnObjectBuffer(objectbuffer);
            return jsonparser;
        }
        j = i;
        if (obj != JsonToken.VALUE_NULL) goto _L4; else goto _L3
_L3:
        j = i;
        obj = (String)jsondeserializer.getNullValue(deserializationcontext);
_L6:
        j = i;
        if (i < aobj.length)
            break MISSING_BLOCK_LABEL_126;
        j = i;
        aobj = objectbuffer.appendCompletedChunk(aobj);
        i = 0;
        j = i + 1;
        aobj[i] = obj;
        i = j;
          goto _L5
_L4:
        j = i;
        obj = (String)jsondeserializer.deserialize(jsonparser, deserializationcontext);
          goto _L6
_L2:
        j = i;
        obj = (String)jsondeserializer.deserialize(jsonparser, deserializationcontext);
          goto _L6
    }

    public JsonDeserializer createContextual(DeserializationContext deserializationcontext, BeanProperty beanproperty) {
        JsonDeserializer jsondeserializer = findConvertingContentDeserializer(deserializationcontext, beanproperty, _elementDeserializer);
        Object obj = deserializationcontext.constructType(java/lang/String);
        if (jsondeserializer == null)
            obj = deserializationcontext.findContextualValueDeserializer(((com.fasterxml.jackson.databind.JavaType) (obj)), beanproperty);
        else
            obj = deserializationcontext.handleSecondaryContextualization(jsondeserializer, beanproperty, ((com.fasterxml.jackson.databind.JavaType) (obj)));
        beanproperty = findFormatFeature(deserializationcontext, beanproperty, [Ljava/lang/String;, com.fasterxml.jackson.annotation.JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
        deserializationcontext = ((DeserializationContext) (obj));
        if (obj != null) {
            deserializationcontext = ((DeserializationContext) (obj));
            if (isDefaultDeserializer(((JsonDeserializer) (obj))))
                deserializationcontext = null;
        }
        if (_elementDeserializer == deserializationcontext && _unwrapSingle == beanproperty)
            deserializationcontext = this;
        else
            deserializationcontext = new StringArrayDeserializer(deserializationcontext, beanproperty);
        return deserializationcontext;
    }

    public volatile Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        return deserialize(jsonparser, deserializationcontext);
    }

    public String[] deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (jsonparser.isExpectedStartArrayToken()) goto _L2; else goto _L1
_L1:
        jsonparser = handleNonArray(jsonparser, deserializationcontext);
_L6:
        return jsonparser;
_L2:
        int i;
        Object aobj[];
        ObjectBuffer objectbuffer;
        if (_elementDeserializer != null) {
            jsonparser = _deserializeCustom(jsonparser, deserializationcontext);
            continue; /* Loop/switch isn't completed */
        }
        objectbuffer = deserializationcontext.leaseObjectBuffer();
        aobj = objectbuffer.resetAndStart();
        i = 0;
_L4:
        int j;
        Object aobj1[];
        j = i;
        aobj1 = aobj;
        String s = jsonparser.nextTextValue();
        if (s != null)
            break MISSING_BLOCK_LABEL_151;
        j = i;
        aobj1 = aobj;
        JsonToken jsontoken1 = jsonparser.getCurrentToken();
        j = i;
        aobj1 = aobj;
        JsonToken jsontoken = JsonToken.END_ARRAY;
        if (jsontoken1 == jsontoken) {
            jsonparser = (String[])objectbuffer.completeAndClearBuffer(aobj, i, java/lang/String);
            deserializationcontext.returnObjectBuffer(objectbuffer);
            continue; /* Loop/switch isn't completed */
        }
        j = i;
        aobj1 = aobj;
        if (jsontoken1 == JsonToken.VALUE_NULL)
            break MISSING_BLOCK_LABEL_151;
        j = i;
        aobj1 = aobj;
        s = _parseString(jsonparser, deserializationcontext);
        j = i;
        aobj1 = aobj;
        if (i < aobj.length)
            break MISSING_BLOCK_LABEL_183;
        j = i;
        aobj1 = aobj;
        aobj = objectbuffer.appendCompletedChunk(aobj);
        i = 0;
        j = i + 1;
        aobj[i] = s;
        i = j;
        if (true) goto _L4; else goto _L3
_L3:
        jsonparser;
        throw JsonMappingException.wrapWithPath(jsonparser, ((Object) (aobj1)), j + objectbuffer.bufferedSize());
        if (true) goto _L6; else goto _L5
_L5:
    }

    public Object deserializeWithType(JsonParser jsonparser, DeserializationContext deserializationcontext, TypeDeserializer typedeserializer) {
        return typedeserializer.deserializeTypedFromArray(jsonparser, deserializationcontext);
    }

}
