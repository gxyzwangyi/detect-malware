// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.NameTransformer;
import java.util.Iterator;

// Referenced classes of package com.fasterxml.jackson.databind:
//            SerializerProvider, JavaType

public abstract class JsonSerializer
    implements JsonFormatVisitable {
    public static abstract class None extends JsonSerializer {

        public None() {
        }
    }


    public JsonSerializer() {
    }

    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
        if (jsonformatvisitorwrapper != null)
            jsonformatvisitorwrapper.expectAnyFormat(javatype);
    }

    public JsonSerializer getDelegatee() {
        return null;
    }

    public Class handledType() {
        return null;
    }

    public boolean isEmpty(SerializerProvider serializerprovider, Object obj) {
        boolean flag;
        if (obj == null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean isEmpty(Object obj) {
        return isEmpty(null, obj);
    }

    public boolean isUnwrappingSerializer() {
        return false;
    }

    public Iterator properties() {
        return ClassUtil.emptyIterator();
    }

    public JsonSerializer replaceDelegatee(JsonSerializer jsonserializer) {
        throw new UnsupportedOperationException();
    }

    public abstract void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider);

    public void serializeWithType(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, TypeSerializer typeserializer) {
        typeserializer = handledType();
        jsongenerator = typeserializer;
        if (typeserializer == null)
            jsongenerator = obj.getClass();
        throw serializerprovider.mappingException("Type id handling not implemented for type %s (by serializer of type %s)", new Object[] {
            jsongenerator.getName(), getClass().getName()
        });
    }

    public JsonSerializer unwrappingSerializer(NameTransformer nametransformer) {
        return this;
    }

    public boolean usesObjectId() {
        return false;
    }

    public JsonSerializer withFilterId(Object obj) {
        return this;
    }
}
