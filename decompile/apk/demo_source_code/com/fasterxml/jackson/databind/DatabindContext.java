// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind;

import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Converter;
import java.lang.reflect.Type;
import java.util.Locale;
import java.util.TimeZone;

// Referenced classes of package com.fasterxml.jackson.databind:
//            JavaType, AnnotationIntrospector, MapperFeature

public abstract class DatabindContext {

    public DatabindContext() {
    }

    public abstract boolean canOverrideAccessModifiers();

    public JavaType constructSpecializedType(JavaType javatype, Class class1) {
        if (javatype.getRawClass() != class1)
            javatype = getConfig().constructSpecializedType(javatype, class1);
        return javatype;
    }

    public JavaType constructType(Type type) {
        return getTypeFactory().constructType(type);
    }

    public Converter converterInstance(Annotated annotated, Object obj) {
        Object obj1 = null;
        if (obj == null)
            annotated = null;
        else
        if (obj instanceof Converter) {
            annotated = (Converter)obj;
        } else {
            if (!(obj instanceof Class))
                throw new IllegalStateException((new StringBuilder()).append("AnnotationIntrospector returned Converter definition of type ").append(obj.getClass().getName()).append("; expected type Converter or Class<Converter> instead").toString());
            Class class1 = (Class)obj;
            if (class1 == com/fasterxml/jackson/databind/util/Converter$None || ClassUtil.isBogusClass(class1)) {
                annotated = null;
            } else {
                if (!com/fasterxml/jackson/databind/util/Converter.isAssignableFrom(class1))
                    throw new IllegalStateException((new StringBuilder()).append("AnnotationIntrospector returned Class ").append(class1.getName()).append("; expected Class<Converter>").toString());
                MapperConfig mapperconfig = getConfig();
                obj = mapperconfig.getHandlerInstantiator();
                if (obj == null)
                    annotated = obj1;
                else
                    annotated = ((HandlerInstantiator) (obj)).converterInstance(mapperconfig, annotated, class1);
                obj = annotated;
                if (annotated == null)
                    obj = (Converter)ClassUtil.createInstance(class1, mapperconfig.canOverrideAccessModifiers());
                annotated = ((Annotated) (obj));
            }
        }
        return annotated;
    }

    public abstract Class getActiveView();

    public abstract AnnotationIntrospector getAnnotationIntrospector();

    public abstract Object getAttribute(Object obj);

    public abstract MapperConfig getConfig();

    public abstract com.fasterxml.jackson.annotation.JsonFormat.Value getDefaultPropertyFormat(Class class1);

    public abstract Locale getLocale();

    public abstract TimeZone getTimeZone();

    public abstract TypeFactory getTypeFactory();

    public abstract boolean isEnabled(MapperFeature mapperfeature);

    public ObjectIdGenerator objectIdGeneratorInstance(Annotated annotated, ObjectIdInfo objectidinfo) {
        Class class1 = objectidinfo.getGeneratorType();
        MapperConfig mapperconfig = getConfig();
        Object obj = mapperconfig.getHandlerInstantiator();
        if (obj == null)
            annotated = null;
        else
            annotated = ((HandlerInstantiator) (obj)).objectIdGeneratorInstance(mapperconfig, annotated, class1);
        obj = annotated;
        if (annotated == null)
            obj = (ObjectIdGenerator)ClassUtil.createInstance(class1, mapperconfig.canOverrideAccessModifiers());
        return ((ObjectIdGenerator) (obj)).forScope(objectidinfo.getScope());
    }

    public ObjectIdResolver objectIdResolverInstance(Annotated annotated, ObjectIdInfo objectidinfo) {
        Class class1 = objectidinfo.getResolverType();
        MapperConfig mapperconfig = getConfig();
        objectidinfo = mapperconfig.getHandlerInstantiator();
        if (objectidinfo == null)
            annotated = null;
        else
            annotated = objectidinfo.resolverIdGeneratorInstance(mapperconfig, annotated, class1);
        objectidinfo = annotated;
        if (annotated == null)
            objectidinfo = (ObjectIdResolver)ClassUtil.createInstance(class1, mapperconfig.canOverrideAccessModifiers());
        return objectidinfo;
    }

    public abstract DatabindContext setAttribute(Object obj, Object obj1);
}
