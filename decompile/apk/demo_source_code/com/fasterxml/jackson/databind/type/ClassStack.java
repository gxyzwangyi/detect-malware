// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.type;

import com.fasterxml.jackson.databind.JavaType;
import java.util.ArrayList;
import java.util.Iterator;

// Referenced classes of package com.fasterxml.jackson.databind.type:
//            ResolvedRecursiveType

public final class ClassStack {

    protected final Class _current;
    protected final ClassStack _parent;
    private ArrayList _selfRefs;

    private ClassStack(ClassStack classstack, Class class1) {
        _parent = classstack;
        _current = class1;
    }

    public ClassStack(Class class1) {
        this(null, class1);
    }

    public void addSelfReference(ResolvedRecursiveType resolvedrecursivetype) {
        if (_selfRefs == null)
            _selfRefs = new ArrayList();
        _selfRefs.add(resolvedrecursivetype);
    }

    public ClassStack child(Class class1) {
        return new ClassStack(this, class1);
    }

    public ClassStack find(Class class1) {
        if (_current != class1) goto _L2; else goto _L1
_L1:
        ClassStack classstack = this;
_L4:
        return classstack;
_L2:
        for (ClassStack classstack1 = _parent; classstack1 != null; classstack1 = classstack1._parent) {
            classstack = classstack1;
            if (classstack1._current == class1)
                continue; /* Loop/switch isn't completed */
        }

        classstack = null;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void resolveSelfReferences(JavaType javatype) {
        if (_selfRefs != null) {
            for (Iterator iterator = _selfRefs.iterator(); iterator.hasNext(); ((ResolvedRecursiveType)iterator.next()).setReference(javatype));
        }
    }

    public String toString() {
        StringBuilder stringbuilder = new StringBuilder();
        StringBuilder stringbuilder1 = stringbuilder.append("[ClassStack (self-refs: ");
        Object obj;
        if (_selfRefs == null)
            obj = "0";
        else
            obj = String.valueOf(_selfRefs.size());
        stringbuilder1.append(((String) (obj))).append(')');
        for (obj = this; obj != null; obj = ((ClassStack) (obj))._parent)
            stringbuilder.append(' ').append(((ClassStack) (obj))._current.getName());

        stringbuilder.append(']');
        return stringbuilder.toString();
    }
}
