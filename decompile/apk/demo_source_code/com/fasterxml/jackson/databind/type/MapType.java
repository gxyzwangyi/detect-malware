// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.type;

import com.fasterxml.jackson.databind.JavaType;

// Referenced classes of package com.fasterxml.jackson.databind.type:
//            MapLikeType, TypeBindings, TypeBase

public final class MapType extends MapLikeType {

    private static final long serialVersionUID = 1L;

    protected MapType(TypeBase typebase, JavaType javatype, JavaType javatype1) {
        super(typebase, javatype, javatype1);
    }

    private MapType(Class class1, TypeBindings typebindings, JavaType javatype, JavaType ajavatype[], JavaType javatype1, JavaType javatype2, Object obj, 
            Object obj1, boolean flag) {
        super(class1, typebindings, javatype, ajavatype, javatype1, javatype2, obj, obj1, flag);
    }

    public static MapType construct(Class class1, JavaType javatype, JavaType javatype1) {
        java.lang.reflect.TypeVariable atypevariable[] = class1.getTypeParameters();
        TypeBindings typebindings;
        if (atypevariable == null || atypevariable.length != 2)
            typebindings = TypeBindings.emptyBindings();
        else
            typebindings = TypeBindings.create(class1, javatype, javatype1);
        return new MapType(class1, typebindings, _bogusSuperClass(class1), null, javatype, javatype1, null, null, false);
    }

    public static MapType construct(Class class1, TypeBindings typebindings, JavaType javatype, JavaType ajavatype[], JavaType javatype1, JavaType javatype2) {
        return new MapType(class1, typebindings, javatype, ajavatype, javatype1, javatype2, null, null, false);
    }

    protected JavaType _narrow(Class class1) {
        return new MapType(class1, _bindings, _superClass, _superInterfaces, _keyType, _valueType, _valueHandler, _typeHandler, _asStatic);
    }

    public JavaType refine(Class class1, TypeBindings typebindings, JavaType javatype, JavaType ajavatype[]) {
        return new MapType(class1, typebindings, javatype, ajavatype, _keyType, _valueType, _valueHandler, _typeHandler, _asStatic);
    }

    public String toString() {
        return (new StringBuilder()).append("[map type; class ").append(_class.getName()).append(", ").append(_keyType).append(" -> ").append(_valueType).append("]").toString();
    }

    public JavaType withContentType(JavaType javatype) {
        if (_valueType == javatype)
            javatype = this;
        else
            javatype = new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType, javatype, _valueHandler, _typeHandler, _asStatic);
        return javatype;
    }

    public volatile JavaType withContentTypeHandler(Object obj) {
        return withContentTypeHandler(obj);
    }

    public volatile MapLikeType withContentTypeHandler(Object obj) {
        return withContentTypeHandler(obj);
    }

    public MapType withContentTypeHandler(Object obj) {
        return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType, _valueType.withTypeHandler(obj), _valueHandler, _typeHandler, _asStatic);
    }

    public volatile JavaType withContentValueHandler(Object obj) {
        return withContentValueHandler(obj);
    }

    public volatile MapLikeType withContentValueHandler(Object obj) {
        return withContentValueHandler(obj);
    }

    public MapType withContentValueHandler(Object obj) {
        return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType, _valueType.withValueHandler(obj), _valueHandler, _typeHandler, _asStatic);
    }

    public volatile MapLikeType withKeyType(JavaType javatype) {
        return withKeyType(javatype);
    }

    public MapType withKeyType(JavaType javatype) {
        if (javatype == _keyType)
            javatype = this;
        else
            javatype = new MapType(_class, _bindings, _superClass, _superInterfaces, javatype, _valueType, _valueHandler, _typeHandler, _asStatic);
        return javatype;
    }

    public volatile MapLikeType withKeyTypeHandler(Object obj) {
        return withKeyTypeHandler(obj);
    }

    public MapType withKeyTypeHandler(Object obj) {
        return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType.withTypeHandler(obj), _valueType, _valueHandler, _typeHandler, _asStatic);
    }

    public volatile MapLikeType withKeyValueHandler(Object obj) {
        return withKeyValueHandler(obj);
    }

    public MapType withKeyValueHandler(Object obj) {
        return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType.withValueHandler(obj), _valueType, _valueHandler, _typeHandler, _asStatic);
    }

    public volatile JavaType withStaticTyping() {
        return withStaticTyping();
    }

    public volatile MapLikeType withStaticTyping() {
        return withStaticTyping();
    }

    public MapType withStaticTyping() {
        MapType maptype;
        if (_asStatic)
            maptype = this;
        else
            maptype = new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType.withStaticTyping(), _valueType.withStaticTyping(), _valueHandler, _typeHandler, true);
        return maptype;
    }

    public volatile JavaType withTypeHandler(Object obj) {
        return withTypeHandler(obj);
    }

    public volatile MapLikeType withTypeHandler(Object obj) {
        return withTypeHandler(obj);
    }

    public MapType withTypeHandler(Object obj) {
        return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType, _valueType, _valueHandler, obj, _asStatic);
    }

    public volatile JavaType withValueHandler(Object obj) {
        return withValueHandler(obj);
    }

    public volatile MapLikeType withValueHandler(Object obj) {
        return withValueHandler(obj);
    }

    public MapType withValueHandler(Object obj) {
        return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType, _valueType, obj, _typeHandler, _asStatic);
    }
}
