// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.type;

import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.databind.JavaType;
import java.lang.reflect.Array;

// Referenced classes of package com.fasterxml.jackson.databind.type:
//            TypeBase, TypeBindings

public final class ArrayType extends TypeBase {

    private static final long serialVersionUID = 1L;
    protected final JavaType _componentType;
    protected final Object _emptyArray;

    protected ArrayType(JavaType javatype, TypeBindings typebindings, Object obj, Object obj1, Object obj2, boolean flag) {
        super(obj.getClass(), typebindings, null, null, javatype.hashCode(), obj1, obj2, flag);
        _componentType = javatype;
        _emptyArray = obj;
    }

    private JavaType _reportUnsupported() {
        throw new UnsupportedOperationException("Can not narrow or widen array types");
    }

    public static ArrayType construct(JavaType javatype, TypeBindings typebindings) {
        return construct(javatype, typebindings, null, null);
    }

    public static ArrayType construct(JavaType javatype, TypeBindings typebindings, Object obj, Object obj1) {
        return new ArrayType(javatype, typebindings, Array.newInstance(javatype.getRawClass(), 0), obj, obj1, false);
    }

    protected JavaType _narrow(Class class1) {
        return _reportUnsupported();
    }

    public boolean equals(Object obj) {
        boolean flag1 = false;
        if (obj != this) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        flag = flag1;
        if (obj != null) {
            flag = flag1;
            if (obj.getClass() == getClass()) {
                obj = (ArrayType)obj;
                flag = _componentType.equals(((ArrayType) (obj))._componentType);
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public volatile ResolvedType getContentType() {
        return getContentType();
    }

    public JavaType getContentType() {
        return _componentType;
    }

    public Object getContentTypeHandler() {
        return _componentType.getTypeHandler();
    }

    public Object getContentValueHandler() {
        return _componentType.getValueHandler();
    }

    public StringBuilder getErasedSignature(StringBuilder stringbuilder) {
        stringbuilder.append('[');
        return _componentType.getErasedSignature(stringbuilder);
    }

    public StringBuilder getGenericSignature(StringBuilder stringbuilder) {
        stringbuilder.append('[');
        return _componentType.getGenericSignature(stringbuilder);
    }

    public boolean hasGenericTypes() {
        return _componentType.hasGenericTypes();
    }

    public boolean isAbstract() {
        return false;
    }

    public boolean isArrayType() {
        return true;
    }

    public boolean isConcrete() {
        return true;
    }

    public boolean isContainerType() {
        return true;
    }

    public JavaType refine(Class class1, TypeBindings typebindings, JavaType javatype, JavaType ajavatype[]) {
        return null;
    }

    public String toString() {
        return (new StringBuilder()).append("[array type, component type: ").append(_componentType).append("]").toString();
    }

    public JavaType withContentType(JavaType javatype) {
        Object obj = Array.newInstance(javatype.getRawClass(), 0);
        return new ArrayType(javatype, _bindings, obj, _valueHandler, _typeHandler, _asStatic);
    }

    public volatile JavaType withContentTypeHandler(Object obj) {
        return withContentTypeHandler(obj);
    }

    public ArrayType withContentTypeHandler(Object obj) {
        if (obj == _componentType.getTypeHandler())
            obj = this;
        else
            obj = new ArrayType(_componentType.withTypeHandler(obj), _bindings, _emptyArray, _valueHandler, _typeHandler, _asStatic);
        return ((ArrayType) (obj));
    }

    public volatile JavaType withContentValueHandler(Object obj) {
        return withContentValueHandler(obj);
    }

    public ArrayType withContentValueHandler(Object obj) {
        if (obj == _componentType.getValueHandler())
            obj = this;
        else
            obj = new ArrayType(_componentType.withValueHandler(obj), _bindings, _emptyArray, _valueHandler, _typeHandler, _asStatic);
        return ((ArrayType) (obj));
    }

    public volatile JavaType withStaticTyping() {
        return withStaticTyping();
    }

    public ArrayType withStaticTyping() {
        ArrayType arraytype;
        if (_asStatic)
            arraytype = this;
        else
            arraytype = new ArrayType(_componentType.withStaticTyping(), _bindings, _emptyArray, _valueHandler, _typeHandler, true);
        return arraytype;
    }

    public volatile JavaType withTypeHandler(Object obj) {
        return withTypeHandler(obj);
    }

    public ArrayType withTypeHandler(Object obj) {
        if (obj == _typeHandler)
            obj = this;
        else
            obj = new ArrayType(_componentType, _bindings, _emptyArray, _valueHandler, obj, _asStatic);
        return ((ArrayType) (obj));
    }

    public volatile JavaType withValueHandler(Object obj) {
        return withValueHandler(obj);
    }

    public ArrayType withValueHandler(Object obj) {
        if (obj == _valueHandler)
            obj = this;
        else
            obj = new ArrayType(_componentType, _bindings, _emptyArray, obj, _typeHandler, _asStatic);
        return ((ArrayType) (obj));
    }
}
