// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.type;

import com.fasterxml.jackson.databind.JavaType;
import java.util.Collection;
import java.util.Map;

// Referenced classes of package com.fasterxml.jackson.databind.type:
//            TypeBase, TypeBindings, TypeFactory

public class SimpleType extends TypeBase {

    private static final long serialVersionUID = 1L;

    protected SimpleType(TypeBase typebase) {
        super(typebase);
    }

    protected SimpleType(Class class1) {
        this(class1, TypeBindings.emptyBindings(), null, null);
    }

    protected SimpleType(Class class1, TypeBindings typebindings, JavaType javatype, JavaType ajavatype[]) {
        this(class1, typebindings, javatype, ajavatype, null, null, false);
    }

    protected SimpleType(Class class1, TypeBindings typebindings, JavaType javatype, JavaType ajavatype[], int i, Object obj, Object obj1, 
            boolean flag) {
        super(class1, typebindings, javatype, ajavatype, i, obj, obj1, flag);
    }

    protected SimpleType(Class class1, TypeBindings typebindings, JavaType javatype, JavaType ajavatype[], Object obj, Object obj1, boolean flag) {
        super(class1, typebindings, javatype, ajavatype, 0, obj, obj1, flag);
    }

    private static JavaType _buildSuperClass(Class class1, TypeBindings typebindings) {
        Object obj = null;
        if (class1 == null)
            class1 = obj;
        else
        if (class1 == java/lang/Object)
            class1 = TypeFactory.unknownType();
        else
            class1 = new SimpleType(class1, typebindings, _buildSuperClass(class1.getSuperclass(), typebindings), null, null, null, false);
        return class1;
    }

    public static SimpleType construct(Class class1) {
        if (java/util/Map.isAssignableFrom(class1))
            throw new IllegalArgumentException((new StringBuilder()).append("Can not construct SimpleType for a Map (class: ").append(class1.getName()).append(")").toString());
        if (java/util/Collection.isAssignableFrom(class1))
            throw new IllegalArgumentException((new StringBuilder()).append("Can not construct SimpleType for a Collection (class: ").append(class1.getName()).append(")").toString());
        if (class1.isArray()) {
            throw new IllegalArgumentException((new StringBuilder()).append("Can not construct SimpleType for an array (class: ").append(class1.getName()).append(")").toString());
        } else {
            TypeBindings typebindings = TypeBindings.emptyBindings();
            return new SimpleType(class1, typebindings, _buildSuperClass(class1.getSuperclass(), typebindings), null, null, null, false);
        }
    }

    public static SimpleType constructUnsafe(Class class1) {
        return new SimpleType(class1, null, null, null, null, null, false);
    }

    protected JavaType _narrow(Class class1) {
        if (_class != class1) goto _L2; else goto _L1
_L1:
        class1 = this;
_L4:
        return class1;
_L2:
        if (!_class.isAssignableFrom(class1)) {
            class1 = new SimpleType(class1, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic);
            continue; /* Loop/switch isn't completed */
        }
        Object obj = class1.getSuperclass();
        if (obj == _class) {
            class1 = new SimpleType(class1, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic);
            continue; /* Loop/switch isn't completed */
        }
        if (obj != null && _class.isAssignableFrom(((Class) (obj)))) {
            obj = _narrow(((Class) (obj)));
            class1 = new SimpleType(class1, _bindings, ((JavaType) (obj)), null, _valueHandler, _typeHandler, _asStatic);
            continue; /* Loop/switch isn't completed */
        }
        Class aclass[] = class1.getInterfaces();
        int j = aclass.length;
        int i = 0;
        do {
            if (i >= j)
                break;
            Object obj2 = aclass[i];
            if (obj2 == _class) {
                obj2 = _bindings;
                Object obj3 = _valueHandler;
                Object obj1 = _typeHandler;
                boolean flag = _asStatic;
                class1 = new SimpleType(class1, ((TypeBindings) (obj2)), null, new JavaType[] {
                    this
                }, obj3, obj1, flag);
                continue; /* Loop/switch isn't completed */
            }
            if (_class.isAssignableFrom(((Class) (obj2)))) {
                JavaType javatype = _narrow(((Class) (obj2)));
                TypeBindings typebindings = _bindings;
                Object obj4 = _valueHandler;
                obj2 = _typeHandler;
                boolean flag1 = _asStatic;
                class1 = new SimpleType(class1, typebindings, null, new JavaType[] {
                    javatype
                }, obj4, obj2, flag1);
                continue; /* Loop/switch isn't completed */
            }
            i++;
        } while (true);
        throw new IllegalArgumentException((new StringBuilder()).append("Internal error: Can not resolve sub-type for Class ").append(class1.getName()).append(" to ").append(_class.getName()).toString());
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected String buildCanonicalName() {
        StringBuilder stringbuilder = new StringBuilder();
        stringbuilder.append(_class.getName());
        int j = _bindings.size();
        if (j > 0) {
            stringbuilder.append('<');
            for (int i = 0; i < j; i++) {
                JavaType javatype = containedType(i);
                if (i > 0)
                    stringbuilder.append(',');
                stringbuilder.append(javatype.toCanonical());
            }

            stringbuilder.append('>');
        }
        return stringbuilder.toString();
    }

    public boolean equals(Object obj) {
        boolean flag1 = false;
        if (obj != this) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        flag = flag1;
        if (obj != null) {
            flag = flag1;
            if (obj.getClass() == getClass()) {
                obj = (SimpleType)obj;
                flag = flag1;
                if (((SimpleType) (obj))._class == _class)
                    flag = _bindings.equals(((SimpleType) (obj))._bindings);
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public StringBuilder getErasedSignature(StringBuilder stringbuilder) {
        return _classSignature(_class, stringbuilder, true);
    }

    public StringBuilder getGenericSignature(StringBuilder stringbuilder) {
        int i = 0;
        _classSignature(_class, stringbuilder, false);
        int j = _bindings.size();
        StringBuilder stringbuilder1 = stringbuilder;
        if (j > 0) {
            stringbuilder.append('<');
            for (; i < j; i++)
                stringbuilder = containedType(i).getGenericSignature(stringbuilder);

            stringbuilder.append('>');
            stringbuilder1 = stringbuilder;
        }
        stringbuilder1.append(';');
        return stringbuilder1;
    }

    public boolean isContainerType() {
        return false;
    }

    public JavaType refine(Class class1, TypeBindings typebindings, JavaType javatype, JavaType ajavatype[]) {
        return null;
    }

    public String toString() {
        StringBuilder stringbuilder = new StringBuilder(40);
        stringbuilder.append("[simple type, class ").append(buildCanonicalName()).append(']');
        return stringbuilder.toString();
    }

    public JavaType withContentType(JavaType javatype) {
        throw new IllegalArgumentException("Simple types have no content types; can not call withContentType()");
    }

    public JavaType withContentTypeHandler(Object obj) {
        throw new IllegalArgumentException("Simple types have no content types; can not call withContenTypeHandler()");
    }

    public volatile JavaType withContentValueHandler(Object obj) {
        return withContentValueHandler(obj);
    }

    public SimpleType withContentValueHandler(Object obj) {
        throw new IllegalArgumentException("Simple types have no content types; can not call withContenValueHandler()");
    }

    public volatile JavaType withStaticTyping() {
        return withStaticTyping();
    }

    public SimpleType withStaticTyping() {
        SimpleType simpletype;
        if (_asStatic)
            simpletype = this;
        else
            simpletype = new SimpleType(_class, _bindings, _superClass, _superInterfaces, _valueHandler, _typeHandler, true);
        return simpletype;
    }

    public volatile JavaType withTypeHandler(Object obj) {
        return withTypeHandler(obj);
    }

    public SimpleType withTypeHandler(Object obj) {
        if (_typeHandler == obj)
            obj = this;
        else
            obj = new SimpleType(_class, _bindings, _superClass, _superInterfaces, _valueHandler, obj, _asStatic);
        return ((SimpleType) (obj));
    }

    public volatile JavaType withValueHandler(Object obj) {
        return withValueHandler(obj);
    }

    public SimpleType withValueHandler(Object obj) {
        if (obj == _valueHandler)
            obj = this;
        else
            obj = new SimpleType(_class, _bindings, _superClass, _superInterfaces, obj, _typeHandler, _asStatic);
        return ((SimpleType) (obj));
    }
}
