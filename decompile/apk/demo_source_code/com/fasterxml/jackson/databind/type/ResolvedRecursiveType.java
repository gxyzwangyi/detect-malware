// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.type;

import com.fasterxml.jackson.databind.JavaType;

// Referenced classes of package com.fasterxml.jackson.databind.type:
//            TypeBase, TypeBindings

public class ResolvedRecursiveType extends TypeBase {

    private static final long serialVersionUID = 1L;
    protected JavaType _referencedType;

    public ResolvedRecursiveType(Class class1, TypeBindings typebindings) {
        super(class1, typebindings, null, null, 0, null, null, false);
    }

    protected JavaType _narrow(Class class1) {
        return this;
    }

    public boolean equals(Object obj) {
        boolean flag1 = false;
        if (obj != this) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        flag = flag1;
        if (obj != null) {
            flag = flag1;
            if (obj.getClass() == getClass())
                flag = ((ResolvedRecursiveType)obj).getSelfReferencedType().equals(getSelfReferencedType());
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public StringBuilder getErasedSignature(StringBuilder stringbuilder) {
        return _referencedType.getErasedSignature(stringbuilder);
    }

    public StringBuilder getGenericSignature(StringBuilder stringbuilder) {
        return _referencedType.getGenericSignature(stringbuilder);
    }

    public JavaType getSelfReferencedType() {
        return _referencedType;
    }

    public boolean isContainerType() {
        return false;
    }

    public JavaType refine(Class class1, TypeBindings typebindings, JavaType javatype, JavaType ajavatype[]) {
        return null;
    }

    public void setReference(JavaType javatype) {
        if (_referencedType != null) {
            throw new IllegalStateException((new StringBuilder()).append("Trying to re-set self reference; old value = ").append(_referencedType).append(", new = ").append(javatype).toString());
        } else {
            _referencedType = javatype;
            return;
        }
    }

    public String toString() {
        StringBuilder stringbuilder = (new StringBuilder(40)).append("[recursive type; ");
        if (_referencedType == null)
            stringbuilder.append("UNRESOLVED");
        else
            stringbuilder.append(_referencedType.getRawClass().getName());
        return stringbuilder.toString();
    }

    public JavaType withContentType(JavaType javatype) {
        return this;
    }

    public JavaType withContentTypeHandler(Object obj) {
        return this;
    }

    public JavaType withContentValueHandler(Object obj) {
        return this;
    }

    public JavaType withStaticTyping() {
        return this;
    }

    public JavaType withTypeHandler(Object obj) {
        return this;
    }

    public JavaType withValueHandler(Object obj) {
        return this;
    }
}
