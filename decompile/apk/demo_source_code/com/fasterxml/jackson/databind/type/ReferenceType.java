// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.type;

import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.databind.JavaType;

// Referenced classes of package com.fasterxml.jackson.databind.type:
//            SimpleType, TypeBindings, TypeBase

public class ReferenceType extends SimpleType {

    private static final long serialVersionUID = 1L;
    protected final JavaType _referencedType;

    protected ReferenceType(TypeBase typebase, JavaType javatype) {
        super(typebase);
        _referencedType = javatype;
    }

    protected ReferenceType(Class class1, TypeBindings typebindings, JavaType javatype, JavaType ajavatype[], JavaType javatype1, Object obj, Object obj1, 
            boolean flag) {
        super(class1, typebindings, javatype, ajavatype, javatype1.hashCode(), obj, obj1, flag);
        _referencedType = javatype1;
    }

    public static ReferenceType construct(Class class1, JavaType javatype) {
        return new ReferenceType(class1, TypeBindings.emptyBindings(), null, null, javatype, null, null, false);
    }

    public static ReferenceType construct(Class class1, TypeBindings typebindings, JavaType javatype, JavaType ajavatype[], JavaType javatype1) {
        return new ReferenceType(class1, typebindings, javatype, ajavatype, javatype1, null, null, false);
    }

    public static ReferenceType upgradeFrom(JavaType javatype, JavaType javatype1) {
        if (javatype1 == null)
            throw new IllegalArgumentException("Missing referencedType");
        if (javatype instanceof TypeBase)
            return new ReferenceType((TypeBase)javatype, javatype1);
        else
            throw new IllegalArgumentException((new StringBuilder()).append("Can not upgrade from an instance of ").append(javatype.getClass()).toString());
    }

    protected JavaType _narrow(Class class1) {
        return new ReferenceType(class1, _bindings, _superClass, _superInterfaces, _referencedType, _valueHandler, _typeHandler, _asStatic);
    }

    protected String buildCanonicalName() {
        StringBuilder stringbuilder = new StringBuilder();
        stringbuilder.append(_class.getName());
        stringbuilder.append('<');
        stringbuilder.append(_referencedType.toCanonical());
        return stringbuilder.toString();
    }

    public boolean equals(Object obj) {
        boolean flag1 = false;
        if (obj != this) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        flag = flag1;
        if (obj != null) {
            flag = flag1;
            if (obj.getClass() == getClass()) {
                obj = (ReferenceType)obj;
                flag = flag1;
                if (((ReferenceType) (obj))._class == _class)
                    flag = _referencedType.equals(((ReferenceType) (obj))._referencedType);
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public volatile ResolvedType getContentType() {
        return getContentType();
    }

    public JavaType getContentType() {
        return _referencedType;
    }

    public StringBuilder getErasedSignature(StringBuilder stringbuilder) {
        return _classSignature(_class, stringbuilder, true);
    }

    public StringBuilder getGenericSignature(StringBuilder stringbuilder) {
        _classSignature(_class, stringbuilder, false);
        stringbuilder.append('<');
        stringbuilder = _referencedType.getGenericSignature(stringbuilder);
        stringbuilder.append(">;");
        return stringbuilder;
    }

    public volatile ResolvedType getReferencedType() {
        return getReferencedType();
    }

    public JavaType getReferencedType() {
        return _referencedType;
    }

    public boolean isReferenceType() {
        return true;
    }

    public JavaType refine(Class class1, TypeBindings typebindings, JavaType javatype, JavaType ajavatype[]) {
        return new ReferenceType(class1, _bindings, javatype, ajavatype, _referencedType, _valueHandler, _typeHandler, _asStatic);
    }

    public String toString() {
        return (new StringBuilder(40)).append("[reference type, class ").append(buildCanonicalName()).append('<').append(_referencedType).append('>').append(']').toString();
    }

    public JavaType withContentType(JavaType javatype) {
        if (_referencedType == javatype)
            javatype = this;
        else
            javatype = new ReferenceType(_class, _bindings, _superClass, _superInterfaces, javatype, _valueHandler, _typeHandler, _asStatic);
        return javatype;
    }

    public volatile JavaType withContentTypeHandler(Object obj) {
        return withContentTypeHandler(obj);
    }

    public ReferenceType withContentTypeHandler(Object obj) {
        if (obj == _referencedType.getTypeHandler())
            obj = this;
        else
            obj = new ReferenceType(_class, _bindings, _superClass, _superInterfaces, _referencedType.withTypeHandler(obj), _valueHandler, _typeHandler, _asStatic);
        return ((ReferenceType) (obj));
    }

    public volatile JavaType withContentValueHandler(Object obj) {
        return withContentValueHandler(obj);
    }

    public ReferenceType withContentValueHandler(Object obj) {
        if (obj == _referencedType.getValueHandler()) {
            obj = this;
        } else {
            obj = _referencedType.withValueHandler(obj);
            obj = new ReferenceType(_class, _bindings, _superClass, _superInterfaces, ((JavaType) (obj)), _valueHandler, _typeHandler, _asStatic);
        }
        return ((ReferenceType) (obj));
    }

    public volatile SimpleType withContentValueHandler(Object obj) {
        return withContentValueHandler(obj);
    }

    public volatile JavaType withStaticTyping() {
        return withStaticTyping();
    }

    public ReferenceType withStaticTyping() {
        ReferenceType referencetype;
        if (_asStatic)
            referencetype = this;
        else
            referencetype = new ReferenceType(_class, _bindings, _superClass, _superInterfaces, _referencedType.withStaticTyping(), _valueHandler, _typeHandler, true);
        return referencetype;
    }

    public volatile SimpleType withStaticTyping() {
        return withStaticTyping();
    }

    public volatile JavaType withTypeHandler(Object obj) {
        return withTypeHandler(obj);
    }

    public ReferenceType withTypeHandler(Object obj) {
        if (obj == _typeHandler)
            obj = this;
        else
            obj = new ReferenceType(_class, _bindings, _superClass, _superInterfaces, _referencedType, _valueHandler, obj, _asStatic);
        return ((ReferenceType) (obj));
    }

    public volatile SimpleType withTypeHandler(Object obj) {
        return withTypeHandler(obj);
    }

    public volatile JavaType withValueHandler(Object obj) {
        return withValueHandler(obj);
    }

    public ReferenceType withValueHandler(Object obj) {
        if (obj == _valueHandler)
            obj = this;
        else
            obj = new ReferenceType(_class, _bindings, _superClass, _superInterfaces, _referencedType, obj, _typeHandler, _asStatic);
        return ((ReferenceType) (obj));
    }

    public volatile SimpleType withValueHandler(Object obj) {
        return withValueHandler(obj);
    }
}
