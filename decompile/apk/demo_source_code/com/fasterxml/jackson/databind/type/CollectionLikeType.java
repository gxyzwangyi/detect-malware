// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.type;

import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.databind.JavaType;
import java.util.Collection;

// Referenced classes of package com.fasterxml.jackson.databind.type:
//            TypeBase, TypeBindings

public class CollectionLikeType extends TypeBase {

    private static final long serialVersionUID = 1L;
    protected final JavaType _elementType;

    protected CollectionLikeType(TypeBase typebase, JavaType javatype) {
        super(typebase);
        _elementType = javatype;
    }

    protected CollectionLikeType(Class class1, TypeBindings typebindings, JavaType javatype, JavaType ajavatype[], JavaType javatype1, Object obj, Object obj1, 
            boolean flag) {
        super(class1, typebindings, javatype, ajavatype, javatype1.hashCode(), obj, obj1, flag);
        _elementType = javatype1;
    }

    public static CollectionLikeType construct(Class class1, JavaType javatype) {
        java.lang.reflect.TypeVariable atypevariable[] = class1.getTypeParameters();
        TypeBindings typebindings;
        if (atypevariable == null || atypevariable.length != 1)
            typebindings = TypeBindings.emptyBindings();
        else
            typebindings = TypeBindings.create(class1, javatype);
        return new CollectionLikeType(class1, typebindings, _bogusSuperClass(class1), null, javatype, null, null, false);
    }

    public static CollectionLikeType construct(Class class1, TypeBindings typebindings, JavaType javatype, JavaType ajavatype[], JavaType javatype1) {
        return new CollectionLikeType(class1, typebindings, javatype, ajavatype, javatype1, null, null, false);
    }

    public static CollectionLikeType upgradeFrom(JavaType javatype, JavaType javatype1) {
        if (javatype instanceof TypeBase)
            return new CollectionLikeType((TypeBase)javatype, javatype1);
        else
            throw new IllegalArgumentException((new StringBuilder()).append("Can not upgrade from an instance of ").append(javatype.getClass()).toString());
    }

    protected JavaType _narrow(Class class1) {
        return new CollectionLikeType(class1, _bindings, _superClass, _superInterfaces, _elementType, _valueHandler, _typeHandler, _asStatic);
    }

    protected String buildCanonicalName() {
        StringBuilder stringbuilder = new StringBuilder();
        stringbuilder.append(_class.getName());
        if (_elementType != null) {
            stringbuilder.append('<');
            stringbuilder.append(_elementType.toCanonical());
            stringbuilder.append('>');
        }
        return stringbuilder.toString();
    }

    public boolean equals(Object obj) {
        boolean flag = true;
        if (obj != this) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        if (obj == null)
            flag = false;
        else
        if (obj.getClass() != getClass()) {
            flag = false;
        } else {
            obj = (CollectionLikeType)obj;
            if (_class != ((CollectionLikeType) (obj))._class || !_elementType.equals(((CollectionLikeType) (obj))._elementType))
                flag = false;
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    public volatile ResolvedType getContentType() {
        return getContentType();
    }

    public JavaType getContentType() {
        return _elementType;
    }

    public Object getContentTypeHandler() {
        return _elementType.getTypeHandler();
    }

    public Object getContentValueHandler() {
        return _elementType.getValueHandler();
    }

    public StringBuilder getErasedSignature(StringBuilder stringbuilder) {
        return _classSignature(_class, stringbuilder, true);
    }

    public StringBuilder getGenericSignature(StringBuilder stringbuilder) {
        _classSignature(_class, stringbuilder, false);
        stringbuilder.append('<');
        _elementType.getGenericSignature(stringbuilder);
        stringbuilder.append(">;");
        return stringbuilder;
    }

    public boolean isCollectionLikeType() {
        return true;
    }

    public boolean isContainerType() {
        return true;
    }

    public boolean isTrueCollectionType() {
        return java/util/Collection.isAssignableFrom(_class);
    }

    public JavaType refine(Class class1, TypeBindings typebindings, JavaType javatype, JavaType ajavatype[]) {
        return new CollectionLikeType(class1, typebindings, javatype, ajavatype, _elementType, _valueHandler, _typeHandler, _asStatic);
    }

    public String toString() {
        return (new StringBuilder()).append("[collection-like type; class ").append(_class.getName()).append(", contains ").append(_elementType).append("]").toString();
    }

    public JavaType withContentType(JavaType javatype) {
        if (_elementType == javatype)
            javatype = this;
        else
            javatype = new CollectionLikeType(_class, _bindings, _superClass, _superInterfaces, javatype, _valueHandler, _typeHandler, _asStatic);
        return javatype;
    }

    public volatile JavaType withContentTypeHandler(Object obj) {
        return withContentTypeHandler(obj);
    }

    public CollectionLikeType withContentTypeHandler(Object obj) {
        return new CollectionLikeType(_class, _bindings, _superClass, _superInterfaces, _elementType.withTypeHandler(obj), _valueHandler, _typeHandler, _asStatic);
    }

    public volatile JavaType withContentValueHandler(Object obj) {
        return withContentValueHandler(obj);
    }

    public CollectionLikeType withContentValueHandler(Object obj) {
        return new CollectionLikeType(_class, _bindings, _superClass, _superInterfaces, _elementType.withValueHandler(obj), _valueHandler, _typeHandler, _asStatic);
    }

    public volatile JavaType withStaticTyping() {
        return withStaticTyping();
    }

    public CollectionLikeType withStaticTyping() {
        CollectionLikeType collectionliketype;
        if (_asStatic)
            collectionliketype = this;
        else
            collectionliketype = new CollectionLikeType(_class, _bindings, _superClass, _superInterfaces, _elementType.withStaticTyping(), _valueHandler, _typeHandler, true);
        return collectionliketype;
    }

    public volatile JavaType withTypeHandler(Object obj) {
        return withTypeHandler(obj);
    }

    public CollectionLikeType withTypeHandler(Object obj) {
        return new CollectionLikeType(_class, _bindings, _superClass, _superInterfaces, _elementType, _valueHandler, obj, _asStatic);
    }

    public volatile JavaType withValueHandler(Object obj) {
        return withValueHandler(obj);
    }

    public CollectionLikeType withValueHandler(Object obj) {
        return new CollectionLikeType(_class, _bindings, _superClass, _superInterfaces, _elementType, obj, _typeHandler, _asStatic);
    }
}
