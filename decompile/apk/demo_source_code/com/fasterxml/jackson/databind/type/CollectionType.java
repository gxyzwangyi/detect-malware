// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.type;

import com.fasterxml.jackson.databind.JavaType;

// Referenced classes of package com.fasterxml.jackson.databind.type:
//            CollectionLikeType, TypeBindings, TypeBase

public final class CollectionType extends CollectionLikeType {

    private static final long serialVersionUID = 1L;

    protected CollectionType(TypeBase typebase, JavaType javatype) {
        super(typebase, javatype);
    }

    private CollectionType(Class class1, TypeBindings typebindings, JavaType javatype, JavaType ajavatype[], JavaType javatype1, Object obj, Object obj1, 
            boolean flag) {
        super(class1, typebindings, javatype, ajavatype, javatype1, obj, obj1, flag);
    }

    public static CollectionType construct(Class class1, JavaType javatype) {
        java.lang.reflect.TypeVariable atypevariable[] = class1.getTypeParameters();
        TypeBindings typebindings;
        if (atypevariable == null || atypevariable.length != 1)
            typebindings = TypeBindings.emptyBindings();
        else
            typebindings = TypeBindings.create(class1, javatype);
        return new CollectionType(class1, typebindings, _bogusSuperClass(class1), null, javatype, null, null, false);
    }

    public static CollectionType construct(Class class1, TypeBindings typebindings, JavaType javatype, JavaType ajavatype[], JavaType javatype1) {
        return new CollectionType(class1, typebindings, javatype, ajavatype, javatype1, null, null, false);
    }

    protected JavaType _narrow(Class class1) {
        return new CollectionType(class1, _bindings, _superClass, _superInterfaces, _elementType, null, null, _asStatic);
    }

    public JavaType refine(Class class1, TypeBindings typebindings, JavaType javatype, JavaType ajavatype[]) {
        return new CollectionType(class1, typebindings, javatype, ajavatype, _elementType, _valueHandler, _typeHandler, _asStatic);
    }

    public String toString() {
        return (new StringBuilder()).append("[collection type; class ").append(_class.getName()).append(", contains ").append(_elementType).append("]").toString();
    }

    public JavaType withContentType(JavaType javatype) {
        if (_elementType == javatype)
            javatype = this;
        else
            javatype = new CollectionType(_class, _bindings, _superClass, _superInterfaces, javatype, _valueHandler, _typeHandler, _asStatic);
        return javatype;
    }

    public volatile JavaType withContentTypeHandler(Object obj) {
        return withContentTypeHandler(obj);
    }

    public volatile CollectionLikeType withContentTypeHandler(Object obj) {
        return withContentTypeHandler(obj);
    }

    public CollectionType withContentTypeHandler(Object obj) {
        return new CollectionType(_class, _bindings, _superClass, _superInterfaces, _elementType.withTypeHandler(obj), _valueHandler, _typeHandler, _asStatic);
    }

    public volatile JavaType withContentValueHandler(Object obj) {
        return withContentValueHandler(obj);
    }

    public volatile CollectionLikeType withContentValueHandler(Object obj) {
        return withContentValueHandler(obj);
    }

    public CollectionType withContentValueHandler(Object obj) {
        return new CollectionType(_class, _bindings, _superClass, _superInterfaces, _elementType.withValueHandler(obj), _valueHandler, _typeHandler, _asStatic);
    }

    public volatile JavaType withStaticTyping() {
        return withStaticTyping();
    }

    public volatile CollectionLikeType withStaticTyping() {
        return withStaticTyping();
    }

    public CollectionType withStaticTyping() {
        CollectionType collectiontype;
        if (_asStatic)
            collectiontype = this;
        else
            collectiontype = new CollectionType(_class, _bindings, _superClass, _superInterfaces, _elementType.withStaticTyping(), _valueHandler, _typeHandler, true);
        return collectiontype;
    }

    public volatile JavaType withTypeHandler(Object obj) {
        return withTypeHandler(obj);
    }

    public volatile CollectionLikeType withTypeHandler(Object obj) {
        return withTypeHandler(obj);
    }

    public CollectionType withTypeHandler(Object obj) {
        return new CollectionType(_class, _bindings, _superClass, _superInterfaces, _elementType, _valueHandler, obj, _asStatic);
    }

    public volatile JavaType withValueHandler(Object obj) {
        return withValueHandler(obj);
    }

    public volatile CollectionLikeType withValueHandler(Object obj) {
        return withValueHandler(obj);
    }

    public CollectionType withValueHandler(Object obj) {
        return new CollectionType(_class, _bindings, _superClass, _superInterfaces, _elementType, obj, _typeHandler, _asStatic);
    }
}
