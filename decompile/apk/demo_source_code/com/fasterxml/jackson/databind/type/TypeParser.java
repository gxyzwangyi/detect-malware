// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.type;

import com.fasterxml.jackson.databind.JavaType;
import java.io.Serializable;
import java.util.*;

// Referenced classes of package com.fasterxml.jackson.databind.type:
//            TypeFactory, TypeBindings

public class TypeParser
    implements Serializable {
    static final class MyTokenizer extends StringTokenizer {

        protected int _index;
        protected final String _input;
        protected String _pushbackToken;

        public String getAllInput() {
            return _input;
        }

        public String getRemainingInput() {
            return _input.substring(_index);
        }

        public String getUsedInput() {
            return _input.substring(0, _index);
        }

        public boolean hasMoreTokens() {
            boolean flag;
            if (_pushbackToken != null || super.hasMoreTokens())
                flag = true;
            else
                flag = false;
            return flag;
        }

        public String nextToken() {
            String s;
            if (_pushbackToken != null) {
                s = _pushbackToken;
                _pushbackToken = null;
            } else {
                s = super.nextToken();
            }
            _index = _index + s.length();
            return s;
        }

        public void pushBack(String s) {
            _pushbackToken = s;
            _index = _index - s.length();
        }

        public MyTokenizer(String s) {
            super(s, "<,>", true);
            _input = s;
        }
    }


    private static final long serialVersionUID = 1L;
    protected final TypeFactory _factory;

    public TypeParser(TypeFactory typefactory) {
        _factory = typefactory;
    }

    protected IllegalArgumentException _problem(MyTokenizer mytokenizer, String s) {
        return new IllegalArgumentException((new StringBuilder()).append("Failed to parse type '").append(mytokenizer.getAllInput()).append("' (remaining: '").append(mytokenizer.getRemainingInput()).append("'): ").append(s).toString());
    }

    protected Class findClass(String s, MyTokenizer mytokenizer) {
        Class class1;
        try {
            class1 = _factory.findClass(s);
        }
        catch (Exception exception) {
            if (exception instanceof RuntimeException)
                throw (RuntimeException)exception;
            else
                throw _problem(mytokenizer, (new StringBuilder()).append("Can not locate class '").append(s).append("', problem: ").append(exception.getMessage()).toString());
        }
        return class1;
    }

    public JavaType parse(String s) {
        MyTokenizer mytokenizer = new MyTokenizer(s.trim());
        s = parseType(mytokenizer);
        if (mytokenizer.hasMoreTokens())
            throw _problem(mytokenizer, "Unexpected tokens after complete type");
        else
            return s;
    }

    protected JavaType parseType(MyTokenizer mytokenizer) {
        Class class1;
        if (!mytokenizer.hasMoreTokens())
            throw _problem(mytokenizer, "Unexpected end-of-string");
        class1 = findClass(mytokenizer.nextToken(), mytokenizer);
        if (!mytokenizer.hasMoreTokens()) goto _L2; else goto _L1
_L1:
        String s = mytokenizer.nextToken();
        if (!"<".equals(s)) goto _L4; else goto _L3
_L3:
        mytokenizer = TypeBindings.create(class1, parseTypes(mytokenizer));
        mytokenizer = _factory._fromClass(null, class1, mytokenizer);
_L6:
        return mytokenizer;
_L4:
        mytokenizer.pushBack(s);
_L2:
        mytokenizer = _factory._fromClass(null, class1, null);
        if (true) goto _L6; else goto _L5
_L5:
    }

    protected List parseTypes(MyTokenizer mytokenizer) {
        ArrayList arraylist = new ArrayList();
        do {
label0:
            {
                if (mytokenizer.hasMoreTokens()) {
                    arraylist.add(parseType(mytokenizer));
                    if (mytokenizer.hasMoreTokens())
                        break label0;
                }
                throw _problem(mytokenizer, "Unexpected end-of-string");
            }
            String s = mytokenizer.nextToken();
            if (">".equals(s))
                return arraylist;
            if (!",".equals(s))
                throw _problem(mytokenizer, (new StringBuilder()).append("Unexpected token '").append(s).append("', expected ',' or '>')").toString());
        } while (true);
    }

    public TypeParser withFactory(TypeFactory typefactory) {
        if (typefactory == _factory)
            typefactory = this;
        else
            typefactory = new TypeParser(typefactory);
        return typefactory;
    }
}
