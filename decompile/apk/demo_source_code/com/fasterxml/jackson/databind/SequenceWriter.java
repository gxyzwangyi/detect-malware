// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind;

import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.databind.cfg.PackageVersion;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;
import com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer;
import java.io.*;
import java.util.Collection;
import java.util.Iterator;

// Referenced classes of package com.fasterxml.jackson.databind:
//            SerializationFeature, SerializationConfig, JavaType, JsonSerializer

public class SequenceWriter
    implements Versioned, Closeable, Flushable {

    protected final boolean _cfgCloseCloseable;
    protected final boolean _cfgFlush;
    protected final boolean _closeGenerator;
    protected boolean _closed;
    protected final SerializationConfig _config;
    protected PropertySerializerMap _dynamicSerializers;
    protected final JsonGenerator _generator;
    protected boolean _openArray;
    protected final DefaultSerializerProvider _provider;
    protected final JsonSerializer _rootSerializer;
    protected final TypeSerializer _typeSerializer;

    public SequenceWriter(DefaultSerializerProvider defaultserializerprovider, JsonGenerator jsongenerator, boolean flag, ObjectWriter.Prefetch prefetch) {
        _provider = defaultserializerprovider;
        _generator = jsongenerator;
        _closeGenerator = flag;
        _rootSerializer = prefetch.getValueSerializer();
        _typeSerializer = prefetch.getTypeSerializer();
        _config = defaultserializerprovider.getConfig();
        _cfgFlush = _config.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE);
        _cfgCloseCloseable = _config.isEnabled(SerializationFeature.CLOSE_CLOSEABLE);
        _dynamicSerializers = PropertySerializerMap.emptyForRootValues();
    }

    private final JsonSerializer _findAndAddDynamic(JavaType javatype) {
        if (_typeSerializer == null)
            javatype = _dynamicSerializers.findAndAddRootValueSerializer(javatype, _provider);
        else
            javatype = _dynamicSerializers.addSerializer(javatype, new TypeWrappedSerializer(_typeSerializer, _provider.findValueSerializer(javatype, null)));
        _dynamicSerializers = ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (javatype)).map;
        return ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (javatype)).serializer;
    }

    private final JsonSerializer _findAndAddDynamic(Class class1) {
        if (_typeSerializer == null)
            class1 = _dynamicSerializers.findAndAddRootValueSerializer(class1, _provider);
        else
            class1 = _dynamicSerializers.addSerializer(class1, new TypeWrappedSerializer(_typeSerializer, _provider.findValueSerializer(class1, null)));
        _dynamicSerializers = ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (class1)).map;
        return ((com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult) (class1)).serializer;
    }

    protected SequenceWriter _writeCloseableValue(Object obj) {
        Exception exception;
        Closeable closeable;
        exception = null;
        closeable = (Closeable)obj;
        JsonSerializer jsonserializer = _rootSerializer;
        Object obj1;
        obj1 = jsonserializer;
        if (jsonserializer != null)
            break MISSING_BLOCK_LABEL_54;
        Class class1;
        class1 = obj.getClass();
        jsonserializer = _dynamicSerializers.serializerFor(class1);
        obj1 = jsonserializer;
        if (jsonserializer != null)
            break MISSING_BLOCK_LABEL_54;
        obj1 = _findAndAddDynamic(class1);
        _provider.serializeValue(_generator, obj, null, ((JsonSerializer) (obj1)));
        if (_cfgFlush)
            _generator.flush();
        closeable.close();
        if (false)
            try {
                throw new NullPointerException();
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) { }
        return this;
        exception;
        obj = closeable;
        obj1 = obj;
        obj = exception;
_L2:
        if (obj1 != null)
            try {
                ((Closeable) (obj1)).close();
            }
            // Misplaced declaration of an exception variable
            catch (Object obj1) { }
        throw obj;
        obj;
        obj1 = exception;
        if (true) goto _L2; else goto _L1
_L1:
    }

    protected SequenceWriter _writeCloseableValue(Object obj, JavaType javatype) {
        Closeable closeable = (Closeable)obj;
        JsonSerializer jsonserializer1 = _dynamicSerializers.serializerFor(javatype.getRawClass());
        JsonSerializer jsonserializer;
        jsonserializer = jsonserializer1;
        if (jsonserializer1 != null)
            break MISSING_BLOCK_LABEL_33;
        jsonserializer = _findAndAddDynamic(javatype);
        _provider.serializeValue(_generator, obj, javatype, jsonserializer);
        if (_cfgFlush)
            _generator.flush();
        javatype = null;
        closeable.close();
        if (false)
            try {
                throw new NullPointerException();
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) { }
        return this;
        obj;
        javatype = closeable;
_L2:
        if (javatype != null)
            try {
                javatype.close();
            }
            // Misplaced declaration of an exception variable
            catch (JavaType javatype) { }
        throw obj;
        obj;
        if (true) goto _L2; else goto _L1
_L1:
    }

    public void close() {
        if (!_closed) {
            _closed = true;
            if (_openArray) {
                _openArray = false;
                _generator.writeEndArray();
            }
            if (_closeGenerator)
                _generator.close();
        }
    }

    public void flush() {
        if (!_closed)
            _generator.flush();
    }

    public SequenceWriter init(boolean flag) {
        if (flag) {
            _generator.writeStartArray();
            _openArray = true;
        }
        return this;
    }

    public Version version() {
        return PackageVersion.VERSION;
    }

    public SequenceWriter write(Object obj) {
        if (obj != null) goto _L2; else goto _L1
_L1:
        _provider.serializeValue(_generator, null);
        obj = this;
_L4:
        return ((SequenceWriter) (obj));
_L2:
        if (_cfgCloseCloseable && (obj instanceof Closeable)) {
            obj = _writeCloseableValue(obj);
        } else {
            JsonSerializer jsonserializer1 = _rootSerializer;
            JsonSerializer jsonserializer = jsonserializer1;
            if (jsonserializer1 == null) {
                Class class1 = obj.getClass();
                JsonSerializer jsonserializer2 = _dynamicSerializers.serializerFor(class1);
                jsonserializer = jsonserializer2;
                if (jsonserializer2 == null)
                    jsonserializer = _findAndAddDynamic(class1);
            }
            _provider.serializeValue(_generator, obj, null, jsonserializer);
            obj = this;
            if (_cfgFlush) {
                _generator.flush();
                obj = this;
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public SequenceWriter write(Object obj, JavaType javatype) {
        if (obj != null) goto _L2; else goto _L1
_L1:
        _provider.serializeValue(_generator, null);
        obj = this;
_L4:
        return ((SequenceWriter) (obj));
_L2:
        if (_cfgCloseCloseable && (obj instanceof Closeable)) {
            obj = _writeCloseableValue(obj, javatype);
        } else {
            JsonSerializer jsonserializer1 = _dynamicSerializers.serializerFor(javatype.getRawClass());
            JsonSerializer jsonserializer = jsonserializer1;
            if (jsonserializer1 == null)
                jsonserializer = _findAndAddDynamic(javatype);
            _provider.serializeValue(_generator, obj, javatype, jsonserializer);
            obj = this;
            if (_cfgFlush) {
                _generator.flush();
                obj = this;
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public SequenceWriter writeAll(Iterable iterable) {
        for (iterable = iterable.iterator(); iterable.hasNext(); write(iterable.next()));
        return this;
    }

    public SequenceWriter writeAll(Collection collection) {
        for (collection = collection.iterator(); collection.hasNext(); write(collection.next()));
        return this;
    }

    public SequenceWriter writeAll(Object aobj[]) {
        int i = 0;
        for (int j = aobj.length; i < j; i++)
            write(aobj[i]);

        return this;
    }
}
