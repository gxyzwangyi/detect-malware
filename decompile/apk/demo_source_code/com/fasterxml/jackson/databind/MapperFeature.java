// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind;

import com.fasterxml.jackson.databind.cfg.ConfigFeature;

public final class MapperFeature extends Enum
    implements ConfigFeature {

    private static final MapperFeature $VALUES[];
    public static final MapperFeature ACCEPT_CASE_INSENSITIVE_PROPERTIES;
    public static final MapperFeature ALLOW_EXPLICIT_PROPERTY_RENAMING;
    public static final MapperFeature ALLOW_FINAL_FIELDS_AS_MUTATORS;
    public static final MapperFeature AUTO_DETECT_CREATORS;
    public static final MapperFeature AUTO_DETECT_FIELDS;
    public static final MapperFeature AUTO_DETECT_GETTERS;
    public static final MapperFeature AUTO_DETECT_IS_GETTERS;
    public static final MapperFeature AUTO_DETECT_SETTERS;
    public static final MapperFeature CAN_OVERRIDE_ACCESS_MODIFIERS;
    public static final MapperFeature DEFAULT_VIEW_INCLUSION;
    public static final MapperFeature IGNORE_DUPLICATE_MODULE_REGISTRATIONS;
    public static final MapperFeature INFER_PROPERTY_MUTATORS;
    public static final MapperFeature OVERRIDE_PUBLIC_ACCESS_MODIFIERS;
    public static final MapperFeature PROPAGATE_TRANSIENT_MARKER;
    public static final MapperFeature REQUIRE_SETTERS_FOR_GETTERS;
    public static final MapperFeature SORT_PROPERTIES_ALPHABETICALLY;
    public static final MapperFeature USE_ANNOTATIONS;
    public static final MapperFeature USE_GETTERS_AS_SETTERS;
    public static final MapperFeature USE_STATIC_TYPING;
    public static final MapperFeature USE_STD_BEAN_NAMING;
    public static final MapperFeature USE_WRAPPER_NAME_AS_PROPERTY_NAME;
    private final boolean _defaultState;
    private final int _mask = 1 << ordinal();

    private MapperFeature(String s, int i, boolean flag) {
        super(s, i);
        _defaultState = flag;
    }

    public static MapperFeature valueOf(String s) {
        return (MapperFeature)Enum.valueOf(com/fasterxml/jackson/databind/MapperFeature, s);
    }

    public static MapperFeature[] values() {
        return (MapperFeature[])$VALUES.clone();
    }

    public boolean enabledByDefault() {
        return _defaultState;
    }

    public boolean enabledIn(int i) {
        boolean flag;
        if ((_mask & i) != 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public int getMask() {
        return _mask;
    }

    static  {
        USE_ANNOTATIONS = new MapperFeature("USE_ANNOTATIONS", 0, true);
        AUTO_DETECT_CREATORS = new MapperFeature("AUTO_DETECT_CREATORS", 1, true);
        AUTO_DETECT_FIELDS = new MapperFeature("AUTO_DETECT_FIELDS", 2, true);
        AUTO_DETECT_GETTERS = new MapperFeature("AUTO_DETECT_GETTERS", 3, true);
        AUTO_DETECT_IS_GETTERS = new MapperFeature("AUTO_DETECT_IS_GETTERS", 4, true);
        AUTO_DETECT_SETTERS = new MapperFeature("AUTO_DETECT_SETTERS", 5, true);
        REQUIRE_SETTERS_FOR_GETTERS = new MapperFeature("REQUIRE_SETTERS_FOR_GETTERS", 6, false);
        USE_GETTERS_AS_SETTERS = new MapperFeature("USE_GETTERS_AS_SETTERS", 7, true);
        CAN_OVERRIDE_ACCESS_MODIFIERS = new MapperFeature("CAN_OVERRIDE_ACCESS_MODIFIERS", 8, true);
        OVERRIDE_PUBLIC_ACCESS_MODIFIERS = new MapperFeature("OVERRIDE_PUBLIC_ACCESS_MODIFIERS", 9, true);
        INFER_PROPERTY_MUTATORS = new MapperFeature("INFER_PROPERTY_MUTATORS", 10, true);
        ALLOW_FINAL_FIELDS_AS_MUTATORS = new MapperFeature("ALLOW_FINAL_FIELDS_AS_MUTATORS", 11, true);
        PROPAGATE_TRANSIENT_MARKER = new MapperFeature("PROPAGATE_TRANSIENT_MARKER", 12, false);
        USE_STATIC_TYPING = new MapperFeature("USE_STATIC_TYPING", 13, false);
        DEFAULT_VIEW_INCLUSION = new MapperFeature("DEFAULT_VIEW_INCLUSION", 14, true);
        SORT_PROPERTIES_ALPHABETICALLY = new MapperFeature("SORT_PROPERTIES_ALPHABETICALLY", 15, false);
        ACCEPT_CASE_INSENSITIVE_PROPERTIES = new MapperFeature("ACCEPT_CASE_INSENSITIVE_PROPERTIES", 16, false);
        USE_WRAPPER_NAME_AS_PROPERTY_NAME = new MapperFeature("USE_WRAPPER_NAME_AS_PROPERTY_NAME", 17, false);
        USE_STD_BEAN_NAMING = new MapperFeature("USE_STD_BEAN_NAMING", 18, false);
        ALLOW_EXPLICIT_PROPERTY_RENAMING = new MapperFeature("ALLOW_EXPLICIT_PROPERTY_RENAMING", 19, false);
        IGNORE_DUPLICATE_MODULE_REGISTRATIONS = new MapperFeature("IGNORE_DUPLICATE_MODULE_REGISTRATIONS", 20, true);
        $VALUES = (new MapperFeature[] {
            USE_ANNOTATIONS, AUTO_DETECT_CREATORS, AUTO_DETECT_FIELDS, AUTO_DETECT_GETTERS, AUTO_DETECT_IS_GETTERS, AUTO_DETECT_SETTERS, REQUIRE_SETTERS_FOR_GETTERS, USE_GETTERS_AS_SETTERS, CAN_OVERRIDE_ACCESS_MODIFIERS, OVERRIDE_PUBLIC_ACCESS_MODIFIERS, 
            INFER_PROPERTY_MUTATORS, ALLOW_FINAL_FIELDS_AS_MUTATORS, PROPAGATE_TRANSIENT_MARKER, USE_STATIC_TYPING, DEFAULT_VIEW_INCLUSION, SORT_PROPERTIES_ALPHABETICALLY, ACCEPT_CASE_INSENSITIVE_PROPERTIES, USE_WRAPPER_NAME_AS_PROPERTY_NAME, USE_STD_BEAN_NAMING, ALLOW_EXPLICIT_PROPERTY_RENAMING, 
            IGNORE_DUPLICATE_MODULE_REGISTRATIONS
        });
    }
}
