// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.jsontype.impl;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;

// Referenced classes of package com.fasterxml.jackson.databind.jsontype.impl:
//            AsPropertyTypeSerializer, AsArrayTypeSerializer

public class AsExistingPropertyTypeSerializer extends AsPropertyTypeSerializer {

    public AsExistingPropertyTypeSerializer(TypeIdResolver typeidresolver, BeanProperty beanproperty, String s) {
        super(typeidresolver, beanproperty, s);
    }

    public volatile TypeSerializer forProperty(BeanProperty beanproperty) {
        return forProperty(beanproperty);
    }

    public volatile AsArrayTypeSerializer forProperty(BeanProperty beanproperty) {
        return forProperty(beanproperty);
    }

    public AsExistingPropertyTypeSerializer forProperty(BeanProperty beanproperty) {
        if (_property == beanproperty)
            beanproperty = this;
        else
            beanproperty = new AsExistingPropertyTypeSerializer(_idResolver, beanproperty, _typePropertyName);
        return beanproperty;
    }

    public volatile AsPropertyTypeSerializer forProperty(BeanProperty beanproperty) {
        return forProperty(beanproperty);
    }

    public com.fasterxml.jackson.annotation.JsonTypeInfo.As getTypeInclusion() {
        return com.fasterxml.jackson.annotation.JsonTypeInfo.As.EXISTING_PROPERTY;
    }

    public void writeCustomTypePrefixForObject(Object obj, JsonGenerator jsongenerator, String s) {
        if (s != null && jsongenerator.canWriteTypeId())
            jsongenerator.writeTypeId(s);
        jsongenerator.writeStartObject();
    }

    public void writeTypePrefixForObject(Object obj, JsonGenerator jsongenerator) {
        obj = idFromValue(obj);
        if (obj != null && jsongenerator.canWriteTypeId())
            jsongenerator.writeTypeId(obj);
        jsongenerator.writeStartObject();
    }

    public void writeTypePrefixForObject(Object obj, JsonGenerator jsongenerator, Class class1) {
        obj = idFromValueAndType(obj, class1);
        if (obj != null && jsongenerator.canWriteTypeId())
            jsongenerator.writeTypeId(obj);
        jsongenerator.writeStartObject();
    }
}
