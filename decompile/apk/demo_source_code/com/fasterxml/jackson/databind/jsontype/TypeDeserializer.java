// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.jsontype;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.*;

// Referenced classes of package com.fasterxml.jackson.databind.jsontype:
//            TypeIdResolver

public abstract class TypeDeserializer {

    public TypeDeserializer() {
    }

    public static Object deserializeIfNatural(JsonParser jsonparser, DeserializationContext deserializationcontext, JavaType javatype) {
        return deserializeIfNatural(jsonparser, deserializationcontext, javatype.getRawClass());
    }

    public static Object deserializeIfNatural(JsonParser jsonparser, DeserializationContext deserializationcontext, Class class1) {
        JsonToken jsontoken;
        deserializationcontext = null;
        jsontoken = jsonparser.getCurrentToken();
        if (jsontoken != null) goto _L2; else goto _L1
_L1:
        return deserializationcontext;
_L2:
        static class _cls1 {

            static final int $SwitchMap$com$fasterxml$jackson$core$JsonToken[];

            static  {
                $SwitchMap$com$fasterxml$jackson$core$JsonToken = new int[JsonToken.values().length];
                NoSuchFieldError nosuchfielderror;
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_STRING.ordinal()] = 1;
                }
                catch (NoSuchFieldError nosuchfielderror4) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_NUMBER_INT.ordinal()] = 2;
                }
                catch (NoSuchFieldError nosuchfielderror3) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_NUMBER_FLOAT.ordinal()] = 3;
                }
                catch (NoSuchFieldError nosuchfielderror2) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_TRUE.ordinal()] = 4;
                }
                catch (NoSuchFieldError nosuchfielderror1) { }
                $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_FALSE.ordinal()] = 5;
_L2:
                return;
                nosuchfielderror;
                if (true) goto _L2; else goto _L1
_L1:
            }
        }

        switch (_cls1..SwitchMap.com.fasterxml.jackson.core.JsonToken[jsontoken.ordinal()]) {
        case 1: // '\001'
            if (class1.isAssignableFrom(java/lang/String))
                deserializationcontext = jsonparser.getText();
            break;

        case 2: // '\002'
            if (class1.isAssignableFrom(java/lang/Integer))
                deserializationcontext = Integer.valueOf(jsonparser.getIntValue());
            break;

        case 3: // '\003'
            if (class1.isAssignableFrom(java/lang/Double))
                deserializationcontext = Double.valueOf(jsonparser.getDoubleValue());
            break;

        case 4: // '\004'
            if (class1.isAssignableFrom(java/lang/Boolean))
                deserializationcontext = Boolean.TRUE;
            break;

        case 5: // '\005'
            if (class1.isAssignableFrom(java/lang/Boolean))
                deserializationcontext = Boolean.FALSE;
            break;
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    public abstract Object deserializeTypedFromAny(JsonParser jsonparser, DeserializationContext deserializationcontext);

    public abstract Object deserializeTypedFromArray(JsonParser jsonparser, DeserializationContext deserializationcontext);

    public abstract Object deserializeTypedFromObject(JsonParser jsonparser, DeserializationContext deserializationcontext);

    public abstract Object deserializeTypedFromScalar(JsonParser jsonparser, DeserializationContext deserializationcontext);

    public abstract TypeDeserializer forProperty(BeanProperty beanproperty);

    public abstract Class getDefaultImpl();

    public abstract String getPropertyName();

    public abstract TypeIdResolver getTypeIdResolver();

    public abstract com.fasterxml.jackson.annotation.JsonTypeInfo.As getTypeInclusion();
}
