// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.jsontype.impl;

import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.jsontype.*;
import java.util.Collection;

// Referenced classes of package com.fasterxml.jackson.databind.jsontype.impl:
//            AsArrayTypeDeserializer, AsPropertyTypeDeserializer, AsWrapperTypeDeserializer, AsExternalTypeDeserializer, 
//            AsArrayTypeSerializer, AsPropertyTypeSerializer, AsWrapperTypeSerializer, AsExternalTypeSerializer, 
//            AsExistingPropertyTypeSerializer, ClassNameIdResolver, MinimalClassNameIdResolver, TypeNameIdResolver

public class StdTypeResolverBuilder
    implements TypeResolverBuilder {

    protected TypeIdResolver _customIdResolver;
    protected Class _defaultImpl;
    protected com.fasterxml.jackson.annotation.JsonTypeInfo.Id _idType;
    protected com.fasterxml.jackson.annotation.JsonTypeInfo.As _includeAs;
    protected boolean _typeIdVisible;
    protected String _typeProperty;

    public StdTypeResolverBuilder() {
        _typeIdVisible = false;
    }

    public static StdTypeResolverBuilder noTypeInfoBuilder() {
        return (new StdTypeResolverBuilder()).init(com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NONE, null);
    }

    public TypeDeserializer buildTypeDeserializer(DeserializationConfig deserializationconfig, JavaType javatype, Collection collection) {
        if (_idType != com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NONE) goto _L2; else goto _L1
_L1:
        deserializationconfig = null;
_L4:
        return deserializationconfig;
_L2:
        deserializationconfig = idResolver(deserializationconfig, javatype, collection, false, true);
        static class _cls1 {

            static final int $SwitchMap$com$fasterxml$jackson$annotation$JsonTypeInfo$As[];
            static final int $SwitchMap$com$fasterxml$jackson$annotation$JsonTypeInfo$Id[];

            static  {
                $SwitchMap$com$fasterxml$jackson$annotation$JsonTypeInfo$Id = new int[com.fasterxml.jackson.annotation.JsonTypeInfo.Id.values().length];
                NoSuchFieldError nosuchfielderror;
                try {
                    $SwitchMap$com$fasterxml$jackson$annotation$JsonTypeInfo$Id[com.fasterxml.jackson.annotation.JsonTypeInfo.Id.CLASS.ordinal()] = 1;
                }
                catch (NoSuchFieldError nosuchfielderror9) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$annotation$JsonTypeInfo$Id[com.fasterxml.jackson.annotation.JsonTypeInfo.Id.MINIMAL_CLASS.ordinal()] = 2;
                }
                catch (NoSuchFieldError nosuchfielderror8) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$annotation$JsonTypeInfo$Id[com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME.ordinal()] = 3;
                }
                catch (NoSuchFieldError nosuchfielderror7) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$annotation$JsonTypeInfo$Id[com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NONE.ordinal()] = 4;
                }
                catch (NoSuchFieldError nosuchfielderror6) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$annotation$JsonTypeInfo$Id[com.fasterxml.jackson.annotation.JsonTypeInfo.Id.CUSTOM.ordinal()] = 5;
                }
                catch (NoSuchFieldError nosuchfielderror5) { }
                $SwitchMap$com$fasterxml$jackson$annotation$JsonTypeInfo$As = new int[com.fasterxml.jackson.annotation.JsonTypeInfo.As.values().length];
                try {
                    $SwitchMap$com$fasterxml$jackson$annotation$JsonTypeInfo$As[com.fasterxml.jackson.annotation.JsonTypeInfo.As.WRAPPER_ARRAY.ordinal()] = 1;
                }
                catch (NoSuchFieldError nosuchfielderror4) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$annotation$JsonTypeInfo$As[com.fasterxml.jackson.annotation.JsonTypeInfo.As.PROPERTY.ordinal()] = 2;
                }
                catch (NoSuchFieldError nosuchfielderror3) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$annotation$JsonTypeInfo$As[com.fasterxml.jackson.annotation.JsonTypeInfo.As.WRAPPER_OBJECT.ordinal()] = 3;
                }
                catch (NoSuchFieldError nosuchfielderror2) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$annotation$JsonTypeInfo$As[com.fasterxml.jackson.annotation.JsonTypeInfo.As.EXTERNAL_PROPERTY.ordinal()] = 4;
                }
                catch (NoSuchFieldError nosuchfielderror1) { }
                $SwitchMap$com$fasterxml$jackson$annotation$JsonTypeInfo$As[com.fasterxml.jackson.annotation.JsonTypeInfo.As.EXISTING_PROPERTY.ordinal()] = 5;
_L2:
                return;
                nosuchfielderror;
                if (true) goto _L2; else goto _L1
_L1:
            }
        }

        switch (_cls1..SwitchMap.com.fasterxml.jackson.annotation.JsonTypeInfo.As[_includeAs.ordinal()]) {
        default:
            throw new IllegalStateException((new StringBuilder()).append("Do not know how to construct standard type serializer for inclusion type: ").append(_includeAs).toString());

        case 1: // '\001'
            deserializationconfig = new AsArrayTypeDeserializer(javatype, deserializationconfig, _typeProperty, _typeIdVisible, _defaultImpl);
            break;

        case 2: // '\002'
        case 5: // '\005'
            deserializationconfig = new AsPropertyTypeDeserializer(javatype, deserializationconfig, _typeProperty, _typeIdVisible, _defaultImpl, _includeAs);
            break;

        case 3: // '\003'
            deserializationconfig = new AsWrapperTypeDeserializer(javatype, deserializationconfig, _typeProperty, _typeIdVisible, _defaultImpl);
            break;

        case 4: // '\004'
            deserializationconfig = new AsExternalTypeDeserializer(javatype, deserializationconfig, _typeProperty, _typeIdVisible, _defaultImpl);
            break;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public TypeSerializer buildTypeSerializer(SerializationConfig serializationconfig, JavaType javatype, Collection collection) {
        if (_idType != com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NONE) goto _L2; else goto _L1
_L1:
        serializationconfig = null;
_L4:
        return serializationconfig;
_L2:
        serializationconfig = idResolver(serializationconfig, javatype, collection, true, false);
        switch (_cls1..SwitchMap.com.fasterxml.jackson.annotation.JsonTypeInfo.As[_includeAs.ordinal()]) {
        default:
            throw new IllegalStateException((new StringBuilder()).append("Do not know how to construct standard type serializer for inclusion type: ").append(_includeAs).toString());

        case 1: // '\001'
            serializationconfig = new AsArrayTypeSerializer(serializationconfig, null);
            break;

        case 2: // '\002'
            serializationconfig = new AsPropertyTypeSerializer(serializationconfig, null, _typeProperty);
            break;

        case 3: // '\003'
            serializationconfig = new AsWrapperTypeSerializer(serializationconfig, null);
            break;

        case 4: // '\004'
            serializationconfig = new AsExternalTypeSerializer(serializationconfig, null, _typeProperty);
            break;

        case 5: // '\005'
            serializationconfig = new AsExistingPropertyTypeSerializer(serializationconfig, null, _typeProperty);
            break;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public volatile TypeResolverBuilder defaultImpl(Class class1) {
        return defaultImpl(class1);
    }

    public StdTypeResolverBuilder defaultImpl(Class class1) {
        _defaultImpl = class1;
        return this;
    }

    public Class getDefaultImpl() {
        return _defaultImpl;
    }

    public String getTypeProperty() {
        return _typeProperty;
    }

    protected TypeIdResolver idResolver(MapperConfig mapperconfig, JavaType javatype, Collection collection, boolean flag, boolean flag1) {
        if (_customIdResolver == null) goto _L2; else goto _L1
_L1:
        mapperconfig = _customIdResolver;
_L4:
        return mapperconfig;
_L2:
        if (_idType == null)
            throw new IllegalStateException("Can not build, 'init()' not yet called");
        switch (_cls1..SwitchMap.com.fasterxml.jackson.annotation.JsonTypeInfo.Id[_idType.ordinal()]) {
        default:
            throw new IllegalStateException((new StringBuilder()).append("Do not know how to construct standard type id resolver for idType: ").append(_idType).toString());

        case 1: // '\001'
            mapperconfig = new ClassNameIdResolver(javatype, mapperconfig.getTypeFactory());
            break;

        case 2: // '\002'
            mapperconfig = new MinimalClassNameIdResolver(javatype, mapperconfig.getTypeFactory());
            break;

        case 3: // '\003'
            mapperconfig = TypeNameIdResolver.construct(mapperconfig, javatype, collection, flag, flag1);
            break;

        case 4: // '\004'
            mapperconfig = null;
            break;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public volatile TypeResolverBuilder inclusion(com.fasterxml.jackson.annotation.JsonTypeInfo.As as) {
        return inclusion(as);
    }

    public StdTypeResolverBuilder inclusion(com.fasterxml.jackson.annotation.JsonTypeInfo.As as) {
        if (as == null) {
            throw new IllegalArgumentException("includeAs can not be null");
        } else {
            _includeAs = as;
            return this;
        }
    }

    public volatile TypeResolverBuilder init(com.fasterxml.jackson.annotation.JsonTypeInfo.Id id, TypeIdResolver typeidresolver) {
        return init(id, typeidresolver);
    }

    public StdTypeResolverBuilder init(com.fasterxml.jackson.annotation.JsonTypeInfo.Id id, TypeIdResolver typeidresolver) {
        if (id == null) {
            throw new IllegalArgumentException("idType can not be null");
        } else {
            _idType = id;
            _customIdResolver = typeidresolver;
            _typeProperty = id.getDefaultPropertyName();
            return this;
        }
    }

    public boolean isTypeIdVisible() {
        return _typeIdVisible;
    }

    public volatile TypeResolverBuilder typeIdVisibility(boolean flag) {
        return typeIdVisibility(flag);
    }

    public StdTypeResolverBuilder typeIdVisibility(boolean flag) {
        _typeIdVisible = flag;
        return this;
    }

    public volatile TypeResolverBuilder typeProperty(String s) {
        return typeProperty(s);
    }

    public StdTypeResolverBuilder typeProperty(String s) {
        String s1;
label0:
        {
            if (s != null) {
                s1 = s;
                if (s.length() != 0)
                    break label0;
            }
            s1 = _idType.getDefaultPropertyName();
        }
        _typeProperty = s1;
        return this;
    }
}
