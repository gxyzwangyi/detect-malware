// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.jsontype.impl;

import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.type.*;
import com.fasterxml.jackson.databind.util.ClassUtil;
import java.util.EnumMap;
import java.util.EnumSet;

// Referenced classes of package com.fasterxml.jackson.databind.jsontype.impl:
//            TypeIdResolverBase

public class ClassNameIdResolver extends TypeIdResolverBase {

    public ClassNameIdResolver(JavaType javatype, TypeFactory typefactory) {
        super(javatype, typefactory);
    }

    protected final String _idFrom(Object obj, Class class1) {
        Object obj1;
        obj1 = class1;
        if (java/lang/Enum.isAssignableFrom(class1)) {
            obj1 = class1;
            if (!class1.isEnum())
                obj1 = class1.getSuperclass();
        }
        class1 = ((Class) (obj1)).getName();
        if (!class1.startsWith("java.util")) goto _L2; else goto _L1
_L1:
        if (!(obj instanceof EnumSet)) goto _L4; else goto _L3
_L3:
        obj = ClassUtil.findEnumType((EnumSet)obj);
        obj = _typeFactory.constructCollectionType(java/util/EnumSet, ((Class) (obj))).toCanonical();
_L6:
        return ((String) (obj));
_L4:
        if (obj instanceof EnumMap) {
            obj = ClassUtil.findEnumType((EnumMap)obj);
            obj = _typeFactory.constructMapType(java/util/EnumMap, ((Class) (obj)), java/lang/Object).toCanonical();
            continue; /* Loop/switch isn't completed */
        }
        obj1 = class1.substring(9);
        if (!((String) (obj1)).startsWith(".Arrays$")) {
            obj = class1;
            if (!((String) (obj1)).startsWith(".Collections$"))
                continue; /* Loop/switch isn't completed */
        }
        obj = class1;
        if (class1.indexOf("List") >= 0)
            obj = "java.util.ArrayList";
        continue; /* Loop/switch isn't completed */
_L2:
        obj = class1;
        if (class1.indexOf('$') >= 0) {
            obj = class1;
            if (ClassUtil.getOuterClass(((Class) (obj1))) != null) {
                obj = class1;
                if (ClassUtil.getOuterClass(_baseType.getRawClass()) == null)
                    obj = _baseType.getRawClass().getName();
            }
        }
        if (true) goto _L6; else goto _L5
_L5:
    }

    protected JavaType _typeFromId(String s, DatabindContext databindcontext) {
        TypeFactory typefactory;
        if (databindcontext == null)
            typefactory = _typeFactory;
        else
            typefactory = databindcontext.getTypeFactory();
        if (s.indexOf('<') <= 0) goto _L2; else goto _L1
_L1:
        s = typefactory.constructFromCanonical(s);
_L4:
        return s;
_L2:
        Class class1 = typefactory.findClass(s);
        s = typefactory.constructSpecializedType(_baseType, class1);
        continue; /* Loop/switch isn't completed */
        ClassNotFoundException classnotfoundexception;
        classnotfoundexception;
        databindcontext = databindcontext.getConfig();
        if ((databindcontext instanceof DeserializationConfig) && !((DeserializationConfig)databindcontext).isEnabled(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE))
            s = null;
        else
            throw new IllegalArgumentException((new StringBuilder()).append("Invalid type id '").append(s).append("' (for id type 'Id.class'): no such class found").toString());
        continue; /* Loop/switch isn't completed */
        databindcontext;
        throw new IllegalArgumentException((new StringBuilder()).append("Invalid type id '").append(s).append("' (for id type 'Id.class'): ").append(databindcontext.getMessage()).toString(), databindcontext);
        if (true) goto _L4; else goto _L3
_L3:
    }

    public String getDescForKnownTypeIds() {
        return "class name used as type id";
    }

    public com.fasterxml.jackson.annotation.JsonTypeInfo.Id getMechanism() {
        return com.fasterxml.jackson.annotation.JsonTypeInfo.Id.CLASS;
    }

    public String idFromValue(Object obj) {
        return _idFrom(obj, obj.getClass());
    }

    public String idFromValueAndType(Object obj, Class class1) {
        return _idFrom(obj, class1);
    }

    public void registerSubtype(Class class1, String s) {
    }

    public JavaType typeFromId(DatabindContext databindcontext, String s) {
        return _typeFromId(s, databindcontext);
    }

    public JavaType typeFromId(String s) {
        return _typeFromId(s, null);
    }
}
