// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.jsontype.impl;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.ClassUtil;
import java.io.Serializable;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

// Referenced classes of package com.fasterxml.jackson.databind.jsontype.impl:
//            TypeIdResolverBase

public abstract class TypeDeserializerBase extends TypeDeserializer
    implements Serializable {

    private static final long serialVersionUID = 1L;
    protected final JavaType _baseType;
    protected final JavaType _defaultImpl;
    protected JsonDeserializer _defaultImplDeserializer;
    protected final Map _deserializers;
    protected final TypeIdResolver _idResolver;
    protected final BeanProperty _property;
    protected final boolean _typeIdVisible;
    protected final String _typePropertyName;

    protected TypeDeserializerBase(JavaType javatype, TypeIdResolver typeidresolver, String s, boolean flag, Class class1) {
        _baseType = javatype;
        _idResolver = typeidresolver;
        typeidresolver = s;
        if (s == null)
            typeidresolver = "";
        _typePropertyName = typeidresolver;
        _typeIdVisible = flag;
        _deserializers = new ConcurrentHashMap(16, 0.75F, 2);
        if (class1 == null)
            _defaultImpl = null;
        else
            _defaultImpl = javatype.forcedNarrowBy(class1);
        _property = null;
    }

    protected TypeDeserializerBase(TypeDeserializerBase typedeserializerbase, BeanProperty beanproperty) {
        _baseType = typedeserializerbase._baseType;
        _idResolver = typedeserializerbase._idResolver;
        _typePropertyName = typedeserializerbase._typePropertyName;
        _typeIdVisible = typedeserializerbase._typeIdVisible;
        _deserializers = typedeserializerbase._deserializers;
        _defaultImpl = typedeserializerbase._defaultImpl;
        _defaultImplDeserializer = typedeserializerbase._defaultImplDeserializer;
        _property = beanproperty;
    }

    protected Object _deserializeWithNativeTypeId(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        return _deserializeWithNativeTypeId(jsonparser, deserializationcontext, jsonparser.getTypeId());
    }

    protected Object _deserializeWithNativeTypeId(JsonParser jsonparser, DeserializationContext deserializationcontext, Object obj) {
        if (obj == null) {
            JsonDeserializer jsondeserializer = _findDefaultImplDeserializer(deserializationcontext);
            obj = jsondeserializer;
            if (jsondeserializer == null)
                throw deserializationcontext.mappingException("No (native) type id found when one was expected for polymorphic type handling");
        } else {
            if (obj instanceof String)
                obj = (String)obj;
            else
                obj = String.valueOf(obj);
            obj = _findDeserializer(deserializationcontext, ((String) (obj)));
        }
        return ((JsonDeserializer) (obj)).deserialize(jsonparser, deserializationcontext);
    }

    protected final JsonDeserializer _findDefaultImplDeserializer(DeserializationContext deserializationcontext) {
        if (_defaultImpl == null) {
            if (!deserializationcontext.isEnabled(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE))
                deserializationcontext = NullifyingDeserializer.instance;
            else
                deserializationcontext = null;
        } else
        if (ClassUtil.isBogusClass(_defaultImpl.getRawClass()))
            deserializationcontext = NullifyingDeserializer.instance;
        else
            synchronized (_defaultImpl) {
                if (_defaultImplDeserializer == null)
                    _defaultImplDeserializer = deserializationcontext.findContextualValueDeserializer(_defaultImpl, _property);
                deserializationcontext = _defaultImplDeserializer;
            }
        return deserializationcontext;
        deserializationcontext;
        javatype;
        JVM INSTR monitorexit ;
        throw deserializationcontext;
    }

    protected final JsonDeserializer _findDeserializer(DeserializationContext deserializationcontext, String s) {
        JsonDeserializer jsondeserializer = (JsonDeserializer)_deserializers.get(s);
        Object obj = jsondeserializer;
        if (jsondeserializer == null) {
            Object obj1 = _idResolver.typeFromId(deserializationcontext, s);
            if (obj1 == null) {
                obj1 = _findDefaultImplDeserializer(deserializationcontext);
                obj = obj1;
                if (obj1 == null)
                    obj = _handleUnknownTypeId(deserializationcontext, s, _idResolver, _baseType);
            } else {
                obj = obj1;
                if (_baseType != null) {
                    obj = obj1;
                    if (_baseType.getClass() == obj1.getClass())
                        obj = deserializationcontext.getTypeFactory().constructSpecializedType(_baseType, ((JavaType) (obj1)).getRawClass());
                }
                obj = deserializationcontext.findContextualValueDeserializer(((JavaType) (obj)), _property);
            }
            _deserializers.put(s, obj);
        }
        return ((JsonDeserializer) (obj));
    }

    protected JsonDeserializer _handleUnknownTypeId(DeserializationContext deserializationcontext, String s, TypeIdResolver typeidresolver, JavaType javatype) {
        if (typeidresolver instanceof TypeIdResolverBase) {
            typeidresolver = ((TypeIdResolverBase)typeidresolver).getDescForKnownTypeIds();
            if (typeidresolver == null)
                typeidresolver = "known type ids are not statically known";
            else
                typeidresolver = (new StringBuilder()).append("known type ids = ").append(typeidresolver).toString();
        } else {
            typeidresolver = null;
        }
        throw deserializationcontext.unknownTypeException(_baseType, s, typeidresolver);
    }

    public String baseTypeName() {
        return _baseType.getRawClass().getName();
    }

    public abstract TypeDeserializer forProperty(BeanProperty beanproperty);

    public Class getDefaultImpl() {
        Class class1;
        if (_defaultImpl == null)
            class1 = null;
        else
            class1 = _defaultImpl.getRawClass();
        return class1;
    }

    public final String getPropertyName() {
        return _typePropertyName;
    }

    public TypeIdResolver getTypeIdResolver() {
        return _idResolver;
    }

    public abstract com.fasterxml.jackson.annotation.JsonTypeInfo.As getTypeInclusion();

    public String toString() {
        StringBuilder stringbuilder = new StringBuilder();
        stringbuilder.append('[').append(getClass().getName());
        stringbuilder.append("; base-type:").append(_baseType);
        stringbuilder.append("; id-resolver: ").append(_idResolver);
        stringbuilder.append(']');
        return stringbuilder.toString();
    }
}
