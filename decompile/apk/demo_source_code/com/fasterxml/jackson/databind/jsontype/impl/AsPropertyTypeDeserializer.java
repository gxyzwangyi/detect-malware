// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.jsontype.impl;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.util.TokenBuffer;

// Referenced classes of package com.fasterxml.jackson.databind.jsontype.impl:
//            AsArrayTypeDeserializer

public class AsPropertyTypeDeserializer extends AsArrayTypeDeserializer {

    private static final long serialVersionUID = 1L;
    protected final com.fasterxml.jackson.annotation.JsonTypeInfo.As _inclusion;

    public AsPropertyTypeDeserializer(JavaType javatype, TypeIdResolver typeidresolver, String s, boolean flag, Class class1) {
        this(javatype, typeidresolver, s, flag, class1, com.fasterxml.jackson.annotation.JsonTypeInfo.As.PROPERTY);
    }

    public AsPropertyTypeDeserializer(JavaType javatype, TypeIdResolver typeidresolver, String s, boolean flag, Class class1, com.fasterxml.jackson.annotation.JsonTypeInfo.As as) {
        super(javatype, typeidresolver, s, flag, class1);
        _inclusion = as;
    }

    public AsPropertyTypeDeserializer(AsPropertyTypeDeserializer aspropertytypedeserializer, BeanProperty beanproperty) {
        super(aspropertytypedeserializer, beanproperty);
        _inclusion = aspropertytypedeserializer._inclusion;
    }

    protected Object _deserializeTypedForId(JsonParser jsonparser, DeserializationContext deserializationcontext, TokenBuffer tokenbuffer) {
        String s = jsonparser.getText();
        JsonDeserializer jsondeserializer = _findDeserializer(deserializationcontext, s);
        TokenBuffer tokenbuffer1 = tokenbuffer;
        if (_typeIdVisible) {
            tokenbuffer1 = tokenbuffer;
            if (tokenbuffer == null)
                tokenbuffer1 = new TokenBuffer(jsonparser, deserializationcontext);
            tokenbuffer1.writeFieldName(jsonparser.getCurrentName());
            tokenbuffer1.writeString(s);
        }
        tokenbuffer = jsonparser;
        if (tokenbuffer1 != null)
            tokenbuffer = JsonParserSequence.createFlattened(tokenbuffer1.asParser(jsonparser), jsonparser);
        tokenbuffer.nextToken();
        return jsondeserializer.deserialize(tokenbuffer, deserializationcontext);
    }

    protected Object _deserializeTypedUsingDefaultImpl(JsonParser jsonparser, DeserializationContext deserializationcontext, TokenBuffer tokenbuffer) {
        JsonDeserializer jsondeserializer = _findDefaultImplDeserializer(deserializationcontext);
        if (jsondeserializer == null) goto _L2; else goto _L1
_L1:
        JsonParser jsonparser1 = jsonparser;
        if (tokenbuffer != null) {
            tokenbuffer.writeEndObject();
            jsonparser1 = tokenbuffer.asParser(jsonparser);
            jsonparser1.nextToken();
        }
        tokenbuffer = ((TokenBuffer) (jsondeserializer.deserialize(jsonparser1, deserializationcontext)));
_L4:
        return tokenbuffer;
_L2:
        Object obj = TypeDeserializer.deserializeIfNatural(jsonparser, deserializationcontext, _baseType);
        tokenbuffer = ((TokenBuffer) (obj));
        if (obj == null)
            if (jsonparser.getCurrentToken() == JsonToken.START_ARRAY)
                tokenbuffer = ((TokenBuffer) (super.deserializeTypedFromAny(jsonparser, deserializationcontext)));
            else
                throw deserializationcontext.wrongTokenException(jsonparser, JsonToken.FIELD_NAME, (new StringBuilder()).append("missing property '").append(_typePropertyName).append("' that is to contain type id  (for class ").append(baseTypeName()).append(")").toString());
        if (true) goto _L4; else goto _L3
_L3:
    }

    public Object deserializeTypedFromAny(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (jsonparser.getCurrentToken() == JsonToken.START_ARRAY)
            jsonparser = ((JsonParser) (super.deserializeTypedFromArray(jsonparser, deserializationcontext)));
        else
            jsonparser = ((JsonParser) (deserializeTypedFromObject(jsonparser, deserializationcontext)));
        return jsonparser;
    }

    public Object deserializeTypedFromObject(JsonParser jsonparser, DeserializationContext deserializationcontext) {
        if (!jsonparser.canReadTypeId()) goto _L2; else goto _L1
_L1:
        Object obj = jsonparser.getTypeId();
        if (obj == null) goto _L2; else goto _L3
_L3:
        jsonparser = ((JsonParser) (_deserializeWithNativeTypeId(jsonparser, deserializationcontext, obj)));
_L5:
        return jsonparser;
_L2:
        Object obj2 = jsonparser.getCurrentToken();
        Object obj1;
        Object obj3;
        if (obj2 == JsonToken.START_OBJECT) {
            obj1 = jsonparser.nextToken();
        } else {
            obj1 = obj2;
            if (obj2 != JsonToken.FIELD_NAME) {
                jsonparser = ((JsonParser) (_deserializeTypedUsingDefaultImpl(jsonparser, deserializationcontext, null)));
                continue; /* Loop/switch isn't completed */
            }
        }
        obj3 = null;
        obj2 = obj1;
        obj1 = obj3;
        Object obj4;
        for (; obj2 == JsonToken.FIELD_NAME; obj2 = obj4) {
            obj4 = jsonparser.getCurrentName();
            jsonparser.nextToken();
            if (((String) (obj4)).equals(_typePropertyName)) {
                jsonparser = ((JsonParser) (_deserializeTypedForId(jsonparser, deserializationcontext, ((TokenBuffer) (obj1)))));
                continue; /* Loop/switch isn't completed */
            }
            obj2 = obj1;
            if (obj1 == null)
                obj2 = new TokenBuffer(jsonparser, deserializationcontext);
            ((TokenBuffer) (obj2)).writeFieldName(((String) (obj4)));
            ((TokenBuffer) (obj2)).copyCurrentStructure(jsonparser);
            obj4 = jsonparser.nextToken();
            obj1 = obj2;
        }

        jsonparser = ((JsonParser) (_deserializeTypedUsingDefaultImpl(jsonparser, deserializationcontext, ((TokenBuffer) (obj1)))));
        if (true) goto _L5; else goto _L4
_L4:
    }

    public TypeDeserializer forProperty(BeanProperty beanproperty) {
        if (beanproperty == _property)
            beanproperty = this;
        else
            beanproperty = new AsPropertyTypeDeserializer(this, beanproperty);
        return beanproperty;
    }

    public com.fasterxml.jackson.annotation.JsonTypeInfo.As getTypeInclusion() {
        return _inclusion;
    }
}
