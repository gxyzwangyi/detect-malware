// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind;

import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import java.io.Serializable;

public class PropertyNamingStrategy
    implements Serializable {
    public static class KebabCaseStrategy extends PropertyNamingStrategyBase {

        public String translate(String s) {
            if (s != null) goto _L2; else goto _L1
_L1:
            Object obj = s;
_L4:
            return ((String) (obj));
_L2:
            int k = s.length();
            obj = s;
            if (k != 0) {
                obj = new StringBuilder((k >> 1) + k);
                int j = 0;
                int i = 0;
                while (j < k)  {
                    char c1 = s.charAt(j);
                    char c = Character.toLowerCase(c1);
                    if (c == c1) {
                        if (i > 1)
                            ((StringBuilder) (obj)).insert(((StringBuilder) (obj)).length() - 1, '-');
                        i = 0;
                    } else {
                        if (i == 0 && j > 0)
                            ((StringBuilder) (obj)).append('-');
                        i++;
                    }
                    ((StringBuilder) (obj)).append(c);
                    j++;
                }
                obj = ((StringBuilder) (obj)).toString();
            }
            if (true) goto _L4; else goto _L3
_L3:
        }

        public KebabCaseStrategy() {
        }
    }

    public static class LowerCaseStrategy extends PropertyNamingStrategyBase {

        public String translate(String s) {
            return s.toLowerCase();
        }

        public LowerCaseStrategy() {
        }
    }

    public static class LowerCaseWithUnderscoresStrategy extends SnakeCaseStrategy {

        public LowerCaseWithUnderscoresStrategy() {
        }
    }

    public static class PascalCaseStrategy extends UpperCamelCaseStrategy {

        public PascalCaseStrategy() {
        }
    }

    public static abstract class PropertyNamingStrategyBase extends PropertyNamingStrategy {

        public String nameForConstructorParameter(MapperConfig mapperconfig, AnnotatedParameter annotatedparameter, String s) {
            return translate(s);
        }

        public String nameForField(MapperConfig mapperconfig, AnnotatedField annotatedfield, String s) {
            return translate(s);
        }

        public String nameForGetterMethod(MapperConfig mapperconfig, AnnotatedMethod annotatedmethod, String s) {
            return translate(s);
        }

        public String nameForSetterMethod(MapperConfig mapperconfig, AnnotatedMethod annotatedmethod, String s) {
            return translate(s);
        }

        public abstract String translate(String s);

        public PropertyNamingStrategyBase() {
        }
    }

    public static class SnakeCaseStrategy extends PropertyNamingStrategyBase {

        public String translate(String s) {
            if (s != null) goto _L2; else goto _L1
_L1:
            return s;
_L2:
            int k1 = s.length();
            StringBuilder stringbuilder = new StringBuilder(k1 * 2);
            int j1 = 0;
            int j = 0;
            int i = 0;
            while (j1 < k1)  {
                char c = s.charAt(j1);
                if (j1 > 0 || c != '_') {
                    int l;
                    if (Character.isUpperCase(c)) {
                        int k = i;
                        if (j == 0) {
                            k = i;
                            if (i > 0) {
                                k = i;
                                if (stringbuilder.charAt(i - 1) != '_') {
                                    stringbuilder.append('_');
                                    k = i + 1;
                                }
                            }
                        }
                        c = Character.toLowerCase(c);
                        i = 1;
                        j = k;
                    } else {
                        j = i;
                        i = 0;
                    }
                    stringbuilder.append(c);
                    j++;
                } else {
                    int i1 = j;
                    j = i;
                    i = i1;
                }
                j1++;
                l = i;
                i = j;
                j = l;
            }
            if (i > 0)
                s = stringbuilder.toString();
            if (true) goto _L1; else goto _L3
_L3:
        }

        public SnakeCaseStrategy() {
        }
    }

    public static class UpperCamelCaseStrategy extends PropertyNamingStrategyBase {

        public String translate(String s) {
            String s1 = s;
            if (s == null) goto _L2; else goto _L1
_L1:
            if (s.length() != 0) goto _L4; else goto _L3
_L3:
            s1 = s;
_L2:
            return s1;
_L4:
            char c1 = s.charAt(0);
            char c = Character.toUpperCase(c1);
            s1 = s;
            if (c1 != c) {
                s = new StringBuilder(s);
                s.setCharAt(0, c);
                s1 = s.toString();
            }
            if (true) goto _L2; else goto _L5
_L5:
        }

        public UpperCamelCaseStrategy() {
        }
    }


    public static final PropertyNamingStrategy CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES;
    public static final PropertyNamingStrategy KEBAB_CASE = new KebabCaseStrategy();
    public static final PropertyNamingStrategy LOWER_CAMEL_CASE = new PropertyNamingStrategy();
    public static final PropertyNamingStrategy LOWER_CASE = new LowerCaseStrategy();
    public static final PropertyNamingStrategy PASCAL_CASE_TO_CAMEL_CASE;
    public static final PropertyNamingStrategy SNAKE_CASE;
    public static final PropertyNamingStrategy UPPER_CAMEL_CASE;

    public PropertyNamingStrategy() {
    }

    public String nameForConstructorParameter(MapperConfig mapperconfig, AnnotatedParameter annotatedparameter, String s) {
        return s;
    }

    public String nameForField(MapperConfig mapperconfig, AnnotatedField annotatedfield, String s) {
        return s;
    }

    public String nameForGetterMethod(MapperConfig mapperconfig, AnnotatedMethod annotatedmethod, String s) {
        return s;
    }

    public String nameForSetterMethod(MapperConfig mapperconfig, AnnotatedMethod annotatedmethod, String s) {
        return s;
    }

    static  {
        SNAKE_CASE = new SnakeCaseStrategy();
        UPPER_CAMEL_CASE = new UpperCamelCaseStrategy();
        CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES = SNAKE_CASE;
        PASCAL_CASE_TO_CAMEL_CASE = UPPER_CAMEL_CASE;
    }
}
