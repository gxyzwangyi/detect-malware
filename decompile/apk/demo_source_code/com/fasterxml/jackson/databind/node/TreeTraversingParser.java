// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.node;

import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.core.base.ParserMinimalBase;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.cfg.PackageVersion;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.math.BigInteger;

// Referenced classes of package com.fasterxml.jackson.databind.node:
//            NodeCursor, POJONode, BinaryNode

public class TreeTraversingParser extends ParserMinimalBase {

    protected boolean _closed;
    protected JsonToken _nextToken;
    protected NodeCursor _nodeCursor;
    protected ObjectCodec _objectCodec;
    protected boolean _startContainer;

    public TreeTraversingParser(JsonNode jsonnode) {
        this(jsonnode, null);
    }

    public TreeTraversingParser(JsonNode jsonnode, ObjectCodec objectcodec) {
        super(0);
        _objectCodec = objectcodec;
        if (jsonnode.isArray()) {
            _nextToken = JsonToken.START_ARRAY;
            _nodeCursor = new NodeCursor.ArrayCursor(jsonnode, null);
        } else
        if (jsonnode.isObject()) {
            _nextToken = JsonToken.START_OBJECT;
            _nodeCursor = new NodeCursor.ObjectCursor(jsonnode, null);
        } else {
            _nodeCursor = new NodeCursor.RootCursor(jsonnode, null);
        }
    }

    protected void _handleEOF() {
        _throwInternal();
    }

    public void close() {
        if (!_closed) {
            _closed = true;
            _nodeCursor = null;
            _currToken = null;
        }
    }

    protected JsonNode currentNode() {
        JsonNode jsonnode;
        if (_closed || _nodeCursor == null)
            jsonnode = null;
        else
            jsonnode = _nodeCursor.currentNode();
        return jsonnode;
    }

    protected JsonNode currentNumericNode() {
        Object obj = currentNode();
        if (obj == null || !((JsonNode) (obj)).isNumber()) {
            if (obj == null)
                obj = null;
            else
                obj = ((JsonNode) (obj)).asToken();
            throw _constructError((new StringBuilder()).append("Current token (").append(obj).append(") not numeric, can not use numeric value accessors").toString());
        } else {
            return ((JsonNode) (obj));
        }
    }

    public BigInteger getBigIntegerValue() {
        return currentNumericNode().bigIntegerValue();
    }

    public byte[] getBinaryValue(Base64Variant base64variant) {
        JsonNode jsonnode = currentNode();
        if (jsonnode == null) goto _L2; else goto _L1
_L1:
        base64variant = jsonnode.binaryValue();
        if (base64variant == null) goto _L4; else goto _L3
_L3:
        return base64variant;
_L4:
        if (jsonnode.isPojo()) {
            base64variant = ((Base64Variant) (((POJONode)jsonnode).getPojo()));
            if (base64variant instanceof byte[]) {
                base64variant = (byte[])(byte[])base64variant;
                continue; /* Loop/switch isn't completed */
            }
        }
_L2:
        base64variant = null;
        if (true) goto _L3; else goto _L5
_L5:
    }

    public ObjectCodec getCodec() {
        return _objectCodec;
    }

    public JsonLocation getCurrentLocation() {
        return JsonLocation.NA;
    }

    public String getCurrentName() {
        String s;
        if (_nodeCursor == null)
            s = null;
        else
            s = _nodeCursor.getCurrentName();
        return s;
    }

    public BigDecimal getDecimalValue() {
        return currentNumericNode().decimalValue();
    }

    public double getDoubleValue() {
        return currentNumericNode().doubleValue();
    }

    public Object getEmbeddedObject() {
        if (_closed) goto _L2; else goto _L1
_L1:
        Object obj = currentNode();
        if (obj == null) goto _L2; else goto _L3
_L3:
        if (!((JsonNode) (obj)).isPojo()) goto _L5; else goto _L4
_L4:
        obj = ((POJONode)obj).getPojo();
_L7:
        return obj;
_L5:
        if (((JsonNode) (obj)).isBinary()) {
            obj = ((BinaryNode)obj).binaryValue();
            continue; /* Loop/switch isn't completed */
        }
_L2:
        obj = null;
        if (true) goto _L7; else goto _L6
_L6:
    }

    public float getFloatValue() {
        return (float)currentNumericNode().doubleValue();
    }

    public int getIntValue() {
        return currentNumericNode().intValue();
    }

    public long getLongValue() {
        return currentNumericNode().longValue();
    }

    public com.fasterxml.jackson.core.JsonParser.NumberType getNumberType() {
        Object obj = currentNumericNode();
        if (obj == null)
            obj = null;
        else
            obj = ((JsonNode) (obj)).numberType();
        return ((com.fasterxml.jackson.core.JsonParser.NumberType) (obj));
    }

    public Number getNumberValue() {
        return currentNumericNode().numberValue();
    }

    public JsonStreamContext getParsingContext() {
        return _nodeCursor;
    }

    public String getText() {
        String s = null;
        if (!_closed) goto _L2; else goto _L1
_L1:
        return s;
_L2:
        static class _cls1 {

            static final int $SwitchMap$com$fasterxml$jackson$core$JsonToken[];

            static  {
                $SwitchMap$com$fasterxml$jackson$core$JsonToken = new int[JsonToken.values().length];
                NoSuchFieldError nosuchfielderror;
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.FIELD_NAME.ordinal()] = 1;
                }
                catch (NoSuchFieldError nosuchfielderror4) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_STRING.ordinal()] = 2;
                }
                catch (NoSuchFieldError nosuchfielderror3) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_NUMBER_INT.ordinal()] = 3;
                }
                catch (NoSuchFieldError nosuchfielderror2) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_NUMBER_FLOAT.ordinal()] = 4;
                }
                catch (NoSuchFieldError nosuchfielderror1) { }
                $SwitchMap$com$fasterxml$jackson$core$JsonToken[JsonToken.VALUE_EMBEDDED_OBJECT.ordinal()] = 5;
_L2:
                return;
                nosuchfielderror;
                if (true) goto _L2; else goto _L1
_L1:
            }
        }

        _cls1..SwitchMap.com.fasterxml.jackson.core.JsonToken[_currToken.ordinal()];
        JVM INSTR tableswitch 1 5: default 56
    //                   1 74
    //                   2 85
    //                   3 96
    //                   4 96
    //                   5 110;
           goto _L3 _L4 _L5 _L6 _L6 _L7
_L3:
        if (_currToken != null)
            s = _currToken.asString();
        continue; /* Loop/switch isn't completed */
_L4:
        s = _nodeCursor.getCurrentName();
        continue; /* Loop/switch isn't completed */
_L5:
        s = currentNode().textValue();
        continue; /* Loop/switch isn't completed */
_L6:
        s = String.valueOf(currentNode().numberValue());
        continue; /* Loop/switch isn't completed */
_L7:
        JsonNode jsonnode = currentNode();
        if (jsonnode == null || !jsonnode.isBinary()) goto _L3; else goto _L8
_L8:
        s = jsonnode.asText();
        if (true) goto _L1; else goto _L9
_L9:
    }

    public char[] getTextCharacters() {
        return getText().toCharArray();
    }

    public int getTextLength() {
        return getText().length();
    }

    public int getTextOffset() {
        return 0;
    }

    public JsonLocation getTokenLocation() {
        return JsonLocation.NA;
    }

    public boolean hasTextCharacters() {
        return false;
    }

    public boolean isClosed() {
        return _closed;
    }

    public JsonToken nextToken() {
        JsonToken jsontoken = null;
        if (_nextToken != null) {
            _currToken = _nextToken;
            _nextToken = null;
            jsontoken = _currToken;
        } else
        if (_startContainer) {
            _startContainer = false;
            if (!_nodeCursor.currentHasChildren()) {
                if (_currToken == JsonToken.START_OBJECT)
                    jsontoken = JsonToken.END_OBJECT;
                else
                    jsontoken = JsonToken.END_ARRAY;
                _currToken = jsontoken;
                jsontoken = _currToken;
            } else {
                _nodeCursor = _nodeCursor.iterateChildren();
                _currToken = _nodeCursor.nextToken();
                if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY)
                    _startContainer = true;
                jsontoken = _currToken;
            }
        } else
        if (_nodeCursor == null) {
            _closed = true;
        } else {
            _currToken = _nodeCursor.nextToken();
            if (_currToken != null) {
                if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY)
                    _startContainer = true;
                jsontoken = _currToken;
            } else {
                _currToken = _nodeCursor.endToken();
                _nodeCursor = _nodeCursor.getParent();
                jsontoken = _currToken;
            }
        }
        return jsontoken;
    }

    public void overrideCurrentName(String s) {
        if (_nodeCursor != null)
            _nodeCursor.overrideCurrentName(s);
    }

    public int readBinaryValue(Base64Variant base64variant, OutputStream outputstream) {
        int i = 0;
        base64variant = getBinaryValue(base64variant);
        if (base64variant != null) {
            outputstream.write(base64variant, 0, base64variant.length);
            i = base64variant.length;
        }
        return i;
    }

    public void setCodec(ObjectCodec objectcodec) {
        _objectCodec = objectcodec;
    }

    public JsonParser skipChildren() {
        if (_currToken != JsonToken.START_OBJECT) goto _L2; else goto _L1
_L1:
        _startContainer = false;
        _currToken = JsonToken.END_OBJECT;
_L4:
        return this;
_L2:
        if (_currToken == JsonToken.START_ARRAY) {
            _startContainer = false;
            _currToken = JsonToken.END_ARRAY;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public Version version() {
        return PackageVersion.VERSION;
    }
}
