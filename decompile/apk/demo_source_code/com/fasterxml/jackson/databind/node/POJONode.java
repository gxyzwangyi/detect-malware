// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.node;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.JsonSerializable;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.util.RawValue;

// Referenced classes of package com.fasterxml.jackson.databind.node:
//            ValueNode, JsonNodeType

public class POJONode extends ValueNode {

    protected final Object _value;

    public POJONode(Object obj) {
        _value = obj;
    }

    protected boolean _pojoEquals(POJONode pojonode) {
        boolean flag;
        if (_value == null) {
            if (pojonode._value == null)
                flag = true;
            else
                flag = false;
        } else {
            flag = _value.equals(pojonode._value);
        }
        return flag;
    }

    public boolean asBoolean(boolean flag) {
        boolean flag1 = flag;
        if (_value != null) {
            flag1 = flag;
            if (_value instanceof Boolean)
                flag1 = ((Boolean)_value).booleanValue();
        }
        return flag1;
    }

    public double asDouble(double d) {
        if (_value instanceof Number)
            d = ((Number)_value).doubleValue();
        return d;
    }

    public int asInt(int i) {
        if (_value instanceof Number)
            i = ((Number)_value).intValue();
        return i;
    }

    public long asLong(long l) {
        if (_value instanceof Number)
            l = ((Number)_value).longValue();
        return l;
    }

    public String asText() {
        String s;
        if (_value == null)
            s = "null";
        else
            s = _value.toString();
        return s;
    }

    public String asText(String s) {
        if (_value != null)
            s = _value.toString();
        return s;
    }

    public JsonToken asToken() {
        return JsonToken.VALUE_EMBEDDED_OBJECT;
    }

    public byte[] binaryValue() {
        byte abyte0[];
        if (_value instanceof byte[])
            abyte0 = (byte[])(byte[])_value;
        else
            abyte0 = super.binaryValue();
        return abyte0;
    }

    public boolean equals(Object obj) {
        boolean flag1 = false;
        if (obj != this) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        flag = flag1;
        if (obj != null) {
            flag = flag1;
            if (obj instanceof POJONode)
                flag = _pojoEquals((POJONode)obj);
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public JsonNodeType getNodeType() {
        return JsonNodeType.POJO;
    }

    public Object getPojo() {
        return _value;
    }

    public int hashCode() {
        return _value.hashCode();
    }

    public final void serialize(JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        if (_value == null)
            serializerprovider.defaultSerializeNull(jsongenerator);
        else
        if (_value instanceof JsonSerializable)
            ((JsonSerializable)_value).serialize(jsongenerator, serializerprovider);
        else
            jsongenerator.writeObject(_value);
    }

    public String toString() {
        String s;
        if (_value instanceof byte[])
            s = String.format("(binary value of %d bytes)", new Object[] {
                Integer.valueOf(((byte[])(byte[])_value).length)
            });
        else
        if (_value instanceof RawValue)
            s = String.format("(raw value '%s')", new Object[] {
                ((RawValue)_value).toString()
            });
        else
            s = String.valueOf(_value);
        return s;
    }
}
