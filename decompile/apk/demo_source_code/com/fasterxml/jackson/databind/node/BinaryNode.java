// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.node;

import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializerProvider;
import java.util.Arrays;

// Referenced classes of package com.fasterxml.jackson.databind.node:
//            ValueNode, JsonNodeType

public class BinaryNode extends ValueNode {

    static final BinaryNode EMPTY_BINARY_NODE = new BinaryNode(new byte[0]);
    protected final byte _data[];

    public BinaryNode(byte abyte0[]) {
        _data = abyte0;
    }

    public BinaryNode(byte abyte0[], int i, int j) {
        if (i == 0 && j == abyte0.length) {
            _data = abyte0;
        } else {
            _data = new byte[j];
            System.arraycopy(abyte0, i, _data, 0, j);
        }
    }

    public static BinaryNode valueOf(byte abyte0[]) {
        if (abyte0 == null)
            abyte0 = null;
        else
        if (abyte0.length == 0)
            abyte0 = EMPTY_BINARY_NODE;
        else
            abyte0 = new BinaryNode(abyte0);
        return abyte0;
    }

    public static BinaryNode valueOf(byte abyte0[], int i, int j) {
        if (abyte0 == null)
            abyte0 = null;
        else
        if (j == 0)
            abyte0 = EMPTY_BINARY_NODE;
        else
            abyte0 = new BinaryNode(abyte0, i, j);
        return abyte0;
    }

    public String asText() {
        return Base64Variants.getDefaultVariant().encode(_data, false);
    }

    public JsonToken asToken() {
        return JsonToken.VALUE_EMBEDDED_OBJECT;
    }

    public byte[] binaryValue() {
        return _data;
    }

    public boolean equals(Object obj) {
        boolean flag1 = false;
        if (obj != this) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        flag = flag1;
        if (obj != null) {
            flag = flag1;
            if (obj instanceof BinaryNode)
                flag = Arrays.equals(((BinaryNode)obj)._data, _data);
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public JsonNodeType getNodeType() {
        return JsonNodeType.BINARY;
    }

    public int hashCode() {
        int i;
        if (_data == null)
            i = -1;
        else
            i = _data.length;
        return i;
    }

    public final void serialize(JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        jsongenerator.writeBinary(serializerprovider.getConfig().getBase64Variant(), _data, 0, _data.length);
    }

    public String toString() {
        return Base64Variants.getDefaultVariant().encode(_data, true);
    }

}
