// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.node;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.SerializerProvider;
import java.math.BigDecimal;
import java.math.BigInteger;

// Referenced classes of package com.fasterxml.jackson.databind.node:
//            NumericNode

public class BigIntegerNode extends NumericNode {

    private static final BigInteger MAX_INTEGER = BigInteger.valueOf(0x7fffffffL);
    private static final BigInteger MAX_LONG = BigInteger.valueOf(0xffffffffL);
    private static final BigInteger MIN_INTEGER = BigInteger.valueOf(0x80000000L);
    private static final BigInteger MIN_LONG = BigInteger.valueOf(0x0L);
    protected final BigInteger _value;

    public BigIntegerNode(BigInteger biginteger) {
        _value = biginteger;
    }

    public static BigIntegerNode valueOf(BigInteger biginteger) {
        return new BigIntegerNode(biginteger);
    }

    public boolean asBoolean(boolean flag) {
        if (!BigInteger.ZERO.equals(_value))
            flag = true;
        else
            flag = false;
        return flag;
    }

    public String asText() {
        return _value.toString();
    }

    public JsonToken asToken() {
        return JsonToken.VALUE_NUMBER_INT;
    }

    public BigInteger bigIntegerValue() {
        return _value;
    }

    public boolean canConvertToInt() {
        boolean flag;
        if (_value.compareTo(MIN_INTEGER) >= 0 && _value.compareTo(MAX_INTEGER) <= 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean canConvertToLong() {
        boolean flag;
        if (_value.compareTo(MIN_LONG) >= 0 && _value.compareTo(MAX_LONG) <= 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public BigDecimal decimalValue() {
        return new BigDecimal(_value);
    }

    public double doubleValue() {
        return _value.doubleValue();
    }

    public boolean equals(Object obj) {
        boolean flag1 = false;
        if (obj != this) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        flag = flag1;
        if (obj != null) {
            flag = flag1;
            if (obj instanceof BigIntegerNode)
                flag = ((BigIntegerNode)obj)._value.equals(_value);
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public float floatValue() {
        return _value.floatValue();
    }

    public int hashCode() {
        return _value.hashCode();
    }

    public int intValue() {
        return _value.intValue();
    }

    public boolean isBigInteger() {
        return true;
    }

    public boolean isIntegralNumber() {
        return true;
    }

    public long longValue() {
        return _value.longValue();
    }

    public com.fasterxml.jackson.core.JsonParser.NumberType numberType() {
        return com.fasterxml.jackson.core.JsonParser.NumberType.BIG_INTEGER;
    }

    public Number numberValue() {
        return _value;
    }

    public final void serialize(JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
        jsongenerator.writeNumber(_value);
    }

    public short shortValue() {
        return _value.shortValue();
    }

}
