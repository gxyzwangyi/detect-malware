// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind;

import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.Named;
import java.lang.annotation.Annotation;

// Referenced classes of package com.fasterxml.jackson.databind:
//            SerializerProvider, AnnotationIntrospector, PropertyName, PropertyMetadata, 
//            JavaType

public interface BeanProperty
    extends Named {
    public static class Std
        implements BeanProperty {

        protected final Annotations _contextAnnotations;
        protected final AnnotatedMember _member;
        protected final PropertyMetadata _metadata;
        protected final PropertyName _name;
        protected final JavaType _type;
        protected final PropertyName _wrapperName;

        public void depositSchemaProperty(JsonObjectFormatVisitor jsonobjectformatvisitor, SerializerProvider serializerprovider) {
            throw new UnsupportedOperationException((new StringBuilder()).append("Instances of ").append(getClass().getName()).append(" should not get visited").toString());
        }

        public com.fasterxml.jackson.annotation.JsonFormat.Value findFormatOverrides(AnnotationIntrospector annotationintrospector) {
            if (_member == null || annotationintrospector == null) goto _L2; else goto _L1
_L1:
            annotationintrospector = annotationintrospector.findFormat(_member);
            if (annotationintrospector == null) goto _L2; else goto _L3
_L3:
            return annotationintrospector;
_L2:
            annotationintrospector = EMPTY_FORMAT;
            if (true) goto _L3; else goto _L4
_L4:
        }

        public com.fasterxml.jackson.annotation.JsonFormat.Value findPropertyFormat(MapperConfig mapperconfig, Class class1) {
            Object obj;
            class1 = mapperconfig.getDefaultPropertyFormat(class1);
            obj = mapperconfig.getAnnotationIntrospector();
            mapperconfig = class1;
            if (obj == null) goto _L2; else goto _L1
_L1:
            if (_member != null) goto _L4; else goto _L3
_L3:
            mapperconfig = class1;
_L2:
            return mapperconfig;
_L4:
            obj = ((AnnotationIntrospector) (obj)).findFormat(_member);
            mapperconfig = class1;
            if (obj != null)
                mapperconfig = class1.withOverrides(((com.fasterxml.jackson.annotation.JsonFormat.Value) (obj)));
            if (true) goto _L2; else goto _L5
_L5:
        }

        public com.fasterxml.jackson.annotation.JsonInclude.Value findPropertyInclusion(MapperConfig mapperconfig, Class class1) {
            Object obj;
            class1 = mapperconfig.getDefaultPropertyInclusion(class1);
            obj = mapperconfig.getAnnotationIntrospector();
            mapperconfig = class1;
            if (obj == null) goto _L2; else goto _L1
_L1:
            if (_member != null) goto _L4; else goto _L3
_L3:
            mapperconfig = class1;
_L2:
            return mapperconfig;
_L4:
            obj = ((AnnotationIntrospector) (obj)).findPropertyInclusion(_member);
            mapperconfig = class1;
            if (obj != null)
                mapperconfig = class1.withOverrides(((com.fasterxml.jackson.annotation.JsonInclude.Value) (obj)));
            if (true) goto _L2; else goto _L5
_L5:
        }

        public Annotation getAnnotation(Class class1) {
            if (_member == null)
                class1 = null;
            else
                class1 = _member.getAnnotation(class1);
            return class1;
        }

        public Annotation getContextAnnotation(Class class1) {
            if (_contextAnnotations == null)
                class1 = null;
            else
                class1 = _contextAnnotations.get(class1);
            return class1;
        }

        public PropertyName getFullName() {
            return _name;
        }

        public AnnotatedMember getMember() {
            return _member;
        }

        public PropertyMetadata getMetadata() {
            return _metadata;
        }

        public String getName() {
            return _name.getSimpleName();
        }

        public JavaType getType() {
            return _type;
        }

        public PropertyName getWrapperName() {
            return _wrapperName;
        }

        public boolean isRequired() {
            return _metadata.isRequired();
        }

        public boolean isVirtual() {
            return false;
        }

        public Std withType(JavaType javatype) {
            return new Std(this, javatype);
        }

        public Std(Std std, JavaType javatype) {
            this(std._name, javatype, std._wrapperName, std._contextAnnotations, std._member, std._metadata);
        }

        public Std(PropertyName propertyname, JavaType javatype, PropertyName propertyname1, Annotations annotations, AnnotatedMember annotatedmember, PropertyMetadata propertymetadata) {
            _name = propertyname;
            _type = javatype;
            _wrapperName = propertyname1;
            _metadata = propertymetadata;
            _member = annotatedmember;
            _contextAnnotations = annotations;
        }

        public Std(String s, JavaType javatype, PropertyName propertyname, Annotations annotations, AnnotatedMember annotatedmember, boolean flag) {
            PropertyName propertyname1 = new PropertyName(s);
            if (flag)
                s = PropertyMetadata.STD_REQUIRED;
            else
                s = PropertyMetadata.STD_OPTIONAL;
            this(propertyname1, javatype, propertyname, annotations, annotatedmember, ((PropertyMetadata) (s)));
        }
    }


    public static final com.fasterxml.jackson.annotation.JsonFormat.Value EMPTY_FORMAT = new com.fasterxml.jackson.annotation.JsonFormat.Value();
    public static final com.fasterxml.jackson.annotation.JsonInclude.Value EMPTY_INCLUDE = com.fasterxml.jackson.annotation.JsonInclude.Value.empty();

    public abstract void depositSchemaProperty(JsonObjectFormatVisitor jsonobjectformatvisitor, SerializerProvider serializerprovider);

    public abstract com.fasterxml.jackson.annotation.JsonFormat.Value findFormatOverrides(AnnotationIntrospector annotationintrospector);

    public abstract com.fasterxml.jackson.annotation.JsonFormat.Value findPropertyFormat(MapperConfig mapperconfig, Class class1);

    public abstract com.fasterxml.jackson.annotation.JsonInclude.Value findPropertyInclusion(MapperConfig mapperconfig, Class class1);

    public abstract Annotation getAnnotation(Class class1);

    public abstract Annotation getContextAnnotation(Class class1);

    public abstract PropertyName getFullName();

    public abstract AnnotatedMember getMember();

    public abstract PropertyMetadata getMetadata();

    public abstract String getName();

    public abstract JavaType getType();

    public abstract PropertyName getWrapperName();

    public abstract boolean isRequired();

    public abstract boolean isVirtual();

}
