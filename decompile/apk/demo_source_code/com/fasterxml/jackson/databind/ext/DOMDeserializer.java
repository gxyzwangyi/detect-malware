// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ext;

import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import java.io.StringReader;
import javax.xml.parsers.*;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.xml.sax.InputSource;

public abstract class DOMDeserializer extends FromStringDeserializer {
    public static class DocumentDeserializer extends DOMDeserializer {

        private static final long serialVersionUID = 1L;

        public volatile Object _deserialize(String s, DeserializationContext deserializationcontext) {
            return _deserialize(s, deserializationcontext);
        }

        public Document _deserialize(String s, DeserializationContext deserializationcontext) {
            return parse(s);
        }

        public DocumentDeserializer() {
            super(org/w3c/dom/Document);
        }
    }

    public static class NodeDeserializer extends DOMDeserializer {

        private static final long serialVersionUID = 1L;

        public volatile Object _deserialize(String s, DeserializationContext deserializationcontext) {
            return _deserialize(s, deserializationcontext);
        }

        public Node _deserialize(String s, DeserializationContext deserializationcontext) {
            return parse(s);
        }

        public NodeDeserializer() {
            super(org/w3c/dom/Node);
        }
    }


    private static final DocumentBuilderFactory DEFAULT_PARSER_FACTORY;
    private static final long serialVersionUID = 1L;

    protected DOMDeserializer(Class class1) {
        super(class1);
    }

    public abstract Object _deserialize(String s, DeserializationContext deserializationcontext);

    protected DocumentBuilder documentBuilder() {
        return DEFAULT_PARSER_FACTORY.newDocumentBuilder();
    }

    protected final Document parse(String s) {
        try {
            DocumentBuilder documentbuilder = documentBuilder();
            InputSource inputsource = JVM INSTR new #64  <Class InputSource>;
            StringReader stringreader = JVM INSTR new #66  <Class StringReader>;
            stringreader.StringReader(s);
            inputsource.InputSource(stringreader);
            s = documentbuilder.parse(inputsource);
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            throw new IllegalArgumentException((new StringBuilder()).append("Failed to parse JSON String as XML: ").append(s.getMessage()).toString(), s);
        }
        return s;
    }

    static  {
        DocumentBuilderFactory documentbuilderfactory = DocumentBuilderFactory.newInstance();
        documentbuilderfactory.setNamespaceAware(true);
        documentbuilderfactory.setExpandEntityReferences(false);
        try {
            documentbuilderfactory.setFeature("http://javax.xml.XMLConstants/feature/secure-processing", true);
        }
        catch (ParserConfigurationException parserconfigurationexception) { }
        DEFAULT_PARSER_FACTORY = documentbuilderfactory;
    }
}
