// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ext;

import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.ser.Serializers;
import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;
import java.io.PrintStream;
import java.io.Serializable;
import org.w3c.dom.Document;
import org.w3c.dom.Node;

public class OptionalHandlerFactory
    implements Serializable {

    private static final Class CLASS_DOM_DOCUMENT;
    private static final Class CLASS_DOM_NODE;
    private static final Class CLASS_JAVA7_PATH;
    private static final String DESERIALIZERS_FOR_JAVAX_XML = "com.fasterxml.jackson.databind.ext.CoreXMLDeserializers";
    private static final String DESERIALIZER_FOR_DOM_DOCUMENT = "com.fasterxml.jackson.databind.ext.DOMDeserializer$DocumentDeserializer";
    private static final String DESERIALIZER_FOR_DOM_NODE = "com.fasterxml.jackson.databind.ext.DOMDeserializer$NodeDeserializer";
    private static final String DESERIALIZER_FOR_PATH = "com.fasterxml.jackson.databind.ext.PathDeserializer";
    private static final String PACKAGE_PREFIX_JAVAX_XML = "javax.xml.";
    private static final String SERIALIZERS_FOR_JAVAX_XML = "com.fasterxml.jackson.databind.ext.CoreXMLSerializers";
    private static final String SERIALIZER_FOR_DOM_NODE = "com.fasterxml.jackson.databind.ext.DOMSerializer";
    public static final OptionalHandlerFactory instance;
    private static final long serialVersionUID = 1L;

    protected OptionalHandlerFactory() {
    }

    private boolean hasSuperClassStartingWith(Class class1, String s) {
        boolean flag1;
        flag1 = false;
        class1 = class1.getSuperclass();
_L7:
        boolean flag = flag1;
        if (class1 == null) goto _L2; else goto _L1
_L1:
        if (class1 != java/lang/Object) goto _L4; else goto _L3
_L3:
        flag = flag1;
_L2:
        return flag;
_L4:
        if (!class1.getName().startsWith(s))
            break; /* Loop/switch isn't completed */
        flag = true;
        if (true) goto _L2; else goto _L5
_L5:
        class1 = class1.getSuperclass();
        if (true) goto _L7; else goto _L6
_L6:
    }

    private Object instantiate(String s) {
        s = ((String) (Class.forName(s).newInstance()));
_L2:
        return s;
        s;
_L3:
        s = null;
        if (true) goto _L2; else goto _L1
_L1:
        s;
          goto _L3
    }

    public JsonDeserializer findDeserializer(JavaType javatype, DeserializationConfig deserializationconfig, BeanDescription beandescription) {
        Class class1 = javatype.getRawClass();
        if (CLASS_JAVA7_PATH != null && CLASS_JAVA7_PATH.isAssignableFrom(class1))
            javatype = (JsonDeserializer)instantiate("com.fasterxml.jackson.databind.ext.PathDeserializer");
        else
        if (CLASS_DOM_NODE != null && CLASS_DOM_NODE.isAssignableFrom(class1))
            javatype = (JsonDeserializer)instantiate("com.fasterxml.jackson.databind.ext.DOMDeserializer$NodeDeserializer");
        else
        if (CLASS_DOM_DOCUMENT != null && CLASS_DOM_DOCUMENT.isAssignableFrom(class1))
            javatype = (JsonDeserializer)instantiate("com.fasterxml.jackson.databind.ext.DOMDeserializer$DocumentDeserializer");
        else
        if (class1.getName().startsWith("javax.xml.") || hasSuperClassStartingWith(class1, "javax.xml.")) {
            Object obj = instantiate("com.fasterxml.jackson.databind.ext.CoreXMLDeserializers");
            if (obj == null)
                javatype = null;
            else
                javatype = ((Deserializers)obj).findBeanDeserializer(javatype, deserializationconfig, beandescription);
        } else {
            javatype = null;
        }
        return javatype;
    }

    public JsonSerializer findSerializer(SerializationConfig serializationconfig, JavaType javatype, BeanDescription beandescription) {
        Class class1 = javatype.getRawClass();
        if (CLASS_JAVA7_PATH != null && CLASS_JAVA7_PATH.isAssignableFrom(class1))
            serializationconfig = ToStringSerializer.instance;
        else
        if (CLASS_DOM_NODE != null && CLASS_DOM_NODE.isAssignableFrom(class1))
            serializationconfig = (JsonSerializer)instantiate("com.fasterxml.jackson.databind.ext.DOMSerializer");
        else
        if (class1.getName().startsWith("javax.xml.") || hasSuperClassStartingWith(class1, "javax.xml.")) {
            Object obj = instantiate("com.fasterxml.jackson.databind.ext.CoreXMLSerializers");
            if (obj == null)
                serializationconfig = null;
            else
                serializationconfig = ((Serializers)obj).findSerializer(serializationconfig, javatype, beandescription);
        } else {
            serializationconfig = null;
        }
        return serializationconfig;
    }

    static  {
        Class class1;
        class1 = null;
        CLASS_DOM_NODE = org/w3c/dom/Node;
        CLASS_DOM_DOCUMENT = org/w3c/dom/Document;
        Class class2 = Class.forName("java.nio.file.Path");
        class1 = class2;
_L2:
        CLASS_JAVA7_PATH = class1;
        instance = new OptionalHandlerFactory();
        return;
        Exception exception;
        exception;
        System.err.println("WARNING: could not load Java7 Path class");
        if (true) goto _L2; else goto _L1
_L1:
    }
}
