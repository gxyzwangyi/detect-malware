// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ext;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.ContextualSerializer;
import com.fasterxml.jackson.databind.ser.std.*;
import java.util.Calendar;
import javax.xml.datatype.Duration;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.QName;

public class CoreXMLSerializers extends com.fasterxml.jackson.databind.ser.Serializers.Base {
    public static class XMLGregorianCalendarSerializer extends StdSerializer
        implements ContextualSerializer {

        static final XMLGregorianCalendarSerializer instance = new XMLGregorianCalendarSerializer();
        final JsonSerializer _delegate;

        protected Calendar _convert(XMLGregorianCalendar xmlgregoriancalendar) {
            if (xmlgregoriancalendar == null)
                xmlgregoriancalendar = null;
            else
                xmlgregoriancalendar = xmlgregoriancalendar.toGregorianCalendar();
            return xmlgregoriancalendar;
        }

        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper jsonformatvisitorwrapper, JavaType javatype) {
            _delegate.acceptJsonFormatVisitor(jsonformatvisitorwrapper, null);
        }

        public JsonSerializer createContextual(SerializerProvider serializerprovider, BeanProperty beanproperty) {
            beanproperty = serializerprovider.handlePrimaryContextualization(_delegate, beanproperty);
            serializerprovider = this;
            if (beanproperty != _delegate)
                serializerprovider = new XMLGregorianCalendarSerializer(beanproperty);
            return serializerprovider;
        }

        public JsonSerializer getDelegatee() {
            return _delegate;
        }

        public volatile boolean isEmpty(SerializerProvider serializerprovider, Object obj) {
            return isEmpty(serializerprovider, (XMLGregorianCalendar)obj);
        }

        public boolean isEmpty(SerializerProvider serializerprovider, XMLGregorianCalendar xmlgregoriancalendar) {
            return _delegate.isEmpty(serializerprovider, _convert(xmlgregoriancalendar));
        }

        public volatile void serialize(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
            serialize((XMLGregorianCalendar)obj, jsongenerator, serializerprovider);
        }

        public void serialize(XMLGregorianCalendar xmlgregoriancalendar, JsonGenerator jsongenerator, SerializerProvider serializerprovider) {
            _delegate.serialize(_convert(xmlgregoriancalendar), jsongenerator, serializerprovider);
        }

        public volatile void serializeWithType(Object obj, JsonGenerator jsongenerator, SerializerProvider serializerprovider, TypeSerializer typeserializer) {
            serializeWithType((XMLGregorianCalendar)obj, jsongenerator, serializerprovider, typeserializer);
        }

        public void serializeWithType(XMLGregorianCalendar xmlgregoriancalendar, JsonGenerator jsongenerator, SerializerProvider serializerprovider, TypeSerializer typeserializer) {
            _delegate.serializeWithType(_convert(xmlgregoriancalendar), jsongenerator, serializerprovider, typeserializer);
        }


        public XMLGregorianCalendarSerializer() {
            this(((JsonSerializer) (CalendarSerializer.instance)));
        }

        protected XMLGregorianCalendarSerializer(JsonSerializer jsonserializer) {
            super(javax/xml/datatype/XMLGregorianCalendar);
            _delegate = jsonserializer;
        }
    }


    public CoreXMLSerializers() {
    }

    public JsonSerializer findSerializer(SerializationConfig serializationconfig, JavaType javatype, BeanDescription beandescription) {
        serializationconfig = javatype.getRawClass();
        if (javax/xml/datatype/Duration.isAssignableFrom(serializationconfig) || javax/xml/namespace/QName.isAssignableFrom(serializationconfig))
            serializationconfig = ToStringSerializer.instance;
        else
        if (javax/xml/datatype/XMLGregorianCalendar.isAssignableFrom(serializationconfig))
            serializationconfig = XMLGregorianCalendarSerializer.instance;
        else
            serializationconfig = null;
        return serializationconfig;
    }
}
