// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.ext;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import java.util.GregorianCalendar;
import javax.xml.datatype.*;
import javax.xml.namespace.QName;

public class CoreXMLDeserializers extends com.fasterxml.jackson.databind.deser.Deserializers.Base {
    public static class Std extends FromStringDeserializer {

        private static final long serialVersionUID = 1L;
        protected final int _kind;

        protected Object _deserialize(String s, DeserializationContext deserializationcontext) {
            _kind;
            JVM INSTR tableswitch 1 3: default 32
        //                       1 40
        //                       2 32
        //                       3 50;
               goto _L1 _L2 _L1 _L3
_L1:
            throw new IllegalStateException();
_L2:
            s = CoreXMLDeserializers._dataTypeFactory.newDuration(s);
_L5:
            return s;
_L3:
            s = QName.valueOf(s);
            if (true) goto _L5; else goto _L4
_L4:
        }

        public Object deserialize(JsonParser jsonparser, DeserializationContext deserializationcontext) {
            if (_kind == 2) {
                java.util.Date date = _parseDate(jsonparser, deserializationcontext);
                if (date == null) {
                    jsonparser = null;
                } else {
                    jsonparser = new GregorianCalendar();
                    jsonparser.setTime(date);
                    deserializationcontext = deserializationcontext.getTimeZone();
                    if (deserializationcontext != null)
                        jsonparser.setTimeZone(deserializationcontext);
                    jsonparser = CoreXMLDeserializers._dataTypeFactory.newXMLGregorianCalendar(jsonparser);
                }
            } else {
                jsonparser = ((JsonParser) (super.deserialize(jsonparser, deserializationcontext)));
            }
            return jsonparser;
        }

        public Std(Class class1, int i) {
            super(class1);
            _kind = i;
        }
    }


    protected static final int TYPE_DURATION = 1;
    protected static final int TYPE_G_CALENDAR = 2;
    protected static final int TYPE_QNAME = 3;
    static final DatatypeFactory _dataTypeFactory;

    public CoreXMLDeserializers() {
    }

    public JsonDeserializer findBeanDeserializer(JavaType javatype, DeserializationConfig deserializationconfig, BeanDescription beandescription) {
        javatype = javatype.getRawClass();
        if (javatype == javax/xml/namespace/QName)
            javatype = new Std(javatype, 3);
        else
        if (javatype == javax/xml/datatype/XMLGregorianCalendar)
            javatype = new Std(javatype, 2);
        else
        if (javatype == javax/xml/datatype/Duration)
            javatype = new Std(javatype, 1);
        else
            javatype = null;
        return javatype;
    }

    static  {
        try {
            _dataTypeFactory = DatatypeFactory.newInstance();
        }
        catch (DatatypeConfigurationException datatypeconfigurationexception) {
            throw new RuntimeException(datatypeconfigurationexception);
        }
    }
}
