// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.introspect;

import com.fasterxml.jackson.databind.util.Annotations;
import java.lang.annotation.Annotation;
import java.util.*;

public final class AnnotationMap
    implements Annotations {

    protected HashMap _annotations;

    public AnnotationMap() {
    }

    private AnnotationMap(HashMap hashmap) {
        _annotations = hashmap;
    }

    public static AnnotationMap merge(AnnotationMap annotationmap, AnnotationMap annotationmap1) {
        if (annotationmap != null && annotationmap._annotations != null && !annotationmap._annotations.isEmpty()) goto _L2; else goto _L1
_L1:
        Object obj = annotationmap1;
_L4:
        return ((AnnotationMap) (obj));
_L2:
        obj = annotationmap;
        if (annotationmap1 != null) {
            obj = annotationmap;
            if (annotationmap1._annotations != null) {
                obj = annotationmap;
                if (!annotationmap1._annotations.isEmpty()) {
                    obj = new HashMap();
                    Annotation annotation;
                    for (annotationmap1 = annotationmap1._annotations.values().iterator(); annotationmap1.hasNext(); ((HashMap) (obj)).put(annotation.annotationType(), annotation))
                        annotation = (Annotation)annotationmap1.next();

                    for (annotationmap1 = annotationmap._annotations.values().iterator(); annotationmap1.hasNext(); ((HashMap) (obj)).put(annotationmap.annotationType(), annotationmap))
                        annotationmap = (Annotation)annotationmap1.next();

                    obj = new AnnotationMap(((HashMap) (obj)));
                }
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected final boolean _add(Annotation annotation) {
        if (_annotations == null)
            _annotations = new HashMap();
        Annotation annotation1 = (Annotation)_annotations.put(annotation.annotationType(), annotation);
        boolean flag;
        if (annotation1 == null || !annotation1.equals(annotation))
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean add(Annotation annotation) {
        return _add(annotation);
    }

    public boolean addIfNotPresent(Annotation annotation) {
        boolean flag;
        if (_annotations == null || !_annotations.containsKey(annotation.annotationType())) {
            _add(annotation);
            flag = true;
        } else {
            flag = false;
        }
        return flag;
    }

    public Iterable annotations() {
        Object obj;
        if (_annotations == null || _annotations.size() == 0)
            obj = Collections.emptyList();
        else
            obj = _annotations.values();
        return ((Iterable) (obj));
    }

    public Annotation get(Class class1) {
        if (_annotations == null)
            class1 = null;
        else
            class1 = (Annotation)_annotations.get(class1);
        return class1;
    }

    public boolean has(Class class1) {
        boolean flag;
        if (_annotations == null)
            flag = false;
        else
            flag = _annotations.containsKey(class1);
        return flag;
    }

    public boolean hasOneOf(Class aclass[]) {
        boolean flag;
        boolean flag1;
        flag1 = false;
        flag = flag1;
        if (_annotations == null) goto _L2; else goto _L1
_L1:
        int i;
        int j;
        j = aclass.length;
        i = 0;
_L7:
        flag = flag1;
        if (i >= j) goto _L2; else goto _L3
_L3:
        if (!_annotations.containsKey(aclass[i])) goto _L5; else goto _L4
_L4:
        flag = true;
_L2:
        return flag;
_L5:
        i++;
        if (true) goto _L7; else goto _L6
_L6:
    }

    public int size() {
        int i;
        if (_annotations == null)
            i = 0;
        else
            i = _annotations.size();
        return i;
    }

    public String toString() {
        String s;
        if (_annotations == null)
            s = "[null]";
        else
            s = _annotations.toString();
        return s;
    }
}
