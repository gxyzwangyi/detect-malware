// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.introspect;

import com.fasterxml.jackson.databind.JavaType;
import java.lang.reflect.*;

// Referenced classes of package com.fasterxml.jackson.databind.introspect:
//            AnnotatedMember, AnnotatedWithParams, AnnotationMap, Annotated

public final class AnnotatedParameter extends AnnotatedMember {

    private static final long serialVersionUID = 1L;
    protected final int _index;
    protected final AnnotatedWithParams _owner;
    protected final JavaType _type;

    public AnnotatedParameter(AnnotatedWithParams annotatedwithparams, JavaType javatype, AnnotationMap annotationmap, int i) {
        TypeResolutionContext typeresolutioncontext;
        if (annotatedwithparams == null)
            typeresolutioncontext = null;
        else
            typeresolutioncontext = annotatedwithparams.getTypeContext();
        super(typeresolutioncontext, annotationmap);
        _owner = annotatedwithparams;
        _type = javatype;
        _index = i;
    }

    public boolean equals(Object obj) {
        boolean flag = true;
        if (obj != this) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        if (obj == null || obj.getClass() != getClass()) {
            flag = false;
        } else {
            obj = (AnnotatedParameter)obj;
            if (!((AnnotatedParameter) (obj))._owner.equals(_owner) || ((AnnotatedParameter) (obj))._index != _index)
                flag = false;
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    public AnnotatedElement getAnnotated() {
        return null;
    }

    public Class getDeclaringClass() {
        return _owner.getDeclaringClass();
    }

    public Type getGenericType() {
        return _owner.getGenericParameterType(_index);
    }

    public int getIndex() {
        return _index;
    }

    public Member getMember() {
        return _owner.getMember();
    }

    public int getModifiers() {
        return _owner.getModifiers();
    }

    public String getName() {
        return "";
    }

    public AnnotatedWithParams getOwner() {
        return _owner;
    }

    public Type getParameterType() {
        return _type;
    }

    public Class getRawType() {
        return _type.getRawClass();
    }

    public JavaType getType() {
        return _type;
    }

    public Object getValue(Object obj) {
        throw new UnsupportedOperationException((new StringBuilder()).append("Cannot call getValue() on constructor parameter of ").append(getDeclaringClass().getName()).toString());
    }

    public int hashCode() {
        return _owner.hashCode() + _index;
    }

    public void setValue(Object obj, Object obj1) {
        throw new UnsupportedOperationException((new StringBuilder()).append("Cannot call setValue() on constructor parameter of ").append(getDeclaringClass().getName()).toString());
    }

    public String toString() {
        return (new StringBuilder()).append("[parameter #").append(getIndex()).append(", annotations: ").append(_annotations).append("]").toString();
    }

    public volatile Annotated withAnnotations(AnnotationMap annotationmap) {
        return withAnnotations(annotationmap);
    }

    public AnnotatedParameter withAnnotations(AnnotationMap annotationmap) {
        if (annotationmap == _annotations)
            annotationmap = this;
        else
            annotationmap = _owner.replaceParameterAnnotations(_index, annotationmap);
        return annotationmap;
    }
}
