// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.introspect;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.annotation.*;
import com.fasterxml.jackson.databind.cfg.*;
import com.fasterxml.jackson.databind.jsontype.*;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter;
import com.fasterxml.jackson.databind.ser.std.RawSerializer;
import com.fasterxml.jackson.databind.util.*;
import java.beans.ConstructorProperties;
import java.beans.Transient;
import java.io.Serializable;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.util.*;
import java.util.logging.Logger;

// Referenced classes of package com.fasterxml.jackson.databind.introspect:
//            VirtualAnnotatedMember, AnnotatedClass, AnnotatedParameter, VisibilityChecker, 
//            AnnotatedMethod, AnnotatedMember, ObjectIdInfo, Annotated, 
//            AnnotatedConstructor, AnnotatedWithParams

public class JacksonAnnotationIntrospector extends AnnotationIntrospector
    implements Serializable {
    private static class Java7Support {

        private final Class _bogus = java/beans/ConstructorProperties;

        public PropertyName findConstructorName(AnnotatedParameter annotatedparameter) {
            Object obj = annotatedparameter.getOwner();
            if (obj == null) goto _L2; else goto _L1
_L1:
            obj = (ConstructorProperties)((AnnotatedWithParams) (obj)).getAnnotation(java/beans/ConstructorProperties);
            if (obj == null) goto _L2; else goto _L3
_L3:
            int i;
            String as[];
            as = ((ConstructorProperties) (obj)).value();
            i = annotatedparameter.getIndex();
            if (i >= as.length) goto _L2; else goto _L4
_L4:
            annotatedparameter = PropertyName.construct(as[i]);
_L6:
            return annotatedparameter;
_L2:
            annotatedparameter = null;
            if (true) goto _L6; else goto _L5
_L5:
        }

        public Boolean findTransient(Annotated annotated) {
            annotated = (Transient)annotated.getAnnotation(java/beans/Transient);
            if (annotated != null)
                annotated = Boolean.valueOf(annotated.value());
            else
                annotated = null;
            return annotated;
        }

        public Boolean hasCreatorAnnotation(Annotated annotated) {
            if ((ConstructorProperties)annotated.getAnnotation(java/beans/ConstructorProperties) != null)
                annotated = Boolean.TRUE;
            else
                annotated = null;
            return annotated;
        }

        public Java7Support() {
        }
    }


    private static final Class ANNOTATIONS_TO_INFER_DESER[] = (Class[])(new Class[] {
        com/fasterxml/jackson/databind/annotation/JsonDeserialize, com/fasterxml/jackson/annotation/JsonView, com/fasterxml/jackson/annotation/JsonFormat, com/fasterxml/jackson/annotation/JsonTypeInfo, com/fasterxml/jackson/annotation/JsonUnwrapped, com/fasterxml/jackson/annotation/JsonBackReference, com/fasterxml/jackson/annotation/JsonManagedReference
    });
    private static final Class ANNOTATIONS_TO_INFER_SER[] = (Class[])(new Class[] {
        com/fasterxml/jackson/databind/annotation/JsonSerialize, com/fasterxml/jackson/annotation/JsonView, com/fasterxml/jackson/annotation/JsonFormat, com/fasterxml/jackson/annotation/JsonTypeInfo, com/fasterxml/jackson/annotation/JsonRawValue, com/fasterxml/jackson/annotation/JsonUnwrapped, com/fasterxml/jackson/annotation/JsonBackReference, com/fasterxml/jackson/annotation/JsonManagedReference
    });
    private static final Java7Support _jdk7Helper;
    private static final long serialVersionUID = 1L;
    protected transient LRUMap _annotationsInside;
    protected boolean _cfgConstructorPropertiesImpliesCreator;

    public JacksonAnnotationIntrospector() {
        _annotationsInside = new LRUMap(48, 48);
        _cfgConstructorPropertiesImpliesCreator = true;
    }

    private final Boolean _findSortAlpha(Annotated annotated) {
        annotated = (JsonPropertyOrder)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonPropertyOrder);
        if (annotated != null && annotated.alphabetic())
            annotated = Boolean.TRUE;
        else
            annotated = null;
        return annotated;
    }

    protected Class _classIfExplicit(Class class1) {
        Class class2;
label0:
        {
            if (class1 != null) {
                class2 = class1;
                if (!ClassUtil.isBogusClass(class1))
                    break label0;
            }
            class2 = null;
        }
        return class2;
    }

    protected Class _classIfExplicit(Class class1, Class class2) {
label0:
        {
            Class class3 = _classIfExplicit(class1);
            if (class3 != null) {
                class1 = class3;
                if (class3 != class2)
                    break label0;
            }
            class1 = null;
        }
        return class1;
    }

    protected StdTypeResolverBuilder _constructNoTypeResolverBuilder() {
        return StdTypeResolverBuilder.noTypeInfoBuilder();
    }

    protected StdTypeResolverBuilder _constructStdTypeResolverBuilder() {
        return new StdTypeResolverBuilder();
    }

    protected BeanPropertyWriter _constructVirtualProperty(com.fasterxml.jackson.databind.annotation.JsonAppend.Attr attr, MapperConfig mapperconfig, AnnotatedClass annotatedclass, JavaType javatype) {
        PropertyMetadata propertymetadata;
        PropertyName propertyname;
        PropertyName propertyname1;
        String s;
        if (attr.required())
            propertymetadata = PropertyMetadata.STD_REQUIRED;
        else
            propertymetadata = PropertyMetadata.STD_OPTIONAL;
        s = attr.value();
        propertyname1 = _propertyName(attr.propName(), attr.propNamespace());
        propertyname = propertyname1;
        if (!propertyname1.hasSimpleName())
            propertyname = PropertyName.construct(s);
        return AttributePropertyWriter.construct(s, SimpleBeanPropertyDefinition.construct(mapperconfig, new VirtualAnnotatedMember(annotatedclass, annotatedclass.getRawType(), s, javatype.getRawClass()), propertyname, propertymetadata, attr.include()), annotatedclass.getAnnotations(), javatype);
    }

    protected BeanPropertyWriter _constructVirtualProperty(com.fasterxml.jackson.databind.annotation.JsonAppend.Prop prop, MapperConfig mapperconfig, AnnotatedClass annotatedclass) {
        Object obj;
        JavaType javatype;
        Object obj1;
        Class class1;
        if (prop.required())
            obj = PropertyMetadata.STD_REQUIRED;
        else
            obj = PropertyMetadata.STD_OPTIONAL;
        obj1 = _propertyName(prop.name(), prop.namespace());
        javatype = mapperconfig.constructType(prop.type());
        obj1 = SimpleBeanPropertyDefinition.construct(mapperconfig, new VirtualAnnotatedMember(annotatedclass, annotatedclass.getRawType(), ((PropertyName) (obj1)).getSimpleName(), javatype.getRawClass()), ((PropertyName) (obj1)), ((PropertyMetadata) (obj)), prop.include());
        class1 = prop.value();
        prop = mapperconfig.getHandlerInstantiator();
        if (prop == null)
            prop = null;
        else
            prop = prop.virtualPropertyWriterInstance(mapperconfig, class1);
        obj = prop;
        if (prop == null)
            obj = (VirtualBeanPropertyWriter)ClassUtil.createInstance(class1, mapperconfig.canOverrideAccessModifiers());
        return ((VirtualBeanPropertyWriter) (obj)).withConfig(mapperconfig, annotatedclass, ((BeanPropertyDefinition) (obj1)), javatype);
    }

    protected PropertyName _findConstructorName(Annotated annotated) {
        if (!(annotated instanceof AnnotatedParameter)) goto _L2; else goto _L1
_L1:
        annotated = (AnnotatedParameter)annotated;
        if (annotated.getOwner() == null || _jdk7Helper == null) goto _L2; else goto _L3
_L3:
        annotated = _jdk7Helper.findConstructorName(annotated);
        if (annotated == null) goto _L2; else goto _L4
_L4:
        return annotated;
_L2:
        annotated = null;
        if (true) goto _L4; else goto _L5
_L5:
    }

    protected TypeResolverBuilder _findTypeResolver(MapperConfig mapperconfig, Annotated annotated, JavaType javatype) {
        Object obj;
        Object obj1;
        JsonTypeInfo jsontypeinfo;
        obj1 = null;
        jsontypeinfo = (JsonTypeInfo)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonTypeInfo);
        obj = (JsonTypeResolver)_findAnnotation(annotated, com/fasterxml/jackson/databind/annotation/JsonTypeResolver);
        if (obj == null) goto _L2; else goto _L1
_L1:
        if (jsontypeinfo != null) goto _L4; else goto _L3
_L3:
        mapperconfig = null;
_L5:
        return mapperconfig;
_L4:
        obj = mapperconfig.typeResolverBuilderInstance(annotated, ((JsonTypeResolver) (obj)).value());
_L6:
        JsonTypeIdResolver jsontypeidresolver = (JsonTypeIdResolver)_findAnnotation(annotated, com/fasterxml/jackson/databind/annotation/JsonTypeIdResolver);
        if (jsontypeidresolver == null)
            mapperconfig = obj1;
        else
            mapperconfig = mapperconfig.typeIdResolverInstance(annotated, jsontypeidresolver.value());
        if (mapperconfig != null)
            mapperconfig.init(javatype);
        obj = ((TypeResolverBuilder) (obj)).init(jsontypeinfo.use(), mapperconfig);
        javatype = jsontypeinfo.include();
        mapperconfig = javatype;
        if (javatype == com.fasterxml.jackson.annotation.JsonTypeInfo.As.EXTERNAL_PROPERTY) {
            mapperconfig = javatype;
            if (annotated instanceof AnnotatedClass)
                mapperconfig = com.fasterxml.jackson.annotation.JsonTypeInfo.As.PROPERTY;
        }
        annotated = ((TypeResolverBuilder) (obj)).inclusion(mapperconfig).typeProperty(jsontypeinfo.property());
        javatype = jsontypeinfo.defaultImpl();
        mapperconfig = annotated;
        if (javatype != com/fasterxml/jackson/annotation/JsonTypeInfo$None) {
            mapperconfig = annotated;
            if (!javatype.isAnnotation())
                mapperconfig = annotated.defaultImpl(javatype);
        }
        mapperconfig = mapperconfig.typeIdVisibility(jsontypeinfo.visible());
          goto _L5
_L2:
        if (jsontypeinfo == null) {
            mapperconfig = null;
        } else {
label0:
            {
                if (jsontypeinfo.use() != com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NONE)
                    break label0;
                mapperconfig = _constructNoTypeResolverBuilder();
            }
        }
          goto _L5
        obj = _constructStdTypeResolverBuilder();
          goto _L6
    }

    protected boolean _isIgnorable(Annotated annotated) {
        JsonIgnore jsonignore = (JsonIgnore)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonIgnore);
        if (jsonignore == null) goto _L2; else goto _L1
_L1:
        boolean flag = jsonignore.value();
_L4:
        return flag;
_L2:
        if (_jdk7Helper != null) {
            annotated = _jdk7Helper.findTransient(annotated);
            if (annotated != null) {
                flag = annotated.booleanValue();
                continue; /* Loop/switch isn't completed */
            }
        }
        flag = false;
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected PropertyName _propertyName(String s, String s1) {
        if (s.isEmpty())
            s = PropertyName.USE_DEFAULT;
        else
        if (s1 == null || s1.isEmpty())
            s = PropertyName.construct(s);
        else
            s = PropertyName.construct(s, s1);
        return s;
    }

    public void findAndAddVirtualProperties(MapperConfig mapperconfig, AnnotatedClass annotatedclass, List list) {
        JsonAppend jsonappend = (JsonAppend)_findAnnotation(annotatedclass, com/fasterxml/jackson/databind/annotation/JsonAppend);
        if (jsonappend != null) {
            boolean flag = jsonappend.prepend();
            Object obj = null;
            com.fasterxml.jackson.databind.annotation.JsonAppend.Attr aattr[] = jsonappend.attrs();
            int j = aattr.length;
            int i = 0;
            while (i < j)  {
                JavaType javatype = ((JavaType) (obj));
                if (obj == null)
                    javatype = mapperconfig.constructType(java/lang/Object);
                obj = _constructVirtualProperty(aattr[i], mapperconfig, annotatedclass, javatype);
                if (flag)
                    list.add(i, obj);
                else
                    list.add(obj);
                i++;
                obj = javatype;
            }
            com.fasterxml.jackson.databind.annotation.JsonAppend.Prop aprop[] = jsonappend.props();
            j = aprop.length;
            i = 0;
            while (i < j)  {
                BeanPropertyWriter beanpropertywriter = _constructVirtualProperty(aprop[i], mapperconfig, annotatedclass);
                if (flag)
                    list.add(i, beanpropertywriter);
                else
                    list.add(beanpropertywriter);
                i++;
            }
        }
    }

    public VisibilityChecker findAutoDetectVisibility(AnnotatedClass annotatedclass, VisibilityChecker visibilitychecker) {
        annotatedclass = (JsonAutoDetect)_findAnnotation(annotatedclass, com/fasterxml/jackson/annotation/JsonAutoDetect);
        if (annotatedclass != null)
            visibilitychecker = visibilitychecker.with(annotatedclass);
        return visibilitychecker;
    }

    public String findClassDescription(AnnotatedClass annotatedclass) {
        annotatedclass = (JsonClassDescription)_findAnnotation(annotatedclass, com/fasterxml/jackson/annotation/JsonClassDescription);
        if (annotatedclass == null)
            annotatedclass = null;
        else
            annotatedclass = annotatedclass.value();
        return annotatedclass;
    }

    public Object findContentDeserializer(Annotated annotated) {
        annotated = (JsonDeserialize)_findAnnotation(annotated, com/fasterxml/jackson/databind/annotation/JsonDeserialize);
        if (annotated == null) goto _L2; else goto _L1
_L1:
        annotated = annotated.contentUsing();
        if (annotated == com/fasterxml/jackson/databind/JsonDeserializer$None) goto _L2; else goto _L3
_L3:
        return annotated;
_L2:
        annotated = null;
        if (true) goto _L3; else goto _L4
_L4:
    }

    public Object findContentSerializer(Annotated annotated) {
        annotated = (JsonSerialize)_findAnnotation(annotated, com/fasterxml/jackson/databind/annotation/JsonSerialize);
        if (annotated == null) goto _L2; else goto _L1
_L1:
        annotated = annotated.contentUsing();
        if (annotated == com/fasterxml/jackson/databind/JsonSerializer$None) goto _L2; else goto _L3
_L3:
        return annotated;
_L2:
        annotated = null;
        if (true) goto _L3; else goto _L4
_L4:
    }

    public com.fasterxml.jackson.annotation.JsonCreator.Mode findCreatorBinding(Annotated annotated) {
        annotated = (JsonCreator)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonCreator);
        if (annotated == null)
            annotated = null;
        else
            annotated = annotated.mode();
        return annotated;
    }

    public Object findDeserializationContentConverter(AnnotatedMember annotatedmember) {
        annotatedmember = (JsonDeserialize)_findAnnotation(annotatedmember, com/fasterxml/jackson/databind/annotation/JsonDeserialize);
        if (annotatedmember == null)
            annotatedmember = null;
        else
            annotatedmember = _classIfExplicit(annotatedmember.contentConverter(), com/fasterxml/jackson/databind/util/Converter$None);
        return annotatedmember;
    }

    public Class findDeserializationContentType(Annotated annotated, JavaType javatype) {
        annotated = (JsonDeserialize)_findAnnotation(annotated, com/fasterxml/jackson/databind/annotation/JsonDeserialize);
        if (annotated == null)
            annotated = null;
        else
            annotated = _classIfExplicit(annotated.contentAs());
        return annotated;
    }

    public Object findDeserializationConverter(Annotated annotated) {
        annotated = (JsonDeserialize)_findAnnotation(annotated, com/fasterxml/jackson/databind/annotation/JsonDeserialize);
        if (annotated == null)
            annotated = null;
        else
            annotated = _classIfExplicit(annotated.converter(), com/fasterxml/jackson/databind/util/Converter$None);
        return annotated;
    }

    public Class findDeserializationKeyType(Annotated annotated, JavaType javatype) {
        annotated = (JsonDeserialize)_findAnnotation(annotated, com/fasterxml/jackson/databind/annotation/JsonDeserialize);
        if (annotated == null)
            annotated = null;
        else
            annotated = _classIfExplicit(annotated.keyAs());
        return annotated;
    }

    public Class findDeserializationType(Annotated annotated, JavaType javatype) {
        annotated = (JsonDeserialize)_findAnnotation(annotated, com/fasterxml/jackson/databind/annotation/JsonDeserialize);
        if (annotated == null)
            annotated = null;
        else
            annotated = _classIfExplicit(annotated.as());
        return annotated;
    }

    public Object findDeserializer(Annotated annotated) {
        annotated = (JsonDeserialize)_findAnnotation(annotated, com/fasterxml/jackson/databind/annotation/JsonDeserialize);
        if (annotated == null) goto _L2; else goto _L1
_L1:
        annotated = annotated.using();
        if (annotated == com/fasterxml/jackson/databind/JsonDeserializer$None) goto _L2; else goto _L3
_L3:
        return annotated;
_L2:
        annotated = null;
        if (true) goto _L3; else goto _L4
_L4:
    }

    public String findEnumValue(Enum enum) {
        Object obj = enum.getClass().getField(enum.name());
        if (obj == null) goto _L2; else goto _L1
_L1:
        obj = (JsonProperty)((Field) (obj)).getAnnotation(com/fasterxml/jackson/annotation/JsonProperty);
        if (obj == null) goto _L2; else goto _L3
_L3:
        obj = ((JsonProperty) (obj)).value();
        if (obj == null) goto _L2; else goto _L4
_L4:
        boolean flag = ((String) (obj)).isEmpty();
        if (flag) goto _L2; else goto _L5
_L5:
        enum = ((Enum) (obj));
_L7:
        return enum;
        Object obj1;
        obj1;
_L2:
        enum = enum.name();
        if (true) goto _L7; else goto _L6
_L6:
        obj1;
          goto _L2
    }

    public String[] findEnumValues(Class class1, Enum aenum[], String as[]) {
        boolean flag = false;
        Object obj = null;
        Field afield[] = ClassUtil.getDeclaredFields(class1);
        int k = afield.length;
        int i = 0;
        class1 = obj;
        while (i < k)  {
            Field field = afield[i];
            Class class2;
            if (!field.isEnumConstant()) {
                class2 = class1;
            } else {
                Object obj1 = (JsonProperty)field.getAnnotation(com/fasterxml/jackson/annotation/JsonProperty);
                class2 = class1;
                if (obj1 != null) {
                    obj1 = ((JsonProperty) (obj1)).value();
                    class2 = class1;
                    if (!((String) (obj1)).isEmpty()) {
                        if (class1 == null)
                            class1 = new HashMap();
                        class1.put(field.getName(), obj1);
                        class2 = class1;
                    }
                }
            }
            i++;
            class1 = class2;
        }
        if (class1 != null) {
            int l = aenum.length;
            for (int j = ((flag) ? 1 : 0); j < l; j++) {
                String s = (String)class1.get(aenum[j].name());
                if (s != null)
                    as[j] = s;
            }

        }
        return as;
    }

    public Object findFilterId(Annotated annotated) {
        annotated = (JsonFilter)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonFilter);
        if (annotated == null) goto _L2; else goto _L1
_L1:
        annotated = annotated.value();
        if (annotated.length() <= 0) goto _L2; else goto _L3
_L3:
        return annotated;
_L2:
        annotated = null;
        if (true) goto _L3; else goto _L4
_L4:
    }

    public com.fasterxml.jackson.annotation.JsonFormat.Value findFormat(Annotated annotated) {
        annotated = (JsonFormat)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonFormat);
        if (annotated == null)
            annotated = null;
        else
            annotated = new com.fasterxml.jackson.annotation.JsonFormat.Value(annotated);
        return annotated;
    }

    public Boolean findIgnoreUnknownProperties(AnnotatedClass annotatedclass) {
        annotatedclass = (JsonIgnoreProperties)_findAnnotation(annotatedclass, com/fasterxml/jackson/annotation/JsonIgnoreProperties);
        if (annotatedclass == null)
            annotatedclass = null;
        else
            annotatedclass = Boolean.valueOf(annotatedclass.ignoreUnknown());
        return annotatedclass;
    }

    public String findImplicitPropertyName(AnnotatedMember annotatedmember) {
        annotatedmember = _findConstructorName(annotatedmember);
        if (annotatedmember == null)
            annotatedmember = null;
        else
            annotatedmember = annotatedmember.getSimpleName();
        return annotatedmember;
    }

    public Object findInjectableValueId(AnnotatedMember annotatedmember) {
        Object obj = (JacksonInject)_findAnnotation(annotatedmember, com/fasterxml/jackson/annotation/JacksonInject);
        if (obj != null) goto _L2; else goto _L1
_L1:
        obj = null;
_L4:
        return obj;
_L2:
        String s = ((JacksonInject) (obj)).value();
        obj = s;
        if (s.length() == 0)
            if (!(annotatedmember instanceof AnnotatedMethod)) {
                obj = annotatedmember.getRawType().getName();
            } else {
                obj = (AnnotatedMethod)annotatedmember;
                if (((AnnotatedMethod) (obj)).getParameterCount() == 0)
                    obj = annotatedmember.getRawType().getName();
                else
                    obj = ((AnnotatedMethod) (obj)).getRawParameterType(0).getName();
            }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public Object findKeyDeserializer(Annotated annotated) {
        annotated = (JsonDeserialize)_findAnnotation(annotated, com/fasterxml/jackson/databind/annotation/JsonDeserialize);
        if (annotated == null) goto _L2; else goto _L1
_L1:
        annotated = annotated.keyUsing();
        if (annotated == com/fasterxml/jackson/databind/KeyDeserializer$None) goto _L2; else goto _L3
_L3:
        return annotated;
_L2:
        annotated = null;
        if (true) goto _L3; else goto _L4
_L4:
    }

    public Object findKeySerializer(Annotated annotated) {
        annotated = (JsonSerialize)_findAnnotation(annotated, com/fasterxml/jackson/databind/annotation/JsonSerialize);
        if (annotated == null) goto _L2; else goto _L1
_L1:
        annotated = annotated.keyUsing();
        if (annotated == com/fasterxml/jackson/databind/JsonSerializer$None) goto _L2; else goto _L3
_L3:
        return annotated;
_L2:
        annotated = null;
        if (true) goto _L3; else goto _L4
_L4:
    }

    public PropertyName findNameForDeserialization(Annotated annotated) {
        JsonSetter jsonsetter = (JsonSetter)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonSetter);
        if (jsonsetter != null) {
            annotated = PropertyName.construct(jsonsetter.value());
        } else {
            JsonProperty jsonproperty = (JsonProperty)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonProperty);
            if (jsonproperty != null)
                annotated = PropertyName.construct(jsonproperty.value());
            else
            if (_hasOneOf(annotated, ANNOTATIONS_TO_INFER_DESER))
                annotated = PropertyName.USE_DEFAULT;
            else
                annotated = null;
        }
        return annotated;
    }

    public PropertyName findNameForSerialization(Annotated annotated) {
        JsonGetter jsongetter = (JsonGetter)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonGetter);
        if (jsongetter != null) {
            annotated = PropertyName.construct(jsongetter.value());
        } else {
            JsonProperty jsonproperty = (JsonProperty)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonProperty);
            if (jsonproperty != null)
                annotated = PropertyName.construct(jsonproperty.value());
            else
            if (_hasOneOf(annotated, ANNOTATIONS_TO_INFER_SER))
                annotated = PropertyName.USE_DEFAULT;
            else
                annotated = null;
        }
        return annotated;
    }

    public Object findNamingStrategy(AnnotatedClass annotatedclass) {
        annotatedclass = (JsonNaming)_findAnnotation(annotatedclass, com/fasterxml/jackson/databind/annotation/JsonNaming);
        if (annotatedclass == null)
            annotatedclass = null;
        else
            annotatedclass = annotatedclass.value();
        return annotatedclass;
    }

    public Object findNullSerializer(Annotated annotated) {
        annotated = (JsonSerialize)_findAnnotation(annotated, com/fasterxml/jackson/databind/annotation/JsonSerialize);
        if (annotated == null) goto _L2; else goto _L1
_L1:
        annotated = annotated.nullsUsing();
        if (annotated == com/fasterxml/jackson/databind/JsonSerializer$None) goto _L2; else goto _L3
_L3:
        return annotated;
_L2:
        annotated = null;
        if (true) goto _L3; else goto _L4
_L4:
    }

    public ObjectIdInfo findObjectIdInfo(Annotated annotated) {
        annotated = (JsonIdentityInfo)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonIdentityInfo);
        if (annotated == null || annotated.generator() == com/fasterxml/jackson/annotation/ObjectIdGenerators$None)
            annotated = null;
        else
            annotated = new ObjectIdInfo(PropertyName.construct(annotated.property()), annotated.scope(), annotated.generator(), annotated.resolver());
        return annotated;
    }

    public ObjectIdInfo findObjectReferenceInfo(Annotated annotated, ObjectIdInfo objectidinfo) {
        JsonIdentityReference jsonidentityreference = (JsonIdentityReference)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonIdentityReference);
        annotated = objectidinfo;
        if (jsonidentityreference != null)
            annotated = objectidinfo.withAlwaysAsId(jsonidentityreference.alwaysAsId());
        return annotated;
    }

    public Class findPOJOBuilder(AnnotatedClass annotatedclass) {
        annotatedclass = (JsonDeserialize)_findAnnotation(annotatedclass, com/fasterxml/jackson/databind/annotation/JsonDeserialize);
        if (annotatedclass == null)
            annotatedclass = null;
        else
            annotatedclass = _classIfExplicit(annotatedclass.builder());
        return annotatedclass;
    }

    public com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass annotatedclass) {
        annotatedclass = (JsonPOJOBuilder)_findAnnotation(annotatedclass, com/fasterxml/jackson/databind/annotation/JsonPOJOBuilder);
        if (annotatedclass == null)
            annotatedclass = null;
        else
            annotatedclass = new com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value(annotatedclass);
        return annotatedclass;
    }

    public String[] findPropertiesToIgnore(Annotated annotated) {
        annotated = (JsonIgnoreProperties)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonIgnoreProperties);
        if (annotated == null)
            annotated = null;
        else
            annotated = annotated.value();
        return annotated;
    }

    public String[] findPropertiesToIgnore(Annotated annotated, boolean flag) {
        annotated = (JsonIgnoreProperties)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonIgnoreProperties);
        if (annotated != null) goto _L2; else goto _L1
_L1:
        annotated = null;
_L4:
        return annotated;
_L2:
        if (flag) {
            if (annotated.allowGetters()) {
                annotated = null;
                continue; /* Loop/switch isn't completed */
            }
        } else
        if (annotated.allowSetters()) {
            annotated = null;
            continue; /* Loop/switch isn't completed */
        }
        annotated = annotated.value();
        if (true) goto _L4; else goto _L3
_L3:
    }

    public com.fasterxml.jackson.annotation.JsonProperty.Access findPropertyAccess(Annotated annotated) {
        annotated = (JsonProperty)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonProperty);
        if (annotated != null)
            annotated = annotated.access();
        else
            annotated = null;
        return annotated;
    }

    public TypeResolverBuilder findPropertyContentTypeResolver(MapperConfig mapperconfig, AnnotatedMember annotatedmember, JavaType javatype) {
        if (javatype.getContentType() == null)
            throw new IllegalArgumentException((new StringBuilder()).append("Must call method with a container or reference type (got ").append(javatype).append(")").toString());
        else
            return _findTypeResolver(mapperconfig, annotatedmember, javatype);
    }

    public String findPropertyDefaultValue(Annotated annotated) {
        Object obj;
        obj = null;
        annotated = (JsonProperty)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonProperty);
        if (annotated != null) goto _L2; else goto _L1
_L1:
        annotated = obj;
_L4:
        return annotated;
_L2:
        String s = annotated.defaultValue();
        annotated = s;
        if (s.isEmpty())
            annotated = null;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public String findPropertyDescription(Annotated annotated) {
        annotated = (JsonPropertyDescription)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonPropertyDescription);
        if (annotated == null)
            annotated = null;
        else
            annotated = annotated.value();
        return annotated;
    }

    public com.fasterxml.jackson.annotation.JsonInclude.Value findPropertyInclusion(Annotated annotated) {
        com.fasterxml.jackson.annotation.JsonInclude.Include include;
        JsonInclude jsoninclude;
        jsoninclude = (JsonInclude)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonInclude);
        static class _cls1 {

            static final int $SwitchMap$com$fasterxml$jackson$databind$annotation$JsonSerialize$Inclusion[];

            static  {
                $SwitchMap$com$fasterxml$jackson$databind$annotation$JsonSerialize$Inclusion = new int[com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion.values().length];
                NoSuchFieldError nosuchfielderror;
                try {
                    $SwitchMap$com$fasterxml$jackson$databind$annotation$JsonSerialize$Inclusion[com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion.ALWAYS.ordinal()] = 1;
                }
                catch (NoSuchFieldError nosuchfielderror4) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$databind$annotation$JsonSerialize$Inclusion[com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion.NON_NULL.ordinal()] = 2;
                }
                catch (NoSuchFieldError nosuchfielderror3) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$databind$annotation$JsonSerialize$Inclusion[com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion.NON_DEFAULT.ordinal()] = 3;
                }
                catch (NoSuchFieldError nosuchfielderror2) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$databind$annotation$JsonSerialize$Inclusion[com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion.NON_EMPTY.ordinal()] = 4;
                }
                catch (NoSuchFieldError nosuchfielderror1) { }
                $SwitchMap$com$fasterxml$jackson$databind$annotation$JsonSerialize$Inclusion[com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion.DEFAULT_INCLUSION.ordinal()] = 5;
_L2:
                return;
                nosuchfielderror;
                if (true) goto _L2; else goto _L1
_L1:
            }
        }

        com.fasterxml.jackson.annotation.JsonInclude.Include include1;
        if (jsoninclude == null)
            include1 = com.fasterxml.jackson.annotation.JsonInclude.Include.USE_DEFAULTS;
        else
            include1 = jsoninclude.value();
        include = include1;
        if (include1 != com.fasterxml.jackson.annotation.JsonInclude.Include.USE_DEFAULTS) goto _L2; else goto _L1
_L1:
        annotated = (JsonSerialize)_findAnnotation(annotated, com/fasterxml/jackson/databind/annotation/JsonSerialize);
        include = include1;
        if (annotated == null) goto _L2; else goto _L3
_L3:
        annotated = annotated.include();
        _cls1..SwitchMap.com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion[annotated.ordinal()];
        JVM INSTR tableswitch 1 4: default 92
    //                   1 120
    //                   2 127
    //                   3 134
    //                   4 141;
           goto _L4 _L5 _L6 _L7 _L8
_L8:
        break MISSING_BLOCK_LABEL_141;
_L4:
        include = include1;
_L2:
        if (jsoninclude == null)
            annotated = com.fasterxml.jackson.annotation.JsonInclude.Include.USE_DEFAULTS;
        else
            annotated = jsoninclude.content();
        return com.fasterxml.jackson.annotation.JsonInclude.Value.construct(include, annotated);
_L5:
        include = com.fasterxml.jackson.annotation.JsonInclude.Include.ALWAYS;
          goto _L2
_L6:
        include = com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
          goto _L2
_L7:
        include = com.fasterxml.jackson.annotation.JsonInclude.Include.NON_DEFAULT;
          goto _L2
        include = com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY;
          goto _L2
    }

    public Integer findPropertyIndex(Annotated annotated) {
        annotated = (JsonProperty)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonProperty);
        if (annotated == null) goto _L2; else goto _L1
_L1:
        int i = annotated.index();
        if (i == -1) goto _L2; else goto _L3
_L3:
        annotated = Integer.valueOf(i);
_L5:
        return annotated;
_L2:
        annotated = null;
        if (true) goto _L5; else goto _L4
_L4:
    }

    public TypeResolverBuilder findPropertyTypeResolver(MapperConfig mapperconfig, AnnotatedMember annotatedmember, JavaType javatype) {
        if (javatype.isContainerType() || javatype.isReferenceType())
            mapperconfig = null;
        else
            mapperconfig = _findTypeResolver(mapperconfig, annotatedmember, javatype);
        return mapperconfig;
    }

    public com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty findReferenceType(AnnotatedMember annotatedmember) {
        JsonManagedReference jsonmanagedreference = (JsonManagedReference)_findAnnotation(annotatedmember, com/fasterxml/jackson/annotation/JsonManagedReference);
        if (jsonmanagedreference != null) {
            annotatedmember = com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.managed(jsonmanagedreference.value());
        } else {
            annotatedmember = (JsonBackReference)_findAnnotation(annotatedmember, com/fasterxml/jackson/annotation/JsonBackReference);
            if (annotatedmember != null)
                annotatedmember = com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.back(annotatedmember.value());
            else
                annotatedmember = null;
        }
        return annotatedmember;
    }

    public PropertyName findRootName(AnnotatedClass annotatedclass) {
        Object obj = null;
        Object obj1 = null;
        JsonRootName jsonrootname = (JsonRootName)_findAnnotation(annotatedclass, com/fasterxml/jackson/annotation/JsonRootName);
        if (jsonrootname == null) {
            annotatedclass = obj1;
        } else {
            annotatedclass = jsonrootname.namespace();
            if (annotatedclass != null && annotatedclass.length() == 0)
                annotatedclass = obj;
            annotatedclass = PropertyName.construct(jsonrootname.value(), annotatedclass);
        }
        return annotatedclass;
    }

    public Object findSerializationContentConverter(AnnotatedMember annotatedmember) {
        annotatedmember = (JsonSerialize)_findAnnotation(annotatedmember, com/fasterxml/jackson/databind/annotation/JsonSerialize);
        if (annotatedmember == null)
            annotatedmember = null;
        else
            annotatedmember = _classIfExplicit(annotatedmember.contentConverter(), com/fasterxml/jackson/databind/util/Converter$None);
        return annotatedmember;
    }

    public Class findSerializationContentType(Annotated annotated, JavaType javatype) {
        annotated = (JsonSerialize)_findAnnotation(annotated, com/fasterxml/jackson/databind/annotation/JsonSerialize);
        if (annotated == null)
            annotated = null;
        else
            annotated = _classIfExplicit(annotated.contentAs());
        return annotated;
    }

    public Object findSerializationConverter(Annotated annotated) {
        annotated = (JsonSerialize)_findAnnotation(annotated, com/fasterxml/jackson/databind/annotation/JsonSerialize);
        if (annotated == null)
            annotated = null;
        else
            annotated = _classIfExplicit(annotated.converter(), com/fasterxml/jackson/databind/util/Converter$None);
        return annotated;
    }

    public com.fasterxml.jackson.annotation.JsonInclude.Include findSerializationInclusion(Annotated annotated, com.fasterxml.jackson.annotation.JsonInclude.Include include) {
        Object obj = (JsonInclude)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonInclude);
        if (obj == null) goto _L2; else goto _L1
_L1:
        obj = ((JsonInclude) (obj)).value();
        if (obj == com.fasterxml.jackson.annotation.JsonInclude.Include.USE_DEFAULTS) goto _L2; else goto _L3
_L3:
        annotated = ((Annotated) (obj));
_L5:
        return annotated;
_L2:
        obj = (JsonSerialize)_findAnnotation(annotated, com/fasterxml/jackson/databind/annotation/JsonSerialize);
        annotated = include;
        if (obj == null) goto _L5; else goto _L4
_L4:
        annotated = ((JsonSerialize) (obj)).include();
        switch (_cls1..SwitchMap.com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion[annotated.ordinal()]) {
        default:
            annotated = include;
            break;

        case 1: // '\001'
            annotated = com.fasterxml.jackson.annotation.JsonInclude.Include.ALWAYS;
            break;

        case 2: // '\002'
            annotated = com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
            break;

        case 3: // '\003'
            annotated = com.fasterxml.jackson.annotation.JsonInclude.Include.NON_DEFAULT;
            break;

        case 4: // '\004'
            annotated = com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY;
            break;
        }
        if (true) goto _L5; else goto _L6
_L6:
    }

    public com.fasterxml.jackson.annotation.JsonInclude.Include findSerializationInclusionForContent(Annotated annotated, com.fasterxml.jackson.annotation.JsonInclude.Include include) {
        Object obj = (JsonInclude)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonInclude);
        annotated = include;
        if (obj != null) {
            obj = ((JsonInclude) (obj)).content();
            annotated = include;
            if (obj != com.fasterxml.jackson.annotation.JsonInclude.Include.USE_DEFAULTS)
                annotated = ((Annotated) (obj));
        }
        return annotated;
    }

    public Class findSerializationKeyType(Annotated annotated, JavaType javatype) {
        annotated = (JsonSerialize)_findAnnotation(annotated, com/fasterxml/jackson/databind/annotation/JsonSerialize);
        if (annotated == null)
            annotated = null;
        else
            annotated = _classIfExplicit(annotated.keyAs());
        return annotated;
    }

    public String[] findSerializationPropertyOrder(AnnotatedClass annotatedclass) {
        annotatedclass = (JsonPropertyOrder)_findAnnotation(annotatedclass, com/fasterxml/jackson/annotation/JsonPropertyOrder);
        if (annotatedclass == null)
            annotatedclass = null;
        else
            annotatedclass = annotatedclass.value();
        return annotatedclass;
    }

    public Boolean findSerializationSortAlphabetically(Annotated annotated) {
        return _findSortAlpha(annotated);
    }

    public Class findSerializationType(Annotated annotated) {
        annotated = (JsonSerialize)_findAnnotation(annotated, com/fasterxml/jackson/databind/annotation/JsonSerialize);
        if (annotated == null)
            annotated = null;
        else
            annotated = _classIfExplicit(annotated.as());
        return annotated;
    }

    public com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing findSerializationTyping(Annotated annotated) {
        annotated = (JsonSerialize)_findAnnotation(annotated, com/fasterxml/jackson/databind/annotation/JsonSerialize);
        if (annotated == null)
            annotated = null;
        else
            annotated = annotated.typing();
        return annotated;
    }

    public Object findSerializer(Annotated annotated) {
        Object obj = (JsonSerialize)_findAnnotation(annotated, com/fasterxml/jackson/databind/annotation/JsonSerialize);
        if (obj == null) goto _L2; else goto _L1
_L1:
        obj = ((JsonSerialize) (obj)).using();
        if (obj == com/fasterxml/jackson/databind/JsonSerializer$None) goto _L2; else goto _L3
_L3:
        annotated = ((Annotated) (obj));
_L5:
        return annotated;
_L2:
        JsonRawValue jsonrawvalue = (JsonRawValue)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonRawValue);
        if (jsonrawvalue != null && jsonrawvalue.value())
            annotated = new RawSerializer(annotated.getRawType());
        else
            annotated = null;
        if (true) goto _L5; else goto _L4
_L4:
    }

    public List findSubtypes(Annotated annotated) {
        annotated = (JsonSubTypes)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonSubTypes);
        if (annotated != null) goto _L2; else goto _L1
_L1:
        annotated = null;
_L4:
        return annotated;
_L2:
        com.fasterxml.jackson.annotation.JsonSubTypes.Type atype[] = annotated.value();
        ArrayList arraylist = new ArrayList(atype.length);
        int j = atype.length;
        int i = 0;
        do {
            annotated = arraylist;
            if (i >= j)
                continue;
            annotated = atype[i];
            arraylist.add(new NamedType(annotated.value(), annotated.name()));
            i++;
        } while (true);
        if (true) goto _L4; else goto _L3
_L3:
    }

    public String findTypeName(AnnotatedClass annotatedclass) {
        annotatedclass = (JsonTypeName)_findAnnotation(annotatedclass, com/fasterxml/jackson/annotation/JsonTypeName);
        if (annotatedclass == null)
            annotatedclass = null;
        else
            annotatedclass = annotatedclass.value();
        return annotatedclass;
    }

    public TypeResolverBuilder findTypeResolver(MapperConfig mapperconfig, AnnotatedClass annotatedclass, JavaType javatype) {
        return _findTypeResolver(mapperconfig, annotatedclass, javatype);
    }

    public NameTransformer findUnwrappingNameTransformer(AnnotatedMember annotatedmember) {
        annotatedmember = (JsonUnwrapped)_findAnnotation(annotatedmember, com/fasterxml/jackson/annotation/JsonUnwrapped);
        if (annotatedmember == null || !annotatedmember.enabled())
            annotatedmember = null;
        else
            annotatedmember = NameTransformer.simpleTransformer(annotatedmember.prefix(), annotatedmember.suffix());
        return annotatedmember;
    }

    public Object findValueInstantiator(AnnotatedClass annotatedclass) {
        annotatedclass = (JsonValueInstantiator)_findAnnotation(annotatedclass, com/fasterxml/jackson/databind/annotation/JsonValueInstantiator);
        if (annotatedclass == null)
            annotatedclass = null;
        else
            annotatedclass = annotatedclass.value();
        return annotatedclass;
    }

    public Class[] findViews(Annotated annotated) {
        annotated = (JsonView)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonView);
        if (annotated == null)
            annotated = null;
        else
            annotated = annotated.value();
        return annotated;
    }

    public boolean hasAnyGetterAnnotation(AnnotatedMethod annotatedmethod) {
        return _hasAnnotation(annotatedmethod, com/fasterxml/jackson/annotation/JsonAnyGetter);
    }

    public boolean hasAnySetterAnnotation(AnnotatedMethod annotatedmethod) {
        return _hasAnnotation(annotatedmethod, com/fasterxml/jackson/annotation/JsonAnySetter);
    }

    public boolean hasAsValueAnnotation(AnnotatedMethod annotatedmethod) {
        annotatedmethod = (JsonValue)_findAnnotation(annotatedmethod, com/fasterxml/jackson/annotation/JsonValue);
        boolean flag;
        if (annotatedmethod != null && annotatedmethod.value())
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean hasCreatorAnnotation(Annotated annotated) {
        JsonCreator jsoncreator = (JsonCreator)_findAnnotation(annotated, com/fasterxml/jackson/annotation/JsonCreator);
        if (jsoncreator == null) goto _L2; else goto _L1
_L1:
        boolean flag;
        if (jsoncreator.mode() != com.fasterxml.jackson.annotation.JsonCreator.Mode.DISABLED)
            flag = true;
        else
            flag = false;
_L4:
        return flag;
_L2:
        if (_cfgConstructorPropertiesImpliesCreator && (annotated instanceof AnnotatedConstructor) && _jdk7Helper != null) {
            annotated = _jdk7Helper.hasCreatorAnnotation(annotated);
            if (annotated != null) {
                flag = annotated.booleanValue();
                continue; /* Loop/switch isn't completed */
            }
        }
        flag = false;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public boolean hasIgnoreMarker(AnnotatedMember annotatedmember) {
        return _isIgnorable(annotatedmember);
    }

    public Boolean hasRequiredMarker(AnnotatedMember annotatedmember) {
        annotatedmember = (JsonProperty)_findAnnotation(annotatedmember, com/fasterxml/jackson/annotation/JsonProperty);
        if (annotatedmember != null)
            annotatedmember = Boolean.valueOf(annotatedmember.required());
        else
            annotatedmember = null;
        return annotatedmember;
    }

    public boolean isAnnotationBundle(Annotation annotation) {
        Class class1 = annotation.annotationType();
        Boolean boolean1 = (Boolean)_annotationsInside.get(class1);
        annotation = boolean1;
        if (boolean1 == null) {
            boolean flag;
            if (class1.getAnnotation(com/fasterxml/jackson/annotation/JacksonAnnotationsInside) != null)
                flag = true;
            else
                flag = false;
            annotation = Boolean.valueOf(flag);
            _annotationsInside.putIfAbsent(class1, annotation);
        }
        return annotation.booleanValue();
    }

    public Boolean isIgnorableType(AnnotatedClass annotatedclass) {
        annotatedclass = (JsonIgnoreType)_findAnnotation(annotatedclass, com/fasterxml/jackson/annotation/JsonIgnoreType);
        if (annotatedclass == null)
            annotatedclass = null;
        else
            annotatedclass = Boolean.valueOf(annotatedclass.value());
        return annotatedclass;
    }

    public Boolean isTypeId(AnnotatedMember annotatedmember) {
        return Boolean.valueOf(_hasAnnotation(annotatedmember, com/fasterxml/jackson/annotation/JsonTypeId));
    }

    protected Object readResolve() {
        if (_annotationsInside == null)
            _annotationsInside = new LRUMap(48, 48);
        return this;
    }

    public AnnotatedMethod resolveSetterConflict(MapperConfig mapperconfig, AnnotatedMethod annotatedmethod, AnnotatedMethod annotatedmethod1) {
        Class class1;
        class1 = annotatedmethod.getRawParameterType(0);
        mapperconfig = annotatedmethod1.getRawParameterType(0);
        if (!class1.isPrimitive()) goto _L2; else goto _L1
_L1:
        if (mapperconfig.isPrimitive()) goto _L4; else goto _L3
_L3:
        return annotatedmethod;
_L2:
        if (mapperconfig.isPrimitive()) {
            annotatedmethod = annotatedmethod1;
            continue; /* Loop/switch isn't completed */
        }
_L4:
        if (class1 != java/lang/String) goto _L6; else goto _L5
_L5:
        if (mapperconfig != java/lang/String)
            continue; /* Loop/switch isn't completed */
_L8:
        annotatedmethod = null;
        continue; /* Loop/switch isn't completed */
_L6:
        if (mapperconfig != java/lang/String) goto _L8; else goto _L7
_L7:
        annotatedmethod = annotatedmethod1;
        if (true) goto _L3; else goto _L9
_L9:
    }

    public JacksonAnnotationIntrospector setConstructorPropertiesImpliesCreator(boolean flag) {
        _cfgConstructorPropertiesImpliesCreator = flag;
        return this;
    }

    public Version version() {
        return PackageVersion.VERSION;
    }

    static  {
        Java7Support java7support;
        try {
            java7support = (Java7Support)com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector$Java7Support.newInstance();
        }
        catch (Throwable throwable) {
            Logger.getLogger(com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.getName()).warning("Unable to load JDK7 annotation types; will have to skip");
            throwable = null;
        }
        _jdk7Helper = java7support;
    }
}
