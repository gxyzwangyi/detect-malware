// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.introspect;

import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.util.ClassUtil;
import java.util.*;

// Referenced classes of package com.fasterxml.jackson.databind.introspect:
//            BeanPropertyDefinition, AnnotatedMember, AnnotationMap, AnnotatedMethod, 
//            ObjectIdInfo, AnnotatedParameter, AnnotatedConstructor, AnnotatedField

public class POJOPropertyBuilder extends BeanPropertyDefinition
    implements Comparable {
    protected static final class Linked {

        public final boolean isMarkedIgnored;
        public final boolean isNameExplicit;
        public final boolean isVisible;
        public final PropertyName name;
        public final Linked next;
        public final Object value;

        protected Linked append(Linked linked) {
            if (next == null)
                linked = withNext(linked);
            else
                linked = withNext(next.append(linked));
            return linked;
        }

        public String toString() {
            String s1 = (new StringBuilder()).append(value.toString()).append("[visible=").append(isVisible).append(",ignore=").append(isMarkedIgnored).append(",explicitName=").append(isNameExplicit).append("]").toString();
            String s = s1;
            if (next != null)
                s = (new StringBuilder()).append(s1).append(", ").append(next.toString()).toString();
            return s;
        }

        public Linked trimByVisibility() {
            if (next != null) goto _L2; else goto _L1
_L1:
            Linked linked = this;
_L4:
            return linked;
_L2:
            Linked linked1 = next.trimByVisibility();
            if (name != null) {
                if (linked1.name == null)
                    linked = withNext(null);
                else
                    linked = withNext(linked1);
            } else {
                linked = linked1;
                if (linked1.name == null)
                    if (isVisible == linked1.isVisible) {
                        linked = withNext(linked1);
                    } else {
                        linked = linked1;
                        if (isVisible)
                            linked = withNext(null);
                    }
            }
            if (true) goto _L4; else goto _L3
_L3:
        }

        public Linked withNext(Linked linked) {
            if (linked == next)
                linked = this;
            else
                linked = new Linked(value, linked, name, isNameExplicit, isVisible, isMarkedIgnored);
            return linked;
        }

        public Linked withValue(Object obj) {
            if (obj == value)
                obj = this;
            else
                obj = new Linked(obj, next, name, isNameExplicit, isVisible, isMarkedIgnored);
            return ((Linked) (obj));
        }

        public Linked withoutIgnored() {
            if (!isMarkedIgnored) goto _L2; else goto _L1
_L1:
            Linked linked;
            if (next == null)
                linked = null;
            else
                linked = next.withoutIgnored();
_L4:
            return linked;
_L2:
            if (next != null) {
                linked = next.withoutIgnored();
                if (linked != next) {
                    linked = withNext(linked);
                    continue; /* Loop/switch isn't completed */
                }
            }
            linked = this;
            if (true) goto _L4; else goto _L3
_L3:
        }

        public Linked withoutNext() {
            Linked linked;
            if (next == null)
                linked = this;
            else
                linked = new Linked(value, null, name, isNameExplicit, isVisible, isMarkedIgnored);
            return linked;
        }

        public Linked withoutNonVisible() {
            Linked linked;
            Linked linked1;
            if (next == null)
                linked = null;
            else
                linked = next.withoutNonVisible();
            linked1 = linked;
            if (isVisible)
                linked1 = withNext(linked);
            return linked1;
        }

        public Linked(Object obj, Linked linked, PropertyName propertyname, boolean flag, boolean flag1, boolean flag2) {
            value = obj;
            next = linked;
            boolean flag3;
            if (propertyname == null || propertyname.isEmpty())
                obj = null;
            else
                obj = propertyname;
            name = ((PropertyName) (obj));
            flag3 = flag;
            if (flag) {
                if (name == null)
                    throw new IllegalArgumentException("Can not pass true for 'explName' if name is null/empty");
                flag3 = flag;
                if (!propertyname.hasSimpleName())
                    flag3 = false;
            }
            isNameExplicit = flag3;
            isVisible = flag1;
            isMarkedIgnored = flag2;
        }
    }

    protected static class MemberIterator
        implements Iterator {

        private Linked next;

        public boolean hasNext() {
            boolean flag;
            if (next != null)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public AnnotatedMember next() {
            if (next == null) {
                throw new NoSuchElementException();
            } else {
                AnnotatedMember annotatedmember = (AnnotatedMember)next.value;
                next = next.next;
                return annotatedmember;
            }
        }

        public volatile Object next() {
            return next();
        }

        public void remove() {
            throw new UnsupportedOperationException();
        }

        public MemberIterator(Linked linked) {
            next = linked;
        }
    }

    private static interface WithMember {

        public abstract Object withMember(AnnotatedMember annotatedmember);
    }


    protected final AnnotationIntrospector _annotationIntrospector;
    protected final MapperConfig _config;
    protected Linked _ctorParameters;
    protected Linked _fields;
    protected final boolean _forSerialization;
    protected Linked _getters;
    protected final PropertyName _internalName;
    protected final PropertyName _name;
    protected Linked _setters;

    public POJOPropertyBuilder(MapperConfig mapperconfig, AnnotationIntrospector annotationintrospector, boolean flag, PropertyName propertyname) {
        this(mapperconfig, annotationintrospector, flag, propertyname, propertyname);
    }

    protected POJOPropertyBuilder(MapperConfig mapperconfig, AnnotationIntrospector annotationintrospector, boolean flag, PropertyName propertyname, PropertyName propertyname1) {
        _config = mapperconfig;
        _annotationIntrospector = annotationintrospector;
        _internalName = propertyname;
        _name = propertyname1;
        _forSerialization = flag;
    }

    public POJOPropertyBuilder(POJOPropertyBuilder pojopropertybuilder, PropertyName propertyname) {
        _config = pojopropertybuilder._config;
        _annotationIntrospector = pojopropertybuilder._annotationIntrospector;
        _internalName = pojopropertybuilder._internalName;
        _name = propertyname;
        _fields = pojopropertybuilder._fields;
        _ctorParameters = pojopropertybuilder._ctorParameters;
        _getters = pojopropertybuilder._getters;
        _setters = pojopropertybuilder._setters;
        _forSerialization = pojopropertybuilder._forSerialization;
    }

    private boolean _anyExplicitNames(Linked linked) {
_L3:
        if (linked == null)
            break MISSING_BLOCK_LABEL_30;
        if (linked.name == null || !linked.isNameExplicit) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        linked = linked.next;
          goto _L3
        flag = false;
          goto _L4
    }

    private boolean _anyExplicits(Linked linked) {
_L3:
        if (linked == null)
            break MISSING_BLOCK_LABEL_33;
        if (linked.name == null || !linked.name.hasSimpleName()) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        linked = linked.next;
          goto _L3
        flag = false;
          goto _L4
    }

    private boolean _anyIgnorals(Linked linked) {
_L3:
        if (linked == null)
            break MISSING_BLOCK_LABEL_23;
        if (!linked.isMarkedIgnored) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        linked = linked.next;
          goto _L3
        flag = false;
          goto _L4
    }

    private boolean _anyVisible(Linked linked) {
_L3:
        if (linked == null)
            break MISSING_BLOCK_LABEL_23;
        if (!linked.isVisible) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        linked = linked.next;
          goto _L3
        flag = false;
          goto _L4
    }

    private Linked _applyAnnotations(Linked linked, AnnotationMap annotationmap) {
        AnnotatedMember annotatedmember = (AnnotatedMember)((AnnotatedMember)linked.value).withAnnotations(annotationmap);
        Linked linked1 = linked;
        if (linked.next != null)
            linked1 = linked.withNext(_applyAnnotations(linked.next, annotationmap));
        return linked1.withValue(annotatedmember);
    }

    private void _explode(Collection collection, Map map, Linked linked) {
        Linked linked1 = linked;
_L2:
        PropertyName propertyname;
        if (linked1 == null)
            break MISSING_BLOCK_LABEL_286;
        propertyname = linked1.name;
        if (linked1.isNameExplicit && propertyname != null)
            break MISSING_BLOCK_LABEL_95;
        if (linked1.isVisible)
            break; /* Loop/switch isn't completed */
_L3:
        linked1 = linked1.next;
        if (true) goto _L2; else goto _L1
_L1:
        throw new IllegalStateException((new StringBuilder()).append("Conflicting/ambiguous property name definitions (implicit name '").append(_name).append("'): found multiple explicit names: ").append(collection).append(", but also implicit accessor: ").append(linked1).toString());
        POJOPropertyBuilder pojopropertybuilder1 = (POJOPropertyBuilder)map.get(propertyname);
        POJOPropertyBuilder pojopropertybuilder = pojopropertybuilder1;
        if (pojopropertybuilder1 == null) {
            pojopropertybuilder = new POJOPropertyBuilder(_config, _annotationIntrospector, _forSerialization, _internalName, propertyname);
            map.put(propertyname, pojopropertybuilder);
        }
        if (linked == _fields)
            pojopropertybuilder._fields = linked1.withNext(pojopropertybuilder._fields);
        else
        if (linked == _getters)
            pojopropertybuilder._getters = linked1.withNext(pojopropertybuilder._getters);
        else
        if (linked == _setters)
            pojopropertybuilder._setters = linked1.withNext(pojopropertybuilder._setters);
        else
        if (linked == _ctorParameters)
            pojopropertybuilder._ctorParameters = linked1.withNext(pojopropertybuilder._ctorParameters);
        else
            throw new IllegalStateException((new StringBuilder()).append("Internal error: mismatched accessors, property: ").append(this).toString());
          goto _L3
    }

    private Set _findExplicitNames(Linked linked, Set set) {
        Linked linked1 = linked;
        linked = set;
        while (linked1 != null)  {
            set = linked;
            if (linked1.isNameExplicit)
                if (linked1.name == null) {
                    set = linked;
                } else {
                    set = linked;
                    if (linked == null)
                        set = new HashSet();
                    set.add(linked1.name);
                }
            linked1 = linked1.next;
            linked = set;
        }
        return linked;
    }

    private AnnotationMap _getAllAnnotations(Linked linked) {
        AnnotationMap annotationmap1 = ((AnnotatedMember)linked.value).getAllAnnotations();
        AnnotationMap annotationmap = annotationmap1;
        if (linked.next != null)
            annotationmap = AnnotationMap.merge(annotationmap1, _getAllAnnotations(linked.next));
        return annotationmap;
    }

    private transient AnnotationMap _mergeAnnotations(int i, Linked alinked[]) {
        AnnotationMap annotationmap1 = _getAllAnnotations(alinked[i]);
        AnnotationMap annotationmap;
        do {
            int j = i + 1;
            annotationmap = annotationmap1;
            if (j >= alinked.length)
                break;
            i = j;
            if (alinked[j] == null)
                continue;
            annotationmap = AnnotationMap.merge(annotationmap1, _mergeAnnotations(j, alinked));
            break;
        } while (true);
        return annotationmap;
    }

    private Linked _removeIgnored(Linked linked) {
        if (linked != null)
            linked = linked.withoutIgnored();
        return linked;
    }

    private Linked _removeNonVisible(Linked linked) {
        if (linked != null)
            linked = linked.withoutNonVisible();
        return linked;
    }

    private Linked _trimByVisibility(Linked linked) {
        if (linked != null)
            linked = linked.trimByVisibility();
        return linked;
    }

    private static Linked merge(Linked linked, Linked linked1) {
        if (linked != null)
            if (linked1 == null)
                linked1 = linked;
            else
                linked1 = linked.append(linked1);
        return linked1;
    }

    protected String _findDefaultValue() {
        return (String)fromMemberAnnotations(new WithMember() {

            final POJOPropertyBuilder this$0;

            public volatile Object withMember(AnnotatedMember annotatedmember) {
                return withMember(annotatedmember);
            }

            public String withMember(AnnotatedMember annotatedmember) {
                return _annotationIntrospector.findPropertyDefaultValue(annotatedmember);
            }

             {
                this$0 = POJOPropertyBuilder.this;
                super();
            }
        }
);
    }

    protected String _findDescription() {
        return (String)fromMemberAnnotations(new WithMember() {

            final POJOPropertyBuilder this$0;

            public volatile Object withMember(AnnotatedMember annotatedmember) {
                return withMember(annotatedmember);
            }

            public String withMember(AnnotatedMember annotatedmember) {
                return _annotationIntrospector.findPropertyDescription(annotatedmember);
            }

             {
                this$0 = POJOPropertyBuilder.this;
                super();
            }
        }
);
    }

    protected Integer _findIndex() {
        return (Integer)fromMemberAnnotations(new WithMember() {

            final POJOPropertyBuilder this$0;

            public Integer withMember(AnnotatedMember annotatedmember) {
                return _annotationIntrospector.findPropertyIndex(annotatedmember);
            }

            public volatile Object withMember(AnnotatedMember annotatedmember) {
                return withMember(annotatedmember);
            }

             {
                this$0 = POJOPropertyBuilder.this;
                super();
            }
        }
);
    }

    protected Boolean _findRequired() {
        return (Boolean)fromMemberAnnotations(new WithMember() {

            final POJOPropertyBuilder this$0;

            public Boolean withMember(AnnotatedMember annotatedmember) {
                return _annotationIntrospector.hasRequiredMarker(annotatedmember);
            }

            public volatile Object withMember(AnnotatedMember annotatedmember) {
                return withMember(annotatedmember);
            }

             {
                this$0 = POJOPropertyBuilder.this;
                super();
            }
        }
);
    }

    protected int _getterPriority(AnnotatedMethod annotatedmethod) {
        byte byte0;
        byte0 = 2;
        annotatedmethod = annotatedmethod.getName();
        if (!annotatedmethod.startsWith("get") || annotatedmethod.length() <= 3) goto _L2; else goto _L1
_L1:
        byte0 = 1;
_L4:
        return byte0;
_L2:
        if (!annotatedmethod.startsWith("is") || annotatedmethod.length() <= 2)
            byte0 = 3;
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected int _setterPriority(AnnotatedMethod annotatedmethod) {
        annotatedmethod = annotatedmethod.getName();
        int i;
        if (annotatedmethod.startsWith("set") && annotatedmethod.length() > 3)
            i = 1;
        else
            i = 2;
        return i;
    }

    public void addAll(POJOPropertyBuilder pojopropertybuilder) {
        _fields = merge(_fields, pojopropertybuilder._fields);
        _ctorParameters = merge(_ctorParameters, pojopropertybuilder._ctorParameters);
        _getters = merge(_getters, pojopropertybuilder._getters);
        _setters = merge(_setters, pojopropertybuilder._setters);
    }

    public void addCtor(AnnotatedParameter annotatedparameter, PropertyName propertyname, boolean flag, boolean flag1, boolean flag2) {
        _ctorParameters = new Linked(annotatedparameter, _ctorParameters, propertyname, flag, flag1, flag2);
    }

    public void addField(AnnotatedField annotatedfield, PropertyName propertyname, boolean flag, boolean flag1, boolean flag2) {
        _fields = new Linked(annotatedfield, _fields, propertyname, flag, flag1, flag2);
    }

    public void addGetter(AnnotatedMethod annotatedmethod, PropertyName propertyname, boolean flag, boolean flag1, boolean flag2) {
        _getters = new Linked(annotatedmethod, _getters, propertyname, flag, flag1, flag2);
    }

    public void addSetter(AnnotatedMethod annotatedmethod, PropertyName propertyname, boolean flag, boolean flag1, boolean flag2) {
        _setters = new Linked(annotatedmethod, _setters, propertyname, flag, flag1, flag2);
    }

    public boolean anyIgnorals() {
        boolean flag;
        if (_anyIgnorals(_fields) || _anyIgnorals(_getters) || _anyIgnorals(_setters) || _anyIgnorals(_ctorParameters))
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean anyVisible() {
        boolean flag;
        if (_anyVisible(_fields) || _anyVisible(_getters) || _anyVisible(_setters) || _anyVisible(_ctorParameters))
            flag = true;
        else
            flag = false;
        return flag;
    }

    public int compareTo(POJOPropertyBuilder pojopropertybuilder) {
        if (_ctorParameters == null) goto _L2; else goto _L1
_L1:
        if (pojopropertybuilder._ctorParameters != null) goto _L4; else goto _L3
_L3:
        int i = -1;
_L6:
        return i;
_L2:
        if (pojopropertybuilder._ctorParameters != null) {
            i = 1;
            continue; /* Loop/switch isn't completed */
        }
_L4:
        i = getName().compareTo(pojopropertybuilder.getName());
        if (true) goto _L6; else goto _L5
_L5:
    }

    public volatile int compareTo(Object obj) {
        return compareTo((POJOPropertyBuilder)obj);
    }

    public boolean couldDeserialize() {
        boolean flag;
        if (_ctorParameters != null || _setters != null || _fields != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean couldSerialize() {
        boolean flag;
        if (_getters != null || _fields != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public Collection explode(Collection collection) {
        HashMap hashmap = new HashMap();
        _explode(collection, hashmap, _fields);
        _explode(collection, hashmap, _getters);
        _explode(collection, hashmap, _setters);
        _explode(collection, hashmap, _ctorParameters);
        return hashmap.values();
    }

    public com.fasterxml.jackson.annotation.JsonProperty.Access findAccess() {
        return (com.fasterxml.jackson.annotation.JsonProperty.Access)fromMemberAnnotationsExcept(new WithMember() {

            final POJOPropertyBuilder this$0;

            public com.fasterxml.jackson.annotation.JsonProperty.Access withMember(AnnotatedMember annotatedmember) {
                return _annotationIntrospector.findPropertyAccess(annotatedmember);
            }

            public volatile Object withMember(AnnotatedMember annotatedmember) {
                return withMember(annotatedmember);
            }

             {
                this$0 = POJOPropertyBuilder.this;
                super();
            }
        }
, com.fasterxml.jackson.annotation.JsonProperty.Access.AUTO);
    }

    public Set findExplicitNames() {
        Set set = _findExplicitNames(_fields, null);
        set = _findExplicitNames(_getters, set);
        set = _findExplicitNames(_setters, set);
        Set set1 = _findExplicitNames(_ctorParameters, set);
        set = set1;
        if (set1 == null)
            set = Collections.emptySet();
        return set;
    }

    public com.fasterxml.jackson.annotation.JsonInclude.Value findInclusion() {
        if (_annotationIntrospector == null) goto _L2; else goto _L1
_L1:
        Object obj;
        obj = getAccessor();
        obj = _annotationIntrospector.findPropertyInclusion(((Annotated) (obj)));
        if (obj == null) goto _L2; else goto _L3
_L3:
        return ((com.fasterxml.jackson.annotation.JsonInclude.Value) (obj));
_L2:
        obj = com.fasterxml.jackson.annotation.JsonInclude.Value.empty();
        if (true) goto _L3; else goto _L4
_L4:
    }

    public ObjectIdInfo findObjectIdInfo() {
        return (ObjectIdInfo)fromMemberAnnotations(new WithMember() {

            final POJOPropertyBuilder this$0;

            public ObjectIdInfo withMember(AnnotatedMember annotatedmember) {
                ObjectIdInfo objectidinfo1 = _annotationIntrospector.findObjectIdInfo(annotatedmember);
                ObjectIdInfo objectidinfo = objectidinfo1;
                if (objectidinfo1 != null)
                    objectidinfo = _annotationIntrospector.findObjectReferenceInfo(annotatedmember, objectidinfo1);
                return objectidinfo;
            }

            public volatile Object withMember(AnnotatedMember annotatedmember) {
                return withMember(annotatedmember);
            }

             {
                this$0 = POJOPropertyBuilder.this;
                super();
            }
        }
);
    }

    public com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty findReferenceType() {
        return (com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty)fromMemberAnnotations(new WithMember() {

            final POJOPropertyBuilder this$0;

            public com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty withMember(AnnotatedMember annotatedmember) {
                return _annotationIntrospector.findReferenceType(annotatedmember);
            }

            public volatile Object withMember(AnnotatedMember annotatedmember) {
                return withMember(annotatedmember);
            }

             {
                this$0 = POJOPropertyBuilder.this;
                super();
            }
        }
);
    }

    public Class[] findViews() {
        return (Class[])fromMemberAnnotations(new WithMember() {

            final POJOPropertyBuilder this$0;

            public volatile Object withMember(AnnotatedMember annotatedmember) {
                return withMember(annotatedmember);
            }

            public Class[] withMember(AnnotatedMember annotatedmember) {
                return _annotationIntrospector.findViews(annotatedmember);
            }

             {
                this$0 = POJOPropertyBuilder.this;
                super();
            }
        }
);
    }

    protected Object fromMemberAnnotations(WithMember withmember) {
        Object obj;
        Object obj1;
        Object obj3;
        obj1 = null;
        obj3 = null;
        obj = null;
        if (_annotationIntrospector == null) goto _L2; else goto _L1
_L1:
        if (!_forSerialization) goto _L4; else goto _L3
_L3:
        if (_getters != null)
            obj = withmember.withMember((AnnotatedMember)_getters.value);
_L6:
        obj1 = obj;
        if (obj == null) {
            obj1 = obj;
            if (_fields != null)
                obj1 = withmember.withMember((AnnotatedMember)_fields.value);
        }
_L2:
        return obj1;
_L4:
        Object obj2 = obj3;
        if (_ctorParameters != null)
            obj2 = withmember.withMember((AnnotatedMember)_ctorParameters.value);
        obj = obj2;
        if (obj2 == null) {
            obj = obj2;
            if (_setters != null)
                obj = withmember.withMember((AnnotatedMember)_setters.value);
        }
        if (true) goto _L6; else goto _L5
_L5:
    }

    protected Object fromMemberAnnotationsExcept(WithMember withmember, Object obj) {
        if (_annotationIntrospector != null) goto _L2; else goto _L1
_L1:
        Object obj1 = null;
_L4:
        return obj1;
_L2:
        if (_forSerialization) {
            if (_getters != null) {
                Object obj2 = withmember.withMember((AnnotatedMember)_getters.value);
                if (obj2 != null) {
                    obj1 = obj2;
                    if (obj2 != obj)
                        continue; /* Loop/switch isn't completed */
                }
            }
            if (_fields != null) {
                Object obj3 = withmember.withMember((AnnotatedMember)_fields.value);
                if (obj3 != null) {
                    obj1 = obj3;
                    if (obj3 != obj)
                        continue; /* Loop/switch isn't completed */
                }
            }
            if (_ctorParameters != null) {
                Object obj4 = withmember.withMember((AnnotatedMember)_ctorParameters.value);
                if (obj4 != null) {
                    obj1 = obj4;
                    if (obj4 != obj)
                        continue; /* Loop/switch isn't completed */
                }
            }
            if (_setters != null) {
                withmember = ((WithMember) (withmember.withMember((AnnotatedMember)_setters.value)));
                if (withmember != null) {
                    obj1 = withmember;
                    if (withmember != obj)
                        continue; /* Loop/switch isn't completed */
                }
            }
            obj1 = null;
            continue; /* Loop/switch isn't completed */
        }
        if (_ctorParameters != null) {
            Object obj5 = withmember.withMember((AnnotatedMember)_ctorParameters.value);
            if (obj5 != null) {
                obj1 = obj5;
                if (obj5 != obj)
                    continue; /* Loop/switch isn't completed */
            }
        }
        if (_setters != null) {
            Object obj6 = withmember.withMember((AnnotatedMember)_setters.value);
            if (obj6 != null) {
                obj1 = obj6;
                if (obj6 != obj)
                    continue; /* Loop/switch isn't completed */
            }
        }
        if (_fields != null) {
            Object obj7 = withmember.withMember((AnnotatedMember)_fields.value);
            if (obj7 != null) {
                obj1 = obj7;
                if (obj7 != obj)
                    continue; /* Loop/switch isn't completed */
            }
        }
        if (_getters != null) {
            withmember = ((WithMember) (withmember.withMember((AnnotatedMember)_getters.value)));
            if (withmember != null) {
                obj1 = withmember;
                if (withmember != obj)
                    continue; /* Loop/switch isn't completed */
            }
        }
        obj1 = null;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public AnnotatedMember getAccessor() {
        AnnotatedMethod annotatedmethod = getGetter();
        Object obj = annotatedmethod;
        if (annotatedmethod == null)
            obj = getField();
        return ((AnnotatedMember) (obj));
    }

    public AnnotatedParameter getConstructorParameter() {
        if (_ctorParameters != null) goto _L2; else goto _L1
_L1:
        Object obj = null;
_L4:
        return ((AnnotatedParameter) (obj));
_L2:
        obj = _ctorParameters;
        do {
            if (((AnnotatedParameter)((Linked) (obj)).value).getOwner() instanceof AnnotatedConstructor) {
                obj = (AnnotatedParameter)((Linked) (obj)).value;
                continue; /* Loop/switch isn't completed */
            }
            obj = ((Linked) (obj)).next;
        } while (obj != null);
        obj = (AnnotatedParameter)_ctorParameters.value;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public Iterator getConstructorParameters() {
        Object obj;
        if (_ctorParameters == null)
            obj = ClassUtil.emptyIterator();
        else
            obj = new MemberIterator(_ctorParameters);
        return ((Iterator) (obj));
    }

    public AnnotatedField getField() {
        if (_fields != null) goto _L2; else goto _L1
_L1:
        AnnotatedField annotatedfield1 = null;
_L4:
        return annotatedfield1;
_L2:
        AnnotatedField annotatedfield;
        Linked linked;
        annotatedfield = (AnnotatedField)_fields.value;
        linked = _fields.next;
_L9:
        annotatedfield1 = annotatedfield;
        if (linked == null) goto _L4; else goto _L3
_L3:
        Class class1;
        Class class2;
        annotatedfield1 = (AnnotatedField)linked.value;
        class2 = annotatedfield.getDeclaringClass();
        class1 = annotatedfield1.getDeclaringClass();
        if (class2 == class1) goto _L6; else goto _L5
_L5:
        if (!class2.isAssignableFrom(class1)) goto _L8; else goto _L7
_L7:
        annotatedfield = annotatedfield1;
_L10:
        linked = linked.next;
          goto _L9
_L8:
        if (!class1.isAssignableFrom(class2)) goto _L6; else goto _L10
_L6:
        throw new IllegalArgumentException((new StringBuilder()).append("Multiple fields representing property \"").append(getName()).append("\": ").append(annotatedfield.getFullName()).append(" vs ").append(annotatedfield1.getFullName()).toString());
    }

    public PropertyName getFullName() {
        return _name;
    }

    public AnnotatedMethod getGetter() {
        Object obj1 = _getters;
        if (obj1 != null) goto _L2; else goto _L1
_L1:
        Object obj = null;
_L10:
        return ((AnnotatedMethod) (obj));
_L2:
        Linked linked;
        Linked linked1 = ((Linked) (obj1)).next;
        linked = linked1;
        obj = obj1;
        if (linked1 == null) {
            obj = (AnnotatedMethod)((Linked) (obj1)).value;
            continue; /* Loop/switch isn't completed */
        }
_L7:
        Class class1;
        if (linked == null)
            break MISSING_BLOCK_LABEL_230;
        class1 = ((AnnotatedMethod)((Linked) (obj)).value).getDeclaringClass();
        obj1 = ((AnnotatedMethod)linked.value).getDeclaringClass();
        if (class1 == obj1) goto _L4; else goto _L3
_L3:
        if (!class1.isAssignableFrom(((Class) (obj1)))) goto _L6; else goto _L5
_L5:
        obj = linked;
_L8:
        linked = linked.next;
          goto _L7
_L6:
        if (!((Class) (obj1)).isAssignableFrom(class1)) goto _L4; else goto _L8
_L4:
        int i = _getterPriority((AnnotatedMethod)linked.value);
        int j = _getterPriority((AnnotatedMethod)((Linked) (obj)).value);
        if (i != j) {
            if (i < j)
                obj = linked;
        } else {
            throw new IllegalArgumentException((new StringBuilder()).append("Conflicting getter definitions for property \"").append(getName()).append("\": ").append(((AnnotatedMethod)((Linked) (obj)).value).getFullName()).append(" vs ").append(((AnnotatedMethod)linked.value).getFullName()).toString());
        }
          goto _L8
        _getters = ((Linked) (obj)).withoutNext();
        obj = (AnnotatedMethod)((Linked) (obj)).value;
        if (true) goto _L10; else goto _L9
_L9:
    }

    public String getInternalName() {
        return _internalName.getSimpleName();
    }

    public PropertyMetadata getMetadata() {
        Object obj = _findRequired();
        String s = _findDescription();
        Integer integer = _findIndex();
        String s1 = _findDefaultValue();
        if (obj == null && integer == null && s1 == null) {
            if (s == null)
                obj = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
            else
                obj = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL.withDescription(s);
        } else {
            obj = PropertyMetadata.construct(((Boolean) (obj)).booleanValue(), s, integer, s1);
        }
        return ((PropertyMetadata) (obj));
    }

    public AnnotatedMember getMutator() {
        AnnotatedParameter annotatedparameter = getConstructorParameter();
        Object obj = annotatedparameter;
        if (annotatedparameter == null) {
            AnnotatedMethod annotatedmethod = getSetter();
            obj = annotatedmethod;
            if (annotatedmethod == null)
                obj = getField();
        }
        return ((AnnotatedMember) (obj));
    }

    public String getName() {
        String s;
        if (_name == null)
            s = null;
        else
            s = _name.getSimpleName();
        return s;
    }

    public AnnotatedMember getNonConstructorMutator() {
        AnnotatedMethod annotatedmethod = getSetter();
        Object obj = annotatedmethod;
        if (annotatedmethod == null)
            obj = getField();
        return ((AnnotatedMember) (obj));
    }

    public AnnotatedMember getPrimaryMember() {
        AnnotatedMember annotatedmember;
        if (_forSerialization)
            annotatedmember = getAccessor();
        else
            annotatedmember = getMutator();
        return annotatedmember;
    }

    public AnnotatedMethod getSetter() {
        Object obj1 = _setters;
        if (obj1 != null) goto _L2; else goto _L1
_L1:
        Object obj = null;
_L10:
        return ((AnnotatedMethod) (obj));
_L2:
        Linked linked;
        Linked linked1 = ((Linked) (obj1)).next;
        linked = linked1;
        obj = obj1;
        if (linked1 == null) {
            obj = (AnnotatedMethod)((Linked) (obj1)).value;
            continue; /* Loop/switch isn't completed */
        }
_L7:
        Class class1;
        if (linked == null)
            break MISSING_BLOCK_LABEL_285;
        class1 = ((AnnotatedMethod)((Linked) (obj)).value).getDeclaringClass();
        obj1 = ((AnnotatedMethod)linked.value).getDeclaringClass();
        if (class1 == obj1) goto _L4; else goto _L3
_L3:
        if (!class1.isAssignableFrom(((Class) (obj1)))) goto _L6; else goto _L5
_L5:
        obj = linked;
_L8:
        linked = linked.next;
          goto _L7
_L6:
        if (!((Class) (obj1)).isAssignableFrom(class1)) goto _L4; else goto _L8
_L4:
        AnnotatedMethod annotatedmethod2 = (AnnotatedMethod)linked.value;
        AnnotatedMethod annotatedmethod1 = (AnnotatedMethod)((Linked) (obj)).value;
        int i = _setterPriority(annotatedmethod2);
        int j = _setterPriority(annotatedmethod1);
        if (i != j) {
            if (i < j)
                obj = linked;
        } else {
label0:
            {
                if (_annotationIntrospector == null)
                    break label0;
                AnnotatedMethod annotatedmethod = _annotationIntrospector.resolveSetterConflict(_config, annotatedmethod1, annotatedmethod2);
                if (annotatedmethod != annotatedmethod1) {
                    if (annotatedmethod != annotatedmethod2)
                        break label0;
                    obj = linked;
                }
            }
        }
          goto _L8
        throw new IllegalArgumentException((new StringBuilder()).append("Conflicting setter definitions for property \"").append(getName()).append("\": ").append(((AnnotatedMethod)((Linked) (obj)).value).getFullName()).append(" vs ").append(((AnnotatedMethod)linked.value).getFullName()).toString());
        _setters = ((Linked) (obj)).withoutNext();
        obj = (AnnotatedMethod)((Linked) (obj)).value;
        if (true) goto _L10; else goto _L9
_L9:
    }

    public PropertyName getWrapperName() {
        Object obj = getPrimaryMember();
        if (obj == null || _annotationIntrospector == null)
            obj = null;
        else
            obj = _annotationIntrospector.findWrapperName(((Annotated) (obj)));
        return ((PropertyName) (obj));
    }

    public boolean hasConstructorParameter() {
        boolean flag;
        if (_ctorParameters != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean hasField() {
        boolean flag;
        if (_fields != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean hasGetter() {
        boolean flag;
        if (_getters != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean hasName(PropertyName propertyname) {
        return _name.equals(propertyname);
    }

    public boolean hasSetter() {
        boolean flag;
        if (_setters != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean isExplicitlyIncluded() {
        boolean flag;
        if (_anyExplicits(_fields) || _anyExplicits(_getters) || _anyExplicits(_setters) || _anyExplicits(_ctorParameters))
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean isExplicitlyNamed() {
        boolean flag;
        if (_anyExplicitNames(_fields) || _anyExplicitNames(_getters) || _anyExplicitNames(_setters) || _anyExplicitNames(_ctorParameters))
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean isTypeId() {
        Boolean boolean1 = (Boolean)fromMemberAnnotations(new WithMember() {

            final POJOPropertyBuilder this$0;

            public Boolean withMember(AnnotatedMember annotatedmember) {
                return _annotationIntrospector.isTypeId(annotatedmember);
            }

            public volatile Object withMember(AnnotatedMember annotatedmember) {
                return withMember(annotatedmember);
            }

             {
                this$0 = POJOPropertyBuilder.this;
                super();
            }
        }
);
        boolean flag;
        if (boolean1 != null && boolean1.booleanValue())
            flag = true;
        else
            flag = false;
        return flag;
    }

    public void mergeAnnotations(boolean flag) {
        if (!flag) goto _L2; else goto _L1
_L1:
        if (_getters == null) goto _L4; else goto _L3
_L3:
        AnnotationMap annotationmap = _mergeAnnotations(0, new Linked[] {
            _getters, _fields, _ctorParameters, _setters
        });
        _getters = _applyAnnotations(_getters, annotationmap);
_L6:
        return;
_L4:
        if (_fields != null) {
            AnnotationMap annotationmap1 = _mergeAnnotations(0, new Linked[] {
                _fields, _ctorParameters, _setters
            });
            _fields = _applyAnnotations(_fields, annotationmap1);
        }
        continue; /* Loop/switch isn't completed */
_L2:
        if (_ctorParameters != null) {
            AnnotationMap annotationmap2 = _mergeAnnotations(0, new Linked[] {
                _ctorParameters, _setters, _fields, _getters
            });
            _ctorParameters = _applyAnnotations(_ctorParameters, annotationmap2);
        } else
        if (_setters != null) {
            AnnotationMap annotationmap3 = _mergeAnnotations(0, new Linked[] {
                _setters, _fields, _getters
            });
            _setters = _applyAnnotations(_setters, annotationmap3);
        } else
        if (_fields != null) {
            AnnotationMap annotationmap4 = _mergeAnnotations(0, new Linked[] {
                _fields, _getters
            });
            _fields = _applyAnnotations(_fields, annotationmap4);
        }
        if (true) goto _L6; else goto _L5
_L5:
    }

    public void removeConstructors() {
        _ctorParameters = null;
    }

    public void removeIgnored() {
        _fields = _removeIgnored(_fields);
        _getters = _removeIgnored(_getters);
        _setters = _removeIgnored(_setters);
        _ctorParameters = _removeIgnored(_ctorParameters);
    }

    public void removeNonVisible(boolean flag) {
        com.fasterxml.jackson.annotation.JsonProperty.Access access;
        com.fasterxml.jackson.annotation.JsonProperty.Access access1 = findAccess();
        access = access1;
        if (access1 == null)
            access = com.fasterxml.jackson.annotation.JsonProperty.Access.AUTO;
        static class _cls10 {

            static final int $SwitchMap$com$fasterxml$jackson$annotation$JsonProperty$Access[];

            static  {
                $SwitchMap$com$fasterxml$jackson$annotation$JsonProperty$Access = new int[com.fasterxml.jackson.annotation.JsonProperty.Access.values().length];
                NoSuchFieldError nosuchfielderror;
                try {
                    $SwitchMap$com$fasterxml$jackson$annotation$JsonProperty$Access[com.fasterxml.jackson.annotation.JsonProperty.Access.READ_ONLY.ordinal()] = 1;
                }
                catch (NoSuchFieldError nosuchfielderror3) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$annotation$JsonProperty$Access[com.fasterxml.jackson.annotation.JsonProperty.Access.READ_WRITE.ordinal()] = 2;
                }
                catch (NoSuchFieldError nosuchfielderror2) { }
                try {
                    $SwitchMap$com$fasterxml$jackson$annotation$JsonProperty$Access[com.fasterxml.jackson.annotation.JsonProperty.Access.WRITE_ONLY.ordinal()] = 3;
                }
                catch (NoSuchFieldError nosuchfielderror1) { }
                $SwitchMap$com$fasterxml$jackson$annotation$JsonProperty$Access[com.fasterxml.jackson.annotation.JsonProperty.Access.AUTO.ordinal()] = 4;
_L2:
                return;
                nosuchfielderror;
                if (true) goto _L2; else goto _L1
_L1:
            }
        }

        _cls10..SwitchMap.com.fasterxml.jackson.annotation.JsonProperty.Access[access.ordinal()];
        JVM INSTR tableswitch 1 3: default 48
    //                   1 108
    //                   2 107
    //                   3 133;
           goto _L1 _L2 _L3 _L4
_L1:
        _getters = _removeNonVisible(_getters);
        _ctorParameters = _removeNonVisible(_ctorParameters);
        if (!flag || _getters == null) {
            _fields = _removeNonVisible(_fields);
            _setters = _removeNonVisible(_setters);
        }
_L3:
        return;
_L2:
        _setters = null;
        _ctorParameters = null;
        if (!_forSerialization)
            _fields = null;
        continue; /* Loop/switch isn't completed */
_L4:
        _getters = null;
        if (_forSerialization)
            _fields = null;
        if (true) goto _L3; else goto _L5
_L5:
    }

    public String toString() {
        StringBuilder stringbuilder = new StringBuilder();
        stringbuilder.append("[Property '").append(_name).append("'; ctors: ").append(_ctorParameters).append(", field(s): ").append(_fields).append(", getter(s): ").append(_getters).append(", setter(s): ").append(_setters);
        stringbuilder.append("]");
        return stringbuilder.toString();
    }

    public void trimByVisibility() {
        _fields = _trimByVisibility(_fields);
        _getters = _trimByVisibility(_getters);
        _setters = _trimByVisibility(_setters);
        _ctorParameters = _trimByVisibility(_ctorParameters);
    }

    public volatile BeanPropertyDefinition withName(PropertyName propertyname) {
        return withName(propertyname);
    }

    public POJOPropertyBuilder withName(PropertyName propertyname) {
        return new POJOPropertyBuilder(this, propertyname);
    }

    public volatile BeanPropertyDefinition withSimpleName(String s) {
        return withSimpleName(s);
    }

    public POJOPropertyBuilder withSimpleName(String s) {
        s = _name.withSimpleName(s);
        if (s == _name)
            s = this;
        else
            s = new POJOPropertyBuilder(this, s);
        return s;
    }
}
