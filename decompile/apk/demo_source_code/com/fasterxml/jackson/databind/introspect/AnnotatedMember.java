// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.introspect;

import com.fasterxml.jackson.databind.util.ClassUtil;
import java.io.Serializable;
import java.lang.annotation.Annotation;
import java.lang.reflect.Member;
import java.util.Collections;

// Referenced classes of package com.fasterxml.jackson.databind.introspect:
//            Annotated, AnnotationMap, TypeResolutionContext

public abstract class AnnotatedMember extends Annotated
    implements Serializable {

    private static final long serialVersionUID = 1L;
    protected final transient AnnotationMap _annotations;
    protected final transient TypeResolutionContext _typeContext;

    protected AnnotatedMember(AnnotatedMember annotatedmember) {
        _typeContext = annotatedmember._typeContext;
        _annotations = annotatedmember._annotations;
    }

    protected AnnotatedMember(TypeResolutionContext typeresolutioncontext, AnnotationMap annotationmap) {
        _typeContext = typeresolutioncontext;
        _annotations = annotationmap;
    }

    public final boolean addIfNotPresent(Annotation annotation) {
        return _annotations.addIfNotPresent(annotation);
    }

    public final boolean addOrOverride(Annotation annotation) {
        return _annotations.add(annotation);
    }

    public Iterable annotations() {
        Object obj;
        if (_annotations == null)
            obj = Collections.emptyList();
        else
            obj = _annotations.annotations();
        return ((Iterable) (obj));
    }

    public final void fixAccess() {
        fixAccess(true);
    }

    public final void fixAccess(boolean flag) {
        ClassUtil.checkAndFixAccess(getMember(), flag);
    }

    protected AnnotationMap getAllAnnotations() {
        return _annotations;
    }

    public final Annotation getAnnotation(Class class1) {
        if (_annotations == null)
            class1 = null;
        else
            class1 = _annotations.get(class1);
        return class1;
    }

    public abstract Class getDeclaringClass();

    public abstract Member getMember();

    public TypeResolutionContext getTypeContext() {
        return _typeContext;
    }

    public abstract Object getValue(Object obj);

    public final boolean hasAnnotation(Class class1) {
        boolean flag;
        if (_annotations == null)
            flag = false;
        else
            flag = _annotations.has(class1);
        return flag;
    }

    public boolean hasOneOf(Class aclass[]) {
        boolean flag;
        if (_annotations == null)
            flag = false;
        else
            flag = _annotations.hasOneOf(aclass);
        return flag;
    }

    public abstract void setValue(Object obj, Object obj1);
}
