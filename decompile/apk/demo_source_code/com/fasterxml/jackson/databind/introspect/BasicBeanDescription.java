// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.introspect;

import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.*;
import java.lang.reflect.*;
import java.util.*;

// Referenced classes of package com.fasterxml.jackson.databind.introspect:
//            POJOPropertiesCollector, BeanPropertyDefinition, AnnotatedMember, AnnotatedMethod, 
//            AnnotatedWithParams, AnnotatedClass, AnnotatedConstructor, ObjectIdInfo, 
//            AnnotatedParameter

public class BasicBeanDescription extends BeanDescription {

    protected final AnnotationIntrospector _annotationIntrospector;
    protected TypeBindings _bindings;
    protected final AnnotatedClass _classInfo;
    protected final MapperConfig _config;
    protected ObjectIdInfo _objectIdInfo;
    protected final POJOPropertiesCollector _propCollector;
    protected List _properties;

    protected BasicBeanDescription(MapperConfig mapperconfig, JavaType javatype, AnnotatedClass annotatedclass, List list) {
        Object obj = null;
        super(javatype);
        _propCollector = null;
        _config = mapperconfig;
        if (_config == null)
            mapperconfig = obj;
        else
            mapperconfig = _config.getAnnotationIntrospector();
        _annotationIntrospector = mapperconfig;
        _classInfo = annotatedclass;
        _properties = list;
    }

    protected BasicBeanDescription(POJOPropertiesCollector pojopropertiescollector) {
        this(pojopropertiescollector, pojopropertiescollector.getType(), pojopropertiescollector.getClassDef());
        _objectIdInfo = pojopropertiescollector.getObjectIdInfo();
    }

    protected BasicBeanDescription(POJOPropertiesCollector pojopropertiescollector, JavaType javatype, AnnotatedClass annotatedclass) {
        super(javatype);
        _propCollector = pojopropertiescollector;
        _config = pojopropertiescollector.getConfig();
        if (_config == null)
            pojopropertiescollector = null;
        else
            pojopropertiescollector = _config.getAnnotationIntrospector();
        _annotationIntrospector = pojopropertiescollector;
        _classInfo = annotatedclass;
    }

    public static BasicBeanDescription forDeserialization(POJOPropertiesCollector pojopropertiescollector) {
        return new BasicBeanDescription(pojopropertiescollector);
    }

    public static BasicBeanDescription forOtherUse(MapperConfig mapperconfig, JavaType javatype, AnnotatedClass annotatedclass) {
        return new BasicBeanDescription(mapperconfig, javatype, annotatedclass, Collections.emptyList());
    }

    public static BasicBeanDescription forSerialization(POJOPropertiesCollector pojopropertiescollector) {
        return new BasicBeanDescription(pojopropertiescollector);
    }

    public Converter _createConverter(Object obj) {
        Converter converter = null;
        if (obj != null) goto _L2; else goto _L1
_L1:
        obj = null;
_L4:
        return ((Converter) (obj));
_L2:
        if (obj instanceof Converter) {
            obj = (Converter)obj;
        } else {
            if (!(obj instanceof Class))
                throw new IllegalStateException((new StringBuilder()).append("AnnotationIntrospector returned Converter definition of type ").append(obj.getClass().getName()).append("; expected type Converter or Class<Converter> instead").toString());
            Class class1 = (Class)obj;
            if (class1 == com/fasterxml/jackson/databind/util/Converter$None || ClassUtil.isBogusClass(class1)) {
                obj = null;
            } else {
                if (!com/fasterxml/jackson/databind/util/Converter.isAssignableFrom(class1))
                    throw new IllegalStateException((new StringBuilder()).append("AnnotationIntrospector returned Class ").append(class1.getName()).append("; expected Class<Converter>").toString());
                obj = _config.getHandlerInstantiator();
                if (obj != null)
                    converter = ((HandlerInstantiator) (obj)).converterInstance(_config, _classInfo, class1);
                obj = converter;
                if (converter == null)
                    obj = (Converter)ClassUtil.createInstance(class1, _config.canOverrideAccessModifiers());
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected PropertyName _findCreatorPropertyName(AnnotatedParameter annotatedparameter) {
        PropertyName propertyname;
label0:
        {
            PropertyName propertyname1 = _annotationIntrospector.findNameForDeserialization(annotatedparameter);
            if (propertyname1 != null) {
                propertyname = propertyname1;
                if (!propertyname1.isEmpty())
                    break label0;
            }
            annotatedparameter = _annotationIntrospector.findImplicitPropertyName(annotatedparameter);
            propertyname = propertyname1;
            if (annotatedparameter != null) {
                propertyname = propertyname1;
                if (!annotatedparameter.isEmpty())
                    propertyname = PropertyName.construct(annotatedparameter);
            }
        }
        return propertyname;
    }

    public LinkedHashMap _findPropertyFields(Collection collection, boolean flag) {
        LinkedHashMap linkedhashmap = new LinkedHashMap();
        Iterator iterator = _properties().iterator();
        do {
            if (!iterator.hasNext())
                break;
            Object obj = (BeanPropertyDefinition)iterator.next();
            AnnotatedField annotatedfield = ((BeanPropertyDefinition) (obj)).getField();
            if (annotatedfield != null) {
                obj = ((BeanPropertyDefinition) (obj)).getName();
                if (collection == null || !collection.contains(obj))
                    linkedhashmap.put(obj, annotatedfield);
            }
        } while (true);
        return linkedhashmap;
    }

    protected List _properties() {
        if (_properties == null)
            _properties = _propCollector.getProperties();
        return _properties;
    }

    public boolean addProperty(BeanPropertyDefinition beanpropertydefinition) {
        boolean flag;
        if (hasProperty(beanpropertydefinition.getFullName())) {
            flag = false;
        } else {
            _properties().add(beanpropertydefinition);
            flag = true;
        }
        return flag;
    }

    public TypeBindings bindingsForBeanType() {
        return _type.getBindings();
    }

    public AnnotatedMember findAnyGetter() {
        AnnotatedMember annotatedmember;
        if (_propCollector == null)
            annotatedmember = null;
        else
            annotatedmember = _propCollector.getAnyGetter();
        if (annotatedmember != null && !java/util/Map.isAssignableFrom(annotatedmember.getRawType()))
            throw new IllegalArgumentException((new StringBuilder()).append("Invalid 'any-getter' annotation on method ").append(annotatedmember.getName()).append("(): return type is not instance of java.util.Map").toString());
        else
            return annotatedmember;
    }

    public AnnotatedMethod findAnySetter() {
        AnnotatedMethod annotatedmethod;
        if (_propCollector == null)
            annotatedmethod = null;
        else
            annotatedmethod = _propCollector.getAnySetterMethod();
        if (annotatedmethod != null) {
            Class class1 = annotatedmethod.getRawParameterType(0);
            if (class1 != java/lang/String && class1 != java/lang/Object)
                throw new IllegalArgumentException((new StringBuilder()).append("Invalid 'any-setter' annotation on method ").append(annotatedmethod.getName()).append("(): first argument not of type String or Object, but ").append(class1.getName()).toString());
        }
        return annotatedmethod;
    }

    public Map findBackReferenceProperties() {
        HashMap hashmap = null;
        for (Iterator iterator = _properties().iterator(); iterator.hasNext();) {
            AnnotatedMember annotatedmember = ((BeanPropertyDefinition)iterator.next()).getMutator();
            if (annotatedmember != null) {
                Object obj = _annotationIntrospector.findReferenceType(annotatedmember);
                if (obj != null && ((com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty) (obj)).isBackReference()) {
                    if (hashmap == null)
                        hashmap = new HashMap();
                    obj = ((com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty) (obj)).getName();
                    if (hashmap.put(obj, annotatedmember) != null)
                        throw new IllegalArgumentException((new StringBuilder()).append("Multiple back-reference properties with name '").append(((String) (obj))).append("'").toString());
                }
            }
        }

        return hashmap;
    }

    public String findClassDescription() {
        String s;
        if (_annotationIntrospector == null)
            s = null;
        else
            s = _annotationIntrospector.findClassDescription(_classInfo);
        return s;
    }

    public List findCreatorParameterNames() {
        int i;
        boolean flag;
        flag = true;
        i = 0;
_L6:
        Object obj;
        if (i >= 2)
            break MISSING_BLOCK_LABEL_154;
        int j;
        PropertyName propertyname;
        AnnotatedWithParams annotatedwithparams;
        if (i == 0)
            obj = getConstructors();
        else
            obj = getFactoryMethods();
        obj = ((List) (obj)).iterator();
_L4:
        if (!((Iterator) (obj)).hasNext()) goto _L2; else goto _L1
_L1:
        annotatedwithparams = (AnnotatedWithParams)((Iterator) (obj)).next();
        j = annotatedwithparams.getParameterCount();
        if (j < 1) goto _L4; else goto _L3
_L3:
        propertyname = _findCreatorPropertyName(annotatedwithparams.getParameter(0));
        if (propertyname == null || propertyname.isEmpty()) goto _L4; else goto _L5
_L5:
        obj = new ArrayList();
        ((List) (obj)).add(propertyname);
        for (i = ((flag) ? 1 : 0); i < j; i++)
            ((List) (obj)).add(_findCreatorPropertyName(annotatedwithparams.getParameter(i)));

_L7:
        return ((List) (obj));
_L2:
        i++;
          goto _L6
        obj = Collections.emptyList();
          goto _L7
    }

    public List findCreatorPropertyNames() {
        Object obj1 = findCreatorParameterNames();
        Object obj;
        if (((List) (obj1)).isEmpty()) {
            obj = Collections.emptyList();
        } else {
            obj = new ArrayList(((List) (obj1)).size());
            obj1 = ((List) (obj1)).iterator();
            while (((Iterator) (obj1)).hasNext()) 
                ((List) (obj)).add(((PropertyName)((Iterator) (obj1)).next()).getSimpleName());
        }
        return ((List) (obj));
    }

    public AnnotatedConstructor findDefaultConstructor() {
        return _classInfo.getDefaultConstructor();
    }

    public Converter findDeserializationConverter() {
        Converter converter;
        if (_annotationIntrospector == null)
            converter = null;
        else
            converter = _createConverter(_annotationIntrospector.findDeserializationConverter(_classInfo));
        return converter;
    }

    public com.fasterxml.jackson.annotation.JsonFormat.Value findExpectedFormat(com.fasterxml.jackson.annotation.JsonFormat.Value value) {
        com.fasterxml.jackson.annotation.JsonFormat.Value value1 = value;
        if (_annotationIntrospector != null) {
            com.fasterxml.jackson.annotation.JsonFormat.Value value2 = _annotationIntrospector.findFormat(_classInfo);
            value1 = value;
            if (value2 != null)
                value1 = value2;
        }
        return value1;
    }

    public transient Method findFactoryMethod(Class aclass[]) {
        Iterator iterator = _classInfo.getStaticMethods().iterator();
_L2:
        int i;
        int j;
        AnnotatedMethod annotatedmethod;
        Class class1;
        do {
            if (!iterator.hasNext())
                break MISSING_BLOCK_LABEL_88;
            annotatedmethod = (AnnotatedMethod)iterator.next();
        } while (!isFactoryMethod(annotatedmethod));
        class1 = annotatedmethod.getRawParameterType(0);
        j = aclass.length;
        i = 0;
_L5:
        if (i >= j) goto _L2; else goto _L1
_L1:
        if (!class1.isAssignableFrom(aclass[i])) goto _L4; else goto _L3
_L3:
        aclass = annotatedmethod.getAnnotated();
_L6:
        return aclass;
_L4:
        i++;
          goto _L5
        aclass = null;
          goto _L6
    }

    public Map findInjectables() {
        Map map;
        if (_propCollector != null)
            map = _propCollector.getInjectables();
        else
            map = Collections.emptyMap();
        return map;
    }

    public AnnotatedMethod findJsonValueMethod() {
        AnnotatedMethod annotatedmethod;
        if (_propCollector == null)
            annotatedmethod = null;
        else
            annotatedmethod = _propCollector.getJsonValueMethod();
        return annotatedmethod;
    }

    public AnnotatedMethod findMethod(String s, Class aclass[]) {
        return _classInfo.findMethod(s, aclass);
    }

    public Class findPOJOBuilder() {
        Class class1;
        if (_annotationIntrospector == null)
            class1 = null;
        else
            class1 = _annotationIntrospector.findPOJOBuilder(_classInfo);
        return class1;
    }

    public com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value findPOJOBuilderConfig() {
        com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value value;
        if (_annotationIntrospector == null)
            value = null;
        else
            value = _annotationIntrospector.findPOJOBuilderConfig(_classInfo);
        return value;
    }

    public List findProperties() {
        return _properties();
    }

    public BeanPropertyDefinition findProperty(PropertyName propertyname) {
        Iterator iterator = _properties().iterator();
_L4:
        if (!iterator.hasNext()) goto _L2; else goto _L1
_L1:
        BeanPropertyDefinition beanpropertydefinition = (BeanPropertyDefinition)iterator.next();
        if (!beanpropertydefinition.hasName(propertyname)) goto _L4; else goto _L3
_L3:
        propertyname = beanpropertydefinition;
_L6:
        return propertyname;
_L2:
        propertyname = null;
        if (true) goto _L6; else goto _L5
_L5:
    }

    public com.fasterxml.jackson.annotation.JsonInclude.Value findPropertyInclusion(com.fasterxml.jackson.annotation.JsonInclude.Value value) {
        com.fasterxml.jackson.annotation.JsonInclude.Value value1 = value;
        if (_annotationIntrospector != null) {
            com.fasterxml.jackson.annotation.JsonInclude.Value value2 = _annotationIntrospector.findPropertyInclusion(_classInfo);
            value1 = value;
            if (value2 != null)
                value1 = value.withOverrides(value2);
        }
        return value1;
    }

    public Converter findSerializationConverter() {
        Converter converter;
        if (_annotationIntrospector == null)
            converter = null;
        else
            converter = _createConverter(_annotationIntrospector.findSerializationConverter(_classInfo));
        return converter;
    }

    public transient Constructor findSingleArgConstructor(Class aclass[]) {
        Iterator iterator = _classInfo.getConstructors().iterator();
_L2:
        int i;
        int j;
        Class class1;
        AnnotatedConstructor annotatedconstructor;
        do {
            if (!iterator.hasNext())
                break MISSING_BLOCK_LABEL_85;
            annotatedconstructor = (AnnotatedConstructor)iterator.next();
        } while (annotatedconstructor.getParameterCount() != 1);
        class1 = annotatedconstructor.getRawParameterType(0);
        j = aclass.length;
        i = 0;
_L5:
        if (i >= j) goto _L2; else goto _L1
_L1:
        if (aclass[i] != class1) goto _L4; else goto _L3
_L3:
        aclass = annotatedconstructor.getAnnotated();
_L6:
        return aclass;
_L4:
        i++;
          goto _L5
        aclass = null;
          goto _L6
    }

    public Annotations getClassAnnotations() {
        return _classInfo.getAnnotations();
    }

    public AnnotatedClass getClassInfo() {
        return _classInfo;
    }

    public List getConstructors() {
        return _classInfo.getConstructors();
    }

    public List getFactoryMethods() {
        List list = _classInfo.getStaticMethods();
        Object obj;
        if (list.isEmpty()) {
            obj = list;
        } else {
            obj = new ArrayList();
            Iterator iterator = list.iterator();
            while (iterator.hasNext())  {
                AnnotatedMethod annotatedmethod = (AnnotatedMethod)iterator.next();
                if (isFactoryMethod(annotatedmethod))
                    ((ArrayList) (obj)).add(annotatedmethod);
            }
        }
        return ((List) (obj));
    }

    public Set getIgnoredPropertyNames() {
        Set set;
        Set set1;
        if (_propCollector == null)
            set = null;
        else
            set = _propCollector.getIgnoredPropertyNames();
        set1 = set;
        if (set == null)
            set1 = Collections.emptySet();
        return set1;
    }

    public ObjectIdInfo getObjectIdInfo() {
        return _objectIdInfo;
    }

    public boolean hasKnownClassAnnotations() {
        return _classInfo.hasAnnotations();
    }

    public boolean hasProperty(PropertyName propertyname) {
        boolean flag;
        if (findProperty(propertyname) != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public Object instantiateBean(boolean flag) {
        Object obj = _classInfo.getDefaultConstructor();
        if (obj != null) goto _L2; else goto _L1
_L1:
        obj = null;
_L4:
        return obj;
_L2:
        if (flag)
            ((AnnotatedConstructor) (obj)).fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
        obj = ((AnnotatedConstructor) (obj)).getAnnotated().newInstance(new Object[0]);
        if (true) goto _L4; else goto _L3
_L3:
        Object obj1;
        for (; ((Throwable) (obj1)).getCause() != null; obj1 = ((Throwable) (obj1)).getCause());
        if (obj1 instanceof Error)
            throw (Error)obj1;
        if (obj1 instanceof RuntimeException)
            throw (RuntimeException)obj1;
        else
            throw new IllegalArgumentException((new StringBuilder()).append("Failed to instantiate bean of type ").append(_classInfo.getAnnotated().getName()).append(": (").append(obj1.getClass().getName()).append(") ").append(((Throwable) (obj1)).getMessage()).toString(), ((Throwable) (obj1)));
        obj1;
        if (true) goto _L3; else goto _L5
_L5:
    }

    protected boolean isFactoryMethod(AnnotatedMethod annotatedmethod) {
        boolean flag1;
        Class class1;
        flag1 = false;
        class1 = annotatedmethod.getRawReturnType();
        if (getBeanClass().isAssignableFrom(class1)) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        if (_annotationIntrospector.hasCreatorAnnotation(annotatedmethod)) {
            flag = true;
            continue; /* Loop/switch isn't completed */
        }
        String s = annotatedmethod.getName();
        if ("valueOf".equals(s)) {
            flag = true;
            continue; /* Loop/switch isn't completed */
        }
        flag = flag1;
        if (!"fromString".equals(s))
            continue; /* Loop/switch isn't completed */
        flag = flag1;
        if (1 != annotatedmethod.getParameterCount())
            continue; /* Loop/switch isn't completed */
        annotatedmethod = annotatedmethod.getRawParameterType(0);
        if (annotatedmethod != java/lang/String) {
            flag = flag1;
            if (!java/lang/CharSequence.isAssignableFrom(annotatedmethod))
                continue; /* Loop/switch isn't completed */
        }
        flag = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public boolean removeProperty(String s) {
        Iterator iterator = _properties().iterator();
_L4:
        if (!iterator.hasNext()) goto _L2; else goto _L1
_L1:
        if (!((BeanPropertyDefinition)iterator.next()).getName().equals(s)) goto _L4; else goto _L3
_L3:
        boolean flag;
        iterator.remove();
        flag = true;
_L6:
        return flag;
_L2:
        flag = false;
        if (true) goto _L6; else goto _L5
_L5:
    }

    public JavaType resolveType(Type type) {
        if (type == null)
            type = null;
        else
            type = _config.getTypeFactory().constructType(type, _type.getBindings());
        return type;
    }
}
