// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.introspect;

import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import java.io.Serializable;
import java.util.Collection;
import java.util.Map;

// Referenced classes of package com.fasterxml.jackson.databind.introspect:
//            ClassIntrospector, AnnotatedClass, BasicBeanDescription, POJOPropertiesCollector

public class BasicClassIntrospector extends ClassIntrospector
    implements Serializable {

    protected static final BasicBeanDescription BOOLEAN_DESC;
    protected static final BasicBeanDescription INT_DESC;
    protected static final BasicBeanDescription LONG_DESC;
    protected static final BasicBeanDescription STRING_DESC;
    public static final BasicClassIntrospector instance = new BasicClassIntrospector();
    private static final long serialVersionUID = 1L;
    protected final LRUMap _cachedFCA = new LRUMap(16, 64);

    public BasicClassIntrospector() {
    }

    protected BasicBeanDescription _findStdJdkCollectionDesc(MapperConfig mapperconfig, JavaType javatype) {
        if (_isStdJDKCollection(javatype))
            mapperconfig = BasicBeanDescription.forOtherUse(mapperconfig, javatype, AnnotatedClass.construct(javatype, mapperconfig));
        else
            mapperconfig = null;
        return mapperconfig;
    }

    protected BasicBeanDescription _findStdTypeDesc(JavaType javatype) {
        javatype = javatype.getRawClass();
        if (!javatype.isPrimitive()) goto _L2; else goto _L1
_L1:
        if (javatype != Boolean.TYPE) goto _L4; else goto _L3
_L3:
        javatype = BOOLEAN_DESC;
_L7:
        return javatype;
_L4:
        if (javatype == Integer.TYPE) {
            javatype = INT_DESC;
            continue; /* Loop/switch isn't completed */
        }
        if (javatype == Long.TYPE) {
            javatype = LONG_DESC;
            continue; /* Loop/switch isn't completed */
        }
          goto _L5
_L2:
        if (javatype == java/lang/String) {
            javatype = STRING_DESC;
            continue; /* Loop/switch isn't completed */
        }
_L5:
        javatype = null;
        if (true) goto _L7; else goto _L6
_L6:
    }

    protected boolean _isStdJDKCollection(JavaType javatype) {
        boolean flag;
        boolean flag1;
        flag1 = false;
        flag = flag1;
        if (!javatype.isContainerType()) goto _L2; else goto _L1
_L1:
        if (!javatype.isArrayType()) goto _L4; else goto _L3
_L3:
        flag = flag1;
_L2:
        return flag;
_L4:
        javatype = javatype.getRawClass();
        String s = ClassUtil.getPackageName(javatype);
        flag = flag1;
        if (s == null)
            continue; /* Loop/switch isn't completed */
        if (!s.startsWith("java.lang")) {
            flag = flag1;
            if (!s.startsWith("java.util"))
                continue; /* Loop/switch isn't completed */
        }
        if (!java/util/Collection.isAssignableFrom(javatype)) {
            flag = flag1;
            if (!java/util/Map.isAssignableFrom(javatype))
                continue; /* Loop/switch isn't completed */
        }
        flag = true;
        if (true) goto _L2; else goto _L5
_L5:
    }

    protected POJOPropertiesCollector collectProperties(MapperConfig mapperconfig, JavaType javatype, ClassIntrospector.MixInResolver mixinresolver, boolean flag, String s) {
        return constructPropertyCollector(mapperconfig, AnnotatedClass.construct(javatype, mapperconfig, mixinresolver), javatype, flag, s);
    }

    protected POJOPropertiesCollector collectPropertiesWithBuilder(MapperConfig mapperconfig, JavaType javatype, ClassIntrospector.MixInResolver mixinresolver, boolean flag) {
        Object obj = null;
        AnnotationIntrospector annotationintrospector;
        AnnotatedClass annotatedclass;
        if (mapperconfig.isAnnotationProcessingEnabled())
            annotationintrospector = mapperconfig.getAnnotationIntrospector();
        else
            annotationintrospector = null;
        annotatedclass = AnnotatedClass.construct(javatype, mapperconfig, mixinresolver);
        if (annotationintrospector == null)
            mixinresolver = obj;
        else
            mixinresolver = annotationintrospector.findPOJOBuilderConfig(annotatedclass);
        if (mixinresolver == null)
            mixinresolver = "with";
        else
            mixinresolver = ((com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value) (mixinresolver)).withPrefix;
        return constructPropertyCollector(mapperconfig, annotatedclass, javatype, flag, mixinresolver);
    }

    protected POJOPropertiesCollector constructPropertyCollector(MapperConfig mapperconfig, AnnotatedClass annotatedclass, JavaType javatype, boolean flag, String s) {
        return new POJOPropertiesCollector(mapperconfig, flag, javatype, annotatedclass, s);
    }

    public volatile BeanDescription forClassAnnotations(MapperConfig mapperconfig, JavaType javatype, ClassIntrospector.MixInResolver mixinresolver) {
        return forClassAnnotations(mapperconfig, javatype, mixinresolver);
    }

    public BasicBeanDescription forClassAnnotations(MapperConfig mapperconfig, JavaType javatype, ClassIntrospector.MixInResolver mixinresolver) {
        BasicBeanDescription basicbeandescription1 = _findStdTypeDesc(javatype);
        BasicBeanDescription basicbeandescription = basicbeandescription1;
        if (basicbeandescription1 == null) {
            BasicBeanDescription basicbeandescription2 = (BasicBeanDescription)_cachedFCA.get(javatype);
            basicbeandescription = basicbeandescription2;
            if (basicbeandescription2 == null) {
                basicbeandescription = BasicBeanDescription.forOtherUse(mapperconfig, javatype, AnnotatedClass.construct(javatype, mapperconfig, mixinresolver));
                _cachedFCA.put(javatype, basicbeandescription);
            }
        }
        return basicbeandescription;
    }

    public volatile BeanDescription forCreation(DeserializationConfig deserializationconfig, JavaType javatype, ClassIntrospector.MixInResolver mixinresolver) {
        return forCreation(deserializationconfig, javatype, mixinresolver);
    }

    public BasicBeanDescription forCreation(DeserializationConfig deserializationconfig, JavaType javatype, ClassIntrospector.MixInResolver mixinresolver) {
        BasicBeanDescription basicbeandescription1 = _findStdTypeDesc(javatype);
        BasicBeanDescription basicbeandescription = basicbeandescription1;
        if (basicbeandescription1 == null) {
            BasicBeanDescription basicbeandescription2 = _findStdJdkCollectionDesc(deserializationconfig, javatype);
            basicbeandescription = basicbeandescription2;
            if (basicbeandescription2 == null)
                basicbeandescription = BasicBeanDescription.forDeserialization(collectProperties(deserializationconfig, javatype, mixinresolver, false, "set"));
        }
        return basicbeandescription;
    }

    public volatile BeanDescription forDeserialization(DeserializationConfig deserializationconfig, JavaType javatype, ClassIntrospector.MixInResolver mixinresolver) {
        return forDeserialization(deserializationconfig, javatype, mixinresolver);
    }

    public BasicBeanDescription forDeserialization(DeserializationConfig deserializationconfig, JavaType javatype, ClassIntrospector.MixInResolver mixinresolver) {
        BasicBeanDescription basicbeandescription1 = _findStdTypeDesc(javatype);
        BasicBeanDescription basicbeandescription = basicbeandescription1;
        if (basicbeandescription1 == null) {
            BasicBeanDescription basicbeandescription2 = _findStdJdkCollectionDesc(deserializationconfig, javatype);
            basicbeandescription = basicbeandescription2;
            if (basicbeandescription2 == null)
                basicbeandescription = BasicBeanDescription.forDeserialization(collectProperties(deserializationconfig, javatype, mixinresolver, false, "set"));
            _cachedFCA.putIfAbsent(javatype, basicbeandescription);
        }
        return basicbeandescription;
    }

    public volatile BeanDescription forDeserializationWithBuilder(DeserializationConfig deserializationconfig, JavaType javatype, ClassIntrospector.MixInResolver mixinresolver) {
        return forDeserializationWithBuilder(deserializationconfig, javatype, mixinresolver);
    }

    public BasicBeanDescription forDeserializationWithBuilder(DeserializationConfig deserializationconfig, JavaType javatype, ClassIntrospector.MixInResolver mixinresolver) {
        deserializationconfig = BasicBeanDescription.forDeserialization(collectPropertiesWithBuilder(deserializationconfig, javatype, mixinresolver, false));
        _cachedFCA.putIfAbsent(javatype, deserializationconfig);
        return deserializationconfig;
    }

    public volatile BeanDescription forDirectClassAnnotations(MapperConfig mapperconfig, JavaType javatype, ClassIntrospector.MixInResolver mixinresolver) {
        return forDirectClassAnnotations(mapperconfig, javatype, mixinresolver);
    }

    public BasicBeanDescription forDirectClassAnnotations(MapperConfig mapperconfig, JavaType javatype, ClassIntrospector.MixInResolver mixinresolver) {
        BasicBeanDescription basicbeandescription1 = _findStdTypeDesc(javatype);
        BasicBeanDescription basicbeandescription = basicbeandescription1;
        if (basicbeandescription1 == null)
            basicbeandescription = BasicBeanDescription.forOtherUse(mapperconfig, javatype, AnnotatedClass.constructWithoutSuperTypes(javatype.getRawClass(), mapperconfig, mixinresolver));
        return basicbeandescription;
    }

    public volatile BeanDescription forSerialization(SerializationConfig serializationconfig, JavaType javatype, ClassIntrospector.MixInResolver mixinresolver) {
        return forSerialization(serializationconfig, javatype, mixinresolver);
    }

    public BasicBeanDescription forSerialization(SerializationConfig serializationconfig, JavaType javatype, ClassIntrospector.MixInResolver mixinresolver) {
        BasicBeanDescription basicbeandescription1 = _findStdTypeDesc(javatype);
        BasicBeanDescription basicbeandescription = basicbeandescription1;
        if (basicbeandescription1 == null) {
            BasicBeanDescription basicbeandescription2 = _findStdJdkCollectionDesc(serializationconfig, javatype);
            basicbeandescription = basicbeandescription2;
            if (basicbeandescription2 == null)
                basicbeandescription = BasicBeanDescription.forSerialization(collectProperties(serializationconfig, javatype, mixinresolver, true, "set"));
            _cachedFCA.putIfAbsent(javatype, basicbeandescription);
        }
        return basicbeandescription;
    }

    static  {
        AnnotatedClass annotatedclass = AnnotatedClass.constructWithoutSuperTypes(java/lang/String, null);
        STRING_DESC = BasicBeanDescription.forOtherUse(null, SimpleType.constructUnsafe(java/lang/String), annotatedclass);
        annotatedclass = AnnotatedClass.constructWithoutSuperTypes(Boolean.TYPE, null);
        BOOLEAN_DESC = BasicBeanDescription.forOtherUse(null, SimpleType.constructUnsafe(Boolean.TYPE), annotatedclass);
        annotatedclass = AnnotatedClass.constructWithoutSuperTypes(Integer.TYPE, null);
        INT_DESC = BasicBeanDescription.forOtherUse(null, SimpleType.constructUnsafe(Integer.TYPE), annotatedclass);
        annotatedclass = AnnotatedClass.constructWithoutSuperTypes(Long.TYPE, null);
        LONG_DESC = BasicBeanDescription.forOtherUse(null, SimpleType.constructUnsafe(Long.TYPE), annotatedclass);
    }
}
