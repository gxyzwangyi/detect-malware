// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.introspect;

import java.lang.reflect.Method;
import java.util.*;

// Referenced classes of package com.fasterxml.jackson.databind.introspect:
//            MemberKey, AnnotatedMethod

public final class AnnotatedMethodMap
    implements Iterable {

    protected LinkedHashMap _methods;

    public AnnotatedMethodMap() {
    }

    public void add(AnnotatedMethod annotatedmethod) {
        if (_methods == null)
            _methods = new LinkedHashMap();
        _methods.put(new MemberKey(annotatedmethod.getAnnotated()), annotatedmethod);
    }

    public AnnotatedMethod find(String s, Class aclass[]) {
        if (_methods == null)
            s = null;
        else
            s = (AnnotatedMethod)_methods.get(new MemberKey(s, aclass));
        return s;
    }

    public AnnotatedMethod find(Method method) {
        if (_methods == null)
            method = null;
        else
            method = (AnnotatedMethod)_methods.get(new MemberKey(method));
        return method;
    }

    public boolean isEmpty() {
        boolean flag;
        if (_methods == null || _methods.size() == 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public Iterator iterator() {
        Iterator iterator1;
        if (_methods != null)
            iterator1 = _methods.values().iterator();
        else
            iterator1 = Collections.emptyList().iterator();
        return iterator1;
    }

    public AnnotatedMethod remove(AnnotatedMethod annotatedmethod) {
        return remove(annotatedmethod.getAnnotated());
    }

    public AnnotatedMethod remove(Method method) {
        if (_methods != null)
            method = (AnnotatedMethod)_methods.remove(new MemberKey(method));
        else
            method = null;
        return method;
    }

    public int size() {
        int i;
        if (_methods == null)
            i = 0;
        else
            i = _methods.size();
        return i;
    }
}
