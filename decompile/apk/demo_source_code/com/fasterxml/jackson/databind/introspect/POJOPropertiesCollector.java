// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.introspect;

import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.util.BeanUtil;
import com.fasterxml.jackson.databind.util.ClassUtil;
import java.lang.reflect.Modifier;
import java.util.*;

// Referenced classes of package com.fasterxml.jackson.databind.introspect:
//            AnnotatedParameter, POJOPropertyBuilder, AnnotatedClass, AnnotatedConstructor, 
//            AnnotatedMethod, AnnotatedField, VisibilityChecker, AnnotatedMember, 
//            ObjectIdInfo

public class POJOPropertiesCollector {

    protected final AnnotationIntrospector _annotationIntrospector;
    protected LinkedList _anyGetters;
    protected LinkedList _anySetters;
    protected final AnnotatedClass _classDef;
    protected boolean _collected;
    protected final MapperConfig _config;
    protected LinkedList _creatorProperties;
    protected final boolean _forSerialization;
    protected HashSet _ignoredPropertyNames;
    protected LinkedHashMap _injectables;
    protected LinkedList _jsonValueGetters;
    protected final String _mutatorPrefix;
    protected LinkedHashMap _properties;
    protected final boolean _stdBeanNaming;
    protected final JavaType _type;
    protected final VisibilityChecker _visibilityChecker;

    protected POJOPropertiesCollector(MapperConfig mapperconfig, boolean flag, JavaType javatype, AnnotatedClass annotatedclass, String s) {
        _config = mapperconfig;
        _stdBeanNaming = mapperconfig.isEnabled(MapperFeature.USE_STD_BEAN_NAMING);
        _forSerialization = flag;
        _type = javatype;
        _classDef = annotatedclass;
        javatype = s;
        if (s == null)
            javatype = "set";
        _mutatorPrefix = javatype;
        if (mapperconfig.isAnnotationProcessingEnabled())
            mapperconfig = _config.getAnnotationIntrospector();
        else
            mapperconfig = null;
        _annotationIntrospector = mapperconfig;
        if (_annotationIntrospector == null)
            _visibilityChecker = _config.getDefaultVisibilityChecker();
        else
            _visibilityChecker = _annotationIntrospector.findAutoDetectVisibility(annotatedclass, _config.getDefaultVisibilityChecker());
    }

    private void _collectIgnorals(String s) {
        if (!_forSerialization) {
            if (_ignoredPropertyNames == null)
                _ignoredPropertyNames = new HashSet();
            _ignoredPropertyNames.add(s);
        }
    }

    private PropertyNamingStrategy _findNamingStrategy() {
        Object obj;
        if (_annotationIntrospector == null)
            obj = null;
        else
            obj = _annotationIntrospector.findNamingStrategy(_classDef);
        if (obj != null) goto _L2; else goto _L1
_L1:
        obj = _config.getPropertyNamingStrategy();
_L4:
        return ((PropertyNamingStrategy) (obj));
_L2:
        if (obj instanceof PropertyNamingStrategy) {
            obj = (PropertyNamingStrategy)obj;
            continue; /* Loop/switch isn't completed */
        }
        if (!(obj instanceof Class))
            throw new IllegalStateException((new StringBuilder()).append("AnnotationIntrospector returned PropertyNamingStrategy definition of type ").append(obj.getClass().getName()).append("; expected type PropertyNamingStrategy or Class<PropertyNamingStrategy> instead").toString());
        Class class1 = (Class)obj;
        if (class1 == com/fasterxml/jackson/databind/PropertyNamingStrategy) {
            obj = null;
            continue; /* Loop/switch isn't completed */
        }
        if (!com/fasterxml/jackson/databind/PropertyNamingStrategy.isAssignableFrom(class1))
            throw new IllegalStateException((new StringBuilder()).append("AnnotationIntrospector returned Class ").append(class1.getName()).append("; expected Class<PropertyNamingStrategy>").toString());
        obj = _config.getHandlerInstantiator();
        if (obj != null) {
            obj = ((HandlerInstantiator) (obj)).namingStrategyInstance(_config, _classDef, class1);
            if (obj != null)
                continue; /* Loop/switch isn't completed */
        }
        obj = (PropertyNamingStrategy)ClassUtil.createInstance(class1, _config.canOverrideAccessModifiers());
        if (true) goto _L4; else goto _L3
_L3:
    }

    private PropertyName _propNameFromSimple(String s) {
        return PropertyName.construct(s, null);
    }

    protected void _addCreatorParam(Map map, AnnotatedParameter annotatedparameter) {
        Object obj = _annotationIntrospector.findImplicitPropertyName(annotatedparameter);
        String s = ((String) (obj));
        if (obj == null)
            s = "";
        obj = _annotationIntrospector.findNameForDeserialization(annotatedparameter);
        boolean flag;
        if (obj != null && !((PropertyName) (obj)).isEmpty())
            flag = true;
        else
            flag = false;
        if (!flag)
            break MISSING_BLOCK_LABEL_52;
        do {
            if (flag && s.isEmpty())
                map = _property(map, ((PropertyName) (obj)));
            else
                map = _property(map, s);
            map.addCtor(annotatedparameter, ((PropertyName) (obj)), flag, true, false);
            _creatorProperties.add(map);
            if (true) {
                do
                    return;
                while (s.isEmpty() || !_annotationIntrospector.hasCreatorAnnotation(annotatedparameter.getOwner()));
                obj = PropertyName.construct(s);
            }
        } while (true);
    }

    protected void _addCreators(Map map) {
        if (_annotationIntrospector != null) {
            for (Iterator iterator = _classDef.getConstructors().iterator(); iterator.hasNext();) {
                AnnotatedConstructor annotatedconstructor = (AnnotatedConstructor)iterator.next();
                if (_creatorProperties == null)
                    _creatorProperties = new LinkedList();
                int k = annotatedconstructor.getParameterCount();
                int i = 0;
                while (i < k)  {
                    _addCreatorParam(map, annotatedconstructor.getParameter(i));
                    i++;
                }
            }

            for (Iterator iterator1 = _classDef.getStaticMethods().iterator(); iterator1.hasNext();) {
                AnnotatedMethod annotatedmethod = (AnnotatedMethod)iterator1.next();
                if (_creatorProperties == null)
                    _creatorProperties = new LinkedList();
                int l = annotatedmethod.getParameterCount();
                int j = 0;
                while (j < l)  {
                    _addCreatorParam(map, annotatedmethod.getParameter(j));
                    j++;
                }
            }

        }
    }

    protected void _addFields(Map map) {
        AnnotationIntrospector annotationintrospector = _annotationIntrospector;
        boolean flag;
        boolean flag4;
        Iterator iterator;
        if (!_forSerialization && !_config.isEnabled(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS))
            flag = true;
        else
            flag = false;
        flag4 = _config.isEnabled(MapperFeature.PROPAGATE_TRANSIENT_MARKER);
        iterator = _classDef.fields().iterator();
        do
            if (iterator.hasNext()) {
                AnnotatedField annotatedfield = (AnnotatedField)iterator.next();
                boolean flag1;
                boolean flag2;
                boolean flag3;
                Object obj;
                Object obj1;
                Object obj2;
                if (annotationintrospector == null)
                    obj = null;
                else
                    obj = annotationintrospector.findImplicitPropertyName(annotatedfield);
                if (obj == null)
                    obj1 = annotatedfield.getName();
                else
                    obj1 = obj;
                if (annotationintrospector == null)
                    obj = null;
                else
                if (_forSerialization)
                    obj = annotationintrospector.findNameForSerialization(annotatedfield);
                else
                    obj = annotationintrospector.findNameForDeserialization(annotatedfield);
                if (obj != null)
                    flag1 = true;
                else
                    flag1 = false;
                obj2 = obj;
                flag3 = flag1;
                if (flag1) {
                    obj2 = obj;
                    flag3 = flag1;
                    if (((PropertyName) (obj)).isEmpty()) {
                        obj2 = _propNameFromSimple(((String) (obj1)));
                        flag3 = false;
                    }
                }
                if (obj2 != null)
                    flag1 = true;
                else
                    flag1 = false;
                flag2 = flag1;
                if (!flag1)
                    flag2 = _visibilityChecker.isFieldVisible(annotatedfield);
                if (annotationintrospector != null && annotationintrospector.hasIgnoreMarker(annotatedfield))
                    flag1 = true;
                else
                    flag1 = false;
                if (annotatedfield.isTransient())
                    if (flag4) {
                        flag1 = true;
                        flag2 = false;
                    } else {
                        flag2 = false;
                    }
                if (!flag || obj2 != null || flag1 || !Modifier.isFinal(annotatedfield.getModifiers()))
                    _property(map, ((String) (obj1))).addField(annotatedfield, ((PropertyName) (obj2)), flag3, flag2, flag1);
            } else {
                return;
            }
        while (true);
    }

    protected void _addGetterMethod(Map map, AnnotatedMethod annotatedmethod, AnnotationIntrospector annotationintrospector) {
        boolean flag1;
        boolean flag2;
        String s;
        Object obj;
        flag1 = true;
        s = null;
        obj = null;
        flag2 = false;
        if (annotatedmethod.hasReturnType()) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (annotationintrospector == null) goto _L4; else goto _L3
_L3:
        if (!annotationintrospector.hasAnyGetterAnnotation(annotatedmethod)) goto _L6; else goto _L5
_L5:
        if (_anyGetters == null)
            _anyGetters = new LinkedList();
        _anyGetters.add(annotatedmethod);
          goto _L7
_L6:
        if (!annotationintrospector.hasAsValueAnnotation(annotatedmethod)) goto _L4; else goto _L8
_L8:
        if (_jsonValueGetters == null)
            _jsonValueGetters = new LinkedList();
        _jsonValueGetters.add(annotatedmethod);
          goto _L7
_L4:
        boolean flag;
        PropertyName propertyname;
        if (annotationintrospector == null)
            propertyname = null;
        else
            propertyname = annotationintrospector.findNameForSerialization(annotatedmethod);
        if (propertyname != null)
            flag = true;
        else
            flag = false;
        if (flag)
            break MISSING_BLOCK_LABEL_250;
        if (annotationintrospector != null)
            obj = annotationintrospector.findImplicitPropertyName(annotatedmethod);
        s = ((String) (obj));
        if (obj == null)
            s = BeanUtil.okNameForRegularGetter(annotatedmethod, annotatedmethod.getName(), _stdBeanNaming);
        if (s != null) goto _L10; else goto _L9
_L9:
        s = BeanUtil.okNameForIsGetter(annotatedmethod, annotatedmethod.getName(), _stdBeanNaming);
        if (s == null) goto _L7; else goto _L11
_L11:
        flag1 = _visibilityChecker.isIsGetterVisible(annotatedmethod);
_L12:
        if (annotationintrospector != null)
            flag2 = annotationintrospector.hasIgnoreMarker(annotatedmethod);
        _property(map, s).addGetter(annotatedmethod, propertyname, flag, flag1, flag2);
_L7:
        if (true) goto _L1; else goto _L10
_L10:
        flag1 = _visibilityChecker.isGetterVisible(annotatedmethod);
          goto _L12
        if (annotationintrospector != null)
            s = annotationintrospector.findImplicitPropertyName(annotatedmethod);
        obj = s;
        if (s == null)
            obj = BeanUtil.okNameForGetter(annotatedmethod, _stdBeanNaming);
        s = ((String) (obj));
        if (obj == null)
            s = annotatedmethod.getName();
        obj = propertyname;
        if (propertyname.isEmpty()) {
            obj = _propNameFromSimple(s);
            flag = false;
        }
        propertyname = ((PropertyName) (obj));
          goto _L12
    }

    protected void _addInjectables(Map map) {
        map = _annotationIntrospector;
        if (map != null) {
            AnnotatedField annotatedfield;
            for (Iterator iterator1 = _classDef.fields().iterator(); iterator1.hasNext(); _doAddInjectable(map.findInjectableValueId(annotatedfield), annotatedfield))
                annotatedfield = (AnnotatedField)iterator1.next();

            Iterator iterator = _classDef.memberMethods().iterator();
            while (iterator.hasNext())  {
                AnnotatedMethod annotatedmethod = (AnnotatedMethod)iterator.next();
                if (annotatedmethod.getParameterCount() == 1)
                    _doAddInjectable(map.findInjectableValueId(annotatedmethod), annotatedmethod);
            }
        }
    }

    protected void _addMethods(Map map) {
        AnnotationIntrospector annotationintrospector = _annotationIntrospector;
        Iterator iterator = _classDef.memberMethods().iterator();
        do {
            if (!iterator.hasNext())
                break;
            AnnotatedMethod annotatedmethod = (AnnotatedMethod)iterator.next();
            int i = annotatedmethod.getParameterCount();
            if (i == 0)
                _addGetterMethod(map, annotatedmethod, annotationintrospector);
            else
            if (i == 1)
                _addSetterMethod(map, annotatedmethod, annotationintrospector);
            else
            if (i == 2 && annotationintrospector != null && annotationintrospector.hasAnySetterAnnotation(annotatedmethod)) {
                if (_anySetters == null)
                    _anySetters = new LinkedList();
                _anySetters.add(annotatedmethod);
            }
        } while (true);
    }

    protected void _addSetterMethod(Map map, AnnotatedMethod annotatedmethod, AnnotationIntrospector annotationintrospector) {
        boolean flag;
        boolean flag1;
        boolean flag2;
        PropertyName propertyname;
        String s;
        String s1;
        flag1 = true;
        s = null;
        s1 = null;
        flag2 = false;
        if (annotationintrospector == null)
            propertyname = null;
        else
            propertyname = annotationintrospector.findNameForDeserialization(annotatedmethod);
        if (propertyname != null)
            flag = true;
        else
            flag = false;
        if (flag) goto _L2; else goto _L1
_L1:
        if (annotationintrospector != null)
            s1 = annotationintrospector.findImplicitPropertyName(annotatedmethod);
        s = s1;
        if (s1 == null)
            s = BeanUtil.okNameForMutator(annotatedmethod, _mutatorPrefix, _stdBeanNaming);
        if (s != null) goto _L4; else goto _L3
_L3:
        return;
_L4:
        flag1 = _visibilityChecker.isSetterVisible(annotatedmethod);
_L5:
        Object obj;
        if (annotationintrospector != null)
            flag2 = annotationintrospector.hasIgnoreMarker(annotatedmethod);
        _property(map, s).addSetter(annotatedmethod, propertyname, flag, flag1, flag2);
        if (true) goto _L3; else goto _L2
_L2:
        if (annotationintrospector != null)
            s = annotationintrospector.findImplicitPropertyName(annotatedmethod);
        obj = s;
        if (s == null)
            obj = BeanUtil.okNameForMutator(annotatedmethod, _mutatorPrefix, _stdBeanNaming);
        s = ((String) (obj));
        if (obj == null)
            s = annotatedmethod.getName();
        obj = propertyname;
        if (propertyname.isEmpty()) {
            obj = _propNameFromSimple(s);
            flag = false;
        }
        propertyname = ((PropertyName) (obj));
          goto _L5
    }

    protected void _doAddInjectable(Object obj, AnnotatedMember annotatedmember) {
        if (obj != null) {
            if (_injectables == null)
                _injectables = new LinkedHashMap();
            if ((AnnotatedMember)_injectables.put(obj, annotatedmember) != null) {
                annotatedmember = obj.getClass().getName();
                throw new IllegalArgumentException((new StringBuilder()).append("Duplicate injectable value with id '").append(String.valueOf(obj)).append("' (of type ").append(annotatedmember).append(")").toString());
            }
        }
    }

    protected POJOPropertyBuilder _property(Map map, PropertyName propertyname) {
        return _property(map, propertyname.getSimpleName());
    }

    protected POJOPropertyBuilder _property(Map map, String s) {
        POJOPropertyBuilder pojopropertybuilder1 = (POJOPropertyBuilder)map.get(s);
        POJOPropertyBuilder pojopropertybuilder = pojopropertybuilder1;
        if (pojopropertybuilder1 == null) {
            pojopropertybuilder = new POJOPropertyBuilder(_config, _annotationIntrospector, _forSerialization, PropertyName.construct(s));
            map.put(s, pojopropertybuilder);
        }
        return pojopropertybuilder;
    }

    protected void _removeUnwantedAccessor(Map map) {
        boolean flag = _config.isEnabled(MapperFeature.INFER_PROPERTY_MUTATORS);
        for (map = map.values().iterator(); map.hasNext(); ((POJOPropertyBuilder)map.next()).removeNonVisible(flag));
    }

    protected void _removeUnwantedProperties(Map map) {
        map = map.values().iterator();
        do {
            if (!map.hasNext())
                break;
            POJOPropertyBuilder pojopropertybuilder = (POJOPropertyBuilder)map.next();
            if (!pojopropertybuilder.anyVisible())
                map.remove();
            else
            if (pojopropertybuilder.anyIgnorals())
                if (!pojopropertybuilder.isExplicitlyIncluded()) {
                    map.remove();
                    _collectIgnorals(pojopropertybuilder.getName());
                } else {
                    pojopropertybuilder.removeIgnored();
                    if (!_forSerialization && !pojopropertybuilder.couldDeserialize())
                        _collectIgnorals(pojopropertybuilder.getName());
                }
        } while (true);
    }

    protected void _renameProperties(Map map) {
        Iterator iterator1 = map.entrySet().iterator();
        LinkedList linkedlist1 = null;
        do {
            if (!iterator1.hasNext())
                break;
            POJOPropertyBuilder pojopropertybuilder2 = (POJOPropertyBuilder)((java.util.Map.Entry)iterator1.next()).getValue();
            Set set = pojopropertybuilder2.findExplicitNames();
            if (!set.isEmpty()) {
                iterator1.remove();
                LinkedList linkedlist = linkedlist1;
                if (linkedlist1 == null)
                    linkedlist = new LinkedList();
                if (set.size() == 1) {
                    linkedlist.add(pojopropertybuilder2.withName((PropertyName)set.iterator().next()));
                    linkedlist1 = linkedlist;
                } else {
                    linkedlist.addAll(pojopropertybuilder2.explode(set));
                    linkedlist1 = linkedlist;
                }
            }
        } while (true);
        if (linkedlist1 != null) {
            Iterator iterator = linkedlist1.iterator();
            while (iterator.hasNext())  {
                POJOPropertyBuilder pojopropertybuilder1 = (POJOPropertyBuilder)iterator.next();
                String s = pojopropertybuilder1.getName();
                POJOPropertyBuilder pojopropertybuilder = (POJOPropertyBuilder)map.get(s);
                if (pojopropertybuilder == null)
                    map.put(s, pojopropertybuilder1);
                else
                    pojopropertybuilder.addAll(pojopropertybuilder1);
                _updateCreatorProperty(pojopropertybuilder1, _creatorProperties);
            }
        }
    }

    protected void _renameUsing(Map map, PropertyNamingStrategy propertynamingstrategy) {
        POJOPropertyBuilder apojopropertybuilder[] = (POJOPropertyBuilder[])map.values().toArray(new POJOPropertyBuilder[map.size()]);
        map.clear();
        int j = apojopropertybuilder.length;
        int i = 0;
        while (i < j)  {
            Object obj;
            Object obj1;
            Object obj2;
            PropertyName propertyname;
label0:
            {
                obj1 = apojopropertybuilder[i];
                propertyname = ((POJOPropertyBuilder) (obj1)).getFullName();
                obj2 = null;
                if (((POJOPropertyBuilder) (obj1)).isExplicitlyNamed()) {
                    obj = obj2;
                    if (!_config.isEnabled(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING))
                        break label0;
                }
                if (_forSerialization) {
                    if (((POJOPropertyBuilder) (obj1)).hasGetter()) {
                        obj = propertynamingstrategy.nameForGetterMethod(_config, ((POJOPropertyBuilder) (obj1)).getGetter(), propertyname.getSimpleName());
                    } else {
                        obj = obj2;
                        if (((POJOPropertyBuilder) (obj1)).hasField())
                            obj = propertynamingstrategy.nameForField(_config, ((POJOPropertyBuilder) (obj1)).getField(), propertyname.getSimpleName());
                    }
                } else
                if (((POJOPropertyBuilder) (obj1)).hasSetter())
                    obj = propertynamingstrategy.nameForSetterMethod(_config, ((POJOPropertyBuilder) (obj1)).getSetter(), propertyname.getSimpleName());
                else
                if (((POJOPropertyBuilder) (obj1)).hasConstructorParameter())
                    obj = propertynamingstrategy.nameForConstructorParameter(_config, ((POJOPropertyBuilder) (obj1)).getConstructorParameter(), propertyname.getSimpleName());
                else
                if (((POJOPropertyBuilder) (obj1)).hasField()) {
                    obj = propertynamingstrategy.nameForField(_config, ((POJOPropertyBuilder) (obj1)).getField(), propertyname.getSimpleName());
                } else {
                    obj = obj2;
                    if (((POJOPropertyBuilder) (obj1)).hasGetter())
                        obj = propertynamingstrategy.nameForGetterMethod(_config, ((POJOPropertyBuilder) (obj1)).getGetter(), propertyname.getSimpleName());
                }
            }
            if (obj != null && !propertyname.hasSimpleName(((String) (obj)))) {
                obj2 = ((POJOPropertyBuilder) (obj1)).withSimpleName(((String) (obj)));
                obj1 = obj;
                obj = obj2;
            } else {
                obj2 = propertyname.getSimpleName();
                obj = obj1;
                obj1 = obj2;
            }
            obj2 = (POJOPropertyBuilder)map.get(obj1);
            if (obj2 == null)
                map.put(obj1, obj);
            else
                ((POJOPropertyBuilder) (obj2)).addAll(((POJOPropertyBuilder) (obj)));
            _updateCreatorProperty(((POJOPropertyBuilder) (obj)), _creatorProperties);
            i++;
        }
    }

    protected void _renameWithWrappers(Map map) {
        Iterator iterator = map.entrySet().iterator();
        LinkedList linkedlist = null;
        do {
            if (!iterator.hasNext())
                break;
            POJOPropertyBuilder pojopropertybuilder2 = (POJOPropertyBuilder)((java.util.Map.Entry)iterator.next()).getValue();
            AnnotatedMember annotatedmember = pojopropertybuilder2.getPrimaryMember();
            if (annotatedmember != null) {
                PropertyName propertyname = _annotationIntrospector.findWrapperName(annotatedmember);
                if (propertyname != null && propertyname.hasSimpleName() && !propertyname.equals(pojopropertybuilder2.getFullName())) {
                    LinkedList linkedlist1 = linkedlist;
                    if (linkedlist == null)
                        linkedlist1 = new LinkedList();
                    linkedlist1.add(pojopropertybuilder2.withName(propertyname));
                    iterator.remove();
                    linkedlist = linkedlist1;
                }
            }
        } while (true);
        if (linkedlist != null) {
            for (Iterator iterator1 = linkedlist.iterator(); iterator1.hasNext();) {
                POJOPropertyBuilder pojopropertybuilder = (POJOPropertyBuilder)iterator1.next();
                String s = pojopropertybuilder.getName();
                POJOPropertyBuilder pojopropertybuilder1 = (POJOPropertyBuilder)map.get(s);
                if (pojopropertybuilder1 == null)
                    map.put(s, pojopropertybuilder);
                else
                    pojopropertybuilder1.addAll(pojopropertybuilder);
            }

        }
    }

    protected void _sortProperties(Map map) {
        boolean flag;
        Object obj1;
        obj1 = _annotationIntrospector;
        Boolean boolean1;
        if (obj1 == null)
            boolean1 = null;
        else
            boolean1 = ((AnnotationIntrospector) (obj1)).findSerializationSortAlphabetically(_classDef);
        if (boolean1 == null)
            flag = _config.shouldSortPropertiesAlphabetically();
        else
            flag = boolean1.booleanValue();
        if (obj1 == null)
            obj1 = null;
        else
            obj1 = ((AnnotationIntrospector) (obj1)).findSerializationPropertyOrder(_classDef);
        if (flag || _creatorProperties != null || obj1 != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        Object obj;
        LinkedHashMap linkedhashmap;
        int i = map.size();
        POJOPropertyBuilder pojopropertybuilder1;
        Iterator iterator2;
        if (flag)
            obj = new TreeMap();
        else
            obj = new LinkedHashMap(i + i);
        for (iterator2 = map.values().iterator(); iterator2.hasNext(); ((Map) (obj)).put(pojopropertybuilder1.getName(), pojopropertybuilder1))
            pojopropertybuilder1 = (POJOPropertyBuilder)iterator2.next();

        linkedhashmap = new LinkedHashMap(i + i);
        if (obj1 == null) goto _L4; else goto _L3
_L3:
        int j;
        int k;
        k = obj1.length;
        j = 0;
_L6:
        if (j >= k) goto _L4; else goto _L5
_L5:
        POJOPropertyBuilder pojopropertybuilder3;
        String s1;
        s1 = obj1[j];
        pojopropertybuilder3 = (POJOPropertyBuilder)((Map) (obj)).get(s1);
        if (pojopropertybuilder3 != null)
            break MISSING_BLOCK_LABEL_475;
        Iterator iterator3 = map.values().iterator();
        POJOPropertyBuilder pojopropertybuilder2;
        do {
            if (!iterator3.hasNext())
                break MISSING_BLOCK_LABEL_475;
            pojopropertybuilder2 = (POJOPropertyBuilder)iterator3.next();
        } while (!s1.equals(pojopropertybuilder2.getInternalName()));
        s1 = pojopropertybuilder2.getName();
        pojopropertybuilder3 = pojopropertybuilder2;
_L7:
        if (pojopropertybuilder3 != null)
            linkedhashmap.put(s1, pojopropertybuilder3);
        j++;
          goto _L6
_L4:
        if (_creatorProperties != null) {
            Object obj2;
            Iterator iterator1;
            if (flag) {
                TreeMap treemap = new TreeMap();
                POJOPropertyBuilder pojopropertybuilder;
                for (Iterator iterator = _creatorProperties.iterator(); iterator.hasNext(); treemap.put(pojopropertybuilder.getName(), pojopropertybuilder))
                    pojopropertybuilder = (POJOPropertyBuilder)iterator.next();

                obj2 = treemap.values();
            } else {
                obj2 = _creatorProperties;
            }
            for (iterator1 = ((Collection) (obj2)).iterator(); iterator1.hasNext(); linkedhashmap.put(((POJOPropertyBuilder) (obj2)).getName(), obj2))
                obj2 = (POJOPropertyBuilder)iterator1.next();

        }
        linkedhashmap.putAll(((Map) (obj)));
        map.clear();
        map.putAll(linkedhashmap);
          goto _L1
        String s = s1;
        s1 = s;
          goto _L7
    }

    protected void _updateCreatorProperty(POJOPropertyBuilder pojopropertybuilder, List list) {
        if (list == null) goto _L2; else goto _L1
_L1:
        int i;
        int j;
        j = list.size();
        i = 0;
_L7:
        if (i >= j) goto _L2; else goto _L3
_L3:
        if (!((POJOPropertyBuilder)list.get(i)).getInternalName().equals(pojopropertybuilder.getInternalName())) goto _L5; else goto _L4
_L4:
        list.set(i, pojopropertybuilder);
_L2:
        return;
_L5:
        i++;
        if (true) goto _L7; else goto _L6
_L6:
    }

    public POJOPropertiesCollector collect() {
        return this;
    }

    protected void collectAll() {
        LinkedHashMap linkedhashmap = new LinkedHashMap();
        _addFields(linkedhashmap);
        _addMethods(linkedhashmap);
        _addCreators(linkedhashmap);
        _addInjectables(linkedhashmap);
        _removeUnwantedProperties(linkedhashmap);
        for (Iterator iterator = linkedhashmap.values().iterator(); iterator.hasNext(); ((POJOPropertyBuilder)iterator.next()).mergeAnnotations(_forSerialization));
        _removeUnwantedAccessor(linkedhashmap);
        _renameProperties(linkedhashmap);
        PropertyNamingStrategy propertynamingstrategy = _findNamingStrategy();
        if (propertynamingstrategy != null)
            _renameUsing(linkedhashmap, propertynamingstrategy);
        for (Iterator iterator1 = linkedhashmap.values().iterator(); iterator1.hasNext(); ((POJOPropertyBuilder)iterator1.next()).trimByVisibility());
        if (_config.isEnabled(MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME))
            _renameWithWrappers(linkedhashmap);
        _sortProperties(linkedhashmap);
        _properties = linkedhashmap;
        _collected = true;
    }

    public Class findPOJOBuilderClass() {
        return _annotationIntrospector.findPOJOBuilder(_classDef);
    }

    public AnnotationIntrospector getAnnotationIntrospector() {
        return _annotationIntrospector;
    }

    public AnnotatedMember getAnyGetter() {
        if (!_collected)
            collectAll();
        AnnotatedMember annotatedmember;
        if (_anyGetters != null) {
            if (_anyGetters.size() > 1)
                reportProblem((new StringBuilder()).append("Multiple 'any-getters' defined (").append(_anyGetters.get(0)).append(" vs ").append(_anyGetters.get(1)).append(")").toString());
            annotatedmember = (AnnotatedMember)_anyGetters.getFirst();
        } else {
            annotatedmember = null;
        }
        return annotatedmember;
    }

    public AnnotatedMethod getAnySetterMethod() {
        if (!_collected)
            collectAll();
        AnnotatedMethod annotatedmethod;
        if (_anySetters != null) {
            if (_anySetters.size() > 1)
                reportProblem((new StringBuilder()).append("Multiple 'any-setters' defined (").append(_anySetters.get(0)).append(" vs ").append(_anySetters.get(1)).append(")").toString());
            annotatedmethod = (AnnotatedMethod)_anySetters.getFirst();
        } else {
            annotatedmethod = null;
        }
        return annotatedmethod;
    }

    public AnnotatedClass getClassDef() {
        return _classDef;
    }

    public MapperConfig getConfig() {
        return _config;
    }

    public Set getIgnoredPropertyNames() {
        return _ignoredPropertyNames;
    }

    public Map getInjectables() {
        if (!_collected)
            collectAll();
        return _injectables;
    }

    public AnnotatedMethod getJsonValueMethod() {
        if (!_collected)
            collectAll();
        AnnotatedMethod annotatedmethod;
        if (_jsonValueGetters != null) {
            if (_jsonValueGetters.size() > 1)
                reportProblem((new StringBuilder()).append("Multiple value properties defined (").append(_jsonValueGetters.get(0)).append(" vs ").append(_jsonValueGetters.get(1)).append(")").toString());
            annotatedmethod = (AnnotatedMethod)_jsonValueGetters.get(0);
        } else {
            annotatedmethod = null;
        }
        return annotatedmethod;
    }

    public ObjectIdInfo getObjectIdInfo() {
        if (_annotationIntrospector != null) goto _L2; else goto _L1
_L1:
        ObjectIdInfo objectidinfo = null;
_L4:
        return objectidinfo;
_L2:
        ObjectIdInfo objectidinfo1 = _annotationIntrospector.findObjectIdInfo(_classDef);
        objectidinfo = objectidinfo1;
        if (objectidinfo1 != null)
            objectidinfo = _annotationIntrospector.findObjectReferenceInfo(_classDef, objectidinfo1);
        if (true) goto _L4; else goto _L3
_L3:
    }

    public List getProperties() {
        return new ArrayList(getPropertyMap().values());
    }

    protected Map getPropertyMap() {
        if (!_collected)
            collectAll();
        return _properties;
    }

    public JavaType getType() {
        return _type;
    }

    protected void reportProblem(String s) {
        throw new IllegalArgumentException((new StringBuilder()).append("Problem with definition of ").append(_classDef).append(": ").append(s).toString());
    }
}
