// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.introspect;

import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.util.ClassUtil;
import java.io.Serializable;
import java.lang.reflect.*;

// Referenced classes of package com.fasterxml.jackson.databind.introspect:
//            AnnotatedWithParams, TypeResolutionContext, AnnotationMap, Annotated

public final class AnnotatedConstructor extends AnnotatedWithParams {
    private static final class Serialization
        implements Serializable {

        private static final long serialVersionUID = 1L;
        protected Class args[];
        protected Class clazz;

        public Serialization(Constructor constructor) {
            clazz = constructor.getDeclaringClass();
            args = constructor.getParameterTypes();
        }
    }


    private static final long serialVersionUID = 1L;
    protected final Constructor _constructor;
    protected Serialization _serialization;

    protected AnnotatedConstructor(Serialization serialization) {
        super(null, null, null);
        _constructor = null;
        _serialization = serialization;
    }

    public AnnotatedConstructor(TypeResolutionContext typeresolutioncontext, Constructor constructor, AnnotationMap annotationmap, AnnotationMap aannotationmap[]) {
        super(typeresolutioncontext, annotationmap, aannotationmap);
        if (constructor == null) {
            throw new IllegalArgumentException("Null constructor not allowed");
        } else {
            _constructor = constructor;
            return;
        }
    }

    public final Object call() {
        return _constructor.newInstance(new Object[0]);
    }

    public final Object call(Object aobj[]) {
        return _constructor.newInstance(aobj);
    }

    public final Object call1(Object obj) {
        return _constructor.newInstance(new Object[] {
            obj
        });
    }

    public boolean equals(Object obj) {
        boolean flag = true;
        if (obj != this) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        if (obj == null || obj.getClass() != getClass())
            flag = false;
        else
        if (((AnnotatedConstructor)obj)._constructor != _constructor)
            flag = false;
        if (true) goto _L1; else goto _L3
_L3:
    }

    public volatile AnnotatedElement getAnnotated() {
        return getAnnotated();
    }

    public Constructor getAnnotated() {
        return _constructor;
    }

    public Class getDeclaringClass() {
        return _constructor.getDeclaringClass();
    }

    public Type getGenericParameterType(int i) {
        Type type = _constructor.getGenericParameterTypes();
        if (i >= type.length)
            type = null;
        else
            type = type[i];
        return type;
    }

    public Member getMember() {
        return _constructor;
    }

    public int getModifiers() {
        return _constructor.getModifiers();
    }

    public String getName() {
        return _constructor.getName();
    }

    public int getParameterCount() {
        return _constructor.getParameterTypes().length;
    }

    public JavaType getParameterType(int i) {
        JavaType javatype = _constructor.getGenericParameterTypes();
        if (i >= javatype.length)
            javatype = null;
        else
            javatype = _typeContext.resolveType(javatype[i]);
        return javatype;
    }

    public Class getRawParameterType(int i) {
        Class class1 = _constructor.getParameterTypes();
        if (i >= class1.length)
            class1 = null;
        else
            class1 = class1[i];
        return class1;
    }

    public Class getRawType() {
        return _constructor.getDeclaringClass();
    }

    public JavaType getType() {
        return _typeContext.resolveType(getRawType());
    }

    public Object getValue(Object obj) {
        throw new UnsupportedOperationException((new StringBuilder()).append("Cannot call getValue() on constructor of ").append(getDeclaringClass().getName()).toString());
    }

    public int hashCode() {
        return _constructor.getName().hashCode();
    }

    Object readResolve() {
        Class class1 = _serialization.clazz;
        Object obj;
        try {
            obj = class1.getDeclaredConstructor(_serialization.args);
            if (!((Constructor) (obj)).isAccessible())
                ClassUtil.checkAndFixAccess(((Member) (obj)), false);
            obj = new AnnotatedConstructor(null, ((Constructor) (obj)), null, null);
        }
        catch (Exception exception) {
            throw new IllegalArgumentException((new StringBuilder()).append("Could not find constructor with ").append(_serialization.args.length).append(" args from Class '").append(class1.getName()).toString());
        }
        return obj;
    }

    public void setValue(Object obj, Object obj1) {
        throw new UnsupportedOperationException((new StringBuilder()).append("Cannot call setValue() on constructor of ").append(getDeclaringClass().getName()).toString());
    }

    public String toString() {
        return (new StringBuilder()).append("[constructor for ").append(getName()).append(", annotations: ").append(_annotations).append("]").toString();
    }

    public volatile Annotated withAnnotations(AnnotationMap annotationmap) {
        return withAnnotations(annotationmap);
    }

    public AnnotatedConstructor withAnnotations(AnnotationMap annotationmap) {
        return new AnnotatedConstructor(_typeContext, _constructor, annotationmap, _paramAnnotations);
    }

    Object writeReplace() {
        return new AnnotatedConstructor(new Serialization(_constructor));
    }
}
