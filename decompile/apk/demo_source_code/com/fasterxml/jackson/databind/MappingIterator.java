// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind;

import com.fasterxml.jackson.core.*;
import java.io.Closeable;
import java.io.IOException;
import java.util.*;

// Referenced classes of package com.fasterxml.jackson.databind:
//            RuntimeJsonMappingException, JsonMappingException, JsonDeserializer, DeserializationContext, 
//            JavaType

public class MappingIterator
    implements Closeable, Iterator {

    protected static final MappingIterator EMPTY_ITERATOR = new MappingIterator(null, null, null, null, false, null);
    protected static final int STATE_CLOSED = 0;
    protected static final int STATE_HAS_VALUE = 3;
    protected static final int STATE_MAY_HAVE_VALUE = 2;
    protected static final int STATE_NEED_RESYNC = 1;
    protected final boolean _closeParser;
    protected final DeserializationContext _context;
    protected final JsonDeserializer _deserializer;
    protected final JsonParser _parser;
    protected final JsonStreamContext _seqContext;
    protected int _state;
    protected final JavaType _type;
    protected final Object _updatedValue;

    protected MappingIterator(JavaType javatype, JsonParser jsonparser, DeserializationContext deserializationcontext, JsonDeserializer jsondeserializer, boolean flag, Object obj) {
        _type = javatype;
        _parser = jsonparser;
        _context = deserializationcontext;
        _deserializer = jsondeserializer;
        _closeParser = flag;
        if (obj == null)
            _updatedValue = null;
        else
            _updatedValue = obj;
        if (jsonparser != null) goto _L2; else goto _L1
_L1:
        _seqContext = null;
        _state = 0;
_L4:
        return;
_L2:
        deserializationcontext = jsonparser.getParsingContext();
        if (!flag || !jsonparser.isExpectedStartArrayToken())
            break; /* Loop/switch isn't completed */
        jsonparser.clearCurrentToken();
        javatype = deserializationcontext;
_L7:
        _seqContext = javatype;
        _state = 2;
        if (true) goto _L4; else goto _L3
_L3:
        jsonparser = jsonparser.getCurrentToken();
        if (jsonparser == JsonToken.START_OBJECT) goto _L6; else goto _L5
_L5:
        javatype = deserializationcontext;
        if (jsonparser != JsonToken.START_ARRAY) goto _L7; else goto _L6
_L6:
        javatype = deserializationcontext.getParent();
          goto _L7
    }

    protected static MappingIterator emptyIterator() {
        return EMPTY_ITERATOR;
    }

    protected Object _handleIOException(IOException ioexception) {
        throw new RuntimeException(ioexception.getMessage(), ioexception);
    }

    protected Object _handleMappingException(JsonMappingException jsonmappingexception) {
        throw new RuntimeJsonMappingException(jsonmappingexception.getMessage(), jsonmappingexception);
    }

    protected void _resync() {
        JsonParser jsonparser = _parser;
        if (jsonparser.getParsingContext() != _seqContext) goto _L2; else goto _L1
_L1:
        return;
_L6:
        JsonToken jsontoken;
        if (jsontoken != JsonToken.START_ARRAY && jsontoken != JsonToken.START_OBJECT) goto _L4; else goto _L3
_L3:
        jsonparser.skipChildren();
_L2:
        jsontoken = jsonparser.nextToken();
        if (jsontoken != JsonToken.END_ARRAY && jsontoken != JsonToken.END_OBJECT) goto _L6; else goto _L5
_L5:
        if (jsonparser.getParsingContext() != _seqContext) goto _L2; else goto _L7
_L7:
        jsonparser.clearCurrentToken();
        break; /* Loop/switch isn't completed */
_L4:
        if (jsontoken != null) goto _L2; else goto _L1
    }

    protected Object _throwNoSuchElement() {
        throw new NoSuchElementException();
    }

    public void close() {
        if (_state != 0) {
            _state = 0;
            if (_parser != null)
                _parser.close();
        }
    }

    public JsonLocation getCurrentLocation() {
        return _parser.getCurrentLocation();
    }

    public JsonParser getParser() {
        return _parser;
    }

    public FormatSchema getParserSchema() {
        return _parser.getSchema();
    }

    public boolean hasNext() {
        boolean flag;
        try {
            flag = hasNextValue();
        }
        catch (JsonMappingException jsonmappingexception) {
            flag = ((Boolean)_handleMappingException(jsonmappingexception)).booleanValue();
        }
        catch (IOException ioexception) {
            flag = ((Boolean)_handleIOException(ioexception)).booleanValue();
        }
        return flag;
    }

    public boolean hasNextValue() {
        boolean flag;
        boolean flag1;
        flag1 = false;
        flag = flag1;
        _state;
        JVM INSTR tableswitch 0 2: default 36
    //                   0 38
    //                   1 40
    //                   2 44;
           goto _L1 _L2 _L3 _L4
_L2:
        break MISSING_BLOCK_LABEL_38;
_L1:
        flag = true;
_L6:
        return flag;
_L3:
        _resync();
_L4:
        if (_parser.getCurrentToken() == null) {
            JsonToken jsontoken = _parser.nextToken();
            if (jsontoken == null || jsontoken == JsonToken.END_ARRAY) {
                _state = 0;
                flag = flag1;
                if (_closeParser) {
                    flag = flag1;
                    if (_parser != null) {
                        _parser.close();
                        flag = flag1;
                    }
                }
                continue; /* Loop/switch isn't completed */
            }
        }
        _state = 3;
        flag = true;
        if (true) goto _L6; else goto _L5
_L5:
    }

    public Object next() {
        Object obj;
        try {
            obj = nextValue();
        }
        catch (JsonMappingException jsonmappingexception) {
            throw new RuntimeJsonMappingException(jsonmappingexception.getMessage(), jsonmappingexception);
        }
        catch (IOException ioexception) {
            throw new RuntimeException(ioexception.getMessage(), ioexception);
        }
        return obj;
    }

    public Object nextValue() {
        _state;
        JVM INSTR tableswitch 0 2: default 32
    //                   0 69
    //                   1 77
    //                   2 77;
           goto _L1 _L2 _L3 _L3
_L1:
        if (_updatedValue != null) goto _L5; else goto _L4
_L4:
        Object obj = _deserializer.deserialize(_parser, _context);
_L9:
        _state = 2;
        _parser.clearCurrentToken();
_L7:
        return obj;
_L2:
        obj = _throwNoSuchElement();
        continue; /* Loop/switch isn't completed */
_L3:
        if (hasNextValue())
            continue; /* Loop/switch isn't completed */
        obj = _throwNoSuchElement();
        if (true) goto _L7; else goto _L6
_L6:
        continue; /* Loop/switch isn't completed */
_L5:
        _deserializer.deserialize(_parser, _context, _updatedValue);
        obj = _updatedValue;
        if (true) goto _L9; else goto _L8
_L8:
        Exception exception;
        exception;
        _state = 1;
        _parser.clearCurrentToken();
        throw exception;
        if (true) goto _L1; else goto _L10
_L10:
    }

    public Collection readAll(Collection collection) {
        for (; hasNextValue(); collection.add(nextValue()));
        return collection;
    }

    public List readAll() {
        return readAll(((List) (new ArrayList())));
    }

    public List readAll(List list) {
        for (; hasNextValue(); list.add(nextValue()));
        return list;
    }

    public void remove() {
        throw new UnsupportedOperationException();
    }

}
