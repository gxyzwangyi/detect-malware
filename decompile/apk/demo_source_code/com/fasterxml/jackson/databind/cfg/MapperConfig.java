// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.cfg;

import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.introspect.*;
import com.fasterxml.jackson.databind.jsontype.*;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.ClassUtil;
import java.io.Serializable;
import java.text.DateFormat;
import java.util.Locale;
import java.util.TimeZone;

// Referenced classes of package com.fasterxml.jackson.databind.cfg:
//            ConfigFeature, BaseSettings, HandlerInstantiator, ContextAttributes

public abstract class MapperConfig
    implements com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, Serializable {

    protected static final com.fasterxml.jackson.annotation.JsonFormat.Value EMPTY_FORMAT = com.fasterxml.jackson.annotation.JsonFormat.Value.empty();
    protected static final com.fasterxml.jackson.annotation.JsonInclude.Value EMPTY_INCLUDE = com.fasterxml.jackson.annotation.JsonInclude.Value.empty();
    private static final long serialVersionUID = 1L;
    protected final BaseSettings _base;
    protected final int _mapperFeatures;

    protected MapperConfig(BaseSettings basesettings, int i) {
        _base = basesettings;
        _mapperFeatures = i;
    }

    protected MapperConfig(MapperConfig mapperconfig) {
        _base = mapperconfig._base;
        _mapperFeatures = mapperconfig._mapperFeatures;
    }

    protected MapperConfig(MapperConfig mapperconfig, int i) {
        _base = mapperconfig._base;
        _mapperFeatures = i;
    }

    protected MapperConfig(MapperConfig mapperconfig, BaseSettings basesettings) {
        _base = basesettings;
        _mapperFeatures = mapperconfig._mapperFeatures;
    }

    public static int collectFeatureDefaults(Class class1) {
        Enum aenum[] = (Enum[])class1.getEnumConstants();
        int k = aenum.length;
        int j = 0;
        int i = 0;
        for (; j < k; j++) {
            class1 = aenum[j];
            if (((ConfigFeature)class1).enabledByDefault())
                i = ((ConfigFeature)class1).getMask() | i;
        }

        return i;
    }

    public final boolean canOverrideAccessModifiers() {
        return isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS);
    }

    public SerializableString compileString(String s) {
        return new SerializedString(s);
    }

    public JavaType constructSpecializedType(JavaType javatype, Class class1) {
        return getTypeFactory().constructSpecializedType(javatype, class1);
    }

    public final JavaType constructType(TypeReference typereference) {
        return getTypeFactory().constructType(typereference.getType());
    }

    public final JavaType constructType(Class class1) {
        return getTypeFactory().constructType(class1);
    }

    public abstract PropertyName findRootName(JavaType javatype);

    public abstract PropertyName findRootName(Class class1);

    public abstract Class getActiveView();

    public AnnotationIntrospector getAnnotationIntrospector() {
        return _base.getAnnotationIntrospector();
    }

    public abstract ContextAttributes getAttributes();

    public Base64Variant getBase64Variant() {
        return _base.getBase64Variant();
    }

    public ClassIntrospector getClassIntrospector() {
        return _base.getClassIntrospector();
    }

    public final DateFormat getDateFormat() {
        return _base.getDateFormat();
    }

    public abstract com.fasterxml.jackson.annotation.JsonFormat.Value getDefaultPropertyFormat(Class class1);

    public abstract com.fasterxml.jackson.annotation.JsonInclude.Value getDefaultPropertyInclusion();

    public abstract com.fasterxml.jackson.annotation.JsonInclude.Value getDefaultPropertyInclusion(Class class1);

    public final TypeResolverBuilder getDefaultTyper(JavaType javatype) {
        return _base.getTypeResolverBuilder();
    }

    public VisibilityChecker getDefaultVisibilityChecker() {
        return _base.getVisibilityChecker();
    }

    public final HandlerInstantiator getHandlerInstantiator() {
        return _base.getHandlerInstantiator();
    }

    public final Locale getLocale() {
        return _base.getLocale();
    }

    public final PropertyNamingStrategy getPropertyNamingStrategy() {
        return _base.getPropertyNamingStrategy();
    }

    public abstract SubtypeResolver getSubtypeResolver();

    public final TimeZone getTimeZone() {
        return _base.getTimeZone();
    }

    public final TypeFactory getTypeFactory() {
        return _base.getTypeFactory();
    }

    public final boolean hasMapperFeatures(int i) {
        boolean flag;
        if ((_mapperFeatures & i) == i)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public abstract BeanDescription introspectClassAnnotations(JavaType javatype);

    public BeanDescription introspectClassAnnotations(Class class1) {
        return introspectClassAnnotations(constructType(class1));
    }

    public abstract BeanDescription introspectDirectClassAnnotations(JavaType javatype);

    public BeanDescription introspectDirectClassAnnotations(Class class1) {
        return introspectDirectClassAnnotations(constructType(class1));
    }

    public final boolean isAnnotationProcessingEnabled() {
        return isEnabled(MapperFeature.USE_ANNOTATIONS);
    }

    public final boolean isEnabled(MapperFeature mapperfeature) {
        boolean flag;
        if ((_mapperFeatures & mapperfeature.getMask()) != 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public final boolean shouldSortPropertiesAlphabetically() {
        return isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY);
    }

    public TypeIdResolver typeIdResolverInstance(Annotated annotated, Class class1) {
        HandlerInstantiator handlerinstantiator = getHandlerInstantiator();
        if (handlerinstantiator == null) goto _L2; else goto _L1
_L1:
        annotated = handlerinstantiator.typeIdResolverInstance(this, annotated, class1);
        if (annotated == null) goto _L2; else goto _L3
_L3:
        return annotated;
_L2:
        annotated = (TypeIdResolver)ClassUtil.createInstance(class1, canOverrideAccessModifiers());
        if (true) goto _L3; else goto _L4
_L4:
    }

    public TypeResolverBuilder typeResolverBuilderInstance(Annotated annotated, Class class1) {
        HandlerInstantiator handlerinstantiator = getHandlerInstantiator();
        if (handlerinstantiator == null) goto _L2; else goto _L1
_L1:
        annotated = handlerinstantiator.typeResolverBuilderInstance(this, annotated, class1);
        if (annotated == null) goto _L2; else goto _L3
_L3:
        return annotated;
_L2:
        annotated = (TypeResolverBuilder)ClassUtil.createInstance(class1, canOverrideAccessModifiers());
        if (true) goto _L3; else goto _L4
_L4:
    }

    public abstract boolean useRootWrapping();

    public abstract MapperConfig with(MapperFeature mapperfeature, boolean flag);

    public transient abstract MapperConfig with(MapperFeature amapperfeature[]);

    public transient abstract MapperConfig without(MapperFeature amapperfeature[]);

}
