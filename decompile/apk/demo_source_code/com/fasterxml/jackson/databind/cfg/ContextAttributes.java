// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.cfg;

import java.io.Serializable;
import java.util.*;

public abstract class ContextAttributes {
    public static class Impl extends ContextAttributes
        implements Serializable {

        protected static final Impl EMPTY = new Impl(Collections.emptyMap());
        protected static final Object NULL_SURROGATE = new Object();
        private static final long serialVersionUID = 1L;
        protected transient Map _nonShared;
        protected final Map _shared;

        private Map _copy(Map map) {
            return new HashMap(map);
        }

        public static ContextAttributes getEmpty() {
            return EMPTY;
        }

        public Object getAttribute(Object obj) {
            if (_nonShared == null) goto _L2; else goto _L1
_L1:
            Object obj1 = _nonShared.get(obj);
            if (obj1 == null) goto _L2; else goto _L3
_L3:
            obj = obj1;
            if (obj1 == NULL_SURROGATE)
                obj = null;
_L5:
            return obj;
_L2:
            obj = _shared.get(obj);
            if (true) goto _L5; else goto _L4
_L4:
        }

        protected ContextAttributes nonSharedInstance(Object obj, Object obj1) {
            HashMap hashmap = new HashMap();
            Object obj2 = obj1;
            if (obj1 == null)
                obj2 = NULL_SURROGATE;
            hashmap.put(obj, obj2);
            return new Impl(_shared, hashmap);
        }

        public ContextAttributes withPerCallAttribute(Object obj, Object obj1) {
label0:
            {
                {
                    Object obj2 = obj1;
                    if (obj1 == null) {
                        if (!_shared.containsKey(obj))
                            break label0;
                        obj2 = NULL_SURROGATE;
                    }
                    if (_nonShared == null) {
                        obj1 = nonSharedInstance(obj, obj2);
                    } else {
                        _nonShared.put(obj, obj2);
                        obj1 = this;
                    }
                }
                return ((ContextAttributes) (obj1));
            }
            obj1 = this;
            if (_nonShared != null) {
                obj1 = this;
                if (_nonShared.containsKey(obj)) {
                    _nonShared.remove(obj);
                    obj1 = this;
                }
            }
            if (false)
                ;
            else
                break MISSING_BLOCK_LABEL_37;
        }

        public ContextAttributes withSharedAttribute(Object obj, Object obj1) {
            Object obj2;
            if (this == EMPTY)
                obj2 = new HashMap(8);
            else
                obj2 = _copy(_shared);
            ((Map) (obj2)).put(obj, obj1);
            return new Impl(((Map) (obj2)));
        }

        public ContextAttributes withSharedAttributes(Map map) {
            return new Impl(map);
        }

        public ContextAttributes withoutSharedAttribute(Object obj) {
            if (!_shared.isEmpty()) goto _L2; else goto _L1
_L1:
            Object obj1 = this;
_L4:
            return ((ContextAttributes) (obj1));
_L2:
            obj1 = this;
            if (_shared.containsKey(obj))
                if (_shared.size() == 1) {
                    obj1 = EMPTY;
                } else {
                    obj1 = _copy(_shared);
                    ((Map) (obj1)).remove(obj);
                    obj1 = new Impl(((Map) (obj1)));
                }
            if (true) goto _L4; else goto _L3
_L3:
        }


        protected Impl(Map map) {
            _shared = map;
            _nonShared = null;
        }

        protected Impl(Map map, Map map1) {
            _shared = map;
            _nonShared = map1;
        }
    }


    public ContextAttributes() {
    }

    public static ContextAttributes getEmpty() {
        return Impl.getEmpty();
    }

    public abstract Object getAttribute(Object obj);

    public abstract ContextAttributes withPerCallAttribute(Object obj, Object obj1);

    public abstract ContextAttributes withSharedAttribute(Object obj, Object obj1);

    public abstract ContextAttributes withSharedAttributes(Map map);

    public abstract ContextAttributes withoutSharedAttribute(Object obj);
}
