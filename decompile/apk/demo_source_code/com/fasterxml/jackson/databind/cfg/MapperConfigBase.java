// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind.cfg;

import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.introspect.*;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.Serializable;
import java.text.DateFormat;
import java.util.*;

// Referenced classes of package com.fasterxml.jackson.databind.cfg:
//            MapperConfig, ContextAttributes, BaseSettings, HandlerInstantiator

public abstract class MapperConfigBase extends MapperConfig
    implements Serializable {

    private static final int DEFAULT_MAPPER_FEATURES = collectFeatureDefaults(com/fasterxml/jackson/databind/MapperFeature);
    protected final ContextAttributes _attributes;
    protected final SimpleMixInResolver _mixIns;
    protected final PropertyName _rootName;
    protected final RootNameLookup _rootNames;
    protected final SubtypeResolver _subtypeResolver;
    protected final Class _view;

    protected MapperConfigBase(BaseSettings basesettings, SubtypeResolver subtyperesolver, SimpleMixInResolver simplemixinresolver, RootNameLookup rootnamelookup) {
        super(basesettings, DEFAULT_MAPPER_FEATURES);
        _mixIns = simplemixinresolver;
        _subtypeResolver = subtyperesolver;
        _rootNames = rootnamelookup;
        _rootName = null;
        _view = null;
        _attributes = ContextAttributes.getEmpty();
    }

    protected MapperConfigBase(MapperConfigBase mapperconfigbase) {
        super(mapperconfigbase);
        _mixIns = mapperconfigbase._mixIns;
        _subtypeResolver = mapperconfigbase._subtypeResolver;
        _rootNames = mapperconfigbase._rootNames;
        _rootName = mapperconfigbase._rootName;
        _view = mapperconfigbase._view;
        _attributes = mapperconfigbase._attributes;
    }

    protected MapperConfigBase(MapperConfigBase mapperconfigbase, int i) {
        super(mapperconfigbase, i);
        _mixIns = mapperconfigbase._mixIns;
        _subtypeResolver = mapperconfigbase._subtypeResolver;
        _rootNames = mapperconfigbase._rootNames;
        _rootName = mapperconfigbase._rootName;
        _view = mapperconfigbase._view;
        _attributes = mapperconfigbase._attributes;
    }

    protected MapperConfigBase(MapperConfigBase mapperconfigbase, PropertyName propertyname) {
        super(mapperconfigbase);
        _mixIns = mapperconfigbase._mixIns;
        _subtypeResolver = mapperconfigbase._subtypeResolver;
        _rootNames = mapperconfigbase._rootNames;
        _rootName = propertyname;
        _view = mapperconfigbase._view;
        _attributes = mapperconfigbase._attributes;
    }

    protected MapperConfigBase(MapperConfigBase mapperconfigbase, BaseSettings basesettings) {
        super(mapperconfigbase, basesettings);
        _mixIns = mapperconfigbase._mixIns;
        _subtypeResolver = mapperconfigbase._subtypeResolver;
        _rootNames = mapperconfigbase._rootNames;
        _rootName = mapperconfigbase._rootName;
        _view = mapperconfigbase._view;
        _attributes = mapperconfigbase._attributes;
    }

    protected MapperConfigBase(MapperConfigBase mapperconfigbase, ContextAttributes contextattributes) {
        super(mapperconfigbase);
        _mixIns = mapperconfigbase._mixIns;
        _subtypeResolver = mapperconfigbase._subtypeResolver;
        _rootNames = mapperconfigbase._rootNames;
        _rootName = mapperconfigbase._rootName;
        _view = mapperconfigbase._view;
        _attributes = contextattributes;
    }

    protected MapperConfigBase(MapperConfigBase mapperconfigbase, SimpleMixInResolver simplemixinresolver) {
        super(mapperconfigbase);
        _mixIns = simplemixinresolver;
        _subtypeResolver = mapperconfigbase._subtypeResolver;
        _rootNames = mapperconfigbase._rootNames;
        _rootName = mapperconfigbase._rootName;
        _view = mapperconfigbase._view;
        _attributes = mapperconfigbase._attributes;
    }

    protected MapperConfigBase(MapperConfigBase mapperconfigbase, SimpleMixInResolver simplemixinresolver, RootNameLookup rootnamelookup) {
        super(mapperconfigbase);
        _mixIns = simplemixinresolver;
        _subtypeResolver = mapperconfigbase._subtypeResolver;
        _rootNames = rootnamelookup;
        _rootName = mapperconfigbase._rootName;
        _view = mapperconfigbase._view;
        _attributes = mapperconfigbase._attributes;
    }

    protected MapperConfigBase(MapperConfigBase mapperconfigbase, SubtypeResolver subtyperesolver) {
        super(mapperconfigbase);
        _mixIns = mapperconfigbase._mixIns;
        _subtypeResolver = subtyperesolver;
        _rootNames = mapperconfigbase._rootNames;
        _rootName = mapperconfigbase._rootName;
        _view = mapperconfigbase._view;
        _attributes = mapperconfigbase._attributes;
    }

    protected MapperConfigBase(MapperConfigBase mapperconfigbase, Class class1) {
        super(mapperconfigbase);
        _mixIns = mapperconfigbase._mixIns;
        _subtypeResolver = mapperconfigbase._subtypeResolver;
        _rootNames = mapperconfigbase._rootNames;
        _rootName = mapperconfigbase._rootName;
        _view = class1;
        _attributes = mapperconfigbase._attributes;
    }

    public com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver copy() {
        throw new UnsupportedOperationException();
    }

    public final Class findMixInClassFor(Class class1) {
        return _mixIns.findMixInClassFor(class1);
    }

    public PropertyName findRootName(JavaType javatype) {
        if (_rootName != null)
            javatype = _rootName;
        else
            javatype = _rootNames.findRootName(javatype, this);
        return javatype;
    }

    public PropertyName findRootName(Class class1) {
        if (_rootName != null)
            class1 = _rootName;
        else
            class1 = _rootNames.findRootName(class1, this);
        return class1;
    }

    public final Class getActiveView() {
        return _view;
    }

    public final ContextAttributes getAttributes() {
        return _attributes;
    }

    public final PropertyName getFullRootName() {
        return _rootName;
    }

    public final String getRootName() {
        String s;
        if (_rootName == null)
            s = null;
        else
            s = _rootName.getSimpleName();
        return s;
    }

    public final SubtypeResolver getSubtypeResolver() {
        return _subtypeResolver;
    }

    public final int mixInCount() {
        return _mixIns.localSize();
    }

    public abstract MapperConfigBase with(Base64Variant base64variant);

    public abstract MapperConfigBase with(AnnotationIntrospector annotationintrospector);

    public abstract MapperConfigBase with(PropertyNamingStrategy propertynamingstrategy);

    public abstract MapperConfigBase with(ContextAttributes contextattributes);

    public abstract MapperConfigBase with(HandlerInstantiator handlerinstantiator);

    public abstract MapperConfigBase with(ClassIntrospector classintrospector);

    public abstract MapperConfigBase with(VisibilityChecker visibilitychecker);

    public abstract MapperConfigBase with(SubtypeResolver subtyperesolver);

    public abstract MapperConfigBase with(TypeResolverBuilder typeresolverbuilder);

    public abstract MapperConfigBase with(TypeFactory typefactory);

    public abstract MapperConfigBase with(DateFormat dateformat);

    public abstract MapperConfigBase with(Locale locale);

    public abstract MapperConfigBase with(TimeZone timezone);

    public abstract MapperConfigBase withAppendedAnnotationIntrospector(AnnotationIntrospector annotationintrospector);

    public MapperConfigBase withAttribute(Object obj, Object obj1) {
        return with(getAttributes().withSharedAttribute(obj, obj1));
    }

    public MapperConfigBase withAttributes(Map map) {
        return with(getAttributes().withSharedAttributes(map));
    }

    public abstract MapperConfigBase withInsertedAnnotationIntrospector(AnnotationIntrospector annotationintrospector);

    public abstract MapperConfigBase withRootName(PropertyName propertyname);

    public MapperConfigBase withRootName(String s) {
        if (s == null)
            s = withRootName((PropertyName)null);
        else
            s = withRootName(PropertyName.construct(s));
        return s;
    }

    public abstract MapperConfigBase withView(Class class1);

    public abstract MapperConfigBase withVisibility(PropertyAccessor propertyaccessor, com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility visibility);

    public MapperConfigBase withoutAttribute(Object obj) {
        return with(getAttributes().withoutSharedAttribute(obj));
    }

}
