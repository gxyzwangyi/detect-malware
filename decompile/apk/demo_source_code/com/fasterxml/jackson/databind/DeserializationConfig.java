// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind;

import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfigBase;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.LinkedNode;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.Serializable;
import java.text.DateFormat;
import java.util.Locale;
import java.util.TimeZone;

// Referenced classes of package com.fasterxml.jackson.databind:
//            DeserializationFeature, JavaType, BeanDescription, AnnotationIntrospector, 
//            MapperFeature, PropertyName, PropertyNamingStrategy

public final class DeserializationConfig extends MapperConfigBase
    implements Serializable {

    private static final long serialVersionUID = 1L;
    protected final int _deserFeatures;
    protected final int _formatReadFeatures;
    protected final int _formatReadFeaturesToChange;
    protected final JsonNodeFactory _nodeFactory;
    protected final int _parserFeatures;
    protected final int _parserFeaturesToChange;
    protected final LinkedNode _problemHandlers;

    private DeserializationConfig(DeserializationConfig deserializationconfig, int i, int j, int k, int l, int i1, int j1) {
        super(deserializationconfig, i);
        _deserFeatures = j;
        _nodeFactory = deserializationconfig._nodeFactory;
        _problemHandlers = deserializationconfig._problemHandlers;
        _parserFeatures = k;
        _parserFeaturesToChange = l;
        _formatReadFeatures = i1;
        _formatReadFeaturesToChange = j1;
    }

    private DeserializationConfig(DeserializationConfig deserializationconfig, PropertyName propertyname) {
        super(deserializationconfig, propertyname);
        _deserFeatures = deserializationconfig._deserFeatures;
        _problemHandlers = deserializationconfig._problemHandlers;
        _nodeFactory = deserializationconfig._nodeFactory;
        _parserFeatures = deserializationconfig._parserFeatures;
        _parserFeaturesToChange = deserializationconfig._parserFeaturesToChange;
        _formatReadFeatures = deserializationconfig._formatReadFeatures;
        _formatReadFeaturesToChange = deserializationconfig._formatReadFeaturesToChange;
    }

    private DeserializationConfig(DeserializationConfig deserializationconfig, BaseSettings basesettings) {
        super(deserializationconfig, basesettings);
        _deserFeatures = deserializationconfig._deserFeatures;
        _nodeFactory = deserializationconfig._nodeFactory;
        _problemHandlers = deserializationconfig._problemHandlers;
        _parserFeatures = deserializationconfig._parserFeatures;
        _parserFeaturesToChange = deserializationconfig._parserFeaturesToChange;
        _formatReadFeatures = deserializationconfig._formatReadFeatures;
        _formatReadFeaturesToChange = deserializationconfig._formatReadFeaturesToChange;
    }

    protected DeserializationConfig(DeserializationConfig deserializationconfig, ContextAttributes contextattributes) {
        super(deserializationconfig, contextattributes);
        _deserFeatures = deserializationconfig._deserFeatures;
        _problemHandlers = deserializationconfig._problemHandlers;
        _nodeFactory = deserializationconfig._nodeFactory;
        _parserFeatures = deserializationconfig._parserFeatures;
        _parserFeaturesToChange = deserializationconfig._parserFeaturesToChange;
        _formatReadFeatures = deserializationconfig._formatReadFeatures;
        _formatReadFeaturesToChange = deserializationconfig._formatReadFeaturesToChange;
    }

    protected DeserializationConfig(DeserializationConfig deserializationconfig, SimpleMixInResolver simplemixinresolver) {
        super(deserializationconfig, simplemixinresolver);
        _deserFeatures = deserializationconfig._deserFeatures;
        _problemHandlers = deserializationconfig._problemHandlers;
        _nodeFactory = deserializationconfig._nodeFactory;
        _parserFeatures = deserializationconfig._parserFeatures;
        _parserFeaturesToChange = deserializationconfig._parserFeaturesToChange;
        _formatReadFeatures = deserializationconfig._formatReadFeatures;
        _formatReadFeaturesToChange = deserializationconfig._formatReadFeaturesToChange;
    }

    protected DeserializationConfig(DeserializationConfig deserializationconfig, SimpleMixInResolver simplemixinresolver, RootNameLookup rootnamelookup) {
        super(deserializationconfig, simplemixinresolver, rootnamelookup);
        _deserFeatures = deserializationconfig._deserFeatures;
        _problemHandlers = deserializationconfig._problemHandlers;
        _nodeFactory = deserializationconfig._nodeFactory;
        _parserFeatures = deserializationconfig._parserFeatures;
        _parserFeaturesToChange = deserializationconfig._parserFeaturesToChange;
        _formatReadFeatures = deserializationconfig._formatReadFeatures;
        _formatReadFeaturesToChange = deserializationconfig._formatReadFeaturesToChange;
    }

    private DeserializationConfig(DeserializationConfig deserializationconfig, SubtypeResolver subtyperesolver) {
        super(deserializationconfig, subtyperesolver);
        _deserFeatures = deserializationconfig._deserFeatures;
        _nodeFactory = deserializationconfig._nodeFactory;
        _problemHandlers = deserializationconfig._problemHandlers;
        _parserFeatures = deserializationconfig._parserFeatures;
        _parserFeaturesToChange = deserializationconfig._parserFeaturesToChange;
        _formatReadFeatures = deserializationconfig._formatReadFeatures;
        _formatReadFeaturesToChange = deserializationconfig._formatReadFeaturesToChange;
    }

    private DeserializationConfig(DeserializationConfig deserializationconfig, JsonNodeFactory jsonnodefactory) {
        super(deserializationconfig);
        _deserFeatures = deserializationconfig._deserFeatures;
        _problemHandlers = deserializationconfig._problemHandlers;
        _nodeFactory = jsonnodefactory;
        _parserFeatures = deserializationconfig._parserFeatures;
        _parserFeaturesToChange = deserializationconfig._parserFeaturesToChange;
        _formatReadFeatures = deserializationconfig._formatReadFeatures;
        _formatReadFeaturesToChange = deserializationconfig._formatReadFeaturesToChange;
    }

    private DeserializationConfig(DeserializationConfig deserializationconfig, LinkedNode linkednode) {
        super(deserializationconfig);
        _deserFeatures = deserializationconfig._deserFeatures;
        _problemHandlers = linkednode;
        _nodeFactory = deserializationconfig._nodeFactory;
        _parserFeatures = deserializationconfig._parserFeatures;
        _parserFeaturesToChange = deserializationconfig._parserFeaturesToChange;
        _formatReadFeatures = deserializationconfig._formatReadFeatures;
        _formatReadFeaturesToChange = deserializationconfig._formatReadFeaturesToChange;
    }

    private DeserializationConfig(DeserializationConfig deserializationconfig, Class class1) {
        super(deserializationconfig, class1);
        _deserFeatures = deserializationconfig._deserFeatures;
        _problemHandlers = deserializationconfig._problemHandlers;
        _nodeFactory = deserializationconfig._nodeFactory;
        _parserFeatures = deserializationconfig._parserFeatures;
        _parserFeaturesToChange = deserializationconfig._parserFeaturesToChange;
        _formatReadFeatures = deserializationconfig._formatReadFeatures;
        _formatReadFeaturesToChange = deserializationconfig._formatReadFeaturesToChange;
    }

    public DeserializationConfig(BaseSettings basesettings, SubtypeResolver subtyperesolver, SimpleMixInResolver simplemixinresolver, RootNameLookup rootnamelookup) {
        super(basesettings, subtyperesolver, simplemixinresolver, rootnamelookup);
        _deserFeatures = collectFeatureDefaults(com/fasterxml/jackson/databind/DeserializationFeature);
        _nodeFactory = JsonNodeFactory.instance;
        _problemHandlers = null;
        _parserFeatures = 0;
        _parserFeaturesToChange = 0;
        _formatReadFeatures = 0;
        _formatReadFeaturesToChange = 0;
    }

    private final DeserializationConfig _withBase(BaseSettings basesettings) {
        if (_base == basesettings)
            basesettings = this;
        else
            basesettings = new DeserializationConfig(this, basesettings);
        return basesettings;
    }

    public TypeDeserializer findTypeDeserializer(JavaType javatype) {
        Object obj;
        java.util.Collection collection;
        Object obj1;
        Object obj2;
        collection = null;
        obj1 = null;
        obj2 = introspectClassAnnotations(javatype.getRawClass()).getClassInfo();
        obj = getAnnotationIntrospector().findTypeResolver(this, ((com.fasterxml.jackson.databind.introspect.AnnotatedClass) (obj2)), javatype);
        if (obj != null) goto _L2; else goto _L1
_L1:
        obj2 = getDefaultTyper(javatype);
        obj = obj2;
        if (obj2 != null) goto _L4; else goto _L3
_L3:
        javatype = obj1;
_L6:
        return javatype;
_L2:
        collection = getSubtypeResolver().collectAndResolveSubtypesByTypeId(this, ((com.fasterxml.jackson.databind.introspect.AnnotatedClass) (obj2)));
_L4:
        javatype = ((TypeResolverBuilder) (obj)).buildTypeDeserializer(this, javatype, collection);
        if (true) goto _L6; else goto _L5
_L5:
    }

    public AnnotationIntrospector getAnnotationIntrospector() {
        Object obj;
        if (isEnabled(MapperFeature.USE_ANNOTATIONS))
            obj = super.getAnnotationIntrospector();
        else
            obj = NopAnnotationIntrospector.instance;
        return ((AnnotationIntrospector) (obj));
    }

    protected BaseSettings getBaseSettings() {
        return _base;
    }

    public com.fasterxml.jackson.annotation.JsonFormat.Value getDefaultPropertyFormat(Class class1) {
        return EMPTY_FORMAT;
    }

    public com.fasterxml.jackson.annotation.JsonInclude.Value getDefaultPropertyInclusion() {
        return EMPTY_INCLUDE;
    }

    public com.fasterxml.jackson.annotation.JsonInclude.Value getDefaultPropertyInclusion(Class class1) {
        return EMPTY_INCLUDE;
    }

    public VisibilityChecker getDefaultVisibilityChecker() {
        VisibilityChecker visibilitychecker1 = super.getDefaultVisibilityChecker();
        VisibilityChecker visibilitychecker = visibilitychecker1;
        if (!isEnabled(MapperFeature.AUTO_DETECT_SETTERS))
            visibilitychecker = visibilitychecker1.withSetterVisibility(com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE);
        visibilitychecker1 = visibilitychecker;
        if (!isEnabled(MapperFeature.AUTO_DETECT_CREATORS))
            visibilitychecker1 = visibilitychecker.withCreatorVisibility(com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE);
        visibilitychecker = visibilitychecker1;
        if (!isEnabled(MapperFeature.AUTO_DETECT_GETTERS))
            visibilitychecker = visibilitychecker1.withGetterVisibility(com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE);
        visibilitychecker1 = visibilitychecker;
        if (!isEnabled(MapperFeature.AUTO_DETECT_IS_GETTERS))
            visibilitychecker1 = visibilitychecker.withIsGetterVisibility(com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE);
        visibilitychecker = visibilitychecker1;
        if (!isEnabled(MapperFeature.AUTO_DETECT_FIELDS))
            visibilitychecker = visibilitychecker1.withFieldVisibility(com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE);
        return visibilitychecker;
    }

    public final int getDeserializationFeatures() {
        return _deserFeatures;
    }

    public final JsonNodeFactory getNodeFactory() {
        return _nodeFactory;
    }

    public LinkedNode getProblemHandlers() {
        return _problemHandlers;
    }

    public final boolean hasDeserializationFeatures(int i) {
        boolean flag;
        if ((_deserFeatures & i) == i)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public final boolean hasSomeOfFeatures(int i) {
        boolean flag;
        if ((_deserFeatures & i) != 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public void initialize(JsonParser jsonparser) {
        if (_parserFeaturesToChange != 0)
            jsonparser.overrideStdFeatures(_parserFeatures, _parserFeaturesToChange);
        if (_formatReadFeaturesToChange != 0)
            jsonparser.overrideFormatFeatures(_formatReadFeatures, _formatReadFeaturesToChange);
    }

    public BeanDescription introspect(JavaType javatype) {
        return getClassIntrospector().forDeserialization(this, javatype, this);
    }

    public BeanDescription introspectClassAnnotations(JavaType javatype) {
        return getClassIntrospector().forClassAnnotations(this, javatype, this);
    }

    public BeanDescription introspectDirectClassAnnotations(JavaType javatype) {
        return getClassIntrospector().forDirectClassAnnotations(this, javatype, this);
    }

    public BeanDescription introspectForBuilder(JavaType javatype) {
        return getClassIntrospector().forDeserializationWithBuilder(this, javatype, this);
    }

    public BeanDescription introspectForCreation(JavaType javatype) {
        return getClassIntrospector().forCreation(this, javatype, this);
    }

    public final boolean isEnabled(com.fasterxml.jackson.core.JsonParser.Feature feature, JsonFactory jsonfactory) {
        boolean flag;
        if ((feature.getMask() & _parserFeaturesToChange) != 0) {
            if ((_parserFeatures & feature.getMask()) != 0)
                flag = true;
            else
                flag = false;
        } else {
            flag = jsonfactory.isEnabled(feature);
        }
        return flag;
    }

    public final boolean isEnabled(DeserializationFeature deserializationfeature) {
        boolean flag;
        if ((_deserFeatures & deserializationfeature.getMask()) != 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean useRootWrapping() {
        boolean flag;
        if (_rootName != null) {
            if (!_rootName.isEmpty())
                flag = true;
            else
                flag = false;
        } else {
            flag = isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE);
        }
        return flag;
    }

    public DeserializationConfig with(Base64Variant base64variant) {
        return _withBase(_base.with(base64variant));
    }

    public DeserializationConfig with(FormatFeature formatfeature) {
        int j = _formatReadFeatures | formatfeature.getMask();
        int i = _formatReadFeaturesToChange | formatfeature.getMask();
        if (_formatReadFeatures == j && _formatReadFeaturesToChange == i)
            formatfeature = this;
        else
            formatfeature = new DeserializationConfig(this, _mapperFeatures, _deserFeatures, _parserFeatures, _parserFeaturesToChange, j, i);
        return formatfeature;
    }

    public DeserializationConfig with(com.fasterxml.jackson.core.JsonParser.Feature feature) {
        int i = _parserFeatures | feature.getMask();
        int j = _parserFeaturesToChange | feature.getMask();
        if (_parserFeatures == i && _parserFeaturesToChange == j)
            feature = this;
        else
            feature = new DeserializationConfig(this, _mapperFeatures, _deserFeatures, i, j, _formatReadFeatures, _formatReadFeaturesToChange);
        return feature;
    }

    public DeserializationConfig with(AnnotationIntrospector annotationintrospector) {
        return _withBase(_base.withAnnotationIntrospector(annotationintrospector));
    }

    public DeserializationConfig with(DeserializationFeature deserializationfeature) {
        int i = _deserFeatures | deserializationfeature.getMask();
        if (i == _deserFeatures)
            deserializationfeature = this;
        else
            deserializationfeature = new DeserializationConfig(this, _mapperFeatures, i, _parserFeatures, _parserFeaturesToChange, _formatReadFeatures, _formatReadFeaturesToChange);
        return deserializationfeature;
    }

    public transient DeserializationConfig with(DeserializationFeature deserializationfeature, DeserializationFeature adeserializationfeature[]) {
        int i = _deserFeatures | deserializationfeature.getMask();
        int k = adeserializationfeature.length;
        for (int j = 0; j < k; j++)
            i |= adeserializationfeature[j].getMask();

        if (i == _deserFeatures)
            deserializationfeature = this;
        else
            deserializationfeature = new DeserializationConfig(this, _mapperFeatures, i, _parserFeatures, _parserFeaturesToChange, _formatReadFeatures, _formatReadFeaturesToChange);
        return deserializationfeature;
    }

    public DeserializationConfig with(MapperFeature mapperfeature, boolean flag) {
        int i;
        if (flag)
            i = _mapperFeatures | mapperfeature.getMask();
        else
            i = _mapperFeatures & ~mapperfeature.getMask();
        if (i == _mapperFeatures)
            mapperfeature = this;
        else
            mapperfeature = new DeserializationConfig(this, i, _deserFeatures, _parserFeatures, _parserFeaturesToChange, _formatReadFeatures, _formatReadFeaturesToChange);
        return mapperfeature;
    }

    public DeserializationConfig with(PropertyNamingStrategy propertynamingstrategy) {
        return _withBase(_base.withPropertyNamingStrategy(propertynamingstrategy));
    }

    public DeserializationConfig with(ContextAttributes contextattributes) {
        if (contextattributes == _attributes)
            contextattributes = this;
        else
            contextattributes = new DeserializationConfig(this, contextattributes);
        return contextattributes;
    }

    public DeserializationConfig with(HandlerInstantiator handlerinstantiator) {
        return _withBase(_base.withHandlerInstantiator(handlerinstantiator));
    }

    public DeserializationConfig with(ClassIntrospector classintrospector) {
        return _withBase(_base.withClassIntrospector(classintrospector));
    }

    public DeserializationConfig with(VisibilityChecker visibilitychecker) {
        return _withBase(_base.withVisibilityChecker(visibilitychecker));
    }

    public DeserializationConfig with(SubtypeResolver subtyperesolver) {
        if (_subtypeResolver == subtyperesolver)
            subtyperesolver = this;
        else
            subtyperesolver = new DeserializationConfig(this, subtyperesolver);
        return subtyperesolver;
    }

    public DeserializationConfig with(TypeResolverBuilder typeresolverbuilder) {
        return _withBase(_base.withTypeResolverBuilder(typeresolverbuilder));
    }

    public DeserializationConfig with(JsonNodeFactory jsonnodefactory) {
        if (_nodeFactory == jsonnodefactory)
            jsonnodefactory = this;
        else
            jsonnodefactory = new DeserializationConfig(this, jsonnodefactory);
        return jsonnodefactory;
    }

    public DeserializationConfig with(TypeFactory typefactory) {
        return _withBase(_base.withTypeFactory(typefactory));
    }

    public DeserializationConfig with(DateFormat dateformat) {
        return _withBase(_base.withDateFormat(dateformat));
    }

    public DeserializationConfig with(Locale locale) {
        return _withBase(_base.with(locale));
    }

    public DeserializationConfig with(TimeZone timezone) {
        return _withBase(_base.with(timezone));
    }

    public transient DeserializationConfig with(MapperFeature amapperfeature[]) {
        int i = _mapperFeatures;
        int k = amapperfeature.length;
        for (int j = 0; j < k; j++)
            i |= amapperfeature[j].getMask();

        if (i == _mapperFeatures)
            amapperfeature = this;
        else
            amapperfeature = new DeserializationConfig(this, i, _deserFeatures, _parserFeatures, _parserFeaturesToChange, _formatReadFeatures, _formatReadFeaturesToChange);
        return amapperfeature;
    }

    public volatile MapperConfig with(MapperFeature mapperfeature, boolean flag) {
        return with(mapperfeature, flag);
    }

    public volatile MapperConfig with(MapperFeature amapperfeature[]) {
        return with(amapperfeature);
    }

    public volatile MapperConfigBase with(Base64Variant base64variant) {
        return with(base64variant);
    }

    public volatile MapperConfigBase with(AnnotationIntrospector annotationintrospector) {
        return with(annotationintrospector);
    }

    public volatile MapperConfigBase with(PropertyNamingStrategy propertynamingstrategy) {
        return with(propertynamingstrategy);
    }

    public volatile MapperConfigBase with(ContextAttributes contextattributes) {
        return with(contextattributes);
    }

    public volatile MapperConfigBase with(HandlerInstantiator handlerinstantiator) {
        return with(handlerinstantiator);
    }

    public volatile MapperConfigBase with(ClassIntrospector classintrospector) {
        return with(classintrospector);
    }

    public volatile MapperConfigBase with(VisibilityChecker visibilitychecker) {
        return with(visibilitychecker);
    }

    public volatile MapperConfigBase with(SubtypeResolver subtyperesolver) {
        return with(subtyperesolver);
    }

    public volatile MapperConfigBase with(TypeResolverBuilder typeresolverbuilder) {
        return with(typeresolverbuilder);
    }

    public volatile MapperConfigBase with(TypeFactory typefactory) {
        return with(typefactory);
    }

    public volatile MapperConfigBase with(DateFormat dateformat) {
        return with(dateformat);
    }

    public volatile MapperConfigBase with(Locale locale) {
        return with(locale);
    }

    public volatile MapperConfigBase with(TimeZone timezone) {
        return with(timezone);
    }

    public DeserializationConfig withAppendedAnnotationIntrospector(AnnotationIntrospector annotationintrospector) {
        return _withBase(_base.withAppendedAnnotationIntrospector(annotationintrospector));
    }

    public volatile MapperConfigBase withAppendedAnnotationIntrospector(AnnotationIntrospector annotationintrospector) {
        return withAppendedAnnotationIntrospector(annotationintrospector);
    }

    public transient DeserializationConfig withFeatures(FormatFeature aformatfeature[]) {
        int k = _formatReadFeatures;
        int i = _formatReadFeaturesToChange;
        int l = aformatfeature.length;
        for (int j = 0; j < l; j++) {
            int i1 = aformatfeature[j].getMask();
            k |= i1;
            i |= i1;
        }

        if (_formatReadFeatures == k && _formatReadFeaturesToChange == i)
            aformatfeature = this;
        else
            aformatfeature = new DeserializationConfig(this, _mapperFeatures, _deserFeatures, _parserFeatures, _parserFeaturesToChange, k, i);
        return aformatfeature;
    }

    public transient DeserializationConfig withFeatures(com.fasterxml.jackson.core.JsonParser.Feature afeature[]) {
        int k = _parserFeatures;
        int i = _parserFeaturesToChange;
        int l = afeature.length;
        for (int j = 0; j < l; j++) {
            int i1 = afeature[j].getMask();
            k |= i1;
            i |= i1;
        }

        if (_parserFeatures == k && _parserFeaturesToChange == i)
            afeature = this;
        else
            afeature = new DeserializationConfig(this, _mapperFeatures, _deserFeatures, k, i, _formatReadFeatures, _formatReadFeaturesToChange);
        return afeature;
    }

    public transient DeserializationConfig withFeatures(DeserializationFeature adeserializationfeature[]) {
        int i = _deserFeatures;
        int k = adeserializationfeature.length;
        for (int j = 0; j < k; j++)
            i |= adeserializationfeature[j].getMask();

        if (i == _deserFeatures)
            adeserializationfeature = this;
        else
            adeserializationfeature = new DeserializationConfig(this, _mapperFeatures, i, _parserFeatures, _parserFeaturesToChange, _formatReadFeatures, _formatReadFeaturesToChange);
        return adeserializationfeature;
    }

    public DeserializationConfig withHandler(DeserializationProblemHandler deserializationproblemhandler) {
        if (LinkedNode.contains(_problemHandlers, deserializationproblemhandler))
            deserializationproblemhandler = this;
        else
            deserializationproblemhandler = new DeserializationConfig(this, new LinkedNode(deserializationproblemhandler, _problemHandlers));
        return deserializationproblemhandler;
    }

    public DeserializationConfig withInsertedAnnotationIntrospector(AnnotationIntrospector annotationintrospector) {
        return _withBase(_base.withInsertedAnnotationIntrospector(annotationintrospector));
    }

    public volatile MapperConfigBase withInsertedAnnotationIntrospector(AnnotationIntrospector annotationintrospector) {
        return withInsertedAnnotationIntrospector(annotationintrospector);
    }

    public DeserializationConfig withNoProblemHandlers() {
        DeserializationConfig deserializationconfig;
        if (_problemHandlers == null)
            deserializationconfig = this;
        else
            deserializationconfig = new DeserializationConfig(this, (LinkedNode)null);
        return deserializationconfig;
    }

    public DeserializationConfig withRootName(PropertyName propertyname) {
        if (propertyname != null) goto _L2; else goto _L1
_L1:
        if (_rootName != null) goto _L4; else goto _L3
_L3:
        DeserializationConfig deserializationconfig = this;
_L6:
        return deserializationconfig;
_L2:
        deserializationconfig = this;
        if (propertyname.equals(_rootName))
            continue; /* Loop/switch isn't completed */
_L4:
        deserializationconfig = new DeserializationConfig(this, propertyname);
        if (true) goto _L6; else goto _L5
_L5:
    }

    public volatile MapperConfigBase withRootName(PropertyName propertyname) {
        return withRootName(propertyname);
    }

    public DeserializationConfig withView(Class class1) {
        if (_view == class1)
            class1 = this;
        else
            class1 = new DeserializationConfig(this, class1);
        return class1;
    }

    public volatile MapperConfigBase withView(Class class1) {
        return withView(class1);
    }

    public DeserializationConfig withVisibility(PropertyAccessor propertyaccessor, com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility visibility) {
        return _withBase(_base.withVisibility(propertyaccessor, visibility));
    }

    public volatile MapperConfigBase withVisibility(PropertyAccessor propertyaccessor, com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility visibility) {
        return withVisibility(propertyaccessor, visibility);
    }

    public DeserializationConfig without(FormatFeature formatfeature) {
        int i = _formatReadFeatures & ~formatfeature.getMask();
        int j = _formatReadFeaturesToChange | formatfeature.getMask();
        if (_formatReadFeatures == i && _formatReadFeaturesToChange == j)
            formatfeature = this;
        else
            formatfeature = new DeserializationConfig(this, _mapperFeatures, _deserFeatures, _parserFeatures, _parserFeaturesToChange, i, j);
        return formatfeature;
    }

    public DeserializationConfig without(com.fasterxml.jackson.core.JsonParser.Feature feature) {
        int j = _parserFeatures & ~feature.getMask();
        int i = _parserFeaturesToChange | feature.getMask();
        if (_parserFeatures == j && _parserFeaturesToChange == i)
            feature = this;
        else
            feature = new DeserializationConfig(this, _mapperFeatures, _deserFeatures, j, i, _formatReadFeatures, _formatReadFeaturesToChange);
        return feature;
    }

    public DeserializationConfig without(DeserializationFeature deserializationfeature) {
        int i = _deserFeatures & ~deserializationfeature.getMask();
        if (i == _deserFeatures)
            deserializationfeature = this;
        else
            deserializationfeature = new DeserializationConfig(this, _mapperFeatures, i, _parserFeatures, _parserFeaturesToChange, _formatReadFeatures, _formatReadFeaturesToChange);
        return deserializationfeature;
    }

    public transient DeserializationConfig without(DeserializationFeature deserializationfeature, DeserializationFeature adeserializationfeature[]) {
        int i = _deserFeatures & ~deserializationfeature.getMask();
        int k = adeserializationfeature.length;
        for (int j = 0; j < k; j++)
            i &= ~adeserializationfeature[j].getMask();

        if (i == _deserFeatures)
            deserializationfeature = this;
        else
            deserializationfeature = new DeserializationConfig(this, _mapperFeatures, i, _parserFeatures, _parserFeaturesToChange, _formatReadFeatures, _formatReadFeaturesToChange);
        return deserializationfeature;
    }

    public transient DeserializationConfig without(MapperFeature amapperfeature[]) {
        int i = _mapperFeatures;
        int k = amapperfeature.length;
        for (int j = 0; j < k; j++)
            i &= ~amapperfeature[j].getMask();

        if (i == _mapperFeatures)
            amapperfeature = this;
        else
            amapperfeature = new DeserializationConfig(this, i, _deserFeatures, _parserFeatures, _parserFeaturesToChange, _formatReadFeatures, _formatReadFeaturesToChange);
        return amapperfeature;
    }

    public volatile MapperConfig without(MapperFeature amapperfeature[]) {
        return without(amapperfeature);
    }

    public transient DeserializationConfig withoutFeatures(FormatFeature aformatfeature[]) {
        int k = _formatReadFeatures;
        int i = _formatReadFeaturesToChange;
        int l = aformatfeature.length;
        for (int j = 0; j < l; j++) {
            int i1 = aformatfeature[j].getMask();
            k &= ~i1;
            i |= i1;
        }

        if (_formatReadFeatures == k && _formatReadFeaturesToChange == i)
            aformatfeature = this;
        else
            aformatfeature = new DeserializationConfig(this, _mapperFeatures, _deserFeatures, _parserFeatures, _parserFeaturesToChange, k, i);
        return aformatfeature;
    }

    public transient DeserializationConfig withoutFeatures(com.fasterxml.jackson.core.JsonParser.Feature afeature[]) {
        int k = _parserFeatures;
        int i = _parserFeaturesToChange;
        int l = afeature.length;
        for (int j = 0; j < l; j++) {
            int i1 = afeature[j].getMask();
            k &= ~i1;
            i |= i1;
        }

        if (_parserFeatures == k && _parserFeaturesToChange == i)
            afeature = this;
        else
            afeature = new DeserializationConfig(this, _mapperFeatures, _deserFeatures, k, i, _formatReadFeatures, _formatReadFeaturesToChange);
        return afeature;
    }

    public transient DeserializationConfig withoutFeatures(DeserializationFeature adeserializationfeature[]) {
        int i = _deserFeatures;
        int k = adeserializationfeature.length;
        for (int j = 0; j < k; j++)
            i &= ~adeserializationfeature[j].getMask();

        if (i == _deserFeatures)
            adeserializationfeature = this;
        else
            adeserializationfeature = new DeserializationConfig(this, _mapperFeatures, i, _parserFeatures, _parserFeaturesToChange, _formatReadFeatures, _formatReadFeaturesToChange);
        return adeserializationfeature;
    }
}
