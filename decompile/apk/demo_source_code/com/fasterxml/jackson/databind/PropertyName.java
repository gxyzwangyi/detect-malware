// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind;

import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.util.InternCache;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import java.io.Serializable;

public class PropertyName
    implements Serializable {

    public static final PropertyName NO_NAME = new PropertyName(new String(""), null);
    public static final PropertyName USE_DEFAULT = new PropertyName("", null);
    private static final String _NO_NAME = "";
    private static final String _USE_DEFAULT = "";
    private static final long serialVersionUID = 1L;
    protected SerializableString _encodedSimple;
    protected final String _namespace;
    protected final String _simpleName;

    public PropertyName(String s) {
        this(s, null);
    }

    public PropertyName(String s, String s1) {
        String s2 = s;
        if (s == null)
            s2 = "";
        _simpleName = s2;
        _namespace = s1;
    }

    public static PropertyName construct(String s) {
        if (s == null || s.length() == 0)
            s = USE_DEFAULT;
        else
            s = new PropertyName(InternCache.instance.intern(s), null);
        return s;
    }

    public static PropertyName construct(String s, String s1) {
        String s2 = s;
        if (s == null)
            s2 = "";
        if (s1 == null && s2.length() == 0)
            s = USE_DEFAULT;
        else
            s = new PropertyName(InternCache.instance.intern(s2), s1);
        return s;
    }

    public boolean equals(Object obj) {
        boolean flag1;
        boolean flag2;
        flag2 = true;
        flag1 = false;
        if (obj != this) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L8:
        return flag;
_L2:
        flag = flag1;
        if (obj == null)
            continue; /* Loop/switch isn't completed */
        flag = flag1;
        if (obj.getClass() != getClass())
            continue; /* Loop/switch isn't completed */
        obj = (PropertyName)obj;
        if (_simpleName != null) goto _L4; else goto _L3
_L3:
        flag = flag1;
        if (((PropertyName) (obj))._simpleName != null)
            continue; /* Loop/switch isn't completed */
_L6:
        if (_namespace == null) {
            if (((PropertyName) (obj))._namespace == null)
                flag = flag2;
            else
                flag = false;
        } else {
            flag = _namespace.equals(((PropertyName) (obj))._namespace);
        }
        continue; /* Loop/switch isn't completed */
_L4:
        if (_simpleName.equals(((PropertyName) (obj))._simpleName)) goto _L6; else goto _L5
_L5:
        flag = flag1;
        if (true) goto _L8; else goto _L7
_L7:
    }

    public String getNamespace() {
        return _namespace;
    }

    public String getSimpleName() {
        return _simpleName;
    }

    public boolean hasNamespace() {
        boolean flag;
        if (_namespace != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean hasSimpleName() {
        boolean flag;
        if (_simpleName.length() > 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean hasSimpleName(String s) {
        boolean flag;
        if (s == null) {
            if (_simpleName == null)
                flag = true;
            else
                flag = false;
        } else {
            flag = s.equals(_simpleName);
        }
        return flag;
    }

    public int hashCode() {
        int i;
        if (_namespace == null)
            i = _simpleName.hashCode();
        else
            i = _namespace.hashCode() ^ _simpleName.hashCode();
        return i;
    }

    public PropertyName internSimpleName() {
        if (_simpleName.length() != 0) goto _L2; else goto _L1
_L1:
        PropertyName propertyname = this;
_L4:
        return propertyname;
_L2:
        String s = InternCache.instance.intern(_simpleName);
        propertyname = this;
        if (s != _simpleName)
            propertyname = new PropertyName(s, _namespace);
        if (true) goto _L4; else goto _L3
_L3:
    }

    public boolean isEmpty() {
        boolean flag;
        if (_namespace == null && _simpleName.isEmpty())
            flag = true;
        else
            flag = false;
        return flag;
    }

    protected Object readResolve() {
        if (_simpleName != null && !"".equals(_simpleName)) goto _L2; else goto _L1
_L1:
        PropertyName propertyname = USE_DEFAULT;
_L4:
        return propertyname;
_L2:
        propertyname = this;
        if (_simpleName.equals("")) {
            propertyname = this;
            if (_namespace == null)
                propertyname = NO_NAME;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public SerializableString simpleAsEncoded(MapperConfig mapperconfig) {
        SerializableString serializablestring = _encodedSimple;
        Object obj = serializablestring;
        if (serializablestring == null) {
            if (mapperconfig == null)
                mapperconfig = new SerializedString(_simpleName);
            else
                mapperconfig = mapperconfig.compileString(_simpleName);
            _encodedSimple = mapperconfig;
            obj = mapperconfig;
        }
        return ((SerializableString) (obj));
    }

    public String toString() {
        String s;
        if (_namespace == null)
            s = _simpleName;
        else
            s = (new StringBuilder()).append("{").append(_namespace).append("}").append(_simpleName).toString();
        return s;
    }

    public PropertyName withNamespace(String s) {
        if (s != null) goto _L2; else goto _L1
_L1:
        if (_namespace != null) goto _L4; else goto _L3
_L3:
        PropertyName propertyname = this;
_L6:
        return propertyname;
_L2:
        propertyname = this;
        if (s.equals(_namespace))
            continue; /* Loop/switch isn't completed */
_L4:
        propertyname = new PropertyName(_simpleName, s);
        if (true) goto _L6; else goto _L5
_L5:
    }

    public PropertyName withSimpleName(String s) {
        String s1 = s;
        if (s == null)
            s1 = "";
        if (s1.equals(_simpleName))
            s = this;
        else
            s = new PropertyName(s1, _namespace);
        return s;
    }

}
