// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.databind;

import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.core.io.*;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.*;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.PackageVersion;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.*;
import java.text.DateFormat;
import java.util.*;
import java.util.concurrent.atomic.AtomicReference;

// Referenced classes of package com.fasterxml.jackson.databind:
//            ObjectMapper, JavaType, MapperFeature, SerializationConfig, 
//            SerializationFeature, SequenceWriter, PropertyName, JsonMappingException, 
//            JsonSerializer

public class ObjectWriter
    implements Versioned, Serializable {
    public static final class GeneratorSettings
        implements Serializable {

        public static final GeneratorSettings empty = new GeneratorSettings(null, null, null, null);
        private static final long serialVersionUID = 1L;
        public final CharacterEscapes characterEscapes;
        public final PrettyPrinter prettyPrinter;
        public final SerializableString rootValueSeparator;
        public final FormatSchema schema;

        public void initialize(JsonGenerator jsongenerator) {
            PrettyPrinter prettyprinter1 = prettyPrinter;
            if (prettyPrinter != null)
                if (prettyprinter1 == ObjectWriter.NULL_PRETTY_PRINTER) {
                    jsongenerator.setPrettyPrinter(null);
                } else {
                    PrettyPrinter prettyprinter = prettyprinter1;
                    if (prettyprinter1 instanceof Instantiatable)
                        prettyprinter = (PrettyPrinter)((Instantiatable)prettyprinter1).createInstance();
                    jsongenerator.setPrettyPrinter(prettyprinter);
                }
            if (characterEscapes != null)
                jsongenerator.setCharacterEscapes(characterEscapes);
            if (schema != null)
                jsongenerator.setSchema(schema);
            if (rootValueSeparator != null)
                jsongenerator.setRootValueSeparator(rootValueSeparator);
        }

        public GeneratorSettings with(FormatSchema formatschema) {
            if (schema == formatschema)
                formatschema = this;
            else
                formatschema = new GeneratorSettings(prettyPrinter, formatschema, characterEscapes, rootValueSeparator);
            return formatschema;
        }

        public GeneratorSettings with(PrettyPrinter prettyprinter) {
            PrettyPrinter prettyprinter1 = prettyprinter;
            if (prettyprinter == null)
                prettyprinter1 = ObjectWriter.NULL_PRETTY_PRINTER;
            if (prettyprinter1 == prettyPrinter)
                prettyprinter = this;
            else
                prettyprinter = new GeneratorSettings(prettyprinter1, schema, characterEscapes, rootValueSeparator);
            return prettyprinter;
        }

        public GeneratorSettings with(CharacterEscapes characterescapes) {
            if (characterEscapes == characterescapes)
                characterescapes = this;
            else
                characterescapes = new GeneratorSettings(prettyPrinter, schema, characterescapes, rootValueSeparator);
            return characterescapes;
        }

        public GeneratorSettings withRootValueSeparator(SerializableString serializablestring) {
            if (serializablestring != null) goto _L2; else goto _L1
_L1:
            if (rootValueSeparator != null) goto _L4; else goto _L3
_L3:
            GeneratorSettings generatorsettings = this;
_L6:
            return generatorsettings;
_L2:
            if (rootValueSeparator != null) {
                generatorsettings = this;
                if (serializablestring.getValue().equals(rootValueSeparator.getValue()))
                    continue; /* Loop/switch isn't completed */
            }
_L4:
            generatorsettings = new GeneratorSettings(prettyPrinter, schema, characterEscapes, serializablestring);
            if (true) goto _L6; else goto _L5
_L5:
        }

        public GeneratorSettings withRootValueSeparator(String s) {
            if (s != null) goto _L2; else goto _L1
_L1:
            if (rootValueSeparator != null) goto _L4; else goto _L3
_L3:
            Object obj = this;
_L6:
            return ((GeneratorSettings) (obj));
_L2:
            obj = this;
            if (s.equals(rootValueSeparator))
                continue; /* Loop/switch isn't completed */
_L4:
            obj = prettyPrinter;
            FormatSchema formatschema = schema;
            CharacterEscapes characterescapes = characterEscapes;
            if (s == null)
                s = null;
            else
                s = new SerializedString(s);
            obj = new GeneratorSettings(((PrettyPrinter) (obj)), formatschema, characterescapes, s);
            if (true) goto _L6; else goto _L5
_L5:
        }


        public GeneratorSettings(PrettyPrinter prettyprinter, FormatSchema formatschema, CharacterEscapes characterescapes, SerializableString serializablestring) {
            prettyPrinter = prettyprinter;
            schema = formatschema;
            characterEscapes = characterescapes;
            rootValueSeparator = serializablestring;
        }
    }

    public static final class Prefetch
        implements Serializable {

        public static final Prefetch empty = new Prefetch(null, null, null);
        private static final long serialVersionUID = 1L;
        private final JavaType rootType;
        private final TypeSerializer typeSerializer;
        private final JsonSerializer valueSerializer;

        public Prefetch forRootType(ObjectWriter objectwriter, JavaType javatype) {
            Prefetch prefetch;
            boolean flag1 = true;
            boolean flag = flag1;
            if (javatype != null)
                if (javatype.isJavaLangObject())
                    flag = flag1;
                else
                    flag = false;
            if (!flag) goto _L2; else goto _L1
_L1:
            prefetch = this;
            if (rootType != null)
                if (valueSerializer == null)
                    prefetch = this;
                else
                    prefetch = new Prefetch(null, null, typeSerializer);
_L4:
            return prefetch;
_L2:
            prefetch = this;
            if (javatype.equals(rootType))
                continue; /* Loop/switch isn't completed */
            if (!objectwriter.isEnabled(SerializationFeature.EAGER_SERIALIZER_FETCH))
                break MISSING_BLOCK_LABEL_152;
            objectwriter = objectwriter._serializerProvider();
            objectwriter = objectwriter.findTypedValueSerializer(javatype, true, null);
            if (objectwriter instanceof TypeWrappedSerializer) {
                prefetch = JVM INSTR new #2   <Class ObjectWriter$Prefetch>;
                prefetch.Prefetch(javatype, null, ((TypeWrappedSerializer)objectwriter).typeSerializer());
                continue; /* Loop/switch isn't completed */
            }
            try {
                prefetch = new Prefetch(javatype, objectwriter, null);
                continue; /* Loop/switch isn't completed */
            }
            // Misplaced declaration of an exception variable
            catch (ObjectWriter objectwriter) { }
            prefetch = new Prefetch(null, null, typeSerializer);
            if (true) goto _L4; else goto _L3
_L3:
        }

        public final TypeSerializer getTypeSerializer() {
            return typeSerializer;
        }

        public final JsonSerializer getValueSerializer() {
            return valueSerializer;
        }

        public boolean hasSerializer() {
            boolean flag;
            if (valueSerializer != null || typeSerializer != null)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public void serialize(JsonGenerator jsongenerator, Object obj, DefaultSerializerProvider defaultserializerprovider) {
            if (typeSerializer != null)
                defaultserializerprovider.serializePolymorphic(jsongenerator, obj, rootType, valueSerializer, typeSerializer);
            else
            if (valueSerializer != null)
                defaultserializerprovider.serializeValue(jsongenerator, obj, rootType, valueSerializer);
            else
                defaultserializerprovider.serializeValue(jsongenerator, obj);
        }


        private Prefetch(JavaType javatype, JsonSerializer jsonserializer, TypeSerializer typeserializer) {
            rootType = javatype;
            valueSerializer = jsonserializer;
            typeSerializer = typeserializer;
        }
    }


    protected static final PrettyPrinter NULL_PRETTY_PRINTER = new MinimalPrettyPrinter();
    private static final long serialVersionUID = 1L;
    protected final SerializationConfig _config;
    protected final JsonFactory _generatorFactory;
    protected final GeneratorSettings _generatorSettings;
    protected final Prefetch _prefetch;
    protected final SerializerFactory _serializerFactory;
    protected final DefaultSerializerProvider _serializerProvider;

    protected ObjectWriter(ObjectMapper objectmapper, SerializationConfig serializationconfig) {
        _config = serializationconfig;
        _serializerProvider = objectmapper._serializerProvider;
        _serializerFactory = objectmapper._serializerFactory;
        _generatorFactory = objectmapper._jsonFactory;
        _generatorSettings = GeneratorSettings.empty;
        _prefetch = Prefetch.empty;
    }

    protected ObjectWriter(ObjectMapper objectmapper, SerializationConfig serializationconfig, FormatSchema formatschema) {
        _config = serializationconfig;
        _serializerProvider = objectmapper._serializerProvider;
        _serializerFactory = objectmapper._serializerFactory;
        _generatorFactory = objectmapper._jsonFactory;
        if (formatschema == null)
            objectmapper = GeneratorSettings.empty;
        else
            objectmapper = new GeneratorSettings(null, formatschema, null, null);
        _generatorSettings = objectmapper;
        _prefetch = Prefetch.empty;
    }

    protected ObjectWriter(ObjectMapper objectmapper, SerializationConfig serializationconfig, JavaType javatype, PrettyPrinter prettyprinter) {
        _config = serializationconfig;
        _serializerProvider = objectmapper._serializerProvider;
        _serializerFactory = objectmapper._serializerFactory;
        _generatorFactory = objectmapper._jsonFactory;
        if (prettyprinter == null)
            objectmapper = GeneratorSettings.empty;
        else
            objectmapper = new GeneratorSettings(prettyprinter, null, null, null);
        _generatorSettings = objectmapper;
        if (javatype == null || javatype.hasRawClass(java/lang/Object)) {
            _prefetch = Prefetch.empty;
        } else {
            objectmapper = javatype.withStaticTyping();
            _prefetch = Prefetch.empty.forRootType(this, objectmapper);
        }
    }

    protected ObjectWriter(ObjectWriter objectwriter, JsonFactory jsonfactory) {
        _config = objectwriter._config.with(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, jsonfactory.requiresPropertyOrdering());
        _serializerProvider = objectwriter._serializerProvider;
        _serializerFactory = objectwriter._serializerFactory;
        _generatorFactory = objectwriter._generatorFactory;
        _generatorSettings = objectwriter._generatorSettings;
        _prefetch = objectwriter._prefetch;
    }

    protected ObjectWriter(ObjectWriter objectwriter, SerializationConfig serializationconfig) {
        _config = serializationconfig;
        _serializerProvider = objectwriter._serializerProvider;
        _serializerFactory = objectwriter._serializerFactory;
        _generatorFactory = objectwriter._generatorFactory;
        _generatorSettings = objectwriter._generatorSettings;
        _prefetch = objectwriter._prefetch;
    }

    protected ObjectWriter(ObjectWriter objectwriter, SerializationConfig serializationconfig, GeneratorSettings generatorsettings, Prefetch prefetch) {
        _config = serializationconfig;
        _serializerProvider = objectwriter._serializerProvider;
        _serializerFactory = objectwriter._serializerFactory;
        _generatorFactory = objectwriter._generatorFactory;
        _generatorSettings = generatorsettings;
        _prefetch = prefetch;
    }

    private final void _writeCloseable(JsonGenerator jsongenerator, Object obj) {
        Object obj1 = (Closeable)obj;
        _prefetch.serialize(jsongenerator, obj, _serializerProvider());
        jsongenerator.close();
        ((Closeable) (obj1)).close();
        if (false) {
            jsongenerator = com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
            throw new NullPointerException();
        }
        if (true)
            break MISSING_BLOCK_LABEL_56;
        throw new NullPointerException();
_L1:
        return;
        Exception exception;
        exception;
        obj = obj1;
        obj1 = jsongenerator;
        jsongenerator = exception;
_L2:
        if (obj1 != null) {
            ((JsonGenerator) (obj1)).disable(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);
            try {
                ((JsonGenerator) (obj1)).close();
            }
            // Misplaced declaration of an exception variable
            catch (Object obj1) { }
        }
        if (obj != null)
            try {
                ((Closeable) (obj)).close();
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) { }
        throw jsongenerator;
        jsongenerator;
          goto _L1
        jsongenerator;
        Object obj2 = null;
        obj = obj1;
        obj1 = obj2;
          goto _L2
        jsongenerator;
        obj = null;
        obj1 = null;
          goto _L2
    }

    protected final void _configAndWriteValue(JsonGenerator jsongenerator, Object obj) {
        _configureGenerator(jsongenerator);
        if (!_config.isEnabled(SerializationFeature.CLOSE_CLOSEABLE) || !(obj instanceof Closeable)) goto _L2; else goto _L1
_L1:
        _writeCloseable(jsongenerator, obj);
_L4:
        return;
_L2:
        boolean flag = false;
        _prefetch.serialize(jsongenerator, obj, _serializerProvider());
        flag = true;
        jsongenerator.close();
        if (true) goto _L4; else goto _L3
_L3:
        obj;
        if (!flag) {
            jsongenerator.disable(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);
            try {
                jsongenerator.close();
            }
            // Misplaced declaration of an exception variable
            catch (JsonGenerator jsongenerator) { }
        }
        throw obj;
    }

    protected final void _configureGenerator(JsonGenerator jsongenerator) {
        _config.initialize(jsongenerator);
        _generatorSettings.initialize(jsongenerator);
    }

    protected ObjectWriter _new(GeneratorSettings generatorsettings, Prefetch prefetch) {
        return new ObjectWriter(this, _config, generatorsettings, prefetch);
    }

    protected ObjectWriter _new(ObjectWriter objectwriter, JsonFactory jsonfactory) {
        return new ObjectWriter(objectwriter, jsonfactory);
    }

    protected ObjectWriter _new(ObjectWriter objectwriter, SerializationConfig serializationconfig) {
        return new ObjectWriter(objectwriter, serializationconfig);
    }

    protected SequenceWriter _newSequenceWriter(boolean flag, JsonGenerator jsongenerator, boolean flag1) {
        _configureGenerator(jsongenerator);
        return (new SequenceWriter(_serializerProvider(), jsongenerator, flag1, _prefetch)).init(flag);
    }

    protected DefaultSerializerProvider _serializerProvider() {
        return _serializerProvider.createInstance(_config, _serializerFactory);
    }

    protected void _verifySchemaType(FormatSchema formatschema) {
        if (formatschema != null && !_generatorFactory.canUseSchema(formatschema))
            throw new IllegalArgumentException((new StringBuilder()).append("Can not use FormatSchema of type ").append(formatschema.getClass().getName()).append(" for format ").append(_generatorFactory.getFormatName()).toString());
        else
            return;
    }

    public void acceptJsonFormatVisitor(JavaType javatype, JsonFormatVisitorWrapper jsonformatvisitorwrapper) {
        if (javatype == null) {
            throw new IllegalArgumentException("type must be provided");
        } else {
            _serializerProvider().acceptJsonFormatVisitor(javatype, jsonformatvisitorwrapper);
            return;
        }
    }

    public void acceptJsonFormatVisitor(Class class1, JsonFormatVisitorWrapper jsonformatvisitorwrapper) {
        acceptJsonFormatVisitor(_config.constructType(class1), jsonformatvisitorwrapper);
    }

    public boolean canSerialize(Class class1) {
        return _serializerProvider().hasSerializerFor(class1, null);
    }

    public boolean canSerialize(Class class1, AtomicReference atomicreference) {
        return _serializerProvider().hasSerializerFor(class1, atomicreference);
    }

    public ObjectWriter forType(TypeReference typereference) {
        return forType(_config.getTypeFactory().constructType(typereference.getType()));
    }

    public ObjectWriter forType(JavaType javatype) {
        javatype = _prefetch.forRootType(this, javatype);
        if (javatype == _prefetch)
            javatype = this;
        else
            javatype = _new(_generatorSettings, javatype);
        return javatype;
    }

    public ObjectWriter forType(Class class1) {
        if (class1 == java/lang/Object)
            class1 = forType((JavaType)null);
        else
            class1 = forType(_config.constructType(class1));
        return class1;
    }

    public ContextAttributes getAttributes() {
        return _config.getAttributes();
    }

    public SerializationConfig getConfig() {
        return _config;
    }

    public JsonFactory getFactory() {
        return _generatorFactory;
    }

    public TypeFactory getTypeFactory() {
        return _config.getTypeFactory();
    }

    public boolean hasPrefetchedSerializer() {
        return _prefetch.hasSerializer();
    }

    public boolean isEnabled(com.fasterxml.jackson.core.JsonParser.Feature feature) {
        return _generatorFactory.isEnabled(feature);
    }

    public boolean isEnabled(MapperFeature mapperfeature) {
        return _config.isEnabled(mapperfeature);
    }

    public boolean isEnabled(SerializationFeature serializationfeature) {
        return _config.isEnabled(serializationfeature);
    }

    public Version version() {
        return PackageVersion.VERSION;
    }

    public ObjectWriter with(Base64Variant base64variant) {
        base64variant = _config.with(base64variant);
        if (base64variant == _config)
            base64variant = this;
        else
            base64variant = _new(this, base64variant);
        return base64variant;
    }

    public ObjectWriter with(FormatFeature formatfeature) {
        formatfeature = _config.with(formatfeature);
        if (formatfeature == _config)
            formatfeature = this;
        else
            formatfeature = _new(this, formatfeature);
        return formatfeature;
    }

    public ObjectWriter with(FormatSchema formatschema) {
        GeneratorSettings generatorsettings = _generatorSettings.with(formatschema);
        if (generatorsettings == _generatorSettings) {
            formatschema = this;
        } else {
            _verifySchemaType(formatschema);
            formatschema = _new(generatorsettings, _prefetch);
        }
        return formatschema;
    }

    public ObjectWriter with(JsonFactory jsonfactory) {
        if (jsonfactory == _generatorFactory)
            jsonfactory = this;
        else
            jsonfactory = _new(this, jsonfactory);
        return jsonfactory;
    }

    public ObjectWriter with(com.fasterxml.jackson.core.JsonGenerator.Feature feature) {
        feature = _config.with(feature);
        if (feature == _config)
            feature = this;
        else
            feature = _new(this, feature);
        return feature;
    }

    public ObjectWriter with(PrettyPrinter prettyprinter) {
        prettyprinter = _generatorSettings.with(prettyprinter);
        if (prettyprinter == _generatorSettings)
            prettyprinter = this;
        else
            prettyprinter = _new(prettyprinter, _prefetch);
        return prettyprinter;
    }

    public ObjectWriter with(CharacterEscapes characterescapes) {
        characterescapes = _generatorSettings.with(characterescapes);
        if (characterescapes == _generatorSettings)
            characterescapes = this;
        else
            characterescapes = _new(characterescapes, _prefetch);
        return characterescapes;
    }

    public ObjectWriter with(SerializationFeature serializationfeature) {
        serializationfeature = _config.with(serializationfeature);
        if (serializationfeature == _config)
            serializationfeature = this;
        else
            serializationfeature = _new(this, serializationfeature);
        return serializationfeature;
    }

    public transient ObjectWriter with(SerializationFeature serializationfeature, SerializationFeature aserializationfeature[]) {
        serializationfeature = _config.with(serializationfeature, aserializationfeature);
        if (serializationfeature == _config)
            serializationfeature = this;
        else
            serializationfeature = _new(this, serializationfeature);
        return serializationfeature;
    }

    public ObjectWriter with(ContextAttributes contextattributes) {
        contextattributes = _config.with(contextattributes);
        if (contextattributes == _config)
            contextattributes = this;
        else
            contextattributes = _new(this, contextattributes);
        return contextattributes;
    }

    public ObjectWriter with(FilterProvider filterprovider) {
        if (filterprovider == _config.getFilterProvider())
            filterprovider = this;
        else
            filterprovider = _new(this, _config.withFilters(filterprovider));
        return filterprovider;
    }

    public ObjectWriter with(DateFormat dateformat) {
        dateformat = _config.with(dateformat);
        if (dateformat == _config)
            dateformat = this;
        else
            dateformat = _new(this, dateformat);
        return dateformat;
    }

    public ObjectWriter with(Locale locale) {
        locale = _config.with(locale);
        if (locale == _config)
            locale = this;
        else
            locale = _new(this, locale);
        return locale;
    }

    public ObjectWriter with(TimeZone timezone) {
        timezone = _config.with(timezone);
        if (timezone == _config)
            timezone = this;
        else
            timezone = _new(this, timezone);
        return timezone;
    }

    public ObjectWriter withAttribute(Object obj, Object obj1) {
        obj = (SerializationConfig)_config.withAttribute(obj, obj1);
        if (obj == _config)
            obj = this;
        else
            obj = _new(this, ((SerializationConfig) (obj)));
        return ((ObjectWriter) (obj));
    }

    public ObjectWriter withAttributes(Map map) {
        map = (SerializationConfig)_config.withAttributes(map);
        if (map == _config)
            map = this;
        else
            map = _new(this, map);
        return map;
    }

    public ObjectWriter withDefaultPrettyPrinter() {
        return with(_config.getDefaultPrettyPrinter());
    }

    public transient ObjectWriter withFeatures(FormatFeature aformatfeature[]) {
        aformatfeature = _config.withFeatures(aformatfeature);
        if (aformatfeature == _config)
            aformatfeature = this;
        else
            aformatfeature = _new(this, aformatfeature);
        return aformatfeature;
    }

    public transient ObjectWriter withFeatures(com.fasterxml.jackson.core.JsonGenerator.Feature afeature[]) {
        afeature = _config.withFeatures(afeature);
        if (afeature == _config)
            afeature = this;
        else
            afeature = _new(this, afeature);
        return afeature;
    }

    public transient ObjectWriter withFeatures(SerializationFeature aserializationfeature[]) {
        aserializationfeature = _config.withFeatures(aserializationfeature);
        if (aserializationfeature == _config)
            aserializationfeature = this;
        else
            aserializationfeature = _new(this, aserializationfeature);
        return aserializationfeature;
    }

    public ObjectWriter withRootName(PropertyName propertyname) {
        propertyname = _config.withRootName(propertyname);
        if (propertyname == _config)
            propertyname = this;
        else
            propertyname = _new(this, propertyname);
        return propertyname;
    }

    public ObjectWriter withRootName(String s) {
        s = (SerializationConfig)_config.withRootName(s);
        if (s == _config)
            s = this;
        else
            s = _new(this, s);
        return s;
    }

    public ObjectWriter withRootValueSeparator(SerializableString serializablestring) {
        serializablestring = _generatorSettings.withRootValueSeparator(serializablestring);
        if (serializablestring == _generatorSettings)
            serializablestring = this;
        else
            serializablestring = _new(serializablestring, _prefetch);
        return serializablestring;
    }

    public ObjectWriter withRootValueSeparator(String s) {
        s = _generatorSettings.withRootValueSeparator(s);
        if (s == _generatorSettings)
            s = this;
        else
            s = _new(s, _prefetch);
        return s;
    }

    public ObjectWriter withSchema(FormatSchema formatschema) {
        return with(formatschema);
    }

    public ObjectWriter withType(TypeReference typereference) {
        return forType(typereference);
    }

    public ObjectWriter withType(JavaType javatype) {
        return forType(javatype);
    }

    public ObjectWriter withType(Class class1) {
        return forType(class1);
    }

    public ObjectWriter withView(Class class1) {
        class1 = _config.withView(class1);
        if (class1 == _config)
            class1 = this;
        else
            class1 = _new(this, class1);
        return class1;
    }

    public ObjectWriter without(FormatFeature formatfeature) {
        formatfeature = _config.without(formatfeature);
        if (formatfeature == _config)
            formatfeature = this;
        else
            formatfeature = _new(this, formatfeature);
        return formatfeature;
    }

    public ObjectWriter without(com.fasterxml.jackson.core.JsonGenerator.Feature feature) {
        feature = _config.without(feature);
        if (feature == _config)
            feature = this;
        else
            feature = _new(this, feature);
        return feature;
    }

    public ObjectWriter without(SerializationFeature serializationfeature) {
        serializationfeature = _config.without(serializationfeature);
        if (serializationfeature == _config)
            serializationfeature = this;
        else
            serializationfeature = _new(this, serializationfeature);
        return serializationfeature;
    }

    public transient ObjectWriter without(SerializationFeature serializationfeature, SerializationFeature aserializationfeature[]) {
        serializationfeature = _config.without(serializationfeature, aserializationfeature);
        if (serializationfeature == _config)
            serializationfeature = this;
        else
            serializationfeature = _new(this, serializationfeature);
        return serializationfeature;
    }

    public ObjectWriter withoutAttribute(Object obj) {
        obj = (SerializationConfig)_config.withoutAttribute(obj);
        if (obj == _config)
            obj = this;
        else
            obj = _new(this, ((SerializationConfig) (obj)));
        return ((ObjectWriter) (obj));
    }

    public transient ObjectWriter withoutFeatures(FormatFeature aformatfeature[]) {
        aformatfeature = _config.withoutFeatures(aformatfeature);
        if (aformatfeature == _config)
            aformatfeature = this;
        else
            aformatfeature = _new(this, aformatfeature);
        return aformatfeature;
    }

    public transient ObjectWriter withoutFeatures(com.fasterxml.jackson.core.JsonGenerator.Feature afeature[]) {
        afeature = _config.withoutFeatures(afeature);
        if (afeature == _config)
            afeature = this;
        else
            afeature = _new(this, afeature);
        return afeature;
    }

    public transient ObjectWriter withoutFeatures(SerializationFeature aserializationfeature[]) {
        aserializationfeature = _config.withoutFeatures(aserializationfeature);
        if (aserializationfeature == _config)
            aserializationfeature = this;
        else
            aserializationfeature = _new(this, aserializationfeature);
        return aserializationfeature;
    }

    public ObjectWriter withoutRootName() {
        Object obj = _config.withRootName(PropertyName.NO_NAME);
        if (obj == _config)
            obj = this;
        else
            obj = _new(this, ((SerializationConfig) (obj)));
        return ((ObjectWriter) (obj));
    }

    public void writeValue(JsonGenerator jsongenerator, Object obj) {
        _configureGenerator(jsongenerator);
        if (!_config.isEnabled(SerializationFeature.CLOSE_CLOSEABLE) || !(obj instanceof Closeable)) goto _L2; else goto _L1
_L1:
        Closeable closeable = (Closeable)obj;
        _prefetch.serialize(jsongenerator, obj, _serializerProvider());
        if (_config.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE))
            jsongenerator.flush();
        obj = null;
        closeable.close();
        if (true)
            break MISSING_BLOCK_LABEL_80;
        throw new NullPointerException();
_L3:
        return;
        jsongenerator;
        obj = closeable;
_L4:
        if (obj != null)
            try {
                ((Closeable) (obj)).close();
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) { }
        throw jsongenerator;
_L2:
        _prefetch.serialize(jsongenerator, obj, _serializerProvider());
        if (_config.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE))
            jsongenerator.flush();
          goto _L3
        jsongenerator;
          goto _L3
        jsongenerator;
          goto _L4
    }

    public void writeValue(File file, Object obj) {
        _configAndWriteValue(_generatorFactory.createGenerator(file, JsonEncoding.UTF8), obj);
    }

    public void writeValue(OutputStream outputstream, Object obj) {
        _configAndWriteValue(_generatorFactory.createGenerator(outputstream, JsonEncoding.UTF8), obj);
    }

    public void writeValue(Writer writer, Object obj) {
        _configAndWriteValue(_generatorFactory.createGenerator(writer), obj);
    }

    public byte[] writeValueAsBytes(Object obj) {
        ByteArrayBuilder bytearraybuilder = new ByteArrayBuilder(_generatorFactory._getBufferRecycler());
        try {
            _configAndWriteValue(_generatorFactory.createGenerator(bytearraybuilder, JsonEncoding.UTF8), obj);
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            throw obj;
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            throw JsonMappingException.fromUnexpectedIOE(((IOException) (obj)));
        }
        obj = bytearraybuilder.toByteArray();
        bytearraybuilder.release();
        return ((byte []) (obj));
    }

    public String writeValueAsString(Object obj) {
        SegmentedStringWriter segmentedstringwriter = new SegmentedStringWriter(_generatorFactory._getBufferRecycler());
        try {
            _configAndWriteValue(_generatorFactory.createGenerator(segmentedstringwriter), obj);
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            throw obj;
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            throw JsonMappingException.fromUnexpectedIOE(((IOException) (obj)));
        }
        return segmentedstringwriter.getAndClear();
    }

    public SequenceWriter writeValues(JsonGenerator jsongenerator) {
        _configureGenerator(jsongenerator);
        return _newSequenceWriter(false, jsongenerator, false);
    }

    public SequenceWriter writeValues(File file) {
        return _newSequenceWriter(false, _generatorFactory.createGenerator(file, JsonEncoding.UTF8), true);
    }

    public SequenceWriter writeValues(OutputStream outputstream) {
        return _newSequenceWriter(false, _generatorFactory.createGenerator(outputstream, JsonEncoding.UTF8), true);
    }

    public SequenceWriter writeValues(Writer writer) {
        return _newSequenceWriter(false, _generatorFactory.createGenerator(writer), true);
    }

    public SequenceWriter writeValuesAsArray(JsonGenerator jsongenerator) {
        return _newSequenceWriter(true, jsongenerator, false);
    }

    public SequenceWriter writeValuesAsArray(File file) {
        return _newSequenceWriter(true, _generatorFactory.createGenerator(file, JsonEncoding.UTF8), true);
    }

    public SequenceWriter writeValuesAsArray(OutputStream outputstream) {
        return _newSequenceWriter(true, _generatorFactory.createGenerator(outputstream, JsonEncoding.UTF8), true);
    }

    public SequenceWriter writeValuesAsArray(Writer writer) {
        return _newSequenceWriter(true, _generatorFactory.createGenerator(writer), true);
    }

}
