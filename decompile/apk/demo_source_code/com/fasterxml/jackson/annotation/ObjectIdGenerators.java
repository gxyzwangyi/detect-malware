// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.annotation;

import java.util.UUID;

// Referenced classes of package com.fasterxml.jackson.annotation:
//            ObjectIdGenerator

public class ObjectIdGenerators {
    private static abstract class Base extends ObjectIdGenerator {

        protected final Class _scope;

        public boolean canUseFor(ObjectIdGenerator objectidgenerator) {
            boolean flag;
            if (objectidgenerator.getClass() == getClass() && objectidgenerator.getScope() == _scope)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public abstract Object generateId(Object obj);

        public final Class getScope() {
            return _scope;
        }

        protected Base(Class class1) {
            _scope = class1;
        }
    }

    public static final class IntSequenceGenerator extends Base {

        private static final long serialVersionUID = 1L;
        protected transient int _nextValue;

        public volatile boolean canUseFor(ObjectIdGenerator objectidgenerator) {
            return super.canUseFor(objectidgenerator);
        }

        public ObjectIdGenerator forScope(Class class1) {
            if (_scope == class1)
                class1 = this;
            else
                class1 = new IntSequenceGenerator(class1, _nextValue);
            return class1;
        }

        public Integer generateId(Object obj) {
            if (obj == null) {
                obj = null;
            } else {
                int i = _nextValue;
                _nextValue = _nextValue + 1;
                obj = Integer.valueOf(i);
            }
            return ((Integer) (obj));
        }

        public volatile Object generateId(Object obj) {
            return generateId(obj);
        }

        protected int initialValue() {
            return 1;
        }

        public ObjectIdGenerator.IdKey key(Object obj) {
            if (obj == null)
                obj = null;
            else
                obj = new ObjectIdGenerator.IdKey(getClass(), _scope, obj);
            return ((ObjectIdGenerator.IdKey) (obj));
        }

        public ObjectIdGenerator newForSerialization(Object obj) {
            return new IntSequenceGenerator(_scope, initialValue());
        }

        public IntSequenceGenerator() {
            this(java/lang/Object, -1);
        }

        public IntSequenceGenerator(Class class1, int i) {
            super(class1);
            _nextValue = i;
        }
    }

    public static abstract class None extends ObjectIdGenerator {

        public None() {
        }
    }

    public static abstract class PropertyGenerator extends Base {

        private static final long serialVersionUID = 1L;

        public volatile boolean canUseFor(ObjectIdGenerator objectidgenerator) {
            return super.canUseFor(objectidgenerator);
        }

        protected PropertyGenerator(Class class1) {
            super(class1);
        }
    }

    public static final class StringIdGenerator extends Base {

        private static final long serialVersionUID = 1L;

        public boolean canUseFor(ObjectIdGenerator objectidgenerator) {
            return objectidgenerator instanceof StringIdGenerator;
        }

        public ObjectIdGenerator forScope(Class class1) {
            return this;
        }

        public volatile Object generateId(Object obj) {
            return generateId(obj);
        }

        public String generateId(Object obj) {
            return UUID.randomUUID().toString();
        }

        public ObjectIdGenerator.IdKey key(Object obj) {
            Object obj1 = null;
            if (obj == null)
                obj = obj1;
            else
                obj = new ObjectIdGenerator.IdKey(getClass(), null, obj);
            return ((ObjectIdGenerator.IdKey) (obj));
        }

        public ObjectIdGenerator newForSerialization(Object obj) {
            return this;
        }

        public StringIdGenerator() {
            this(java/lang/Object);
        }

        private StringIdGenerator(Class class1) {
            super(java/lang/Object);
        }
    }

    public static final class UUIDGenerator extends Base {

        private static final long serialVersionUID = 1L;

        public boolean canUseFor(ObjectIdGenerator objectidgenerator) {
            boolean flag;
            if (objectidgenerator.getClass() == getClass())
                flag = true;
            else
                flag = false;
            return flag;
        }

        public ObjectIdGenerator forScope(Class class1) {
            return this;
        }

        public volatile Object generateId(Object obj) {
            return generateId(obj);
        }

        public UUID generateId(Object obj) {
            return UUID.randomUUID();
        }

        public ObjectIdGenerator.IdKey key(Object obj) {
            Object obj1 = null;
            if (obj == null)
                obj = obj1;
            else
                obj = new ObjectIdGenerator.IdKey(getClass(), null, obj);
            return ((ObjectIdGenerator.IdKey) (obj));
        }

        public ObjectIdGenerator newForSerialization(Object obj) {
            return this;
        }

        public UUIDGenerator() {
            this(java/lang/Object);
        }

        private UUIDGenerator(Class class1) {
            super(java/lang/Object);
        }
    }


    public ObjectIdGenerators() {
    }
}
