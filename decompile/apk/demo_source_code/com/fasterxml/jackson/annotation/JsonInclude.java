// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.annotation;

import java.io.Serializable;
import java.lang.annotation.Annotation;

// Referenced classes of package com.fasterxml.jackson.annotation:
//            JacksonAnnotationValue

public interface JsonInclude
    extends Annotation {
    public static final class Include extends Enum {

        private static final Include $VALUES[];
        public static final Include ALWAYS;
        public static final Include NON_ABSENT;
        public static final Include NON_DEFAULT;
        public static final Include NON_EMPTY;
        public static final Include NON_NULL;
        public static final Include USE_DEFAULTS;

        public static Include valueOf(String s) {
            return (Include)Enum.valueOf(com/fasterxml/jackson/annotation/JsonInclude$Include, s);
        }

        public static Include[] values() {
            return (Include[])$VALUES.clone();
        }

        static  {
            ALWAYS = new Include("ALWAYS", 0);
            NON_NULL = new Include("NON_NULL", 1);
            NON_ABSENT = new Include("NON_ABSENT", 2);
            NON_EMPTY = new Include("NON_EMPTY", 3);
            NON_DEFAULT = new Include("NON_DEFAULT", 4);
            USE_DEFAULTS = new Include("USE_DEFAULTS", 5);
            $VALUES = (new Include[] {
                ALWAYS, NON_NULL, NON_ABSENT, NON_EMPTY, NON_DEFAULT, USE_DEFAULTS
            });
        }

        private Include(String s, int i) {
            super(s, i);
        }
    }

    public static class Value
        implements JacksonAnnotationValue, Serializable {

        protected static final Value EMPTY;
        private static final long serialVersionUID = 1L;
        protected final Include _contentInclusion;
        protected final Include _valueInclusion;

        public static Value construct(Include include, Include include1) {
            if ((include == Include.USE_DEFAULTS || include == null) && (include1 == Include.USE_DEFAULTS || include1 == null))
                include = EMPTY;
            else
                include = new Value(include, include1);
            return include;
        }

        public static Value empty() {
            return EMPTY;
        }

        public static Value from(JsonInclude jsoninclude) {
            if (jsoninclude == null) {
                jsoninclude = null;
            } else {
                Include include = jsoninclude.value();
                jsoninclude = jsoninclude.content();
                if (include == Include.USE_DEFAULTS && jsoninclude == Include.USE_DEFAULTS)
                    jsoninclude = EMPTY;
                else
                    jsoninclude = new Value(include, jsoninclude);
            }
            return jsoninclude;
        }

        public boolean equals(Object obj) {
            boolean flag = true;
            if (obj != this) goto _L2; else goto _L1
_L1:
            return flag;
_L2:
            if (obj == null)
                flag = false;
            else
            if (obj.getClass() != getClass()) {
                flag = false;
            } else {
                obj = (Value)obj;
                if (((Value) (obj))._valueInclusion != _valueInclusion || ((Value) (obj))._contentInclusion != _contentInclusion)
                    flag = false;
            }
            if (true) goto _L1; else goto _L3
_L3:
        }

        public Include getContentInclusion() {
            return _contentInclusion;
        }

        public Include getValueInclusion() {
            return _valueInclusion;
        }

        public int hashCode() {
            return (_valueInclusion.hashCode() << 2) + _contentInclusion.hashCode();
        }

        protected Object readResolve() {
            Value value1 = this;
            if (_valueInclusion == Include.USE_DEFAULTS) {
                value1 = this;
                if (_contentInclusion == Include.USE_DEFAULTS)
                    value1 = EMPTY;
            }
            return value1;
        }

        public String toString() {
            return String.format("[value=%s,content=%s]", new Object[] {
                _valueInclusion, _contentInclusion
            });
        }

        public Class valueFor() {
            return com/fasterxml/jackson/annotation/JsonInclude;
        }

        public Value withContentInclusion(Include include) {
            if (include == _contentInclusion)
                include = this;
            else
                include = new Value(_valueInclusion, include);
            return include;
        }

        public Value withOverrides(Value value1) {
            boolean flag1;
            Object obj;
            flag1 = true;
            obj = this;
            if (value1 == null) goto _L2; else goto _L1
_L1:
            if (value1 != EMPTY) goto _L4; else goto _L3
_L3:
            obj = this;
_L2:
            return ((Value) (obj));
_L4:
            obj = value1._valueInclusion;
            value1 = value1._contentInclusion;
            boolean flag;
            if (obj != _valueInclusion && obj != Include.USE_DEFAULTS)
                flag = true;
            else
                flag = false;
            if (value1 == _contentInclusion || value1 == Include.USE_DEFAULTS)
                flag1 = false;
            if (flag) {
                if (flag1)
                    obj = new Value(((Include) (obj)), value1);
                else
                    obj = new Value(((Include) (obj)), _contentInclusion);
            } else {
                obj = this;
                if (flag1)
                    obj = new Value(_valueInclusion, value1);
            }
            if (true) goto _L2; else goto _L5
_L5:
        }

        public Value withValueInclusion(Include include) {
            if (include == _valueInclusion)
                include = this;
            else
                include = new Value(include, _contentInclusion);
            return include;
        }

        static  {
            EMPTY = new Value(Include.USE_DEFAULTS, Include.USE_DEFAULTS);
        }

        protected Value(Include include, Include include1) {
            Include include2 = include;
            if (include == null)
                include2 = Include.USE_DEFAULTS;
            _valueInclusion = include2;
            include = include1;
            if (include1 == null)
                include = Include.USE_DEFAULTS;
            _contentInclusion = include;
        }

        public Value(JsonInclude jsoninclude) {
            this(jsoninclude.value(), jsoninclude.content());
        }
    }


    public abstract Include content();

    public abstract Include value();
}
