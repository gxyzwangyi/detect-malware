// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.annotation;

import java.io.Serializable;
import java.lang.annotation.Annotation;
import java.util.Locale;
import java.util.TimeZone;

// Referenced classes of package com.fasterxml.jackson.annotation:
//            JacksonAnnotationValue

public interface JsonFormat
    extends Annotation {
    public static final class Feature extends Enum {

        private static final Feature $VALUES[];
        public static final Feature ACCEPT_SINGLE_VALUE_AS_ARRAY;
        public static final Feature WRITE_DATES_WITH_ZONE_ID;
        public static final Feature WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
        public static final Feature WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
        public static final Feature WRITE_SORTED_MAP_ENTRIES;

        public static Feature valueOf(String s) {
            return (Feature)Enum.valueOf(com/fasterxml/jackson/annotation/JsonFormat$Feature, s);
        }

        public static Feature[] values() {
            return (Feature[])$VALUES.clone();
        }

        static  {
            ACCEPT_SINGLE_VALUE_AS_ARRAY = new Feature("ACCEPT_SINGLE_VALUE_AS_ARRAY", 0);
            WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS = new Feature("WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS", 1);
            WRITE_DATES_WITH_ZONE_ID = new Feature("WRITE_DATES_WITH_ZONE_ID", 2);
            WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED = new Feature("WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED", 3);
            WRITE_SORTED_MAP_ENTRIES = new Feature("WRITE_SORTED_MAP_ENTRIES", 4);
            $VALUES = (new Feature[] {
                ACCEPT_SINGLE_VALUE_AS_ARRAY, WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS, WRITE_DATES_WITH_ZONE_ID, WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED, WRITE_SORTED_MAP_ENTRIES
            });
        }

        private Feature(String s, int i) {
            super(s, i);
        }
    }

    public static class Features {

        private static final Features EMPTY = new Features(0, 0);
        private final int _disabled;
        private final int _enabled;

        public static Features construct(JsonFormat jsonformat) {
            return construct(jsonformat.with(), jsonformat.without());
        }

        public static Features construct(Feature afeature[], Feature afeature1[]) {
            boolean flag = false;
            int l = afeature.length;
            int j = 0;
            int i = 0;
            for (; j < l; j++)
                i |= 1 << afeature[j].ordinal();

            int i1 = afeature1.length;
            l = 0;
            for (int k = ((flag) ? 1 : 0); k < i1; k++)
                l |= 1 << afeature1[k].ordinal();

            return new Features(i, l);
        }

        public static Features empty() {
            return EMPTY;
        }

        public boolean equals(Object obj) {
            boolean flag = true;
            if (obj != this) goto _L2; else goto _L1
_L1:
            return flag;
_L2:
            if (obj == null)
                flag = false;
            else
            if (obj.getClass() != getClass()) {
                flag = false;
            } else {
                obj = (Features)obj;
                if (((Features) (obj))._enabled != _enabled || ((Features) (obj))._disabled != _disabled)
                    flag = false;
            }
            if (true) goto _L1; else goto _L3
_L3:
        }

        public Boolean get(Feature feature) {
            int i = 1 << feature.ordinal();
            if ((_disabled & i) != 0)
                feature = Boolean.FALSE;
            else
            if ((i & _enabled) != 0)
                feature = Boolean.TRUE;
            else
                feature = null;
            return feature;
        }

        public int hashCode() {
            return _disabled + _enabled;
        }

        public transient Features with(Feature afeature[]) {
            int i = _enabled;
            int k = afeature.length;
            for (int j = 0; j < k; j++)
                i |= 1 << afeature[j].ordinal();

            if (i == _enabled)
                afeature = this;
            else
                afeature = new Features(i, _disabled);
            return afeature;
        }

        public Features withOverrides(Features features) {
            if (features != null) goto _L2; else goto _L1
_L1:
            Features features1 = this;
_L4:
            return features1;
_L2:
            int j = features._disabled;
            int k = features._enabled;
            if (j == 0) {
                features1 = this;
                if (k == 0)
                    continue; /* Loop/switch isn't completed */
            }
            if (_enabled == 0 && _disabled == 0) {
                features1 = features;
                continue; /* Loop/switch isn't completed */
            }
            int i = _enabled & ~j | k;
            j |= ~k & _disabled;
            if (i == _enabled) {
                features1 = this;
                if (j == _disabled)
                    continue; /* Loop/switch isn't completed */
            }
            features1 = new Features(i, j);
            if (true) goto _L4; else goto _L3
_L3:
        }

        public transient Features without(Feature afeature[]) {
            int j = _disabled;
            int k = afeature.length;
            for (int i = 0; i < k; i++)
                j |= 1 << afeature[i].ordinal();

            if (j == _disabled)
                afeature = this;
            else
                afeature = new Features(_enabled, j);
            return afeature;
        }


        private Features(int i, int j) {
            _enabled = i;
            _disabled = j;
        }
    }

    public static final class Shape extends Enum {

        private static final Shape $VALUES[];
        public static final Shape ANY;
        public static final Shape ARRAY;
        public static final Shape BOOLEAN;
        public static final Shape NUMBER;
        public static final Shape NUMBER_FLOAT;
        public static final Shape NUMBER_INT;
        public static final Shape OBJECT;
        public static final Shape SCALAR;
        public static final Shape STRING;

        public static Shape valueOf(String s) {
            return (Shape)Enum.valueOf(com/fasterxml/jackson/annotation/JsonFormat$Shape, s);
        }

        public static Shape[] values() {
            return (Shape[])$VALUES.clone();
        }

        public boolean isNumeric() {
            boolean flag;
            if (this == NUMBER || this == NUMBER_INT || this == NUMBER_FLOAT)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public boolean isStructured() {
            boolean flag;
            if (this == OBJECT || this == ARRAY)
                flag = true;
            else
                flag = false;
            return flag;
        }

        static  {
            ANY = new Shape("ANY", 0);
            SCALAR = new Shape("SCALAR", 1);
            ARRAY = new Shape("ARRAY", 2);
            OBJECT = new Shape("OBJECT", 3);
            NUMBER = new Shape("NUMBER", 4);
            NUMBER_FLOAT = new Shape("NUMBER_FLOAT", 5);
            NUMBER_INT = new Shape("NUMBER_INT", 6);
            STRING = new Shape("STRING", 7);
            BOOLEAN = new Shape("BOOLEAN", 8);
            $VALUES = (new Shape[] {
                ANY, SCALAR, ARRAY, OBJECT, NUMBER, NUMBER_FLOAT, NUMBER_INT, STRING, BOOLEAN
            });
        }

        private Shape(String s, int i) {
            super(s, i);
        }
    }

    public static class Value
        implements JacksonAnnotationValue, Serializable {

        private static final Value EMPTY = new Value();
        private static final long serialVersionUID = 1L;
        private final Features _features;
        private final Locale _locale;
        private final String _pattern;
        private final Shape _shape;
        private transient TimeZone _timezone;
        private final String _timezoneStr;

        private static boolean _equal(Object obj, Object obj1) {
            boolean flag = false;
            if (obj != null) goto _L2; else goto _L1
_L1:
            if (obj1 == null)
                flag = true;
_L4:
            return flag;
_L2:
            if (obj1 != null)
                flag = obj.equals(obj1);
            if (true) goto _L4; else goto _L3
_L3:
        }

        public static final Value empty() {
            return EMPTY;
        }

        public static Value forPattern(String s) {
            return new Value(s, null, null, null, null, Features.empty());
        }

        public static Value forShape(Shape shape1) {
            return new Value(null, shape1, null, null, null, Features.empty());
        }

        public static final Value from(JsonFormat jsonformat) {
            if (jsonformat == null)
                jsonformat = null;
            else
                jsonformat = new Value(jsonformat);
            return jsonformat;
        }

        public boolean equals(Object obj) {
            boolean flag1;
            boolean flag2;
            flag1 = true;
            flag2 = false;
            if (obj != this) goto _L2; else goto _L1
_L1:
            boolean flag = true;
_L4:
            return flag;
_L2:
            flag = flag2;
            if (obj != null) {
                flag = flag2;
                if (obj.getClass() == getClass()) {
                    obj = (Value)obj;
                    flag = flag2;
                    if (_shape == ((Value) (obj))._shape) {
                        flag = flag2;
                        if (_features.equals(((Value) (obj))._features))
                            if (_equal(_timezoneStr, ((Value) (obj))._timezoneStr) && _equal(_pattern, ((Value) (obj))._pattern) && _equal(_timezone, ((Value) (obj))._timezone) && _equal(_locale, ((Value) (obj))._locale))
                                flag = flag1;
                            else
                                flag = false;
                    }
                }
            }
            if (true) goto _L4; else goto _L3
_L3:
        }

        public Boolean getFeature(Feature feature) {
            return _features.get(feature);
        }

        public Locale getLocale() {
            return _locale;
        }

        public String getPattern() {
            return _pattern;
        }

        public Shape getShape() {
            return _shape;
        }

        public TimeZone getTimeZone() {
            TimeZone timezone2 = _timezone;
            TimeZone timezone1 = timezone2;
            if (timezone2 == null)
                if (_timezoneStr == null) {
                    timezone1 = null;
                } else {
                    timezone1 = TimeZone.getTimeZone(_timezoneStr);
                    _timezone = timezone1;
                }
            return timezone1;
        }

        public boolean hasLocale() {
            boolean flag;
            if (_locale != null)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public boolean hasPattern() {
            boolean flag;
            if (_pattern != null && _pattern.length() > 0)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public boolean hasShape() {
            boolean flag;
            if (_shape != Shape.ANY)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public boolean hasTimeZone() {
            boolean flag;
            if (_timezone != null || _timezoneStr != null && !_timezoneStr.isEmpty())
                flag = true;
            else
                flag = false;
            return flag;
        }

        public int hashCode() {
            int i;
            int j;
            if (_timezoneStr == null)
                i = 1;
            else
                i = _timezoneStr.hashCode();
            j = i;
            if (_pattern != null)
                j = i ^ _pattern.hashCode();
            j += _shape.hashCode();
            i = j;
            if (_locale != null)
                i = j ^ _locale.hashCode();
            return i + _features.hashCode();
        }

        public String timeZoneAsString() {
            String s;
            if (_timezone != null)
                s = _timezone.getID();
            else
                s = _timezoneStr;
            return s;
        }

        public String toString() {
            return String.format("[pattern=%s,shape=%s,locale=%s,timezone=%s]", new Object[] {
                _pattern, _shape, _locale, _timezoneStr
            });
        }

        public Class valueFor() {
            return com/fasterxml/jackson/annotation/JsonFormat;
        }

        public Value withFeature(Feature feature) {
            feature = _features.with(new Feature[] {
                feature
            });
            if (feature == _features)
                feature = this;
            else
                feature = new Value(_pattern, _shape, _locale, _timezoneStr, _timezone, feature);
            return feature;
        }

        public Value withLocale(Locale locale1) {
            return new Value(_pattern, _shape, locale1, _timezoneStr, _timezone, _features);
        }

        public final Value withOverrides(Value value) {
            if (value != null && value != EMPTY) goto _L2; else goto _L1
_L1:
            Object obj = this;
_L4:
            return ((Value) (obj));
_L2:
label0:
            {
                obj = value;
                if (this == EMPTY)
                    continue; /* Loop/switch isn't completed */
                String s = value._pattern;
                if (s != null) {
                    obj = s;
                    if (!s.isEmpty())
                        break label0;
                }
                obj = _pattern;
            }
            Object obj1 = value._shape;
            Shape shape1 = ((Shape) (obj1));
            if (obj1 == Shape.ANY)
                shape1 = _shape;
            Object obj2 = value._locale;
            obj1 = obj2;
            if (obj2 == null)
                obj1 = _locale;
            obj2 = _features;
            TimeZone timezone1;
            String s1;
            if (obj2 == null)
                obj2 = value._features;
            else
                obj2 = ((Features) (obj2)).withOverrides(value._features);
            s1 = value._timezoneStr;
            if (s1 == null || s1.isEmpty()) {
                value = _timezoneStr;
                timezone1 = _timezone;
            } else {
                timezone1 = value._timezone;
                value = s1;
            }
            obj = new Value(((String) (obj)), shape1, ((Locale) (obj1)), value, timezone1, ((Features) (obj2)));
            if (true) goto _L4; else goto _L3
_L3:
        }

        public Value withPattern(String s) {
            return new Value(s, _shape, _locale, _timezoneStr, _timezone, _features);
        }

        public Value withShape(Shape shape1) {
            return new Value(_pattern, shape1, _locale, _timezoneStr, _timezone, _features);
        }

        public Value withTimeZone(TimeZone timezone1) {
            return new Value(_pattern, _shape, _locale, null, timezone1, _features);
        }

        public Value withoutFeature(Feature feature) {
            feature = _features.without(new Feature[] {
                feature
            });
            if (feature == _features)
                feature = this;
            else
                feature = new Value(_pattern, _shape, _locale, _timezoneStr, _timezone, feature);
            return feature;
        }


        public Value() {
            this("", Shape.ANY, "", "", Features.empty());
        }

        public Value(JsonFormat jsonformat) {
            this(jsonformat.pattern(), jsonformat.shape(), jsonformat.locale(), jsonformat.timezone(), Features.construct(jsonformat));
        }

        public Value(String s, Shape shape1, String s1, String s2) {
            this(s, shape1, s1, s2, Features.empty());
        }

        public Value(String s, Shape shape1, String s1, String s2, Features features) {
            if (s1 == null || s1.length() == 0 || "##default".equals(s1))
                s1 = null;
            else
                s1 = new Locale(s1);
            if (s2 == null || s2.length() == 0 || "##default".equals(s2))
                s2 = null;
            this(s, shape1, ((Locale) (s1)), s2, null, features);
        }

        public Value(String s, Shape shape1, Locale locale1, String s1, TimeZone timezone1) {
            this(s, shape1, locale1, s1, timezone1, Features.empty());
        }

        public Value(String s, Shape shape1, Locale locale1, String s1, TimeZone timezone1, Features features) {
            _pattern = s;
            s = shape1;
            if (shape1 == null)
                s = Shape.ANY;
            _shape = s;
            _locale = locale1;
            _timezone = timezone1;
            _timezoneStr = s1;
            s = features;
            if (features == null)
                s = Features.empty();
            _features = s;
        }

        public Value(String s, Shape shape1, Locale locale1, TimeZone timezone1) {
            this(s, shape1, locale1, timezone1, Features.empty());
        }

        public Value(String s, Shape shape1, Locale locale1, TimeZone timezone1, Features features) {
            _pattern = s;
            s = shape1;
            if (shape1 == null)
                s = Shape.ANY;
            _shape = s;
            _locale = locale1;
            _timezone = timezone1;
            _timezoneStr = null;
            s = features;
            if (features == null)
                s = Features.empty();
            _features = s;
        }
    }


    public static final String DEFAULT_LOCALE = "##default";
    public static final String DEFAULT_TIMEZONE = "##default";

    public abstract String locale();

    public abstract String pattern();

    public abstract Shape shape();

    public abstract String timezone();

    public abstract Feature[] with();

    public abstract Feature[] without();
}
