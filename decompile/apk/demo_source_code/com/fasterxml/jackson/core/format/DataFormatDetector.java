// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.core.format;

import com.fasterxml.jackson.core.JsonFactory;
import java.io.InputStream;
import java.util.Collection;

// Referenced classes of package com.fasterxml.jackson.core.format:
//            MatchStrength, DataFormatMatcher

public class DataFormatDetector {

    public static final int DEFAULT_MAX_INPUT_LOOKAHEAD = 64;
    protected final JsonFactory _detectors[];
    protected final int _maxInputLookahead;
    protected final MatchStrength _minimalMatch;
    protected final MatchStrength _optimalMatch;

    public DataFormatDetector(Collection collection) {
        this((JsonFactory[])collection.toArray(new JsonFactory[collection.size()]));
    }

    public transient DataFormatDetector(JsonFactory ajsonfactory[]) {
        this(ajsonfactory, MatchStrength.SOLID_MATCH, MatchStrength.WEAK_MATCH, 64);
    }

    private DataFormatDetector(JsonFactory ajsonfactory[], MatchStrength matchstrength, MatchStrength matchstrength1, int i) {
        _detectors = ajsonfactory;
        _optimalMatch = matchstrength;
        _minimalMatch = matchstrength1;
        _maxInputLookahead = i;
    }

    private DataFormatMatcher _findFormat(InputAccessor.Std std) {
        int i;
        int j;
        JsonFactory jsonfactory;
        MatchStrength matchstrength;
        JsonFactory ajsonfactory[];
        ajsonfactory = _detectors;
        j = ajsonfactory.length;
        i = 0;
        jsonfactory = null;
        matchstrength = null;
_L3:
        MatchStrength matchstrength1;
        JsonFactory jsonfactory1;
        if (i >= j)
            break; /* Loop/switch isn't completed */
        jsonfactory1 = ajsonfactory[i];
        std.reset();
        matchstrength1 = jsonfactory1.hasFormat(std);
          goto _L1
_L4:
        i++;
        if (true) goto _L3; else goto _L2
_L1:
        if (matchstrength1 != null && (matchstrength1.ordinal() >= _minimalMatch.ordinal() && (jsonfactory == null || matchstrength.ordinal() < matchstrength1.ordinal()))) goto _L5; else goto _L4
_L5:
        if (matchstrength1.ordinal() < _optimalMatch.ordinal()) goto _L7; else goto _L6
_L6:
        jsonfactory = jsonfactory1;
_L8:
        return std.createMatcher(jsonfactory, matchstrength1);
_L2:
        matchstrength1 = matchstrength;
        if (true) goto _L8; else goto _L7
_L7:
        matchstrength = matchstrength1;
        jsonfactory = jsonfactory1;
          goto _L4
    }

    public DataFormatMatcher findFormat(InputStream inputstream) {
        return _findFormat(new InputAccessor.Std(inputstream, new byte[_maxInputLookahead]));
    }

    public DataFormatMatcher findFormat(byte abyte0[]) {
        return _findFormat(new InputAccessor.Std(abyte0));
    }

    public DataFormatMatcher findFormat(byte abyte0[], int i, int j) {
        return _findFormat(new InputAccessor.Std(abyte0, i, j));
    }

    public String toString() {
        StringBuilder stringbuilder = new StringBuilder();
        stringbuilder.append('[');
        int j = _detectors.length;
        if (j > 0) {
            stringbuilder.append(_detectors[0].getFormatName());
            for (int i = 1; i < j; i++) {
                stringbuilder.append(", ");
                stringbuilder.append(_detectors[i].getFormatName());
            }

        }
        stringbuilder.append(']');
        return stringbuilder.toString();
    }

    public DataFormatDetector withMaxInputLookahead(int i) {
        DataFormatDetector dataformatdetector;
        if (i == _maxInputLookahead)
            dataformatdetector = this;
        else
            dataformatdetector = new DataFormatDetector(_detectors, _optimalMatch, _minimalMatch, i);
        return dataformatdetector;
    }

    public DataFormatDetector withMinimalMatch(MatchStrength matchstrength) {
        if (matchstrength == _minimalMatch)
            matchstrength = this;
        else
            matchstrength = new DataFormatDetector(_detectors, _optimalMatch, matchstrength, _maxInputLookahead);
        return matchstrength;
    }

    public DataFormatDetector withOptimalMatch(MatchStrength matchstrength) {
        if (matchstrength == _optimalMatch)
            matchstrength = this;
        else
            matchstrength = new DataFormatDetector(_detectors, matchstrength, _minimalMatch, _maxInputLookahead);
        return matchstrength;
    }
}
