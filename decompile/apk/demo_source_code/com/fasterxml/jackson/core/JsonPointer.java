// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.core;

import com.fasterxml.jackson.core.io.NumberInput;

public class JsonPointer {

    protected static final JsonPointer EMPTY = new JsonPointer();
    protected final String _asString;
    protected volatile JsonPointer _head;
    protected final int _matchingElementIndex;
    protected final String _matchingPropertyName;
    protected final JsonPointer _nextSegment;

    protected JsonPointer() {
        _nextSegment = null;
        _matchingPropertyName = "";
        _matchingElementIndex = -1;
        _asString = "";
    }

    protected JsonPointer(String s, String s1, int i, JsonPointer jsonpointer) {
        _asString = s;
        _nextSegment = jsonpointer;
        _matchingPropertyName = s1;
        _matchingElementIndex = i;
    }

    protected JsonPointer(String s, String s1, JsonPointer jsonpointer) {
        _asString = s;
        _nextSegment = jsonpointer;
        _matchingPropertyName = s1;
        _matchingElementIndex = _parseIndex(s1);
    }

    private static void _appendEscape(StringBuilder stringbuilder, char c) {
        if (c == '0')
            c = '~';
        else
        if (c == '1')
            c = '/';
        else
            stringbuilder.append('~');
        stringbuilder.append(c);
    }

    private static final int _parseIndex(String s) {
        int i;
        boolean flag;
        byte byte0;
        int k;
        flag = false;
        byte0 = -1;
        k = s.length();
        i = byte0;
        if (k == 0) goto _L2; else goto _L1
_L1:
        if (k <= 10) goto _L4; else goto _L3
_L3:
        i = byte0;
_L2:
        return i;
_L4:
        char c = s.charAt(0);
        if (c <= '0') {
            if (k == 1 && c == '0')
                i = ((flag) ? 1 : 0);
            else
                i = -1;
            continue; /* Loop/switch isn't completed */
        }
        i = byte0;
        if (c > '9')
            continue; /* Loop/switch isn't completed */
        for (int j = 1; j < k; j++) {
            char c1 = s.charAt(j);
            i = byte0;
            if (c1 > '9')
                continue; /* Loop/switch isn't completed */
            i = byte0;
            if (c1 < '0')
                continue; /* Loop/switch isn't completed */
        }

        if (k == 10) {
            i = byte0;
            if (NumberInput.parseLong(s) > 0x7fffffffL)
                continue; /* Loop/switch isn't completed */
        }
        i = NumberInput.parseInt(s);
        if (true) goto _L2; else goto _L5
_L5:
    }

    protected static JsonPointer _parseQuotedTail(String s, int i) {
        int j;
        StringBuilder stringbuilder;
        j = s.length();
        stringbuilder = new StringBuilder(Math.max(16, j));
        if (i > 2)
            stringbuilder.append(s, 1, i - 1);
        _appendEscape(stringbuilder, s.charAt(i));
        i++;
_L3:
        char c;
        if (i >= j)
            break MISSING_BLOCK_LABEL_130;
        c = s.charAt(i);
        if (c != '/') goto _L2; else goto _L1
_L1:
        s = new JsonPointer(s, stringbuilder.toString(), _parseTail(s.substring(i)));
_L4:
        return s;
_L2:
        i++;
        if (c == '~' && i < j) {
            _appendEscape(stringbuilder, s.charAt(i));
            i++;
        } else {
            stringbuilder.append(c);
        }
          goto _L3
        s = new JsonPointer(s, stringbuilder.toString(), EMPTY);
          goto _L4
    }

    protected static JsonPointer _parseTail(String s) {
        int i;
        int j;
        j = s.length();
        i = 1;
_L4:
        char c;
        if (i >= j)
            break MISSING_BLOCK_LABEL_75;
        c = s.charAt(i);
        if (c != '/') goto _L2; else goto _L1
_L1:
        s = new JsonPointer(s, s.substring(1, i), _parseTail(s.substring(i)));
_L5:
        return s;
_L2:
        i++;
        if (c != '~' || i >= j) goto _L4; else goto _L3
_L3:
        s = _parseQuotedTail(s, i);
          goto _L5
        s = new JsonPointer(s, s.substring(1), EMPTY);
          goto _L5
    }

    public static JsonPointer compile(String s) {
        if (s == null || s.length() == 0) {
            s = EMPTY;
        } else {
            if (s.charAt(0) != '/')
                throw new IllegalArgumentException((new StringBuilder()).append("Invalid input: JSON Pointer expression must start with '/': \"").append(s).append("\"").toString());
            s = _parseTail(s);
        }
        return s;
    }

    public static JsonPointer valueOf(String s) {
        return compile(s);
    }

    protected JsonPointer _constructHead() {
        JsonPointer jsonpointer1 = last();
        JsonPointer jsonpointer;
        if (jsonpointer1 == this) {
            jsonpointer = EMPTY;
        } else {
            int i = jsonpointer1._asString.length();
            jsonpointer = _nextSegment;
            jsonpointer = new JsonPointer(_asString.substring(0, _asString.length() - i), _matchingPropertyName, _matchingElementIndex, jsonpointer._constructHead(i, jsonpointer1));
        }
        return jsonpointer;
    }

    protected JsonPointer _constructHead(int i, JsonPointer jsonpointer) {
        if (this == jsonpointer) {
            jsonpointer = EMPTY;
        } else {
            JsonPointer jsonpointer1 = _nextSegment;
            String s = _asString;
            jsonpointer = new JsonPointer(s.substring(0, s.length() - i), _matchingPropertyName, _matchingElementIndex, jsonpointer1._constructHead(i, jsonpointer));
        }
        return jsonpointer;
    }

    public JsonPointer append(JsonPointer jsonpointer) {
        if (this != EMPTY)
            if (jsonpointer == EMPTY) {
                jsonpointer = this;
            } else {
                String s1 = _asString;
                String s = s1;
                if (s1.endsWith("/"))
                    s = s1.substring(0, s1.length() - 1);
                jsonpointer = compile((new StringBuilder()).append(s).append(jsonpointer._asString).toString());
            }
        return jsonpointer;
    }

    public boolean equals(Object obj) {
        boolean flag1 = false;
        if (obj != this) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        flag = flag1;
        if (obj != null) {
            flag = flag1;
            if (obj instanceof JsonPointer)
                flag = _asString.equals(((JsonPointer)obj)._asString);
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public int getMatchingIndex() {
        return _matchingElementIndex;
    }

    public String getMatchingProperty() {
        return _matchingPropertyName;
    }

    public int hashCode() {
        return _asString.hashCode();
    }

    public JsonPointer head() {
        JsonPointer jsonpointer = _head;
        JsonPointer jsonpointer1 = jsonpointer;
        if (jsonpointer == null) {
            if (this != EMPTY)
                jsonpointer = _constructHead();
            _head = jsonpointer;
            jsonpointer1 = jsonpointer;
        }
        return jsonpointer1;
    }

    public JsonPointer last() {
        JsonPointer jsonpointer = this;
        if (this != EMPTY) goto _L2; else goto _L1
_L1:
        jsonpointer = null;
_L4:
        return jsonpointer;
_L2:
        do {
            JsonPointer jsonpointer1 = jsonpointer._nextSegment;
            if (jsonpointer1 == EMPTY)
                continue;
            jsonpointer = jsonpointer1;
        } while (true);
        if (true) goto _L4; else goto _L3
_L3:
    }

    public JsonPointer matchElement(int i) {
        JsonPointer jsonpointer;
        if (i != _matchingElementIndex || i < 0)
            jsonpointer = null;
        else
            jsonpointer = _nextSegment;
        return jsonpointer;
    }

    public JsonPointer matchProperty(String s) {
        if (_nextSegment != null && _matchingPropertyName.equals(s))
            s = _nextSegment;
        else
            s = null;
        return s;
    }

    public boolean matches() {
        boolean flag;
        if (_nextSegment == null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean matchesElement(int i) {
        boolean flag;
        if (i == _matchingElementIndex && i >= 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean matchesProperty(String s) {
        boolean flag;
        if (_nextSegment != null && _matchingPropertyName.equals(s))
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean mayMatchElement() {
        boolean flag;
        if (_matchingElementIndex >= 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean mayMatchProperty() {
        boolean flag;
        if (_matchingPropertyName != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public JsonPointer tail() {
        return _nextSegment;
    }

    public String toString() {
        return _asString;
    }

}
