// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.core.base;

import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.core.io.NumberInput;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.VersionUtil;
import java.io.IOException;

public abstract class ParserMinimalBase extends JsonParser {

    protected static final int INT_BACKSLASH = 92;
    protected static final int INT_COLON = 58;
    protected static final int INT_COMMA = 44;
    protected static final int INT_CR = 13;
    protected static final int INT_E = 69;
    protected static final int INT_HASH = 35;
    protected static final int INT_LBRACKET = 91;
    protected static final int INT_LCURLY = 123;
    protected static final int INT_LF = 10;
    protected static final int INT_PERIOD = 46;
    protected static final int INT_QUOTE = 34;
    protected static final int INT_RBRACKET = 93;
    protected static final int INT_RCURLY = 125;
    protected static final int INT_SLASH = 47;
    protected static final int INT_SPACE = 32;
    protected static final int INT_TAB = 9;
    protected static final int INT_e = 101;
    protected JsonToken _currToken;
    protected JsonToken _lastClearedToken;

    protected ParserMinimalBase() {
    }

    protected ParserMinimalBase(int i) {
        super(i);
    }

    protected static String _ascii(byte abyte0[]) {
        try {
            abyte0 = new String(abyte0, "US-ASCII");
        }
        // Misplaced declaration of an exception variable
        catch (byte abyte0[]) {
            throw new RuntimeException(abyte0);
        }
        return abyte0;
    }

    protected static byte[] _asciiBytes(String s) {
        byte abyte0[] = new byte[s.length()];
        int i = 0;
        for (int j = s.length(); i < j; i++)
            abyte0[i] = (byte)s.charAt(i);

        return abyte0;
    }

    protected static final String _getCharDesc(int i) {
        char c = (char)i;
        String s;
        if (Character.isISOControl(c))
            s = (new StringBuilder()).append("(CTRL-CHAR, code ").append(i).append(")").toString();
        else
        if (i > 255)
            s = (new StringBuilder()).append("'").append(c).append("' (code ").append(i).append(" / 0x").append(Integer.toHexString(i)).append(")").toString();
        else
            s = (new StringBuilder()).append("'").append(c).append("' (code ").append(i).append(")").toString();
        return s;
    }

    protected final JsonParseException _constructError(String s, Throwable throwable) {
        return new JsonParseException(this, s, throwable);
    }

    protected void _decodeBase64(String s, ByteArrayBuilder bytearraybuilder, Base64Variant base64variant) {
        base64variant.decode(s, bytearraybuilder);
_L1:
        return;
        s;
        _reportError(s.getMessage());
          goto _L1
    }

    protected abstract void _handleEOF();

    protected char _handleUnrecognizedCharacterEscape(char c) {
        if (!isEnabled(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER) && (c != '\'' || !isEnabled(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES)))
            _reportError((new StringBuilder()).append("Unrecognized character escape ").append(_getCharDesc(c)).toString());
        return c;
    }

    protected boolean _hasTextualNull(String s) {
        return "null".equals(s);
    }

    protected final void _reportError(String s) {
        throw _constructError(s);
    }

    protected void _reportInvalidEOF() {
        _reportInvalidEOF((new StringBuilder()).append(" in ").append(_currToken).toString());
    }

    protected void _reportInvalidEOF(String s) {
        _reportError((new StringBuilder()).append("Unexpected end-of-input").append(s).toString());
    }

    protected void _reportInvalidEOFInValue() {
        _reportInvalidEOF(" in a value");
    }

    protected void _reportMissingRootWS(int i) {
        _reportUnexpectedChar(i, "Expected space separating root-level values");
    }

    protected void _reportUnexpectedChar(int i, String s) {
        if (i < 0)
            _reportInvalidEOF();
        String s2 = (new StringBuilder()).append("Unexpected character (").append(_getCharDesc(i)).append(")").toString();
        String s1 = s2;
        if (s != null)
            s1 = (new StringBuilder()).append(s2).append(": ").append(s).toString();
        _reportError(s1);
    }

    protected final void _throwInternal() {
        VersionUtil.throwInternal();
    }

    protected void _throwInvalidSpace(int i) {
        i = (char)i;
        _reportError((new StringBuilder()).append("Illegal character (").append(_getCharDesc(i)).append("): only regular white space (\\r, \\n, \\t) is allowed between tokens").toString());
    }

    protected void _throwUnquotedSpace(int i, String s) {
        if (!isEnabled(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS) || i > 32) {
            i = (char)i;
            _reportError((new StringBuilder()).append("Illegal unquoted character (").append(_getCharDesc(i)).append("): has to be escaped using backslash to be included in ").append(s).toString());
        }
    }

    protected final void _wrapError(String s, Throwable throwable) {
        throw _constructError(s, throwable);
    }

    public void clearCurrentToken() {
        if (_currToken != null) {
            _lastClearedToken = _currToken;
            _currToken = null;
        }
    }

    public abstract void close();

    public abstract byte[] getBinaryValue(Base64Variant base64variant);

    public abstract String getCurrentName();

    public JsonToken getCurrentToken() {
        return _currToken;
    }

    public int getCurrentTokenId() {
        JsonToken jsontoken = _currToken;
        int i;
        if (jsontoken == null)
            i = 0;
        else
            i = jsontoken.id();
        return i;
    }

    public JsonToken getLastClearedToken() {
        return _lastClearedToken;
    }

    public abstract JsonStreamContext getParsingContext();

    public abstract String getText();

    public abstract char[] getTextCharacters();

    public abstract int getTextLength();

    public abstract int getTextOffset();

    public boolean getValueAsBoolean(boolean flag) {
        boolean flag2;
        Object obj;
        flag2 = true;
        obj = _currToken;
        if (obj == null) goto _L2; else goto _L1
_L1:
        boolean flag1 = flag2;
        ((JsonToken) (obj)).id();
        JVM INSTR tableswitch 6 12: default 64
    //                   6 68
    //                   7 119
    //                   8 64
    //                   9 66
    //                   10 133
    //                   11 133
    //                   12 138;
           goto _L2 _L3 _L4 _L2 _L5 _L6 _L6 _L7
_L2:
        flag1 = flag;
_L5:
        return flag1;
_L3:
        obj = getText().trim();
        flag1 = flag2;
        if (!"true".equals(obj)) {
            if (!"false".equals(obj))
                continue; /* Loop/switch isn't completed */
            flag1 = false;
        }
          goto _L5
        if (!_hasTextualNull(((String) (obj)))) goto _L2; else goto _L8
_L8:
        flag1 = false;
          goto _L5
_L4:
        flag1 = flag2;
        if (getIntValue() == 0)
            flag1 = false;
          goto _L5
_L6:
        flag1 = false;
          goto _L5
_L7:
        obj = getEmbeddedObject();
        if (!(obj instanceof Boolean)) goto _L2; else goto _L9
_L9:
        flag1 = ((Boolean)obj).booleanValue();
          goto _L5
    }

    public double getValueAsDouble(double d) {
        double d1;
        JsonToken jsontoken;
        jsontoken = _currToken;
        d1 = d;
        if (jsontoken == null) goto _L2; else goto _L1
_L1:
        jsontoken.id();
        JVM INSTR tableswitch 6 12: default 60
    //                   6 64
    //                   7 94
    //                   8 94
    //                   9 102
    //                   10 107
    //                   11 107
    //                   12 112;
           goto _L3 _L4 _L5 _L5 _L6 _L7 _L7 _L8
_L3:
        d1 = d;
_L2:
        return d1;
_L4:
        String s = getText();
        if (_hasTextualNull(s))
            d1 = 0.0D;
        else
            d1 = NumberInput.parseAsDouble(s, d);
        continue; /* Loop/switch isn't completed */
_L5:
        d1 = getDoubleValue();
        continue; /* Loop/switch isn't completed */
_L6:
        d1 = 1.0D;
        continue; /* Loop/switch isn't completed */
_L7:
        d1 = 0.0D;
        continue; /* Loop/switch isn't completed */
_L8:
        Object obj = getEmbeddedObject();
        d1 = d;
        if (obj instanceof Number)
            d1 = ((Number)obj).doubleValue();
        if (true) goto _L2; else goto _L9
_L9:
    }

    public int getValueAsInt() {
        JsonToken jsontoken = _currToken;
        int i;
        if (jsontoken == JsonToken.VALUE_NUMBER_INT || jsontoken == JsonToken.VALUE_NUMBER_FLOAT)
            i = getIntValue();
        else
            i = getValueAsInt(0);
        return i;
    }

    public int getValueAsInt(int i) {
        JsonToken jsontoken = _currToken;
        if (jsontoken != JsonToken.VALUE_NUMBER_INT && jsontoken != JsonToken.VALUE_NUMBER_FLOAT) goto _L2; else goto _L1
_L1:
        int j = getIntValue();
_L4:
        return j;
_L2:
        j = i;
        if (jsontoken != null)
            switch (jsontoken.id()) {
            case 7: // '\007'
            case 8: // '\b'
            default:
                j = i;
                break;

            case 6: // '\006'
                String s = getText();
                if (_hasTextualNull(s))
                    j = 0;
                else
                    j = NumberInput.parseAsInt(s, i);
                break;

            case 9: // '\t'
                j = 1;
                break;

            case 10: // '\n'
                j = 0;
                break;

            case 11: // '\013'
                j = 0;
                break;

            case 12: // '\f'
                Object obj = getEmbeddedObject();
                j = i;
                if (obj instanceof Number)
                    j = ((Number)obj).intValue();
                break;
            }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public long getValueAsLong() {
        JsonToken jsontoken = _currToken;
        long l;
        if (jsontoken == JsonToken.VALUE_NUMBER_INT || jsontoken == JsonToken.VALUE_NUMBER_FLOAT)
            l = getLongValue();
        else
            l = getValueAsLong(0L);
        return l;
    }

    public long getValueAsLong(long l) {
        JsonToken jsontoken = _currToken;
        if (jsontoken != JsonToken.VALUE_NUMBER_INT && jsontoken != JsonToken.VALUE_NUMBER_FLOAT) goto _L2; else goto _L1
_L1:
        long l1 = getLongValue();
_L4:
        return l1;
_L2:
        l1 = l;
        if (jsontoken != null)
            switch (jsontoken.id()) {
            case 7: // '\007'
            case 8: // '\b'
            default:
                l1 = l;
                break;

            case 6: // '\006'
                String s = getText();
                if (_hasTextualNull(s))
                    l1 = 0L;
                else
                    l1 = NumberInput.parseAsLong(s, l);
                break;

            case 9: // '\t'
                l1 = 1L;
                break;

            case 10: // '\n'
            case 11: // '\013'
                l1 = 0L;
                break;

            case 12: // '\f'
                Object obj = getEmbeddedObject();
                l1 = l;
                if (obj instanceof Number)
                    l1 = ((Number)obj).longValue();
                break;
            }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public String getValueAsString() {
        String s;
        if (_currToken == JsonToken.VALUE_STRING)
            s = getText();
        else
        if (_currToken == JsonToken.FIELD_NAME)
            s = getCurrentName();
        else
            s = getValueAsString(null);
        return s;
    }

    public String getValueAsString(String s) {
        if (_currToken != JsonToken.VALUE_STRING) goto _L2; else goto _L1
_L1:
        String s1 = getText();
_L4:
        return s1;
_L2:
        if (_currToken == JsonToken.FIELD_NAME) {
            s1 = getCurrentName();
        } else {
            s1 = s;
            if (_currToken != null) {
                s1 = s;
                if (_currToken != JsonToken.VALUE_NULL) {
                    s1 = s;
                    if (_currToken.isScalarValue())
                        s1 = getText();
                }
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public boolean hasCurrentToken() {
        boolean flag;
        if (_currToken != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public abstract boolean hasTextCharacters();

    public boolean hasToken(JsonToken jsontoken) {
        boolean flag;
        if (_currToken == jsontoken)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean hasTokenId(int i) {
        boolean flag;
        JsonToken jsontoken;
        flag = true;
        jsontoken = _currToken;
        if (jsontoken != null) goto _L2; else goto _L1
_L1:
        if (i != 0)
            flag = false;
_L4:
        return flag;
_L2:
        if (jsontoken.id() != i)
            flag = false;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public abstract boolean isClosed();

    public boolean isExpectedStartArrayToken() {
        boolean flag;
        if (_currToken == JsonToken.START_ARRAY)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean isExpectedStartObjectToken() {
        boolean flag;
        if (_currToken == JsonToken.START_OBJECT)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public abstract JsonToken nextToken();

    public JsonToken nextValue() {
        JsonToken jsontoken1 = nextToken();
        JsonToken jsontoken = jsontoken1;
        if (jsontoken1 == JsonToken.FIELD_NAME)
            jsontoken = nextToken();
        return jsontoken;
    }

    public abstract void overrideCurrentName(String s);

    public JsonParser skipChildren() {
        if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {
            int i = 1;
            int j;
label0:
            do {
                JsonToken jsontoken;
label1:
                do
                    do {
                        jsontoken = nextToken();
                        if (jsontoken == null) {
                            _handleEOF();
                            break label0;
                        }
                        if (!jsontoken.isStructStart())
                            continue label1;
                        i++;
                    } while (true);
                while (!jsontoken.isStructEnd());
                j = i - 1;
                i = j;
            } while (j != 0);
        }
        return this;
    }
}
