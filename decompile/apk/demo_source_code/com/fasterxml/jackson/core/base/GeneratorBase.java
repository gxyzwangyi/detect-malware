// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.core.base;

import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.core.json.DupDetector;
import com.fasterxml.jackson.core.json.JsonWriteContext;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.VersionUtil;
import java.io.InputStream;

public abstract class GeneratorBase extends JsonGenerator {

    protected static final int DERIVED_FEATURES_MASK;
    public static final int SURR1_FIRST = 55296;
    public static final int SURR1_LAST = 56319;
    public static final int SURR2_FIRST = 56320;
    public static final int SURR2_LAST = 57343;
    protected static final String WRITE_BINARY = "write a binary value";
    protected static final String WRITE_BOOLEAN = "write a boolean value";
    protected static final String WRITE_NULL = "write a null";
    protected static final String WRITE_NUMBER = "write a number";
    protected static final String WRITE_RAW = "write a raw (unencoded) value";
    protected static final String WRITE_STRING = "write a string";
    protected boolean _cfgNumbersAsStrings;
    protected boolean _closed;
    protected int _features;
    protected ObjectCodec _objectCodec;
    protected JsonWriteContext _writeContext;

    protected GeneratorBase(int i, ObjectCodec objectcodec) {
        _features = i;
        _objectCodec = objectcodec;
        if (com.fasterxml.jackson.core.JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION.enabledIn(i))
            objectcodec = DupDetector.rootDetector(this);
        else
            objectcodec = null;
        _writeContext = JsonWriteContext.createRootContext(objectcodec);
        _cfgNumbersAsStrings = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS.enabledIn(i);
    }

    protected GeneratorBase(int i, ObjectCodec objectcodec, JsonWriteContext jsonwritecontext) {
        _features = i;
        _objectCodec = objectcodec;
        _writeContext = jsonwritecontext;
        _cfgNumbersAsStrings = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS.enabledIn(i);
    }

    protected void _checkStdFeatureChanges(int i, int j) {
        if ((DERIVED_FEATURES_MASK & j) != 0) goto _L2; else goto _L1
_L1:
        return;
_L2:
        _cfgNumbersAsStrings = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS.enabledIn(i);
        if (com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII.enabledIn(j))
            if (com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII.enabledIn(i))
                setHighestNonEscapedChar(127);
            else
                setHighestNonEscapedChar(0);
        if (com.fasterxml.jackson.core.JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION.enabledIn(j))
            if (com.fasterxml.jackson.core.JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION.enabledIn(i)) {
                if (_writeContext.getDupDetector() == null)
                    _writeContext = _writeContext.withDupDetector(DupDetector.rootDetector(this));
            } else {
                _writeContext = _writeContext.withDupDetector(null);
            }
        if (true) goto _L1; else goto _L3
_L3:
    }

    protected PrettyPrinter _constructDefaultPrettyPrinter() {
        return new DefaultPrettyPrinter();
    }

    protected final int _decodeSurrogate(int i, int j) {
        if (j < 56320 || j > 57343)
            _reportError((new StringBuilder()).append("Incomplete surrogate pair: first char 0x").append(Integer.toHexString(i)).append(", second 0x").append(Integer.toHexString(j)).toString());
        return 0x10000 + (i - 55296 << 10) + (j - 56320);
    }

    protected abstract void _releaseBuffers();

    protected abstract void _verifyValueWrite(String s);

    public void close() {
        _closed = true;
    }

    public JsonGenerator disable(com.fasterxml.jackson.core.JsonGenerator.Feature feature) {
        int i;
        i = feature.getMask();
        _features = _features & ~i;
        if ((i & DERIVED_FEATURES_MASK) == 0) goto _L2; else goto _L1
_L1:
        if (feature != com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS) goto _L4; else goto _L3
_L3:
        _cfgNumbersAsStrings = false;
_L2:
        return this;
_L4:
        if (feature == com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII)
            setHighestNonEscapedChar(0);
        else
        if (feature == com.fasterxml.jackson.core.JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION)
            _writeContext = _writeContext.withDupDetector(null);
        if (true) goto _L2; else goto _L5
_L5:
    }

    public JsonGenerator enable(com.fasterxml.jackson.core.JsonGenerator.Feature feature) {
        int i;
        i = feature.getMask();
        _features = _features | i;
        if ((i & DERIVED_FEATURES_MASK) == 0) goto _L2; else goto _L1
_L1:
        if (feature != com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS) goto _L4; else goto _L3
_L3:
        _cfgNumbersAsStrings = true;
_L2:
        return this;
_L4:
        if (feature == com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII)
            setHighestNonEscapedChar(127);
        else
        if (feature == com.fasterxml.jackson.core.JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION && _writeContext.getDupDetector() == null)
            _writeContext = _writeContext.withDupDetector(DupDetector.rootDetector(this));
        if (true) goto _L2; else goto _L5
_L5:
    }

    public abstract void flush();

    public ObjectCodec getCodec() {
        return _objectCodec;
    }

    public Object getCurrentValue() {
        return _writeContext.getCurrentValue();
    }

    public int getFeatureMask() {
        return _features;
    }

    public volatile JsonStreamContext getOutputContext() {
        return getOutputContext();
    }

    public JsonWriteContext getOutputContext() {
        return _writeContext;
    }

    public boolean isClosed() {
        return _closed;
    }

    public final boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature feature) {
        boolean flag;
        if ((_features & feature.getMask()) != 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public JsonGenerator overrideStdFeatures(int i, int j) {
        int k = _features;
        i = ~j & k | i & j;
        j = k ^ i;
        if (j != 0) {
            _features = i;
            _checkStdFeatureChanges(i, j);
        }
        return this;
    }

    public JsonGenerator setCodec(ObjectCodec objectcodec) {
        _objectCodec = objectcodec;
        return this;
    }

    public void setCurrentValue(Object obj) {
        _writeContext.setCurrentValue(obj);
    }

    public JsonGenerator setFeatureMask(int i) {
        int j = _features ^ i;
        _features = i;
        if (j != 0)
            _checkStdFeatureChanges(i, j);
        return this;
    }

    public JsonGenerator useDefaultPrettyPrinter() {
        Object obj;
        if (getPrettyPrinter() != null)
            obj = this;
        else
            obj = setPrettyPrinter(_constructDefaultPrettyPrinter());
        return ((JsonGenerator) (obj));
    }

    public Version version() {
        return VersionUtil.versionFor(getClass());
    }

    public int writeBinary(Base64Variant base64variant, InputStream inputstream, int i) {
        _reportUnsupportedOperation();
        return 0;
    }

    public void writeFieldName(SerializableString serializablestring) {
        writeFieldName(serializablestring.getValue());
    }

    public void writeObject(Object obj) {
        if (obj == null)
            writeNull();
        else
        if (_objectCodec != null)
            _objectCodec.writeValue(this, obj);
        else
            _writeSimpleObject(obj);
    }

    public void writeRawValue(SerializableString serializablestring) {
        _verifyValueWrite("write raw value");
        writeRaw(serializablestring);
    }

    public void writeRawValue(String s) {
        _verifyValueWrite("write raw value");
        writeRaw(s);
    }

    public void writeRawValue(String s, int i, int j) {
        _verifyValueWrite("write raw value");
        writeRaw(s, i, j);
    }

    public void writeRawValue(char ac[], int i, int j) {
        _verifyValueWrite("write raw value");
        writeRaw(ac, i, j);
    }

    public void writeString(SerializableString serializablestring) {
        writeString(serializablestring.getValue());
    }

    public void writeTree(TreeNode treenode) {
        if (treenode == null) {
            writeNull();
        } else {
            if (_objectCodec == null)
                throw new IllegalStateException("No ObjectCodec defined");
            _objectCodec.writeValue(this, treenode);
        }
    }

    static  {
        DERIVED_FEATURES_MASK = com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS.getMask() | com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII.getMask() | com.fasterxml.jackson.core.JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION.getMask();
    }
}
