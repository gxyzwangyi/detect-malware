// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.core.util;

import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.Versioned;
import java.io.*;
import java.util.Properties;
import java.util.regex.Pattern;

public class VersionUtil {

    private static final Pattern V_SEP = Pattern.compile("[-_./;:]");
    private final Version _v;

    protected VersionUtil() {
        Version version1;
        version1 = null;
        Version version2 = versionFor(getClass());
        version1 = version2;
_L2:
        Version version3 = version1;
        if (version1 == null)
            version3 = Version.unknownVersion();
        _v = version3;
        return;
        Exception exception;
        exception;
        System.err.println((new StringBuilder()).append("ERROR: Failed to load Version information from ").append(getClass()).toString());
        if (true) goto _L2; else goto _L1
_L1:
    }

    private static final void _close(Closeable closeable) {
        closeable.close();
_L2:
        return;
        closeable;
        if (true) goto _L2; else goto _L1
_L1:
    }

    public static Version mavenVersionFor(ClassLoader classloader, String s, String s1) {
        s = classloader.getResourceAsStream((new StringBuilder()).append("META-INF/maven/").append(s.replaceAll("\\.", "/")).append("/").append(s1).append("/pom.properties").toString());
        if (s == null) goto _L2; else goto _L1
_L1:
        classloader = JVM INSTR new #104 <Class Properties>;
        classloader.Properties();
        classloader.load(s);
        s1 = classloader.getProperty("version");
        String s2 = classloader.getProperty("artifactId");
        classloader = parseVersion(s1, classloader.getProperty("groupId"), s2);
        _close(s);
_L4:
        return classloader;
        classloader;
        _close(s);
_L2:
        classloader = Version.unknownVersion();
        if (true) goto _L4; else goto _L3
_L3:
        classloader;
        _close(s);
        throw classloader;
    }

    public static Version packageVersionFor(Class class1) {
        Object obj;
        obj = JVM INSTR new #50  <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        obj = Class.forName(((StringBuilder) (obj)).append(class1.getPackage().getName()).append(".PackageVersion").toString(), true, class1.getClassLoader());
        try {
            class1 = ((Versioned)((Class) (obj)).newInstance()).version();
        }
        // Misplaced declaration of an exception variable
        catch (Class class1) {
            try {
                IllegalArgumentException illegalargumentexception = JVM INSTR new #158 <Class IllegalArgumentException>;
                class1 = JVM INSTR new #50  <Class StringBuilder>;
                class1.StringBuilder();
                illegalargumentexception.IllegalArgumentException(class1.append("Failed to get Versioned out of ").append(obj).toString());
                throw illegalargumentexception;
            }
            // Misplaced declaration of an exception variable
            catch (Class class1) {
                class1 = null;
            }
        }
        obj = class1;
        if (class1 == null)
            obj = Version.unknownVersion();
        return ((Version) (obj));
    }

    public static Version parseVersion(String s, String s1, String s2) {
        int j = 0;
        if (s == null) goto _L2; else goto _L1
_L1:
        s = s.trim();
        if (s.length() <= 0) goto _L2; else goto _L3
_L3:
        s = V_SEP.split(s);
        int k = parseVersionPart(s[0]);
        int i;
        if (s.length > 1)
            i = parseVersionPart(s[1]);
        else
            i = 0;
        if (s.length > 2)
            j = parseVersionPart(s[2]);
        if (s.length > 3)
            s = s[3];
        else
            s = null;
        s = new Version(k, i, j, s, s1, s2);
_L5:
        return s;
_L2:
        s = Version.unknownVersion();
        if (true) goto _L5; else goto _L4
_L4:
    }

    protected static int parseVersionPart(String s) {
        int i = 0;
        int k = s.length();
        int j = 0;
        do {
            char c;
label0:
            {
                if (i < k) {
                    c = s.charAt(i);
                    if (c <= '9' && c >= '0')
                        break label0;
                }
                return j;
            }
            j = j * 10 + (c - 48);
            i++;
        } while (true);
    }

    public static final void throwInternal() {
        throw new RuntimeException("Internal error: this code path should never get executed");
    }

    public static Version versionFor(Class class1) {
        Version version1 = packageVersionFor(class1);
        class1 = version1;
        if (version1 == null)
            class1 = Version.unknownVersion();
        return class1;
    }

    public Version version() {
        return _v;
    }

}
