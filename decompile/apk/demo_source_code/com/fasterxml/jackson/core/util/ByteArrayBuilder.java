// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.core.util;

import java.io.OutputStream;
import java.util.Iterator;
import java.util.LinkedList;

// Referenced classes of package com.fasterxml.jackson.core.util:
//            BufferRecycler

public final class ByteArrayBuilder extends OutputStream {

    static final int DEFAULT_BLOCK_ARRAY_SIZE = 40;
    private static final int INITIAL_BLOCK_SIZE = 500;
    private static final int MAX_BLOCK_SIZE = 0x40000;
    public static final byte NO_BYTES[] = new byte[0];
    private final BufferRecycler _bufferRecycler;
    private byte _currBlock[];
    private int _currBlockPtr;
    private final LinkedList _pastBlocks;
    private int _pastLen;

    public ByteArrayBuilder() {
        this(((BufferRecycler) (null)));
    }

    public ByteArrayBuilder(int i) {
        this(null, i);
    }

    public ByteArrayBuilder(BufferRecycler bufferrecycler) {
        this(bufferrecycler, 500);
    }

    public ByteArrayBuilder(BufferRecycler bufferrecycler, int i) {
        _pastBlocks = new LinkedList();
        _bufferRecycler = bufferrecycler;
        if (bufferrecycler == null)
            bufferrecycler = new byte[i];
        else
            bufferrecycler = bufferrecycler.allocByteBuffer(2);
        _currBlock = bufferrecycler;
    }

    private void _allocMore() {
        int j = 0x40000;
        _pastLen = _pastLen + _currBlock.length;
        int i = Math.max(_pastLen >> 1, 1000);
        if (i > 0x40000)
            i = j;
        _pastBlocks.add(_currBlock);
        _currBlock = new byte[i];
        _currBlockPtr = 0;
    }

    public void append(int i) {
        if (_currBlockPtr >= _currBlock.length)
            _allocMore();
        byte abyte0[] = _currBlock;
        int j = _currBlockPtr;
        _currBlockPtr = j + 1;
        abyte0[j] = (byte)i;
    }

    public void appendThreeBytes(int i) {
        if (_currBlockPtr + 2 < _currBlock.length) {
            byte abyte0[] = _currBlock;
            int j = _currBlockPtr;
            _currBlockPtr = j + 1;
            abyte0[j] = (byte)(i >> 16);
            abyte0 = _currBlock;
            j = _currBlockPtr;
            _currBlockPtr = j + 1;
            abyte0[j] = (byte)(i >> 8);
            abyte0 = _currBlock;
            j = _currBlockPtr;
            _currBlockPtr = j + 1;
            abyte0[j] = (byte)i;
        } else {
            append(i >> 16);
            append(i >> 8);
            append(i);
        }
    }

    public void appendTwoBytes(int i) {
        if (_currBlockPtr + 1 < _currBlock.length) {
            byte abyte0[] = _currBlock;
            int j = _currBlockPtr;
            _currBlockPtr = j + 1;
            abyte0[j] = (byte)(i >> 8);
            abyte0 = _currBlock;
            j = _currBlockPtr;
            _currBlockPtr = j + 1;
            abyte0[j] = (byte)i;
        } else {
            append(i >> 8);
            append(i);
        }
    }

    public void close() {
    }

    public byte[] completeAndCoalesce(int i) {
        _currBlockPtr = i;
        return toByteArray();
    }

    public byte[] finishCurrentSegment() {
        _allocMore();
        return _currBlock;
    }

    public void flush() {
    }

    public byte[] getCurrentSegment() {
        return _currBlock;
    }

    public int getCurrentSegmentLength() {
        return _currBlockPtr;
    }

    public void release() {
        reset();
        if (_bufferRecycler != null && _currBlock != null) {
            _bufferRecycler.releaseByteBuffer(2, _currBlock);
            _currBlock = null;
        }
    }

    public void reset() {
        _pastLen = 0;
        _currBlockPtr = 0;
        if (!_pastBlocks.isEmpty())
            _pastBlocks.clear();
    }

    public byte[] resetAndGetFirstSegment() {
        reset();
        return _currBlock;
    }

    public void setCurrentSegmentLength(int i) {
        _currBlockPtr = i;
    }

    public byte[] toByteArray() {
        int j = _pastLen + _currBlockPtr;
        if (j != 0) goto _L2; else goto _L1
_L1:
        byte abyte0[] = NO_BYTES;
_L4:
        return abyte0;
_L2:
        abyte0 = new byte[j];
        Iterator iterator = _pastBlocks.iterator();
        int i;
        int k;
        for (i = 0; iterator.hasNext(); i += k) {
            byte abyte1[] = (byte[])iterator.next();
            k = abyte1.length;
            System.arraycopy(abyte1, 0, abyte0, i, k);
        }

        System.arraycopy(_currBlock, 0, abyte0, i, _currBlockPtr);
        i = _currBlockPtr + i;
        if (i != j)
            throw new RuntimeException((new StringBuilder()).append("Internal error: total len assumed to be ").append(j).append(", copied ").append(i).append(" bytes").toString());
        if (!_pastBlocks.isEmpty())
            reset();
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void write(int i) {
        append(i);
    }

    public void write(byte abyte0[]) {
        write(abyte0, 0, abyte0.length);
    }

    public void write(byte abyte0[], int i, int j) {
        int k = i;
        do {
            int i1 = Math.min(_currBlock.length - _currBlockPtr, j);
            int l = k;
            i = j;
            if (i1 > 0) {
                System.arraycopy(abyte0, k, _currBlock, _currBlockPtr, i1);
                l = k + i1;
                _currBlockPtr = _currBlockPtr + i1;
                i = j - i1;
            }
            if (i <= 0)
                return;
            _allocMore();
            k = l;
            j = i;
        } while (true);
    }

}
