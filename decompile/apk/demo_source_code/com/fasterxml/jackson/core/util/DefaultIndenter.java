// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.core.util;

import com.fasterxml.jackson.core.JsonGenerator;

public class DefaultIndenter extends DefaultPrettyPrinter.NopIndenter {

    private static final int INDENT_LEVELS = 16;
    public static final DefaultIndenter SYSTEM_LINEFEED_INSTANCE;
    public static final String SYS_LF;
    private static final long serialVersionUID = 1L;
    private final int charsPerLevel;
    private final String eol;
    private final char indents[];

    public DefaultIndenter() {
        this("  ", SYS_LF);
    }

    public DefaultIndenter(String s, String s1) {
        charsPerLevel = s.length();
        indents = new char[s.length() * 16];
        int j = 0;
        int i = 0;
        for (; j < 16; j++) {
            s.getChars(0, s.length(), indents, i);
            i += s.length();
        }

        eol = s1;
    }

    public String getEol() {
        return eol;
    }

    public String getIndent() {
        return new String(indents, 0, charsPerLevel);
    }

    public boolean isInline() {
        return false;
    }

    public DefaultIndenter withIndent(String s) {
        if (s.equals(getIndent()))
            s = this;
        else
            s = new DefaultIndenter(s, eol);
        return s;
    }

    public DefaultIndenter withLinefeed(String s) {
        if (s.equals(eol))
            s = this;
        else
            s = new DefaultIndenter(getIndent(), s);
        return s;
    }

    public void writeIndentation(JsonGenerator jsongenerator, int i) {
        jsongenerator.writeRaw(eol);
        if (i > 0) {
            for (i = charsPerLevel * i; i > indents.length; i -= indents.length)
                jsongenerator.writeRaw(indents, 0, indents.length);

            jsongenerator.writeRaw(indents, 0, i);
        }
    }

    static  {
        String s;
        try {
            s = System.getProperty("line.separator");
        }
        catch (Throwable throwable) {
            throwable = "\n";
        }
        SYS_LF = s;
        SYSTEM_LINEFEED_INSTANCE = new DefaultIndenter("  ", SYS_LF);
    }
}
