// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.core.util;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import java.util.ArrayList;
import java.util.List;

// Referenced classes of package com.fasterxml.jackson.core.util:
//            JsonParserDelegate

public class JsonParserSequence extends JsonParserDelegate {

    protected int _nextParser;
    protected final JsonParser _parsers[];

    protected JsonParserSequence(JsonParser ajsonparser[]) {
        super(ajsonparser[0]);
        _parsers = ajsonparser;
        _nextParser = 1;
    }

    public static JsonParserSequence createFlattened(JsonParser jsonparser, JsonParser jsonparser1) {
        if (!(jsonparser instanceof JsonParserSequence) && !(jsonparser1 instanceof JsonParserSequence)) {
            jsonparser = new JsonParserSequence(new JsonParser[] {
                jsonparser, jsonparser1
            });
        } else {
            ArrayList arraylist = new ArrayList();
            if (jsonparser instanceof JsonParserSequence)
                ((JsonParserSequence)jsonparser).addFlattenedActiveParsers(arraylist);
            else
                arraylist.add(jsonparser);
            if (jsonparser1 instanceof JsonParserSequence)
                ((JsonParserSequence)jsonparser1).addFlattenedActiveParsers(arraylist);
            else
                arraylist.add(jsonparser1);
            jsonparser = new JsonParserSequence((JsonParser[])arraylist.toArray(new JsonParser[arraylist.size()]));
        }
        return jsonparser;
    }

    protected void addFlattenedActiveParsers(List list) {
        int i = _nextParser;
        int j = _parsers.length;
        i--;
        while (i < j)  {
            JsonParser jsonparser = _parsers[i];
            if (jsonparser instanceof JsonParserSequence)
                ((JsonParserSequence)jsonparser).addFlattenedActiveParsers(list);
            else
                list.add(jsonparser);
            i++;
        }
    }

    public void close() {
        do
            _flddelegate.close();
        while (switchToNext());
    }

    public int containedParsersCount() {
        return _parsers.length;
    }

    public JsonToken nextToken() {
        JsonToken jsontoken = _flddelegate.nextToken();
        if (jsontoken == null) goto _L2; else goto _L1
_L1:
        return jsontoken;
_L2:
        while (switchToNext())  {
            jsontoken = _flddelegate.nextToken();
            if (jsontoken != null)
                continue; /* Loop/switch isn't completed */
        }
        jsontoken = null;
        if (true) goto _L1; else goto _L3
_L3:
    }

    protected boolean switchToNext() {
        boolean flag;
        if (_nextParser >= _parsers.length) {
            flag = false;
        } else {
            JsonParser ajsonparser[] = _parsers;
            int i = _nextParser;
            _nextParser = i + 1;
            _flddelegate = ajsonparser[i];
            flag = true;
        }
        return flag;
    }
}
