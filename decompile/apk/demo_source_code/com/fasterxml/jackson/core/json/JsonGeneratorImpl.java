// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.core.json;

import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.io.*;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.VersionUtil;

public abstract class JsonGeneratorImpl extends GeneratorBase {

    protected static final int sOutputEscapes[] = CharTypes.get7BitOutputEscapes();
    protected boolean _cfgUnqNames;
    protected CharacterEscapes _characterEscapes;
    protected final IOContext _ioContext;
    protected int _maximumNonEscapedChar;
    protected int _outputEscapes[];
    protected SerializableString _rootValueSeparator;

    public JsonGeneratorImpl(IOContext iocontext, int i, ObjectCodec objectcodec) {
        super(i, objectcodec);
        _outputEscapes = sOutputEscapes;
        _rootValueSeparator = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
        _ioContext = iocontext;
        if (com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII.enabledIn(i))
            _maximumNonEscapedChar = 127;
        boolean flag;
        if (!com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES.enabledIn(i))
            flag = true;
        else
            flag = false;
        _cfgUnqNames = flag;
    }

    protected void _checkStdFeatureChanges(int i, int j) {
        super._checkStdFeatureChanges(i, j);
        boolean flag;
        if (!com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES.enabledIn(i))
            flag = true;
        else
            flag = false;
        _cfgUnqNames = flag;
    }

    public JsonGenerator disable(com.fasterxml.jackson.core.JsonGenerator.Feature feature) {
        super.disable(feature);
        if (feature == com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES)
            _cfgUnqNames = true;
        return this;
    }

    public JsonGenerator enable(com.fasterxml.jackson.core.JsonGenerator.Feature feature) {
        super.enable(feature);
        if (feature == com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES)
            _cfgUnqNames = false;
        return this;
    }

    public CharacterEscapes getCharacterEscapes() {
        return _characterEscapes;
    }

    public int getHighestEscapedChar() {
        return _maximumNonEscapedChar;
    }

    public JsonGenerator setCharacterEscapes(CharacterEscapes characterescapes) {
        _characterEscapes = characterescapes;
        if (characterescapes == null)
            _outputEscapes = sOutputEscapes;
        else
            _outputEscapes = characterescapes.getEscapeCodesForAscii();
        return this;
    }

    public JsonGenerator setHighestNonEscapedChar(int i) {
        int j = i;
        if (i < 0)
            j = 0;
        _maximumNonEscapedChar = j;
        return this;
    }

    public JsonGenerator setRootValueSeparator(SerializableString serializablestring) {
        _rootValueSeparator = serializablestring;
        return this;
    }

    public Version version() {
        return VersionUtil.versionFor(getClass());
    }

    public final void writeStringField(String s, String s1) {
        writeFieldName(s);
        writeString(s1);
    }

}
