// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.core.json;

import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.core.io.*;
import java.io.InputStream;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.math.BigInteger;

// Referenced classes of package com.fasterxml.jackson.core.json:
//            JsonGeneratorImpl, JsonWriteContext

public class UTF8JsonGenerator extends JsonGeneratorImpl {

    private static final byte BYTE_0 = 48;
    private static final byte BYTE_BACKSLASH = 92;
    private static final byte BYTE_COLON = 58;
    private static final byte BYTE_COMMA = 44;
    private static final byte BYTE_LBRACKET = 91;
    private static final byte BYTE_LCURLY = 123;
    private static final byte BYTE_QUOTE = 34;
    private static final byte BYTE_RBRACKET = 93;
    private static final byte BYTE_RCURLY = 125;
    private static final byte BYTE_u = 117;
    private static final byte FALSE_BYTES[] = {
        102, 97, 108, 115, 101
    };
    private static final byte HEX_CHARS[] = CharTypes.copyHexBytes();
    private static final int MAX_BYTES_TO_BUFFER = 512;
    private static final byte NULL_BYTES[] = {
        110, 117, 108, 108
    };
    private static final byte TRUE_BYTES[] = {
        116, 114, 117, 101
    };
    protected boolean _bufferRecyclable;
    protected char _charBuffer[];
    protected final int _charBufferLength;
    protected byte _entityBuffer[];
    protected byte _outputBuffer[];
    protected final int _outputEnd;
    protected final int _outputMaxContiguous;
    protected final OutputStream _outputStream;
    protected int _outputTail;

    public UTF8JsonGenerator(IOContext iocontext, int i, ObjectCodec objectcodec, OutputStream outputstream) {
        super(iocontext, i, objectcodec);
        _outputStream = outputstream;
        _bufferRecyclable = true;
        _outputBuffer = iocontext.allocWriteEncodingBuffer();
        _outputEnd = _outputBuffer.length;
        _outputMaxContiguous = _outputEnd >> 3;
        _charBuffer = iocontext.allocConcatBuffer();
        _charBufferLength = _charBuffer.length;
        if (isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII))
            setHighestNonEscapedChar(127);
    }

    public UTF8JsonGenerator(IOContext iocontext, int i, ObjectCodec objectcodec, OutputStream outputstream, byte abyte0[], int j, boolean flag) {
        super(iocontext, i, objectcodec);
        _outputStream = outputstream;
        _bufferRecyclable = flag;
        _outputTail = j;
        _outputBuffer = abyte0;
        _outputEnd = _outputBuffer.length;
        _outputMaxContiguous = _outputEnd >> 3;
        _charBuffer = iocontext.allocConcatBuffer();
        _charBufferLength = _charBuffer.length;
    }

    private final int _handleLongCustomEscape(byte abyte0[], int i, int j, byte abyte1[], int k) {
        int i1 = abyte1.length;
        if (i + i1 <= j) goto _L2; else goto _L1
_L1:
        int l;
        _outputTail = i;
        _flushBuffer();
        l = _outputTail;
        if (i1 <= abyte0.length) goto _L4; else goto _L3
_L3:
        _outputStream.write(abyte1, 0, i1);
_L6:
        return l;
_L4:
        System.arraycopy(abyte1, 0, abyte0, l, i1);
        i = l + i1;
_L2:
        l = i;
        if (k * 6 + i > j) {
            _flushBuffer();
            l = _outputTail;
        }
        if (true) goto _L6; else goto _L5
_L5:
    }

    private final int _outputMultiByteChar(int i, int j) {
        byte abyte0[] = _outputBuffer;
        if (i >= 55296 && i <= 57343) {
            int k = j + 1;
            abyte0[j] = 92;
            j = k + 1;
            abyte0[k] = 117;
            k = j + 1;
            abyte0[j] = HEX_CHARS[i >> 12 & 0xf];
            j = k + 1;
            abyte0[k] = HEX_CHARS[i >> 8 & 0xf];
            k = j + 1;
            abyte0[j] = HEX_CHARS[i >> 4 & 0xf];
            j = k + 1;
            abyte0[k] = HEX_CHARS[i & 0xf];
            i = j;
        } else {
            int l = j + 1;
            abyte0[j] = (byte)(i >> 12 | 0xe0);
            int i1 = l + 1;
            abyte0[l] = (byte)(i >> 6 & 0x3f | 0x80);
            j = i1 + 1;
            abyte0[i1] = (byte)(i & 0x3f | 0x80);
            i = j;
        }
        return i;
    }

    private final int _outputRawMultiByteChar(int i, char ac[], int j, int k) {
        if (i >= 55296 && i <= 57343) {
            if (j >= k || ac == null)
                _reportError("Split surrogate on writeRaw() input (last character)");
            _outputSurrogates(i, ac[j]);
            j++;
        } else {
            ac = _outputBuffer;
            k = _outputTail;
            _outputTail = k + 1;
            ac[k] = (byte)(i >> 12 | 0xe0);
            k = _outputTail;
            _outputTail = k + 1;
            ac[k] = (byte)(i >> 6 & 0x3f | 0x80);
            k = _outputTail;
            _outputTail = k + 1;
            ac[k] = (byte)(i & 0x3f | 0x80);
        }
        return j;
    }

    private final int _readMore(InputStream inputstream, byte abyte0[], int i, int j, int k) {
        boolean flag = false;
        int l = i;
        i = ((flag) ? 1 : 0);
        for (; l < j; l++) {
            abyte0[i] = abyte0[l];
            i++;
        }

        k = Math.min(k, abyte0.length);
_L5:
        j = k - i;
        if (j != 0) goto _L2; else goto _L1
_L1:
        j = i;
_L4:
        return j;
_L2:
        int i1;
        i1 = inputstream.read(abyte0, i, j);
        j = i;
        if (i1 < 0) goto _L4; else goto _L3
_L3:
        j = i + i1;
        i = j;
        if (j < 3) goto _L5; else goto _L4
    }

    private final void _writeBytes(byte abyte0[]) {
        int i = abyte0.length;
        if (_outputTail + i <= _outputEnd) goto _L2; else goto _L1
_L1:
        _flushBuffer();
        if (i <= 512) goto _L2; else goto _L3
_L3:
        _outputStream.write(abyte0, 0, i);
_L5:
        return;
_L2:
        System.arraycopy(abyte0, 0, _outputBuffer, _outputTail, i);
        _outputTail = i + _outputTail;
        if (true) goto _L5; else goto _L4
_L4:
    }

    private final void _writeBytes(byte abyte0[], int i, int j) {
        if (_outputTail + j <= _outputEnd) goto _L2; else goto _L1
_L1:
        _flushBuffer();
        if (j <= 512) goto _L2; else goto _L3
_L3:
        _outputStream.write(abyte0, i, j);
_L5:
        return;
_L2:
        System.arraycopy(abyte0, i, _outputBuffer, _outputTail, j);
        _outputTail = _outputTail + j;
        if (true) goto _L5; else goto _L4
_L4:
    }

    private final int _writeCustomEscape(byte abyte0[], int i, SerializableString serializablestring, int j) {
        serializablestring = serializablestring.asUnquotedUTF8();
        int k = serializablestring.length;
        if (k > 6) {
            i = _handleLongCustomEscape(abyte0, i, _outputEnd, serializablestring, j);
        } else {
            System.arraycopy(serializablestring, 0, abyte0, i, k);
            i = k + i;
        }
        return i;
    }

    private final void _writeCustomStringSegment2(String s, int i, int j) {
        if (_outputTail + (j - i) * 6 > _outputEnd)
            _flushBuffer();
        int l = _outputTail;
        byte abyte0[] = _outputBuffer;
        int ai[] = _outputEscapes;
        int k;
        int j1;
        CharacterEscapes characterescapes;
        if (_maximumNonEscapedChar <= 0)
            j1 = 65535;
        else
            j1 = _maximumNonEscapedChar;
        characterescapes = _characterEscapes;
        k = i;
        i = l;
        while (k < j)  {
            int i1 = k + 1;
            k = s.charAt(k);
            if (k <= '\177') {
                if (ai[k] == 0) {
                    abyte0[i] = (byte)k;
                    i++;
                    k = i1;
                } else {
                    int k1 = ai[k];
                    if (k1 > 0) {
                        k = i + 1;
                        abyte0[i] = 92;
                        i = k + 1;
                        abyte0[k] = (byte)k1;
                        k = i1;
                    } else
                    if (k1 == -2) {
                        SerializableString serializablestring = characterescapes.getEscapeSequence(k);
                        if (serializablestring == null)
                            _reportError((new StringBuilder()).append("Invalid custom escape definitions; custom escape not found for character code 0x").append(Integer.toHexString(k)).append(", although was supposed to have one").toString());
                        i = _writeCustomEscape(abyte0, i, serializablestring, j - i1);
                        k = i1;
                    } else {
                        i = _writeGenericEscape(k, i);
                        k = i1;
                    }
                }
            } else
            if (k > j1) {
                i = _writeGenericEscape(k, i);
                k = i1;
            } else {
                SerializableString serializablestring1 = characterescapes.getEscapeSequence(k);
                if (serializablestring1 != null) {
                    i = _writeCustomEscape(abyte0, i, serializablestring1, j - i1);
                    k = i1;
                } else {
                    if (k <= 2047) {
                        int l1 = i + 1;
                        abyte0[i] = (byte)(k >> 6 | 0xc0);
                        i = l1 + 1;
                        abyte0[l1] = (byte)(k & 0x3f | 0x80);
                    } else {
                        i = _outputMultiByteChar(k, i);
                    }
                    k = i1;
                }
            }
        }
        _outputTail = i;
    }

    private final void _writeCustomStringSegment2(char ac[], int i, int j) {
        if (_outputTail + (j - i) * 6 > _outputEnd)
            _flushBuffer();
        int l = _outputTail;
        byte abyte0[] = _outputBuffer;
        int ai[] = _outputEscapes;
        int k;
        int j1;
        CharacterEscapes characterescapes;
        if (_maximumNonEscapedChar <= 0)
            j1 = 65535;
        else
            j1 = _maximumNonEscapedChar;
        characterescapes = _characterEscapes;
        k = i;
        i = l;
        while (k < j)  {
            int i1 = k + 1;
            int k1 = ac[k];
            if (k1 <= 127) {
                if (ai[k1] == 0) {
                    abyte0[i] = (byte)k1;
                    i++;
                    k = i1;
                } else {
                    k = ai[k1];
                    if (k > 0) {
                        k1 = i + 1;
                        abyte0[i] = 92;
                        i = k1 + 1;
                        abyte0[k1] = (byte)k;
                        k = i1;
                    } else
                    if (k == -2) {
                        SerializableString serializablestring = characterescapes.getEscapeSequence(k1);
                        if (serializablestring == null)
                            _reportError((new StringBuilder()).append("Invalid custom escape definitions; custom escape not found for character code 0x").append(Integer.toHexString(k1)).append(", although was supposed to have one").toString());
                        i = _writeCustomEscape(abyte0, i, serializablestring, j - i1);
                        k = i1;
                    } else {
                        i = _writeGenericEscape(k1, i);
                        k = i1;
                    }
                }
            } else
            if (k1 > j1) {
                i = _writeGenericEscape(k1, i);
                k = i1;
            } else {
                SerializableString serializablestring1 = characterescapes.getEscapeSequence(k1);
                if (serializablestring1 != null) {
                    i = _writeCustomEscape(abyte0, i, serializablestring1, j - i1);
                    k = i1;
                } else {
                    if (k1 <= 2047) {
                        k = i + 1;
                        abyte0[i] = (byte)(k1 >> 6 | 0xc0);
                        i = k + 1;
                        abyte0[k] = (byte)(k1 & 0x3f | 0x80);
                    } else {
                        i = _outputMultiByteChar(k1, i);
                    }
                    k = i1;
                }
            }
        }
        _outputTail = i;
    }

    private int _writeGenericEscape(int i, int j) {
        byte abyte0[] = _outputBuffer;
        int k = j + 1;
        abyte0[j] = 92;
        j = k + 1;
        abyte0[k] = 117;
        if (i > 255) {
            k = i >> 8 & 0xff;
            int i1 = j + 1;
            abyte0[j] = HEX_CHARS[k >> 4];
            j = i1 + 1;
            abyte0[i1] = HEX_CHARS[k & 0xf];
            i &= 0xff;
        } else {
            int l = j + 1;
            abyte0[j] = 48;
            j = l + 1;
            abyte0[l] = 48;
        }
        k = j + 1;
        abyte0[j] = HEX_CHARS[i >> 4];
        abyte0[k] = HEX_CHARS[i & 0xf];
        return k + 1;
    }

    private final void _writeNull() {
        if (_outputTail + 4 >= _outputEnd)
            _flushBuffer();
        System.arraycopy(NULL_BYTES, 0, _outputBuffer, _outputTail, 4);
        _outputTail = _outputTail + 4;
    }

    private final void _writeQuotedInt(int i) {
        if (_outputTail + 13 >= _outputEnd)
            _flushBuffer();
        byte abyte0[] = _outputBuffer;
        int j = _outputTail;
        _outputTail = j + 1;
        abyte0[j] = 34;
        _outputTail = NumberOutput.outputInt(i, _outputBuffer, _outputTail);
        abyte0 = _outputBuffer;
        i = _outputTail;
        _outputTail = i + 1;
        abyte0[i] = 34;
    }

    private final void _writeQuotedLong(long l) {
        if (_outputTail + 23 >= _outputEnd)
            _flushBuffer();
        byte abyte0[] = _outputBuffer;
        int i = _outputTail;
        _outputTail = i + 1;
        abyte0[i] = 34;
        _outputTail = NumberOutput.outputLong(l, _outputBuffer, _outputTail);
        abyte0 = _outputBuffer;
        i = _outputTail;
        _outputTail = i + 1;
        abyte0[i] = 34;
    }

    private final void _writeQuotedRaw(String s) {
        if (_outputTail >= _outputEnd)
            _flushBuffer();
        byte abyte0[] = _outputBuffer;
        int i = _outputTail;
        _outputTail = i + 1;
        abyte0[i] = 34;
        writeRaw(s);
        if (_outputTail >= _outputEnd)
            _flushBuffer();
        s = _outputBuffer;
        i = _outputTail;
        _outputTail = i + 1;
        s[i] = 34;
    }

    private final void _writeQuotedShort(short word0) {
        if (_outputTail + 8 >= _outputEnd)
            _flushBuffer();
        byte abyte0[] = _outputBuffer;
        int i = _outputTail;
        _outputTail = i + 1;
        abyte0[i] = 34;
        _outputTail = NumberOutput.outputInt(word0, _outputBuffer, _outputTail);
        abyte0 = _outputBuffer;
        word0 = _outputTail;
        _outputTail = word0 + 1;
        abyte0[word0] = 34;
    }

    private final void _writeSegmentedRaw(char ac[], int i, int j) {
        int l = _outputEnd;
        byte abyte0[] = _outputBuffer;
label0:
        do {
            if (i < j)
                do {
                    int i1 = ac[i];
                    if (i1 >= 128) {
                        if (_outputTail + 3 >= _outputEnd)
                            _flushBuffer();
                        int k = i + 1;
                        i = ac[i];
                        if (i < 2048) {
                            i1 = _outputTail;
                            _outputTail = i1 + 1;
                            abyte0[i1] = (byte)(i >> 6 | 0xc0);
                            i1 = _outputTail;
                            _outputTail = i1 + 1;
                            abyte0[i1] = (byte)(i & 0x3f | 0x80);
                            i = k;
                        } else {
                            i = _outputRawMultiByteChar(i, ac, k, j);
                        }
                        continue label0;
                    }
                    if (_outputTail >= l)
                        _flushBuffer();
                    k = _outputTail;
                    _outputTail = k + 1;
                    abyte0[k] = (byte)i1;
                    k = i + 1;
                    i = k;
                } while (k < j);
            return;
        } while (true);
    }

    private final void _writeStringSegment(String s, int i, int j) {
        int l = j + i;
        int k = _outputTail;
        byte abyte0[] = _outputBuffer;
        int ai[] = _outputEscapes;
        j = i;
        i = k;
        do {
label0:
            {
                char c;
                if (j < l) {
                    c = s.charAt(j);
                    if (c <= '\177' && ai[c] == 0)
                        break label0;
                }
                _outputTail = i;
                if (j < l)
                    if (_characterEscapes != null)
                        _writeCustomStringSegment2(s, j, l);
                    else
                    if (_maximumNonEscapedChar == 0)
                        _writeStringSegment2(s, j, l);
                    else
                        _writeStringSegmentASCII2(s, j, l);
                return;
            }
            abyte0[i] = (byte)c;
            j++;
            i++;
        } while (true);
    }

    private final void _writeStringSegment(char ac[], int i, int j) {
        int l = j + i;
        int k = _outputTail;
        byte abyte0[] = _outputBuffer;
        int ai[] = _outputEscapes;
        j = i;
        i = k;
        do {
label0:
            {
                char c;
                if (j < l) {
                    c = ac[j];
                    if (c <= '\177' && ai[c] == 0)
                        break label0;
                }
                _outputTail = i;
                if (j < l)
                    if (_characterEscapes != null)
                        _writeCustomStringSegment2(ac, j, l);
                    else
                    if (_maximumNonEscapedChar == 0)
                        _writeStringSegment2(ac, j, l);
                    else
                        _writeStringSegmentASCII2(ac, j, l);
                return;
            }
            abyte0[i] = (byte)c;
            j++;
            i++;
        } while (true);
    }

    private final void _writeStringSegment2(String s, int i, int j) {
        if (_outputTail + (j - i) * 6 > _outputEnd)
            _flushBuffer();
        int l = _outputTail;
        byte abyte0[] = _outputBuffer;
        int ai[] = _outputEscapes;
        int k = i;
        i = l;
        while (k < j)  {
            int i1 = k + 1;
            int j1 = s.charAt(k);
            if (j1 <= 127) {
                if (ai[j1] == 0) {
                    abyte0[i] = (byte)j1;
                    i++;
                    k = i1;
                } else {
                    k = ai[j1];
                    if (k > 0) {
                        j1 = i + 1;
                        abyte0[i] = 92;
                        i = j1 + 1;
                        abyte0[j1] = (byte)k;
                        k = i1;
                    } else {
                        i = _writeGenericEscape(j1, i);
                        k = i1;
                    }
                }
            } else {
                if (j1 <= 2047) {
                    k = i + 1;
                    abyte0[i] = (byte)(j1 >> 6 | 0xc0);
                    i = k + 1;
                    abyte0[k] = (byte)(j1 & 0x3f | 0x80);
                } else {
                    i = _outputMultiByteChar(j1, i);
                }
                k = i1;
            }
        }
        _outputTail = i;
    }

    private final void _writeStringSegment2(char ac[], int i, int j) {
        if (_outputTail + (j - i) * 6 > _outputEnd)
            _flushBuffer();
        int l = _outputTail;
        byte abyte0[] = _outputBuffer;
        int ai[] = _outputEscapes;
        int k = i;
        i = l;
        while (k < j)  {
            int i1 = k + 1;
            int j1 = ac[k];
            if (j1 <= 127) {
                if (ai[j1] == 0) {
                    abyte0[i] = (byte)j1;
                    i++;
                    k = i1;
                } else {
                    k = ai[j1];
                    if (k > 0) {
                        j1 = i + 1;
                        abyte0[i] = 92;
                        i = j1 + 1;
                        abyte0[j1] = (byte)k;
                        k = i1;
                    } else {
                        i = _writeGenericEscape(j1, i);
                        k = i1;
                    }
                }
            } else {
                if (j1 <= 2047) {
                    k = i + 1;
                    abyte0[i] = (byte)(j1 >> 6 | 0xc0);
                    i = k + 1;
                    abyte0[k] = (byte)(j1 & 0x3f | 0x80);
                } else {
                    i = _outputMultiByteChar(j1, i);
                }
                k = i1;
            }
        }
        _outputTail = i;
    }

    private final void _writeStringSegmentASCII2(String s, int i, int j) {
        if (_outputTail + (j - i) * 6 > _outputEnd)
            _flushBuffer();
        int l = _outputTail;
        byte abyte0[] = _outputBuffer;
        int ai[] = _outputEscapes;
        int j1 = _maximumNonEscapedChar;
        int k = i;
        i = l;
        while (k < j)  {
            int i1 = k + 1;
            int k1 = s.charAt(k);
            if (k1 <= 127) {
                if (ai[k1] == 0) {
                    abyte0[i] = (byte)k1;
                    i++;
                    k = i1;
                } else {
                    k = ai[k1];
                    if (k > 0) {
                        k1 = i + 1;
                        abyte0[i] = 92;
                        i = k1 + 1;
                        abyte0[k1] = (byte)k;
                        k = i1;
                    } else {
                        i = _writeGenericEscape(k1, i);
                        k = i1;
                    }
                }
            } else
            if (k1 > j1) {
                i = _writeGenericEscape(k1, i);
                k = i1;
            } else {
                if (k1 <= 2047) {
                    k = i + 1;
                    abyte0[i] = (byte)(k1 >> 6 | 0xc0);
                    i = k + 1;
                    abyte0[k] = (byte)(k1 & 0x3f | 0x80);
                } else {
                    i = _outputMultiByteChar(k1, i);
                }
                k = i1;
            }
        }
        _outputTail = i;
    }

    private final void _writeStringSegmentASCII2(char ac[], int i, int j) {
        if (_outputTail + (j - i) * 6 > _outputEnd)
            _flushBuffer();
        int l = _outputTail;
        byte abyte0[] = _outputBuffer;
        int ai[] = _outputEscapes;
        int j1 = _maximumNonEscapedChar;
        int k = i;
        i = l;
        while (k < j)  {
            int i1 = k + 1;
            k = ac[k];
            if (k <= '\177') {
                if (ai[k] == 0) {
                    abyte0[i] = (byte)k;
                    i++;
                    k = i1;
                } else {
                    int k1 = ai[k];
                    if (k1 > 0) {
                        k = i + 1;
                        abyte0[i] = 92;
                        i = k + 1;
                        abyte0[k] = (byte)k1;
                        k = i1;
                    } else {
                        i = _writeGenericEscape(k, i);
                        k = i1;
                    }
                }
            } else
            if (k > j1) {
                i = _writeGenericEscape(k, i);
                k = i1;
            } else {
                if (k <= 2047) {
                    int l1 = i + 1;
                    abyte0[i] = (byte)(k >> 6 | 0xc0);
                    i = l1 + 1;
                    abyte0[l1] = (byte)(k & 0x3f | 0x80);
                } else {
                    i = _outputMultiByteChar(k, i);
                }
                k = i1;
            }
        }
        _outputTail = i;
    }

    private final void _writeStringSegments(String s, int i, int j) {
        int k;
        do {
            k = Math.min(_outputMaxContiguous, j);
            if (_outputTail + k > _outputEnd)
                _flushBuffer();
            _writeStringSegment(s, i, k);
            i += k;
            k = j - k;
            j = k;
        } while (k > 0);
    }

    private final void _writeStringSegments(String s, boolean flag) {
        if (flag) {
            if (_outputTail >= _outputEnd)
                _flushBuffer();
            byte abyte0[] = _outputBuffer;
            int i = _outputTail;
            _outputTail = i + 1;
            abyte0[i] = 34;
        }
        int j = s.length();
        int l = 0;
        int i1;
        for (; j > 0; j -= i1) {
            i1 = Math.min(_outputMaxContiguous, j);
            if (_outputTail + i1 > _outputEnd)
                _flushBuffer();
            _writeStringSegment(s, l, i1);
            l += i1;
        }

        if (flag) {
            if (_outputTail >= _outputEnd)
                _flushBuffer();
            s = _outputBuffer;
            int k = _outputTail;
            _outputTail = k + 1;
            s[k] = 34;
        }
    }

    private final void _writeStringSegments(char ac[], int i, int j) {
        int k;
        do {
            k = Math.min(_outputMaxContiguous, j);
            if (_outputTail + k > _outputEnd)
                _flushBuffer();
            _writeStringSegment(ac, i, k);
            i += k;
            k = j - k;
            j = k;
        } while (k > 0);
    }

    private final void _writeUTF8Segment(byte abyte0[], int i, int j) {
        int k;
        int ai[];
        ai = _outputEscapes;
        k = i;
_L3:
        byte byte0;
        if (k >= i + j)
            break MISSING_BLOCK_LABEL_50;
        byte0 = abyte0[k];
        if (byte0 < 0 || ai[byte0] == 0) goto _L2; else goto _L1
_L1:
        _writeUTF8Segment2(abyte0, i, j);
_L4:
        return;
_L2:
        k++;
          goto _L3
        if (_outputTail + j > _outputEnd)
            _flushBuffer();
        System.arraycopy(abyte0, i, _outputBuffer, _outputTail, j);
        _outputTail = _outputTail + j;
          goto _L4
    }

    private final void _writeUTF8Segment2(byte abyte0[], int i, int j) {
        int k = _outputTail;
        int l = k;
        if (j * 6 + k > _outputEnd) {
            _flushBuffer();
            l = _outputTail;
        }
        byte abyte1[] = _outputBuffer;
        int ai[] = _outputEscapes;
        k = i;
        do {
            int i1 = k;
            if (i1 < j + i) {
                k = i1 + 1;
                byte byte0 = abyte0[i1];
                if (byte0 < 0 || ai[byte0] == 0) {
                    abyte1[l] = byte0;
                    l++;
                } else {
                    int k1 = ai[byte0];
                    if (k1 > 0) {
                        int j1 = l + 1;
                        abyte1[l] = 92;
                        l = j1 + 1;
                        abyte1[j1] = (byte)k1;
                    } else {
                        l = _writeGenericEscape(byte0, l);
                    }
                }
            } else {
                _outputTail = l;
                return;
            }
        } while (true);
    }

    private final void _writeUTF8Segments(byte abyte0[], int i, int j) {
        int k;
        do {
            k = Math.min(_outputMaxContiguous, j);
            _writeUTF8Segment(abyte0, i, k);
            i += k;
            k = j - k;
            j = k;
        } while (k > 0);
    }

    private final void _writeUnq(SerializableString serializablestring) {
        int i = serializablestring.appendQuotedUTF8(_outputBuffer, _outputTail);
        if (i < 0)
            _writeBytes(serializablestring.asQuotedUTF8());
        else
            _outputTail = i + _outputTail;
    }

    protected final void _flushBuffer() {
        int i = _outputTail;
        if (i > 0) {
            _outputTail = 0;
            _outputStream.write(_outputBuffer, 0, i);
        }
    }

    protected final void _outputSurrogates(int i, int j) {
        i = _decodeSurrogate(i, j);
        if (_outputTail + 4 > _outputEnd)
            _flushBuffer();
        byte abyte0[] = _outputBuffer;
        j = _outputTail;
        _outputTail = j + 1;
        abyte0[j] = (byte)(i >> 18 | 0xf0);
        j = _outputTail;
        _outputTail = j + 1;
        abyte0[j] = (byte)(i >> 12 & 0x3f | 0x80);
        j = _outputTail;
        _outputTail = j + 1;
        abyte0[j] = (byte)(i >> 6 & 0x3f | 0x80);
        j = _outputTail;
        _outputTail = j + 1;
        abyte0[j] = (byte)(i & 0x3f | 0x80);
    }

    protected void _releaseBuffers() {
        char ac[] = _outputBuffer;
        if (ac != null && _bufferRecyclable) {
            _outputBuffer = null;
            _ioContext.releaseWriteEncodingBuffer(ac);
        }
        ac = _charBuffer;
        if (ac != null) {
            _charBuffer = null;
            _ioContext.releaseConcatBuffer(ac);
        }
    }

    protected final void _verifyPrettyValueWrite(String s, int i) {
        i;
        JVM INSTR tableswitch 0 3: default 32
    //                   0 76
    //                   1 37
    //                   2 50
    //                   3 63;
           goto _L1 _L2 _L3 _L4 _L5
_L1:
        _throwInternal();
_L7:
        return;
_L3:
        _cfgPrettyPrinter.writeArrayValueSeparator(this);
        continue; /* Loop/switch isn't completed */
_L4:
        _cfgPrettyPrinter.writeObjectFieldValueSeparator(this);
        continue; /* Loop/switch isn't completed */
_L5:
        _cfgPrettyPrinter.writeRootValueSeparator(this);
        continue; /* Loop/switch isn't completed */
_L2:
        if (_writeContext.inArray())
            _cfgPrettyPrinter.beforeArrayValues(this);
        else
        if (_writeContext.inObject())
            _cfgPrettyPrinter.beforeObjectEntries(this);
        if (true) goto _L7; else goto _L6
_L6:
    }

    protected final void _verifyValueWrite(String s) {
        int i;
        i = _writeContext.writeValue();
        if (i == 5)
            _reportError((new StringBuilder()).append("Can not ").append(s).append(", expecting field name").toString());
        if (_cfgPrettyPrinter != null) goto _L2; else goto _L1
_L1:
        i;
        JVM INSTR tableswitch 1 3: default 76
    //                   1 77
    //                   2 118
    //                   3 124;
           goto _L3 _L4 _L5 _L6
_L3:
        return;
_L4:
        byte byte0 = 44;
_L7:
        if (_outputTail >= _outputEnd)
            _flushBuffer();
        _outputBuffer[_outputTail] = byte0;
        _outputTail = _outputTail + 1;
        continue; /* Loop/switch isn't completed */
_L5:
        byte0 = 58;
        if (true) goto _L7; else goto _L6
_L6:
        if (_rootValueSeparator != null) {
            s = _rootValueSeparator.asUnquotedUTF8();
            if (s.length > 0)
                _writeBytes(s);
        }
        continue; /* Loop/switch isn't completed */
_L2:
        _verifyPrettyValueWrite(s, i);
        if (true) goto _L3; else goto _L8
_L8:
    }

    protected final int _writeBinary(Base64Variant base64variant, InputStream inputstream, byte abyte0[]) {
        int k1 = -3;
        int i2 = _outputEnd - 6;
        int l = base64variant.getMaxLineLength() >> 2;
        int i = 0;
        int j1 = 0;
        int j = 0;
        do {
            int i1 = k1;
            int l1 = j;
            int k = j1;
            if (j > k1) {
                k = _readMore(inputstream, abyte0, j, j1, abyte0.length);
                if (k < 3) {
                    if (k < 0) {
                        if (_outputTail > i2)
                            _flushBuffer();
                        j = abyte0[0] << 16;
                        byte byte0;
                        byte abyte1[];
                        if (1 < k) {
                            j = (abyte0[1] & 0xff) << 8 | j;
                            k = 2;
                        } else {
                            k = 1;
                        }
                        _outputTail = base64variant.encodeBase64Partial(j, k, _outputBuffer, _outputTail);
                        i += k;
                    }
                    return i;
                }
                i1 = k - 3;
                l1 = 0;
            }
            if (_outputTail > i2)
                _flushBuffer();
            j = l1 + 1;
            j1 = abyte0[l1];
            l1 = j + 1;
            k1 = abyte0[j];
            j = l1 + 1;
            byte0 = abyte0[l1];
            l1 = i + 3;
            _outputTail = base64variant.encodeBase64Chunk((k1 & 0xff | j1 << 8) << 8 | byte0 & 0xff, _outputBuffer, _outputTail);
            i = --l;
            if (l <= 0) {
                abyte1 = _outputBuffer;
                i = _outputTail;
                _outputTail = i + 1;
                abyte1[i] = 92;
                abyte1 = _outputBuffer;
                i = _outputTail;
                _outputTail = i + 1;
                abyte1[i] = 110;
                i = base64variant.getMaxLineLength() >> 2;
            }
            l = i;
            k1 = i1;
            j1 = k;
            i = l1;
        } while (true);
    }

    protected final int _writeBinary(Base64Variant base64variant, InputStream inputstream, byte abyte0[], int i) {
        boolean flag = false;
        int k = 0;
        int k1 = -3;
        int i2 = _outputEnd - 6;
        int l = base64variant.getMaxLineLength() >> 2;
        int j = i;
        i = ((flag) ? 1 : 0);
        do {
label0:
            {
label1:
                {
                    int j1 = i;
                    int i1 = k;
                    int l1;
                    if (j > 2) {
                        j1 = k1;
                        l1 = i;
                        i1 = k;
                        if (i <= k1)
                            break label0;
                        i1 = _readMore(inputstream, abyte0, i, k, j);
                        l1 = 0;
                        j1 = 0;
                        if (i1 >= 3)
                            break label1;
                    }
                    i = j;
                    if (j > 0) {
                        l = _readMore(inputstream, abyte0, j1, i1, j);
                        i = j;
                        if (l > 0) {
                            if (_outputTail > i2)
                                _flushBuffer();
                            k = abyte0[0] << 16;
                            byte abyte1[];
                            if (1 < l) {
                                k |= (abyte0[1] & 0xff) << 8;
                                i = 2;
                            } else {
                                i = 1;
                            }
                            _outputTail = base64variant.encodeBase64Partial(k, i, _outputBuffer, _outputTail);
                            i = j - i;
                        }
                    }
                    return i;
                }
                j1 = i1 - 3;
            }
            if (_outputTail > i2)
                _flushBuffer();
            k = l1 + 1;
            i = abyte0[l1];
            l1 = k + 1;
            k1 = abyte0[k];
            k = l1 + 1;
            l1 = abyte0[l1];
            j -= 3;
            _outputTail = base64variant.encodeBase64Chunk((k1 & 0xff | i << 8) << 8 | l1 & 0xff, _outputBuffer, _outputTail);
            i = --l;
            if (l <= 0) {
                abyte1 = _outputBuffer;
                i = _outputTail;
                _outputTail = i + 1;
                abyte1[i] = 92;
                abyte1 = _outputBuffer;
                i = _outputTail;
                _outputTail = i + 1;
                abyte1[i] = 110;
                i = base64variant.getMaxLineLength() >> 2;
            }
            l = i;
            k1 = j1;
            i = k;
            k = i1;
        } while (true);
    }

    protected final void _writeBinary(Base64Variant base64variant, byte abyte0[], int i, int j) {
        int k1 = _outputEnd - 6;
        int l = base64variant.getMaxLineLength() >> 2;
        int k = i;
        i = l;
        do {
            if (k > j - 3)
                break;
            if (_outputTail > k1)
                _flushBuffer();
            l = k + 1;
            int i1 = abyte0[k];
            k = l + 1;
            byte byte0 = abyte0[l];
            l = k + 1;
            _outputTail = base64variant.encodeBase64Chunk((byte0 & 0xff | i1 << 8) << 8 | abyte0[k] & 0xff, _outputBuffer, _outputTail);
            i1 = i - 1;
            i = i1;
            k = l;
            if (i1 <= 0) {
                byte abyte1[] = _outputBuffer;
                i = _outputTail;
                _outputTail = i + 1;
                abyte1[i] = 92;
                abyte1 = _outputBuffer;
                i = _outputTail;
                _outputTail = i + 1;
                abyte1[i] = 110;
                i = base64variant.getMaxLineLength() >> 2;
                k = l;
            }
        } while (true);
        l = j - k;
        if (l > 0) {
            if (_outputTail > k1)
                _flushBuffer();
            int j1 = k + 1;
            j = abyte0[k] << 16;
            i = j;
            if (l == 2)
                i = j | (abyte0[j1] & 0xff) << 8;
            _outputTail = base64variant.encodeBase64Partial(i, l, _outputBuffer, _outputTail);
        }
    }

    protected final void _writePPFieldName(SerializableString serializablestring) {
        int i = 1;
        int j = _writeContext.writeFieldName(serializablestring.getValue());
        if (j == 4)
            _reportError("Can not write a field name, expecting a value");
        if (j == 1)
            _cfgPrettyPrinter.writeObjectEntrySeparator(this);
        else
            _cfgPrettyPrinter.beforeObjectEntries(this);
        if (_cfgUnqNames)
            i = 0;
        if (i != 0) {
            if (_outputTail >= _outputEnd)
                _flushBuffer();
            byte abyte0[] = _outputBuffer;
            int k = _outputTail;
            _outputTail = k + 1;
            abyte0[k] = 34;
        }
        _writeBytes(serializablestring.asQuotedUTF8());
        if (i != 0) {
            if (_outputTail >= _outputEnd)
                _flushBuffer();
            serializablestring = _outputBuffer;
            i = _outputTail;
            _outputTail = i + 1;
            serializablestring[i] = 34;
        }
    }

    protected final void _writePPFieldName(String s) {
        int i = _writeContext.writeFieldName(s);
        if (i == 4)
            _reportError("Can not write a field name, expecting a value");
        if (i == 1)
            _cfgPrettyPrinter.writeObjectEntrySeparator(this);
        else
            _cfgPrettyPrinter.beforeObjectEntries(this);
        if (_cfgUnqNames) {
            _writeStringSegments(s, false);
        } else {
            int k = s.length();
            if (k > _charBufferLength) {
                _writeStringSegments(s, true);
            } else {
                if (_outputTail >= _outputEnd)
                    _flushBuffer();
                byte abyte0[] = _outputBuffer;
                int j = _outputTail;
                _outputTail = j + 1;
                abyte0[j] = 34;
                s.getChars(0, k, _charBuffer, 0);
                if (k <= _outputMaxContiguous) {
                    if (_outputTail + k > _outputEnd)
                        _flushBuffer();
                    _writeStringSegment(_charBuffer, 0, k);
                } else {
                    _writeStringSegments(_charBuffer, 0, k);
                }
                if (_outputTail >= _outputEnd)
                    _flushBuffer();
                s = _outputBuffer;
                j = _outputTail;
                _outputTail = j + 1;
                s[j] = 34;
            }
        }
    }

    public void close() {
        super.close();
        if (_outputBuffer != null && isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT))
            do {
                JsonWriteContext jsonwritecontext = getOutputContext();
                if (jsonwritecontext.inArray()) {
                    writeEndArray();
                    continue;
                }
                if (!jsonwritecontext.inObject())
                    break;
                writeEndObject();
            } while (true);
        _flushBuffer();
        _outputTail = 0;
        if (_outputStream == null) goto _L2; else goto _L1
_L1:
        if (!_ioContext.isResourceManaged() && !isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET)) goto _L4; else goto _L3
_L3:
        _outputStream.close();
_L2:
        _releaseBuffers();
        return;
_L4:
        if (isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM))
            _outputStream.flush();
        if (true) goto _L2; else goto _L5
_L5:
    }

    public void flush() {
        _flushBuffer();
        if (_outputStream != null && isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM))
            _outputStream.flush();
    }

    public int getOutputBuffered() {
        return _outputTail;
    }

    public Object getOutputTarget() {
        return _outputStream;
    }

    public int writeBinary(Base64Variant base64variant, InputStream inputstream, int i) {
        byte abyte0[];
        _verifyValueWrite("write a binary value");
        if (_outputTail >= _outputEnd)
            _flushBuffer();
        abyte0 = _outputBuffer;
        int j = _outputTail;
        _outputTail = j + 1;
        abyte0[j] = 34;
        abyte0 = _ioContext.allocBase64Buffer();
        if (i >= 0) goto _L2; else goto _L1
_L1:
        int k = _writeBinary(base64variant, inputstream, abyte0);
_L4:
        _ioContext.releaseBase64Buffer(abyte0);
        if (_outputTail >= _outputEnd)
            _flushBuffer();
        base64variant = _outputBuffer;
        i = _outputTail;
        _outputTail = i + 1;
        base64variant[i] = 34;
        return k;
_L2:
        int l = _writeBinary(base64variant, inputstream, abyte0, i);
        k = i;
        if (l <= 0) goto _L4; else goto _L3
_L3:
        base64variant = JVM INSTR new #200 <Class StringBuilder>;
        base64variant.StringBuilder();
        _reportError(base64variant.append("Too few bytes available: missing ").append(l).append(" bytes (out of ").append(i).append(")").toString());
        k = i;
          goto _L4
        base64variant;
        _ioContext.releaseBase64Buffer(abyte0);
        throw base64variant;
    }

    public void writeBinary(Base64Variant base64variant, byte abyte0[], int i, int j) {
        _verifyValueWrite("write a binary value");
        if (_outputTail >= _outputEnd)
            _flushBuffer();
        byte abyte1[] = _outputBuffer;
        int k = _outputTail;
        _outputTail = k + 1;
        abyte1[k] = 34;
        _writeBinary(base64variant, abyte0, i, i + j);
        if (_outputTail >= _outputEnd)
            _flushBuffer();
        base64variant = _outputBuffer;
        i = _outputTail;
        _outputTail = i + 1;
        base64variant[i] = 34;
    }

    public void writeBoolean(boolean flag) {
        _verifyValueWrite("write a boolean value");
        if (_outputTail + 5 >= _outputEnd)
            _flushBuffer();
        int i;
        byte abyte0[];
        if (flag)
            abyte0 = TRUE_BYTES;
        else
            abyte0 = FALSE_BYTES;
        i = abyte0.length;
        System.arraycopy(abyte0, 0, _outputBuffer, _outputTail, i);
        _outputTail = _outputTail + i;
    }

    public final void writeEndArray() {
        if (!_writeContext.inArray())
            _reportError((new StringBuilder()).append("Current context not an ARRAY but ").append(_writeContext.getTypeDesc()).toString());
        if (_cfgPrettyPrinter != null) {
            _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount());
        } else {
            if (_outputTail >= _outputEnd)
                _flushBuffer();
            byte abyte0[] = _outputBuffer;
            int i = _outputTail;
            _outputTail = i + 1;
            abyte0[i] = 93;
        }
        _writeContext = _writeContext.clearAndGetParent();
    }

    public final void writeEndObject() {
        if (!_writeContext.inObject())
            _reportError((new StringBuilder()).append("Current context not an object but ").append(_writeContext.getTypeDesc()).toString());
        if (_cfgPrettyPrinter != null) {
            _cfgPrettyPrinter.writeEndObject(this, _writeContext.getEntryCount());
        } else {
            if (_outputTail >= _outputEnd)
                _flushBuffer();
            byte abyte0[] = _outputBuffer;
            int i = _outputTail;
            _outputTail = i + 1;
            abyte0[i] = 125;
        }
        _writeContext = _writeContext.clearAndGetParent();
    }

    public void writeFieldName(SerializableString serializablestring) {
        if (_cfgPrettyPrinter != null) {
            _writePPFieldName(serializablestring);
        } else {
            int i = _writeContext.writeFieldName(serializablestring.getValue());
            if (i == 4)
                _reportError("Can not write a field name, expecting a value");
            if (i == 1) {
                if (_outputTail >= _outputEnd)
                    _flushBuffer();
                byte abyte0[] = _outputBuffer;
                int j = _outputTail;
                _outputTail = j + 1;
                abyte0[j] = 44;
            }
            if (_cfgUnqNames) {
                _writeUnq(serializablestring);
            } else {
                if (_outputTail >= _outputEnd)
                    _flushBuffer();
                byte abyte1[] = _outputBuffer;
                int k = _outputTail;
                _outputTail = k + 1;
                abyte1[k] = 34;
                k = serializablestring.appendQuotedUTF8(_outputBuffer, _outputTail);
                if (k < 0)
                    _writeBytes(serializablestring.asQuotedUTF8());
                else
                    _outputTail = k + _outputTail;
                if (_outputTail >= _outputEnd)
                    _flushBuffer();
                serializablestring = _outputBuffer;
                k = _outputTail;
                _outputTail = k + 1;
                serializablestring[k] = 34;
            }
        }
    }

    public void writeFieldName(String s) {
        if (_cfgPrettyPrinter != null) {
            _writePPFieldName(s);
        } else {
            int i = _writeContext.writeFieldName(s);
            if (i == 4)
                _reportError("Can not write a field name, expecting a value");
            if (i == 1) {
                if (_outputTail >= _outputEnd)
                    _flushBuffer();
                byte abyte0[] = _outputBuffer;
                int j = _outputTail;
                _outputTail = j + 1;
                abyte0[j] = 44;
            }
            if (_cfgUnqNames) {
                _writeStringSegments(s, false);
            } else {
                int k = s.length();
                if (k > _charBufferLength) {
                    _writeStringSegments(s, true);
                } else {
                    if (_outputTail >= _outputEnd)
                        _flushBuffer();
                    byte abyte1[] = _outputBuffer;
                    int l = _outputTail;
                    _outputTail = l + 1;
                    abyte1[l] = 34;
                    if (k <= _outputMaxContiguous) {
                        if (_outputTail + k > _outputEnd)
                            _flushBuffer();
                        _writeStringSegment(s, 0, k);
                    } else {
                        _writeStringSegments(s, 0, k);
                    }
                    if (_outputTail >= _outputEnd)
                        _flushBuffer();
                    s = _outputBuffer;
                    k = _outputTail;
                    _outputTail = k + 1;
                    s[k] = 34;
                }
            }
        }
    }

    public void writeNull() {
        _verifyValueWrite("write a null");
        _writeNull();
    }

    public void writeNumber(double d) {
        if (_cfgNumbersAsStrings || (Double.isNaN(d) || Double.isInfinite(d)) && com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS.enabledIn(_features)) {
            writeString(String.valueOf(d));
        } else {
            _verifyValueWrite("write a number");
            writeRaw(String.valueOf(d));
        }
    }

    public void writeNumber(float f) {
        if (_cfgNumbersAsStrings || (Float.isNaN(f) || Float.isInfinite(f)) && com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS.enabledIn(_features)) {
            writeString(String.valueOf(f));
        } else {
            _verifyValueWrite("write a number");
            writeRaw(String.valueOf(f));
        }
    }

    public void writeNumber(int i) {
        _verifyValueWrite("write a number");
        if (_outputTail + 11 >= _outputEnd)
            _flushBuffer();
        if (_cfgNumbersAsStrings)
            _writeQuotedInt(i);
        else
            _outputTail = NumberOutput.outputInt(i, _outputBuffer, _outputTail);
    }

    public void writeNumber(long l) {
        _verifyValueWrite("write a number");
        if (_cfgNumbersAsStrings) {
            _writeQuotedLong(l);
        } else {
            if (_outputTail + 21 >= _outputEnd)
                _flushBuffer();
            _outputTail = NumberOutput.outputLong(l, _outputBuffer, _outputTail);
        }
    }

    public void writeNumber(String s) {
        _verifyValueWrite("write a number");
        if (_cfgNumbersAsStrings)
            _writeQuotedRaw(s);
        else
            writeRaw(s);
    }

    public void writeNumber(BigDecimal bigdecimal) {
        _verifyValueWrite("write a number");
        if (bigdecimal == null)
            _writeNull();
        else
        if (_cfgNumbersAsStrings) {
            if (com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features))
                bigdecimal = bigdecimal.toPlainString();
            else
                bigdecimal = bigdecimal.toString();
            _writeQuotedRaw(bigdecimal);
        } else
        if (com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features))
            writeRaw(bigdecimal.toPlainString());
        else
            writeRaw(bigdecimal.toString());
    }

    public void writeNumber(BigInteger biginteger) {
        _verifyValueWrite("write a number");
        if (biginteger == null)
            _writeNull();
        else
        if (_cfgNumbersAsStrings)
            _writeQuotedRaw(biginteger.toString());
        else
            writeRaw(biginteger.toString());
    }

    public void writeNumber(short word0) {
        _verifyValueWrite("write a number");
        if (_outputTail + 6 >= _outputEnd)
            _flushBuffer();
        if (_cfgNumbersAsStrings)
            _writeQuotedShort(word0);
        else
            _outputTail = NumberOutput.outputInt(word0, _outputBuffer, _outputTail);
    }

    public void writeRaw(char c) {
        if (_outputTail + 3 >= _outputEnd)
            _flushBuffer();
        byte abyte0[] = _outputBuffer;
        if (c <= '\177') {
            int i = _outputTail;
            _outputTail = i + 1;
            abyte0[i] = (byte)c;
        } else
        if (c < '\u0800') {
            int j = _outputTail;
            _outputTail = j + 1;
            abyte0[j] = (byte)(c >> 6 | 0xc0);
            j = _outputTail;
            _outputTail = j + 1;
            abyte0[j] = (byte)(c & 0x3f | 0x80);
        } else {
            _outputRawMultiByteChar(c, null, 0, 0);
        }
    }

    public void writeRaw(SerializableString serializablestring) {
        serializablestring = serializablestring.asUnquotedUTF8();
        if (serializablestring.length > 0)
            _writeBytes(serializablestring);
    }

    public void writeRaw(String s) {
        int i = s.length();
        int j = 0;
        int k;
        for (; i > 0; i -= k) {
            char ac[] = _charBuffer;
            int l = ac.length;
            k = l;
            if (i < l)
                k = i;
            s.getChars(j, j + k, ac, 0);
            writeRaw(ac, 0, k);
            j += k;
        }

    }

    public void writeRaw(String s, int i, int j) {
        int k = j;
        j = i;
        for (i = k; i > 0; i -= k) {
            char ac[] = _charBuffer;
            int l = ac.length;
            k = l;
            if (i < l)
                k = i;
            s.getChars(j, j + k, ac, 0);
            writeRaw(ac, 0, k);
            j += k;
        }

    }

    public final void writeRaw(char ac[], int i, int j) {
        int k = j + j + j;
        if (_outputTail + k <= _outputEnd) goto _L2; else goto _L1
_L1:
        if (_outputEnd >= k) goto _L4; else goto _L3
_L3:
        _writeSegmentedRaw(ac, i, j);
_L6:
        return;
_L4:
        _flushBuffer();
_L2:
        k = j + i;
_L7:
        if (i >= k) goto _L6; else goto _L5
_L5:
label0:
        {
            int l = ac[i];
            if (l <= 127)
                break label0;
            j = i + 1;
            i = ac[i];
            byte abyte1[];
            if (i < 2048) {
                byte abyte0[] = _outputBuffer;
                l = _outputTail;
                _outputTail = l + 1;
                abyte0[l] = (byte)(i >> 6 | 0xc0);
                abyte0 = _outputBuffer;
                l = _outputTail;
                _outputTail = l + 1;
                abyte0[l] = (byte)(i & 0x3f | 0x80);
                i = j;
            } else {
                i = _outputRawMultiByteChar(i, ac, j, k);
            }
        }
          goto _L7
        abyte1 = _outputBuffer;
        j = _outputTail;
        _outputTail = j + 1;
        abyte1[j] = (byte)l;
        j = i + 1;
        i = j;
        if (j < k) goto _L5; else goto _L6
    }

    public void writeRawUTF8String(byte abyte0[], int i, int j) {
        _verifyValueWrite("write a string");
        if (_outputTail >= _outputEnd)
            _flushBuffer();
        byte abyte1[] = _outputBuffer;
        int k = _outputTail;
        _outputTail = k + 1;
        abyte1[k] = 34;
        _writeBytes(abyte0, i, j);
        if (_outputTail >= _outputEnd)
            _flushBuffer();
        abyte0 = _outputBuffer;
        i = _outputTail;
        _outputTail = i + 1;
        abyte0[i] = 34;
    }

    public void writeRawValue(SerializableString serializablestring) {
        _verifyValueWrite("write a raw (unencoded) value");
        serializablestring = serializablestring.asUnquotedUTF8();
        if (serializablestring.length > 0)
            _writeBytes(serializablestring);
    }

    public final void writeStartArray() {
        _verifyValueWrite("start an array");
        _writeContext = _writeContext.createChildArrayContext();
        if (_cfgPrettyPrinter != null) {
            _cfgPrettyPrinter.writeStartArray(this);
        } else {
            if (_outputTail >= _outputEnd)
                _flushBuffer();
            byte abyte0[] = _outputBuffer;
            int i = _outputTail;
            _outputTail = i + 1;
            abyte0[i] = 91;
        }
    }

    public final void writeStartObject() {
        _verifyValueWrite("start an object");
        _writeContext = _writeContext.createChildObjectContext();
        if (_cfgPrettyPrinter != null) {
            _cfgPrettyPrinter.writeStartObject(this);
        } else {
            if (_outputTail >= _outputEnd)
                _flushBuffer();
            byte abyte0[] = _outputBuffer;
            int i = _outputTail;
            _outputTail = i + 1;
            abyte0[i] = 123;
        }
    }

    public final void writeString(SerializableString serializablestring) {
        _verifyValueWrite("write a string");
        if (_outputTail >= _outputEnd)
            _flushBuffer();
        byte abyte0[] = _outputBuffer;
        int i = _outputTail;
        _outputTail = i + 1;
        abyte0[i] = 34;
        i = serializablestring.appendQuotedUTF8(_outputBuffer, _outputTail);
        if (i < 0)
            _writeBytes(serializablestring.asQuotedUTF8());
        else
            _outputTail = i + _outputTail;
        if (_outputTail >= _outputEnd)
            _flushBuffer();
        serializablestring = _outputBuffer;
        i = _outputTail;
        _outputTail = i + 1;
        serializablestring[i] = 34;
    }

    public void writeString(String s) {
        _verifyValueWrite("write a string");
        if (s == null) {
            _writeNull();
        } else {
            int j = s.length();
            if (j > _outputMaxContiguous) {
                _writeStringSegments(s, true);
            } else {
                if (_outputTail + j >= _outputEnd)
                    _flushBuffer();
                byte abyte0[] = _outputBuffer;
                int i = _outputTail;
                _outputTail = i + 1;
                abyte0[i] = 34;
                _writeStringSegment(s, 0, j);
                if (_outputTail >= _outputEnd)
                    _flushBuffer();
                s = _outputBuffer;
                i = _outputTail;
                _outputTail = i + 1;
                s[i] = 34;
            }
        }
    }

    public void writeString(char ac[], int i, int j) {
        _verifyValueWrite("write a string");
        if (_outputTail >= _outputEnd)
            _flushBuffer();
        byte abyte0[] = _outputBuffer;
        int k = _outputTail;
        _outputTail = k + 1;
        abyte0[k] = 34;
        if (j <= _outputMaxContiguous) {
            if (_outputTail + j > _outputEnd)
                _flushBuffer();
            _writeStringSegment(ac, i, j);
        } else {
            _writeStringSegments(ac, i, j);
        }
        if (_outputTail >= _outputEnd)
            _flushBuffer();
        ac = _outputBuffer;
        i = _outputTail;
        _outputTail = i + 1;
        ac[i] = '"';
    }

    public void writeUTF8String(byte abyte0[], int i, int j) {
        _verifyValueWrite("write a string");
        if (_outputTail >= _outputEnd)
            _flushBuffer();
        byte abyte1[] = _outputBuffer;
        int k = _outputTail;
        _outputTail = k + 1;
        abyte1[k] = 34;
        if (j <= _outputMaxContiguous)
            _writeUTF8Segment(abyte0, i, j);
        else
            _writeUTF8Segments(abyte0, i, j);
        if (_outputTail >= _outputEnd)
            _flushBuffer();
        abyte0 = _outputBuffer;
        i = _outputTail;
        _outputTail = i + 1;
        abyte0[i] = 34;
    }

}
