// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.core.json;

import com.fasterxml.jackson.core.*;

// Referenced classes of package com.fasterxml.jackson.core.json:
//            DupDetector

public class JsonWriteContext extends JsonStreamContext {

    public static final int STATUS_EXPECT_NAME = 5;
    public static final int STATUS_EXPECT_VALUE = 4;
    public static final int STATUS_OK_AFTER_COLON = 2;
    public static final int STATUS_OK_AFTER_COMMA = 1;
    public static final int STATUS_OK_AFTER_SPACE = 3;
    public static final int STATUS_OK_AS_IS = 0;
    protected JsonWriteContext _child;
    protected String _currentName;
    protected Object _currentValue;
    protected DupDetector _dups;
    protected boolean _gotName;
    protected final JsonWriteContext _parent;

    protected JsonWriteContext(int i, JsonWriteContext jsonwritecontext, DupDetector dupdetector) {
        _type = i;
        _parent = jsonwritecontext;
        _dups = dupdetector;
        _index = -1;
    }

    private final void _checkDup(DupDetector dupdetector, String s) {
        if (dupdetector.isDup(s)) {
            dupdetector = ((DupDetector) (dupdetector.getSource()));
            s = (new StringBuilder()).append("Duplicate field '").append(s).append("'").toString();
            if (dupdetector instanceof JsonGenerator)
                dupdetector = (JsonGenerator)dupdetector;
            else
                dupdetector = null;
            throw new JsonGenerationException(s, dupdetector);
        } else {
            return;
        }
    }

    public static JsonWriteContext createRootContext() {
        return createRootContext(null);
    }

    public static JsonWriteContext createRootContext(DupDetector dupdetector) {
        return new JsonWriteContext(0, null, dupdetector);
    }

    protected void appendDesc(StringBuilder stringbuilder) {
        if (_type == 2) {
            stringbuilder.append('{');
            if (_currentName != null) {
                stringbuilder.append('"');
                stringbuilder.append(_currentName);
                stringbuilder.append('"');
            } else {
                stringbuilder.append('?');
            }
            stringbuilder.append('}');
        } else
        if (_type == 1) {
            stringbuilder.append('[');
            stringbuilder.append(getCurrentIndex());
            stringbuilder.append(']');
        } else {
            stringbuilder.append("/");
        }
    }

    public JsonWriteContext clearAndGetParent() {
        _currentValue = null;
        return _parent;
    }

    public JsonWriteContext createChildArrayContext() {
        Object obj = _child;
        if (obj == null) {
            if (_dups == null)
                obj = null;
            else
                obj = _dups.child();
            obj = new JsonWriteContext(1, this, ((DupDetector) (obj)));
            _child = ((JsonWriteContext) (obj));
        } else {
            obj = ((JsonWriteContext) (obj)).reset(1);
        }
        return ((JsonWriteContext) (obj));
    }

    public JsonWriteContext createChildObjectContext() {
        Object obj = _child;
        if (obj == null) {
            if (_dups == null)
                obj = null;
            else
                obj = _dups.child();
            obj = new JsonWriteContext(2, this, ((DupDetector) (obj)));
            _child = ((JsonWriteContext) (obj));
        } else {
            obj = ((JsonWriteContext) (obj)).reset(2);
        }
        return ((JsonWriteContext) (obj));
    }

    public final String getCurrentName() {
        return _currentName;
    }

    public Object getCurrentValue() {
        return _currentValue;
    }

    public DupDetector getDupDetector() {
        return _dups;
    }

    public volatile JsonStreamContext getParent() {
        return getParent();
    }

    public final JsonWriteContext getParent() {
        return _parent;
    }

    protected JsonWriteContext reset(int i) {
        _type = i;
        _index = -1;
        _currentName = null;
        _gotName = false;
        _currentValue = null;
        if (_dups != null)
            _dups.reset();
        return this;
    }

    public void setCurrentValue(Object obj) {
        _currentValue = obj;
    }

    public String toString() {
        StringBuilder stringbuilder = new StringBuilder(64);
        appendDesc(stringbuilder);
        return stringbuilder.toString();
    }

    public JsonWriteContext withDupDetector(DupDetector dupdetector) {
        _dups = dupdetector;
        return this;
    }

    public int writeFieldName(String s) {
        byte byte0 = 1;
        if (!_gotName) goto _L2; else goto _L1
_L1:
        byte0 = 4;
_L4:
        return byte0;
_L2:
        _gotName = true;
        _currentName = s;
        if (_dups != null)
            _checkDup(_dups, s);
        if (_index < 0)
            byte0 = 0;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public int writeValue() {
        byte byte0 = 0;
        if (_type != 2) goto _L2; else goto _L1
_L1:
        if (!_gotName) {
            byte0 = 5;
        } else {
            _gotName = false;
            _index = _index + 1;
            byte0 = 2;
        }
_L4:
        return byte0;
_L2:
        if (_type == 1) {
            int i = _index;
            _index = _index + 1;
            if (i >= 0)
                byte0 = 1;
        } else {
            _index = _index + 1;
            if (_index != 0)
                byte0 = 3;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }
}
