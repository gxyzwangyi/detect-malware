// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.core.sym;

import java.util.Arrays;

// Referenced classes of package com.fasterxml.jackson.core.sym:
//            Name

public final class NameN extends Name {

    private final int q[];
    private final int q1;
    private final int q2;
    private final int q3;
    private final int q4;
    private final int qlen;

    NameN(String s, int i, int j, int k, int l, int i1, int ai[], 
            int j1) {
        super(s, i);
        q1 = j;
        q2 = k;
        q3 = l;
        q4 = i1;
        q = ai;
        qlen = j1;
    }

    private final boolean _equals2(int ai[]) {
        int i;
        int j;
        boolean flag;
        flag = false;
        j = qlen;
        i = 0;
_L3:
        if (i >= j - 4)
            break MISSING_BLOCK_LABEL_40;
        if (ai[i + 4] == q[i]) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        i++;
          goto _L3
        flag = true;
          goto _L1
    }

    public static NameN construct(String s, int i, int ai[], int j) {
        if (j < 4)
            throw new IllegalArgumentException();
        int k = ai[0];
        int i1 = ai[1];
        int j1 = ai[2];
        int l = ai[3];
        if (j - 4 > 0)
            ai = Arrays.copyOfRange(ai, 4, j);
        else
            ai = null;
        return new NameN(s, i, k, i1, j1, l, ai, j);
    }

    public boolean equals(int i) {
        return false;
    }

    public boolean equals(int i, int j) {
        return false;
    }

    public boolean equals(int i, int j, int k) {
        return false;
    }

    public boolean equals(int ai[], int i) {
        boolean flag1 = false;
        if (i == qlen) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        flag = flag1;
        if (ai[0] == q1) {
            flag = flag1;
            if (ai[1] == q2) {
                flag = flag1;
                if (ai[2] == q3) {
                    flag = flag1;
                    if (ai[3] == q4)
                        switch (i) {
                        default:
                            flag = _equals2(ai);
                            break;

                        case 8: // '\b'
                            flag = flag1;
                            if (ai[7] != q[3])
                                break;
                            // fall through

                        case 7: // '\007'
                            flag = flag1;
                            if (ai[6] != q[2])
                                break;
                            // fall through

                        case 6: // '\006'
                            flag = flag1;
                            if (ai[5] != q[1])
                                break;
                            // fall through

                        case 5: // '\005'
                            flag = flag1;
                            if (ai[4] != q[0])
                                break;
                            // fall through

                        case 4: // '\004'
                            flag = true;
                            break;
                        }
                }
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }
}
