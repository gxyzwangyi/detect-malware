// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.core.filter;

import com.fasterxml.jackson.core.*;

// Referenced classes of package com.fasterxml.jackson.core.filter:
//            TokenFilter

public class TokenFilterContext extends JsonStreamContext {

    protected TokenFilterContext _child;
    protected String _currentName;
    protected TokenFilter _filter;
    protected boolean _needToHandleName;
    protected final TokenFilterContext _parent;
    protected boolean _startHandled;

    protected TokenFilterContext(int i, TokenFilterContext tokenfiltercontext, TokenFilter tokenfilter, boolean flag) {
        _type = i;
        _parent = tokenfiltercontext;
        _filter = tokenfilter;
        _index = -1;
        _startHandled = flag;
        _needToHandleName = false;
    }

    private void _writePath(JsonGenerator jsongenerator) {
        if (_filter != null && _filter != TokenFilter.INCLUDE_ALL) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (_parent != null)
            _parent._writePath(jsongenerator);
        if (_startHandled) {
            if (_needToHandleName) {
                _needToHandleName = false;
                jsongenerator.writeFieldName(_currentName);
            }
        } else {
            _startHandled = true;
            if (_type == 2) {
                jsongenerator.writeStartObject();
                if (_needToHandleName) {
                    _needToHandleName = false;
                    jsongenerator.writeFieldName(_currentName);
                }
            } else
            if (_type == 1)
                jsongenerator.writeStartArray();
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    public static TokenFilterContext createRootContext(TokenFilter tokenfilter) {
        return new TokenFilterContext(0, null, tokenfilter, true);
    }

    protected void appendDesc(StringBuilder stringbuilder) {
        if (_parent != null)
            _parent.appendDesc(stringbuilder);
        if (_type == 2) {
            stringbuilder.append('{');
            if (_currentName != null) {
                stringbuilder.append('"');
                stringbuilder.append(_currentName);
                stringbuilder.append('"');
            } else {
                stringbuilder.append('?');
            }
            stringbuilder.append('}');
        } else
        if (_type == 1) {
            stringbuilder.append('[');
            stringbuilder.append(getCurrentIndex());
            stringbuilder.append(']');
        } else {
            stringbuilder.append("/");
        }
    }

    public TokenFilter checkValue(TokenFilter tokenfilter) {
        if (_type != 2) {
            int i = _index + 1;
            _index = i;
            if (_type == 1)
                tokenfilter = tokenfilter.includeElement(i);
            else
                tokenfilter = tokenfilter.includeRootValue(i);
        }
        return tokenfilter;
    }

    public TokenFilterContext closeArray(JsonGenerator jsongenerator) {
        if (_startHandled)
            jsongenerator.writeEndArray();
        if (_filter != null && _filter != TokenFilter.INCLUDE_ALL)
            _filter.filterFinishArray();
        return _parent;
    }

    public TokenFilterContext closeObject(JsonGenerator jsongenerator) {
        if (_startHandled)
            jsongenerator.writeEndObject();
        if (_filter != null && _filter != TokenFilter.INCLUDE_ALL)
            _filter.filterFinishObject();
        return _parent;
    }

    public TokenFilterContext createChildArrayContext(TokenFilter tokenfilter, boolean flag) {
        TokenFilterContext tokenfiltercontext = _child;
        if (tokenfiltercontext == null) {
            tokenfilter = new TokenFilterContext(1, this, tokenfilter, flag);
            _child = tokenfilter;
        } else {
            tokenfilter = tokenfiltercontext.reset(1, tokenfilter, flag);
        }
        return tokenfilter;
    }

    public TokenFilterContext createChildObjectContext(TokenFilter tokenfilter, boolean flag) {
        TokenFilterContext tokenfiltercontext = _child;
        if (tokenfiltercontext == null) {
            tokenfilter = new TokenFilterContext(2, this, tokenfilter, flag);
            _child = tokenfilter;
        } else {
            tokenfilter = tokenfiltercontext.reset(2, tokenfilter, flag);
        }
        return tokenfilter;
    }

    public TokenFilterContext findChildOf(TokenFilterContext tokenfiltercontext) {
        if (_parent != tokenfiltercontext) goto _L2; else goto _L1
_L1:
        TokenFilterContext tokenfiltercontext1 = this;
_L4:
        return tokenfiltercontext1;
_L2:
        TokenFilterContext tokenfiltercontext2;
        for (tokenfiltercontext1 = _parent; tokenfiltercontext1 != null; tokenfiltercontext1 = tokenfiltercontext2) {
            tokenfiltercontext2 = tokenfiltercontext1._parent;
            if (tokenfiltercontext2 == tokenfiltercontext)
                continue; /* Loop/switch isn't completed */
        }

        tokenfiltercontext1 = null;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public final String getCurrentName() {
        return _currentName;
    }

    public Object getCurrentValue() {
        return null;
    }

    public TokenFilter getFilter() {
        return _filter;
    }

    public volatile JsonStreamContext getParent() {
        return getParent();
    }

    public final TokenFilterContext getParent() {
        return _parent;
    }

    public boolean isStartHandled() {
        return _startHandled;
    }

    public JsonToken nextTokenToRead() {
        JsonToken jsontoken;
        if (!_startHandled) {
            _startHandled = true;
            if (_type == 2)
                jsontoken = JsonToken.START_OBJECT;
            else
                jsontoken = JsonToken.START_ARRAY;
        } else
        if (_needToHandleName && _type == 2) {
            _needToHandleName = false;
            jsontoken = JsonToken.FIELD_NAME;
        } else {
            jsontoken = null;
        }
        return jsontoken;
    }

    protected TokenFilterContext reset(int i, TokenFilter tokenfilter, boolean flag) {
        _type = i;
        _filter = tokenfilter;
        _index = -1;
        _currentName = null;
        _startHandled = flag;
        _needToHandleName = false;
        return this;
    }

    public void setCurrentValue(Object obj) {
    }

    public TokenFilter setFieldName(String s) {
        _currentName = s;
        _needToHandleName = true;
        return _filter;
    }

    public void skipParentChecks() {
        _filter = null;
        for (TokenFilterContext tokenfiltercontext = _parent; tokenfiltercontext != null; tokenfiltercontext = tokenfiltercontext._parent)
            _parent._filter = null;

    }

    public String toString() {
        StringBuilder stringbuilder = new StringBuilder(64);
        appendDesc(stringbuilder);
        return stringbuilder.toString();
    }

    public void writeImmediatePath(JsonGenerator jsongenerator) {
        if (_filter != null && _filter != TokenFilter.INCLUDE_ALL) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (_startHandled) {
            if (_needToHandleName)
                jsongenerator.writeFieldName(_currentName);
        } else {
            _startHandled = true;
            if (_type == 2) {
                jsongenerator.writeStartObject();
                if (_needToHandleName)
                    jsongenerator.writeFieldName(_currentName);
            } else
            if (_type == 1)
                jsongenerator.writeStartArray();
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void writePath(JsonGenerator jsongenerator) {
        if (_filter != null && _filter != TokenFilter.INCLUDE_ALL) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (_parent != null)
            _parent._writePath(jsongenerator);
        if (_startHandled) {
            if (_needToHandleName)
                jsongenerator.writeFieldName(_currentName);
        } else {
            _startHandled = true;
            if (_type == 2) {
                jsongenerator.writeStartObject();
                jsongenerator.writeFieldName(_currentName);
            } else
            if (_type == 1)
                jsongenerator.writeStartArray();
        }
        if (true) goto _L1; else goto _L3
_L3:
    }
}
