// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.core.filter;

import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;

// Referenced classes of package com.fasterxml.jackson.core.filter:
//            TokenFilterContext, TokenFilter

public class FilteringGeneratorDelegate extends JsonGeneratorDelegate {

    protected boolean _allowMultipleMatches;
    protected TokenFilterContext _filterContext;
    protected boolean _includeImmediateParent;
    protected boolean _includePath;
    protected TokenFilter _itemFilter;
    protected int _matchCount;
    protected TokenFilter rootFilter;

    public FilteringGeneratorDelegate(JsonGenerator jsongenerator, TokenFilter tokenfilter, boolean flag, boolean flag1) {
        super(jsongenerator, false);
        rootFilter = tokenfilter;
        _itemFilter = tokenfilter;
        _filterContext = TokenFilterContext.createRootContext(tokenfilter);
        _includePath = flag;
        _allowMultipleMatches = flag1;
    }

    protected boolean _checkBinaryWrite() {
        boolean flag = false;
        if (_itemFilter != null) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        if (_itemFilter == TokenFilter.INCLUDE_ALL)
            flag = true;
        else
        if (_itemFilter.includeBinary()) {
            _checkParentPath();
            flag = true;
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    protected void _checkParentPath() {
        _matchCount = _matchCount + 1;
        if (_includePath)
            _filterContext.writePath(_flddelegate);
        if (!_allowMultipleMatches)
            _filterContext.skipParentChecks();
    }

    protected void _checkPropertyParentPath() {
        _matchCount = _matchCount + 1;
        if (!_includePath) goto _L2; else goto _L1
_L1:
        _filterContext.writePath(_flddelegate);
_L4:
        if (!_allowMultipleMatches)
            _filterContext.skipParentChecks();
        return;
_L2:
        if (_includeImmediateParent)
            _filterContext.writeImmediatePath(_flddelegate);
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected boolean _checkRawValueWrite() {
        boolean flag = false;
        if (_itemFilter != null) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        if (_itemFilter == TokenFilter.INCLUDE_ALL)
            flag = true;
        else
        if (_itemFilter.includeRawValue()) {
            _checkParentPath();
            flag = true;
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    public TokenFilter getFilter() {
        return rootFilter;
    }

    public JsonStreamContext getFilterContext() {
        return _filterContext;
    }

    public int getMatchCount() {
        return _matchCount;
    }

    public JsonStreamContext getOutputContext() {
        return _filterContext;
    }

    public int writeBinary(Base64Variant base64variant, InputStream inputstream, int i) {
        if (_checkBinaryWrite())
            i = _flddelegate.writeBinary(base64variant, inputstream, i);
        else
            i = -1;
        return i;
    }

    public void writeBinary(Base64Variant base64variant, byte abyte0[], int i, int j) {
        if (_checkBinaryWrite())
            _flddelegate.writeBinary(base64variant, abyte0, i, j);
    }

    public void writeBoolean(boolean flag) {
        if (_itemFilter != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (_itemFilter != TokenFilter.INCLUDE_ALL) {
            TokenFilter tokenfilter = _filterContext.checkValue(_itemFilter);
            if (tokenfilter == null || tokenfilter != TokenFilter.INCLUDE_ALL && !tokenfilter.includeBoolean(flag))
                continue; /* Loop/switch isn't completed */
            _checkParentPath();
        }
        _flddelegate.writeBoolean(flag);
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void writeEndArray() {
        _filterContext = _filterContext.closeArray(_flddelegate);
        if (_filterContext != null)
            _itemFilter = _filterContext.getFilter();
    }

    public void writeEndObject() {
        _filterContext = _filterContext.closeObject(_flddelegate);
        if (_filterContext != null)
            _itemFilter = _filterContext.getFilter();
    }

    public void writeFieldName(SerializableString serializablestring) {
        TokenFilter tokenfilter = _filterContext.setFieldName(serializablestring.getValue());
        if (tokenfilter != null) goto _L2; else goto _L1
_L1:
        _itemFilter = null;
_L4:
        return;
_L2:
        if (tokenfilter == TokenFilter.INCLUDE_ALL) {
            _itemFilter = tokenfilter;
            _flddelegate.writeFieldName(serializablestring);
        } else {
            serializablestring = tokenfilter.includeProperty(serializablestring.getValue());
            _itemFilter = serializablestring;
            if (serializablestring == TokenFilter.INCLUDE_ALL)
                _checkPropertyParentPath();
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void writeFieldName(String s) {
        TokenFilter tokenfilter = _filterContext.setFieldName(s);
        if (tokenfilter != null) goto _L2; else goto _L1
_L1:
        _itemFilter = null;
_L4:
        return;
_L2:
        if (tokenfilter == TokenFilter.INCLUDE_ALL) {
            _itemFilter = tokenfilter;
            _flddelegate.writeFieldName(s);
        } else {
            s = tokenfilter.includeProperty(s);
            _itemFilter = s;
            if (s == TokenFilter.INCLUDE_ALL)
                _checkPropertyParentPath();
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void writeNull() {
        if (_itemFilter != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (_itemFilter != TokenFilter.INCLUDE_ALL) {
            TokenFilter tokenfilter = _filterContext.checkValue(_itemFilter);
            if (tokenfilter == null || tokenfilter != TokenFilter.INCLUDE_ALL && !tokenfilter.includeNull())
                continue; /* Loop/switch isn't completed */
            _checkParentPath();
        }
        _flddelegate.writeNull();
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void writeNumber(double d) {
        if (_itemFilter != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (_itemFilter != TokenFilter.INCLUDE_ALL) {
            TokenFilter tokenfilter = _filterContext.checkValue(_itemFilter);
            if (tokenfilter == null || tokenfilter != TokenFilter.INCLUDE_ALL && !tokenfilter.includeNumber(d))
                continue; /* Loop/switch isn't completed */
            _checkParentPath();
        }
        _flddelegate.writeNumber(d);
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void writeNumber(float f) {
        if (_itemFilter != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (_itemFilter != TokenFilter.INCLUDE_ALL) {
            TokenFilter tokenfilter = _filterContext.checkValue(_itemFilter);
            if (tokenfilter == null || tokenfilter != TokenFilter.INCLUDE_ALL && !tokenfilter.includeNumber(f))
                continue; /* Loop/switch isn't completed */
            _checkParentPath();
        }
        _flddelegate.writeNumber(f);
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void writeNumber(int i) {
        if (_itemFilter != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (_itemFilter != TokenFilter.INCLUDE_ALL) {
            TokenFilter tokenfilter = _filterContext.checkValue(_itemFilter);
            if (tokenfilter == null || tokenfilter != TokenFilter.INCLUDE_ALL && !tokenfilter.includeNumber(i))
                continue; /* Loop/switch isn't completed */
            _checkParentPath();
        }
        _flddelegate.writeNumber(i);
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void writeNumber(long l) {
        if (_itemFilter != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (_itemFilter != TokenFilter.INCLUDE_ALL) {
            TokenFilter tokenfilter = _filterContext.checkValue(_itemFilter);
            if (tokenfilter == null || tokenfilter != TokenFilter.INCLUDE_ALL && !tokenfilter.includeNumber(l))
                continue; /* Loop/switch isn't completed */
            _checkParentPath();
        }
        _flddelegate.writeNumber(l);
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void writeNumber(String s) {
        if (_itemFilter != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (_itemFilter != TokenFilter.INCLUDE_ALL) {
            TokenFilter tokenfilter = _filterContext.checkValue(_itemFilter);
            if (tokenfilter == null || tokenfilter != TokenFilter.INCLUDE_ALL && !tokenfilter.includeRawValue())
                continue; /* Loop/switch isn't completed */
            _checkParentPath();
        }
        _flddelegate.writeNumber(s);
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void writeNumber(BigDecimal bigdecimal) {
        if (_itemFilter != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (_itemFilter != TokenFilter.INCLUDE_ALL) {
            TokenFilter tokenfilter = _filterContext.checkValue(_itemFilter);
            if (tokenfilter == null || tokenfilter != TokenFilter.INCLUDE_ALL && !tokenfilter.includeNumber(bigdecimal))
                continue; /* Loop/switch isn't completed */
            _checkParentPath();
        }
        _flddelegate.writeNumber(bigdecimal);
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void writeNumber(BigInteger biginteger) {
        if (_itemFilter != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (_itemFilter != TokenFilter.INCLUDE_ALL) {
            TokenFilter tokenfilter = _filterContext.checkValue(_itemFilter);
            if (tokenfilter == null || tokenfilter != TokenFilter.INCLUDE_ALL && !tokenfilter.includeNumber(biginteger))
                continue; /* Loop/switch isn't completed */
            _checkParentPath();
        }
        _flddelegate.writeNumber(biginteger);
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void writeNumber(short word0) {
        if (_itemFilter != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (_itemFilter != TokenFilter.INCLUDE_ALL) {
            TokenFilter tokenfilter = _filterContext.checkValue(_itemFilter);
            if (tokenfilter == null || tokenfilter != TokenFilter.INCLUDE_ALL && !tokenfilter.includeNumber(word0))
                continue; /* Loop/switch isn't completed */
            _checkParentPath();
        }
        _flddelegate.writeNumber(word0);
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void writeObjectId(Object obj) {
        if (_itemFilter != null)
            _flddelegate.writeObjectId(obj);
    }

    public void writeObjectRef(Object obj) {
        if (_itemFilter != null)
            _flddelegate.writeObjectRef(obj);
    }

    public void writeOmittedField(String s) {
        if (_itemFilter != null)
            _flddelegate.writeOmittedField(s);
    }

    public void writeRaw(char c) {
        if (_checkRawValueWrite())
            _flddelegate.writeRaw(c);
    }

    public void writeRaw(SerializableString serializablestring) {
        if (_checkRawValueWrite())
            _flddelegate.writeRaw(serializablestring);
    }

    public void writeRaw(String s) {
        if (_checkRawValueWrite())
            _flddelegate.writeRaw(s);
    }

    public void writeRaw(String s, int i, int j) {
        if (_checkRawValueWrite())
            _flddelegate.writeRaw(s);
    }

    public void writeRaw(char ac[], int i, int j) {
        if (_checkRawValueWrite())
            _flddelegate.writeRaw(ac, i, j);
    }

    public void writeRawUTF8String(byte abyte0[], int i, int j) {
        if (_checkRawValueWrite())
            _flddelegate.writeRawUTF8String(abyte0, i, j);
    }

    public void writeRawValue(String s) {
        if (_checkRawValueWrite())
            _flddelegate.writeRaw(s);
    }

    public void writeRawValue(String s, int i, int j) {
        if (_checkRawValueWrite())
            _flddelegate.writeRaw(s, i, j);
    }

    public void writeRawValue(char ac[], int i, int j) {
        if (_checkRawValueWrite())
            _flddelegate.writeRaw(ac, i, j);
    }

    public void writeStartArray() {
        if (_itemFilter == null)
            _filterContext = _filterContext.createChildArrayContext(null, false);
        else
        if (_itemFilter == TokenFilter.INCLUDE_ALL) {
            _filterContext = _filterContext.createChildArrayContext(_itemFilter, true);
            _flddelegate.writeStartArray();
        } else {
            _itemFilter = _filterContext.checkValue(_itemFilter);
            if (_itemFilter == null) {
                _filterContext = _filterContext.createChildArrayContext(null, false);
            } else {
                if (_itemFilter != TokenFilter.INCLUDE_ALL)
                    _itemFilter = _itemFilter.filterStartArray();
                if (_itemFilter == TokenFilter.INCLUDE_ALL) {
                    _checkParentPath();
                    _filterContext = _filterContext.createChildArrayContext(_itemFilter, true);
                    _flddelegate.writeStartArray();
                } else {
                    _filterContext = _filterContext.createChildArrayContext(_itemFilter, false);
                }
            }
        }
    }

    public void writeStartArray(int i) {
        if (_itemFilter == null)
            _filterContext = _filterContext.createChildArrayContext(null, false);
        else
        if (_itemFilter == TokenFilter.INCLUDE_ALL) {
            _filterContext = _filterContext.createChildArrayContext(_itemFilter, true);
            _flddelegate.writeStartArray(i);
        } else {
            _itemFilter = _filterContext.checkValue(_itemFilter);
            if (_itemFilter == null) {
                _filterContext = _filterContext.createChildArrayContext(null, false);
            } else {
                if (_itemFilter != TokenFilter.INCLUDE_ALL)
                    _itemFilter = _itemFilter.filterStartArray();
                if (_itemFilter == TokenFilter.INCLUDE_ALL) {
                    _checkParentPath();
                    _filterContext = _filterContext.createChildArrayContext(_itemFilter, true);
                    _flddelegate.writeStartArray(i);
                } else {
                    _filterContext = _filterContext.createChildArrayContext(_itemFilter, false);
                }
            }
        }
    }

    public void writeStartObject() {
        if (_itemFilter != null) goto _L2; else goto _L1
_L1:
        _filterContext = _filterContext.createChildObjectContext(_itemFilter, false);
_L4:
        return;
_L2:
        if (_itemFilter == TokenFilter.INCLUDE_ALL) {
            _filterContext = _filterContext.createChildObjectContext(_itemFilter, true);
            _flddelegate.writeStartObject();
        } else {
            TokenFilter tokenfilter1 = _filterContext.checkValue(_itemFilter);
            if (tokenfilter1 != null) {
                TokenFilter tokenfilter = tokenfilter1;
                if (tokenfilter1 != TokenFilter.INCLUDE_ALL)
                    tokenfilter = tokenfilter1.filterStartObject();
                if (tokenfilter == TokenFilter.INCLUDE_ALL) {
                    _checkParentPath();
                    _filterContext = _filterContext.createChildObjectContext(tokenfilter, true);
                    _flddelegate.writeStartObject();
                } else {
                    _filterContext = _filterContext.createChildObjectContext(tokenfilter, false);
                }
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void writeString(SerializableString serializablestring) {
        if (_itemFilter != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (_itemFilter != TokenFilter.INCLUDE_ALL) {
            TokenFilter tokenfilter = _filterContext.checkValue(_itemFilter);
            if (tokenfilter == null || tokenfilter != TokenFilter.INCLUDE_ALL && !tokenfilter.includeString(serializablestring.getValue()))
                continue; /* Loop/switch isn't completed */
            _checkParentPath();
        }
        _flddelegate.writeString(serializablestring);
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void writeString(String s) {
        if (_itemFilter != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (_itemFilter != TokenFilter.INCLUDE_ALL) {
            TokenFilter tokenfilter = _filterContext.checkValue(_itemFilter);
            if (tokenfilter == null || tokenfilter != TokenFilter.INCLUDE_ALL && !tokenfilter.includeString(s))
                continue; /* Loop/switch isn't completed */
            _checkParentPath();
        }
        _flddelegate.writeString(s);
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void writeString(char ac[], int i, int j) {
        if (_itemFilter != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (_itemFilter != TokenFilter.INCLUDE_ALL) {
            String s = new String(ac, i, j);
            TokenFilter tokenfilter = _filterContext.checkValue(_itemFilter);
            if (tokenfilter == null || tokenfilter != TokenFilter.INCLUDE_ALL && !tokenfilter.includeString(s))
                continue; /* Loop/switch isn't completed */
            _checkParentPath();
        }
        _flddelegate.writeString(ac, i, j);
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void writeTypeId(Object obj) {
        if (_itemFilter != null)
            _flddelegate.writeTypeId(obj);
    }

    public void writeUTF8String(byte abyte0[], int i, int j) {
        if (_checkRawValueWrite())
            _flddelegate.writeUTF8String(abyte0, i, j);
    }
}
