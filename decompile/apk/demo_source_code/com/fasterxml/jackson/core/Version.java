// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.core;

import java.io.Serializable;

public class Version
    implements Serializable, Comparable {

    private static final Version UNKNOWN_VERSION = new Version(0, 0, 0, null, null, null);
    private static final long serialVersionUID = 1L;
    protected final String _artifactId;
    protected final String _groupId;
    protected final int _majorVersion;
    protected final int _minorVersion;
    protected final int _patchLevel;
    protected final String _snapshotInfo;

    public Version(int i, int j, int k, String s) {
        this(i, j, k, s, null, null);
    }

    public Version(int i, int j, int k, String s, String s1, String s2) {
        _majorVersion = i;
        _minorVersion = j;
        _patchLevel = k;
        _snapshotInfo = s;
        s = s1;
        if (s1 == null)
            s = "";
        _groupId = s;
        s = s2;
        if (s2 == null)
            s = "";
        _artifactId = s;
    }

    public static Version unknownVersion() {
        return UNKNOWN_VERSION;
    }

    public int compareTo(Version version) {
        if (version != this) goto _L2; else goto _L1
_L1:
        int i = 0;
_L4:
        return i;
_L2:
        int j = _groupId.compareTo(version._groupId);
        i = j;
        if (j == 0) {
            int k = _artifactId.compareTo(version._artifactId);
            i = k;
            if (k == 0) {
                int l = _majorVersion - version._majorVersion;
                i = l;
                if (l == 0) {
                    int i1 = _minorVersion - version._minorVersion;
                    i = i1;
                    if (i1 == 0)
                        i = _patchLevel - version._patchLevel;
                }
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public volatile int compareTo(Object obj) {
        return compareTo((Version)obj);
    }

    public boolean equals(Object obj) {
        boolean flag = true;
        if (obj != this) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        if (obj == null)
            flag = false;
        else
        if (obj.getClass() != getClass()) {
            flag = false;
        } else {
            obj = (Version)obj;
            if (((Version) (obj))._majorVersion != _majorVersion || ((Version) (obj))._minorVersion != _minorVersion || ((Version) (obj))._patchLevel != _patchLevel || !((Version) (obj))._artifactId.equals(_artifactId) || !((Version) (obj))._groupId.equals(_groupId))
                flag = false;
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    public String getArtifactId() {
        return _artifactId;
    }

    public String getGroupId() {
        return _groupId;
    }

    public int getMajorVersion() {
        return _majorVersion;
    }

    public int getMinorVersion() {
        return _minorVersion;
    }

    public int getPatchLevel() {
        return _patchLevel;
    }

    public int hashCode() {
        return _artifactId.hashCode() ^ ((_groupId.hashCode() + _majorVersion) - _minorVersion) + _patchLevel;
    }

    public boolean isSnapshot() {
        boolean flag;
        if (_snapshotInfo != null && _snapshotInfo.length() > 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean isUknownVersion() {
        return isUnknownVersion();
    }

    public boolean isUnknownVersion() {
        boolean flag;
        if (this == UNKNOWN_VERSION)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public String toFullString() {
        return (new StringBuilder()).append(_groupId).append('/').append(_artifactId).append('/').append(toString()).toString();
    }

    public String toString() {
        StringBuilder stringbuilder = new StringBuilder();
        stringbuilder.append(_majorVersion).append('.');
        stringbuilder.append(_minorVersion).append('.');
        stringbuilder.append(_patchLevel);
        if (isSnapshot())
            stringbuilder.append('-').append(_snapshotInfo);
        return stringbuilder.toString();
    }

}
