// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.core.io;

import java.io.*;

// Referenced classes of package com.fasterxml.jackson.core.io:
//            IOContext

public class UTF32Reader extends Reader {

    protected static final int LAST_VALID_UNICODE_CHAR = 0x10ffff;
    protected static final char NC = 0;
    protected final boolean _bigEndian;
    protected byte _buffer[];
    protected int _byteCount;
    protected int _charCount;
    protected final IOContext _context;
    protected InputStream _in;
    protected int _length;
    protected final boolean _managedBuffers;
    protected int _ptr;
    protected char _surrogate;
    protected char _tmpBuf[];

    public UTF32Reader(IOContext iocontext, InputStream inputstream, byte abyte0[], int i, int j, boolean flag) {
        boolean flag1 = false;
        super();
        _surrogate = '\0';
        _context = iocontext;
        _in = inputstream;
        _buffer = abyte0;
        _ptr = i;
        _length = j;
        _bigEndian = flag;
        flag = flag1;
        if (inputstream != null)
            flag = true;
        _managedBuffers = flag;
    }

    private void freeBuffers() {
        byte abyte0[] = _buffer;
        if (abyte0 != null) {
            _buffer = null;
            _context.releaseReadIOBuffer(abyte0);
        }
    }

    private boolean loadMore(int i) {
        boolean flag1;
        flag1 = false;
        _byteCount = _byteCount + (_length - i);
        if (i <= 0) goto _L2; else goto _L1
_L1:
        if (_ptr > 0) {
            System.arraycopy(_buffer, _ptr, _buffer, 0, i);
            _ptr = 0;
        }
        _length = i;
_L7:
        boolean flag;
        while (_length < 4)  {
            if (_in == null)
                i = -1;
            else
                i = _in.read(_buffer, _length, _buffer.length - _length);
            if (i < 1) {
                if (i < 0) {
                    if (_managedBuffers)
                        freeBuffers();
                    reportUnexpectedEOF(_length, 4);
                }
                reportStrangeStream();
            }
            _length = i + _length;
        }
        break MISSING_BLOCK_LABEL_219;
_L2:
        _ptr = 0;
        if (_in == null)
            i = -1;
        else
            i = _in.read(_buffer);
        if (i >= 1) goto _L4; else goto _L3
_L3:
        _length = 0;
        if (i >= 0) goto _L6; else goto _L5
_L5:
        flag = flag1;
        if (_managedBuffers) {
            freeBuffers();
            flag = flag1;
        }
_L8:
        return flag;
_L6:
        reportStrangeStream();
_L4:
        _length = i;
          goto _L7
        flag = true;
          goto _L8
    }

    private void reportBounds(char ac[], int i, int j) {
        throw new ArrayIndexOutOfBoundsException((new StringBuilder()).append("read(buf,").append(i).append(",").append(j).append("), cbuf[").append(ac.length).append("]").toString());
    }

    private void reportInvalid(int i, int j, String s) {
        int k = _byteCount;
        int i1 = _ptr;
        int l = _charCount;
        throw new CharConversionException((new StringBuilder()).append("Invalid UTF-32 character 0x").append(Integer.toHexString(i)).append(s).append(" at char #").append(l + j).append(", byte #").append((k + i1) - 1).append(")").toString());
    }

    private void reportStrangeStream() {
        throw new IOException("Strange I/O stream, returned 0 bytes on read");
    }

    private void reportUnexpectedEOF(int i, int j) {
        int l = _byteCount;
        int k = _charCount;
        throw new CharConversionException((new StringBuilder()).append("Unexpected EOF in the middle of a 4-byte UTF-32 char: got ").append(i).append(", needed ").append(j).append(", at char #").append(k).append(", byte #").append(l + i).append(")").toString());
    }

    public void close() {
        InputStream inputstream = _in;
        if (inputstream != null) {
            _in = null;
            freeBuffers();
            inputstream.close();
        }
    }

    public int read() {
        if (_tmpBuf == null)
            _tmpBuf = new char[1];
        char c;
        if (read(_tmpBuf, 0, 1) < 1)
            c = '\uFFFF';
        else
            c = _tmpBuf[0];
        return c;
    }

    public int read(char ac[], int i, int j) {
        if (_buffer != null) goto _L2; else goto _L1
_L1:
        int k = -1;
_L4:
        return k;
_L2:
        k = j;
        if (j < 1) goto _L4; else goto _L3
_L3:
        int j1;
        if (i < 0 || i + j > ac.length)
            reportBounds(ac, i, j);
        j1 = j + i;
        if (_surrogate == 0) goto _L6; else goto _L5
_L5:
        j = i + 1;
        ac[i] = _surrogate;
        _surrogate = '\0';
_L14:
        if (j >= j1) goto _L8; else goto _L7
_L7:
        int l;
        k = _ptr;
        int i1;
        if (_bigEndian) {
            byte byte1 = _buffer[k];
            byte byte0 = _buffer[k + 1];
            byte byte3 = _buffer[k + 2];
            k = _buffer[k + 3] & 0xff | (byte1 << 24 | (byte0 & 0xff) << 16 | (byte3 & 0xff) << 8);
        } else {
            l = _buffer[k];
            byte byte2 = _buffer[k + 1];
            byte byte4 = _buffer[k + 2];
            k = _buffer[k + 3] << 24 | (l & 0xff | (byte2 & 0xff) << 8 | (byte4 & 0xff) << 16);
        }
        _ptr = _ptr + 4;
        if (k <= 65535) goto _L10; else goto _L9
_L9:
        if (k > 0x10ffff)
            reportInvalid(k, j - i, (new StringBuilder()).append("(above ").append(Integer.toHexString(0x10ffff)).append(") ").toString());
        l = k - 0x10000;
        k = j + 1;
        ac[j] = (char)(55296 + (l >> 10));
        i1 = l & 0x3ff | 0xdc00;
        l = i1;
        j = k;
        if (k < j1) goto _L12; else goto _L11
_L11:
        _surrogate = (char)i1;
        j = k;
_L8:
        k = j - i;
        _charCount = _charCount + k;
          goto _L4
_L6:
        j = _length - _ptr;
        if (j >= 4 || loadMore(j))
            break MISSING_BLOCK_LABEL_440;
        k = -1;
          goto _L4
_L10:
        l = k;
_L12:
        k = j + 1;
        ac[j] = (char)l;
        j = k;
        if (_ptr < _length) goto _L14; else goto _L13
_L13:
        j = k;
          goto _L8
        j = i;
          goto _L14
    }
}
