// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.core.io;

import java.math.BigDecimal;

public final class NumberInput {

    static final long L_BILLION = 0x3b9aca00L;
    static final String MAX_LONG_STR = String.valueOf(0xffffffffL);
    static final String MIN_LONG_STR_NO_SIGN = String.valueOf(0x0L).substring(1);
    public static final String NASTY_SMALL_DOUBLE = "2.2250738585072012e-308";

    public NumberInput() {
    }

    private static NumberFormatException _badBD(String s) {
        return new NumberFormatException((new StringBuilder()).append("Value \"").append(s).append("\" can not be represented as BigDecimal").toString());
    }

    public static boolean inLongRange(String s, boolean flag) {
        int i;
        int j;
        boolean flag1;
        String s1;
        flag1 = true;
        if (flag)
            s1 = MIN_LONG_STR_NO_SIGN;
        else
            s1 = MAX_LONG_STR;
        j = s1.length();
        i = s.length();
        if (i >= j) goto _L2; else goto _L1
_L1:
        flag = flag1;
_L4:
        return flag;
_L2:
        if (i > j) {
            flag = false;
            continue; /* Loop/switch isn't completed */
        }
        i = 0;
_L5:
        flag = flag1;
        if (i < j) {
label0:
            {
                int k = s.charAt(i) - s1.charAt(i);
                if (k == 0)
                    break label0;
                if (k < 0)
                    flag = true;
                else
                    flag = false;
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
        i++;
          goto _L5
        if (true) goto _L4; else goto _L6
_L6:
    }

    public static boolean inLongRange(char ac[], int i, int j, boolean flag) {
        int k;
        boolean flag1;
        String s;
        flag1 = true;
        if (flag)
            s = MIN_LONG_STR_NO_SIGN;
        else
            s = MAX_LONG_STR;
        k = s.length();
        if (j >= k) goto _L2; else goto _L1
_L1:
        flag = flag1;
_L4:
        return flag;
_L2:
        if (j > k) {
            flag = false;
            continue; /* Loop/switch isn't completed */
        }
        j = 0;
_L5:
        flag = flag1;
        if (j < k) {
label0:
            {
                int l = ac[i + j] - s.charAt(j);
                if (l == 0)
                    break label0;
                if (l < 0)
                    flag = true;
                else
                    flag = false;
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
        j++;
          goto _L5
        if (true) goto _L4; else goto _L6
_L6:
    }

    public static double parseAsDouble(String s, double d) {
        if (s != null) goto _L2; else goto _L1
_L1:
        double d1 = d;
_L4:
        return d1;
_L2:
        s = s.trim();
        d1 = d;
        if (s.length() != 0)
            try {
                d1 = parseDouble(s);
            }
            // Misplaced declaration of an exception variable
            catch (String s) {
                d1 = d;
            }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static int parseAsInt(String s, int i) {
        char c = '\0';
        if (s != null) goto _L2; else goto _L1
_L1:
        int j = i;
_L5:
        return j;
_L2:
        s = s.trim();
        int k = s.length();
        j = i;
        if (k == 0)
            continue; /* Loop/switch isn't completed */
        if (k >= 0)
            break MISSING_BLOCK_LABEL_150;
        j = s.charAt(0);
        double d;
        if (j == '+') {
            s = s.substring(1);
            k = s.length();
            j = c;
        } else {
            if (j != 45)
                break MISSING_BLOCK_LABEL_150;
            j = 1;
        }
_L3:
        for (; j >= k; j = c)
            break MISSING_BLOCK_LABEL_127;

        c = s.charAt(j);
        if (c <= '9' && c >= '0')
            break MISSING_BLOCK_LABEL_121;
        d = parseDouble(s);
        j = (int)d;
        continue; /* Loop/switch isn't completed */
        j++;
          goto _L3
        try {
            j = Integer.parseInt(s);
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            j = i;
        }
        continue; /* Loop/switch isn't completed */
        s;
        j = i;
        if (true) goto _L5; else goto _L4
_L4:
    }

    public static long parseAsLong(String s, long l) {
        char c = '\0';
        if (s != null) goto _L2; else goto _L1
_L1:
        long l1 = l;
_L4:
        return l1;
_L2:
        int i;
        s = s.trim();
        i = s.length();
        l1 = l;
        if (i == 0) goto _L4; else goto _L3
_L3:
        int j;
        if (i >= 0)
            break MISSING_BLOCK_LABEL_158;
        j = s.charAt(0);
        double d;
        if (j == 43) {
            s = s.substring(1);
            j = s.length();
            i = c;
        } else {
            if (j != 45)
                break MISSING_BLOCK_LABEL_158;
            c = '\001';
            j = i;
            i = c;
        }
_L5:
        if (i >= j)
            break MISSING_BLOCK_LABEL_135;
        c = s.charAt(i);
        if (c <= '9' && c >= '0')
            break MISSING_BLOCK_LABEL_129;
        d = parseDouble(s);
        l1 = (long)d;
          goto _L4
        i++;
          goto _L5
        try {
            l1 = Long.parseLong(s);
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            l1 = l;
        }
          goto _L4
        s;
        l1 = l;
          goto _L4
        j = i;
        i = c;
          goto _L5
    }

    public static BigDecimal parseBigDecimal(String s) {
        BigDecimal bigdecimal;
        try {
            bigdecimal = new BigDecimal(s);
        }
        catch (NumberFormatException numberformatexception) {
            throw _badBD(s);
        }
        return bigdecimal;
    }

    public static BigDecimal parseBigDecimal(char ac[]) {
        return parseBigDecimal(ac, 0, ac.length);
    }

    public static BigDecimal parseBigDecimal(char ac[], int i, int j) {
        BigDecimal bigdecimal;
        try {
            bigdecimal = new BigDecimal(ac, i, j);
        }
        catch (NumberFormatException numberformatexception) {
            throw _badBD(new String(ac, i, j));
        }
        return bigdecimal;
    }

    public static double parseDouble(String s) {
        double d;
        if ("2.2250738585072012e-308".equals(s))
            d = 4.9406564584124654E-324D;
        else
            d = Double.parseDouble(s);
        return d;
    }

    public static int parseInt(String s) {
        int i;
        int j;
        boolean flag;
        int l;
        i = 1;
        j = s.charAt(0);
        l = s.length();
        if (j == '-')
            flag = true;
        else
            flag = false;
        if (!flag) goto _L2; else goto _L1
_L1:
        if (l != 1 && l <= 10) goto _L4; else goto _L3
_L3:
        i = Integer.parseInt(s);
_L7:
        return i;
_L4:
        j = s.charAt(1);
        i = 2;
_L9:
        if (j <= '9' && j >= '0') goto _L6; else goto _L5
_L5:
        i = Integer.parseInt(s);
          goto _L7
_L2:
        if (l <= 9) goto _L9; else goto _L8
_L8:
        i = Integer.parseInt(s);
          goto _L7
_L6:
        int k;
        k = j - 48;
        j = k;
        if (i >= l) goto _L11; else goto _L10
_L10:
        int i1;
label0:
        {
            i1 = i + 1;
            i = s.charAt(i);
            if (i <= '9' && i >= '0')
                break label0;
            i = Integer.parseInt(s);
        }
          goto _L7
        i = k * 10 + (i - 48);
        j = i;
        if (i1 >= l) goto _L11; else goto _L12
_L12:
label1:
        {
            k = i1 + 1;
            j = s.charAt(i1);
            if (j <= 57 && j >= 48)
                break label1;
            i = Integer.parseInt(s);
        }
          goto _L7
        i = i * 10 + (j - 48);
        j = i;
        if (k >= l) goto _L11; else goto _L13
_L13:
        j = k;
_L14:
label2:
        {
            k = j + 1;
            j = s.charAt(j);
            if (j <= 57 && j >= 48)
                break label2;
            i = Integer.parseInt(s);
        }
          goto _L7
        i = i * 10 + (j - 48);
        if (k < l)
            break MISSING_BLOCK_LABEL_277;
        j = i;
_L11:
        i = j;
        if (flag)
            i = -j;
          goto _L7
        j = k;
          goto _L14
    }

    public static int parseInt(char ac[], int i, int j) {
        int k;
        int i1;
        int j1;
        int k1;
        k1 = ac[i] - 48;
        k = k1;
        j1 = i;
        i1 = j;
        if (j <= 4) goto _L2; else goto _L1
_L1:
        int l1;
        k = i + 1;
        i = ac[k];
        i1 = k + 1;
        k = ac[i1];
        j1 = i1 + 1;
        i1 = ac[j1];
        l1 = j1 + 1;
        i = (((k1 * 10 + (i - 48)) * 10 + (k - 48)) * 10 + (i1 - 48)) * 10 + (ac[l1] - 48);
        j -= 4;
        k = i;
        j1 = l1;
        i1 = j;
        if (j <= 4) goto _L2; else goto _L3
_L3:
        k = l1 + 1;
        j = ac[k];
        i1 = k + 1;
        k = ac[i1];
        i1++;
        i = (((i * 10 + (j - 48)) * 10 + (k - 48)) * 10 + (ac[i1] - 48)) * 10 + (ac[i1 + 1] - 48);
_L5:
        return i;
_L2:
        i = k;
        if (i1 > 1) {
            j1++;
            j = k * 10 + (ac[j1] - 48);
            i = j;
            if (i1 > 2) {
                int l = j1 + 1;
                j = j * 10 + (ac[l] - 48);
                i = j;
                if (i1 > 3)
                    i = j * 10 + (ac[l + 1] - 48);
            }
        }
        if (true) goto _L5; else goto _L4
_L4:
    }

    public static long parseLong(String s) {
        long l;
        if (s.length() <= 9)
            l = parseInt(s);
        else
            l = Long.parseLong(s);
        return l;
    }

    public static long parseLong(char ac[], int i, int j) {
        j -= 9;
        long l = parseInt(ac, i, j);
        return (long)parseInt(ac, j + i, 9) + l * 0x3b9aca00L;
    }

}
