// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.core.io;

import java.io.InputStream;

// Referenced classes of package com.fasterxml.jackson.core.io:
//            IOContext

public final class MergedStream extends InputStream {

    private byte _b[];
    private final IOContext _ctxt;
    private final int _end;
    private final InputStream _in;
    private int _ptr;

    public MergedStream(IOContext iocontext, InputStream inputstream, byte abyte0[], int i, int j) {
        _ctxt = iocontext;
        _in = inputstream;
        _b = abyte0;
        _ptr = i;
        _end = j;
    }

    private void _free() {
        byte abyte0[] = _b;
        if (abyte0 != null) {
            _b = null;
            if (_ctxt != null)
                _ctxt.releaseReadIOBuffer(abyte0);
        }
    }

    public int available() {
        int i;
        if (_b != null)
            i = _end - _ptr;
        else
            i = _in.available();
        return i;
    }

    public void close() {
        _free();
        _in.close();
    }

    public void mark(int i) {
        if (_b == null)
            _in.mark(i);
    }

    public boolean markSupported() {
        boolean flag;
        if (_b == null && _in.markSupported())
            flag = true;
        else
            flag = false;
        return flag;
    }

    public int read() {
        int i;
        if (_b != null) {
            byte abyte0[] = _b;
            i = _ptr;
            _ptr = i + 1;
            int j = abyte0[i] & 0xff;
            i = j;
            if (_ptr >= _end) {
                _free();
                i = j;
            }
        } else {
            i = _in.read();
        }
        return i;
    }

    public int read(byte abyte0[]) {
        return read(abyte0, 0, abyte0.length);
    }

    public int read(byte abyte0[], int i, int j) {
        if (_b != null) {
            int l = _end - _ptr;
            int k = j;
            if (j > l)
                k = l;
            System.arraycopy(_b, _ptr, abyte0, i, k);
            _ptr = _ptr + k;
            i = k;
            if (_ptr >= _end) {
                _free();
                i = k;
            }
        } else {
            i = _in.read(abyte0, i, j);
        }
        return i;
    }

    public void reset() {
        if (_b == null)
            _in.reset();
    }

    public long skip(long l) {
        if (_b == null) goto _L2; else goto _L1
_L1:
        int i = _end - _ptr;
        if ((long)i <= l) goto _L4; else goto _L3
_L3:
        _ptr = _ptr + (int)l;
_L5:
        return l;
_L4:
        long l1;
        long l2;
        _free();
        l1 = (long)i + 0L;
        l2 = l - (long)i;
_L6:
        l = l1;
        if (l2 > 0L)
            l = l1 + _in.skip(l2);
        if (true) goto _L5; else goto _L2
_L2:
        l1 = 0L;
        l2 = l;
          goto _L6
    }
}
