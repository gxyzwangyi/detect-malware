// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.fasterxml.jackson.core;

import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.util.VersionUtil;
import java.io.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.concurrent.atomic.*;

// Referenced classes of package com.fasterxml.jackson.core:
//            Versioned, JsonGenerationException, JsonParser, JsonToken, 
//            JsonStreamContext, FormatSchema, Base64Variants, SerializableString, 
//            PrettyPrinter, ObjectCodec, Version, Base64Variant, 
//            TreeNode

public abstract class JsonGenerator
    implements Versioned, Closeable, Flushable {
    public static final class Feature extends Enum {

        private static final Feature $VALUES[];
        public static final Feature AUTO_CLOSE_JSON_CONTENT;
        public static final Feature AUTO_CLOSE_TARGET;
        public static final Feature ESCAPE_NON_ASCII;
        public static final Feature FLUSH_PASSED_TO_STREAM;
        public static final Feature IGNORE_UNKNOWN;
        public static final Feature QUOTE_FIELD_NAMES;
        public static final Feature QUOTE_NON_NUMERIC_NUMBERS;
        public static final Feature STRICT_DUPLICATE_DETECTION;
        public static final Feature WRITE_BIGDECIMAL_AS_PLAIN;
        public static final Feature WRITE_NUMBERS_AS_STRINGS;
        private final boolean _defaultState;
        private final int _mask = 1 << ordinal();

        public static int collectDefaults() {
            int j = 0;
            Feature afeature[] = values();
            int l = afeature.length;
            for (int i = 0; i < l;) {
                Feature feature = afeature[i];
                int k = j;
                if (feature.enabledByDefault())
                    k = j | feature.getMask();
                i++;
                j = k;
            }

            return j;
        }

        public static Feature valueOf(String s) {
            return (Feature)Enum.valueOf(com/fasterxml/jackson/core/JsonGenerator$Feature, s);
        }

        public static Feature[] values() {
            return (Feature[])$VALUES.clone();
        }

        public boolean enabledByDefault() {
            return _defaultState;
        }

        public boolean enabledIn(int i) {
            boolean flag;
            if ((_mask & i) != 0)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public int getMask() {
            return _mask;
        }

        static  {
            AUTO_CLOSE_TARGET = new Feature("AUTO_CLOSE_TARGET", 0, true);
            AUTO_CLOSE_JSON_CONTENT = new Feature("AUTO_CLOSE_JSON_CONTENT", 1, true);
            FLUSH_PASSED_TO_STREAM = new Feature("FLUSH_PASSED_TO_STREAM", 2, true);
            QUOTE_FIELD_NAMES = new Feature("QUOTE_FIELD_NAMES", 3, true);
            QUOTE_NON_NUMERIC_NUMBERS = new Feature("QUOTE_NON_NUMERIC_NUMBERS", 4, true);
            WRITE_NUMBERS_AS_STRINGS = new Feature("WRITE_NUMBERS_AS_STRINGS", 5, false);
            WRITE_BIGDECIMAL_AS_PLAIN = new Feature("WRITE_BIGDECIMAL_AS_PLAIN", 6, false);
            ESCAPE_NON_ASCII = new Feature("ESCAPE_NON_ASCII", 7, false);
            STRICT_DUPLICATE_DETECTION = new Feature("STRICT_DUPLICATE_DETECTION", 8, false);
            IGNORE_UNKNOWN = new Feature("IGNORE_UNKNOWN", 9, false);
            $VALUES = (new Feature[] {
                AUTO_CLOSE_TARGET, AUTO_CLOSE_JSON_CONTENT, FLUSH_PASSED_TO_STREAM, QUOTE_FIELD_NAMES, QUOTE_NON_NUMERIC_NUMBERS, WRITE_NUMBERS_AS_STRINGS, WRITE_BIGDECIMAL_AS_PLAIN, ESCAPE_NON_ASCII, STRICT_DUPLICATE_DETECTION, IGNORE_UNKNOWN
            });
        }

        private Feature(String s, int i, boolean flag) {
            super(s, i);
            _defaultState = flag;
        }
    }


    protected PrettyPrinter _cfgPrettyPrinter;

    protected JsonGenerator() {
    }

    protected void _reportError(String s) {
        throw new JsonGenerationException(s, this);
    }

    protected void _reportUnsupportedOperation() {
        throw new UnsupportedOperationException((new StringBuilder()).append("Operation not supported by generator of type ").append(getClass().getName()).toString());
    }

    protected final void _throwInternal() {
        VersionUtil.throwInternal();
    }

    protected void _writeSimpleObject(Object obj) {
        if (obj != null) goto _L2; else goto _L1
_L1:
        writeNull();
_L4:
        return;
_L2:
        if (obj instanceof String) {
            writeString((String)obj);
            continue; /* Loop/switch isn't completed */
        }
        if (obj instanceof Number) {
            Number number = (Number)obj;
            if (number instanceof Integer) {
                writeNumber(number.intValue());
                continue; /* Loop/switch isn't completed */
            }
            if (number instanceof Long) {
                writeNumber(number.longValue());
                continue; /* Loop/switch isn't completed */
            }
            if (number instanceof Double) {
                writeNumber(number.doubleValue());
                continue; /* Loop/switch isn't completed */
            }
            if (number instanceof Float) {
                writeNumber(number.floatValue());
                continue; /* Loop/switch isn't completed */
            }
            if (number instanceof Short) {
                writeNumber(number.shortValue());
                continue; /* Loop/switch isn't completed */
            }
            if (number instanceof Byte) {
                writeNumber(number.byteValue());
                continue; /* Loop/switch isn't completed */
            }
            if (number instanceof BigInteger) {
                writeNumber((BigInteger)number);
                continue; /* Loop/switch isn't completed */
            }
            if (number instanceof BigDecimal) {
                writeNumber((BigDecimal)number);
                continue; /* Loop/switch isn't completed */
            }
            if (number instanceof AtomicInteger) {
                writeNumber(((AtomicInteger)number).get());
                continue; /* Loop/switch isn't completed */
            }
            if (!(number instanceof AtomicLong))
                break; /* Loop/switch isn't completed */
            writeNumber(((AtomicLong)number).get());
            continue; /* Loop/switch isn't completed */
        }
        if (obj instanceof byte[]) {
            writeBinary((byte[])(byte[])obj);
            continue; /* Loop/switch isn't completed */
        }
        if (obj instanceof Boolean) {
            writeBoolean(((Boolean)obj).booleanValue());
            continue; /* Loop/switch isn't completed */
        }
        if (!(obj instanceof AtomicBoolean))
            break; /* Loop/switch isn't completed */
        writeBoolean(((AtomicBoolean)obj).get());
        if (true) goto _L4; else goto _L3
_L3:
        throw new IllegalStateException((new StringBuilder()).append("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ").append(obj.getClass().getName()).append(")").toString());
    }

    public boolean canOmitFields() {
        return true;
    }

    public boolean canUseSchema(FormatSchema formatschema) {
        return false;
    }

    public boolean canWriteBinaryNatively() {
        return false;
    }

    public boolean canWriteFormattedNumbers() {
        return false;
    }

    public boolean canWriteObjectId() {
        return false;
    }

    public boolean canWriteTypeId() {
        return false;
    }

    public abstract void close();

    public final JsonGenerator configure(Feature feature, boolean flag) {
        if (flag)
            enable(feature);
        else
            disable(feature);
        return this;
    }

    public void copyCurrentEvent(JsonParser jsonparser) {
        JsonToken jsontoken;
        jsontoken = jsonparser.getCurrentToken();
        if (jsontoken == null)
            _reportError("No current event to copy");
        jsontoken.id();
        JVM INSTR tableswitch -1 12: default 88
    //                   -1 93
    //                   0 88
    //                   1 99
    //                   2 106
    //                   3 113
    //                   4 120
    //                   5 127
    //                   6 138
    //                   7 175
    //                   8 227
    //                   9 279
    //                   10 287
    //                   11 295
    //                   12 302;
           goto _L1 _L2 _L1 _L3 _L4 _L5 _L6 _L7 _L8 _L9 _L10 _L11 _L12 _L13 _L14
_L1:
        _throwInternal();
_L16:
        return;
_L2:
        _reportError("No current event to copy");
_L3:
        writeStartObject();
        continue; /* Loop/switch isn't completed */
_L4:
        writeEndObject();
        continue; /* Loop/switch isn't completed */
_L5:
        writeStartArray();
        continue; /* Loop/switch isn't completed */
_L6:
        writeEndArray();
        continue; /* Loop/switch isn't completed */
_L7:
        writeFieldName(jsonparser.getCurrentName());
        continue; /* Loop/switch isn't completed */
_L8:
        if (jsonparser.hasTextCharacters())
            writeString(jsonparser.getTextCharacters(), jsonparser.getTextOffset(), jsonparser.getTextLength());
        else
            writeString(jsonparser.getText());
        continue; /* Loop/switch isn't completed */
_L9:
        JsonParser.NumberType numbertype = jsonparser.getNumberType();
        if (numbertype == JsonParser.NumberType.INT)
            writeNumber(jsonparser.getIntValue());
        else
        if (numbertype == JsonParser.NumberType.BIG_INTEGER)
            writeNumber(jsonparser.getBigIntegerValue());
        else
            writeNumber(jsonparser.getLongValue());
        continue; /* Loop/switch isn't completed */
_L10:
        JsonParser.NumberType numbertype1 = jsonparser.getNumberType();
        if (numbertype1 == JsonParser.NumberType.BIG_DECIMAL)
            writeNumber(jsonparser.getDecimalValue());
        else
        if (numbertype1 == JsonParser.NumberType.FLOAT)
            writeNumber(jsonparser.getFloatValue());
        else
            writeNumber(jsonparser.getDoubleValue());
        continue; /* Loop/switch isn't completed */
_L11:
        writeBoolean(true);
        continue; /* Loop/switch isn't completed */
_L12:
        writeBoolean(false);
        continue; /* Loop/switch isn't completed */
_L13:
        writeNull();
        continue; /* Loop/switch isn't completed */
_L14:
        writeObject(jsonparser.getEmbeddedObject());
        if (true) goto _L16; else goto _L15
_L15:
    }

    public void copyCurrentStructure(JsonParser jsonparser) {
        int i;
        JsonToken jsontoken = jsonparser.getCurrentToken();
        if (jsontoken == null)
            _reportError("No current event to copy");
        int j = jsontoken.id();
        i = j;
        if (j == 5) {
            writeFieldName(jsonparser.getCurrentName());
            i = jsonparser.nextToken().id();
        }
        i;
        JVM INSTR tableswitch 1 3: default 72
    //                   1 78
    //                   2 72
    //                   3 107;
           goto _L1 _L2 _L1 _L3
_L1:
        copyCurrentEvent(jsonparser);
_L5:
        return;
_L2:
        writeStartObject();
        for (; jsonparser.nextToken() != JsonToken.END_OBJECT; copyCurrentStructure(jsonparser));
        writeEndObject();
        continue; /* Loop/switch isn't completed */
_L3:
        writeStartArray();
        for (; jsonparser.nextToken() != JsonToken.END_ARRAY; copyCurrentStructure(jsonparser));
        writeEndArray();
        if (true) goto _L5; else goto _L4
_L4:
    }

    public abstract JsonGenerator disable(Feature feature);

    public abstract JsonGenerator enable(Feature feature);

    public abstract void flush();

    public CharacterEscapes getCharacterEscapes() {
        return null;
    }

    public abstract ObjectCodec getCodec();

    public Object getCurrentValue() {
        Object obj = getOutputContext();
        if (obj == null)
            obj = null;
        else
            obj = ((JsonStreamContext) (obj)).getCurrentValue();
        return obj;
    }

    public abstract int getFeatureMask();

    public int getFormatFeatures() {
        return 0;
    }

    public int getHighestEscapedChar() {
        return 0;
    }

    public int getOutputBuffered() {
        return -1;
    }

    public abstract JsonStreamContext getOutputContext();

    public Object getOutputTarget() {
        return null;
    }

    public PrettyPrinter getPrettyPrinter() {
        return _cfgPrettyPrinter;
    }

    public FormatSchema getSchema() {
        return null;
    }

    public abstract boolean isClosed();

    public abstract boolean isEnabled(Feature feature);

    public JsonGenerator overrideFormatFeatures(int i, int j) {
        throw new IllegalArgumentException((new StringBuilder()).append("No FormatFeatures defined for generator of type ").append(getClass().getName()).toString());
    }

    public JsonGenerator overrideStdFeatures(int i, int j) {
        return setFeatureMask(getFeatureMask() & ~j | i & j);
    }

    public JsonGenerator setCharacterEscapes(CharacterEscapes characterescapes) {
        return this;
    }

    public abstract JsonGenerator setCodec(ObjectCodec objectcodec);

    public void setCurrentValue(Object obj) {
        JsonStreamContext jsonstreamcontext = getOutputContext();
        if (jsonstreamcontext != null)
            jsonstreamcontext.setCurrentValue(obj);
    }

    public abstract JsonGenerator setFeatureMask(int i);

    public JsonGenerator setHighestNonEscapedChar(int i) {
        return this;
    }

    public JsonGenerator setPrettyPrinter(PrettyPrinter prettyprinter) {
        _cfgPrettyPrinter = prettyprinter;
        return this;
    }

    public JsonGenerator setRootValueSeparator(SerializableString serializablestring) {
        throw new UnsupportedOperationException();
    }

    public void setSchema(FormatSchema formatschema) {
        throw new UnsupportedOperationException((new StringBuilder()).append("Generator of type ").append(getClass().getName()).append(" does not support schema of type '").append(formatschema.getSchemaType()).append("'").toString());
    }

    public abstract JsonGenerator useDefaultPrettyPrinter();

    public abstract Version version();

    public void writeArray(double ad[], int i, int j) {
        writeStartArray();
        for (int k = i; k < i + j; k++)
            writeNumber(ad[k]);

        writeEndArray();
    }

    public void writeArray(int ai[], int i, int j) {
        writeStartArray();
        for (int k = i; k < i + j; k++)
            writeNumber(ai[k]);

        writeEndArray();
    }

    public void writeArray(long al[], int i, int j) {
        writeStartArray();
        for (int k = i; k < i + j; k++)
            writeNumber(al[k]);

        writeEndArray();
    }

    public final void writeArrayFieldStart(String s) {
        writeFieldName(s);
        writeStartArray();
    }

    public abstract int writeBinary(Base64Variant base64variant, InputStream inputstream, int i);

    public int writeBinary(InputStream inputstream, int i) {
        return writeBinary(Base64Variants.getDefaultVariant(), inputstream, i);
    }

    public abstract void writeBinary(Base64Variant base64variant, byte abyte0[], int i, int j);

    public void writeBinary(byte abyte0[]) {
        writeBinary(Base64Variants.getDefaultVariant(), abyte0, 0, abyte0.length);
    }

    public void writeBinary(byte abyte0[], int i, int j) {
        writeBinary(Base64Variants.getDefaultVariant(), abyte0, i, j);
    }

    public final void writeBinaryField(String s, byte abyte0[]) {
        writeFieldName(s);
        writeBinary(abyte0);
    }

    public abstract void writeBoolean(boolean flag);

    public final void writeBooleanField(String s, boolean flag) {
        writeFieldName(s);
        writeBoolean(flag);
    }

    public abstract void writeEndArray();

    public abstract void writeEndObject();

    public abstract void writeFieldName(SerializableString serializablestring);

    public abstract void writeFieldName(String s);

    public abstract void writeNull();

    public final void writeNullField(String s) {
        writeFieldName(s);
        writeNull();
    }

    public abstract void writeNumber(double d);

    public abstract void writeNumber(float f);

    public abstract void writeNumber(int i);

    public abstract void writeNumber(long l);

    public abstract void writeNumber(String s);

    public abstract void writeNumber(BigDecimal bigdecimal);

    public abstract void writeNumber(BigInteger biginteger);

    public void writeNumber(short word0) {
        writeNumber(word0);
    }

    public final void writeNumberField(String s, double d) {
        writeFieldName(s);
        writeNumber(d);
    }

    public final void writeNumberField(String s, float f) {
        writeFieldName(s);
        writeNumber(f);
    }

    public final void writeNumberField(String s, int i) {
        writeFieldName(s);
        writeNumber(i);
    }

    public final void writeNumberField(String s, long l) {
        writeFieldName(s);
        writeNumber(l);
    }

    public final void writeNumberField(String s, BigDecimal bigdecimal) {
        writeFieldName(s);
        writeNumber(bigdecimal);
    }

    public abstract void writeObject(Object obj);

    public final void writeObjectField(String s, Object obj) {
        writeFieldName(s);
        writeObject(obj);
    }

    public final void writeObjectFieldStart(String s) {
        writeFieldName(s);
        writeStartObject();
    }

    public void writeObjectId(Object obj) {
        throw new JsonGenerationException("No native support for writing Object Ids", this);
    }

    public void writeObjectRef(Object obj) {
        throw new JsonGenerationException("No native support for writing Object Ids", this);
    }

    public void writeOmittedField(String s) {
    }

    public abstract void writeRaw(char c);

    public void writeRaw(SerializableString serializablestring) {
        writeRaw(serializablestring.getValue());
    }

    public abstract void writeRaw(String s);

    public abstract void writeRaw(String s, int i, int j);

    public abstract void writeRaw(char ac[], int i, int j);

    public abstract void writeRawUTF8String(byte abyte0[], int i, int j);

    public void writeRawValue(SerializableString serializablestring) {
        writeRawValue(serializablestring.getValue());
    }

    public abstract void writeRawValue(String s);

    public abstract void writeRawValue(String s, int i, int j);

    public abstract void writeRawValue(char ac[], int i, int j);

    public abstract void writeStartArray();

    public void writeStartArray(int i) {
        writeStartArray();
    }

    public abstract void writeStartObject();

    public void writeStartObject(Object obj) {
        writeStartObject();
        setCurrentValue(obj);
    }

    public abstract void writeString(SerializableString serializablestring);

    public abstract void writeString(String s);

    public abstract void writeString(char ac[], int i, int j);

    public void writeStringField(String s, String s1) {
        writeFieldName(s);
        writeString(s1);
    }

    public abstract void writeTree(TreeNode treenode);

    public void writeTypeId(Object obj) {
        throw new JsonGenerationException("No native support for writing Type Ids", this);
    }

    public abstract void writeUTF8String(byte abyte0[], int i, int j);
}
