// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.gson.stream;

import com.google.gson.internal.c;
import java.io.Closeable;
import java.io.EOFException;
import java.io.IOException;
import java.io.Reader;

// Referenced classes of package com.google.gson.stream:
//            MalformedJsonException, JsonToken

public class a
    implements Closeable {

    private static final char b[] = ")]}'\n".toCharArray();
    int a;
    private final Reader c;
    private boolean d;
    private final char e[] = new char[1024];
    private int f;
    private int g;
    private int h;
    private int i;
    private long j;
    private int k;
    private String l;
    private int m[];
    private int n;
    private String o[];
    private int p[];

    public a(Reader reader) {
        d = false;
        f = 0;
        g = 0;
        h = 0;
        i = 0;
        a = 0;
        m = new int[32];
        n = 0;
        int ai[] = m;
        int i1 = n;
        n = i1 + 1;
        ai[i1] = 6;
        o = new String[32];
        p = new int[32];
        if (reader == null) {
            throw new NullPointerException("in == null");
        } else {
            c = reader;
            return;
        }
    }

    static String a(a a1) {
        return a1.x();
    }

    private void a(int i1) {
        if (n == m.length) {
            int ai2[] = new int[n * 2];
            int ai1[] = new int[n * 2];
            String as[] = new String[n * 2];
            System.arraycopy(m, 0, ai2, 0, n);
            System.arraycopy(p, 0, ai1, 0, n);
            System.arraycopy(o, 0, as, 0, n);
            m = ai2;
            p = ai1;
            o = as;
        }
        int ai[] = m;
        int j1 = n;
        n = j1 + 1;
        ai[j1] = i1;
    }

    private boolean a(char c1) {
        c1;
        JVM INSTR lookupswitch 16: default 140
    //                   9: 148
    //                   10: 148
    //                   12: 148
    //                   13: 148
    //                   32: 148
    //                   35: 144
    //                   44: 148
    //                   47: 144
    //                   58: 148
    //                   59: 144
    //                   61: 144
    //                   91: 148
    //                   92: 144
    //                   93: 148
    //                   123: 148
    //                   125: 148;
           goto _L1 _L2 _L2 _L2 _L2 _L2 _L3 _L2 _L3 _L2 _L3 _L3 _L2 _L3 _L2 _L2 _L2
_L1:
        boolean flag = true;
_L5:
        return flag;
_L3:
        v();
_L2:
        flag = false;
        if (true) goto _L5; else goto _L4
_L4:
    }

    private boolean a(String s1) {
        boolean flag1 = false;
_L2:
        boolean flag;
        if (f + s1.length() > g) {
            flag = flag1;
            if (!b(s1.length()))
                break MISSING_BLOCK_LABEL_117;
        }
        if (e[f] != '\n')
            break; /* Loop/switch isn't completed */
        h = h + 1;
        i = f + 1;
_L4:
        f = f + 1;
        if (true) goto _L2; else goto _L1
_L1:
        int i1 = 0;
_L5:
        if (i1 >= s1.length())
            break MISSING_BLOCK_LABEL_115;
        if (e[f + i1] != s1.charAt(i1)) goto _L4; else goto _L3
_L3:
        i1++;
          goto _L5
          goto _L4
        flag = true;
        return flag;
    }

    private int b(boolean flag) {
        int i1;
        int j1;
        char ac[];
        ac = e;
        i1 = f;
        j1 = g;
_L3:
        int k1;
        do {
            k1 = j1;
            int l1 = i1;
            if (i1 == j1) {
                f = i1;
                if (!b(1)) {
                    boolean flag1;
                    if (flag)
                        throw new EOFException((new StringBuilder()).append("End of input").append(x()).toString());
                    i1 = -1;
                    continue; /* Loop/switch isn't completed */
                }
                l1 = f;
                k1 = g;
            }
label0:
            {
                i1 = l1 + 1;
                j1 = ac[l1];
                if (j1 != '\n')
                    break label0;
                h = h + 1;
                i = i1;
                j1 = k1;
            }
        } while (true);
        if (j1 == 32 || j1 == 13) goto _L2; else goto _L1
_L1:
label1:
        {
            if (j1 != 9)
                break label1;
            j1 = k1;
        }
          goto _L3
        if (j1 != 47) goto _L5; else goto _L4
_L4:
        f = i1;
        if (i1 != k1) goto _L7; else goto _L6
_L6:
        f = f - 1;
        flag1 = b(2);
        f = f + 1;
        if (flag1) goto _L7; else goto _L8
_L8:
        i1 = j1;
_L10:
        return i1;
_L7:
        v();
        switch (ac[f]) {
        default:
            i1 = j1;
            continue; /* Loop/switch isn't completed */

        case 42: // '*'
            f = f + 1;
            if (!a("*/"))
                throw b("Unterminated comment");
            i1 = f + 2;
            j1 = g;
            break;

        case 47: // '/'
            f = f + 1;
            w();
            i1 = f;
            j1 = g;
            break;
        }
        break; /* Loop/switch isn't completed */
_L5:
        if (j1 == 35) {
            f = i1;
            v();
            w();
            i1 = f;
            j1 = g;
            break; /* Loop/switch isn't completed */
        }
        f = i1;
        i1 = j1;
        continue; /* Loop/switch isn't completed */
_L2:
        j1 = k1;
          goto _L9
        if (true) goto _L10; else goto _L9
_L9:
        if (true) goto _L3; else goto _L11
_L11:
    }

    private IOException b(String s1) {
        throw new MalformedJsonException((new StringBuilder()).append(s1).append(x()).toString());
    }

    private String b(char c1) {
        char ac[] = e;
        StringBuilder stringbuilder = new StringBuilder();
        do {
            int k1 = f;
            int j1 = g;
            int i1 = k1;
            while (i1 < j1)  {
                int j2 = i1 + 1;
                char c2 = ac[i1];
                if (c2 == c1) {
                    f = j2;
                    stringbuilder.append(ac, k1, j2 - k1 - 1);
                    return stringbuilder.toString();
                }
                int l1;
                int i2;
                if (c2 == '\\') {
                    f = j2;
                    stringbuilder.append(ac, k1, j2 - k1 - 1);
                    stringbuilder.append(y());
                    i2 = f;
                    l1 = g;
                    i1 = i2;
                } else {
                    i2 = k1;
                    l1 = j1;
                    i1 = j2;
                    if (c2 == '\n') {
                        h = h + 1;
                        i = j2;
                        i2 = k1;
                        l1 = j1;
                        i1 = j2;
                    }
                }
                k1 = i2;
                j1 = l1;
            }
            stringbuilder.append(ac, k1, i1 - k1);
            f = i1;
        } while (b(1));
        throw b("Unterminated string");
    }

    private boolean b(int i1) {
        boolean flag1 = false;
        char ac[] = e;
        i = i - f;
        boolean flag;
        if (g != f) {
            g = g - f;
            System.arraycopy(ac, f, ac, 0, g);
        } else {
            g = 0;
        }
        f = 0;
        do {
            int j1 = c.read(ac, g, ac.length - g);
            flag = flag1;
            if (j1 == -1)
                break;
            g = j1 + g;
            j1 = i1;
            if (h == 0) {
                j1 = i1;
                if (i == 0) {
                    j1 = i1;
                    if (g > 0) {
                        j1 = i1;
                        if (ac[0] == '\uFEFF') {
                            f = f + 1;
                            i = i + 1;
                            j1 = i1 + 1;
                        }
                    }
                }
            }
            i1 = j1;
            if (g < j1)
                continue;
            flag = true;
            break;
        } while (true);
        return flag;
    }

    private void c(char c1) {
        char ac[] = e;
        do {
            int i1 = f;
            int j1 = g;
            while (i1 < j1)  {
                int l1 = i1 + 1;
                char c2 = ac[i1];
                if (c2 == c1) {
                    f = l1;
                    return;
                }
                int k1;
                if (c2 == '\\') {
                    f = l1;
                    y();
                    i1 = f;
                    k1 = g;
                } else {
                    k1 = j1;
                    i1 = l1;
                    if (c2 == '\n') {
                        h = h + 1;
                        i = l1;
                        k1 = j1;
                        i1 = l1;
                    }
                }
                j1 = k1;
            }
            f = i1;
        } while (b(1));
        throw b("Unterminated string");
    }

    private int o() {
        int i1;
        int j1;
        int k1;
        String s1;
        String s2;
        i1 = e[f];
        if (i1 == 116 || i1 == 84) {
            s2 = "true";
            s1 = "TRUE";
            i1 = 5;
        } else
        if (i1 == 102 || i1 == 70) {
            s2 = "false";
            s1 = "FALSE";
            i1 = 6;
        } else {
label0:
            {
                if (i1 != 110 && i1 != 78)
                    break label0;
                s2 = "null";
                s1 = "NULL";
                i1 = 7;
            }
        }
        k1 = s2.length();
        j1 = 1;
_L2:
        if (j1 >= k1)
            break MISSING_BLOCK_LABEL_175;
        if (f + j1 >= g && !b(j1 + 1)) {
            i1 = 0;
        } else {
label1:
            {
                char c1 = e[f + j1];
                if (c1 == s2.charAt(j1) || c1 == s1.charAt(j1))
                    break label1;
                i1 = 0;
            }
        }
_L1:
        return i1;
        i1 = 0;
          goto _L1
        j1++;
          goto _L2
        if ((f + k1 < g || b(k1 + 1)) && a(e[f + k1])) {
            i1 = 0;
        } else {
            f = f + k1;
            a = i1;
        }
          goto _L1
    }

    private int s() {
        int i1;
        boolean flag;
        int j1;
        int k1;
        int j2;
        int l2;
        long l3;
        char ac[];
        ac = e;
        j2 = f;
        l2 = g;
        l3 = 0L;
        i1 = 0;
        flag = true;
        j1 = 0;
        k1 = 0;
_L18:
        int l1;
        int i2;
        i2 = l2;
        l1 = j2;
        if (j2 + k1 != l2) goto _L2; else goto _L1
_L1:
        if (k1 != ac.length) goto _L4; else goto _L3
_L3:
        i1 = 0;
_L7:
        return i1;
_L4:
        if (b(k1 + 1)) goto _L6; else goto _L5
_L5:
        if (j1 == 2 && flag && (l3 != 0x0L || i1 != 0)) {
            char c1;
            int i3;
            long l4;
            if (i1 == 0)
                l3 = -l3;
            j = l3;
            f = f + k1;
            i1 = 15;
            a = 15;
        } else
        if (j1 == 2 || j1 == 4 || j1 == 7) {
            k = k1;
            i1 = 16;
            a = 16;
        } else {
            i1 = 0;
        }
          goto _L7
_L6:
        l1 = f;
        i2 = g;
_L2:
        c1 = ac[l1 + k1];
        c1;
        JVM INSTR lookupswitch 5: default 200
    //                   43: 290
    //                   45: 225
    //                   46: 343
    //                   69: 314
    //                   101: 314;
           goto _L8 _L9 _L10 _L11 _L12 _L12
_L8:
        if (c1 >= '0' && c1 <= '9') goto _L14; else goto _L13
_L13:
        if (!a(c1)) goto _L5; else goto _L15
_L15:
        i1 = 0;
          goto _L7
_L10:
        if (j1 != 0) goto _L17; else goto _L16
_L16:
        i1 = 1;
        j1 = 1;
_L21:
        i3 = k1 + 1;
        k1 = j1;
        l2 = i2;
        j2 = l1;
        j1 = i1;
        i1 = k1;
        k1 = i3;
          goto _L18
_L17:
        if (j1 != 5) goto _L20; else goto _L19
_L19:
        j2 = 6;
        j1 = i1;
        i1 = j2;
          goto _L21
_L20:
        i1 = 0;
          goto _L7
_L9:
        if (j1 != 5) goto _L23; else goto _L22
_L22:
        j2 = 6;
        j1 = i1;
        i1 = j2;
          goto _L21
_L23:
        i1 = 0;
          goto _L7
_L12:
        if (j1 != 2 && j1 != 4) goto _L25; else goto _L24
_L24:
        j2 = 5;
        j1 = i1;
        i1 = j2;
          goto _L21
_L25:
        i1 = 0;
          goto _L7
_L11:
        if (j1 != 2) goto _L27; else goto _L26
_L26:
        j2 = 3;
        j1 = i1;
        i1 = j2;
          goto _L21
_L27:
        i1 = 0;
          goto _L7
_L14:
        if (j1 != 1 && j1 != 0) goto _L29; else goto _L28
_L28:
        l3 = -(c1 - 48);
        j2 = 2;
        j1 = i1;
        i1 = j2;
          goto _L21
_L29:
        if (j1 != 2) goto _L31; else goto _L30
_L30:
        if (l3 != 0L) goto _L33; else goto _L32
_L32:
        i1 = 0;
          goto _L7
_L33:
        l4 = 10L * l3 - (long)(c1 - 48);
        if (l3 > 0x33333334L || l3 == 0x33333334L && l4 < l3)
            l2 = 1;
        else
            l2 = 0;
        j2 = i1;
        l3 = l4;
        flag = l2 & flag;
        i1 = j1;
        j1 = j2;
          goto _L21
_L31:
        if (j1 == 3) {
            j2 = 4;
            j1 = i1;
            i1 = j2;
        } else
        if (j1 == 5 || j1 == 6) {
            j2 = 7;
            j1 = i1;
            i1 = j2;
        } else {
            int k2 = i1;
            i1 = j1;
            j1 = k2;
        }
          goto _L21
    }

    private String t() {
        int i1;
        Object obj;
        obj = null;
        i1 = 0;
_L2:
        Object obj1;
        int j1;
        if (f + i1 < g) {
            obj1 = obj;
            j1 = i1;
            switch (e[f + i1]) {
            default:
                i1++;
                continue; /* Loop/switch isn't completed */

            case 35: // '#'
            case 47: // '/'
            case 59: // ';'
            case 61: // '='
            case 92: // '\\'
                v();
                j1 = i1;
                obj1 = obj;
                break;

            case 9: // '\t'
            case 10: // '\n'
            case 12: // '\f'
            case 13: // '\r'
            case 32: // ' '
            case 44: // ','
            case 58: // ':'
            case 91: // '['
            case 93: // ']'
            case 123: // '{'
            case 125: // '}'
                break;
            }
        } else
        if (i1 < e.length) {
            obj1 = obj;
            j1 = i1;
            if (b(i1 + 1))
                continue; /* Loop/switch isn't completed */
        } else {
label0:
            {
                obj1 = obj;
                if (obj == null)
                    obj1 = new StringBuilder();
                ((StringBuilder) (obj1)).append(e, f, i1);
                f = i1 + f;
                if (b(1))
                    break label0;
                j1 = 0;
            }
        }
        if (obj1 == null) {
            obj = new String(e, f, j1);
        } else {
            ((StringBuilder) (obj1)).append(e, f, j1);
            obj = ((StringBuilder) (obj1)).toString();
        }
        f = j1 + f;
        return ((String) (obj));
        i1 = 0;
        obj = obj1;
        if (true) goto _L2; else goto _L1
_L1:
    }

    private void u() {
_L8:
        int i1 = 0;
_L7:
        if (f + i1 >= g) goto _L2; else goto _L1
_L1:
        e[f + i1];
        JVM INSTR lookupswitch 16: default 164
    //                   9: 174
    //                   10: 174
    //                   12: 174
    //                   13: 174
    //                   32: 174
    //                   35: 170
    //                   44: 174
    //                   47: 170
    //                   58: 174
    //                   59: 170
    //                   61: 170
    //                   91: 174
    //                   92: 170
    //                   93: 174
    //                   123: 174
    //                   125: 174;
           goto _L3 _L4 _L4 _L4 _L4 _L4 _L5 _L4 _L5 _L4 _L5 _L5 _L4 _L5 _L4 _L4 _L4
_L3:
        i1++;
        break; /* Loop/switch isn't completed */
_L5:
        v();
_L4:
        f = i1 + f;
          goto _L6
        if (true) goto _L7; else goto _L2
_L6:
        return;
_L2:
        f = i1 + f;
        if (b(1)) goto _L8; else goto _L6
    }

    private void v() {
        if (!d)
            throw b("Use JsonReader.setLenient(true) to accept malformed JSON");
        else
            return;
    }

    private void w() {
_L5:
        if (f >= g && !b(1)) goto _L2; else goto _L1
_L1:
        int i1;
        char ac[] = e;
        i1 = f;
        f = i1 + 1;
        i1 = ac[i1];
        if (i1 != '\n') goto _L4; else goto _L3
_L3:
        h = h + 1;
        i = f;
_L2:
        return;
_L4:
        if (i1 != '\r') goto _L5; else goto _L2
    }

    private String x() {
        int j1 = h;
        int k1 = f;
        int i1 = i;
        return (new StringBuilder()).append(" at line ").append(j1 + 1).append(" column ").append((k1 - i1) + 1).append(" path ").append(p()).toString();
    }

    private char y() {
        char c1;
        char c2;
        if (f == g && !b(1))
            throw b("Unterminated escape sequence");
        char ac[] = e;
        int i1 = f;
        f = i1 + 1;
        c2 = ac[i1];
        c1 = c2;
        c2;
        JVM INSTR lookupswitch 11: default 152
    //                   10: 394
    //                   34: 362
    //                   39: 362
    //                   47: 362
    //                   92: 362
    //                   98: 370
    //                   102: 388
    //                   110: 376
    //                   114: 382
    //                   116: 364
    //                   117: 159;
           goto _L1 _L2 _L3 _L3 _L3 _L3 _L4 _L5 _L6 _L7 _L8 _L9
_L3:
        break; /* Loop/switch isn't completed */
_L1:
        throw b("Invalid escape sequence");
_L9:
        if (f + 4 > g && !b(4))
            throw b("Unterminated escape sequence");
        int k1 = f;
        c1 = '\0';
        int j1 = k1;
        while (j1 < k1 + 4)  {
            char c3 = e[j1];
            char c4 = (char)(c1 << 4);
            if (c3 >= '0' && c3 <= '9')
                c1 = (char)(c4 + (c3 - 48));
            else
            if (c3 >= 'a' && c3 <= 'f')
                c1 = (char)(c4 + ((c3 - 97) + 10));
            else
            if (c3 >= 'A' && c3 <= 'F')
                c1 = (char)(c4 + ((c3 - 65) + 10));
            else
                throw new NumberFormatException((new StringBuilder()).append("\\u").append(new String(e, f, 4)).toString());
            j1++;
        }
        f = f + 4;
_L11:
        return c1;
_L8:
        c1 = '\t';
        continue; /* Loop/switch isn't completed */
_L4:
        c1 = '\b';
        continue; /* Loop/switch isn't completed */
_L6:
        c1 = '\n';
        continue; /* Loop/switch isn't completed */
_L7:
        c1 = '\r';
        continue; /* Loop/switch isn't completed */
_L5:
        c1 = '\f';
        continue; /* Loop/switch isn't completed */
_L2:
        h = h + 1;
        i = f;
        c1 = c2;
        if (true) goto _L11; else goto _L10
_L10:
    }

    private void z() {
        b(true);
        f = f - 1;
        if (f + b.length <= g || b(b.length)) goto _L2; else goto _L1
_L1:
        return;
_L2:
        for (int i1 = 0; i1 < b.length; i1++)
            if (e[f + i1] != b[i1])
                continue; /* Loop/switch isn't completed */

        f = f + b.length;
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void a() {
        int j1 = a;
        int i1 = j1;
        if (j1 == 0)
            i1 = r();
        if (i1 == 3) {
            a(1);
            p[n - 1] = 0;
            a = 0;
            return;
        } else {
            throw new IllegalStateException((new StringBuilder()).append("Expected BEGIN_ARRAY but was ").append(f()).append(x()).toString());
        }
    }

    public final void a(boolean flag) {
        d = flag;
    }

    public void b() {
        int k1 = a;
        int i1 = k1;
        if (k1 == 0)
            i1 = r();
        if (i1 == 4) {
            n = n - 1;
            int ai[] = p;
            int j1 = n - 1;
            ai[j1] = ai[j1] + 1;
            a = 0;
            return;
        } else {
            throw new IllegalStateException((new StringBuilder()).append("Expected END_ARRAY but was ").append(f()).append(x()).toString());
        }
    }

    public void c() {
        int j1 = a;
        int i1 = j1;
        if (j1 == 0)
            i1 = r();
        if (i1 == 1) {
            a(3);
            a = 0;
            return;
        } else {
            throw new IllegalStateException((new StringBuilder()).append("Expected BEGIN_OBJECT but was ").append(f()).append(x()).toString());
        }
    }

    public void close() {
        a = 0;
        m[0] = 8;
        n = 1;
        c.close();
    }

    public void d() {
        int k1 = a;
        int i1 = k1;
        if (k1 == 0)
            i1 = r();
        if (i1 == 2) {
            n = n - 1;
            o[n] = null;
            int ai[] = p;
            int j1 = n - 1;
            ai[j1] = ai[j1] + 1;
            a = 0;
            return;
        } else {
            throw new IllegalStateException((new StringBuilder()).append("Expected END_OBJECT but was ").append(f()).append(x()).toString());
        }
    }

    public boolean e() {
        int j1 = a;
        int i1 = j1;
        if (j1 == 0)
            i1 = r();
        boolean flag;
        if (i1 != 2 && i1 != 4)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public JsonToken f() {
        int i1;
        int j1 = a;
        i1 = j1;
        if (j1 == 0)
            i1 = r();
        i1;
        JVM INSTR tableswitch 1 17: default 100
    //                   1 108
    //                   2 114
    //                   3 121
    //                   4 128
    //                   5 142
    //                   6 142
    //                   7 149
    //                   8 156
    //                   9 156
    //                   10 156
    //                   11 156
    //                   12 135
    //                   13 135
    //                   14 135
    //                   15 163
    //                   16 163
    //                   17 170;
           goto _L1 _L2 _L3 _L4 _L5 _L6 _L6 _L7 _L8 _L8 _L8 _L8 _L9 _L9 _L9 _L10 _L10 _L11
_L1:
        throw new AssertionError();
_L2:
        JsonToken jsontoken = com.google.gson.stream.JsonToken.c;
_L13:
        return jsontoken;
_L3:
        jsontoken = JsonToken.d;
        continue; /* Loop/switch isn't completed */
_L4:
        jsontoken = JsonToken.a;
        continue; /* Loop/switch isn't completed */
_L5:
        jsontoken = JsonToken.b;
        continue; /* Loop/switch isn't completed */
_L9:
        jsontoken = JsonToken.e;
        continue; /* Loop/switch isn't completed */
_L6:
        jsontoken = JsonToken.h;
        continue; /* Loop/switch isn't completed */
_L7:
        jsontoken = JsonToken.i;
        continue; /* Loop/switch isn't completed */
_L8:
        jsontoken = JsonToken.f;
        continue; /* Loop/switch isn't completed */
_L10:
        jsontoken = JsonToken.g;
        continue; /* Loop/switch isn't completed */
_L11:
        jsontoken = JsonToken.j;
        if (true) goto _L13; else goto _L12
_L12:
    }

    public String g() {
        int j1 = a;
        int i1 = j1;
        if (j1 == 0)
            i1 = r();
        String s1;
        if (i1 == 14)
            s1 = t();
        else
        if (i1 == 12)
            s1 = b('\'');
        else
        if (i1 == 13)
            s1 = b('"');
        else
            throw new IllegalStateException((new StringBuilder()).append("Expected a name but was ").append(f()).append(x()).toString());
        a = 0;
        o[n - 1] = s1;
        return s1;
    }

    public String h() {
        int j1 = a;
        int i1 = j1;
        if (j1 == 0)
            i1 = r();
        String s1;
        int ai[];
        if (i1 == 10)
            s1 = t();
        else
        if (i1 == 8)
            s1 = b('\'');
        else
        if (i1 == 9)
            s1 = b('"');
        else
        if (i1 == 11) {
            s1 = l;
            l = null;
        } else
        if (i1 == 15)
            s1 = Long.toString(j);
        else
        if (i1 == 16) {
            s1 = new String(e, f, k);
            f = f + k;
        } else {
            throw new IllegalStateException((new StringBuilder()).append("Expected a string but was ").append(f()).append(x()).toString());
        }
        a = 0;
        ai = p;
        i1 = n - 1;
        ai[i1] = ai[i1] + 1;
        return s1;
    }

    public boolean i() {
        boolean flag = false;
        int k1 = a;
        int i1 = k1;
        if (k1 == 0)
            i1 = r();
        if (i1 == 5) {
            a = 0;
            int ai[] = p;
            i1 = n - 1;
            ai[i1] = ai[i1] + 1;
            flag = true;
        } else
        if (i1 == 6) {
            a = 0;
            int ai1[] = p;
            int j1 = n - 1;
            ai1[j1] = ai1[j1] + 1;
        } else {
            throw new IllegalStateException((new StringBuilder()).append("Expected a boolean but was ").append(f()).append(x()).toString());
        }
        return flag;
    }

    public void j() {
        int k1 = a;
        int i1 = k1;
        if (k1 == 0)
            i1 = r();
        if (i1 == 7) {
            a = 0;
            int ai[] = p;
            int j1 = n - 1;
            ai[j1] = ai[j1] + 1;
            return;
        } else {
            throw new IllegalStateException((new StringBuilder()).append("Expected null but was ").append(f()).append(x()).toString());
        }
    }

    public double k() {
        int i1;
        int j1 = a;
        i1 = j1;
        if (j1 == 0)
            i1 = r();
        if (i1 != 15) goto _L2; else goto _L1
_L1:
        double d1;
        a = 0;
        int ai[] = p;
        i1 = n - 1;
        ai[i1] = ai[i1] + 1;
        d1 = j;
_L4:
        return d1;
_L2:
label0:
        {
            if (i1 == 16) {
                l = new String(e, f, k);
                f = f + k;
            } else
            if (i1 == 8 || i1 == 9) {
                char c1;
                if (i1 == 8)
                    c1 = '\'';
                else
                    c1 = '"';
                l = b(c1);
            } else {
                if (i1 != 10)
                    continue;
                l = t();
            }
            do {
                a = 11;
                d1 = Double.parseDouble(l);
                if (!d && (Double.isNaN(d1) || Double.isInfinite(d1)))
                    throw new MalformedJsonException((new StringBuilder()).append("JSON forbids NaN and infinities: ").append(d1).append(x()).toString());
                break label0;
            } while (i1 == 11);
            throw new IllegalStateException((new StringBuilder()).append("Expected a double but was ").append(f()).append(x()).toString());
        }
        l = null;
        a = 0;
        int ai1[] = p;
        i1 = n - 1;
        ai1[i1] = ai1[i1] + 1;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public long l() {
        int i1;
        int k1 = a;
        i1 = k1;
        if (k1 == 0)
            i1 = r();
        if (i1 != 15) goto _L2; else goto _L1
_L1:
        long l1;
        a = 0;
        int ai[] = p;
        i1 = n - 1;
        ai[i1] = ai[i1] + 1;
        l1 = j;
_L8:
        return l1;
_L2:
        if (i1 != 16) goto _L4; else goto _L3
_L3:
        l = new String(e, f, k);
        f = f + k;
_L6:
        a = 11;
        double d1 = Double.parseDouble(l);
        l1 = (long)d1;
        if ((double)l1 != d1)
            throw new NumberFormatException((new StringBuilder()).append("Expected a long but was ").append(l).append(x()).toString());
        break MISSING_BLOCK_LABEL_325;
_L4:
        if (i1 != 8 && i1 != 9 && i1 != 10)
            break; /* Loop/switch isn't completed */
        int ai1[];
        NumberFormatException numberformatexception;
        if (i1 == 10) {
            l = t();
        } else {
            char c1;
            if (i1 == 8)
                c1 = '\'';
            else
                c1 = '"';
            l = b(c1);
        }
        l1 = Long.parseLong(l);
        a = 0;
        ai1 = p;
        i1 = n - 1;
        ai1[i1] = ai1[i1] + 1;
        continue; /* Loop/switch isn't completed */
        numberformatexception;
        if (true) goto _L6; else goto _L5
_L5:
        throw new IllegalStateException((new StringBuilder()).append("Expected a long but was ").append(f()).append(x()).toString());
        l = null;
        a = 0;
        int ai2[] = p;
        int j1 = n - 1;
        ai2[j1] = ai2[j1] + 1;
        if (true) goto _L8; else goto _L7
_L7:
    }

    public int m() {
        int i1;
        int j1 = a;
        i1 = j1;
        if (j1 == 0)
            i1 = r();
        if (i1 != 15) goto _L2; else goto _L1
_L1:
        i1 = (int)j;
        if (j != (long)i1)
            throw new NumberFormatException((new StringBuilder()).append("Expected an int but was ").append(j).append(x()).toString());
        a = 0;
        int ai[] = p;
        int k1 = n - 1;
        ai[k1] = ai[k1] + 1;
_L8:
        return i1;
_L2:
        if (i1 != 16) goto _L4; else goto _L3
_L3:
        l = new String(e, f, k);
        f = f + k;
_L6:
        a = 11;
        double d1 = Double.parseDouble(l);
        i1 = (int)d1;
        if ((double)i1 != d1)
            throw new NumberFormatException((new StringBuilder()).append("Expected an int but was ").append(l).append(x()).toString());
        break MISSING_BLOCK_LABEL_375;
_L4:
        if (i1 != 8 && i1 != 9 && i1 != 10)
            break; /* Loop/switch isn't completed */
        int l1;
        int ai1[];
        NumberFormatException numberformatexception;
        if (i1 == 10) {
            l = t();
        } else {
            char c1;
            if (i1 == 8)
                c1 = '\'';
            else
                c1 = '"';
            l = b(c1);
        }
        i1 = Integer.parseInt(l);
        a = 0;
        ai1 = p;
        l1 = n - 1;
        ai1[l1] = ai1[l1] + 1;
        continue; /* Loop/switch isn't completed */
        numberformatexception;
        if (true) goto _L6; else goto _L5
_L5:
        throw new IllegalStateException((new StringBuilder()).append("Expected an int but was ").append(f()).append(x()).toString());
        l = null;
        a = 0;
        int ai2[] = p;
        int i2 = n - 1;
        ai2[i2] = ai2[i2] + 1;
        if (true) goto _L8; else goto _L7
_L7:
    }

    public void n() {
        int j1 = 0;
_L2:
        int i1;
        int k1;
        i1 = a;
        k1 = i1;
        if (i1 == 0)
            k1 = r();
        if (k1 != 3)
            break; /* Loop/switch isn't completed */
        a(1);
        i1 = j1 + 1;
_L3:
        a = 0;
        j1 = i1;
        if (i1 == 0) {
            int ai[] = p;
            i1 = n - 1;
            ai[i1] = ai[i1] + 1;
            o[n - 1] = "null";
            return;
        }
        if (true) goto _L2; else goto _L1
_L1:
        if (k1 == 1) {
            a(3);
            i1 = j1 + 1;
        } else
        if (k1 == 4) {
            n = n - 1;
            i1 = j1 - 1;
        } else
        if (k1 == 2) {
            n = n - 1;
            i1 = j1 - 1;
        } else
        if (k1 == 14 || k1 == 10) {
            u();
            i1 = j1;
        } else
        if (k1 == 8 || k1 == 12) {
            c('\'');
            i1 = j1;
        } else
        if (k1 == 9 || k1 == 13) {
            c('"');
            i1 = j1;
        } else {
            i1 = j1;
            if (k1 == 16) {
                f = f + k;
                i1 = j1;
            }
        }
          goto _L3
        if (true) goto _L2; else goto _L4
_L4:
    }

    public String p() {
        int i1;
        int j1;
        StringBuilder stringbuilder;
        stringbuilder = (new StringBuilder()).append('$');
        i1 = 0;
        j1 = n;
_L2:
        if (i1 >= j1)
            break MISSING_BLOCK_LABEL_124;
        switch (m[i1]) {
        default:
            break;

        case 1: // '\001'
        case 2: // '\002'
            break; /* Loop/switch isn't completed */

        case 3: // '\003'
        case 4: // '\004'
        case 5: // '\005'
            break;
        }
        break MISSING_BLOCK_LABEL_94;
_L3:
        i1++;
        if (true) goto _L2; else goto _L1
_L1:
        stringbuilder.append('[').append(p[i1]).append(']');
          goto _L3
        stringbuilder.append('.');
        if (o[i1] != null)
            stringbuilder.append(o[i1]);
          goto _L3
        return stringbuilder.toString();
    }

    public final boolean q() {
        return d;
    }

    int r() {
        int i1;
        int j1;
        i1 = 4;
        j1 = m[n - 1];
        if (j1 != 1) goto _L2; else goto _L1
_L1:
        m[n - 1] = 2;
_L11:
        b(true);
        JVM INSTR lookupswitch 7: default 104
    //                   34: 693
    //                   39: 677
    //                   44: 633
    //                   59: 633
    //                   91: 705
    //                   93: 620
    //                   123: 715;
           goto _L3 _L4 _L5 _L6 _L6 _L7 _L8 _L9
_L3:
        f = f - 1;
        i1 = o();
        if (i1 == 0) {
            int k1 = s();
            i1 = k1;
            if (k1 == 0) {
                if (!a(e[f]))
                    throw b("Expected value");
                v();
                i1 = 10;
                a = 10;
            }
        }
        return i1;
_L2:
label0:
        {
            if (j1 != 2)
                break label0;
            switch (b(true)) {
            default:
                throw b("Unterminated array");

            case 44: // ','
                continue; /* Loop/switch isn't completed */

            case 93: // ']'
                a = 4;
                break;

            case 59: // ';'
                v();
                continue; /* Loop/switch isn't completed */
            }
        }
        break MISSING_BLOCK_LABEL_123;
label1:
        {
label2:
            {
                if (j1 == 3 || j1 == 5) {
label3:
                    {
                        m[n - 1] = 4;
                        if (j1 != 5)
                            break label3;
                        switch (b(true)) {
                        default:
                            throw b("Unterminated object");

                        case 44: // ','
                            break;

                        case 125: // '}'
                            a = 2;
                            i1 = 2;
                            break MISSING_BLOCK_LABEL_123;

                        case 59: // ';'
                            v();
                            break;
                        }
                    }
                    i1 = b(true);
                    switch (i1) {
                    default:
                        v();
                        f = f - 1;
                        if (a((char)i1)) {
                            i1 = 14;
                            a = 14;
                        } else {
                            throw b("Expected name");
                        }
                        break;

                    case 34: // '"'
                        i1 = 13;
                        a = 13;
                        break;

                    case 39: // '\''
                        v();
                        i1 = 12;
                        a = 12;
                        break;

                    case 125: // '}'
                        if (j1 != 5) {
                            a = 2;
                            i1 = 2;
                        } else {
                            throw b("Expected name");
                        }
                        break;
                    }
                } else {
                    if (j1 != 4)
                        break label1;
                    m[n - 1] = 5;
                    break label2;
                }
                if (false)
                    ;
                else
                    break MISSING_BLOCK_LABEL_123;
            }
            switch (b(true)) {
            case 59: // ';'
            case 60: // '<'
            default:
                throw b("Expected ':'");

            case 61: // '='
                v();
                if ((f < g || b(1)) && e[f] == '>')
                    f = f + 1;
                break;

            case 58: // ':'
                break;
            }
            continue; /* Loop/switch isn't completed */
        }
        if (j1 == 6) {
            if (d)
                z();
            m[n - 1] = 7;
            continue; /* Loop/switch isn't completed */
        }
        if (j1 != 7)
            continue; /* Loop/switch isn't completed */
        if (b(false) == -1) {
            i1 = 17;
            a = 17;
        } else {
            v();
            f = f - 1;
            continue; /* Loop/switch isn't completed */
        }
        break MISSING_BLOCK_LABEL_123;
        if (j1 != 8) goto _L11; else goto _L10
_L10:
        throw new IllegalStateException("JsonReader is closed");
_L8:
        if (j1 == 1) {
            a = 4;
            break MISSING_BLOCK_LABEL_123;
        }
_L6:
        if (j1 == 1 || j1 == 2) {
            v();
            f = f - 1;
            a = 7;
            i1 = 7;
        } else {
            throw b("Unexpected value");
        }
        break MISSING_BLOCK_LABEL_123;
_L5:
        v();
        i1 = 8;
        a = 8;
        break MISSING_BLOCK_LABEL_123;
_L4:
        i1 = 9;
        a = 9;
        break MISSING_BLOCK_LABEL_123;
_L7:
        i1 = 3;
        a = 3;
        break MISSING_BLOCK_LABEL_123;
_L9:
        a = 1;
        i1 = 1;
        break MISSING_BLOCK_LABEL_123;
        if (true) goto _L11; else goto _L12
_L12:
    }

    public String toString() {
        return (new StringBuilder()).append(getClass().getSimpleName()).append(x()).toString();
    }

    static  {
        c.a = new c() {

            public void a(a a1) {
                if (a1 instanceof com.google.gson.internal.bind.c) {
                    ((com.google.gson.internal.bind.c)a1).o();
                } else {
                    int j1 = a1.a;
                    int i1 = j1;
                    if (j1 == 0)
                        i1 = a1.r();
                    if (i1 == 13)
                        a1.a = 9;
                    else
                    if (i1 == 12)
                        a1.a = 8;
                    else
                    if (i1 == 14)
                        a1.a = 10;
                    else
                        throw new IllegalStateException((new StringBuilder()).append("Expected a name but was ").append(a1.f()).append(a.a(a1)).toString());
                }
            }

        }
;
    }
}
