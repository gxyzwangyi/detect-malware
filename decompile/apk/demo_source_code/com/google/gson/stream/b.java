// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.gson.stream;

import java.io.*;

public class b
    implements Closeable, Flushable {

    private static final String a[];
    private static final String b[];
    private final Writer c;
    private int d[];
    private int e;
    private String f;
    private String g;
    private boolean h;
    private boolean i;
    private String j;
    private boolean k;

    public b(Writer writer) {
        d = new int[32];
        e = 0;
        a(6);
        g = ":";
        k = true;
        if (writer == null) {
            throw new NullPointerException("out == null");
        } else {
            c = writer;
            return;
        }
    }

    private int a() {
        if (e == 0)
            throw new IllegalStateException("JsonWriter is closed.");
        else
            return d[e - 1];
    }

    private b a(int i1, int j1, String s) {
        int k1 = a();
        if (k1 != j1 && k1 != i1)
            throw new IllegalStateException("Nesting problem.");
        if (j != null)
            throw new IllegalStateException((new StringBuilder()).append("Dangling name: ").append(j).toString());
        e = e - 1;
        if (k1 == j1)
            k();
        c.write(s);
        return this;
    }

    private b a(int i1, String s) {
        m();
        a(i1);
        c.write(s);
        return this;
    }

    private void a(int i1) {
        if (e == d.length) {
            int ai[] = new int[e * 2];
            System.arraycopy(d, 0, ai, 0, e);
            d = ai;
        }
        int ai1[] = d;
        int j1 = e;
        e = j1 + 1;
        ai1[j1] = i1;
    }

    private void b(int i1) {
        d[e - 1] = i1;
    }

    private void d(String s) {
        int i1;
        int j1;
        int k1;
        int l1;
        char c1;
        String s1;
        j1 = 0;
        String as[];
        String s2;
        if (i)
            as = b;
        else
            as = a;
        c.write("\"");
        l1 = s.length();
        i1 = 0;
        if (i1 >= l1)
            break MISSING_BLOCK_LABEL_152;
        c1 = s.charAt(i1);
        if (c1 >= '\200') goto _L2; else goto _L1
_L1:
        s2 = as[c1];
        s1 = s2;
        if (s2 != null) goto _L4; else goto _L3
_L3:
        k1 = j1;
_L6:
        i1++;
        j1 = k1;
        break MISSING_BLOCK_LABEL_31;
_L2:
        if (c1 != '\u2028')
            break; /* Loop/switch isn't completed */
        s1 = "\\u2028";
_L4:
        if (j1 < i1)
            c.write(s, j1, i1 - j1);
        c.write(s1);
        k1 = i1 + 1;
        if (true) goto _L6; else goto _L5
_L5:
        k1 = j1;
        if (c1 != '\u2029') goto _L6; else goto _L7
_L7:
        s1 = "\\u2029";
          goto _L4
        if (j1 < l1)
            c.write(s, j1, l1 - j1);
        c.write("\"");
        return;
    }

    private void j() {
        if (j != null) {
            l();
            d(j);
            j = null;
        }
    }

    private void k() {
        if (f != null) {
            c.write("\n");
            int i1 = 1;
            int j1 = e;
            while (i1 < j1)  {
                c.write(f);
                i1++;
            }
        }
    }

    private void l() {
        int i1 = a();
        if (i1 == 5)
            c.write(44);
        else
        if (i1 != 3)
            throw new IllegalStateException("Nesting problem.");
        k();
        b(4);
    }

    private void m() {
        a();
        JVM INSTR tableswitch 1 7: default 48
    //                   1 82
    //                   2 94
    //                   3 48
    //                   4 111
    //                   5 48
    //                   6 75
    //                   7 58;
           goto _L1 _L2 _L3 _L1 _L4 _L1 _L5 _L6
_L1:
        throw new IllegalStateException("Nesting problem.");
_L6:
        if (!h)
            throw new IllegalStateException("JSON must have only one top-level value.");
_L5:
        b(7);
_L8:
        return;
_L2:
        b(2);
        k();
        continue; /* Loop/switch isn't completed */
_L3:
        c.append(',');
        k();
        continue; /* Loop/switch isn't completed */
_L4:
        c.append(g);
        b(5);
        if (true) goto _L8; else goto _L7
_L7:
    }

    public b a(long l1) {
        j();
        m();
        c.write(Long.toString(l1));
        return this;
    }

    public b a(Boolean boolean1) {
        if (boolean1 == null) {
            boolean1 = f();
        } else {
            j();
            m();
            Writer writer = c;
            if (boolean1.booleanValue())
                boolean1 = "true";
            else
                boolean1 = "false";
            writer.write(boolean1);
            boolean1 = this;
        }
        return boolean1;
    }

    public b a(Number number) {
        if (number == null) {
            number = f();
        } else {
            j();
            String s = number.toString();
            if (!h && (s.equals("-Infinity") || s.equals("Infinity") || s.equals("NaN")))
                throw new IllegalArgumentException((new StringBuilder()).append("Numeric values must be finite, but was ").append(number).toString());
            m();
            c.append(s);
            number = this;
        }
        return number;
    }

    public b a(String s) {
        if (s == null)
            throw new NullPointerException("name == null");
        if (j != null)
            throw new IllegalStateException();
        if (e == 0) {
            throw new IllegalStateException("JsonWriter is closed.");
        } else {
            j = s;
            return this;
        }
    }

    public b a(boolean flag) {
        j();
        m();
        Writer writer = c;
        String s;
        if (flag)
            s = "true";
        else
            s = "false";
        writer.write(s);
        return this;
    }

    public b b() {
        j();
        return a(1, "[");
    }

    public b b(String s) {
        if (s == null) {
            s = f();
        } else {
            j();
            m();
            d(s);
            s = this;
        }
        return s;
    }

    public final void b(boolean flag) {
        h = flag;
    }

    public b c() {
        return a(1, 2, "]");
    }

    public final void c(String s) {
        if (s.length() == 0) {
            f = null;
            g = ":";
        } else {
            f = s;
            g = ": ";
        }
    }

    public final void c(boolean flag) {
        i = flag;
    }

    public void close() {
        c.close();
        int i1 = e;
        if (i1 > 1 || i1 == 1 && d[i1 - 1] != 7) {
            throw new IOException("Incomplete document");
        } else {
            e = 0;
            return;
        }
    }

    public b d() {
        j();
        return a(3, "{");
    }

    public final void d(boolean flag) {
        k = flag;
    }

    public b e() {
        return a(3, 5, "}");
    }

    public b f() {
        if (j == null) goto _L2; else goto _L1
_L1:
        if (!k) goto _L4; else goto _L3
_L3:
        j();
_L2:
        m();
        c.write("null");
_L6:
        return this;
_L4:
        j = null;
        if (true) goto _L6; else goto _L5
_L5:
    }

    public void flush() {
        if (e == 0) {
            throw new IllegalStateException("JsonWriter is closed.");
        } else {
            c.flush();
            return;
        }
    }

    public boolean g() {
        return h;
    }

    public final boolean h() {
        return i;
    }

    public final boolean i() {
        return k;
    }

    static  {
        a = new String[128];
        for (int i1 = 0; i1 <= 31; i1++)
            a[i1] = String.format("\\u%04x", new Object[] {
                Integer.valueOf(i1)
            });

        a[34] = "\\\"";
        a[92] = "\\\\";
        a[9] = "\\t";
        a[8] = "\\b";
        a[10] = "\\n";
        a[13] = "\\r";
        a[12] = "\\f";
        b = (String[])a.clone();
        b[60] = "\\u003c";
        b[62] = "\\u003e";
        b[38] = "\\u0026";
        b[61] = "\\u003d";
        b[39] = "\\u0027";
    }
}
