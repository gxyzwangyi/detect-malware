// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.gson.internal;

import com.google.gson.JsonIOException;
import com.google.gson.b.a;
import com.google.gson.f;
import java.lang.reflect.*;
import java.util.*;
import java.util.concurrent.*;

// Referenced classes of package com.google.gson.internal:
//            d, LinkedTreeMap, g

public final class b {

    private final Map a;

    public b(Map map) {
        a = map;
    }

    private d a(Class class1) {
        try {
            Constructor constructor = class1.getDeclaredConstructor(new Class[0]);
            if (!constructor.isAccessible())
                constructor.setAccessible(true);
            class1 = JVM INSTR new #30  <Class b$8>;
            class1.this. _cls8(constructor);
        }
        // Misplaced declaration of an exception variable
        catch (Class class1) {
            class1 = null;
        }
        return class1;
    }

    private d a(Type type, Class class1) {
        if (java/util/Collection.isAssignableFrom(class1)) {
            if (java/util/SortedSet.isAssignableFrom(class1))
                type = new d() {

                    final b a;

                    public Object a() {
                        return new TreeSet();
                    }

             {
                a = b.this;
                super();
            }
                }
;
            else
            if (java/util/EnumSet.isAssignableFrom(class1))
                type = new d(type) {

                    final Type a;
                    final b b;

                    public Object a() {
                        if (a instanceof ParameterizedType) {
                            Type type1 = ((ParameterizedType)a).getActualTypeArguments()[0];
                            if (type1 instanceof Class)
                                return EnumSet.noneOf((Class)type1);
                            else
                                throw new JsonIOException((new StringBuilder()).append("Invalid EnumSet type: ").append(a.toString()).toString());
                        } else {
                            throw new JsonIOException((new StringBuilder()).append("Invalid EnumSet type: ").append(a.toString()).toString());
                        }
                    }

             {
                b = b.this;
                a = type;
                super();
            }
                }
;
            else
            if (java/util/Set.isAssignableFrom(class1))
                type = new d() {

                    final b a;

                    public Object a() {
                        return new LinkedHashSet();
                    }

             {
                a = b.this;
                super();
            }
                }
;
            else
            if (java/util/Queue.isAssignableFrom(class1))
                type = new d() {

                    final b a;

                    public Object a() {
                        return new ArrayDeque();
                    }

             {
                a = b.this;
                super();
            }
                }
;
            else
                type = new d() {

                    final b a;

                    public Object a() {
                        return new ArrayList();
                    }

             {
                a = b.this;
                super();
            }
                }
;
        } else
        if (java/util/Map.isAssignableFrom(class1)) {
            if (java/util/concurrent/ConcurrentNavigableMap.isAssignableFrom(class1))
                type = new d() {

                    final b a;

                    public Object a() {
                        return new ConcurrentSkipListMap();
                    }

             {
                a = b.this;
                super();
            }
                }
;
            else
            if (java/util/concurrent/ConcurrentMap.isAssignableFrom(class1))
                type = new d() {

                    final b a;

                    public Object a() {
                        return new ConcurrentHashMap();
                    }

             {
                a = b.this;
                super();
            }
                }
;
            else
            if (java/util/SortedMap.isAssignableFrom(class1))
                type = new d() {

                    final b a;

                    public Object a() {
                        return new TreeMap();
                    }

             {
                a = b.this;
                super();
            }
                }
;
            else
            if ((type instanceof ParameterizedType) && !java/lang/String.isAssignableFrom(com.google.gson.b.a.a(((ParameterizedType)type).getActualTypeArguments()[0]).a()))
                type = new d() {

                    final b a;

                    public Object a() {
                        return new LinkedHashMap();
                    }

             {
                a = b.this;
                super();
            }
                }
;
            else
                type = new d() {

                    final b a;

                    public Object a() {
                        return new LinkedTreeMap();
                    }

             {
                a = b.this;
                super();
            }
                }
;
        } else {
            type = null;
        }
        return type;
    }

    private d b(Type type, Class class1) {
        return new d(class1, type) {

            final Class a;
            final Type b;
            final b c;
            private final g d = com.google.gson.internal.g.a();

            public Object a() {
                Object obj;
                try {
                    obj = d.a(a);
                }
                catch (Exception exception) {
                    throw new RuntimeException((new StringBuilder()).append("Unable to invoke no-args constructor for ").append(b).append(". ").append("Register an InstanceCreator with Gson for this type may fix this problem.").toString(), exception);
                }
                return obj;
            }

             {
                c = b.this;
                a = class1;
                b = type;
                super();
            }
        }
;
    }

    public d a(a a1) {
        Type type;
        Class class1;
        type = a1.b();
        class1 = a1.a();
        a1 = (f)a.get(type);
        if (a1 == null) goto _L2; else goto _L1
_L1:
        a1 = new d(a1, type) {

            final f a;
            final Type b;
            final b c;

            public Object a() {
                return a.a(b);
            }

             {
                c = b.this;
                a = f1;
                b = type;
                super();
            }
        }
;
_L4:
        return a1;
_L2:
        a1 = (f)a.get(class1);
        if (a1 != null) {
            a1 = new d(a1, type) {

                final f a;
                final Type b;
                final b c;

                public Object a() {
                    return a.a(b);
                }

             {
                c = b.this;
                a = f1;
                b = type;
                super();
            }
            }
;
        } else {
            d d = a(class1);
            a1 = d;
            if (d == null) {
                d d1 = a(type, class1);
                a1 = d1;
                if (d1 == null)
                    a1 = b(type, class1);
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public String toString() {
        return a.toString();
    }

    // Unreferenced inner class com/google/gson/internal/b$8

/* anonymous class */
    class _cls8
        implements d {

        final Constructor a;
        final b b;

        public Object a() {
            Object obj;
            try {
                obj = a.newInstance(null);
            }
            catch (InstantiationException instantiationexception) {
                throw new RuntimeException((new StringBuilder()).append("Failed to invoke ").append(a).append(" with no args").toString(), instantiationexception);
            }
            catch (InvocationTargetException invocationtargetexception) {
                throw new RuntimeException((new StringBuilder()).append("Failed to invoke ").append(a).append(" with no args").toString(), invocationtargetexception.getTargetException());
            }
            catch (IllegalAccessException illegalaccessexception) {
                throw new AssertionError(illegalaccessexception);
            }
            return obj;
        }

             {
                b = b.this;
                a = constructor;
                super();
            }
    }

}
