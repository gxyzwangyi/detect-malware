// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.gson.internal.bind;

import com.google.gson.JsonSyntaxException;
import com.google.gson.b.a;
import com.google.gson.d;
import com.google.gson.internal.b;
import com.google.gson.internal.c;
import com.google.gson.internal.f;
import com.google.gson.j;
import com.google.gson.n;
import com.google.gson.q;
import com.google.gson.r;
import com.google.gson.stream.JsonToken;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

// Referenced classes of package com.google.gson.internal.bind:
//            i, h

public final class MapTypeAdapterFactory
    implements r {
    private final class a extends q {

        final MapTypeAdapterFactory a;
        private final q b;
        private final q c;
        private final com.google.gson.internal.d d;

        private String a(j j1) {
            if (j1.i()) {
                j1 = j1.m();
                if (j1.p())
                    j1 = String.valueOf(j1.a());
                else
                if (j1.o())
                    j1 = Boolean.toString(j1.f());
                else
                if (j1.q())
                    j1 = j1.b();
                else
                    throw new AssertionError();
            } else
            if (j1.j())
                j1 = "null";
            else
                throw new AssertionError();
            return j1;
        }

        public Map a(com.google.gson.stream.a a1) {
            JsonToken jsontoken = a1.f();
            if (jsontoken != JsonToken.i) goto _L2; else goto _L1
_L1:
            a1.j();
            a1 = null;
_L4:
            return a1;
_L2:
            Map map = (Map)d.a();
            if (jsontoken == JsonToken.a) {
                a1.a();
                for (; a1.e(); a1.b()) {
                    a1.a();
                    Object obj = b.b(a1);
                    if (map.put(obj, c.b(a1)) != null)
                        throw new JsonSyntaxException((new StringBuilder()).append("duplicate key: ").append(obj).toString());
                }

                a1.b();
                a1 = map;
                continue; /* Loop/switch isn't completed */
            }
            a1.c();
            while (a1.e())  {
                c.a.a(a1);
                Object obj1 = b.b(a1);
                if (map.put(obj1, c.b(a1)) != null)
                    throw new JsonSyntaxException((new StringBuilder()).append("duplicate key: ").append(obj1).toString());
            }
            a1.d();
            a1 = map;
            if (true) goto _L4; else goto _L3
_L3:
        }

        public volatile void a(com.google.gson.stream.b b1, Object obj) {
            a(b1, (Map)obj);
        }

        public void a(com.google.gson.stream.b b1, Map map) {
            boolean flag3 = false;
            boolean flag2 = false;
            if (map == null)
                b1.f();
            else
            if (!a.a) {
                b1.d();
                for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext(); c.a(b1, map.getValue())) {
                    map = (java.util.Map.Entry)iterator.next();
                    b1.a(String.valueOf(map.getKey()));
                }

                b1.e();
            } else {
                ArrayList arraylist = new ArrayList(map.size());
                ArrayList arraylist1 = new ArrayList(map.size());
                map = map.entrySet().iterator();
                boolean flag = false;
                while (map.hasNext())  {
                    java.util.Map.Entry entry = (java.util.Map.Entry)map.next();
                    j j1 = b.a(entry.getKey());
                    arraylist.add(j1);
                    arraylist1.add(entry.getValue());
                    boolean flag1;
                    if (j1.g() || j1.h())
                        flag1 = true;
                    else
                        flag1 = false;
                    flag = flag1 | flag;
                }
                if (flag) {
                    b1.b();
                    for (int k = ((flag2) ? 1 : 0); k < arraylist.size(); k++) {
                        b1.b();
                        f.a((j)arraylist.get(k), b1);
                        c.a(b1, arraylist1.get(k));
                        b1.c();
                    }

                    b1.c();
                } else {
                    b1.d();
                    for (int l = ((flag3) ? 1 : 0); l < arraylist.size(); l++) {
                        b1.a(a((j)arraylist.get(l)));
                        c.a(b1, arraylist1.get(l));
                    }

                    b1.e();
                }
            }
        }

        public Object b(com.google.gson.stream.a a1) {
            return a(a1);
        }

        public a(d d1, Type type, q q1, Type type1, q q2, com.google.gson.internal.d d2) {
            a = MapTypeAdapterFactory.this;
            super();
            b = new h(d1, q1, type);
            c = new h(d1, q2, type1);
            d = d2;
        }
    }


    final boolean a;
    private final b b;

    public MapTypeAdapterFactory(b b1, boolean flag) {
        b = b1;
        a = flag;
    }

    private q a(d d1, Type type) {
        if (type == Boolean.TYPE || type == java/lang/Boolean)
            d1 = com.google.gson.internal.bind.i.f;
        else
            d1 = d1.a(com.google.gson.b.a.a(type));
        return d1;
    }

    public q a(d d1, com.google.gson.b.a a1) {
        Type type = a1.b();
        if (!java/util/Map.isAssignableFrom(a1.a())) {
            d1 = null;
        } else {
            Type atype[] = com.google.gson.internal..Gson.Types.b(type, com.google.gson.internal..Gson.Types.e(type));
            q q1 = a(d1, atype[0]);
            q q = d1.a(com.google.gson.b.a.a(atype[1]));
            a1 = b.a(a1);
            d1 = new a(d1, atype[0], q1, atype[1], q, a1);
        }
        return d1;
    }
}
