// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.gson.internal.bind.a;

import java.text.ParseException;
import java.text.ParsePosition;
import java.util.*;

public class a {

    private static final TimeZone a = TimeZone.getTimeZone("UTC");

    private static int a(String s, int i) {
_L5:
        int j;
        char c;
        if (i >= s.length())
            break MISSING_BLOCK_LABEL_38;
        c = s.charAt(i);
        j = i;
        if (c < '0') goto _L2; else goto _L1
_L1:
        if (c <= '9') goto _L4; else goto _L3
_L3:
        j = i;
_L2:
        return j;
_L4:
        i++;
          goto _L5
        j = s.length();
          goto _L2
    }

    private static int a(String s, int i, int j) {
        if (i < 0 || j > s.length() || i > j)
            throw new NumberFormatException(s);
        int l = 0;
        int k;
        if (i < j) {
            k = i + 1;
            l = Character.digit(s.charAt(i), 10);
            if (l < 0)
                throw new NumberFormatException((new StringBuilder()).append("Invalid number: ").append(s.substring(i, j)).toString());
            l = -l;
        } else {
            k = i;
        }
        for (; k < j; k++) {
            int i1 = Character.digit(s.charAt(k), 10);
            if (i1 < 0)
                throw new NumberFormatException((new StringBuilder()).append("Invalid number: ").append(s.substring(i, j)).toString());
            l = l * 10 - i1;
        }

        return -l;
    }

    public static Date a(String s, ParsePosition parseposition) {
        int k = parseposition.getIndex();
        int i = k + 4;
        int l1 = a(s, k, i);
        if (a(s, i, '-'))
            i++;
        k = i + 2;
        int i2 = a(s, i, k);
        char c;
        int j;
        int l;
        int i1;
        int j1;
        int k1;
        int j2;
        int k2;
        boolean flag;
        Object obj;
        Object obj1;
        Object obj2;
        String s1;
        Object obj3;
        if (a(s, k, '-'))
            j = k + 1;
        else
            j = k;
        k = j + 2;
        j2 = a(s, j, k);
        flag = a(s, k, 'T');
        if (flag) goto _L2; else goto _L1
_L1:
        if (s.length() > k) goto _L2; else goto _L3
_L3:
        obj = JVM INSTR new #78  <Class GregorianCalendar>;
        ((GregorianCalendar) (obj)).GregorianCalendar(l1, i2 - 1, j2);
        parseposition.setIndex(k);
        obj = ((Calendar) (obj)).getTime();
        s = ((String) (obj));
_L15:
        return s;
_L2:
        if (!flag)
            break MISSING_BLOCK_LABEL_1023;
        j = ++k + 2;
        i1 = a(s, k, j);
        if (a(s, j, ':'))
            j++;
        j1 = j + 2;
        l = a(s, j, j1);
        k = j1;
        if (a(s, j1, ':'))
            k = j1 + 1;
        if (s.length() <= k) goto _L5; else goto _L4
_L4:
        j = s.charAt(k);
        if (j == 'Z' || j == '+' || j == '-') goto _L5; else goto _L6
_L6:
        k1 = k + 2;
        k = a(s, k, k1);
        j = k;
        if (k > 59) {
            j = k;
            if (k < 63)
                j = 59;
        }
        if (!a(s, k1, '.')) goto _L8; else goto _L7
_L7:
        k2 = k1 + 1;
        k1 = a(s, k2 + 1);
        j1 = Math.min(k1, k2 + 3);
        k = a(s, k2, j1);
        j1 - k2;
        JVM INSTR tableswitch 1 2: default 356
    //                   1 523
    //                   2 513;
           goto _L9 _L10 _L11
_L9:
        j1 = i1;
        i1 = l;
        l = j;
        j = k;
        k = k1;
_L21:
        if (s.length() <= k) {
            obj = JVM INSTR new #66  <Class IllegalArgumentException>;
            ((IllegalArgumentException) (obj)).IllegalArgumentException("No time zone indicator");
            throw obj;
        }
          goto _L12
        obj1;
_L20:
label0:
        {
            if (s == null)
                s = null;
            else
                s = (new StringBuilder()).append('"').append(s).append("'").toString();
            s1 = ((Exception) (obj1)).getMessage();
            if (s1 != null) {
                obj2 = s1;
                if (!s1.isEmpty())
                    break label0;
            }
            obj2 = (new StringBuilder()).append("(").append(obj1.getClass().getName()).append(")").toString();
        }
        s = new ParseException((new StringBuilder()).append("Failed to parse date [").append(s).append("]: ").append(((String) (obj2))).toString(), parseposition.getIndex());
        s.initCause(((Throwable) (obj1)));
        throw s;
_L11:
        k *= 10;
          goto _L9
_L10:
        k *= 100;
          goto _L9
_L12:
        c = s.charAt(k);
        if (c != 'Z') goto _L14; else goto _L13
_L13:
        obj1 = a;
        k++;
_L16:
        obj2 = JVM INSTR new #78  <Class GregorianCalendar>;
        ((GregorianCalendar) (obj2)).GregorianCalendar(((TimeZone) (obj1)));
        ((Calendar) (obj2)).setLenient(false);
        ((Calendar) (obj2)).set(1, l1);
        ((Calendar) (obj2)).set(2, i2 - 1);
        ((Calendar) (obj2)).set(5, j2);
        ((Calendar) (obj2)).set(11, j1);
        ((Calendar) (obj2)).set(12, i1);
        ((Calendar) (obj2)).set(13, l);
        ((Calendar) (obj2)).set(14, j);
        parseposition.setIndex(k);
        obj1 = ((Calendar) (obj2)).getTime();
        s = ((String) (obj1));
          goto _L15
_L14:
        if (c != '+' && c != '-')
            break MISSING_BLOCK_LABEL_893;
        obj1 = s.substring(k);
        if (((String) (obj1)).length() < 5)
            break MISSING_BLOCK_LABEL_723;
_L17:
        k1 = k + ((String) (obj1)).length();
        if (!"+0000".equals(obj1) && !"+00:00".equals(obj1))
            break MISSING_BLOCK_LABEL_753;
        obj1 = a;
        k = k1;
          goto _L16
        obj2 = JVM INSTR new #45  <Class StringBuilder>;
        ((StringBuilder) (obj2)).StringBuilder();
        obj1 = ((StringBuilder) (obj2)).append(((String) (obj1))).append("00").toString();
          goto _L17
        obj2 = JVM INSTR new #45  <Class StringBuilder>;
        ((StringBuilder) (obj2)).StringBuilder();
        s1 = ((StringBuilder) (obj2)).append("GMT").append(((String) (obj1))).toString();
        obj2 = TimeZone.getTimeZone(s1);
        obj3 = ((TimeZone) (obj2)).getID();
        obj1 = obj2;
        k = k1;
        if (((String) (obj3)).equals(s1)) goto _L16; else goto _L18
_L18:
        obj1 = obj2;
        k = k1;
        if (((String) (obj3)).replace(":", "").equals(s1)) goto _L16; else goto _L19
_L19:
        obj3 = JVM INSTR new #64  <Class IndexOutOfBoundsException>;
        obj1 = JVM INSTR new #45  <Class StringBuilder>;
        ((StringBuilder) (obj1)).StringBuilder();
        ((IndexOutOfBoundsException) (obj3)).IndexOutOfBoundsException(((StringBuilder) (obj1)).append("Mismatching time zone indicator: ").append(s1).append(" given, resolves to ").append(((TimeZone) (obj2)).getID()).toString());
        throw obj3;
        obj1;
          goto _L20
        obj2 = JVM INSTR new #64  <Class IndexOutOfBoundsException>;
        obj1 = JVM INSTR new #45  <Class StringBuilder>;
        ((StringBuilder) (obj1)).StringBuilder();
        ((IndexOutOfBoundsException) (obj2)).IndexOutOfBoundsException(((StringBuilder) (obj1)).append("Invalid time zone indicator '").append(c).append("'").toString());
        throw obj2;
        obj1;
          goto _L20
_L8:
        j1 = i1;
        i1 = j;
        k = k1;
        k1 = l;
        j = 0;
        l = i1;
        i1 = k1;
          goto _L21
_L5:
        j1 = l;
        k1 = i1;
        j = 0;
        l = 0;
        i1 = j1;
        j1 = k1;
          goto _L21
        j = 0;
        l = 0;
        i1 = 0;
        j1 = 0;
          goto _L21
    }

    private static boolean a(String s, int i, char c) {
        boolean flag;
        if (i < s.length() && s.charAt(i) == c)
            flag = true;
        else
            flag = false;
        return flag;
    }

}
