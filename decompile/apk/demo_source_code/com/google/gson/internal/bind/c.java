// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.gson.internal.bind;

import com.google.gson.*;
import com.google.gson.stream.JsonToken;
import com.google.gson.stream.a;
import java.io.Reader;
import java.util.Iterator;
import java.util.Set;

public final class c extends a {

    private static final Reader b = new Reader() {

        public void close() {
            throw new AssertionError();
        }

        public int read(char ac[], int i1, int j1) {
            throw new AssertionError();
        }

    }
;
    private static final Object c = new Object();
    private Object d[];
    private int e;
    private String f[];
    private int g[];

    private void a(JsonToken jsontoken) {
        if (f() != jsontoken)
            throw new IllegalStateException((new StringBuilder()).append("Expected ").append(jsontoken).append(" but was ").append(f()).append(u()).toString());
        else
            return;
    }

    private void a(Object obj) {
        if (e == d.length) {
            Object aobj1[] = new Object[e * 2];
            int ai[] = new int[e * 2];
            String as[] = new String[e * 2];
            System.arraycopy(((Object) (d)), 0, ((Object) (aobj1)), 0, e);
            System.arraycopy(g, 0, ai, 0, e);
            System.arraycopy(f, 0, as, 0, e);
            d = aobj1;
            g = ai;
            f = as;
        }
        Object aobj[] = d;
        int i1 = e;
        e = i1 + 1;
        aobj[i1] = obj;
    }

    private Object s() {
        return d[e - 1];
    }

    private Object t() {
        Object aobj[] = d;
        int i1 = e - 1;
        e = i1;
        Object obj = aobj[i1];
        d[e] = null;
        return obj;
    }

    private String u() {
        return (new StringBuilder()).append(" at path ").append(p()).toString();
    }

    public void a() {
        a(JsonToken.a);
        a(((g)s()).iterator());
        g[e - 1] = 0;
    }

    public void b() {
        a(JsonToken.b);
        t();
        t();
        if (e > 0) {
            int ai[] = g;
            int i1 = e - 1;
            ai[i1] = ai[i1] + 1;
        }
    }

    public void c() {
        a(JsonToken.c);
        a(((l)s()).o().iterator());
    }

    public void close() {
        d = (new Object[] {
            c
        });
        e = 1;
    }

    public void d() {
        a(JsonToken.d);
        t();
        t();
        if (e > 0) {
            int ai[] = g;
            int i1 = e - 1;
            ai[i1] = ai[i1] + 1;
        }
    }

    public boolean e() {
        JsonToken jsontoken = f();
        boolean flag;
        if (jsontoken != JsonToken.d && jsontoken != JsonToken.b)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public JsonToken f() {
        if (e != 0) goto _L2; else goto _L1
_L1:
        Object obj = JsonToken.j;
_L4:
        return ((JsonToken) (obj));
_L2:
        obj = s();
        if (obj instanceof Iterator) {
            boolean flag = d[e - 2] instanceof l;
            obj = (Iterator)obj;
            if (((Iterator) (obj)).hasNext()) {
                if (flag) {
                    obj = JsonToken.e;
                } else {
                    a(((Iterator) (obj)).next());
                    obj = f();
                }
            } else
            if (flag)
                obj = JsonToken.d;
            else
                obj = JsonToken.b;
            continue; /* Loop/switch isn't completed */
        }
        if (obj instanceof l) {
            obj = JsonToken.c;
            continue; /* Loop/switch isn't completed */
        }
        if (obj instanceof g) {
            obj = JsonToken.a;
            continue; /* Loop/switch isn't completed */
        }
        if (obj instanceof n) {
            obj = (n)obj;
            if (((n) (obj)).q())
                obj = JsonToken.f;
            else
            if (((n) (obj)).o())
                obj = JsonToken.h;
            else
            if (((n) (obj)).p())
                obj = JsonToken.g;
            else
                throw new AssertionError();
            continue; /* Loop/switch isn't completed */
        }
        if (!(obj instanceof k))
            break; /* Loop/switch isn't completed */
        obj = JsonToken.i;
        if (true) goto _L4; else goto _L3
_L3:
        if (obj == c)
            throw new IllegalStateException("JsonReader is closed");
        else
            throw new AssertionError();
    }

    public String g() {
        a(JsonToken.e);
        java.util.Map.Entry entry = (java.util.Map.Entry)((Iterator)s()).next();
        String s1 = (String)entry.getKey();
        f[e - 1] = s1;
        a(entry.getValue());
        return s1;
    }

    public String h() {
        JsonToken jsontoken = f();
        if (jsontoken != JsonToken.f && jsontoken != JsonToken.g)
            throw new IllegalStateException((new StringBuilder()).append("Expected ").append(JsonToken.f).append(" but was ").append(jsontoken).append(u()).toString());
        String s1 = ((n)t()).b();
        if (e > 0) {
            int ai[] = g;
            int i1 = e - 1;
            ai[i1] = ai[i1] + 1;
        }
        return s1;
    }

    public boolean i() {
        a(JsonToken.h);
        boolean flag = ((n)t()).f();
        if (e > 0) {
            int ai[] = g;
            int i1 = e - 1;
            ai[i1] = ai[i1] + 1;
        }
        return flag;
    }

    public void j() {
        a(JsonToken.i);
        t();
        if (e > 0) {
            int ai[] = g;
            int i1 = e - 1;
            ai[i1] = ai[i1] + 1;
        }
    }

    public double k() {
        JsonToken jsontoken = f();
        if (jsontoken != JsonToken.g && jsontoken != JsonToken.f)
            throw new IllegalStateException((new StringBuilder()).append("Expected ").append(JsonToken.g).append(" but was ").append(jsontoken).append(u()).toString());
        double d1 = ((n)s()).c();
        if (!q() && (Double.isNaN(d1) || Double.isInfinite(d1)))
            throw new NumberFormatException((new StringBuilder()).append("JSON forbids NaN and infinities: ").append(d1).toString());
        t();
        if (e > 0) {
            int ai[] = g;
            int i1 = e - 1;
            ai[i1] = ai[i1] + 1;
        }
        return d1;
    }

    public long l() {
        JsonToken jsontoken = f();
        if (jsontoken != JsonToken.g && jsontoken != JsonToken.f)
            throw new IllegalStateException((new StringBuilder()).append("Expected ").append(JsonToken.g).append(" but was ").append(jsontoken).append(u()).toString());
        long l1 = ((n)s()).d();
        t();
        if (e > 0) {
            int ai[] = g;
            int i1 = e - 1;
            ai[i1] = ai[i1] + 1;
        }
        return l1;
    }

    public int m() {
        JsonToken jsontoken = f();
        if (jsontoken != JsonToken.g && jsontoken != JsonToken.f)
            throw new IllegalStateException((new StringBuilder()).append("Expected ").append(JsonToken.g).append(" but was ").append(jsontoken).append(u()).toString());
        int j1 = ((n)s()).e();
        t();
        if (e > 0) {
            int ai[] = g;
            int i1 = e - 1;
            ai[i1] = ai[i1] + 1;
        }
        return j1;
    }

    public void n() {
        int i1;
        int ai[];
        if (f() == JsonToken.e) {
            g();
            f[e - 2] = "null";
        } else {
            t();
            f[e - 1] = "null";
        }
        ai = g;
        i1 = e - 1;
        ai[i1] = ai[i1] + 1;
    }

    public void o() {
        a(JsonToken.e);
        java.util.Map.Entry entry = (java.util.Map.Entry)((Iterator)s()).next();
        a(entry.getValue());
        a(new n((String)entry.getKey()));
    }

    public String p() {
        StringBuilder stringbuilder = (new StringBuilder()).append('$');
        int j1 = 0;
        while (j1 < e)  {
            int i1;
            if (d[j1] instanceof g) {
                Object aobj[] = d;
                i1 = ++j1;
                if (aobj[j1] instanceof Iterator) {
                    stringbuilder.append('[').append(g[j1]).append(']');
                    i1 = j1;
                }
            } else {
                i1 = j1;
                if (d[j1] instanceof l) {
                    Object aobj1[] = d;
                    i1 = ++j1;
                    if (aobj1[j1] instanceof Iterator) {
                        stringbuilder.append('.');
                        i1 = j1;
                        if (f[j1] != null) {
                            stringbuilder.append(f[j1]);
                            i1 = j1;
                        }
                    }
                }
            }
            j1 = i1 + 1;
        }
        return stringbuilder.toString();
    }

    public String toString() {
        return getClass().getSimpleName();
    }

}
