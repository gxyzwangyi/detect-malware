// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.gson.internal.bind;

import com.google.gson.JsonIOException;
import com.google.gson.JsonSyntaxException;
import com.google.gson.a.c;
import com.google.gson.d;
import com.google.gson.g;
import com.google.gson.internal.LazilyParsedNumber;
import com.google.gson.j;
import com.google.gson.k;
import com.google.gson.l;
import com.google.gson.n;
import com.google.gson.q;
import com.google.gson.r;
import com.google.gson.stream.JsonToken;
import com.google.gson.stream.b;
import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.InetAddress;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Currency;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicIntegerArray;

public final class i {
    private static final class a extends q {

        private final Map a;
        private final Map b;

        public Enum a(com.google.gson.stream.a a1) {
            if (a1.f() == JsonToken.i) {
                a1.j();
                a1 = null;
            } else {
                a1 = (Enum)a.get(a1.h());
            }
            return a1;
        }

        public void a(b b1, Enum enum) {
            if (enum == null)
                enum = null;
            else
                enum = (String)b.get(enum);
            b1.b(enum);
        }

        public volatile void a(b b1, Object obj) {
            a(b1, (Enum)obj);
        }

        public Object b(com.google.gson.stream.a a1) {
            return a(a1);
        }

        public a(Class class1) {
            a = new HashMap();
            b = new HashMap();
            int i1;
            int j1;
            int k1;
            int l1;
            String s1;
            String s2;
            Enum enum;
            Enum aenum[];
            c c1;
            String as[];
            try {
                aenum = (Enum[])class1.getEnumConstants();
                k1 = aenum.length;
            }
            // Misplaced declaration of an exception variable
            catch (Class class1) {
                throw new AssertionError(class1);
            }
            i1 = 0;
            if (i1 >= k1)
                break; /* Loop/switch isn't completed */
            enum = aenum[i1];
            s1 = enum.name();
            c1 = (c)class1.getField(s1).getAnnotation(com/google/gson/a/c);
            if (c1 == null) goto _L2; else goto _L1
_L1:
            s2 = c1.a();
            as = c1.b();
            l1 = as.length;
            j1 = 0;
_L3:
            s1 = s2;
            if (j1 >= l1)
                break; /* Loop/switch isn't completed */
            s1 = as[j1];
            a.put(s1, enum);
            j1++;
            if (true) goto _L3; else goto _L2
_L2:
            a.put(s1, enum);
            b.put(enum, s1);
            i1++;
            if (true) goto _L5; else goto _L4
_L5:
            break MISSING_BLOCK_LABEL_42;
_L4:
        }
    }


    public static final q A;
    public static final q B = new q() {

        public BigDecimal a(com.google.gson.stream.a a1) {
            if (a1.f() == JsonToken.i) {
                a1.j();
                a1 = null;
            } else {
                try {
                    a1 = new BigDecimal(a1.h());
                }
                // Misplaced declaration of an exception variable
                catch (com.google.gson.stream.a a1) {
                    throw new JsonSyntaxException(a1);
                }
            }
            return a1;
        }

        public volatile void a(b b1, Object obj) {
            a(b1, (BigDecimal)obj);
        }

        public void a(b b1, BigDecimal bigdecimal) {
            b1.a(bigdecimal);
        }

        public Object b(com.google.gson.stream.a a1) {
            return a(a1);
        }

    }
;
    public static final q C = new q() {

        public BigInteger a(com.google.gson.stream.a a1) {
            if (a1.f() == JsonToken.i) {
                a1.j();
                a1 = null;
            } else {
                try {
                    a1 = new BigInteger(a1.h());
                }
                // Misplaced declaration of an exception variable
                catch (com.google.gson.stream.a a1) {
                    throw new JsonSyntaxException(a1);
                }
            }
            return a1;
        }

        public volatile void a(b b1, Object obj) {
            a(b1, (BigInteger)obj);
        }

        public void a(b b1, BigInteger biginteger) {
            b1.a(biginteger);
        }

        public Object b(com.google.gson.stream.a a1) {
            return a(a1);
        }

    }
;
    public static final r D;
    public static final q E;
    public static final r F;
    public static final q G;
    public static final r H;
    public static final q I;
    public static final r J;
    public static final q K;
    public static final r L;
    public static final q M;
    public static final r N;
    public static final q O;
    public static final r P;
    public static final q Q;
    public static final r R;
    public static final r S = new TypeAdapters._cls26();
    public static final q T;
    public static final r U;
    public static final q V;
    public static final r W;
    public static final q X;
    public static final r Y;
    public static final r Z = new TypeAdapters._cls30();
    public static final q a;
    public static final r b;
    public static final q c;
    public static final r d;
    public static final q e;
    public static final q f = new q() {

        public Boolean a(com.google.gson.stream.a a1) {
            if (a1.f() == JsonToken.i) {
                a1.j();
                a1 = null;
            } else {
                a1 = Boolean.valueOf(a1.h());
            }
            return a1;
        }

        public void a(b b1, Boolean boolean1) {
            if (boolean1 == null)
                boolean1 = "null";
            else
                boolean1 = boolean1.toString();
            b1.b(boolean1);
        }

        public volatile void a(b b1, Object obj) {
            a(b1, (Boolean)obj);
        }

        public Object b(com.google.gson.stream.a a1) {
            return a(a1);
        }

    }
;
    public static final r g;
    public static final q h;
    public static final r i;
    public static final q j;
    public static final r k;
    public static final q l;
    public static final r m;
    public static final q n;
    public static final r o;
    public static final q p;
    public static final r q;
    public static final q r;
    public static final r s;
    public static final q t = new q() {

        public Number a(com.google.gson.stream.a a1) {
            if (a1.f() == JsonToken.i) {
                a1.j();
                a1 = null;
            } else {
                long l1;
                try {
                    l1 = a1.l();
                }
                // Misplaced declaration of an exception variable
                catch (com.google.gson.stream.a a1) {
                    throw new JsonSyntaxException(a1);
                }
                a1 = Long.valueOf(l1);
            }
            return a1;
        }

        public void a(b b1, Number number) {
            b1.a(number);
        }

        public volatile void a(b b1, Object obj) {
            a(b1, (Number)obj);
        }

        public Object b(com.google.gson.stream.a a1) {
            return a(a1);
        }

    }
;
    public static final q u = new q() {

        public Number a(com.google.gson.stream.a a1) {
            if (a1.f() == JsonToken.i) {
                a1.j();
                a1 = null;
            } else {
                a1 = Float.valueOf((float)a1.k());
            }
            return a1;
        }

        public void a(b b1, Number number) {
            b1.a(number);
        }

        public volatile void a(b b1, Object obj) {
            a(b1, (Number)obj);
        }

        public Object b(com.google.gson.stream.a a1) {
            return a(a1);
        }

    }
;
    public static final q v = new q() {

        public Number a(com.google.gson.stream.a a1) {
            if (a1.f() == JsonToken.i) {
                a1.j();
                a1 = null;
            } else {
                a1 = Double.valueOf(a1.k());
            }
            return a1;
        }

        public void a(b b1, Number number) {
            b1.a(number);
        }

        public volatile void a(b b1, Object obj) {
            a(b1, (Number)obj);
        }

        public Object b(com.google.gson.stream.a a1) {
            return a(a1);
        }

    }
;
    public static final q w;
    public static final r x;
    public static final q y;
    public static final r z;

    public static r a(Class class1, q q1) {
        return new TypeAdapters._cls32(class1, q1);
    }

    public static r a(Class class1, Class class2, q q1) {
        return new TypeAdapters._cls33(class1, class2, q1);
    }

    public static r b(Class class1, q q1) {
        return new TypeAdapters._cls35(class1, q1);
    }

    public static r b(Class class1, Class class2, q q1) {
        return new TypeAdapters._cls34(class1, class2, q1);
    }

    static  {
        a = new q() {

            public Class a(com.google.gson.stream.a a1) {
                if (a1.f() == JsonToken.i) {
                    a1.j();
                    return null;
                } else {
                    throw new UnsupportedOperationException("Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?");
                }
            }

            public void a(b b1, Class class1) {
                if (class1 == null) {
                    b1.f();
                    return;
                } else {
                    throw new UnsupportedOperationException((new StringBuilder()).append("Attempted to serialize java.lang.Class: ").append(class1.getName()).append(". Forgot to register a type adapter?").toString());
                }
            }

            public volatile void a(b b1, Object obj) {
                a(b1, (Class)obj);
            }

            public Object b(com.google.gson.stream.a a1) {
                return a(a1);
            }

        }
;
        b = a(java/lang/Class, a);
        c = new q() {

            public BitSet a(com.google.gson.stream.a a1) {
                if (a1.f() != JsonToken.i) goto _L2; else goto _L1
_L1:
                a1.j();
                a1 = null;
_L7:
                return a1;
_L2:
                int i1;
                JsonToken jsontoken;
                BitSet bitset;
                bitset = new BitSet();
                a1.a();
                jsontoken = a1.f();
                i1 = 0;
_L4:
                boolean flag;
                if (jsontoken == JsonToken.b)
                    break MISSING_BLOCK_LABEL_217;
                static class _cls23 {

                    static final int a[];

                    static  {
                        a = new int[JsonToken.values().length];
                        NoSuchFieldError nosuchfielderror;
                        try {
                            a[JsonToken.g.ordinal()] = 1;
                        }
                        catch (NoSuchFieldError nosuchfielderror9) { }
                        try {
                            a[JsonToken.h.ordinal()] = 2;
                        }
                        catch (NoSuchFieldError nosuchfielderror8) { }
                        try {
                            a[JsonToken.f.ordinal()] = 3;
                        }
                        catch (NoSuchFieldError nosuchfielderror7) { }
                        try {
                            a[JsonToken.i.ordinal()] = 4;
                        }
                        catch (NoSuchFieldError nosuchfielderror6) { }
                        try {
                            a[JsonToken.a.ordinal()] = 5;
                        }
                        catch (NoSuchFieldError nosuchfielderror5) { }
                        try {
                            a[JsonToken.c.ordinal()] = 6;
                        }
                        catch (NoSuchFieldError nosuchfielderror4) { }
                        try {
                            a[JsonToken.j.ordinal()] = 7;
                        }
                        catch (NoSuchFieldError nosuchfielderror3) { }
                        try {
                            a[JsonToken.e.ordinal()] = 8;
                        }
                        catch (NoSuchFieldError nosuchfielderror2) { }
                        try {
                            a[JsonToken.d.ordinal()] = 9;
                        }
                        catch (NoSuchFieldError nosuchfielderror1) { }
                        a[JsonToken.b.ordinal()] = 10;
_L2:
                        return;
                        nosuchfielderror;
                        if (true) goto _L2; else goto _L1
_L1:
                    }
                }

                switch (_cls23.a[jsontoken.ordinal()]) {
                default:
                    throw new JsonSyntaxException((new StringBuilder()).append("Invalid bitset value type: ").append(jsontoken).toString());

                case 2: // '\002'
                    break; /* Loop/switch isn't completed */

                case 3: // '\003'
                    break MISSING_BLOCK_LABEL_160;

                case 1: // '\001'
                    if (a1.m() != 0)
                        flag = true;
                    else
                        flag = false;
                    break;
                }
_L5:
                if (flag)
                    bitset.set(i1);
                i1++;
                jsontoken = a1.f();
                if (true) goto _L4; else goto _L3
_L3:
                flag = a1.i();
                  goto _L5
                String s1 = a1.h();
                int j1;
                try {
                    j1 = Integer.parseInt(s1);
                }
                // Misplaced declaration of an exception variable
                catch (com.google.gson.stream.a a1) {
                    throw new JsonSyntaxException((new StringBuilder()).append("Error: Expecting: bitset number value (1, 0), Found: ").append(s1).toString());
                }
                if (j1 != 0)
                    flag = true;
                else
                    flag = false;
                  goto _L5
                a1.b();
                a1 = bitset;
                if (true) goto _L7; else goto _L6
_L6:
            }

            public volatile void a(b b1, Object obj) {
                a(b1, (BitSet)obj);
            }

            public void a(b b1, BitSet bitset) {
                if (bitset == null) {
                    b1.f();
                } else {
                    b1.b();
                    int i1 = 0;
                    while (i1 < bitset.length())  {
                        int j1;
                        if (bitset.get(i1))
                            j1 = 1;
                        else
                            j1 = 0;
                        b1.a(j1);
                        i1++;
                    }
                    b1.c();
                }
            }

            public Object b(com.google.gson.stream.a a1) {
                return a(a1);
            }

        }
;
        d = a(java/util/BitSet, c);
        e = new q() {

            public Boolean a(com.google.gson.stream.a a1) {
                if (a1.f() == JsonToken.i) {
                    a1.j();
                    a1 = null;
                } else
                if (a1.f() == JsonToken.f)
                    a1 = Boolean.valueOf(Boolean.parseBoolean(a1.h()));
                else
                    a1 = Boolean.valueOf(a1.i());
                return a1;
            }

            public void a(b b1, Boolean boolean1) {
                b1.a(boolean1);
            }

            public volatile void a(b b1, Object obj) {
                a(b1, (Boolean)obj);
            }

            public Object b(com.google.gson.stream.a a1) {
                return a(a1);
            }

        }
;
        g = a(Boolean.TYPE, java/lang/Boolean, e);
        h = new q() {

            public Number a(com.google.gson.stream.a a1) {
                if (a1.f() == JsonToken.i) {
                    a1.j();
                    a1 = null;
                } else {
                    byte byte0;
                    try {
                        byte0 = (byte)a1.m();
                    }
                    // Misplaced declaration of an exception variable
                    catch (com.google.gson.stream.a a1) {
                        throw new JsonSyntaxException(a1);
                    }
                    a1 = Byte.valueOf(byte0);
                }
                return a1;
            }

            public void a(b b1, Number number) {
                b1.a(number);
            }

            public volatile void a(b b1, Object obj) {
                a(b1, (Number)obj);
            }

            public Object b(com.google.gson.stream.a a1) {
                return a(a1);
            }

        }
;
        i = a(Byte.TYPE, java/lang/Byte, h);
        j = new q() {

            public Number a(com.google.gson.stream.a a1) {
                if (a1.f() == JsonToken.i) {
                    a1.j();
                    a1 = null;
                } else {
                    short word0;
                    try {
                        word0 = (short)a1.m();
                    }
                    // Misplaced declaration of an exception variable
                    catch (com.google.gson.stream.a a1) {
                        throw new JsonSyntaxException(a1);
                    }
                    a1 = Short.valueOf(word0);
                }
                return a1;
            }

            public void a(b b1, Number number) {
                b1.a(number);
            }

            public volatile void a(b b1, Object obj) {
                a(b1, (Number)obj);
            }

            public Object b(com.google.gson.stream.a a1) {
                return a(a1);
            }

        }
;
        k = a(Short.TYPE, java/lang/Short, j);
        l = new q() {

            public Number a(com.google.gson.stream.a a1) {
                if (a1.f() == JsonToken.i) {
                    a1.j();
                    a1 = null;
                } else {
                    int i1;
                    try {
                        i1 = a1.m();
                    }
                    // Misplaced declaration of an exception variable
                    catch (com.google.gson.stream.a a1) {
                        throw new JsonSyntaxException(a1);
                    }
                    a1 = Integer.valueOf(i1);
                }
                return a1;
            }

            public void a(b b1, Number number) {
                b1.a(number);
            }

            public volatile void a(b b1, Object obj) {
                a(b1, (Number)obj);
            }

            public Object b(com.google.gson.stream.a a1) {
                return a(a1);
            }

        }
;
        m = a(Integer.TYPE, java/lang/Integer, l);
        n = (new q() {

            public AtomicInteger a(com.google.gson.stream.a a1) {
                try {
                    a1 = new AtomicInteger(a1.m());
                }
                // Misplaced declaration of an exception variable
                catch (com.google.gson.stream.a a1) {
                    throw new JsonSyntaxException(a1);
                }
                return a1;
            }

            public volatile void a(b b1, Object obj) {
                a(b1, (AtomicInteger)obj);
            }

            public void a(b b1, AtomicInteger atomicinteger) {
                b1.a(atomicinteger.get());
            }

            public Object b(com.google.gson.stream.a a1) {
                return a(a1);
            }

        }
).a();
        o = a(java/util/concurrent/atomic/AtomicInteger, n);
        p = (new q() {

            public AtomicBoolean a(com.google.gson.stream.a a1) {
                return new AtomicBoolean(a1.i());
            }

            public volatile void a(b b1, Object obj) {
                a(b1, (AtomicBoolean)obj);
            }

            public void a(b b1, AtomicBoolean atomicboolean) {
                b1.a(atomicboolean.get());
            }

            public Object b(com.google.gson.stream.a a1) {
                return a(a1);
            }

        }
).a();
        q = a(java/util/concurrent/atomic/AtomicBoolean, p);
        r = (new q() {

            public AtomicIntegerArray a(com.google.gson.stream.a a1) {
                ArrayList arraylist = new ArrayList();
                a1.a();
                while (a1.e()) 
                    try {
                        arraylist.add(Integer.valueOf(a1.m()));
                    }
                    // Misplaced declaration of an exception variable
                    catch (com.google.gson.stream.a a1) {
                        throw new JsonSyntaxException(a1);
                    }
                a1.b();
                int j1 = arraylist.size();
                a1 = new AtomicIntegerArray(j1);
                for (int i1 = 0; i1 < j1; i1++)
                    a1.set(i1, ((Integer)arraylist.get(i1)).intValue());

                return a1;
            }

            public volatile void a(b b1, Object obj) {
                a(b1, (AtomicIntegerArray)obj);
            }

            public void a(b b1, AtomicIntegerArray atomicintegerarray) {
                b1.b();
                int i1 = 0;
                for (int j1 = atomicintegerarray.length(); i1 < j1; i1++)
                    b1.a(atomicintegerarray.get(i1));

                b1.c();
            }

            public Object b(com.google.gson.stream.a a1) {
                return a(a1);
            }

        }
).a();
        s = a(java/util/concurrent/atomic/AtomicIntegerArray, r);
        w = new q() {

            public Number a(com.google.gson.stream.a a1) {
                JsonToken jsontoken = a1.f();
                _cls23.a[jsontoken.ordinal()];
                JVM INSTR tableswitch 1 4: default 44
            //                           1 79
            //                           2 44
            //                           3 44
            //                           4 71;
                   goto _L1 _L2 _L1 _L1 _L3
_L1:
                throw new JsonSyntaxException((new StringBuilder()).append("Expecting number, got: ").append(jsontoken).toString());
_L3:
                a1.j();
                a1 = null;
_L5:
                return a1;
_L2:
                a1 = new LazilyParsedNumber(a1.h());
                if (true) goto _L5; else goto _L4
_L4:
            }

            public void a(b b1, Number number) {
                b1.a(number);
            }

            public volatile void a(b b1, Object obj) {
                a(b1, (Number)obj);
            }

            public Object b(com.google.gson.stream.a a1) {
                return a(a1);
            }

        }
;
        x = a(java/lang/Number, w);
        y = new q() {

            public Character a(com.google.gson.stream.a a1) {
                if (a1.f() == JsonToken.i) {
                    a1.j();
                    a1 = null;
                } else {
                    a1 = a1.h();
                    if (a1.length() != 1)
                        throw new JsonSyntaxException((new StringBuilder()).append("Expecting character, got: ").append(a1).toString());
                    a1 = Character.valueOf(a1.charAt(0));
                }
                return a1;
            }

            public void a(b b1, Character character) {
                if (character == null)
                    character = null;
                else
                    character = String.valueOf(character);
                b1.b(character);
            }

            public volatile void a(b b1, Object obj) {
                a(b1, (Character)obj);
            }

            public Object b(com.google.gson.stream.a a1) {
                return a(a1);
            }

        }
;
        z = a(Character.TYPE, java/lang/Character, y);
        A = new q() {

            public String a(com.google.gson.stream.a a1) {
                JsonToken jsontoken = a1.f();
                if (jsontoken == JsonToken.i) {
                    a1.j();
                    a1 = null;
                } else
                if (jsontoken == JsonToken.h)
                    a1 = Boolean.toString(a1.i());
                else
                    a1 = a1.h();
                return a1;
            }

            public volatile void a(b b1, Object obj) {
                a(b1, (String)obj);
            }

            public void a(b b1, String s1) {
                b1.b(s1);
            }

            public Object b(com.google.gson.stream.a a1) {
                return a(a1);
            }

        }
;
        D = a(java/lang/String, A);
        E = new q() {

            public StringBuilder a(com.google.gson.stream.a a1) {
                if (a1.f() == JsonToken.i) {
                    a1.j();
                    a1 = null;
                } else {
                    a1 = new StringBuilder(a1.h());
                }
                return a1;
            }

            public volatile void a(b b1, Object obj) {
                a(b1, (StringBuilder)obj);
            }

            public void a(b b1, StringBuilder stringbuilder) {
                if (stringbuilder == null)
                    stringbuilder = null;
                else
                    stringbuilder = stringbuilder.toString();
                b1.b(stringbuilder);
            }

            public Object b(com.google.gson.stream.a a1) {
                return a(a1);
            }

        }
;
        F = a(java/lang/StringBuilder, E);
        G = new q() {

            public StringBuffer a(com.google.gson.stream.a a1) {
                if (a1.f() == JsonToken.i) {
                    a1.j();
                    a1 = null;
                } else {
                    a1 = new StringBuffer(a1.h());
                }
                return a1;
            }

            public volatile void a(b b1, Object obj) {
                a(b1, (StringBuffer)obj);
            }

            public void a(b b1, StringBuffer stringbuffer) {
                if (stringbuffer == null)
                    stringbuffer = null;
                else
                    stringbuffer = stringbuffer.toString();
                b1.b(stringbuffer);
            }

            public Object b(com.google.gson.stream.a a1) {
                return a(a1);
            }

        }
;
        H = a(java/lang/StringBuffer, G);
        I = new q() {

            public URL a(com.google.gson.stream.a a1) {
                Object obj = null;
                if (a1.f() != JsonToken.i) goto _L2; else goto _L1
_L1:
                a1.j();
                a1 = obj;
_L4:
                return a1;
_L2:
                String s1 = a1.h();
                a1 = obj;
                if (!"null".equals(s1))
                    a1 = new URL(s1);
                if (true) goto _L4; else goto _L3
_L3:
            }

            public volatile void a(b b1, Object obj) {
                a(b1, (URL)obj);
            }

            public void a(b b1, URL url) {
                if (url == null)
                    url = null;
                else
                    url = url.toExternalForm();
                b1.b(url);
            }

            public Object b(com.google.gson.stream.a a1) {
                return a(a1);
            }

        }
;
        J = a(java/net/URL, I);
        K = new q() {

            public URI a(com.google.gson.stream.a a1) {
                Object obj = null;
                if (a1.f() != JsonToken.i) goto _L2; else goto _L1
_L1:
                a1.j();
                a1 = obj;
_L4:
                return a1;
_L2:
                String s1;
                try {
                    s1 = a1.h();
                }
                // Misplaced declaration of an exception variable
                catch (com.google.gson.stream.a a1) {
                    throw new JsonIOException(a1);
                }
                a1 = obj;
                if ("null".equals(s1)) goto _L4; else goto _L3
_L3:
                a1 = new URI(s1);
                  goto _L4
            }

            public volatile void a(b b1, Object obj) {
                a(b1, (URI)obj);
            }

            public void a(b b1, URI uri) {
                if (uri == null)
                    uri = null;
                else
                    uri = uri.toASCIIString();
                b1.b(uri);
            }

            public Object b(com.google.gson.stream.a a1) {
                return a(a1);
            }

        }
;
        L = a(java/net/URI, K);
        M = new q() {

            public InetAddress a(com.google.gson.stream.a a1) {
                if (a1.f() == JsonToken.i) {
                    a1.j();
                    a1 = null;
                } else {
                    a1 = InetAddress.getByName(a1.h());
                }
                return a1;
            }

            public volatile void a(b b1, Object obj) {
                a(b1, (InetAddress)obj);
            }

            public void a(b b1, InetAddress inetaddress) {
                if (inetaddress == null)
                    inetaddress = null;
                else
                    inetaddress = inetaddress.getHostAddress();
                b1.b(inetaddress);
            }

            public Object b(com.google.gson.stream.a a1) {
                return a(a1);
            }

        }
;
        N = b(java/net/InetAddress, M);
        O = new q() {

            public UUID a(com.google.gson.stream.a a1) {
                if (a1.f() == JsonToken.i) {
                    a1.j();
                    a1 = null;
                } else {
                    a1 = UUID.fromString(a1.h());
                }
                return a1;
            }

            public volatile void a(b b1, Object obj) {
                a(b1, (UUID)obj);
            }

            public void a(b b1, UUID uuid) {
                if (uuid == null)
                    uuid = null;
                else
                    uuid = uuid.toString();
                b1.b(uuid);
            }

            public Object b(com.google.gson.stream.a a1) {
                return a(a1);
            }

        }
;
        P = a(java/util/UUID, O);
        Q = (new q() {

            public Currency a(com.google.gson.stream.a a1) {
                return Currency.getInstance(a1.h());
            }

            public volatile void a(b b1, Object obj) {
                a(b1, (Currency)obj);
            }

            public void a(b b1, Currency currency) {
                b1.b(currency.getCurrencyCode());
            }

            public Object b(com.google.gson.stream.a a1) {
                return a(a1);
            }

        }
).a();
        R = a(java/util/Currency, Q);
        T = new q() {

            public Calendar a(com.google.gson.stream.a a1) {
                int j1 = 0;
                if (a1.f() == JsonToken.i) {
                    a1.j();
                    a1 = null;
                } else {
                    a1.c();
                    int k1 = 0;
                    int l1 = 0;
                    int i2 = 0;
                    int j2 = 0;
                    int k2 = 0;
                    do {
                        if (a1.f() == JsonToken.d)
                            break;
                        String s1 = a1.g();
                        int i1 = a1.m();
                        if ("year".equals(s1))
                            k2 = i1;
                        else
                        if ("month".equals(s1))
                            j2 = i1;
                        else
                        if ("dayOfMonth".equals(s1))
                            i2 = i1;
                        else
                        if ("hourOfDay".equals(s1))
                            l1 = i1;
                        else
                        if ("minute".equals(s1))
                            k1 = i1;
                        else
                        if ("second".equals(s1))
                            j1 = i1;
                    } while (true);
                    a1.d();
                    a1 = new GregorianCalendar(k2, j2, i2, l1, k1, j1);
                }
                return a1;
            }

            public volatile void a(b b1, Object obj) {
                a(b1, (Calendar)obj);
            }

            public void a(b b1, Calendar calendar) {
                if (calendar == null) {
                    b1.f();
                } else {
                    b1.d();
                    b1.a("year");
                    b1.a(calendar.get(1));
                    b1.a("month");
                    b1.a(calendar.get(2));
                    b1.a("dayOfMonth");
                    b1.a(calendar.get(5));
                    b1.a("hourOfDay");
                    b1.a(calendar.get(11));
                    b1.a("minute");
                    b1.a(calendar.get(12));
                    b1.a("second");
                    b1.a(calendar.get(13));
                    b1.e();
                }
            }

            public Object b(com.google.gson.stream.a a1) {
                return a(a1);
            }

        }
;
        U = b(java/util/Calendar, java/util/GregorianCalendar, T);
        V = new q() {

            public Locale a(com.google.gson.stream.a a1) {
                Object obj = null;
                if (a1.f() == JsonToken.i) {
                    a1.j();
                    a1 = obj;
                } else {
                    Object obj1 = new StringTokenizer(a1.h(), "_");
                    String s1;
                    if (((StringTokenizer) (obj1)).hasMoreElements())
                        a1 = ((StringTokenizer) (obj1)).nextToken();
                    else
                        a1 = null;
                    if (((StringTokenizer) (obj1)).hasMoreElements())
                        s1 = ((StringTokenizer) (obj1)).nextToken();
                    else
                        s1 = null;
                    if (((StringTokenizer) (obj1)).hasMoreElements())
                        obj1 = ((StringTokenizer) (obj1)).nextToken();
                    else
                        obj1 = null;
                    if (s1 == null && obj1 == null)
                        a1 = new Locale(a1);
                    else
                    if (obj1 == null)
                        a1 = new Locale(a1, s1);
                    else
                        a1 = new Locale(a1, s1, ((String) (obj1)));
                }
                return a1;
            }

            public volatile void a(b b1, Object obj) {
                a(b1, (Locale)obj);
            }

            public void a(b b1, Locale locale) {
                if (locale == null)
                    locale = null;
                else
                    locale = locale.toString();
                b1.b(locale);
            }

            public Object b(com.google.gson.stream.a a1) {
                return a(a1);
            }

        }
;
        W = a(java/util/Locale, V);
        X = new q() {

            public j a(com.google.gson.stream.a a1) {
                _cls23.a[a1.f().ordinal()];
                JVM INSTR tableswitch 1 6: default 48
            //                           1 70
            //                           2 92
            //                           3 56
            //                           4 110
            //                           5 121
            //                           6 161;
                   goto _L1 _L2 _L3 _L4 _L5 _L6 _L7
_L1:
                throw new IllegalArgumentException();
_L4:
                a1 = new n(a1.h());
_L9:
                return a1;
_L2:
                a1 = new n(new LazilyParsedNumber(a1.h()));
                continue; /* Loop/switch isn't completed */
_L3:
                a1 = new n(Boolean.valueOf(a1.i()));
                continue; /* Loop/switch isn't completed */
_L5:
                a1.j();
                a1 = k.a;
                continue; /* Loop/switch isn't completed */
_L6:
                g g1 = new g();
                a1.a();
                for (; a1.e(); g1.a(a(a1)));
                a1.b();
                a1 = g1;
                continue; /* Loop/switch isn't completed */
_L7:
                l l1 = new l();
                a1.c();
                for (; a1.e(); l1.a(a1.g(), a(a1)));
                a1.d();
                a1 = l1;
                if (true) goto _L9; else goto _L8
_L8:
            }

            public void a(b b1, j j1) {
                if (j1 == null || j1.j())
                    b1.f();
                else
                if (j1.i()) {
                    j1 = j1.m();
                    if (j1.p())
                        b1.a(j1.a());
                    else
                    if (j1.o())
                        b1.a(j1.f());
                    else
                        b1.b(j1.b());
                } else
                if (j1.g()) {
                    b1.b();
                    for (j1 = j1.l().iterator(); j1.hasNext(); a(b1, (j)j1.next()));
                    b1.c();
                } else
                if (j1.h()) {
                    b1.d();
                    java.util.Map.Entry entry;
                    for (j1 = j1.k().o().iterator(); j1.hasNext(); a(b1, (j)entry.getValue())) {
                        entry = (java.util.Map.Entry)j1.next();
                        b1.a((String)entry.getKey());
                    }

                    b1.e();
                } else {
                    throw new IllegalArgumentException((new StringBuilder()).append("Couldn't write ").append(j1.getClass()).toString());
                }
            }

            public volatile void a(b b1, Object obj) {
                a(b1, (j)obj);
            }

            public Object b(com.google.gson.stream.a a1) {
                return a(a1);
            }

        }
;
        Y = b(com/google/gson/j, X);
    }

    // Unreferenced inner class com/google/gson/internal/bind/TypeAdapters$26

/* anonymous class */
    static final class TypeAdapters._cls26
        implements r {

        public q a(d d1, com.google.gson.b.a a1) {
            if (a1.a() != java/sql/Timestamp)
                d1 = null;
            else
                d1 = new TypeAdapters._cls26._cls1(this, d1.a(java/util/Date));
            return d1;
        }

    }


    // Unreferenced inner class com/google/gson/internal/bind/TypeAdapters$26$1

/* anonymous class */
    class TypeAdapters._cls26._cls1 extends q {

        final q a;
        final TypeAdapters._cls26 b;

        public Timestamp a(com.google.gson.stream.a a1) {
            a1 = (Date)a.b(a1);
            if (a1 != null)
                a1 = new Timestamp(a1.getTime());
            else
                a1 = null;
            return a1;
        }

        public volatile void a(b b1, Object obj) {
            a(b1, (Timestamp)obj);
        }

        public void a(b b1, Timestamp timestamp) {
            a.a(b1, timestamp);
        }

        public Object b(com.google.gson.stream.a a1) {
            return a(a1);
        }

             {
                b = _pcls26;
                a = q1;
                super();
            }
    }


    // Unreferenced inner class com/google/gson/internal/bind/TypeAdapters$30

/* anonymous class */
    static final class TypeAdapters._cls30
        implements r {

        public q a(d d1, com.google.gson.b.a a1) {
            a1 = a1.a();
            if (!java/lang/Enum.isAssignableFrom(a1) || a1 == java/lang/Enum) {
                d1 = null;
            } else {
                d1 = a1;
                if (!a1.isEnum())
                    d1 = a1.getSuperclass();
                d1 = new a(d1);
            }
            return d1;
        }

    }


    // Unreferenced inner class com/google/gson/internal/bind/TypeAdapters$31

/* anonymous class */
    static final class TypeAdapters._cls31
        implements r {

        final com.google.gson.b.a a;
        final q b;

        public q a(d d1, com.google.gson.b.a a1) {
            if (a1.equals(a))
                d1 = b;
            else
                d1 = null;
            return d1;
        }
    }


    // Unreferenced inner class com/google/gson/internal/bind/TypeAdapters$32

/* anonymous class */
    static final class TypeAdapters._cls32
        implements r {

        final Class a;
        final q b;

        public q a(d d1, com.google.gson.b.a a1) {
            if (a1.a() == a)
                d1 = b;
            else
                d1 = null;
            return d1;
        }

        public String toString() {
            return (new StringBuilder()).append("Factory[type=").append(a.getName()).append(",adapter=").append(b).append("]").toString();
        }

             {
                a = class1;
                b = q1;
                super();
            }
    }


    // Unreferenced inner class com/google/gson/internal/bind/TypeAdapters$33

/* anonymous class */
    static final class TypeAdapters._cls33
        implements r {

        final Class a;
        final Class b;
        final q c;

        public q a(d d1, com.google.gson.b.a a1) {
            d1 = a1.a();
            if (d1 == a || d1 == b)
                d1 = c;
            else
                d1 = null;
            return d1;
        }

        public String toString() {
            return (new StringBuilder()).append("Factory[type=").append(b.getName()).append("+").append(a.getName()).append(",adapter=").append(c).append("]").toString();
        }

             {
                a = class1;
                b = class2;
                c = q1;
                super();
            }
    }


    // Unreferenced inner class com/google/gson/internal/bind/TypeAdapters$34

/* anonymous class */
    static final class TypeAdapters._cls34
        implements r {

        final Class a;
        final Class b;
        final q c;

        public q a(d d1, com.google.gson.b.a a1) {
            d1 = a1.a();
            if (d1 == a || d1 == b)
                d1 = c;
            else
                d1 = null;
            return d1;
        }

        public String toString() {
            return (new StringBuilder()).append("Factory[type=").append(a.getName()).append("+").append(b.getName()).append(",adapter=").append(c).append("]").toString();
        }

             {
                a = class1;
                b = class2;
                c = q1;
                super();
            }
    }


    // Unreferenced inner class com/google/gson/internal/bind/TypeAdapters$35

/* anonymous class */
    static final class TypeAdapters._cls35
        implements r {

        final Class a;
        final q b;

        public q a(d d1, com.google.gson.b.a a1) {
            d1 = a1.a();
            if (!a.isAssignableFrom(d1))
                d1 = null;
            else
                d1 = new TypeAdapters._cls35._cls1(this, d1);
            return d1;
        }

        public String toString() {
            return (new StringBuilder()).append("Factory[typeHierarchy=").append(a.getName()).append(",adapter=").append(b).append("]").toString();
        }

             {
                a = class1;
                b = q1;
                super();
            }
    }


    // Unreferenced inner class com/google/gson/internal/bind/TypeAdapters$35$1

/* anonymous class */
    class TypeAdapters._cls35._cls1 extends q {

        final Class a;
        final TypeAdapters._cls35 b;

        public void a(b b1, Object obj) {
            b.b.a(b1, obj);
        }

        public Object b(com.google.gson.stream.a a1) {
            a1 = ((com.google.gson.stream.a) (b.b.b(a1)));
            if (a1 != null && !a.isInstance(a1))
                throw new JsonSyntaxException((new StringBuilder()).append("Expected a ").append(a.getName()).append(" but was ").append(a1.getClass().getName()).toString());
            else
                return a1;
        }

             {
                b = _pcls35;
                a = class1;
                super();
            }
    }

}
