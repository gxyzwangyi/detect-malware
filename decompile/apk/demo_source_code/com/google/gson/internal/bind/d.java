// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.gson.internal.bind;

import com.google.gson.*;
import com.google.gson.stream.b;
import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;

public final class d extends b {

    private static final Writer a = new Writer() {

        public void close() {
            throw new AssertionError();
        }

        public void flush() {
            throw new AssertionError();
        }

        public void write(char ac[], int i, int i1) {
            throw new AssertionError();
        }

    }
;
    private static final n b = new n("closed");
    private final List c = new ArrayList();
    private String d;
    private j e;

    public d() {
        super(a);
        e = k.a;
    }

    private void a(j j1) {
        if (d != null) {
            if (!j1.j() || i())
                ((l)j()).a(d, j1);
            d = null;
        } else
        if (c.isEmpty()) {
            e = j1;
        } else {
            j j2 = j();
            if (j2 instanceof g)
                ((g)j2).a(j1);
            else
                throw new IllegalStateException();
        }
    }

    private j j() {
        return (j)c.get(c.size() - 1);
    }

    public j a() {
        if (!c.isEmpty())
            throw new IllegalStateException((new StringBuilder()).append("Expected one JSON element but was ").append(c).toString());
        else
            return e;
    }

    public b a(long l1) {
        a(((j) (new n(Long.valueOf(l1)))));
        return this;
    }

    public b a(Boolean boolean1) {
        if (boolean1 == null) {
            boolean1 = f();
        } else {
            a(((j) (new n(boolean1))));
            boolean1 = this;
        }
        return boolean1;
    }

    public b a(Number number) {
        if (number == null) {
            number = f();
        } else {
            if (!g()) {
                double d1 = number.doubleValue();
                if (Double.isNaN(d1) || Double.isInfinite(d1))
                    throw new IllegalArgumentException((new StringBuilder()).append("JSON forbids NaN and infinities: ").append(number).toString());
            }
            a(((j) (new n(number))));
            number = this;
        }
        return number;
    }

    public b a(String s) {
        if (c.isEmpty() || d != null)
            throw new IllegalStateException();
        if (j() instanceof l) {
            d = s;
            return this;
        } else {
            throw new IllegalStateException();
        }
    }

    public b a(boolean flag) {
        a(((j) (new n(Boolean.valueOf(flag)))));
        return this;
    }

    public b b() {
        g g1 = new g();
        a(g1);
        c.add(g1);
        return this;
    }

    public b b(String s) {
        if (s == null) {
            s = f();
        } else {
            a(new n(s));
            s = this;
        }
        return s;
    }

    public b c() {
        if (c.isEmpty() || d != null)
            throw new IllegalStateException();
        if (j() instanceof g) {
            c.remove(c.size() - 1);
            return this;
        } else {
            throw new IllegalStateException();
        }
    }

    public void close() {
        if (!c.isEmpty()) {
            throw new IOException("Incomplete document");
        } else {
            c.add(b);
            return;
        }
    }

    public b d() {
        l l1 = new l();
        a(l1);
        c.add(l1);
        return this;
    }

    public b e() {
        if (c.isEmpty() || d != null)
            throw new IllegalStateException();
        if (j() instanceof l) {
            c.remove(c.size() - 1);
            return this;
        } else {
            throw new IllegalStateException();
        }
    }

    public b f() {
        a(k.a);
        return this;
    }

    public void flush() {
    }

}
