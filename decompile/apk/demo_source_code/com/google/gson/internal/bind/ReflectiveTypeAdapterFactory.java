// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.gson.internal.bind;

import com.google.gson.JsonSyntaxException;
import com.google.gson.a.b;
import com.google.gson.a.c;
import com.google.gson.b.a;
import com.google.gson.d;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.e;
import com.google.gson.q;
import com.google.gson.r;
import com.google.gson.stream.JsonToken;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

// Referenced classes of package com.google.gson.internal.bind:
//            JsonAdapterAnnotationTypeAdapterFactory, h

public final class ReflectiveTypeAdapterFactory
    implements r {
    public static final class a extends q {

        private final com.google.gson.internal.d a;
        private final Map b;

        public void a(com.google.gson.stream.b b1, Object obj) {
            if (obj == null) {
                b1.f();
            } else {
                b1.d();
                try {
                    Iterator iterator = b.values().iterator();
                    do {
                        if (!iterator.hasNext())
                            break;
                        b b2 = (b)iterator.next();
                        if (b2.a(obj)) {
                            b1.a(b2.h);
                            b2.a(b1, obj);
                        }
                    } while (true);
                }
                // Misplaced declaration of an exception variable
                catch (com.google.gson.stream.b b1) {
                    throw new AssertionError(b1);
                }
                b1.e();
            }
        }

        public Object b(com.google.gson.stream.a a1) {
            if (a1.f() != JsonToken.i) goto _L2; else goto _L1
_L1:
            a1.j();
            a1 = null;
_L5:
            return a1;
_L2:
            Object obj = a.a();
            a1.c();
_L3:
            Object obj1;
            if (!a1.e())
                break MISSING_BLOCK_LABEL_105;
            obj1 = a1.g();
            obj1 = (b)b.get(obj1);
            if (obj1 == null)
                break MISSING_BLOCK_LABEL_69;
            if (((b) (obj1)).j)
                break MISSING_BLOCK_LABEL_86;
            a1.n();
              goto _L3
            try {
                ((b) (obj1)).a(a1, obj);
            }
            // Misplaced declaration of an exception variable
            catch (com.google.gson.stream.a a1) {
                throw new JsonSyntaxException(a1);
            }
            // Misplaced declaration of an exception variable
            catch (com.google.gson.stream.a a1) {
                throw new AssertionError(a1);
            }
              goto _L3
            a1.d();
            a1 = ((com.google.gson.stream.a) (obj));
            if (true) goto _L5; else goto _L4
_L4:
        }

        a(com.google.gson.internal.d d1, Map map) {
            a = d1;
            b = map;
        }
    }

    static abstract class b {

        final String h;
        final boolean i;
        final boolean j;

        abstract void a(com.google.gson.stream.a a1, Object obj);

        abstract void a(com.google.gson.stream.b b1, Object obj);

        abstract boolean a(Object obj);

        protected b(String s, boolean flag, boolean flag1) {
            h = s;
            i = flag;
            j = flag1;
        }
    }


    private final com.google.gson.internal.b a;
    private final com.google.gson.c b;
    private final Excluder c;
    private final JsonAdapterAnnotationTypeAdapterFactory d;

    public ReflectiveTypeAdapterFactory(com.google.gson.internal.b b1, com.google.gson.c c1, Excluder excluder, JsonAdapterAnnotationTypeAdapterFactory jsonadapterannotationtypeadapterfactory) {
        a = b1;
        b = c1;
        c = excluder;
        d = jsonadapterannotationtypeadapterfactory;
    }

    private b a(d d1, Field field, String s, com.google.gson.b.a a1, boolean flag, boolean flag1) {
        boolean flag3 = e.a(a1.a());
        Object obj = (com.google.gson.a.b)field.getAnnotation(com/google/gson/a/b);
        q q = null;
        if (obj != null)
            q = d.a(a, d1, a1, ((com.google.gson.a.b) (obj)));
        boolean flag2;
        if (q != null)
            flag2 = true;
        else
            flag2 = false;
        obj = q;
        if (q == null)
            obj = d1.a(a1);
        return new b(s, flag, flag1, field, flag2, ((q) (obj)), d1, a1, flag3) {

            final Field a;
            final boolean b;
            final q c;
            final d d;
            final com.google.gson.b.a e;
            final boolean f;
            final ReflectiveTypeAdapterFactory g;

            void a(com.google.gson.stream.a a2, Object obj1) {
                a2 = ((com.google.gson.stream.a) (c.b(a2)));
                if (a2 != null || !f)
                    a.set(obj1, a2);
            }

            void a(com.google.gson.stream.b b1, Object obj1) {
                Object obj2 = a.get(obj1);
                if (b)
                    obj1 = c;
                else
                    obj1 = new h(d, c, e.b());
                ((q) (obj1)).a(b1, obj2);
            }

            public boolean a(Object obj1) {
                boolean flag4;
                flag4 = false;
                break MISSING_BLOCK_LABEL_2;
                if (i && a.get(obj1) != obj1)
                    flag4 = true;
                return flag4;
            }

             {
                g = ReflectiveTypeAdapterFactory.this;
                a = field;
                b = flag2;
                c = q1;
                d = d1;
                e = a1;
                f = flag3;
                super(s, flag, flag1);
            }
        }
;
    }

    private List a(Field field) {
        c c1 = (c)field.getAnnotation(com/google/gson/a/c);
        if (c1 != null) goto _L2; else goto _L1
_L1:
        field = Collections.singletonList(b.a(field));
_L4:
        return field;
_L2:
        String as[];
        field = c1.a();
        as = c1.b();
        if (as.length != 0)
            break; /* Loop/switch isn't completed */
        field = Collections.singletonList(field);
        if (true) goto _L4; else goto _L3
_L3:
        ArrayList arraylist = new ArrayList(as.length + 1);
        arraylist.add(field);
        int j = as.length;
        int i = 0;
        do {
            field = arraylist;
            if (i >= j)
                continue;
            arraylist.add(as[i]);
            i++;
        } while (true);
        if (true) goto _L4; else goto _L5
_L5:
    }

    private Map a(d d1, com.google.gson.b.a a1, Class class1) {
        LinkedHashMap linkedhashmap = new LinkedHashMap();
        if (!class1.isInterface()) goto _L2; else goto _L1
_L1:
        return linkedhashmap;
_L2:
        com.google.gson.b.a a2;
        java.lang.reflect.Type type;
        type = a1.b();
        a2 = a1;
_L8:
        int i;
        int k;
        Field afield[];
        if (class1 == java/lang/Object)
            continue; /* Loop/switch isn't completed */
        afield = class1.getDeclaredFields();
        k = afield.length;
        i = 0;
_L4:
        boolean flag;
        boolean flag1;
        Field field;
        if (i >= k)
            break MISSING_BLOCK_LABEL_249;
        field = afield[i];
        flag = a(field, true);
        flag1 = a(field, false);
        if (flag || flag1)
            break; /* Loop/switch isn't completed */
_L6:
        i++;
        if (true) goto _L4; else goto _L3
_L3:
        field.setAccessible(true);
        java.lang.reflect.Type type1 = com.google.gson.internal..Gson.Types.a(a2.b(), class1, field.getGenericType());
        List list = a(field);
        a1 = null;
        for (int j = 0; j < list.size(); j++) {
            Object obj = (String)list.get(j);
            if (j != 0)
                flag = false;
            obj = (b)linkedhashmap.put(obj, a(d1, field, ((String) (obj)), com.google.gson.b.a.a(type1), flag, flag1));
            if (a1 == null)
                a1 = ((com.google.gson.b.a) (obj));
        }

        if (a1 == null) goto _L6; else goto _L5
_L5:
        throw new IllegalArgumentException((new StringBuilder()).append(type).append(" declares multiple JSON fields named ").append(((b) (a1)).h).toString());
        a2 = com.google.gson.b.a.a(com.google.gson.internal..Gson.Types.a(a2.b(), class1, class1.getGenericSuperclass()));
        class1 = a2.a();
        if (true) goto _L8; else goto _L7
_L7:
        if (true) goto _L1; else goto _L9
_L9:
    }

    static boolean a(Field field, boolean flag, Excluder excluder) {
        if (!excluder.a(field.getType(), flag) && !excluder.a(field, flag))
            flag = true;
        else
            flag = false;
        return flag;
    }

    public q a(d d1, com.google.gson.b.a a1) {
        Class class1 = a1.a();
        if (!java/lang/Object.isAssignableFrom(class1))
            d1 = null;
        else
            d1 = new a(a.a(a1), a(d1, a1, class1));
        return d1;
    }

    public boolean a(Field field, boolean flag) {
        return a(field, flag, c);
    }
}
