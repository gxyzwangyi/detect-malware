// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.gson.internal;

import com.google.gson.a.d;
import com.google.gson.a.e;
import com.google.gson.b;
import com.google.gson.b.a;
import com.google.gson.q;
import com.google.gson.r;
import java.lang.reflect.Field;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

public final class Excluder
    implements r, Cloneable {

    public static final Excluder a = new Excluder();
    private double b;
    private int c;
    private boolean d;
    private boolean e;
    private List f;
    private List g;

    public Excluder() {
        b = -1D;
        c = 136;
        d = true;
        f = Collections.emptyList();
        g = Collections.emptyList();
    }

    private boolean a(d d1) {
        boolean flag;
        if (d1 != null && d1.a() > b)
            flag = false;
        else
            flag = true;
        return flag;
    }

    private boolean a(d d1, e e1) {
        boolean flag;
        if (a(d1) && a(e1))
            flag = true;
        else
            flag = false;
        return flag;
    }

    private boolean a(e e1) {
        boolean flag;
        if (e1 != null && e1.a() <= b)
            flag = false;
        else
            flag = true;
        return flag;
    }

    private boolean a(Class class1) {
        boolean flag;
        if (!java/lang/Enum.isAssignableFrom(class1) && (class1.isAnonymousClass() || class1.isLocalClass()))
            flag = true;
        else
            flag = false;
        return flag;
    }

    private boolean b(Class class1) {
        boolean flag;
        if (class1.isMemberClass() && !c(class1))
            flag = true;
        else
            flag = false;
        return flag;
    }

    private boolean c(Class class1) {
        boolean flag;
        if ((class1.getModifiers() & 8) != 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    protected Excluder a() {
        Excluder excluder;
        try {
            excluder = (Excluder)super.clone();
        }
        catch (CloneNotSupportedException clonenotsupportedexception) {
            throw new AssertionError(clonenotsupportedexception);
        }
        return excluder;
    }

    public q a(com.google.gson.d d1, a a1) {
        Class class1 = a1.a();
        boolean flag1 = a(class1, true);
        boolean flag = a(class1, false);
        if (!flag1 && !flag)
            d1 = null;
        else
            d1 = new q(flag, flag1, d1, a1) {

                final boolean a;
                final boolean b;
                final com.google.gson.d c;
                final a d;
                final Excluder e;
                private q f;

                private q b() {
                    q q1 = f;
                    if (q1 == null) {
                        q1 = c.a(e, d);
                        f = q1;
                    }
                    return q1;
                }

                public void a(com.google.gson.stream.b b1, Object obj) {
                    if (b)
                        b1.f();
                    else
                        b().a(b1, obj);
                }

                public Object b(com.google.gson.stream.a a2) {
                    if (a) {
                        a2.n();
                        a2 = null;
                    } else {
                        a2 = ((com.google.gson.stream.a) (b().b(a2)));
                    }
                    return a2;
                }

             {
                e = Excluder.this;
                a = flag;
                b = flag1;
                c = d1;
                d = a1;
                super();
            }
            }
;
        return d1;
    }

    public boolean a(Class class1, boolean flag) {
        if (b == -1D || a((d)class1.getAnnotation(com/google/gson/a/d), (e)class1.getAnnotation(com/google/gson/a/e))) goto _L2; else goto _L1
_L1:
        flag = true;
_L4:
        return flag;
_L2:
        if (!d && b(class1)) {
            flag = true;
            continue; /* Loop/switch isn't completed */
        }
        if (a(class1)) {
            flag = true;
            continue; /* Loop/switch isn't completed */
        }
        Object obj;
        if (flag)
            obj = f;
        else
            obj = g;
        for (obj = ((List) (obj)).iterator(); ((Iterator) (obj)).hasNext();)
            if (((com.google.gson.a)((Iterator) (obj)).next()).a(class1)) {
                flag = true;
                continue; /* Loop/switch isn't completed */
            }

        flag = false;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public boolean a(Field field, boolean flag) {
        if ((c & field.getModifiers()) == 0) goto _L2; else goto _L1
_L1:
        flag = true;
_L4:
        return flag;
_L2:
label0:
        {
            if (b != -1D && !a((d)field.getAnnotation(com/google/gson/a/d), (e)field.getAnnotation(com/google/gson/a/e))) {
                flag = true;
                continue; /* Loop/switch isn't completed */
            }
            if (field.isSynthetic()) {
                flag = true;
                continue; /* Loop/switch isn't completed */
            }
            if (e) {
                com.google.gson.a.a a1 = (com.google.gson.a.a)field.getAnnotation(com/google/gson/a/a);
                if (a1 == null || (flag ? !a1.a() : !a1.b())) {
                    flag = true;
                    continue; /* Loop/switch isn't completed */
                }
            }
            if (!d && b(field.getType())) {
                flag = true;
                continue; /* Loop/switch isn't completed */
            }
            if (a(field.getType())) {
                flag = true;
                continue; /* Loop/switch isn't completed */
            }
            Object obj;
            if (flag)
                obj = f;
            else
                obj = g;
            if (((List) (obj)).isEmpty())
                break label0;
            field = new b(field);
            obj = ((List) (obj)).iterator();
            do
                if (!((Iterator) (obj)).hasNext())
                    break label0;
            while (!((com.google.gson.a)((Iterator) (obj)).next()).a(field));
            flag = true;
            continue; /* Loop/switch isn't completed */
        }
        flag = false;
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected Object clone() {
        return a();
    }

}
