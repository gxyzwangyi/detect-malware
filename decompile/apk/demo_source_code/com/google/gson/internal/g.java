// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.gson.internal;

import java.io.ObjectInputStream;
import java.io.ObjectStreamClass;
import java.lang.reflect.*;

public abstract class g {

    public g() {
    }

    public static g a() {
        Object obj;
        try {
            obj = Class.forName("sun.misc.Unsafe");
            Object obj1 = ((Class) (obj)).getDeclaredField("theUnsafe");
            ((Field) (obj1)).setAccessible(true);
            obj1 = ((Field) (obj1)).get(null);
            Method method2 = ((Class) (obj)).getMethod("allocateInstance", new Class[] {
                java/lang/Class
            });
            obj = JVM INSTR new #6   <Class g$1>;
            ((_cls1) (obj))._cls1(method2, obj1);
        }
        catch (Exception exception) {
            try {
                exception = java/io/ObjectStreamClass.getDeclaredMethod("getConstructorId", new Class[] {
                    java/lang/Class
                });
                exception.setAccessible(true);
                int i = ((Integer)exception.invoke(null, new Object[] {
                    java/lang/Object
                })).intValue();
                Method method = java/io/ObjectStreamClass.getDeclaredMethod("newInstance", new Class[] {
                    java/lang/Class, Integer.TYPE
                });
                method.setAccessible(true);
                exception = JVM INSTR new #8   <Class g$2>;
                exception._cls2(method, i);
            }
            catch (Exception exception1) {
                try {
                    Method method1 = java/io/ObjectInputStream.getDeclaredMethod("newInstance", new Class[] {
                        java/lang/Class, java/lang/Class
                    });
                    method1.setAccessible(true);
                    exception1 = JVM INSTR new #10  <Class g$3>;
                    exception1._cls3(method1);
                }
                catch (Exception exception2) {
                    exception2 = new g() {

                        public Object a(Class class1) {
                            throw new UnsupportedOperationException((new StringBuilder()).append("Cannot allocate ").append(class1).toString());
                        }

                    }
;
                }
            }
        }
        return ((g) (obj));
    }

    static void b(Class class1) {
        c(class1);
    }

    private static void c(Class class1) {
        int i = class1.getModifiers();
        if (Modifier.isInterface(i))
            throw new UnsupportedOperationException((new StringBuilder()).append("Interface can't be instantiated! Interface name: ").append(class1.getName()).toString());
        if (Modifier.isAbstract(i))
            throw new UnsupportedOperationException((new StringBuilder()).append("Abstract class can't be instantiated! Class name: ").append(class1.getName()).toString());
        else
            return;
    }

    public abstract Object a(Class class1);

    // Unreferenced inner class com/google/gson/internal/g$1

/* anonymous class */
    static final class _cls1 extends g {

        final Method a;
        final Object b;

        public Object a(Class class1) {
            g.b(class1);
            return a.invoke(b, new Object[] {
                class1
            });
        }

             {
                a = method;
                b = obj;
                super();
            }
    }


    // Unreferenced inner class com/google/gson/internal/g$2

/* anonymous class */
    static final class _cls2 extends g {

        final Method a;
        final int b;

        public Object a(Class class1) {
            g.b(class1);
            return a.invoke(null, new Object[] {
                class1, Integer.valueOf(b)
            });
        }

             {
                a = method;
                b = i;
                super();
            }
    }


    // Unreferenced inner class com/google/gson/internal/g$3

/* anonymous class */
    static final class _cls3 extends g {

        final Method a;

        public Object a(Class class1) {
            g.b(class1);
            return a.invoke(null, new Object[] {
                class1, java/lang/Object
            });
        }

             {
                a = method;
                super();
            }
    }

}
