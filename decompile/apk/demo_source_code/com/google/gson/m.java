// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.gson;

import com.google.gson.internal.f;
import com.google.gson.stream.JsonToken;
import com.google.gson.stream.MalformedJsonException;
import com.google.gson.stream.a;
import java.io.*;

// Referenced classes of package com.google.gson:
//            JsonParseException, j, JsonSyntaxException, JsonIOException

public final class m {

    public m() {
    }

    public j a(a a1) {
        boolean flag;
        flag = a1.q();
        a1.a(true);
        j j1 = f.a(a1);
        a1.a(flag);
        return j1;
        Object obj;
        obj;
        JsonParseException jsonparseexception1 = JVM INSTR new #30  <Class JsonParseException>;
        StringBuilder stringbuilder1 = JVM INSTR new #32  <Class StringBuilder>;
        stringbuilder1.StringBuilder();
        jsonparseexception1.JsonParseException(stringbuilder1.append("Failed parsing JSON source: ").append(a1).append(" to Json").toString(), ((Throwable) (obj)));
        throw jsonparseexception1;
        obj;
        a1.a(flag);
        throw obj;
        OutOfMemoryError outofmemoryerror;
        outofmemoryerror;
        JsonParseException jsonparseexception = JVM INSTR new #30  <Class JsonParseException>;
        StringBuilder stringbuilder = JVM INSTR new #32  <Class StringBuilder>;
        stringbuilder.StringBuilder();
        jsonparseexception.JsonParseException(stringbuilder.append("Failed parsing JSON source: ").append(a1).append(" to Json").toString(), outofmemoryerror);
        throw jsonparseexception;
    }

    public j a(Reader reader) {
        try {
            a a1 = JVM INSTR new #17  <Class a>;
            a1.a(reader);
            reader = a(a1);
            if (!reader.j() && a1.f() != JsonToken.j) {
                reader = JVM INSTR new #78  <Class JsonSyntaxException>;
                reader.JsonSyntaxException("Did not consume the entire document.");
                throw reader;
            }
        }
        // Misplaced declaration of an exception variable
        catch (Reader reader) {
            throw new JsonSyntaxException(reader);
        }
        // Misplaced declaration of an exception variable
        catch (Reader reader) {
            throw new JsonIOException(reader);
        }
        // Misplaced declaration of an exception variable
        catch (Reader reader) {
            throw new JsonSyntaxException(reader);
        }
        return reader;
    }

    public j a(String s) {
        return a(((Reader) (new StringReader(s))));
    }
}
