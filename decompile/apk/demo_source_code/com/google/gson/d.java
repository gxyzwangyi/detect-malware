// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.gson;

import com.google.gson.internal.Excluder;
import com.google.gson.internal.b;
import com.google.gson.internal.bind.CollectionTypeAdapterFactory;
import com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory;
import com.google.gson.internal.bind.MapTypeAdapterFactory;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.internal.bind.a;
import com.google.gson.internal.bind.e;
import com.google.gson.internal.bind.f;
import com.google.gson.internal.bind.g;
import com.google.gson.internal.bind.i;
import com.google.gson.stream.JsonToken;
import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicLongArray;

// Referenced classes of package com.google.gson:
//            FieldNamingPolicy, LongSerializationPolicy, q, r, 
//            JsonIOException, c, j

public final class d {
    static class a extends q {

        private q a;

        public void a(q q1) {
            if (a != null) {
                throw new AssertionError();
            } else {
                a = q1;
                return;
            }
        }

        public void a(com.google.gson.stream.b b1, Object obj) {
            if (a == null) {
                throw new IllegalStateException();
            } else {
                a.a(b1, obj);
                return;
            }
        }

        public Object b(com.google.gson.stream.a a1) {
            if (a == null)
                throw new IllegalStateException();
            else
                return a.b(a1);
        }

        a() {
        }
    }


    private static final com.google.gson.b.a a = new com.google.gson.b.a() {

    }
;
    private final ThreadLocal b;
    private final Map c;
    private final List d;
    private final b e;
    private final Excluder f;
    private final c g;
    private final boolean h;
    private final boolean i;
    private final boolean j;
    private final boolean k;
    private final boolean l;
    private final JsonAdapterAnnotationTypeAdapterFactory m;

    public d() {
        this(Excluder.a, ((c) (com.google.gson.FieldNamingPolicy.a)), Collections.emptyMap(), false, false, false, true, false, false, false, com.google.gson.LongSerializationPolicy.a, Collections.emptyList());
    }

    d(Excluder excluder, c c1, Map map, boolean flag, boolean flag1, boolean flag2, boolean flag3, 
            boolean flag4, boolean flag5, boolean flag6, LongSerializationPolicy longserializationpolicy, List list) {
        b = new ThreadLocal();
        c = new ConcurrentHashMap();
        e = new b(map);
        f = excluder;
        g = c1;
        h = flag;
        j = flag2;
        i = flag3;
        k = flag4;
        l = flag5;
        map = new ArrayList();
        map.add(i.Y);
        map.add(e.a);
        map.add(excluder);
        map.addAll(list);
        map.add(i.D);
        map.add(i.m);
        map.add(i.g);
        map.add(i.i);
        map.add(i.k);
        longserializationpolicy = a(longserializationpolicy);
        map.add(com.google.gson.internal.bind.i.a(Long.TYPE, java/lang/Long, longserializationpolicy));
        map.add(com.google.gson.internal.bind.i.a(Double.TYPE, java/lang/Double, a(flag6)));
        map.add(com.google.gson.internal.bind.i.a(Float.TYPE, java/lang/Float, b(flag6)));
        map.add(i.x);
        map.add(i.o);
        map.add(i.q);
        map.add(com.google.gson.internal.bind.i.a(java/util/concurrent/atomic/AtomicLong, a(longserializationpolicy)));
        map.add(com.google.gson.internal.bind.i.a(java/util/concurrent/atomic/AtomicLongArray, b(longserializationpolicy)));
        map.add(i.s);
        map.add(i.z);
        map.add(i.F);
        map.add(i.H);
        map.add(com.google.gson.internal.bind.i.a(java/math/BigDecimal, i.B));
        map.add(com.google.gson.internal.bind.i.a(java/math/BigInteger, i.C));
        map.add(i.J);
        map.add(i.L);
        map.add(i.P);
        map.add(i.R);
        map.add(i.W);
        map.add(i.N);
        map.add(i.d);
        map.add(com.google.gson.internal.bind.b.a);
        map.add(i.U);
        map.add(g.a);
        map.add(f.a);
        map.add(i.S);
        map.add(com.google.gson.internal.bind.a.a);
        map.add(i.b);
        map.add(new CollectionTypeAdapterFactory(e));
        map.add(new MapTypeAdapterFactory(e, flag1));
        m = new JsonAdapterAnnotationTypeAdapterFactory(e);
        map.add(m);
        map.add(i.Z);
        map.add(new ReflectiveTypeAdapterFactory(e, c1, excluder, m));
        d = Collections.unmodifiableList(map);
    }

    private static q a(LongSerializationPolicy longserializationpolicy) {
        if (longserializationpolicy == com.google.gson.LongSerializationPolicy.a)
            longserializationpolicy = i.t;
        else
            longserializationpolicy = new q() {

                public Number a(com.google.gson.stream.a a1) {
                    if (a1.f() == JsonToken.i) {
                        a1.j();
                        a1 = null;
                    } else {
                        a1 = Long.valueOf(a1.l());
                    }
                    return a1;
                }

                public void a(com.google.gson.stream.b b1, Number number) {
                    if (number == null)
                        b1.f();
                    else
                        b1.b(number.toString());
                }

                public volatile void a(com.google.gson.stream.b b1, Object obj) {
                    a(b1, (Number)obj);
                }

                public Object b(com.google.gson.stream.a a1) {
                    return a(a1);
                }

            }
;
        return longserializationpolicy;
    }

    private static q a(q q1) {
        return (new q(q1) {

            final q a;

            public AtomicLong a(com.google.gson.stream.a a1) {
                return new AtomicLong(((Number)a.b(a1)).longValue());
            }

            public volatile void a(com.google.gson.stream.b b1, Object obj) {
                a(b1, (AtomicLong)obj);
            }

            public void a(com.google.gson.stream.b b1, AtomicLong atomiclong) {
                a.a(b1, Long.valueOf(atomiclong.get()));
            }

            public Object b(com.google.gson.stream.a a1) {
                return a(a1);
            }

             {
                a = q1;
                super();
            }
        }
).a();
    }

    private q a(boolean flag) {
        Object obj;
        if (flag)
            obj = i.v;
        else
            obj = new q() {

                final d a;

                public Double a(com.google.gson.stream.a a1) {
                    if (a1.f() == JsonToken.i) {
                        a1.j();
                        a1 = null;
                    } else {
                        a1 = Double.valueOf(a1.k());
                    }
                    return a1;
                }

                public void a(com.google.gson.stream.b b1, Number number) {
                    if (number == null) {
                        b1.f();
                    } else {
                        com.google.gson.d.a(number.doubleValue());
                        b1.a(number);
                    }
                }

                public volatile void a(com.google.gson.stream.b b1, Object obj1) {
                    a(b1, (Number)obj1);
                }

                public Object b(com.google.gson.stream.a a1) {
                    return a(a1);
                }

             {
                a = d.this;
                super();
            }
            }
;
        return ((q) (obj));
    }

    static void a(double d1) {
        if (Double.isNaN(d1) || Double.isInfinite(d1))
            throw new IllegalArgumentException((new StringBuilder()).append(d1).append(" is not a valid double value as per JSON specification. To override this").append(" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.").toString());
        else
            return;
    }

    private static q b(q q1) {
        return (new q(q1) {

            final q a;

            public AtomicLongArray a(com.google.gson.stream.a a1) {
                ArrayList arraylist = new ArrayList();
                a1.a();
                for (; a1.e(); arraylist.add(Long.valueOf(((Number)a.b(a1)).longValue())));
                a1.b();
                int j1 = arraylist.size();
                a1 = new AtomicLongArray(j1);
                for (int i1 = 0; i1 < j1; i1++)
                    a1.set(i1, ((Long)arraylist.get(i1)).longValue());

                return a1;
            }

            public volatile void a(com.google.gson.stream.b b1, Object obj) {
                a(b1, (AtomicLongArray)obj);
            }

            public void a(com.google.gson.stream.b b1, AtomicLongArray atomiclongarray) {
                b1.b();
                int i1 = 0;
                for (int j1 = atomiclongarray.length(); i1 < j1; i1++)
                    a.a(b1, Long.valueOf(atomiclongarray.get(i1)));

                b1.c();
            }

            public Object b(com.google.gson.stream.a a1) {
                return a(a1);
            }

             {
                a = q1;
                super();
            }
        }
).a();
    }

    private q b(boolean flag) {
        Object obj;
        if (flag)
            obj = i.u;
        else
            obj = new q() {

                final d a;

                public Float a(com.google.gson.stream.a a1) {
                    if (a1.f() == JsonToken.i) {
                        a1.j();
                        a1 = null;
                    } else {
                        a1 = Float.valueOf((float)a1.k());
                    }
                    return a1;
                }

                public void a(com.google.gson.stream.b b1, Number number) {
                    if (number == null) {
                        b1.f();
                    } else {
                        com.google.gson.d.a(number.floatValue());
                        b1.a(number);
                    }
                }

                public volatile void a(com.google.gson.stream.b b1, Object obj1) {
                    a(b1, (Number)obj1);
                }

                public Object b(com.google.gson.stream.a a1) {
                    return a(a1);
                }

             {
                a = d.this;
                super();
            }
            }
;
        return ((q) (obj));
    }

    public q a(com.google.gson.b.a a1) {
        Object obj;
        Map map = c;
        if (a1 == null)
            obj = a;
        else
            obj = a1;
        obj = (q)map.get(obj);
        if (obj == null) goto _L2; else goto _L1
_L1:
        return ((q) (obj));
_L2:
        boolean flag;
        Object obj1;
        obj1 = (Map)b.get();
        flag = false;
        if (obj1 == null) {
            obj1 = new HashMap();
            b.set(obj1);
            flag = true;
        }
        a a2 = (a)((Map) (obj1)).get(a1);
        obj = a2;
        if (a2 != null)
            continue; /* Loop/switch isn't completed */
        Iterator iterator;
        obj = JVM INSTR new #18  <Class d$a>;
        ((a) (obj)).a();
        ((Map) (obj1)).put(a1, obj);
        iterator = d.iterator();
        q q1;
        do {
            if (!iterator.hasNext())
                break; /* Loop/switch isn't completed */
            q1 = ((r)iterator.next()).a(this, a1);
        } while (q1 == null);
        ((a) (obj)).a(q1);
        c.put(a1, q1);
        ((Map) (obj1)).remove(a1);
        obj = q1;
        if (flag) {
            b.remove();
            obj = q1;
        }
        if (true) goto _L1; else goto _L3
_L3:
        IllegalArgumentException illegalargumentexception = JVM INSTR new #311 <Class IllegalArgumentException>;
        StringBuilder stringbuilder = JVM INSTR new #313 <Class StringBuilder>;
        stringbuilder.StringBuilder();
        illegalargumentexception.IllegalArgumentException(stringbuilder.append("GSON cannot handle ").append(a1).toString());
        throw illegalargumentexception;
        Exception exception;
        exception;
        ((Map) (obj1)).remove(a1);
        if (flag)
            b.remove();
        throw exception;
    }

    public q a(r r1, com.google.gson.b.a a1) {
        Object obj = r1;
        if (!d.contains(r1))
            obj = m;
        r1 = d.iterator();
        boolean flag = false;
        while (r1.hasNext())  {
            Object obj1 = (r)r1.next();
            if (!flag) {
                if (obj1 == obj)
                    flag = true;
            } else {
                obj1 = ((r) (obj1)).a(this, a1);
                if (obj1 != null)
                    return ((q) (obj1));
            }
        }
        throw new IllegalArgumentException((new StringBuilder()).append("GSON cannot serialize ").append(a1).toString());
    }

    public q a(Class class1) {
        return a(com.google.gson.b.a.b(class1));
    }

    public com.google.gson.stream.b a(Writer writer) {
        if (j)
            writer.write(")]}'\n");
        writer = new com.google.gson.stream.b(writer);
        if (k)
            writer.c("  ");
        writer.d(h);
        return writer;
    }

    public String a(j j1) {
        StringWriter stringwriter = new StringWriter();
        a(j1, ((Appendable) (stringwriter)));
        return stringwriter.toString();
    }

    public void a(j j1, com.google.gson.stream.b b1) {
        boolean flag;
        boolean flag1;
        boolean flag2;
        flag = b1.g();
        b1.b(true);
        flag2 = b1.h();
        b1.c(i);
        flag1 = b1.i();
        b1.d(h);
        com.google.gson.internal.f.a(j1, b1);
        b1.b(flag);
        b1.c(flag2);
        b1.d(flag1);
        return;
        j1;
        JsonIOException jsonioexception = JVM INSTR new #457 <Class JsonIOException>;
        jsonioexception.JsonIOException(j1);
        throw jsonioexception;
        j1;
        b1.b(flag);
        b1.c(flag2);
        b1.d(flag1);
        throw j1;
    }

    public void a(j j1, Appendable appendable) {
        try {
            a(j1, a(com.google.gson.internal.f.a(appendable)));
            return;
        }
        // Misplaced declaration of an exception variable
        catch (j j1) {
            throw new JsonIOException(j1);
        }
    }

    public String toString() {
        return (new StringBuilder("{serializeNulls:")).append(h).append("factories:").append(d).append(",instanceCreators:").append(e).append("}").toString();
    }

}
