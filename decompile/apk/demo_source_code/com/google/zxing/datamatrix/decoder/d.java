// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.zxing.datamatrix.decoder;

import com.google.zxing.FormatException;

public final class d {
    static final class a {

        private final int a;
        private final int b;

        int a() {
            return a;
        }

        int b() {
            return b;
        }

        private a(int i, int j) {
            a = i;
            b = j;
        }

    }

    static final class b {

        private final int a;
        private final a b[];

        int a() {
            return a;
        }

        a[] b() {
            return b;
        }

        private b(int i, a a1) {
            a = i;
            b = (new a[] {
                a1
            });
        }


        private b(int i, a a1, a a2) {
            a = i;
            b = (new a[] {
                a1, a2
            });
        }

    }


    private static final d a[] = h();
    private final int b;
    private final int c;
    private final int d;
    private final int e;
    private final int f;
    private final b g;
    private final int h;

    private d(int i, int j, int k, int l, int i1, b b1) {
        boolean flag = false;
        super();
        b = i;
        c = j;
        d = k;
        e = l;
        f = i1;
        g = b1;
        l = b1.a();
        a aa[] = b1.b();
        k = aa.length;
        i = 0;
        for (j = ((flag) ? 1 : 0); j < k; j++) {
            b1 = aa[j];
            i1 = b1.a();
            i += (b1.b() + l) * i1;
        }

        h = i;
    }

    public static d a(int i, int j) {
        if ((i & 1) != 0 || (j & 1) != 0)
            throw FormatException.a();
        d ad[] = a;
        int l = ad.length;
        for (int k = 0; k < l; k++) {
            d d1 = ad[k];
            if (d1.c == i && d1.d == j)
                return d1;
        }

        throw FormatException.a();
    }

    private static d[] h() {
        return (new d[] {
            new d(1, 10, 10, 8, 8, new b(5, new a(1, 3))), new d(2, 12, 12, 10, 10, new b(7, new a(1, 5))), new d(3, 14, 14, 12, 12, new b(10, new a(1, 8))), new d(4, 16, 16, 14, 14, new b(12, new a(1, 12))), new d(5, 18, 18, 16, 16, new b(14, new a(1, 18))), new d(6, 20, 20, 18, 18, new b(18, new a(1, 22))), new d(7, 22, 22, 20, 20, new b(20, new a(1, 30))), new d(8, 24, 24, 22, 22, new b(24, new a(1, 36))), new d(9, 26, 26, 24, 24, new b(28, new a(1, 44))), new d(10, 32, 32, 14, 14, new b(36, new a(1, 62))), 
            new d(11, 36, 36, 16, 16, new b(42, new a(1, 86))), new d(12, 40, 40, 18, 18, new b(48, new a(1, 114))), new d(13, 44, 44, 20, 20, new b(56, new a(1, 144))), new d(14, 48, 48, 22, 22, new b(68, new a(1, 174))), new d(15, 52, 52, 24, 24, new b(42, new a(2, 102))), new d(16, 64, 64, 14, 14, new b(56, new a(2, 140))), new d(17, 72, 72, 16, 16, new b(36, new a(4, 92))), new d(18, 80, 80, 18, 18, new b(48, new a(4, 114))), new d(19, 88, 88, 20, 20, new b(56, new a(4, 144))), new d(20, 96, 96, 22, 22, new b(68, new a(4, 174))), 
            new d(21, 104, 104, 24, 24, new b(56, new a(6, 136))), new d(22, 120, 120, 18, 18, new b(68, new a(6, 175))), new d(23, 132, 132, 20, 20, new b(62, new a(8, 163))), new d(24, 144, 144, 22, 22, new b(62, new a(8, 156), new a(2, 155))), new d(25, 8, 18, 6, 16, new b(7, new a(1, 5))), new d(26, 8, 32, 6, 14, new b(11, new a(1, 10))), new d(27, 12, 26, 10, 24, new b(14, new a(1, 16))), new d(28, 12, 36, 10, 16, new b(18, new a(1, 22))), new d(29, 16, 36, 14, 16, new b(24, new a(1, 32))), new d(30, 16, 48, 14, 22, new b(28, new a(1, 49)))
        });
    }

    public int a() {
        return b;
    }

    public int b() {
        return c;
    }

    public int c() {
        return d;
    }

    public int d() {
        return e;
    }

    public int e() {
        return f;
    }

    public int f() {
        return h;
    }

    b g() {
        return g;
    }

    public String toString() {
        return String.valueOf(b);
    }

}
