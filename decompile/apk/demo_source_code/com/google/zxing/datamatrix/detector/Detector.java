// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.zxing.datamatrix.detector;

import com.google.zxing.NotFoundException;
import com.google.zxing.common.a.a;
import com.google.zxing.common.a.b;
import com.google.zxing.common.f;
import com.google.zxing.common.h;
import com.google.zxing.i;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

public final class Detector {
    private static final class ResultPointsAndTransitionsComparator
        implements Serializable, Comparator {

        public int a(a a1, a a2) {
            return a1.c() - a2.c();
        }

        public int compare(Object obj, Object obj1) {
            return a((a)obj, (a)obj1);
        }

        private ResultPointsAndTransitionsComparator() {
        }

    }

    private static final class a {

        private final i a;
        private final i b;
        private final int c;

        i a() {
            return a;
        }

        i b() {
            return b;
        }

        public int c() {
            return c;
        }

        public String toString() {
            return (new StringBuilder()).append(a).append("/").append(b).append('/').append(c).toString();
        }

        private a(i j, i k, int l) {
            a = j;
            b = k;
            c = l;
        }

    }


    private final com.google.zxing.common.b a;
    private final b b;

    public Detector(com.google.zxing.common.b b1) {
        a = b1;
        b = new b(b1);
    }

    private static int a(i j, i k) {
        return com.google.zxing.common.a.a.a(i.a(j, k));
    }

    private static com.google.zxing.common.b a(com.google.zxing.common.b b1, i j, i k, i l, i i1, int j1, int k1) {
        return h.a().a(b1, j1, k1, 0.5F, 0.5F, (float)j1 - 0.5F, 0.5F, (float)j1 - 0.5F, (float)k1 - 0.5F, 0.5F, (float)k1 - 0.5F, j.a(), j.b(), i1.a(), i1.b(), l.a(), l.b(), k.a(), k.b());
    }

    private i a(i j, i k, i l, i i1, int j1) {
        i l1;
        float f2 = (float)a(j, k) / (float)j1;
        int k1 = a(l, i1);
        float f1 = (i1.a() - l.a()) / (float)k1;
        float f3 = (i1.b() - l.b()) / (float)k1;
        l1 = new i(f1 * f2 + i1.a(), f2 * f3 + i1.b());
        f3 = (float)a(j, l) / (float)j1;
        j1 = a(k, i1);
        f2 = (i1.a() - k.a()) / (float)j1;
        f1 = (i1.b() - k.b()) / (float)j1;
        i1 = new i(f2 * f3 + i1.a(), f3 * f1 + i1.b());
        if (a(l1)) goto _L2; else goto _L1
_L1:
        if (a(i1))
            j = i1;
        else
            j = null;
_L4:
        return j;
_L2:
        j = l1;
        if (a(i1)) {
            j = l1;
            if (Math.abs(b(l, l1).c() - b(k, l1).c()) > Math.abs(b(l, i1).c() - b(k, i1).c()))
                j = i1;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    private i a(i j, i k, i l, i i1, int j1, int k1) {
        i i2;
        float f1 = (float)a(j, k) / (float)j1;
        int l1 = a(l, i1);
        float f2 = (i1.a() - l.a()) / (float)l1;
        float f3 = (i1.b() - l.b()) / (float)l1;
        i2 = new i(f2 * f1 + i1.a(), f1 * f3 + i1.b());
        f2 = (float)a(j, l) / (float)k1;
        l1 = a(k, i1);
        f1 = (i1.a() - k.a()) / (float)l1;
        f3 = (i1.b() - k.b()) / (float)l1;
        i1 = new i(f1 * f2 + i1.a(), f2 * f3 + i1.b());
        if (a(i2)) goto _L2; else goto _L1
_L1:
        if (a(i1))
            j = i1;
        else
            j = null;
_L4:
        return j;
_L2:
        if (!a(i1)) {
            j = i2;
        } else {
            j = i1;
            if (Math.abs(j1 - b(l, i2).c()) + Math.abs(k1 - b(k, i2).c()) <= Math.abs(j1 - b(l, i1).c()) + Math.abs(k1 - b(k, i1).c()))
                j = i2;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    private static void a(Map map, i j) {
        Integer integer = (Integer)map.get(j);
        int k;
        if (integer == null)
            k = 1;
        else
            k = integer.intValue() + 1;
        map.put(j, Integer.valueOf(k));
    }

    private boolean a(i j) {
        boolean flag;
        if (j.a() >= 0.0F && j.a() < (float)a.e() && j.b() > 0.0F && j.b() < (float)a.f())
            flag = true;
        else
            flag = false;
        return flag;
    }

    private a b(i j, i k) {
        int i1 = (int)j.a();
        int l = (int)j.b();
        int k2 = (int)k.a();
        int j2 = (int)k.b();
        int j1;
        int l1;
        boolean flag;
        byte byte0;
        byte byte1;
        int l2;
        int i3;
        int j3;
        int k3;
        boolean flag1;
        boolean flag2;
        boolean flag3;
        com.google.zxing.common.b b1;
        if (Math.abs(j2 - l) > Math.abs(k2 - i1))
            flag = true;
        else
            flag = false;
        if (!flag) {
            int k1 = k2;
            int i2 = i1;
            k2 = j2;
            j2 = k1;
            i1 = l;
            l = i2;
        }
        k3 = Math.abs(j2 - l);
        j3 = Math.abs(k2 - i1);
        l2 = -k3;
        if (i1 < k2)
            byte0 = 1;
        else
            byte0 = -1;
        if (l < j2)
            byte1 = 1;
        else
            byte1 = -1;
        i3 = 0;
        b1 = a;
        if (flag)
            j1 = i1;
        else
            j1 = l;
        if (flag)
            l1 = l;
        else
            l1 = i1;
        flag2 = b1.a(j1, l1);
        l2 >>= 1;
        j1 = i3;
        if (l == j2) goto _L2; else goto _L1
_L1:
        b1 = a;
        if (flag)
            l1 = i1;
        else
            l1 = l;
        if (flag)
            i3 = l;
        else
            i3 = i1;
        flag3 = b1.a(l1, i3);
        l1 = j1;
        flag1 = flag2;
        if (flag3 != flag2) {
            l1 = j1 + 1;
            flag1 = flag3;
        }
        i3 = l2 + j3;
        j1 = i3;
        l2 = i1;
        if (i3 <= 0) goto _L4; else goto _L3
_L3:
        if (i1 != k2) goto _L6; else goto _L5
_L5:
        l = l1;
_L8:
        return new a(j, k, l);
_L6:
        l2 = i1 + byte0;
        j1 = i3 - k3;
_L4:
        l += byte1;
        i3 = j1;
        i1 = l2;
        j1 = l1;
        flag2 = flag1;
        l2 = i3;
        break MISSING_BLOCK_LABEL_143;
_L2:
        l = j1;
        if (true) goto _L8; else goto _L7
_L7:
    }

    public f a() {
        i ai[] = b.a();
        i j3 = ai[0];
        i k3 = ai[1];
        i i3 = ai[2];
        i l3 = ai[3];
        Object obj1 = new ArrayList(4);
        ((List) (obj1)).add(b(j3, k3));
        ((List) (obj1)).add(b(j3, i3));
        ((List) (obj1)).add(b(k3, l3));
        ((List) (obj1)).add(b(i3, l3));
        Collections.sort(((List) (obj1)), new ResultPointsAndTransitionsComparator());
        Object obj = (a)((List) (obj1)).get(0);
        obj1 = (a)((List) (obj1)).get(1);
        HashMap hashmap = new HashMap();
        a(((Map) (hashmap)), ((a) (obj)).a());
        a(((Map) (hashmap)), ((a) (obj)).b());
        a(((Map) (hashmap)), ((a) (obj1)).a());
        a(((Map) (hashmap)), ((a) (obj1)).b());
        obj = null;
        i k1 = null;
        obj1 = null;
        Object obj3 = hashmap.entrySet().iterator();
        while (((Iterator) (obj3)).hasNext())  {
            Object obj2 = (java.util.Map.Entry)((Iterator) (obj3)).next();
            i j2 = (i)((java.util.Map.Entry) (obj2)).getKey();
            if (((Integer)((java.util.Map.Entry) (obj2)).getValue()).intValue() == 2) {
                k1 = ((i) (obj));
                obj = obj1;
                obj1 = j2;
            } else
            if (obj == null) {
                obj = k1;
                k1 = j2;
                j2 = ((i) (obj1));
                obj1 = obj;
                obj = j2;
            } else {
                obj1 = k1;
                k1 = ((i) (obj));
                obj = j2;
            }
            j2 = ((i) (obj1));
            obj2 = k1;
            obj1 = obj;
            k1 = j2;
            obj = obj2;
        }
        if (obj == null || k1 == null || obj1 == null)
            throw NotFoundException.a();
        i ai1[] = new i[3];
        ai1[0] = ((i) (obj));
        ai1[1] = k1;
        ai1[2] = ((i) (obj1));
        i.a(ai1);
        i k2 = ai1[0];
        i l2 = ai1[1];
        ai1 = ai1[2];
        int j;
        int k;
        int j1;
        if (!hashmap.containsKey(j3))
            obj = j3;
        else
        if (!hashmap.containsKey(k3))
            obj = k3;
        else
        if (!hashmap.containsKey(i3))
            obj = i3;
        else
            obj = l3;
        j1 = b(ai1, ((i) (obj))).c();
        k = b(k2, ((i) (obj))).c();
        j = j1;
        if ((j1 & 1) == 1)
            j = j1 + 1;
        j1 = j + 2;
        j = k;
        if ((k & 1) == 1)
            j = k + 1;
        j += 2;
        if (j1 * 4 >= j * 7 || j * 4 >= j1 * 7) {
            i l1 = a(l2, k2, ((i) (ai1)), ((i) (obj)), j1, j);
            obj1 = l1;
            if (l1 == null)
                obj1 = obj;
            int l = b(ai1, ((i) (obj1))).c();
            j1 = b(k2, ((i) (obj1))).c();
            j = l;
            if ((l & 1) == 1)
                j = l + 1;
            l = j1;
            if ((j1 & 1) == 1)
                l = j1 + 1;
            obj = a(a, ((i) (ai1)), l2, k2, ((i) (obj1)), j, l);
        } else {
            i i2 = a(l2, k2, ((i) (ai1)), ((i) (obj)), Math.min(j, j1));
            obj1 = i2;
            if (i2 == null)
                obj1 = obj;
            int i1 = Math.max(b(ai1, ((i) (obj1))).c(), b(k2, ((i) (obj1))).c()) + 1;
            j = i1;
            if ((i1 & 1) == 1)
                j = i1 + 1;
            obj = a(a, ((i) (ai1)), l2, k2, ((i) (obj1)), j, j);
        }
        return new f(((com.google.zxing.common.b) (obj)), new i[] {
            ai1, l2, k2, obj1
        });
    }
}
