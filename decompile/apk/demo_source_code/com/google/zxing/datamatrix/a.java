// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.zxing.datamatrix;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.DecodeHintType;
import com.google.zxing.NotFoundException;
import com.google.zxing.ResultMetadataType;
import com.google.zxing.common.b;
import com.google.zxing.common.d;
import com.google.zxing.common.f;
import com.google.zxing.datamatrix.decoder.c;
import com.google.zxing.datamatrix.detector.Detector;
import com.google.zxing.g;
import com.google.zxing.h;
import com.google.zxing.i;
import java.util.Map;

public final class a
    implements g {

    private static final i a[] = new i[0];
    private final c b = new c();

    public a() {
    }

    private static int a(int ai[], b b1) {
        int k = b1.e();
        int j = ai[0];
        for (int l = ai[1]; j < k && b1.a(j, l); j++);
        if (j == k)
            throw NotFoundException.a();
        j -= ai[0];
        if (j == 0)
            throw NotFoundException.a();
        else
            return j;
    }

    private static b a(b b1) {
        int ai1[] = b1.c();
        int ai[] = b1.d();
        if (ai1 == null || ai == null)
            throw NotFoundException.a();
        int j1 = a(ai1, b1);
        int i1 = ai1[1];
        int j = ai[1];
        int k1 = ai1[0];
        int l1 = ((ai[0] - k1) + 1) / j1;
        int i2 = ((j - i1) + 1) / j1;
        if (l1 <= 0 || i2 <= 0)
            throw NotFoundException.a();
        int j2 = j1 >> 1;
        b b2 = new b(l1, i2);
        for (int k = 0; k < i2; k++) {
            for (int l = 0; l < l1; l++)
                if (b1.a(l * j1 + (k1 + j2), i1 + j2 + k * j1))
                    b2.b(l, k);

        }

        return b2;
    }

    public h a(com.google.zxing.b b1, Map map) {
        java.util.List list;
        if (map != null && map.containsKey(DecodeHintType.b)) {
            b1 = a(b1.c());
            b1 = b.a(b1);
            map = a;
        } else {
            map = (new Detector(b1.c())).a();
            b1 = b.a(map.d());
            map = map.e();
        }
        map = new h(b1.b(), b1.a(), map, BarcodeFormat.f);
        list = b1.c();
        if (list != null)
            map.a(ResultMetadataType.c, list);
        b1 = b1.d();
        if (b1 != null)
            map.a(ResultMetadataType.d, b1);
        return map;
    }

    public void a() {
    }

}
