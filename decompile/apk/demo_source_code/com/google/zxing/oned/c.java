// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.zxing.oned;

import com.google.zxing.*;
import com.google.zxing.common.a;
import com.google.zxing.h;
import com.google.zxing.i;
import java.util.Arrays;
import java.util.Map;

// Referenced classes of package com.google.zxing.oned:
//            k

public final class c extends k {

    static final int a[] = {
        52, 289, 97, 352, 49, 304, 112, 37, 292, 100, 
        265, 73, 328, 25, 280, 88, 13, 268, 76, 28, 
        259, 67, 322, 19, 274, 82, 7, 262, 70, 22, 
        385, 193, 448, 145, 400, 208, 133, 388, 196, 148, 
        168, 162, 138, 42
    };
    private static final char b[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. *$/+%".toCharArray();
    private static final int c = a[39];
    private final boolean d;
    private final boolean e;
    private final StringBuilder f;
    private final int g[];

    public c() {
        this(false);
    }

    public c(boolean flag) {
        this(flag, false);
    }

    public c(boolean flag, boolean flag1) {
        d = flag;
        e = flag1;
        f = new StringBuilder(20);
        g = new int[9];
    }

    private static char a(int j) {
        for (int l = 0; l < a.length; l++)
            if (a[l] == j)
                return b[l];

        throw NotFoundException.a();
    }

    private static int a(int ai[]) {
        int l;
        int k3;
        k3 = ai.length;
        l = 0;
_L9:
        int j;
        int j1;
        int l1;
        int j2;
        int k2;
        j = 0x7fffffff;
        k2 = ai.length;
        for (int i1 = 0; i1 < k2;) {
            int i2 = ai[i1];
            int k1 = j;
            if (i2 < j) {
                k1 = j;
                if (i2 > l)
                    k1 = i2;
            }
            i1++;
            j = k1;
        }

        j2 = 0;
        l = 0;
        l1 = 0;
        for (j1 = 0; j2 < k3; j1 = k2) {
            int l3 = ai[j2];
            int j3 = l;
            int l2 = l1;
            k2 = j1;
            if (l3 > j) {
                j3 = l | 1 << k3 - 1 - j2;
                k2 = j1 + 1;
                l2 = l1 + l3;
            }
            j2++;
            l = j3;
            l1 = l2;
        }

        if (j1 != 3)
            break MISSING_BLOCK_LABEL_206;
        j2 = 0;
        k2 = j1;
_L7:
        j1 = l;
        if (j2 >= k3) goto _L2; else goto _L1
_L1:
        j1 = l;
        if (k2 <= 0) goto _L2; else goto _L3
_L3:
        int i3;
        i3 = ai[j2];
        j1 = k2;
        if (i3 <= j) goto _L5; else goto _L4
_L4:
        j1 = k2 - 1;
        if (i3 << 1 < l1) goto _L5; else goto _L6
_L6:
        j1 = -1;
_L2:
        return j1;
_L5:
        j2++;
        k2 = j1;
          goto _L7
label0:
        {
            if (j1 > 3)
                break label0;
            j1 = -1;
        }
          goto _L2
        l = j;
        if (true) goto _L9; else goto _L8
_L8:
    }

    private static String a(CharSequence charsequence) {
        int j;
        int l;
        StringBuilder stringbuilder;
        l = charsequence.length();
        stringbuilder = new StringBuilder(l);
        j = 0;
_L9:
        char c1;
        char c2;
        if (j >= l)
            break MISSING_BLOCK_LABEL_289;
        c1 = charsequence.charAt(j);
        if (c1 != '+' && c1 != '$' && c1 != '%' && c1 != '/')
            break MISSING_BLOCK_LABEL_279;
        c2 = charsequence.charAt(j + 1);
        c1;
        JVM INSTR lookupswitch 4: default 112
    //                   36: 158
    //                   37: 186
    //                   43: 130
    //                   47: 238;
           goto _L1 _L2 _L3 _L4 _L5
_L1:
        c1 = '\0';
_L6:
        stringbuilder.append(c1);
        j++;
_L7:
        j++;
        continue; /* Loop/switch isn't completed */
_L4:
        if (c2 >= 'A' && c2 <= 'Z')
            c1 = (char)(c2 + 32);
        else
            throw FormatException.a();
          goto _L6
_L2:
        if (c2 >= 'A' && c2 <= 'Z')
            c1 = (char)(c2 - 64);
        else
            throw FormatException.a();
          goto _L6
_L3:
        if (c2 >= 'A' && c2 <= 'E')
            c1 = (char)(c2 - 38);
        else
        if (c2 >= 'F' && c2 <= 'W')
            c1 = (char)(c2 - 11);
        else
            throw FormatException.a();
          goto _L6
_L5:
        if (c2 >= 'A' && c2 <= 'O')
            c1 = (char)(c2 - 32);
        else
        if (c2 == 'Z')
            c1 = ':';
        else
            throw FormatException.a();
          goto _L6
        stringbuilder.append(c1);
          goto _L7
        return stringbuilder.toString();
        if (true) goto _L9; else goto _L8
_L8:
    }

    private static int[] a(a a1, int ai[]) {
        int i2 = a1.a();
        int j = a1.c(0);
        int l1 = ai.length;
        int i1 = j;
        int j1 = 0;
        int k1 = 0;
        while (i1 < i2)  {
            int l;
            if ((a1.a(i1) ^ j1) != 0) {
                ai[k1] = ai[k1] + 1;
                l = j1;
                j1 = j;
            } else {
                if (k1 == l1 - 1) {
                    if (a(ai) == c && a1.a(Math.max(0, j - (i1 - j >> 1)), j, false))
                        return (new int[] {
                            j, i1
                        });
                    l = j + (ai[0] + ai[1]);
                    System.arraycopy(ai, 2, ai, 0, l1 - 2);
                    ai[l1 - 2] = 0;
                    ai[l1 - 1] = 0;
                    j = k1 - 1;
                } else {
                    k1++;
                    l = j;
                    j = k1;
                }
                ai[j] = 1;
                if (j1 == 0) {
                    boolean flag = true;
                    j1 = l;
                    k1 = j;
                    l = ((flag) ? 1 : 0);
                } else {
                    boolean flag1 = false;
                    j1 = l;
                    k1 = j;
                    l = ((flag1) ? 1 : 0);
                }
            }
            i1++;
            j = j1;
            j1 = l;
        }
        throw NotFoundException.a();
    }

    public h a(int j, a a1, Map map) {
        int ai[] = g;
        Arrays.fill(ai, 0);
        Object obj = f;
        ((StringBuilder) (obj)).setLength(0);
        map = a(a1, ai);
        int l = a1.c(map[1]);
        int k2 = a1.a();
        do {
            a(a1, l, ai);
            int i1 = a(ai);
            if (i1 < 0)
                throw NotFoundException.a();
            char c1 = a(i1);
            ((StringBuilder) (obj)).append(c1);
            int j2 = ai.length;
            int k1 = 0;
            i1 = l;
            for (; k1 < j2; k1++)
                i1 += ai[k1];

            j2 = a1.c(i1);
            if (c1 == '*') {
                ((StringBuilder) (obj)).setLength(((StringBuilder) (obj)).length() - 1);
                int j1 = 0;
                int i3 = ai.length;
                for (int l1 = 0; l1 < i3; l1++)
                    j1 += ai[l1];

                if (j2 != k2 && j2 - l - j1 << 1 < j1)
                    throw NotFoundException.a();
                if (d) {
                    int l2 = ((StringBuilder) (obj)).length() - 1;
                    j2 = 0;
                    for (int i2 = 0; i2 < l2; i2++)
                        j2 += "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. *$/+%".indexOf(f.charAt(i2));

                    if (((StringBuilder) (obj)).charAt(l2) != b[j2 % 43])
                        throw ChecksumException.a();
                    ((StringBuilder) (obj)).setLength(l2);
                }
                if (((StringBuilder) (obj)).length() == 0)
                    throw NotFoundException.a();
                float f1;
                float f2;
                float f3;
                i j3;
                if (e)
                    a1 = a(((CharSequence) (obj)));
                else
                    a1 = ((StringBuilder) (obj)).toString();
                f3 = (float)(map[1] + map[0]) / 2.0F;
                f2 = l;
                f1 = (float)j1 / 2.0F;
                j3 = new i(f3, j);
                map = new i(f2 + f1, j);
                obj = BarcodeFormat.c;
                return new h(a1, null, new i[] {
                    j3, map
                }, ((BarcodeFormat) (obj)));
            }
            l = j2;
        } while (true);
    }

}
