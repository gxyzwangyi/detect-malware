// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.zxing.oned;

import com.google.zxing.*;
import com.google.zxing.common.a;
import com.google.zxing.*;
import java.util.Arrays;
import java.util.Map;

// Referenced classes of package com.google.zxing.oned:
//            k, o, g

public abstract class p extends k {

    static final int b[] = {
        1, 1, 1
    };
    static final int c[] = {
        1, 1, 1, 1, 1
    };
    static final int d[][] = {
        {
            3, 2, 1, 1
        }, {
            2, 2, 2, 1
        }, {
            2, 1, 2, 2
        }, {
            1, 4, 1, 1
        }, {
            1, 1, 3, 2
        }, {
            1, 2, 3, 1
        }, {
            1, 1, 1, 4
        }, {
            1, 3, 1, 2
        }, {
            1, 2, 1, 3
        }, {
            3, 1, 1, 2
        }
    };
    static final int e[][];
    private final StringBuilder a = new StringBuilder(20);
    private final o f = new o();
    private final g g = new g();

    protected p() {
    }

    static int a(a a1, int ai[], int l, int ai1[][]) {
        a(a1, l, ai);
        int i1 = 122;
        int j1 = -1;
        int l1 = ai1.length;
        for (l = 0; l < l1; l++) {
            int k1 = a(ai, ai1[l], 179);
            if (k1 < i1) {
                j1 = l;
                i1 = k1;
            }
        }

        if (j1 >= 0)
            return j1;
        else
            throw NotFoundException.a();
    }

    static boolean a(CharSequence charsequence) {
        int k1;
        boolean flag;
        flag = false;
        k1 = charsequence.length();
        if (k1 != 0) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        int j1 = k1 - 2;
        int l = 0;
        for (; j1 >= 0; j1 -= 2) {
            int i2 = charsequence.charAt(j1) - 48;
            if (i2 < 0 || i2 > 9)
                throw FormatException.a();
            l += i2;
        }

        j1 = l * 3;
        for (int i1 = k1 - 1; i1 >= 0; i1 -= 2) {
            int l1 = charsequence.charAt(i1) - 48;
            if (l1 < 0 || l1 > 9)
                throw FormatException.a();
            j1 += l1;
        }

        if (j1 % 10 == 0)
            flag = true;
        if (true) goto _L1; else goto _L3
_L3:
    }

    static int[] a(a a1) {
        int ai2[] = new int[b.length];
        int l = 0;
        int ai[] = null;
        boolean flag = false;
        do {
            if (flag)
                break;
            Arrays.fill(ai2, 0, b.length, 0);
            int ai1[] = a(a1, l, false, b, ai2);
            int j1 = ai1[0];
            int i1 = ai1[1];
            int k1 = j1 - (i1 - j1);
            l = i1;
            ai = ai1;
            if (k1 >= 0) {
                flag = a1.a(k1, j1, false);
                l = i1;
                ai = ai1;
            }
        } while (true);
        return ai;
    }

    static int[] a(a a1, int l, boolean flag, int ai[]) {
        return a(a1, l, flag, ai, new int[ai.length]);
    }

    private static int[] a(a a1, int l, boolean flag, int ai[], int ai1[]) {
        int i2 = ai.length;
        int l1 = a1.a();
        int i1;
        int j1;
        if (flag)
            l = a1.d(l);
        else
            l = a1.c(l);
        j1 = l;
        i1 = 0;
        while (j1 < l1)  {
            int k1;
            if (a1.a(j1) ^ flag) {
                ai1[i1] = ai1[i1] + 1;
                k1 = i1;
                i1 = l;
            } else {
                if (i1 == i2 - 1) {
                    if (a(ai1, ai, 179) < 122)
                        return (new int[] {
                            l, j1
                        });
                    k1 = l + (ai1[0] + ai1[1]);
                    System.arraycopy(ai1, 2, ai1, 0, i2 - 2);
                    ai1[i2 - 2] = 0;
                    ai1[i2 - 1] = 0;
                    l = i1 - 1;
                    i1 = k1;
                } else {
                    k1 = i1 + 1;
                    i1 = l;
                    l = k1;
                }
                ai1[l] = 1;
                if (!flag) {
                    flag = true;
                    k1 = l;
                } else {
                    flag = false;
                    k1 = l;
                }
            }
            j1++;
            l = i1;
            i1 = k1;
        }
        throw NotFoundException.a();
    }

    protected abstract int a(a a1, int ai[], StringBuilder stringbuilder);

    public h a(int l, a a1, Map map) {
        return a(l, a1, a(a1), map);
    }

    public h a(int l, a a1, int ai[], Map map) {
        int i1;
        int k1;
        Object obj;
        Object obj1;
        int ai1[];
        if (map == null)
            obj = null;
        else
            obj = (j)map.get(DecodeHintType.j);
        if (obj != null)
            ((j) (obj)).a(new i((float)(ai[0] + ai[1]) / 2.0F, l));
        obj1 = a;
        ((StringBuilder) (obj1)).setLength(0);
        i1 = a(a1, ai, ((StringBuilder) (obj1)));
        if (obj != null)
            ((j) (obj)).a(new i(i1, l));
        ai1 = a(a1, i1);
        if (obj != null)
            ((j) (obj)).a(new i((float)(ai1[0] + ai1[1]) / 2.0F, l));
        i1 = ai1[1];
        k1 = (i1 - ai1[0]) + i1;
        if (k1 >= a1.a() || !a1.a(i1, k1, false))
            throw NotFoundException.a();
        obj = ((StringBuilder) (obj1)).toString();
        if (((String) (obj)).length() < 8)
            throw FormatException.a();
        if (!a(((String) (obj))))
            throw ChecksumException.a();
        float f2 = (float)(ai[1] + ai[0]) / 2.0F;
        float f1 = (float)(ai1[1] + ai1[0]) / 2.0F;
        obj1 = b();
        ai = new h(((String) (obj)), null, new i[] {
            new i(f2, l), new i(f1, l)
        }, ((BarcodeFormat) (obj1)));
        try {
            a1 = f.a(l, a1, ai1[1]);
            ai.a(ResultMetadataType.h, a1.a());
            ai.a(a1.e());
            ai.a(a1.c());
            l = a1.a().length();
        }
        // Misplaced declaration of an exception variable
        catch (a a1) {
            l = 0;
        }
        if (map == null)
            a1 = null;
        else
            a1 = (int[])(int[])map.get(DecodeHintType.k);
        if (a1 != null) {
            boolean flag1 = false;
            int l1 = a1.length;
            int j1 = 0;
label0:
            do {
label1:
                {
                    boolean flag = flag1;
                    if (j1 < l1) {
                        if (l != a1[j1])
                            break label1;
                        flag = true;
                    }
                    if (!flag)
                        throw NotFoundException.a();
                    break label0;
                }
                j1++;
            } while (true);
        }
        if (obj1 == BarcodeFormat.h || obj1 == BarcodeFormat.o) {
            a1 = g.a(((String) (obj)));
            if (a1 != null)
                ai.a(ResultMetadataType.g, a1);
        }
        return ai;
    }

    boolean a(String s) {
        return a(((CharSequence) (s)));
    }

    int[] a(a a1, int l) {
        return a(a1, l, false, b);
    }

    abstract BarcodeFormat b();

    static  {
        e = new int[20][];
        System.arraycopy(d, 0, e, 0, 10);
        for (int l = 10; l < 20; l++) {
            int ai[] = d[l - 10];
            int ai1[] = new int[ai.length];
            for (int i1 = 0; i1 < ai.length; i1++)
                ai1[i1] = ai[ai.length - i1 - 1];

            e[l] = ai1;
        }

    }
}
