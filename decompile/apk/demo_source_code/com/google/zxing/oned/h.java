// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.zxing.oned;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.DecodeHintType;
import com.google.zxing.FormatException;
import com.google.zxing.NotFoundException;
import com.google.zxing.common.a;
import com.google.zxing.i;
import java.util.Map;

// Referenced classes of package com.google.zxing.oned:
//            k

public final class h extends k {

    static final int a[][];
    private static final int b[] = {
        6, 8, 10, 12, 14
    };
    private static final int d[] = {
        1, 1, 1, 1
    };
    private static final int e[] = {
        1, 1, 3
    };
    private int c;

    public h() {
        c = -1;
    }

    private static int a(int ai[]) {
        int l = 107;
        int i1 = -1;
        int k1 = a.length;
        for (int j = 0; j < k1; j++) {
            int j1 = a(ai, a[j], 199);
            if (j1 < l) {
                i1 = j;
                l = j1;
            }
        }

        if (i1 >= 0)
            return i1;
        else
            throw NotFoundException.a();
    }

    private void a(a a1, int j) {
        int l = c * 10;
        if (l >= j)
            l = j;
        j--;
        do {
            if (l <= 0 || j < 0 || a1.a(j))
                if (l != 0)
                    throw NotFoundException.a();
                else
                    return;
            l--;
            j--;
        } while (true);
    }

    private static void a(a a1, int j, int l, StringBuilder stringbuilder) {
        int ai2[] = new int[10];
        int ai1[] = new int[5];
        int ai[] = new int[5];
        while (j < l)  {
            a(a1, j, ai2);
            for (int i1 = 0; i1 < 5; i1++) {
                int k1 = i1 << 1;
                ai1[i1] = ai2[k1];
                ai[i1] = ai2[k1 + 1];
            }

            stringbuilder.append((char)(a(ai1) + 48));
            stringbuilder.append((char)(a(ai) + 48));
            int l1 = ai2.length;
            int j1 = 0;
            while (j1 < l1)  {
                j += ai2[j1];
                j1++;
            }
        }
    }

    private static int c(a a1) {
        int j = a1.a();
        int l = a1.c(0);
        if (l == j)
            throw NotFoundException.a();
        else
            return l;
    }

    private static int[] c(a a1, int j, int ai[]) {
        int i2 = ai.length;
        int ai1[] = new int[i2];
        int j2 = a1.a();
        int l = j;
        int l1 = 0;
        int k1 = 0;
        int j1 = j;
        j = l;
        while (j1 < j2)  {
            int i1;
            if ((a1.a(j1) ^ k1) != 0) {
                ai1[l1] = ai1[l1] + 1;
                i1 = k1;
                k1 = j;
            } else {
                if (l1 == i2 - 1) {
                    if (a(ai1, ai, 199) < 107)
                        return (new int[] {
                            j, j1
                        });
                    i1 = j + (ai1[0] + ai1[1]);
                    System.arraycopy(ai1, 2, ai1, 0, i2 - 2);
                    ai1[i2 - 2] = 0;
                    ai1[i2 - 1] = 0;
                    j = l1 - 1;
                } else {
                    l1++;
                    i1 = j;
                    j = l1;
                }
                ai1[j] = 1;
                if (k1 == 0) {
                    boolean flag = true;
                    k1 = i1;
                    l1 = j;
                    i1 = ((flag) ? 1 : 0);
                } else {
                    boolean flag1 = false;
                    k1 = i1;
                    l1 = j;
                    i1 = ((flag1) ? 1 : 0);
                }
            }
            j1++;
            j = k1;
            k1 = i1;
        }
        throw NotFoundException.a();
    }

    public com.google.zxing.h a(int j, a a1, Map map) {
        int ai1[] = a(a1);
        int ai[] = b(a1);
        Object obj = new StringBuilder(20);
        a(a1, ai1[1], ai[0], ((StringBuilder) (obj)));
        obj = ((StringBuilder) (obj)).toString();
        int l;
        int i1;
        int j1;
        int k1;
        int l1;
        i i2;
        if (map != null)
            a1 = (int[])(int[])map.get(DecodeHintType.f);
        else
            a1 = null;
        map = a1;
        if (a1 == null)
            map = b;
        k1 = ((String) (obj)).length();
        l1 = map.length;
        i1 = 0;
        l = 0;
        if (i1 >= l1) goto _L2; else goto _L1
_L1:
        j1 = map[i1];
        if (k1 != j1) goto _L4; else goto _L3
_L3:
        i1 = 1;
_L6:
        j1 = i1;
        if (i1 == 0) {
            j1 = i1;
            if (k1 > l)
                j1 = 1;
        }
        if (j1 == 0) {
            throw FormatException.a();
        } else {
            a1 = new i(ai1[1], j);
            i2 = new i(ai[0], j);
            map = BarcodeFormat.i;
            return new com.google.zxing.h(((String) (obj)), null, new i[] {
                a1, i2
            }, map);
        }
_L4:
        if (j1 > l)
            l = j1;
        i1++;
        break MISSING_BLOCK_LABEL_93;
_L2:
        i1 = 0;
        if (true) goto _L6; else goto _L5
_L5:
    }

    int[] a(a a1) {
        int ai[] = c(a1, c(a1), d);
        c = ai[1] - ai[0] >> 2;
        a(a1, ai[0]);
        return ai;
    }

    int[] b(a a1) {
        a1.d();
        int ai[];
        ai = c(a1, c(a1), e);
        a(a1, ai[0]);
        int j = ai[0];
        ai[0] = a1.a() - ai[1];
        ai[1] = a1.a() - j;
        a1.d();
        return ai;
        Exception exception;
        exception;
        a1.d();
        throw exception;
    }

    static  {
        int ai[] = {
            1, 1, 3, 3, 1
        };
        int ai1[] = {
            3, 1, 1, 1, 3
        };
        int ai2[] = {
            1, 3, 1, 1, 3
        };
        int ai3[] = {
            3, 3, 1, 1, 1
        };
        int ai4[] = {
            1, 3, 3, 1, 1
        };
        int ai5[] = {
            1, 1, 1, 3, 3
        };
        int ai6[] = {
            3, 1, 1, 3, 1
        };
        int ai7[] = {
            1, 3, 1, 3, 1
        };
        a = (new int[][] {
            ai, ai1, ai2, ai3, new int[] {
                1, 1, 3, 1, 3
            }, new int[] {
                3, 1, 3, 1, 1
            }, ai4, ai5, ai6, ai7
        });
    }
}
