// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.zxing.oned;

import com.google.zxing.*;
import com.google.zxing.common.a;
import com.google.zxing.h;
import com.google.zxing.i;
import java.util.Arrays;
import java.util.Map;

// Referenced classes of package com.google.zxing.oned:
//            k

public final class d extends k {

    private static final char a[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%abcd*".toCharArray();
    private static final int b[] = {
        276, 328, 324, 322, 296, 292, 290, 336, 274, 266, 
        424, 420, 418, 404, 402, 394, 360, 356, 354, 308, 
        282, 344, 332, 326, 300, 278, 436, 434, 428, 422, 
        406, 410, 364, 358, 310, 314, 302, 468, 466, 458, 
        366, 374, 430, 294, 474, 470, 306, 350
    };
    private static final int c = b[47];
    private final StringBuilder d = new StringBuilder(20);
    private final int e[] = new int[6];

    public d() {
    }

    private static char a(int j) {
        for (int l = 0; l < b.length; l++)
            if (b[l] == j)
                return a[l];

        throw NotFoundException.a();
    }

    private static int a(int ai[]) {
        int l2 = ai.length;
        int l = ai.length;
        int j = 0;
        int k1;
        int l1;
        for (k1 = 0; j < l; k1 = l1 + k1) {
            l1 = ai[j];
            j++;
        }

        int i2 = 0;
        j = 0;
        do {
            int j2;
label0:
            {
                int i1 = j;
                if (i2 < l2) {
                    i1 = ((ai[i2] << 8) * 9) / k1;
                    j2 = i1 >> 8;
                    if ((i1 & 0xff) > 127)
                        j2++;
                    if (j2 >= 1 && j2 <= 4)
                        break label0;
                    i1 = -1;
                }
                return i1;
            }
            if ((i2 & 1) == 0) {
                int k2 = 0;
                int j1 = j;
                do {
                    j = j1;
                    if (k2 >= j2)
                        break;
                    k2++;
                    j1 = j1 << 1 | 1;
                } while (true);
            } else {
                j <<= j2;
            }
            i2++;
        } while (true);
    }

    private static String a(CharSequence charsequence) {
        int j;
        int l;
        StringBuilder stringbuilder;
        l = charsequence.length();
        stringbuilder = new StringBuilder(l);
        j = 0;
_L9:
        char c1;
        char c2;
        if (j >= l)
            break MISSING_BLOCK_LABEL_273;
        c1 = charsequence.charAt(j);
        if (c1 < 'a' || c1 > 'd')
            break MISSING_BLOCK_LABEL_263;
        if (j >= l - 1)
            throw FormatException.a();
        c2 = charsequence.charAt(j + 1);
        c1;
        JVM INSTR tableswitch 97 100: default 96
    //                   97 142
    //                   98 170
    //                   99 222
    //                   100 114;
           goto _L1 _L2 _L3 _L4 _L5
_L1:
        c1 = '\0';
_L6:
        stringbuilder.append(c1);
        j++;
_L7:
        j++;
        continue; /* Loop/switch isn't completed */
_L5:
        if (c2 >= 'A' && c2 <= 'Z')
            c1 = (char)(c2 + 32);
        else
            throw FormatException.a();
          goto _L6
_L2:
        if (c2 >= 'A' && c2 <= 'Z')
            c1 = (char)(c2 - 64);
        else
            throw FormatException.a();
          goto _L6
_L3:
        if (c2 >= 'A' && c2 <= 'E')
            c1 = (char)(c2 - 38);
        else
        if (c2 >= 'F' && c2 <= 'W')
            c1 = (char)(c2 - 11);
        else
            throw FormatException.a();
          goto _L6
_L4:
        if (c2 >= 'A' && c2 <= 'O')
            c1 = (char)(c2 - 32);
        else
        if (c2 == 'Z')
            c1 = ':';
        else
            throw FormatException.a();
          goto _L6
        stringbuilder.append(c1);
          goto _L7
        return stringbuilder.toString();
        if (true) goto _L9; else goto _L8
_L8:
    }

    private static void a(CharSequence charsequence, int j, int l) {
        int i1 = 1;
        int k1 = j - 1;
        int j1 = 0;
        do {
            int l1 = i1;
            if (k1 < 0)
                break;
            int j2 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%abcd*".indexOf(charsequence.charAt(k1));
            int i2 = l1 + 1;
            i1 = i2;
            if (i2 > l)
                i1 = 1;
            k1--;
            j1 = j2 * l1 + j1;
        } while (true);
        if (charsequence.charAt(j) != a[j1 % 47])
            throw ChecksumException.a();
        else
            return;
    }

    private int[] a(a a1) {
        int l1 = a1.a();
        int j = a1.c(0);
        Arrays.fill(e, 0);
        int ai[] = e;
        int k1 = ai.length;
        int i1 = j;
        boolean flag = false;
        int j1 = 0;
        while (i1 < l1)  {
            int l;
            if (a1.a(i1) ^ flag) {
                ai[j1] = ai[j1] + 1;
                l = ((flag) ? 1 : 0);
            } else {
                if (j1 == k1 - 1) {
                    if (a(ai) == c)
                        return (new int[] {
                            j, i1
                        });
                    j += ai[0] + ai[1];
                    System.arraycopy(ai, 2, ai, 0, k1 - 2);
                    ai[k1 - 2] = 0;
                    ai[k1 - 1] = 0;
                    l = j1 - 1;
                } else {
                    l = j1 + 1;
                }
                ai[l] = 1;
                if (!flag) {
                    boolean flag1 = true;
                    j1 = l;
                    l = ((flag1) ? 1 : 0);
                } else {
                    boolean flag2 = false;
                    j1 = l;
                    l = ((flag2) ? 1 : 0);
                }
            }
            i1++;
            flag = l;
        }
        throw NotFoundException.a();
    }

    private static void b(CharSequence charsequence) {
        int j = charsequence.length();
        a(charsequence, j - 2, 20);
        a(charsequence, j - 1, 15);
    }

    public h a(int j, a a1, Map map) {
        map = a(a1);
        int l = a1.c(map[1]);
        int j2 = a1.a();
        int ai[] = e;
        Arrays.fill(ai, 0);
        Object obj = d;
        ((StringBuilder) (obj)).setLength(0);
        do {
            a(a1, l, ai);
            int i1 = a(ai);
            if (i1 < 0)
                throw NotFoundException.a();
            char c1 = a(i1);
            ((StringBuilder) (obj)).append(c1);
            int i2 = ai.length;
            i1 = 0;
            int k1 = l;
            for (; i1 < i2; i1++)
                k1 += ai[i1];

            i2 = a1.c(k1);
            if (c1 == '*') {
                ((StringBuilder) (obj)).deleteCharAt(((StringBuilder) (obj)).length() - 1);
                int l1 = 0;
                int k2 = ai.length;
                for (int j1 = 0; j1 < k2; j1++)
                    l1 += ai[j1];

                if (i2 == j2 || !a1.a(i2))
                    throw NotFoundException.a();
                if (((StringBuilder) (obj)).length() < 2) {
                    throw NotFoundException.a();
                } else {
                    b(((CharSequence) (obj)));
                    ((StringBuilder) (obj)).setLength(((StringBuilder) (obj)).length() - 2);
                    a1 = a(((CharSequence) (obj)));
                    float f1 = (float)(map[1] + map[0]) / 2.0F;
                    float f2 = l;
                    float f = (float)l1 / 2.0F;
                    obj = new i(f1, j);
                    i l2 = new i(f2 + f, j);
                    map = BarcodeFormat.d;
                    return new h(a1, null, new i[] {
                        obj, l2
                    }, map);
                }
            }
            l = i2;
        } while (true);
    }

}
