// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.zxing.oned.rss.expanded.decoders;

import com.google.zxing.FormatException;
import com.google.zxing.common.a;

// Referenced classes of package com.google.zxing.oned.rss.expanded.decoders:
//            CurrentParsingState, l, o, n, 
//            m, q

final class r {

    private final a a;
    private final CurrentParsingState b = new CurrentParsingState();
    private final StringBuilder c = new StringBuilder();

    r(a a1) {
        a = a1;
    }

    static int a(a a1, int j, int k) {
        int k1 = 0;
        for (int i1 = 0; i1 < k;) {
            int j1 = k1;
            if (a1.a(j + i1))
                j1 = k1 | 1 << k - i1 - 1;
            i1++;
            k1 = j1;
        }

        return k1;
    }

    private n a() {
        do {
            int j = b.a();
            boolean flag;
            boolean flag1;
            l l1;
            if (b.b()) {
                l1 = d();
                flag1 = l1.b();
            } else
            if (b.c()) {
                l1 = c();
                flag1 = l1.b();
            } else {
                l1 = b();
                flag1 = l1.b();
            }
            if (j != b.a())
                flag = true;
            else
                flag = false;
            while (!flag && !flag1 || flag1) 
                return l1.a();
        } while (true);
    }

    private boolean a(int j) {
        boolean flag1 = true;
        if (j + 7 <= a.a()) goto _L2; else goto _L1
_L1:
        boolean flag;
        if (j + 4 <= a.a())
            flag = flag1;
        else
            flag = false;
_L4:
        return flag;
_L2:
        for (int k = j; k < j + 3; k++) {
            flag = flag1;
            if (a.a(k))
                continue; /* Loop/switch isn't completed */
        }

        flag = a.a(j + 3);
        if (true) goto _L4; else goto _L3
_L3:
    }

    private l b() {
_L1:
        Object obj;
        if (!a(b.a()))
            break MISSING_BLOCK_LABEL_181;
        obj = b(b.a());
        b.a(((o) (obj)).e());
        if (((o) (obj)).c()) {
            if (((o) (obj)).d())
                obj = new n(b.a(), c.toString());
            else
                obj = new n(b.a(), c.toString(), ((o) (obj)).b());
            obj = new l(((n) (obj)), true);
        } else {
label0:
            {
                c.append(((o) (obj)).a());
                if (!((o) (obj)).d())
                    break label0;
                obj = new l(new n(b.a(), c.toString()), true);
            }
        }
_L2:
        return ((l) (obj));
        c.append(((o) (obj)).b());
          goto _L1
        if (i(b.a())) {
            b.e();
            b.b(4);
        }
        obj = new l(false);
          goto _L2
    }

    private o b(int j) {
        o o1;
        if (j + 7 > a.a()) {
            j = a(j, 4);
            if (j == 0)
                o1 = new o(a.a(), 10, 10);
            else
                o1 = new o(a.a(), j - 1, 10);
        } else {
            int k = a(j, 7);
            o1 = new o(j + 7, (k - 8) / 11, (k - 8) % 11);
        }
        return o1;
    }

    private l c() {
_L3:
        Object obj;
        if (!c(b.a()))
            break MISSING_BLOCK_LABEL_91;
        obj = d(b.a());
        b.a(((m) (obj)).e());
        if (!((m) (obj)).b()) goto _L2; else goto _L1
_L1:
        obj = new l(new n(b.a(), c.toString()), true);
_L4:
        return ((l) (obj));
_L2:
        c.append(((m) (obj)).a());
          goto _L3
        if (h(b.a())) {
            b.b(3);
            b.d();
        } else
        if (g(b.a())) {
            if (b.a() + 5 < a.a())
                b.b(5);
            else
                b.a(a.a());
            b.e();
        }
        obj = new l(false);
          goto _L4
    }

    private boolean c(int j) {
        boolean flag1;
        boolean flag2;
        flag2 = true;
        flag1 = false;
        if (j + 5 <= a.a()) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        int k = a(j, 5);
        if (k >= 5 && k < 16) {
            flag = true;
        } else {
            flag = flag1;
            if (j + 7 <= a.a()) {
                int i1 = a(j, 7);
                if (i1 >= 64 && i1 < 116) {
                    flag = true;
                } else {
                    flag = flag1;
                    if (j + 8 <= a.a()) {
                        j = a(j, 8);
                        if (j >= 232 && j < 253)
                            flag = flag2;
                        else
                            flag = false;
                    }
                }
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    private l d() {
_L3:
        Object obj;
        if (!e(b.a()))
            break MISSING_BLOCK_LABEL_91;
        obj = f(b.a());
        b.a(((m) (obj)).e());
        if (!((m) (obj)).b()) goto _L2; else goto _L1
_L1:
        obj = new l(new n(b.a(), c.toString()), true);
_L4:
        return ((l) (obj));
_L2:
        c.append(((m) (obj)).a());
          goto _L3
        if (h(b.a())) {
            b.b(3);
            b.d();
        } else
        if (g(b.a())) {
            if (b.a() + 5 < a.a())
                b.b(5);
            else
                b.a(a.a());
            b.f();
        }
        obj = new l(false);
          goto _L4
    }

    private m d(int j) {
        int k = a(j, 5);
        if (k != 15) goto _L2; else goto _L1
_L1:
        m m1 = new m(j + 5, '$');
_L26:
        return m1;
_L2:
        if (k >= 5 && k < 15) {
            m1 = new m(j + 5, (char)((k + 48) - 5));
            continue; /* Loop/switch isn't completed */
        }
        k = a(j, 7);
        if (k >= 64 && k < 90) {
            m1 = new m(j + 7, (char)(k + 1));
            continue; /* Loop/switch isn't completed */
        }
        if (k >= 90 && k < 116) {
            m1 = new m(j + 7, (char)(k + 7));
            continue; /* Loop/switch isn't completed */
        }
        a(j, 8);
        JVM INSTR tableswitch 232 252: default 240
    //                   232 244
    //                   233 264
    //                   234 270
    //                   235 276
    //                   236 282
    //                   237 288
    //                   238 294
    //                   239 300
    //                   240 306
    //                   241 312
    //                   242 318
    //                   243 324
    //                   244 330
    //                   245 336
    //                   246 342
    //                   247 348
    //                   248 354
    //                   249 360
    //                   250 366
    //                   251 372
    //                   252 378;
           goto _L3 _L4 _L5 _L6 _L7 _L8 _L9 _L10 _L11 _L12 _L13 _L14 _L15 _L16 _L17 _L18 _L19 _L20 _L21 _L22 _L23 _L24
_L24:
        break MISSING_BLOCK_LABEL_378;
_L5:
        break; /* Loop/switch isn't completed */
_L3:
        throw FormatException.a();
_L4:
        char c1 = '!';
_L27:
        m1 = new m(j + 8, c1);
        if (true) goto _L26; else goto _L25
_L25:
        c1 = '"';
          goto _L27
_L6:
        c1 = '%';
          goto _L27
_L7:
        c1 = '&';
          goto _L27
_L8:
        c1 = '\'';
          goto _L27
_L9:
        c1 = '(';
          goto _L27
_L10:
        c1 = ')';
          goto _L27
_L11:
        c1 = '*';
          goto _L27
_L12:
        c1 = '+';
          goto _L27
_L13:
        c1 = ',';
          goto _L27
_L14:
        c1 = '-';
          goto _L27
_L15:
        c1 = '.';
          goto _L27
_L16:
        c1 = '/';
          goto _L27
_L17:
        c1 = ':';
          goto _L27
_L18:
        c1 = ';';
          goto _L27
_L19:
        c1 = '<';
          goto _L27
_L20:
        c1 = '=';
          goto _L27
_L21:
        c1 = '>';
          goto _L27
_L22:
        c1 = '?';
          goto _L27
_L23:
        c1 = '_';
          goto _L27
        c1 = ' ';
          goto _L27
    }

    private boolean e(int j) {
        boolean flag;
        boolean flag1;
        flag1 = true;
        flag = false;
        if (j + 5 <= a.a()) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        int k = a(j, 5);
        if (k >= 5 && k < 16)
            flag = true;
        else
        if (j + 6 <= a.a()) {
            j = a(j, 6);
            if (j >= 16 && j < 63)
                flag = flag1;
            else
                flag = false;
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    private m f(int j) {
        int k = a(j, 5);
        if (k != 15) goto _L2; else goto _L1
_L1:
        m m1 = new m(j + 5, '$');
_L10:
        return m1;
_L2:
        if (k >= 5 && k < 15) {
            m1 = new m(j + 5, (char)((k + 48) - 5));
            continue; /* Loop/switch isn't completed */
        }
        k = a(j, 6);
        if (k >= 32 && k < 58) {
            m1 = new m(j + 6, (char)(k + 33));
            continue; /* Loop/switch isn't completed */
        }
        k;
        JVM INSTR tableswitch 58 62: default 140
    //                   58 167
    //                   59 187
    //                   60 193
    //                   61 199
    //                   62 205;
           goto _L3 _L4 _L5 _L6 _L7 _L8
_L8:
        break MISSING_BLOCK_LABEL_205;
_L5:
        break; /* Loop/switch isn't completed */
_L3:
        throw new IllegalStateException((new StringBuilder()).append("Decoding invalid alphanumeric value: ").append(k).toString());
_L4:
        char c1 = '*';
_L11:
        m1 = new m(j + 6, c1);
        if (true) goto _L10; else goto _L9
_L9:
        c1 = ',';
          goto _L11
_L6:
        c1 = '-';
          goto _L11
_L7:
        c1 = '.';
          goto _L11
        c1 = '/';
          goto _L11
    }

    private boolean g(int j) {
        boolean flag1 = false;
        if (j + 1 <= a.a()) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L8:
        return flag;
_L2:
        int k = 0;
_L4:
        if (k >= 5 || k + j >= a.a())
            break MISSING_BLOCK_LABEL_87;
        if (k != 2)
            break; /* Loop/switch isn't completed */
        flag = flag1;
        if (!a.a(j + 2))
            continue; /* Loop/switch isn't completed */
_L6:
        k++;
        if (true) goto _L4; else goto _L3
_L3:
        if (!a.a(j + k)) goto _L6; else goto _L5
_L5:
        flag = flag1;
        continue; /* Loop/switch isn't completed */
        flag = true;
        if (true) goto _L8; else goto _L7
_L7:
    }

    private boolean h(int j) {
        boolean flag1 = false;
        if (j + 3 <= a.a()) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        for (int k = j; k < j + 3; k++) {
            flag = flag1;
            if (a.a(k))
                continue; /* Loop/switch isn't completed */
        }

        flag = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    private boolean i(int j) {
        boolean flag1 = false;
        if (j + 1 <= a.a()) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        for (int k = 0; k < 4 && k + j < a.a(); k++) {
            flag = flag1;
            if (a.a(j + k))
                continue; /* Loop/switch isn't completed */
        }

        flag = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    int a(int j, int k) {
        return a(a, j, k);
    }

    n a(int j, String s) {
        c.setLength(0);
        if (s != null)
            c.append(s);
        b.a(j);
        s = a();
        if (s != null && s.b())
            s = new n(b.a(), c.toString(), s.c());
        else
            s = new n(b.a(), c.toString());
        return s;
    }

    String a(StringBuilder stringbuilder, int j) {
        String s = null;
        do {
            n n1 = a(j, s);
            s = com.google.zxing.oned.rss.expanded.decoders.q.a(n1.a());
            if (s != null)
                stringbuilder.append(s);
            if (n1.b())
                s = String.valueOf(n1.c());
            else
                s = null;
            if (j == n1.e())
                return stringbuilder.toString();
            j = n1.e();
        } while (true);
    }
}
