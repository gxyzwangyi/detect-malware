// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.zxing.oned;

import com.google.zxing.*;
import com.google.zxing.common.a;
import com.google.zxing.h;
import com.google.zxing.i;
import java.util.*;

// Referenced classes of package com.google.zxing.oned:
//            k

public final class b extends k {

    static final int a[][];

    public b() {
    }

    private static int a(a a1, int ai[], int j) {
        a(a1, j, ai);
        int i1 = 64;
        int j1 = -1;
        for (j = 0; j < a.length;) {
            int k1 = a(ai, a[j], 179);
            int l = i1;
            if (k1 < i1) {
                j1 = j;
                l = k1;
            }
            j++;
            i1 = l;
        }

        if (j1 >= 0)
            return j1;
        else
            throw NotFoundException.a();
    }

    private static int[] a(a a1) {
        int j3 = a1.a();
        int j = a1.c(0);
        int ai[] = new int[6];
        int k3 = ai.length;
        int k2 = j;
        boolean flag = false;
        int l = 0;
        while (k2 < j3)  {
            int j1;
            if (a1.a(k2) ^ flag) {
                ai[l] = ai[l] + 1;
                int i1 = l;
                l = j;
                j = i1;
            } else {
                if (l == k3 - 1) {
                    int j2 = 64;
                    int l2 = -1;
                    for (int k1 = 103; k1 <= 105; k1++) {
                        int i3 = a(ai, a[k1], 179);
                        if (i3 < j2) {
                            l2 = k1;
                            j2 = i3;
                        }
                    }

                    if (l2 >= 0 && a1.a(Math.max(0, j - (k2 - j) / 2), j, false))
                        return (new int[] {
                            j, k2, l2
                        });
                    int l1 = ai[0] + ai[1] + j;
                    System.arraycopy(ai, 2, ai, 0, k3 - 2);
                    ai[k3 - 2] = 0;
                    ai[k3 - 1] = 0;
                    j = l - 1;
                    l = l1;
                } else {
                    int i2 = l + 1;
                    l = j;
                    j = i2;
                }
                ai[j] = 1;
                if (!flag)
                    flag = true;
                else
                    flag = false;
            }
            k2++;
            j1 = j;
            j = l;
            l = j1;
        }
        throw NotFoundException.a();
    }

    public h a(int j, a a1, Map map) {
        int k2;
        boolean flag2;
        int ai[];
        if (map != null && map.containsKey(DecodeHintType.h))
            flag2 = true;
        else
            flag2 = false;
        ai = a(a1);
        k2 = ai[2];
        map = new ArrayList(20);
        map.add(Byte.valueOf((byte)k2));
        k2;
        JVM INSTR tableswitch 103 105: default 84
    //                   103 94
    //                   104 269
    //                   105 276;
           goto _L1 _L2 _L3 _L4
_L1:
        throw FormatException.a();
_L2:
        int l = 101;
_L50:
        int j1;
        int l1;
        int i2;
        int j2;
        int l2;
        int i3;
        int j3;
        int l3;
        int i4;
        int j4;
        Object obj;
        int ai1[];
        obj = new StringBuilder(20);
        l3 = ai[0];
        l2 = ai[1];
        ai1 = new int[6];
        j2 = 1;
        boolean flag = false;
        i2 = 0;
        j4 = 0;
        i3 = 0;
        i4 = 0;
        j3 = 0;
        j1 = 0;
        l1 = l;
        l = ((flag) ? 1 : 0);
_L14:
        if (j1 != 0) goto _L6; else goto _L5
_L5:
        int k3;
        int k4;
        int l4;
        int i5;
        boolean flag3;
        boolean flag4;
        flag4 = false;
        flag3 = false;
        i5 = a(a1, ai1, l2);
        map.add(Byte.valueOf((byte)i5));
        if (i5 != 106)
            j2 = 1;
        l4 = i3;
        k4 = k2;
        if (i5 != 106) {
            l4 = i3 + 1;
            k4 = k2 + l4 * i5;
        }
        i3 = ai1.length;
        k2 = 0;
        k3 = l2;
        for (; k2 < i3; k2++)
            k3 += ai1[k2];

          goto _L7
_L3:
        l = 100;
        continue; /* Loop/switch isn't completed */
_L4:
        l = 99;
        continue; /* Loop/switch isn't completed */
_L7:
        i5;
        JVM INSTR tableswitch 103 105: default 312
    //                   103 458
    //                   104 458
    //                   105 458;
           goto _L8 _L9 _L9 _L9
_L8:
        l1;
        JVM INSTR tableswitch 99 101: default 340
    //                   99 1524
    //                   100 1032
    //                   101 462;
           goto _L10 _L11 _L12 _L13
_L10:
        k2 = j2;
_L47:
        i3 = l1;
        j2 = 0;
        l1 = l;
        l = i2;
        i2 = k2;
        k2 = j1;
        j1 = l;
        l = i3;
_L17:
        i3 = l;
        boolean flag1;
        if (j4 != 0)
            if (l == 101)
                i3 = 100;
            else
                i3 = 101;
        j4 = j2;
        j2 = i3;
        l = l1;
        i4 = j3;
        j3 = i5;
        l3 = i2;
        l1 = k2;
        i3 = l4;
        k2 = k4;
        i2 = j1;
        j1 = l1;
        l1 = j2;
        j2 = l3;
        l3 = l2;
        l2 = k3;
          goto _L14
_L9:
        throw FormatException.a();
_L13:
        if (i5 >= 64) goto _L16; else goto _L15
_L15:
        if (i2 == l)
            ((StringBuilder) (obj)).append((char)(i5 + 32));
        else
            ((StringBuilder) (obj)).append((char)(i5 + 32 + 128));
        i3 = l1;
        l3 = 0;
        l1 = l;
        i4 = 0;
        i2 = j2;
        k2 = j1;
        l = i3;
        j1 = i4;
        j2 = l3;
          goto _L17
_L16:
        if (i5 >= 96) goto _L19; else goto _L18
_L18:
        if (i2 == l)
            ((StringBuilder) (obj)).append((char)(i5 - 64));
        else
            ((StringBuilder) (obj)).append((char)(i5 + 64));
        i3 = l1;
        l3 = 0;
        l1 = l;
        i4 = 0;
        i2 = j2;
        k2 = j1;
        l = i3;
        j1 = i4;
        j2 = l3;
          goto _L17
_L19:
        l3 = j2;
        if (i5 != 106)
            l3 = 0;
        j2 = i2;
        i3 = l;
        flag1 = flag3;
        i4 = j1;
        k2 = l1;
        i5;
        JVM INSTR tableswitch 96 106: default 716
    //                   96 736
    //                   97 736
    //                   98 942
    //                   99 987
    //                   100 964
    //                   101 858
    //                   102 763
    //                   103 736
    //                   104 736
    //                   105 736
    //                   106 1010;
           goto _L20 _L21 _L21 _L22 _L23 _L24 _L25 _L26 _L21 _L21 _L21 _L27
_L21:
        break; /* Loop/switch isn't completed */
_L20:
        k2 = l1;
        i4 = j1;
        flag1 = flag3;
        i3 = l;
        j2 = i2;
_L28:
        l = k2;
        l1 = i3;
        j1 = j2;
        i2 = l3;
        k2 = i4;
        j2 = ((flag1) ? 1 : 0);
          goto _L17
_L26:
        j2 = i2;
        i3 = l;
        flag1 = flag3;
        i4 = j1;
        k2 = l1;
        if (flag2)
            if (((StringBuilder) (obj)).length() == 0) {
                ((StringBuilder) (obj)).append("]C1");
                j2 = i2;
                i3 = l;
                flag1 = flag3;
                i4 = j1;
                k2 = l1;
            } else {
                ((StringBuilder) (obj)).append('\035');
                j2 = i2;
                i3 = l;
                flag1 = flag3;
                i4 = j1;
                k2 = l1;
            }
          goto _L28
_L25:
        if (l == 0 && i2 != 0) {
            i3 = 1;
            j2 = 0;
            flag1 = flag3;
            i4 = j1;
            k2 = l1;
        } else
        if (l != 0 && i2 != 0) {
            i3 = 0;
            j2 = 0;
            flag1 = flag3;
            i4 = j1;
            k2 = l1;
        } else {
            j2 = 1;
            i3 = l;
            flag1 = flag3;
            i4 = j1;
            k2 = l1;
        }
          goto _L28
_L22:
        flag1 = true;
        k2 = 100;
        j2 = i2;
        i3 = l;
        i4 = j1;
          goto _L28
_L24:
        k2 = 100;
        j2 = i2;
        i3 = l;
        flag1 = flag3;
        i4 = j1;
          goto _L28
_L23:
        k2 = 99;
        j2 = i2;
        i3 = l;
        flag1 = flag3;
        i4 = j1;
          goto _L28
_L27:
        i4 = 1;
        j2 = i2;
        i3 = l;
        flag1 = flag3;
        k2 = l1;
          goto _L28
_L12:
        if (i5 >= 96) goto _L30; else goto _L29
_L29:
        if (i2 == l)
            ((StringBuilder) (obj)).append((char)(i5 + 32));
        else
            ((StringBuilder) (obj)).append((char)(i5 + 32 + 128));
        i3 = l1;
        l3 = 0;
        l1 = l;
        i4 = 0;
        i2 = j2;
        k2 = j1;
        l = i3;
        j1 = i4;
        j2 = l3;
          goto _L17
_L30:
        l3 = j2;
        if (i5 != 106)
            l3 = 0;
        j2 = i2;
        i3 = l;
        flag1 = flag4;
        i4 = j1;
        k2 = l1;
        i5;
        JVM INSTR tableswitch 96 106: default 1208
    //                   96 1228
    //                   97 1228
    //                   98 1434
    //                   99 1479
    //                   100 1350
    //                   101 1456
    //                   102 1255
    //                   103 1228
    //                   104 1228
    //                   105 1228
    //                   106 1502;
           goto _L31 _L32 _L32 _L33 _L34 _L35 _L36 _L37 _L32 _L32 _L32 _L38
_L32:
        break; /* Loop/switch isn't completed */
_L31:
        k2 = l1;
        i4 = j1;
        flag1 = flag4;
        i3 = l;
        j2 = i2;
_L39:
        l = k2;
        l1 = i3;
        j1 = j2;
        i2 = l3;
        k2 = i4;
        j2 = ((flag1) ? 1 : 0);
          goto _L17
_L37:
        j2 = i2;
        i3 = l;
        flag1 = flag4;
        i4 = j1;
        k2 = l1;
        if (flag2)
            if (((StringBuilder) (obj)).length() == 0) {
                ((StringBuilder) (obj)).append("]C1");
                j2 = i2;
                i3 = l;
                flag1 = flag4;
                i4 = j1;
                k2 = l1;
            } else {
                ((StringBuilder) (obj)).append('\035');
                j2 = i2;
                i3 = l;
                flag1 = flag4;
                i4 = j1;
                k2 = l1;
            }
          goto _L39
_L35:
        if (l == 0 && i2 != 0) {
            i3 = 1;
            j2 = 0;
            flag1 = flag4;
            i4 = j1;
            k2 = l1;
        } else
        if (l != 0 && i2 != 0) {
            i3 = 0;
            j2 = 0;
            flag1 = flag4;
            i4 = j1;
            k2 = l1;
        } else {
            j2 = 1;
            i3 = l;
            flag1 = flag4;
            i4 = j1;
            k2 = l1;
        }
          goto _L39
_L33:
        flag1 = true;
        k2 = 101;
        j2 = i2;
        i3 = l;
        i4 = j1;
          goto _L39
_L36:
        k2 = 101;
        j2 = i2;
        i3 = l;
        flag1 = flag4;
        i4 = j1;
          goto _L39
_L34:
        k2 = 99;
        j2 = i2;
        i3 = l;
        flag1 = flag4;
        i4 = j1;
          goto _L39
_L38:
        i4 = 1;
        j2 = i2;
        i3 = l;
        flag1 = flag4;
        k2 = l1;
          goto _L39
_L11:
        if (i5 >= 100) goto _L41; else goto _L40
_L40:
        if (i5 < 10)
            ((StringBuilder) (obj)).append('0');
        ((StringBuilder) (obj)).append(i5);
        i3 = l1;
        i4 = 0;
        l1 = l;
        l3 = i2;
        i2 = j2;
        k2 = j1;
        l = i3;
        j1 = l3;
        j2 = i4;
          goto _L17
_L41:
        if (i5 != 106)
            j2 = 0;
        i5;
        JVM INSTR tableswitch 100 106: default 1648
    //                   100 1655
    //                   101 1802
    //                   102 1693
    //                   103 1648
    //                   104 1648
    //                   105 1648
    //                   106 1840;
           goto _L42 _L43 _L44 _L45 _L42 _L42 _L42 _L46
_L42:
        k2 = j2;
          goto _L47
_L43:
        i4 = 100;
        l3 = 0;
        l1 = l;
        i3 = i2;
        i2 = j2;
        k2 = j1;
        l = i4;
        j1 = i3;
        j2 = l3;
          goto _L17
_L45:
        k2 = j2;
        if (!flag2) goto _L47; else goto _L48
_L48:
        if (((StringBuilder) (obj)).length() == 0) {
            ((StringBuilder) (obj)).append("]C1");
            i3 = l1;
            i4 = 0;
            l1 = l;
            l3 = i2;
            i2 = j2;
            k2 = j1;
            l = i3;
            j1 = l3;
            j2 = i4;
        } else {
            ((StringBuilder) (obj)).append('\035');
            i3 = l1;
            i4 = 0;
            l1 = l;
            l3 = i2;
            i2 = j2;
            k2 = j1;
            l = i3;
            j1 = l3;
            j2 = i4;
        }
          goto _L17
_L44:
        i4 = 101;
        l3 = 0;
        l1 = l;
        i3 = i2;
        i2 = j2;
        k2 = j1;
        l = i4;
        j1 = i3;
        j2 = l3;
          goto _L17
_L46:
        j1 = l1;
        i3 = 0;
        l1 = l;
        k2 = i2;
        i2 = j2;
        l3 = 1;
        l = j1;
        j1 = k2;
        j2 = i3;
        k2 = l3;
          goto _L17
_L6:
        int i1 = a1.d(l2);
        if (!a1.a(i1, Math.min(a1.a(), (i1 - l3) / 2 + i1), false))
            throw NotFoundException.a();
        if ((k2 - i3 * i4) % 103 != i4)
            throw ChecksumException.a();
        i1 = ((StringBuilder) (obj)).length();
        if (i1 == 0)
            throw NotFoundException.a();
        float f;
        float f1;
        float f2;
        int k1;
        if (i1 > 0 && j2 != 0)
            if (l1 == 99)
                ((StringBuilder) (obj)).delete(i1 - 2, i1);
            else
                ((StringBuilder) (obj)).delete(i1 - 1, i1);
        f2 = (float)(ai[1] + ai[0]) / 2.0F;
        f1 = l3;
        f = (float)(l2 - l3) / 2.0F;
        k1 = map.size();
        a1 = new byte[k1];
        for (i1 = 0; i1 < k1; i1++)
            a1[i1] = ((Byte)map.get(i1)).byteValue();

        obj = ((StringBuilder) (obj)).toString();
        map = new i(f2, j);
        i j5 = new i(f1 + f, j);
        BarcodeFormat barcodeformat = BarcodeFormat.e;
        return new h(((String) (obj)), a1, new i[] {
            map, j5
        }, barcodeformat);
        if (true) goto _L50; else goto _L49
_L49:
    }

    static  {
        int ai[] = {
            2, 2, 2, 1, 2, 2
        };
        int ai1[] = {
            2, 2, 1, 2, 1, 3
        };
        int ai2[] = {
            1, 1, 2, 2, 3, 2
        };
        int ai3[] = {
            1, 2, 2, 2, 3, 1
        };
        int ai4[] = {
            1, 2, 3, 2, 2, 1
        };
        int ai5[] = {
            2, 2, 3, 2, 1, 1
        };
        int ai6[] = {
            2, 2, 1, 2, 3, 1
        };
        int ai7[] = {
            2, 1, 3, 2, 1, 2
        };
        int ai8[] = {
            2, 2, 3, 1, 1, 2
        };
        int ai9[] = {
            3, 1, 2, 1, 3, 1
        };
        int ai10[] = {
            3, 2, 1, 1, 2, 2
        };
        int ai11[] = {
            3, 1, 2, 2, 1, 2
        };
        int ai12[] = {
            3, 2, 2, 1, 1, 2
        };
        int ai13[] = {
            1, 3, 1, 1, 2, 3
        };
        int ai14[] = {
            1, 3, 1, 3, 2, 1
        };
        int ai15[] = {
            1, 1, 2, 3, 1, 3
        };
        int ai16[] = {
            1, 3, 2, 1, 1, 3
        };
        int ai17[] = {
            1, 3, 3, 1, 2, 1
        };
        int ai18[] = {
            3, 1, 3, 1, 2, 1
        };
        int ai19[] = {
            2, 1, 1, 3, 3, 1
        };
        int ai20[] = {
            2, 3, 1, 1, 3, 1
        };
        int ai21[] = {
            2, 1, 3, 1, 1, 3
        };
        int ai22[] = {
            2, 1, 3, 1, 3, 1
        };
        int ai23[] = {
            3, 3, 1, 1, 2, 1
        };
        int ai24[] = {
            3, 1, 2, 3, 1, 1
        };
        int ai25[] = {
            2, 2, 1, 4, 1, 1
        };
        int ai26[] = {
            1, 1, 1, 2, 2, 4
        };
        int ai27[] = {
            1, 1, 1, 4, 2, 2
        };
        int ai28[] = {
            1, 2, 1, 1, 2, 4
        };
        int ai29[] = {
            1, 2, 1, 4, 2, 1
        };
        int ai30[] = {
            1, 4, 1, 2, 2, 1
        };
        int ai31[] = {
            1, 1, 2, 2, 1, 4
        };
        int ai32[] = {
            1, 1, 2, 4, 1, 2
        };
        int ai33[] = {
            1, 2, 2, 1, 1, 4
        };
        int ai34[] = {
            1, 4, 2, 1, 1, 2
        };
        int ai35[] = {
            2, 2, 1, 1, 1, 4
        };
        int ai36[] = {
            4, 1, 3, 1, 1, 1
        };
        int ai37[] = {
            2, 4, 1, 1, 1, 2
        };
        int ai38[] = {
            1, 3, 4, 1, 1, 1
        };
        int ai39[] = {
            1, 1, 1, 2, 4, 2
        };
        int ai40[] = {
            1, 2, 4, 2, 1, 1
        };
        int ai41[] = {
            4, 1, 1, 2, 1, 2
        };
        int ai42[] = {
            2, 1, 2, 1, 4, 1
        };
        int ai43[] = {
            2, 1, 4, 1, 2, 1
        };
        int ai44[] = {
            1, 1, 4, 1, 1, 3
        };
        int ai45[] = {
            4, 1, 1, 3, 1, 1
        };
        int ai46[] = {
            1, 1, 4, 1, 3, 1
        };
        int ai47[] = {
            2, 1, 1, 4, 1, 2
        };
        int ai48[] = {
            2, 1, 1, 2, 1, 4
        };
        int ai49[] = {
            2, 3, 3, 1, 1, 1, 2
        };
        a = (new int[][] {
            new int[] {
                2, 1, 2, 2, 2, 2
            }, ai, new int[] {
                2, 2, 2, 2, 2, 1
            }, new int[] {
                1, 2, 1, 2, 2, 3
            }, new int[] {
                1, 2, 1, 3, 2, 2
            }, new int[] {
                1, 3, 1, 2, 2, 2
            }, new int[] {
                1, 2, 2, 2, 1, 3
            }, new int[] {
                1, 2, 2, 3, 1, 2
            }, new int[] {
                1, 3, 2, 2, 1, 2
            }, ai1, new int[] {
                2, 2, 1, 3, 1, 2
            }, new int[] {
                2, 3, 1, 2, 1, 2
            }, ai2, new int[] {
                1, 2, 2, 1, 3, 2
            }, ai3, new int[] {
                1, 1, 3, 2, 2, 2
            }, new int[] {
                1, 2, 3, 1, 2, 2
            }, ai4, ai5, new int[] {
                2, 2, 1, 1, 3, 2
            }, ai6, ai7, ai8, ai9, new int[] {
                3, 1, 1, 2, 2, 2
            }, ai10, new int[] {
                3, 2, 1, 2, 2, 1
            }, ai11, ai12, new int[] {
                3, 2, 2, 2, 1, 1
            }, new int[] {
                2, 1, 2, 1, 2, 3
            }, new int[] {
                2, 1, 2, 3, 2, 1
            }, new int[] {
                2, 3, 2, 1, 2, 1
            }, new int[] {
                1, 1, 1, 3, 2, 3
            }, ai13, ai14, ai15, ai16, new int[] {
                1, 3, 2, 3, 1, 1
            }, new int[] {
                2, 1, 1, 3, 1, 3
            }, new int[] {
                2, 3, 1, 1, 1, 3
            }, new int[] {
                2, 3, 1, 3, 1, 1
            }, new int[] {
                1, 1, 2, 1, 3, 3
            }, new int[] {
                1, 1, 2, 3, 3, 1
            }, new int[] {
                1, 3, 2, 1, 3, 1
            }, new int[] {
                1, 1, 3, 1, 2, 3
            }, new int[] {
                1, 1, 3, 3, 2, 1
            }, ai17, ai18, ai19, ai20, ai21, new int[] {
                2, 1, 3, 3, 1, 1
            }, ai22, new int[] {
                3, 1, 1, 1, 2, 3
            }, new int[] {
                3, 1, 1, 3, 2, 1
            }, ai23, new int[] {
                3, 1, 2, 1, 1, 3
            }, ai24, new int[] {
                3, 3, 2, 1, 1, 1
            }, new int[] {
                3, 1, 4, 1, 1, 1
            }, ai25, new int[] {
                4, 3, 1, 1, 1, 1
            }, ai26, ai27, ai28, ai29, new int[] {
                1, 4, 1, 1, 2, 2
            }, ai30, ai31, ai32, ai33, new int[] {
                1, 2, 2, 4, 1, 1
            }, ai34, new int[] {
                1, 4, 2, 2, 1, 1
            }, new int[] {
                2, 4, 1, 2, 1, 1
            }, ai35, ai36, ai37, ai38, ai39, new int[] {
                1, 2, 1, 1, 4, 2
            }, new int[] {
                1, 2, 1, 2, 4, 1
            }, new int[] {
                1, 1, 4, 2, 1, 2
            }, new int[] {
                1, 2, 4, 1, 1, 2
            }, ai40, ai41, new int[] {
                4, 2, 1, 1, 1, 2
            }, new int[] {
                4, 2, 1, 2, 1, 1
            }, ai42, ai43, new int[] {
                4, 1, 2, 1, 2, 1
            }, new int[] {
                1, 1, 1, 1, 4, 3
            }, new int[] {
                1, 1, 1, 3, 4, 1
            }, new int[] {
                1, 3, 1, 1, 4, 1
            }, ai44, new int[] {
                1, 1, 4, 3, 1, 1
            }, new int[] {
                4, 1, 1, 1, 1, 3
            }, ai45, new int[] {
                1, 1, 3, 1, 4, 1
            }, ai46, new int[] {
                3, 1, 1, 1, 4, 1
            }, new int[] {
                4, 1, 1, 1, 3, 1
            }, ai47, ai48, new int[] {
                2, 1, 1, 2, 3, 2
            }, ai49
        });
    }
}
