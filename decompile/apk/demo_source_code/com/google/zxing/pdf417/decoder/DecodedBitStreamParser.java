// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.zxing.pdf417.decoder;

import com.google.zxing.FormatException;
import com.google.zxing.common.d;
import com.google.zxing.pdf417.c;
import java.math.BigInteger;
import java.util.Arrays;

final class DecodedBitStreamParser {
    private static final class Mode extends Enum {

        public static final Mode a;
        public static final Mode b;
        public static final Mode c;
        public static final Mode d;
        public static final Mode e;
        public static final Mode f;
        private static final Mode g[];

        public static Mode valueOf(String s) {
            return (Mode)Enum.valueOf(com/google/zxing/pdf417/decoder/DecodedBitStreamParser$Mode, s);
        }

        public static Mode[] values() {
            return (Mode[])g.clone();
        }

        static  {
            a = new Mode("ALPHA", 0);
            b = new Mode("LOWER", 1);
            c = new Mode("MIXED", 2);
            d = new Mode("PUNCT", 3);
            e = new Mode("ALPHA_SHIFT", 4);
            f = new Mode("PUNCT_SHIFT", 5);
            g = (new Mode[] {
                a, b, c, d, e, f
            });
        }

        private Mode(String s, int i) {
            super(s, i);
        }
    }


    private static final char a[] = {
        ';', '<', '>', '@', '[', '\\', '}', '_', '`', '~', 
        '!', '\r', '\t', ',', ':', '\n', '-', '.', '$', '/', 
        '"', '|', '*', '(', ')', '?', '{', '}', '\''
    };
    private static final char b[] = {
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 
        '&', '\r', '\t', ',', ':', '#', '-', '.', '$', '/', 
        '+', '%', '*', '=', '^'
    };
    private static final BigInteger c[];

    private static int a(int i, int ai[], int j, StringBuilder stringbuilder) {
label0:
        {
            {
                if (i != 901)
                    break label0;
                boolean flag1 = false;
                long l1 = 0L;
                char ac[] = new char[6];
                int ai1[] = new int[6];
                boolean flag = false;
                int l = ai[j];
                i = j + 1;
                j = ((flag1) ? 1 : 0);
                while (i < ai[0] && !flag)  {
                    int i1 = j + 1;
                    ai1[j] = l;
                    l1 = l1 * 900L + (long)l;
                    j = i + 1;
                    l = ai[i];
                    int k;
                    int j1;
                    long l2;
                    if (l == 900 || l == 901 || l == 902 || l == 924 || l == 928 || l == 923 || l == 922) {
                        flag = true;
                        i = j - 1;
                        j = i1;
                    } else
                    if (i1 % 5 == 0 && i1 > 0) {
                        for (i = 0; i < 6;) {
                            ac[5 - i] = (char)(int)(l1 % 256L);
                            i++;
                            l1 >>= 8;
                        }

                        stringbuilder.append(ac);
                        i1 = 0;
                        i = j;
                        j = i1;
                    } else {
                        i = j;
                        j = i1;
                    }
                }
                k = j;
                if (i == ai[0]) {
                    k = j;
                    if (l < 900) {
                        ai1[j] = l;
                        k = j + 1;
                    }
                }
                for (j = 0; j < k; j++)
                    stringbuilder.append((char)ai1[j]);

                l = i;
            }
            return l;
        }
        l = j;
        if (i != 924)
            break MISSING_BLOCK_LABEL_277;
        i = 0;
        l2 = 0L;
        i1 = 0;
        k = j;
        j = i;
        do {
            l = k;
            if (k >= ai[0])
                break MISSING_BLOCK_LABEL_277;
            l = k;
            if (i1 != 0)
                break MISSING_BLOCK_LABEL_277;
            i = k + 1;
            k = ai[k];
            if (k < 900) {
                j1 = j + 1;
                l1 = l2 * 900L + (long)k;
                l = i1;
            } else
            if (k == 900 || k == 901 || k == 902 || k == 924 || k == 928 || k == 923 || k == 922) {
                i--;
                l = 1;
                j1 = j;
                l1 = l2;
            } else {
                l = i1;
                j1 = j;
                l1 = l2;
            }
            i1 = l;
            j = j1;
            l2 = l1;
            k = i;
            if (j1 % 5 == 0) {
                i1 = l;
                j = j1;
                l2 = l1;
                k = i;
                if (j1 > 0) {
                    ac = new char[6];
                    for (j = 0; j < 6; j++) {
                        ac[5 - j] = (char)(int)(255L & l1);
                        l1 >>= 8;
                    }

                    stringbuilder.append(ac);
                    j = 0;
                    i1 = l;
                    l2 = l1;
                    k = i;
                }
            }
        } while (true);
    }

    private static int a(int ai[], int i, c c1) {
        int k;
        if (i + 2 > ai[0])
            throw FormatException.a();
        int ai1[] = new int[2];
        for (int j = 0; j < 2;) {
            ai1[j] = ai[i];
            j++;
            i++;
        }

        c1.a(Integer.parseInt(a(ai1, 2)));
        StringBuilder stringbuilder = new StringBuilder();
        k = a(ai, i, stringbuilder);
        c1.a(stringbuilder.toString());
        if (ai[k] != 923) goto _L2; else goto _L1
_L1:
        i = k + 1;
        int ai2[] = new int[ai[0] - i];
        k = 0;
        for (boolean flag = false; i < ai[0] && !flag;) {
            int l = i + 1;
            i = ai[i];
            if (i < 900) {
                ai2[k] = i;
                k++;
                i = l;
            } else {
                switch (i) {
                default:
                    throw FormatException.a();

                case 922: 
                    c1.a(true);
                    break;
                }
                i = l + 1;
                flag = true;
            }
        }

        c1.a(Arrays.copyOf(ai2, k));
_L4:
        return i;
_L2:
        i = k;
        if (ai[k] == 922) {
            c1.a(true);
            i = k + 1;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    private static int a(int ai[], int i, StringBuilder stringbuilder) {
        int ai2[] = new int[ai[0] - i << 1];
        int ai1[] = new int[ai[0] - i << 1];
        boolean flag = false;
        int j = 0;
label0:
        do {
            while (i < ai[0] && !flag)  {
                int k = i + 1;
                i = ai[i];
                if (i < 900) {
                    ai2[j] = i / 30;
                    ai2[j + 1] = i % 30;
                    j += 2;
                    i = k;
                } else {
                    switch (i) {
                    default:
                        i = k;
                        break;

                    case 900: 
                        ai2[j] = 900;
                        j++;
                        i = k;
                        break;

                    case 901: 
                    case 902: 
                    case 922: 
                    case 923: 
                    case 924: 
                    case 928: 
                        i = k - 1;
                        flag = true;
                        break;

                    case 913: 
                        ai2[j] = 913;
                        i = k + 1;
                        ai1[j] = ai[k];
                        j++;
                        break;
                    }
                    continue label0;
                }
            }
            a(ai2, ai1, j, stringbuilder);
            return i;
        } while (true);
    }

    static d a(int ai[], String s) {
        int i;
        int j;
        c c1;
        StringBuilder stringbuilder;
        stringbuilder = new StringBuilder(ai.length * 2);
        i = 2;
        j = ai[1];
        c1 = new c();
_L7:
        if (i >= ai[0])
            break MISSING_BLOCK_LABEL_196;
        j;
        JVM INSTR lookupswitch 8: default 112
    //                   900: 143
    //                   901: 154
    //                   902: 166
    //                   913: 154
    //                   922: 188
    //                   923: 188
    //                   924: 154
    //                   928: 177;
           goto _L1 _L2 _L3 _L4 _L3 _L5 _L5 _L3 _L6
_L1:
        i = a(ai, i - 1, stringbuilder);
_L8:
        if (i < ai.length) {
            int k = i + 1;
            j = ai[i];
            i = k;
        } else {
            throw FormatException.a();
        }
        if (true) goto _L7; else goto _L2
_L2:
        i = a(ai, i, stringbuilder);
          goto _L8
_L3:
        i = a(j, ai, i, stringbuilder);
          goto _L8
_L4:
        i = b(ai, i, stringbuilder);
          goto _L8
_L6:
        i = a(ai, i, c1);
          goto _L8
_L5:
        throw FormatException.a();
        if (stringbuilder.length() == 0) {
            throw FormatException.a();
        } else {
            ai = new d(null, stringbuilder.toString(), null, s);
            ai.a(c1);
            return ai;
        }
    }

    private static String a(int ai[], int i) {
        BigInteger biginteger = BigInteger.ZERO;
        for (int j = 0; j < i; j++)
            biginteger = biginteger.add(c[i - j - 1].multiply(BigInteger.valueOf(ai[j])));

        ai = biginteger.toString();
        if (ai.charAt(0) != '1')
            throw FormatException.a();
        else
            return ai.substring(1);
    }

    private static void a(int ai[], int ai1[], int i, StringBuilder stringbuilder) {
        int j;
        Mode mode;
        Mode mode1;
        mode = Mode.a;
        mode1 = Mode.a;
        j = 0;
_L10:
        if (j >= i) goto _L2; else goto _L1
_L1:
        boolean flag;
        int k;
        k = ai[j];
        flag = false;
        static class _cls1 {

            static final int a[];

            static  {
                a = new int[Mode.values().length];
                NoSuchFieldError nosuchfielderror;
                try {
                    a[Mode.a.ordinal()] = 1;
                }
                catch (NoSuchFieldError nosuchfielderror5) { }
                try {
                    a[Mode.b.ordinal()] = 2;
                }
                catch (NoSuchFieldError nosuchfielderror4) { }
                try {
                    a[com.google.zxing.pdf417.decoder.Mode.c.ordinal()] = 3;
                }
                catch (NoSuchFieldError nosuchfielderror3) { }
                try {
                    a[com.google.zxing.pdf417.decoder.Mode.d.ordinal()] = 4;
                }
                catch (NoSuchFieldError nosuchfielderror2) { }
                try {
                    a[Mode.e.ordinal()] = 5;
                }
                catch (NoSuchFieldError nosuchfielderror1) { }
                a[Mode.f.ordinal()] = 6;
_L2:
                return;
                nosuchfielderror;
                if (true) goto _L2; else goto _L1
_L1:
            }
        }

        _cls1.a[mode.ordinal()];
        JVM INSTR tableswitch 1 6: default 76
    //                   1 106
    //                   2 280
    //                   3 458
    //                   4 655
    //                   5 761
    //                   6 833;
           goto _L3 _L4 _L5 _L6 _L7 _L8 _L9
_L3:
        char c1;
        Mode mode2;
        mode2 = mode1;
        c1 = flag;
_L11:
        if (c1 != 0)
            stringbuilder.append(c1);
        j++;
        mode1 = mode2;
          goto _L10
_L4:
        if (k < 26) {
            c1 = (char)(k + 65);
            mode2 = mode1;
        } else
        if (k == 26) {
            c1 = ' ';
            mode2 = mode1;
        } else
        if (k == 27) {
            mode = Mode.b;
            c1 = flag;
            mode2 = mode1;
        } else
        if (k == 28) {
            mode = com.google.zxing.pdf417.decoder.Mode.c;
            c1 = flag;
            mode2 = mode1;
        } else
        if (k == 29) {
            mode1 = Mode.f;
            c1 = flag;
            mode2 = mode;
            mode = mode1;
        } else
        if (k == 913) {
            stringbuilder.append((char)ai1[j]);
            c1 = flag;
            mode2 = mode1;
        } else {
            c1 = flag;
            mode2 = mode1;
            if (k == 900) {
                mode = Mode.a;
                c1 = flag;
                mode2 = mode1;
            }
        }
          goto _L11
_L5:
        if (k < 26) {
            c1 = (char)(k + 97);
            mode2 = mode1;
        } else
        if (k == 26) {
            c1 = ' ';
            mode2 = mode1;
        } else
        if (k == 27) {
            mode1 = Mode.e;
            c1 = flag;
            mode2 = mode;
            mode = mode1;
        } else
        if (k == 28) {
            mode = com.google.zxing.pdf417.decoder.Mode.c;
            c1 = flag;
            mode2 = mode1;
        } else
        if (k == 29) {
            mode1 = Mode.f;
            c1 = flag;
            mode2 = mode;
            mode = mode1;
        } else
        if (k == 913) {
            stringbuilder.append((char)ai1[j]);
            c1 = flag;
            mode2 = mode1;
        } else {
            c1 = flag;
            mode2 = mode1;
            if (k == 900) {
                mode = Mode.a;
                c1 = flag;
                mode2 = mode1;
            }
        }
          goto _L11
_L6:
        if (k < 25) {
            c1 = b[k];
            mode2 = mode1;
        } else
        if (k == 25) {
            mode = com.google.zxing.pdf417.decoder.Mode.d;
            c1 = flag;
            mode2 = mode1;
        } else
        if (k == 26) {
            c1 = ' ';
            mode2 = mode1;
        } else
        if (k == 27) {
            mode = Mode.b;
            c1 = flag;
            mode2 = mode1;
        } else
        if (k == 28) {
            mode = Mode.a;
            c1 = flag;
            mode2 = mode1;
        } else
        if (k == 29) {
            mode1 = Mode.f;
            c1 = flag;
            mode2 = mode;
            mode = mode1;
        } else
        if (k == 913) {
            stringbuilder.append((char)ai1[j]);
            c1 = flag;
            mode2 = mode1;
        } else {
            c1 = flag;
            mode2 = mode1;
            if (k == 900) {
                mode = Mode.a;
                c1 = flag;
                mode2 = mode1;
            }
        }
          goto _L11
_L7:
        if (k < 29) {
            c1 = a[k];
            mode2 = mode1;
        } else
        if (k == 29) {
            mode = Mode.a;
            c1 = flag;
            mode2 = mode1;
        } else
        if (k == 913) {
            stringbuilder.append((char)ai1[j]);
            c1 = flag;
            mode2 = mode1;
        } else {
            c1 = flag;
            mode2 = mode1;
            if (k == 900) {
                mode = Mode.a;
                c1 = flag;
                mode2 = mode1;
            }
        }
          goto _L11
_L8:
        if (k < 26) {
            c1 = (char)(k + 65);
            mode = mode1;
            mode2 = mode1;
        } else
        if (k == 26) {
            c1 = ' ';
            mode = mode1;
            mode2 = mode1;
        } else {
            if (k != 900)
                break MISSING_BLOCK_LABEL_940;
            mode = Mode.a;
            c1 = flag;
            mode2 = mode1;
        }
          goto _L11
_L9:
        if (k < 29) {
            c1 = a[k];
            mode = mode1;
            mode2 = mode1;
        } else
        if (k == 29) {
            mode = Mode.a;
            c1 = flag;
            mode2 = mode1;
        } else
        if (k == 913) {
            stringbuilder.append((char)ai1[j]);
            mode = mode1;
            c1 = flag;
            mode2 = mode1;
        } else {
            if (k != 900)
                break MISSING_BLOCK_LABEL_940;
            mode = Mode.a;
            c1 = flag;
            mode2 = mode1;
        }
          goto _L11
_L2:
        return;
        mode = mode1;
        c1 = flag;
        mode2 = mode1;
          goto _L11
    }

    private static int b(int ai[], int i, StringBuilder stringbuilder) {
        int ai1[] = new int[15];
        boolean flag1 = false;
        int j = 0;
        int l = i;
        do {
            if (l >= ai[0] || flag1)
                break;
            i = l + 1;
            l = ai[l];
            boolean flag = flag1;
            if (i == ai[0])
                flag = true;
            int k;
            if (l < 900) {
                ai1[j] = l;
                k = j + 1;
            } else
            if (l == 900 || l == 901 || l == 924 || l == 928 || l == 923 || l == 922) {
                i--;
                flag = true;
                k = j;
            } else {
                k = j;
            }
            if (k % 15 != 0 && l != 902) {
                flag1 = flag;
                j = k;
                l = i;
                if (!flag)
                    continue;
            }
            stringbuilder.append(a(ai1, k));
            j = 0;
            flag1 = flag;
            l = i;
        } while (true);
        return l;
    }

    static  {
        c = new BigInteger[16];
        c[0] = BigInteger.ONE;
        BigInteger biginteger = BigInteger.valueOf(900L);
        c[1] = biginteger;
        for (int i = 2; i < c.length; i++)
            c[i] = c[i - 1].multiply(biginteger);

    }
}
