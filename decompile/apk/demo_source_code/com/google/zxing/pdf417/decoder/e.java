// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.zxing.pdf417.decoder;

import java.util.Formatter;

// Referenced classes of package com.google.zxing.pdf417.decoder:
//            a, f, d, g, 
//            c

final class e {

    private final a a;
    private final f b[];
    private c c;
    private final int d;

    e(a a1, c c1) {
        a = a1;
        d = a1.a();
        c = c1;
        b = new f[d + 2];
    }

    private static int a(int k, int l, d d1) {
        if (d1 != null) goto _L2; else goto _L1
_L1:
        int i1 = l;
_L4:
        return i1;
_L2:
        i1 = l;
        if (!d1.a())
            if (d1.a(k)) {
                d1.b(k);
                i1 = 0;
            } else {
                i1 = l + 1;
            }
        if (true) goto _L4; else goto _L3
_L3:
    }

    private void a(int k, int l, d ad[]) {
        d d1 = ad[l];
        d ad2[] = b[k - 1].b();
        d ad1[];
        d ad3[];
        if (b[k + 1] != null)
            ad1 = b[k + 1].b();
        else
            ad1 = ad2;
        ad3 = new d[14];
        ad3[2] = ad2[l];
        ad3[3] = ad1[l];
        if (l > 0) {
            ad3[0] = ad[l - 1];
            ad3[4] = ad2[l - 1];
            ad3[5] = ad1[l - 1];
        }
        if (l > 1) {
            ad3[8] = ad[l - 2];
            ad3[10] = ad2[l - 2];
            ad3[11] = ad1[l - 2];
        }
        if (l < ad.length - 1) {
            ad3[1] = ad[l + 1];
            ad3[6] = ad2[l + 1];
            ad3[7] = ad1[l + 1];
        }
        if (l < ad.length - 2) {
            ad3[9] = ad[l + 2];
            ad3[12] = ad2[l + 2];
            ad3[13] = ad1[l + 2];
        }
        l = ad3.length;
        k = 0;
        do {
            if (k >= l || a(d1, ad3[k]))
                return;
            k++;
        } while (true);
    }

    private void a(f f1) {
        if (f1 != null)
            ((g)f1).a(a);
    }

    private static boolean a(d d1, d d2) {
        boolean flag1 = false;
        if (d2 != null) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        flag = flag1;
        if (d2.a()) {
            flag = flag1;
            if (d2.f() == d1.f()) {
                d1.b(d2.h());
                flag = true;
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    private int f() {
        int k;
        int i1;
        k = 0;
        i1 = g();
        if (i1 != 0) goto _L2; else goto _L1
_L1:
        return k;
_L2:
label0:
        for (k = 1; k < d + 1; k++) {
            d ad[] = b[k].b();
            int l = 0;
            do {
                if (l >= ad.length)
                    continue label0;
                if (ad[l] != null && !ad[l].a())
                    a(k, l, ad);
                l++;
            } while (true);
        }

        k = i1;
        if (true) goto _L1; else goto _L3
_L3:
    }

    private int g() {
        h();
        return j() + i();
    }

    private void h() {
        int k = 0;
        if (b[0] != null && b[d + 1] != null) {
            d ad1[] = b[0].b();
            d ad[] = b[d + 1].b();
            while (k < ad1.length)  {
                if (ad1[k] != null && ad[k] != null && ad1[k].h() == ad[k].h()) {
                    int l = 1;
                    while (l <= d)  {
                        d d1 = b[l].b()[k];
                        if (d1 != null) {
                            d1.b(ad1[k].h());
                            if (!d1.a())
                                b[l].b()[k] = null;
                        }
                        l++;
                    }
                }
                k++;
            }
        }
    }

    private int i() {
        int k = 0;
        if (b[d + 1] != null) {
            d ad[] = b[d + 1].b();
            int l = 0;
            k = 0;
            while (l < ad.length)  {
                if (ad[l] != null) {
                    int i2 = ad[l].h();
                    int i1 = d + 1;
                    int l1 = 0;
                    while (i1 > 0 && l1 < 2)  {
                        d d1 = b[i1].b()[l];
                        int k1 = l1;
                        int j1 = k;
                        if (d1 != null) {
                            l1 = a(i2, l1, d1);
                            k1 = l1;
                            j1 = k;
                            if (!d1.a()) {
                                j1 = k + 1;
                                k1 = l1;
                            }
                        }
                        i1--;
                        l1 = k1;
                        k = j1;
                    }
                }
                l++;
            }
        }
        return k;
    }

    private int j() {
        int k = 0;
        if (b[0] != null) {
            d ad[] = b[0].b();
            int l = 0;
            k = 0;
            while (l < ad.length)  {
                if (ad[l] != null) {
                    int i2 = ad[l].h();
                    int i1 = 1;
                    int l1 = 0;
                    while (i1 < d + 1 && l1 < 2)  {
                        d d1 = b[i1].b()[l];
                        int j1 = l1;
                        int k1 = k;
                        if (d1 != null) {
                            l1 = a(i2, l1, d1);
                            j1 = l1;
                            k1 = k;
                            if (!d1.a()) {
                                k1 = k + 1;
                                j1 = l1;
                            }
                        }
                        i1++;
                        l1 = j1;
                        k = k1;
                    }
                }
                l++;
            }
        }
        return k;
    }

    f a(int k) {
        return b[k];
    }

    void a(int k, f f1) {
        b[k] = f1;
    }

    public void a(c c1) {
        c = c1;
    }

    f[] a() {
        a(b[0]);
        a(b[d + 1]);
        int k = 928;
        do {
            int l = f();
            if (l <= 0 || l >= k)
                return b;
            k = l;
        } while (true);
    }

    int b() {
        return d;
    }

    int c() {
        return a.c();
    }

    int d() {
        return a.b();
    }

    c e() {
        return c;
    }

    public String toString() {
        Object obj1 = b[0];
        Object obj = obj1;
        if (obj1 == null)
            obj = b[d + 1];
        obj1 = new Formatter();
        for (int k = 0; k < ((f) (obj)).b().length; k++) {
            ((Formatter) (obj1)).format("CW %3d:", new Object[] {
                Integer.valueOf(k)
            });
            int l = 0;
            while (l < d + 2)  {
                if (b[l] == null) {
                    ((Formatter) (obj1)).format("    |   ", new Object[0]);
                } else {
                    d d1 = b[l].b()[k];
                    if (d1 == null)
                        ((Formatter) (obj1)).format("    |   ", new Object[0]);
                    else
                        ((Formatter) (obj1)).format(" %3d|%3d", new Object[] {
                            Integer.valueOf(d1.h()), Integer.valueOf(d1.g())
                        });
                }
                l++;
            }
            ((Formatter) (obj1)).format("%n", new Object[0]);
        }

        obj = ((Formatter) (obj1)).toString();
        ((Formatter) (obj1)).close();
        return ((String) (obj));
    }
}
