// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.zxing.pdf417.decoder.a;

import com.google.zxing.ChecksumException;

// Referenced classes of package com.google.zxing.pdf417.decoder.a:
//            b, c

public final class a {

    private final b a;

    public a() {
        a = b.a;
    }

    private int[] a(c c1) {
        int l = c1.a();
        int ai[] = new int[l];
        int k = 0;
        int j;
        for (int i = 1; i < a.c() && k < l; k = j) {
            j = k;
            if (c1.b(i) == 0) {
                ai[k] = a.c(i);
                j = k + 1;
            }
            i++;
        }

        if (k != l)
            throw ChecksumException.a();
        else
            return ai;
    }

    private int[] a(c c1, c c2, int ai[]) {
        int k = c2.a();
        int ai1[] = new int[k];
        for (int i = 1; i <= k; i++)
            ai1[k - i] = a.d(i, c2.a(i));

        c2 = new c(a, ai1);
        k = ai.length;
        ai1 = new int[k];
        for (int j = 0; j < k; j++) {
            int i1 = a.c(ai[j]);
            int l = a.c(0, c1.b(i1));
            i1 = a.c(c2.b(i1));
            ai1[j] = a.d(l, i1);
        }

        return ai1;
    }

    private c[] a(c c1, c c2, int i) {
        c c3;
        c c5;
        if (c1.a() >= c2.a()) {
            c c4 = c1;
            c1 = c2;
            c2 = c4;
        }
        c5 = a.a();
        c3 = a.b();
        while (c1.a() >= i / 2)  {
            if (c1.b())
                throw ChecksumException.a();
            c c6 = a.a();
            int j = c1.a(c1.a());
            int i1 = a.c(j);
            int k;
            int l;
            for (; c2.a() >= c1.a() && !c2.b(); c2 = c2.b(c1.a(k, l))) {
                k = c2.a() - c1.a();
                l = a.d(c2.a(c2.a()), i1);
                c6 = c6.a(a.a(k, l));
            }

            c5 = c6.c(c3).b(c5).c();
            c6 = c1;
            c1 = c2;
            c2 = c5;
            c5 = c3;
            c3 = c2;
            c2 = c6;
        }
        i = c3.a(0);
        if (i == 0) {
            throw ChecksumException.a();
        } else {
            i = a.c(i);
            return (new c[] {
                c3.c(i), c1.c(i)
            });
        }
    }

    public int a(int ai[], int i, int ai1[]) {
        boolean flag1 = false;
        c c1 = new c(a, ai);
        int ai3[] = new int[i];
        int j = i;
        boolean flag = false;
        for (; j > 0; j--) {
            int k1 = c1.b(a.a(j));
            ai3[i - j] = k1;
            if (k1 != 0)
                flag = true;
        }

        if (!flag) {
            i = ((flag1) ? 1 : 0);
        } else {
            c c2 = a.b();
            int i1 = ai1.length;
            for (int k = 0; k < i1; k++) {
                int j1 = ai1[k];
                j1 = a.a(ai.length - 1 - j1);
                c2 = c2.c(new c(a, new int[] {
                    a.c(0, j1), 1
                }));
            }

            ai1 = new c(a, ai3);
            ai1 = a(a.a(i, 1), ((c) (ai1)), i);
            c2 = ai1[0];
            c c3 = ai1[1];
            ai1 = a(c2);
            int ai2[] = a(c3, c2, ai1);
            for (i = 0; i < ai1.length; i++) {
                int l = ai.length - 1 - a.b(ai1[i]);
                if (l < 0)
                    throw ChecksumException.a();
                ai[l] = a.c(ai[l], ai2[i]);
            }

            i = ai1.length;
        }
        return i;
    }
}
