// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.zxing.pdf417.decoder;

import com.google.zxing.pdf417.a;
import java.lang.reflect.Array;

final class h {

    private static final float a[][];

    static int a(int ai[]) {
        int i = c(b(ai));
        if (i == -1)
            i = e(ai);
        return i;
    }

    private static int[] b(int ai[]) {
        int i1 = 0;
        float f1 = com.google.zxing.pdf417.a.a(ai);
        int ai1[] = new int[8];
        int i = 0;
        int k;
        for (int j = 0; i < 17; j = k) {
            float f2 = f1 / 34F;
            float f = ((float)i * f1) / 17F;
            int l = i1;
            k = j;
            if ((float)(ai[j] + i1) <= f2 + f) {
                l = i1 + ai[j];
                k = j + 1;
            }
            ai1[k] = ai1[k] + 1;
            i++;
            i1 = l;
        }

        return ai1;
    }

    private static int c(int ai[]) {
        byte byte0 = -1;
        int i = d(ai);
        if (com.google.zxing.pdf417.a.a(i) == -1)
            i = byte0;
        return i;
    }

    private static int d(int ai[]) {
        long l = 0L;
        for (int i = 0; i < ai.length; i++) {
            int j = 0;
            while (j < ai[i])  {
                int k;
                long l1;
                if (i % 2 == 0)
                    k = 1;
                else
                    k = 0;
                l1 = k;
                j++;
                l = l << 1 | l1;
            }
        }

        return (int)l;
    }

    private static int e(int ai[]) {
        int k = com.google.zxing.pdf417.a.a(ai);
        float af[] = new float[8];
        for (int i = 0; i < af.length; i++)
            af[i] = (float)ai[i] / (float)k;

        float f2 = 3.402823E+38F;
        k = -1;
        int j = 0;
label0:
        do {
            if (j < a.length) {
                float f1 = 0.0F;
                ai = a[j];
                int l = 0;
                do {
                    float f;
label1:
                    {
                        f = f1;
                        if (l < 8) {
                            f = ai[l] - af[l];
                            f = f1 + f * f;
                            if (f < f2)
                                break label1;
                        }
                        f1 = f2;
                        if (f < f2) {
                            k = a.a[j];
                            f1 = f;
                        }
                        j++;
                        f2 = f1;
                        continue label0;
                    }
                    l++;
                    f1 = f;
                } while (true);
            }
            return k;
        } while (true);
    }

    static  {
        int i = a.a.length;
        a = (float[][])Array.newInstance(Float.TYPE, new int[] {
            i, 8
        });
        for (int j = 0; j < a.a.length; j++) {
            int i1 = a.a[j];
            int l = 0;
            int k = i1 & 1;
            for (; l < 8; l++) {
                float f = 0.0F;
                for (; (i1 & 1) == k; i1 >>= 1)
                    f++;

                k = i1 & 1;
                a[j][8 - l - 1] = f / 17F;
            }

        }

    }
}
