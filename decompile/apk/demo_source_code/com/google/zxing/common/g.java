// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.zxing.common;

import com.google.zxing.*;

// Referenced classes of package com.google.zxing.common:
//            a, b

public class g extends a {

    private static final byte a[] = new byte[0];
    private byte b[];
    private final int c[] = new int[32];

    public g(c c1) {
        super(c1);
        b = a;
    }

    private static int a(int ai[]) {
        boolean flag = false;
        int l2 = ai.length;
        int i = 0;
        int l1 = 0;
        int j = 0;
        int i1;
        int k1;
        for (k1 = 0; i < l2; k1 = i1) {
            int k = l1;
            if (ai[i] > l1) {
                k = ai[i];
                j = i;
            }
            i1 = k1;
            if (ai[i] > k1)
                i1 = ai[i];
            i++;
            l1 = k;
        }

        int j1 = 0;
        i = 0;
        int l = ((flag) ? 1 : 0);
        while (l < l2)  {
            int i2 = l - j;
            i2 *= ai[l] * i2;
            int k2;
            if (i2 > j1) {
                j1 = l;
                i = i2;
            } else {
                int j2 = j1;
                j1 = i;
                i = j2;
            }
            l++;
            i2 = j1;
            j1 = i;
            i = i2;
        }
        if (j > i) {
            i2 = i;
            j1 = j;
        } else {
            j1 = i;
            i2 = j;
        }
        if (j1 - i2 <= l2 >> 4)
            throw NotFoundException.a();
        j = j1 - 1;
        l = -1;
        i = j1 - 1;
        while (i > i2)  {
            k2 = i - i2;
            k2 = k2 * k2 * (j1 - i) * (k1 - ai[i]);
            if (k2 > l) {
                l = i;
                j = k2;
            } else {
                k2 = j;
                j = l;
                l = k2;
            }
            i--;
            k2 = l;
            l = j;
            j = k2;
        }
        return j << 3;
    }

    private void a(int i) {
        if (b.length < i)
            b = new byte[i];
        for (i = 0; i < 32; i++)
            c[i] = 0;

    }

    public a a(c c1) {
        return new g(c1);
    }

    public com.google.zxing.common.a a(int i, com.google.zxing.common.a a1) {
        int j = 1;
        c c1 = a();
        int j1 = c1.b();
        byte abyte0[];
        int ai[];
        if (a1 == null || a1.a() < j1)
            a1 = new com.google.zxing.common.a(j1);
        else
            a1.b();
        a(j1);
        abyte0 = c1.a(i, b);
        ai = c;
        for (i = 0; i < j1; i++) {
            int k = (abyte0[i] & 0xff) >> 3;
            ai[k] = ai[k] + 1;
        }

        int k1 = a(ai);
        int l = abyte0[0];
        i = abyte0[1] & 0xff;
        l &= 0xff;
        while (j < j1 - 1)  {
            int i1 = abyte0[j + 1] & 0xff;
            if ((i << 2) - l - i1 >> 1 < k1)
                a1.b(j);
            j++;
            l = i;
            i = i1;
        }
        return a1;
    }

    public b b() {
        c c1 = a();
        int i1 = c1.b();
        int j1 = c1.c();
        b b1 = new b(i1, j1);
        a(i1);
        int ai[] = c;
        for (int i = 1; i < 5; i++) {
            byte abyte0[] = c1.a((j1 * i) / 5, b);
            int k1 = (i1 << 2) / 5;
            for (int k = i1 / 5; k < k1; k++) {
                int i2 = (abyte0[k] & 0xff) >> 3;
                ai[i2] = ai[i2] + 1;
            }

        }

        int l1 = a(ai);
        byte abyte1[] = c1.a();
        for (int j = 0; j < j1; j++) {
            for (int l = 0; l < i1; l++)
                if ((abyte1[j * i1 + l] & 0xff) < l1)
                    b1.b(l, j);

        }

        return b1;
    }

}
