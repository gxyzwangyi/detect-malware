// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.zxing.common;

import java.util.Arrays;

public final class a
    implements Cloneable {

    private int a[];
    private int b;

    public a() {
        b = 0;
        a = new int[1];
    }

    public a(int i) {
        b = i;
        a = e(i);
    }

    a(int ai[], int i) {
        a = ai;
        b = i;
    }

    private static int[] e(int i) {
        return new int[(i + 31) / 32];
    }

    public int a() {
        return b;
    }

    public void a(int i, int j) {
        a[i / 32] = j;
    }

    public boolean a(int i) {
        boolean flag = true;
        if ((a[i / 32] & 1 << (i & 0x1f)) == 0)
            flag = false;
        return flag;
    }

    public boolean a(int i, int j, boolean flag) {
        if (j < i)
            throw new IllegalArgumentException();
        if (j != i) goto _L2; else goto _L1
_L1:
        flag = true;
_L10:
        return flag;
_L2:
        int l;
        int j1;
        int l1;
        int i2;
        i2 = j - 1;
        j1 = i / 32;
        l1 = i2 / 32;
        l = j1;
_L8:
        int i1;
        if (l > l1)
            break; /* Loop/switch isn't completed */
        if (l > j1)
            j = 0;
        else
            j = i & 0x1f;
        if (l < l1)
            i1 = 31;
        else
            i1 = i2 & 0x1f;
        if (j != 0 || i1 != 31) goto _L4; else goto _L3
_L3:
        j = -1;
_L6:
        i1 = a[l];
        int k;
        int k1;
        if (flag)
            k = j;
        else
            k = 0;
        if ((i1 & j) != k) {
            flag = false;
            continue; /* Loop/switch isn't completed */
        }
        break MISSING_BLOCK_LABEL_171;
_L4:
        k = 0;
        do {
            k1 = j;
            j = k;
            if (k1 > i1)
                break;
            j = k1 + 1;
            k = 1 << k1 | k;
        } while (true);
        if (true) goto _L6; else goto _L5
_L5:
        l++;
        if (true) goto _L8; else goto _L7
_L7:
        flag = true;
        if (true) goto _L10; else goto _L9
_L9:
    }

    public void b() {
        int j = a.length;
        for (int i = 0; i < j; i++)
            a[i] = 0;

    }

    public void b(int i) {
        int ai[] = a;
        int j = i / 32;
        ai[j] = ai[j] | 1 << (i & 0x1f);
    }

    public int c(int i) {
        if (i < b) goto _L2; else goto _L1
_L1:
        i = b;
_L4:
        return i;
_L2:
        int j = i / 32;
        int k = a[j] & ~((1 << (i & 0x1f)) - 1);
        i = j;
        j = k;
        do {
            if (j != 0)
                break;
            if (++i == a.length) {
                i = b;
                continue; /* Loop/switch isn't completed */
            }
            j = a[i];
        } while (true);
        j = Integer.numberOfTrailingZeros(j) + i * 32;
        i = j;
        if (j > b)
            i = b;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public int[] c() {
        return a;
    }

    public Object clone() {
        return e();
    }

    public int d(int i) {
        if (i < b) goto _L2; else goto _L1
_L1:
        i = b;
_L4:
        return i;
_L2:
        int j = i / 32;
        i = ~a[j] & ~((1 << (i & 0x1f)) - 1);
        do {
            if (i != 0)
                break;
            if (++j == a.length) {
                i = b;
                continue; /* Loop/switch isn't completed */
            }
            i = ~a[j];
        } while (true);
        j = Integer.numberOfTrailingZeros(i) + j * 32;
        i = j;
        if (j > b)
            i = b;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public void d() {
        boolean flag = true;
        int ai[] = new int[a.length];
        int k = (b - 1) / 32;
        int l1 = k + 1;
        for (int i = 0; i < l1; i++) {
            long l2 = a[i];
            l2 = (l2 & 0x55555555L) << 1 | l2 >> 1 & 0x55555555L;
            l2 = (l2 & 0x33333333L) << 2 | l2 >> 2 & 0x33333333L;
            l2 = (l2 & 0xf0f0f0fL) << 4 | l2 >> 4 & 0xf0f0f0fL;
            l2 = (l2 & 0xff00ffL) << 8 | l2 >> 8 & 0xff00ffL;
            ai[k - i] = (int)((l2 & 65535L) << 16 | l2 >> 16 & 65535L);
        }

        if (b != l1 * 32) {
            int i2 = l1 * 32 - b;
            int l = 0;
            int j = 1;
            for (; l < 31 - i2; l++)
                j = j << 1 | 1;

            int j1 = ai[0] >> i2 & j;
            for (int i1 = ((flag) ? 1 : 0); i1 < l1; i1++) {
                int k1 = ai[i1];
                ai[i1 - 1] = j1 | k1 << 32 - i2;
                j1 = k1 >> i2 & j;
            }

            ai[l1 - 1] = j1;
        }
        a = ai;
    }

    public a e() {
        return new a((int[])a.clone(), b);
    }

    public boolean equals(Object obj) {
        boolean flag1 = false;
        if (obj instanceof a) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        obj = (a)obj;
        flag = flag1;
        if (b == ((a) (obj)).b) {
            flag = flag1;
            if (Arrays.equals(a, ((a) (obj)).a))
                flag = true;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public int hashCode() {
        return b * 31 + Arrays.hashCode(a);
    }

    public String toString() {
        StringBuilder stringbuilder = new StringBuilder(b);
        int i = 0;
        while (i < b)  {
            if ((i & 7) == 0)
                stringbuilder.append(' ');
            char c1;
            if (a(i))
                c1 = 'X';
            else
                c1 = '.';
            stringbuilder.append(c1);
            i++;
        }
        return stringbuilder.toString();
    }
}
