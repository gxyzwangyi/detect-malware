// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.zxing.common.a;

import com.google.zxing.NotFoundException;
import com.google.zxing.i;

// Referenced classes of package com.google.zxing.common.a:
//            a

public final class b {

    private final com.google.zxing.common.b a;
    private final int b;
    private final int c;
    private final int d;
    private final int e;
    private final int f;
    private final int g;

    public b(com.google.zxing.common.b b1) {
        this(b1, 10, b1.e() / 2, b1.f() / 2);
    }

    public b(com.google.zxing.common.b b1, int j, int k, int l) {
        a = b1;
        b = b1.f();
        c = b1.e();
        j /= 2;
        d = k - j;
        e = k + j;
        g = l - j;
        f = j + l;
        if (g < 0 || d < 0 || f >= b || e >= c)
            throw NotFoundException.a();
        else
            return;
    }

    private i a(float f1, float f2, float f3, float f4) {
        int j;
        int k;
        k = com.google.zxing.common.a.a.a(com.google.zxing.common.a.a.a(f1, f2, f3, f4));
        f3 = (f3 - f1) / (float)k;
        f4 = (f4 - f2) / (float)k;
        j = 0;
_L3:
        int l;
        int i1;
        if (j >= k)
            break MISSING_BLOCK_LABEL_104;
        l = com.google.zxing.common.a.a.a((float)j * f3 + f1);
        i1 = com.google.zxing.common.a.a.a((float)j * f4 + f2);
        if (!a.a(l, i1)) goto _L2; else goto _L1
_L1:
        i j1 = new i(l, i1);
_L4:
        return j1;
_L2:
        j++;
          goto _L3
        j1 = null;
          goto _L4
    }

    private boolean a(int j, int k, int l, boolean flag) {
        int i1;
        boolean flag1;
        flag1 = true;
        i1 = j;
        if (!flag) goto _L2; else goto _L1
_L1:
        if (j > k)
            break MISSING_BLOCK_LABEL_70;
        if (!a.a(j, l)) goto _L4; else goto _L3
_L3:
        flag = flag1;
_L7:
        return flag;
_L4:
        j++;
          goto _L1
_L6:
        i1++;
_L2:
        if (i1 > k)
            break MISSING_BLOCK_LABEL_70;
        if (!a.a(l, i1)) goto _L6; else goto _L5
_L5:
        flag = flag1;
          goto _L7
        flag = false;
          goto _L7
    }

    private i[] a(i j, i k, i l, i i1) {
        float f4 = j.a();
        float f7 = j.b();
        float f3 = k.a();
        float f8 = k.b();
        float f2 = l.a();
        float f5 = l.b();
        float f1 = i1.a();
        float f6 = i1.b();
        if (f4 < (float)c / 2.0F) {
            j = new i[4];
            j[0] = new i(f1 - 1.0F, f6 + 1.0F);
            j[1] = new i(f3 + 1.0F, f8 + 1.0F);
            j[2] = new i(f2 - 1.0F, f5 - 1.0F);
            j[3] = new i(f4 + 1.0F, f7 - 1.0F);
        } else {
            j = new i[4];
            j[0] = new i(f1 + 1.0F, f6 + 1.0F);
            j[1] = new i(f3 + 1.0F, f8 - 1.0F);
            j[2] = new i(f2 - 1.0F, f5 + 1.0F);
            j[3] = new i(f4 - 1.0F, f7 - 1.0F);
        }
        return j;
    }

    public i[] a() {
        int j;
        int k;
        int l;
        int i1;
        int j1;
        boolean flag;
        boolean flag2;
        boolean flag6;
        int i2;
        boolean flag7;
        boolean flag9;
        boolean flag10;
        flag10 = false;
        flag9 = true;
        i1 = d;
        j = e;
        k = g;
        l = f;
        j1 = 0;
        flag6 = false;
        flag2 = false;
        flag = false;
        flag7 = false;
        i2 = 1;
_L1:
        int k1;
        i k2;
        i l2;
        if (i2 == 0)
            break MISSING_BLOCK_LABEL_757;
        boolean flag11 = true;
        i2 = 0;
        do {
            if (!flag11 && flag || j >= c)
                break;
            boolean flag15 = a(k, l, j, false);
            if (flag15) {
                j++;
                flag = true;
                i2 = 1;
                flag11 = flag15;
            } else {
                flag11 = flag15;
                if (!flag) {
                    j++;
                    flag11 = flag15;
                }
            }
        } while (true);
        if (j >= c) {
            boolean flag1 = true;
            j1 = j;
            j = l;
            l = k;
            k = i1;
            i1 = ((flag1) ? 1 : 0);
        } else {
            boolean flag12 = true;
            do {
                if (!flag12 && flag2 || l >= b)
                    break;
                boolean flag16 = a(i1, j, l, true);
                if (flag16) {
                    l++;
                    flag2 = true;
                    i2 = 1;
                    flag12 = flag16;
                } else {
                    flag12 = flag16;
                    if (!flag2) {
                        l++;
                        flag12 = flag16;
                    }
                }
            } while (true);
            if (l >= b) {
                boolean flag3 = true;
                j1 = j;
                j = l;
                k1 = i1;
                l = k;
                i1 = ((flag3) ? 1 : 0);
                k = k1;
            } else {
                boolean flag13 = true;
                do {
                    if (!flag13 && flag6 || i1 < 0)
                        break;
                    boolean flag17 = a(k, l, i1, false);
                    if (flag17) {
                        i1--;
                        flag6 = true;
                        i2 = 1;
                        flag13 = flag17;
                    } else {
                        flag13 = flag17;
                        if (!flag6) {
                            i1--;
                            flag13 = flag17;
                        }
                    }
                } while (true);
                if (i1 < 0) {
                    boolean flag4 = true;
                    j1 = j;
                    j = l;
                    k1 = i1;
                    l = k;
                    i1 = ((flag4) ? 1 : 0);
                    k = k1;
                } else {
label0:
                    {
                        boolean flag8 = i2;
                        i2 = j1;
                        boolean flag14 = true;
                        j1 = ((flag8) ? 1 : 0);
                        do {
                            if (!flag14 && i2 != 0 || k < 0)
                                break;
                            boolean flag18 = a(i1, j, k, true);
                            if (flag18) {
                                k--;
                                i2 = 1;
                                j1 = 1;
                                flag14 = flag18;
                            } else {
                                flag14 = flag18;
                                if (i2 == 0) {
                                    k--;
                                    flag14 = flag18;
                                }
                            }
                        } while (true);
                        if (k >= 0)
                            break label0;
                        boolean flag5 = true;
                        j1 = j;
                        j = l;
                        k1 = i1;
                        l = k;
                        i1 = ((flag5) ? 1 : 0);
                        k = k1;
                    }
                }
            }
        }
_L5:
        if (i1 == 0 && flag7) {
            k1 = j1 - k;
            i1 = 1;
            k2 = null;
            break MISSING_BLOCK_LABEL_171;
        } else {
            throw NotFoundException.a();
        }
        if (j1 != 0)
            flag7 = true;
        j2 = i2;
        i2 = j1;
        j1 = j2;
          goto _L1
        do {
            {
                if (i1 >= k1)
                    break MISSING_BLOCK_LABEL_750;
                k2 = a(k, j - i1, k + i1, j);
                int j2;
                if (k2 != null) {
                    l2 = k2;
                    break MISSING_BLOCK_LABEL_207;
                }
                i1++;
            }
        } while (true);
_L2:
        if (j3 == null)
            throw NotFoundException.a();
        k2 = null;
        k = ((flag9) ? 1 : 0);
        do {
label1:
            {
                if (k < k1) {
                    k2 = a(j1, j - k, j1 - k, j);
                    if (k2 == null)
                        break label1;
                }
                if (k2 == null)
                    throw NotFoundException.a();
                else
                    return a(k2, l2, j3, i3);
            }
            k++;
        } while (true);
_L4:
        if (l2 == null)
            throw NotFoundException.a();
        i1 = 1;
        k2 = null;
        i i3;
        i j3;
        for (; i1 < k1; i1++) {
            k2 = a(k, l + i1, k + i1, l);
            if (k2 != null) {
                i3 = k2;
                break MISSING_BLOCK_LABEL_597;
            }
        }

        i3 = k2;
        if (i3 == null)
            throw NotFoundException.a();
        k = 1;
        k2 = null;
        for (; k < k1; k++) {
            k2 = a(j1, l + k, j1 - k, l);
            if (k2 != null) {
                j3 = k2;
                break MISSING_BLOCK_LABEL_652;
            }
        }

        j3 = k2;
          goto _L2
        l2 = k2;
        if (true) goto _L4; else goto _L3
_L3:
        j1 = j;
        j = l;
        int l1 = i1;
        l = k;
        i1 = ((flag10) ? 1 : 0);
        k = l1;
          goto _L5
    }
}
