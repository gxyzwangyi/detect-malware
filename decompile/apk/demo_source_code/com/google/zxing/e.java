// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.zxing;


// Referenced classes of package com.google.zxing:
//            c

public final class e extends c {

    private final byte a[];
    private final int b;
    private final int c;
    private final int d;
    private final int e;

    public e(byte abyte0[], int i, int j, int k, int l, int i1, int j1, 
            boolean flag) {
        super(i1, j1);
        if (k + i1 > i || l + j1 > j)
            throw new IllegalArgumentException("Crop rectangle does not fit within image data.");
        a = abyte0;
        b = i;
        c = j;
        d = k;
        e = l;
        if (flag)
            a(i1, j1);
    }

    private void a(int i, int j) {
        byte abyte0[] = a;
        int k = e;
        int l = b;
        k = d + k * l;
        for (int i1 = 0; i1 < j; i1++) {
            int l1 = i / 2;
            int k1 = (k + i) - 1;
            for (int j1 = k; j1 < k + l1;) {
                byte byte0 = abyte0[j1];
                abyte0[j1] = abyte0[k1];
                abyte0[k1] = byte0;
                j1++;
                k1--;
            }

            k += b;
        }

    }

    public byte[] a() {
        int j;
        int k;
        int l;
        j = 0;
        k = b();
        l = c();
        if (k != b || l != c) goto _L2; else goto _L1
_L1:
        byte abyte0[] = a;
_L4:
        return abyte0;
_L2:
        int i;
        byte abyte1[];
        int i1 = k * l;
        abyte1 = new byte[i1];
        i = e * b + d;
        if (k != b)
            break; /* Loop/switch isn't completed */
        System.arraycopy(a, i, abyte1, 0, i1);
        abyte0 = abyte1;
        if (true) goto _L4; else goto _L3
_L3:
        byte abyte2[] = a;
        do {
            abyte0 = abyte1;
            if (j >= l)
                continue;
            System.arraycopy(abyte2, i, abyte1, j * k, k);
            i += b;
            j++;
        } while (true);
        if (true) goto _L4; else goto _L5
_L5:
    }

    public byte[] a(int i, byte abyte0[]) {
        int i1;
        byte abyte1[];
label0:
        {
            if (i < 0 || i >= c())
                throw new IllegalArgumentException((new StringBuilder()).append("Requested row is outside the image: ").append(i).toString());
            i1 = b();
            if (abyte0 != null) {
                abyte1 = abyte0;
                if (abyte0.length >= i1)
                    break label0;
            }
            abyte1 = new byte[i1];
        }
        int l = e;
        int j = b;
        int k = d;
        System.arraycopy(a, (l + i) * j + k, abyte1, 0, i1);
        return abyte1;
    }

    public int[] f() {
        int j1 = b() / 2;
        int i1 = c() / 2;
        int ai[] = new int[j1 * i1];
        byte abyte0[] = a;
        int k1 = e;
        int k = b;
        int j = d;
        int i = 0;
        j = k1 * k + j;
        for (; i < i1; i++) {
            for (int l = 0; l < j1; l++)
                ai[i * j1 + l] = (abyte0[l * 2 + j] & 0xff) * 0x10101 | 0xff000000;

            j += b * 2;
        }

        return ai;
    }

    public int g() {
        return b() / 2;
    }

    public int h() {
        return c() / 2;
    }
}
