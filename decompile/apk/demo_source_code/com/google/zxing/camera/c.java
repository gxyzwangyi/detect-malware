// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.zxing.camera;

import android.graphics.Point;
import android.util.Log;
import java.util.*;
import java.util.regex.Pattern;

public final class c {

    private static final Pattern a = Pattern.compile(";");

    public static Point a(android.hardware.Camera.Parameters parameters, Point point) {
        Object obj = parameters.getSupportedPreviewSizes();
        if (obj != null) goto _L2; else goto _L1
_L1:
        Log.w("CameraConfiguration", "Device returned no supported preview sizes; using default");
        parameters = parameters.getPreviewSize();
        if (parameters == null)
            throw new IllegalStateException("Parameters contained no preview size!");
        parameters = new Point(((android.hardware.Camera.Size) (parameters)).width, ((android.hardware.Camera.Size) (parameters)).height);
_L4:
        return parameters;
_L2:
label0:
        {
            obj = new ArrayList(((Collection) (obj)));
            Collections.sort(((List) (obj)), new Comparator() {

                public int a(android.hardware.Camera.Size size2, android.hardware.Camera.Size size3) {
                    int i1 = size2.height * size2.width;
                    int j1 = size3.height * size3.width;
                    if (j1 < i1)
                        i1 = -1;
                    else
                    if (j1 > i1)
                        i1 = 1;
                    else
                        i1 = 0;
                    return i1;
                }

                public int compare(Object obj1, Object obj2) {
                    return a((android.hardware.Camera.Size)obj1, (android.hardware.Camera.Size)obj2);
                }

            }
);
            if (Log.isLoggable("CameraConfiguration", 4)) {
                StringBuilder stringbuilder = new StringBuilder();
                android.hardware.Camera.Size size;
                for (Iterator iterator1 = ((List) (obj)).iterator(); iterator1.hasNext(); stringbuilder.append(size.width).append('x').append(size.height).append(' '))
                    size = (android.hardware.Camera.Size)iterator1.next();

                Log.i("CameraConfiguration", (new StringBuilder()).append("Supported preview sizes: ").append(stringbuilder).toString());
            }
            double d = (double)point.x / (double)point.y;
            int i;
            int j;
            int k;
            int l;
label1:
            do {
                for (Iterator iterator = ((List) (obj)).iterator(); iterator.hasNext();) {
                    android.hardware.Camera.Size size1 = (android.hardware.Camera.Size)iterator.next();
                    j = size1.width;
                    i = size1.height;
                    if (j * i < 0x25800) {
                        iterator.remove();
                    } else {
                        if (j < i)
                            l = 1;
                        else
                            l = 0;
                        if (l != 0)
                            k = i;
                        else
                            k = j;
                        if (l != 0)
                            l = j;
                        else
                            l = i;
                        if (Math.abs((double)k / (double)l - d) <= 0.14999999999999999D)
                            continue label1;
                        iterator.remove();
                    }
                }

                break label0;
            } while (k != point.x || l != point.y);
            parameters = new Point(j, i);
            Log.i("CameraConfiguration", (new StringBuilder()).append("Found preview size exactly matching screen size: ").append(parameters).toString());
            continue; /* Loop/switch isn't completed */
        }
        if (!((List) (obj)).isEmpty()) {
            parameters = (android.hardware.Camera.Size)((List) (obj)).get(0);
            parameters = new Point(((android.hardware.Camera.Size) (parameters)).width, ((android.hardware.Camera.Size) (parameters)).height);
            Log.i("CameraConfiguration", (new StringBuilder()).append("Using largest suitable preview size: ").append(parameters).toString());
        } else {
            parameters = parameters.getPreviewSize();
            if (parameters == null)
                throw new IllegalStateException("Parameters contained no preview size!");
            parameters = new Point(((android.hardware.Camera.Size) (parameters)).width, ((android.hardware.Camera.Size) (parameters)).height);
            Log.i("CameraConfiguration", (new StringBuilder()).append("No suitable preview sizes, using default: ").append(parameters).toString());
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    private static transient String a(String s, Collection collection, String as[]) {
        int i;
        int j;
        Log.i("CameraConfiguration", (new StringBuilder()).append("Requesting ").append(s).append(" value from among: ").append(Arrays.toString(as)).toString());
        Log.i("CameraConfiguration", (new StringBuilder()).append("Supported ").append(s).append(" values: ").append(collection).toString());
        if (collection == null)
            break MISSING_BLOCK_LABEL_149;
        j = as.length;
        i = 0;
_L3:
        String s1;
        if (i >= j)
            break MISSING_BLOCK_LABEL_149;
        s1 = as[i];
        if (!collection.contains(s1)) goto _L2; else goto _L1
_L1:
        Log.i("CameraConfiguration", (new StringBuilder()).append("Can set ").append(s).append(" to: ").append(s1).toString());
        s = s1;
_L4:
        return s;
_L2:
        i++;
          goto _L3
        Log.i("CameraConfiguration", "No supported values match");
        s = null;
          goto _L4
    }

    public static void a(android.hardware.Camera.Parameters parameters, boolean flag) {
        Object obj = parameters.getSupportedFlashModes();
        if (flag)
            obj = a("flash mode", ((Collection) (obj)), new String[] {
                "torch", "on"
            });
        else
            obj = a("flash mode", ((Collection) (obj)), new String[] {
                "off"
            });
        if (obj != null)
            if (((String) (obj)).equals(parameters.getFlashMode())) {
                Log.i("CameraConfiguration", (new StringBuilder()).append("Flash mode already set to ").append(((String) (obj))).toString());
            } else {
                Log.i("CameraConfiguration", (new StringBuilder()).append("Setting flash mode to ").append(((String) (obj))).toString());
                parameters.setFlashMode(((String) (obj)));
            }
    }

    public static void a(android.hardware.Camera.Parameters parameters, boolean flag, boolean flag1, boolean flag2) {
        List list = parameters.getSupportedFocusModes();
        String s = null;
        String s1;
        if (flag)
            if (flag2 || flag1)
                s = a("focus mode", ((Collection) (list)), new String[] {
                    "auto"
                });
            else
                s = a("focus mode", ((Collection) (list)), new String[] {
                    "continuous-picture", "continuous-video", "auto"
                });
        s1 = s;
        if (!flag2) {
            s1 = s;
            if (s == null)
                s1 = a("focus mode", ((Collection) (list)), new String[] {
                    "macro", "edof"
                });
        }
        if (s1 != null)
            if (s1.equals(parameters.getFocusMode()))
                Log.i("CameraConfiguration", (new StringBuilder()).append("Focus mode already set to ").append(s1).toString());
            else
                parameters.setFocusMode(s1);
    }

}
