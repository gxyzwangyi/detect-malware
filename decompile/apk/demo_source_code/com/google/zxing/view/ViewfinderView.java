// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.zxing.view;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.*;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.View;
import com.google.zxing.camera.d;
import com.google.zxing.i;
import java.util.*;

public final class ViewfinderView extends View {

    private static final int b[] = {
        0, 64, 128, 192, 255, 192, 128, 64
    };
    private static float d;
    boolean a;
    private int c;
    private Paint e;
    private float f;
    private int g;
    private d h;
    private Bitmap i;
    private final int j;
    private final int k;
    private final int l;
    private int m;
    private List n;
    private List o;

    public ViewfinderView(Context context, AttributeSet attributeset) {
        super(context, attributeset);
        d = context.getResources().getDisplayMetrics().density;
        c = (int)(20F * d);
        e = new Paint(1);
        context = getResources();
        j = context.getColor(0x7f0e004b);
        k = context.getColor(0x7f0e0040);
        l = context.getColor(0x7f0e0037);
        m = 0;
        n = new ArrayList(5);
        o = null;
    }

    public void a() {
        Bitmap bitmap = i;
        i = null;
        if (bitmap != null)
            bitmap.recycle();
        invalidate();
    }

    public void a(i i1) {
        List list = n;
        list;
        JVM INSTR monitorenter ;
        int j1;
        list.add(i1);
        j1 = list.size();
        if (j1 <= 20)
            break MISSING_BLOCK_LABEL_44;
        list.subList(0, j1 - 10).clear();
        list;
        JVM INSTR monitorexit ;
        return;
        i1;
        list;
        JVM INSTR monitorexit ;
        throw i1;
    }

    public void onDraw(Canvas canvas) {
        if (h != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        float f1;
        float f2;
        int i1;
        int j1;
        Rect rect;
        Object obj;
        Object obj1;
        rect = h.e();
        obj = h.f();
        if (rect == null || obj == null)
            continue; /* Loop/switch isn't completed */
        if (!a) {
            a = true;
            f = rect.top;
            g = rect.bottom;
        }
        int k1 = canvas.getWidth();
        j1 = canvas.getHeight();
        obj1 = e;
        if (i != null)
            i1 = k;
        else
            i1 = j;
        ((Paint) (obj1)).setColor(i1);
        canvas.drawRect(0.0F, 0.0F, k1, rect.top, e);
        canvas.drawRect(0.0F, rect.top, rect.left, rect.bottom + 1, e);
        canvas.drawRect(rect.right + 1, rect.top, k1, rect.bottom + 1, e);
        canvas.drawRect(0.0F, rect.bottom + 1, k1, j1, e);
        if (i != null) {
            e.setAlpha(160);
            canvas.drawBitmap(i, null, rect, e);
            continue; /* Loop/switch isn't completed */
        }
        e.setAlpha(255);
        e.setColor(0xff00ff00);
        canvas.drawRect(rect.left - 1, rect.top - 1, (rect.left - 1) + c, (rect.top - 1) + 3, e);
        canvas.drawRect(rect.left - 1, rect.top - 1, (rect.left - 1) + 3, (rect.top - 1) + c, e);
        canvas.drawRect((rect.right + 2) - c, rect.top - 1, rect.right + 2, (rect.top - 1) + 3, e);
        canvas.drawRect((rect.right + 2) - 3, rect.top - 1, rect.right + 2, (rect.top - 1) + c, e);
        canvas.drawRect(rect.left - 1, (rect.bottom + 2) - 3, (rect.left - 1) + c, rect.bottom + 2, e);
        canvas.drawRect(rect.left - 1, (rect.bottom + 2) - c, (rect.left - 1) + 3, rect.bottom + 2, e);
        canvas.drawRect((rect.right + 2) - c, (rect.bottom + 2) - 3, rect.right + 2, rect.bottom + 2, e);
        canvas.drawRect((rect.right + 2) - 3, (rect.bottom + 2) - c, rect.right + 2, rect.bottom + 2, e);
        e.setColor(-1);
        canvas.drawLine(rect.left, rect.bottom, rect.left, rect.top, e);
        canvas.drawLine(rect.left, rect.top, rect.right, rect.top, e);
        canvas.drawLine(rect.right, rect.top, rect.right, rect.bottom, e);
        canvas.drawLine(rect.right, rect.bottom, rect.left, rect.bottom, e);
        f = f + 4F;
        if (f >= (float)rect.bottom)
            f = rect.top;
        f1 = rect.left;
        f2 = rect.right;
        obj1 = android.graphics.Shader.TileMode.MIRROR;
        obj1 = new LinearGradient(f1 + 5F, 0.0F, f2 - 5F, 0.0F, new int[] {
            0xffffff, 0xff00ff00, 0xff00ff00, 0xffffff
        }, null, ((android.graphics.Shader.TileMode) (obj1)));
        android.graphics.Shader shader = e.getShader();
        e.setShader(((android.graphics.Shader) (obj1)));
        canvas.drawRect(5F + (float)rect.left, f - 1.5F, (float)rect.right - 5F, 1.5F + f, e);
        e.setShader(shader);
        e.setColor(-1);
        e.setTextSize(13F * d);
        e.setTextAlign(android.graphics.Paint.Align.CENTER);
        e.setTypeface(Typeface.create("system", 0));
        canvas.drawText(getResources().getString(0x7f08003f), rect.centerX(), (float)rect.bottom + 24F * d, e);
        f2 = (float)rect.width() / (float)((Rect) (obj)).width();
        f1 = (float)rect.height() / (float)((Rect) (obj)).height();
        obj1 = n;
        obj = o;
        j1 = rect.left;
        i1 = rect.top;
        if (!((List) (obj1)).isEmpty()) goto _L4; else goto _L3
_L3:
        o = null;
_L8:
        if (obj == null) goto _L6; else goto _L5
_L5:
        e.setAlpha(80);
        e.setColor(l);
        obj;
        JVM INSTR monitorenter ;
        for (Iterator iterator = ((List) (obj)).iterator(); iterator.hasNext(); canvas.drawCircle((int)(((i) (obj1)).a() * f2) + j1, (int)(((i) (obj1)).b() * f1) + i1, 3F, e))
            obj1 = (i)iterator.next();

          goto _L7
        canvas;
        obj;
        JVM INSTR monitorexit ;
        throw canvas;
_L4:
        n = new ArrayList(5);
        o = ((List) (obj1));
        e.setAlpha(160);
        e.setColor(l);
        obj1;
        JVM INSTR monitorenter ;
        i l1;
        for (Iterator iterator1 = ((List) (obj1)).iterator(); iterator1.hasNext(); canvas.drawCircle((int)(l1.a() * f2) + j1, (int)(l1.b() * f1) + i1, 6F, e))
            l1 = (i)iterator1.next();

        break MISSING_BLOCK_LABEL_1322;
        canvas;
        obj1;
        JVM INSTR monitorexit ;
        throw canvas;
        obj1;
        JVM INSTR monitorexit ;
          goto _L8
_L7:
        obj;
        JVM INSTR monitorexit ;
_L6:
        postInvalidateDelayed(30L, rect.left - 6, rect.top - 6, rect.right + 6, rect.bottom + 6);
        if (true) goto _L1; else goto _L9
_L9:
    }

    public void setCameraManager(d d1) {
        h = d1;
    }

}
