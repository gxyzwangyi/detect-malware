// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.a;


abstract class g {

    private StringBuilder a;
    private boolean b;

    g() {
        a = new StringBuilder();
    }

    private boolean a(boolean flag) {
        String s1 = a.toString();
        String s;
        if (b) {
            if (flag)
                s = "\r\n";
            else
                s = "\r";
        } else
        if (flag)
            s = "\n";
        else
            s = "";
        a(s1, s);
        a = new StringBuilder();
        b = false;
        return flag;
    }

    protected void a() {
        if (b || a.length() > 0)
            a(false);
    }

    protected abstract void a(String s, String s1);

    protected void a(char ac[], int i, int j) {
        if (!b || j <= 0) goto _L2; else goto _L1
_L1:
        int k;
        int l;
        int i1;
        int j1;
        int k1;
        boolean flag;
        if (ac[i] == '\n')
            flag = true;
        else
            flag = false;
        if (!a(flag)) goto _L2; else goto _L3
_L3:
        l = i + 1;
_L8:
        k1 = i + j;
        k = l;
        i1 = l;
_L5:
        if (k >= k1)
            break MISSING_BLOCK_LABEL_237;
        l = i1;
        j1 = k;
        switch (ac[k]) {
        default:
            j1 = k;
            l = i1;
            break;

        case 10: // '\n'
            break MISSING_BLOCK_LABEL_202;

        case 11: // '\013'
        case 12: // '\f'
            break;

        case 13: // '\r'
            break; /* Loop/switch isn't completed */
        }
_L6:
        k = j1 + 1;
        i1 = l;
        if (true) goto _L5; else goto _L4
_L4:
        a.append(ac, i1, k - i1);
        b = true;
        if (k + 1 < k1) {
            boolean flag1;
            if (ac[k + 1] == '\n')
                flag1 = true;
            else
                flag1 = false;
            if (a(flag1))
                k++;
        }
        j1 = k;
        l = k + 1;
          goto _L6
        a.append(ac, i1, k - i1);
        a(true);
        l = k + 1;
        j1 = k;
          goto _L6
        a.append(ac, i1, (i + j) - i1);
        return;
_L2:
        l = i;
        if (true) goto _L8; else goto _L7
_L7:
    }
}
