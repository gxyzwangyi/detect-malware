// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.a;

import com.google.common.base.i;
import com.google.common.base.o;
import java.io.Closeable;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.logging.Level;
import java.util.logging.Logger;

// Referenced classes of package com.google.common.a:
//            d

public final class e
    implements Closeable {
    static final class a
        implements c {

        static final a a = new a();

        public void a(Closeable closeable, Throwable throwable, Throwable throwable1) {
            d.a.log(Level.WARNING, (new StringBuilder()).append("Suppressing exception thrown when closing ").append(closeable).toString(), throwable1);
        }


        a() {
        }
    }

    static final class b
        implements c {

        static final b a = new b();
        static final Method b = b();

        static boolean a() {
            boolean flag;
            if (b != null)
                flag = true;
            else
                flag = false;
            return flag;
        }

        private static Method b() {
            Method method;
            try {
                method = java/lang/Throwable.getMethod("addSuppressed", new Class[] {
                    java/lang/Throwable
                });
            }
            catch (Throwable throwable) {
                throwable = null;
            }
            return method;
        }

        public void a(Closeable closeable, Throwable throwable, Throwable throwable1) {
            if (throwable != throwable1)
                try {
                    b.invoke(throwable, new Object[] {
                        throwable1
                    });
                }
                catch (Throwable throwable2) {
                    a.a.a(closeable, throwable, throwable1);
                }
        }


        b() {
        }
    }

    static interface c {

        public abstract void a(Closeable closeable, Throwable throwable, Throwable throwable1);
    }


    private static final c b;
    final c a;
    private final Deque c = new ArrayDeque(4);
    private Throwable d;

    e(c c1) {
        a = (c)i.a(c1);
    }

    public static e a() {
        return new e(b);
    }

    public Closeable a(Closeable closeable) {
        if (closeable != null)
            c.addFirst(closeable);
        return closeable;
    }

    public RuntimeException a(Throwable throwable) {
        i.a(throwable);
        d = throwable;
        o.b(throwable, java/io/IOException);
        throw new RuntimeException(throwable);
    }

    public void close() {
        Throwable throwable = d;
        while (!c.isEmpty())  {
            Closeable closeable = (Closeable)c.removeFirst();
            try {
                closeable.close();
            }
            catch (Throwable throwable1) {
                if (throwable == null)
                    throwable = throwable1;
                else
                    a.a(closeable, throwable, throwable1);
            }
        }
        if (d == null && throwable != null) {
            o.b(throwable, java/io/IOException);
            throw new AssertionError(throwable);
        } else {
            return;
        }
    }

    static  {
        Object obj;
        if (b.a())
            obj = b.a;
        else
            obj = a.a;
        b = ((c) (obj));
    }
}
