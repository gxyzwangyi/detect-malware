// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.util.concurrent;

import com.google.common.base.i;
import com.google.common.base.o;
import java.lang.reflect.Field;
import java.security.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.locks.LockSupport;
import java.util.logging.Level;
import java.util.logging.Logger;
import sun.misc.Unsafe;

// Referenced classes of package com.google.common.util.concurrent:
//            e, h

public abstract class com.google.common.util.concurrent.a
    implements com.google.common.util.concurrent.e {
    private static abstract class a {

        abstract void a(j j1, j j2);

        abstract void a(j j1, Thread thread);

        abstract boolean a(com.google.common.util.concurrent.a a1, d d1, d d2);

        abstract boolean a(com.google.common.util.concurrent.a a1, j j1, j j2);

        abstract boolean a(com.google.common.util.concurrent.a a1, Object obj, Object obj1);

        private a() {
        }

    }

    private static final class b {

        final boolean a;
        final Throwable b;

        b(boolean flag, Throwable throwable) {
            a = flag;
            b = throwable;
        }
    }

    private static final class c {

        static final c a = new c(new AbstractFuture.Failure._cls1("Failure occurred while trying to finish a future."));
        final Throwable b;


        c(Throwable throwable) {
            b = (Throwable)com.google.common.base.i.a(throwable);
        }
    }

    private static final class d {

        static final d a = new d(null, null);
        final Runnable b;
        final Executor c;
        d d;


        d(Runnable runnable, Executor executor) {
            b = runnable;
            c = executor;
        }
    }

    private static final class e extends a {

        final AtomicReferenceFieldUpdater a;
        final AtomicReferenceFieldUpdater b;
        final AtomicReferenceFieldUpdater c;
        final AtomicReferenceFieldUpdater d;
        final AtomicReferenceFieldUpdater e;

        void a(j j1, j j2) {
            b.lazySet(j1, j2);
        }

        void a(j j1, Thread thread) {
            a.lazySet(j1, thread);
        }

        boolean a(com.google.common.util.concurrent.a a1, d d1, d d2) {
            return d.compareAndSet(a1, d1, d2);
        }

        boolean a(com.google.common.util.concurrent.a a1, j j1, j j2) {
            return c.compareAndSet(a1, j1, j2);
        }

        boolean a(com.google.common.util.concurrent.a a1, Object obj, Object obj1) {
            return e.compareAndSet(a1, obj, obj1);
        }

        e(AtomicReferenceFieldUpdater atomicreferencefieldupdater, AtomicReferenceFieldUpdater atomicreferencefieldupdater1, AtomicReferenceFieldUpdater atomicreferencefieldupdater2, AtomicReferenceFieldUpdater atomicreferencefieldupdater3, AtomicReferenceFieldUpdater atomicreferencefieldupdater4) {
            a = atomicreferencefieldupdater;
            b = atomicreferencefieldupdater1;
            c = atomicreferencefieldupdater2;
            d = atomicreferencefieldupdater3;
            e = atomicreferencefieldupdater4;
        }
    }

    private final class f
        implements Runnable {

        final com.google.common.util.concurrent.e a;
        final com.google.common.util.concurrent.a b;

        public void run() {
            if (com.google.common.util.concurrent.a.a(b) == this)
                com.google.common.util.concurrent.a.a(b, a, this);
        }
    }

    private static final class g extends a {

        void a(j j1, j j2) {
            j1.c = j2;
        }

        void a(j j1, Thread thread) {
            j1.b = thread;
        }

        boolean a(com.google.common.util.concurrent.a a1, d d1, d d2) {
            a1;
            JVM INSTR monitorenter ;
            if (com.google.common.util.concurrent.a.c(a1) != d1) goto _L2; else goto _L1
_L1:
            com.google.common.util.concurrent.a.a(a1, d2);
            boolean flag = true;
            a1;
            JVM INSTR monitorexit ;
_L4:
            return flag;
_L2:
            flag = false;
            a1;
            JVM INSTR monitorexit ;
            if (true) goto _L4; else goto _L3
_L3:
            d1;
            a1;
            JVM INSTR monitorexit ;
            throw d1;
        }

        boolean a(com.google.common.util.concurrent.a a1, j j1, j j2) {
            a1;
            JVM INSTR monitorenter ;
            if (com.google.common.util.concurrent.a.b(a1) != j1) goto _L2; else goto _L1
_L1:
            com.google.common.util.concurrent.a.a(a1, j2);
            boolean flag = true;
            a1;
            JVM INSTR monitorexit ;
_L4:
            return flag;
_L2:
            flag = false;
            a1;
            JVM INSTR monitorexit ;
            if (true) goto _L4; else goto _L3
_L3:
            j1;
            a1;
            JVM INSTR monitorexit ;
            throw j1;
        }

        boolean a(com.google.common.util.concurrent.a a1, Object obj, Object obj1) {
            a1;
            JVM INSTR monitorenter ;
            if (com.google.common.util.concurrent.a.a(a1) != obj) goto _L2; else goto _L1
_L1:
            com.google.common.util.concurrent.a.a(a1, obj1);
            boolean flag = true;
            a1;
            JVM INSTR monitorexit ;
_L4:
            return flag;
_L2:
            flag = false;
            a1;
            JVM INSTR monitorexit ;
            if (true) goto _L4; else goto _L3
_L3:
            obj;
            a1;
            JVM INSTR monitorexit ;
            throw obj;
        }

        private g() {
        }

    }

    static abstract class h extends com.google.common.util.concurrent.a {

        public final void a(Runnable runnable, Executor executor) {
            a(runnable, executor);
        }

        public final Object get() {
            return get();
        }

        public final Object get(long l, TimeUnit timeunit) {
            return get(l, timeunit);
        }

        public final boolean isCancelled() {
            return isCancelled();
        }

        public final boolean isDone() {
            return isDone();
        }

        h() {
        }
    }

    private static final class i extends a {

        static final Unsafe a;
        static final long b;
        static final long c;
        static final long d;
        static final long e;
        static final long f;

        void a(j j1, j j2) {
            a.putObject(j1, f, j2);
        }

        void a(j j1, Thread thread) {
            a.putObject(j1, e, thread);
        }

        boolean a(com.google.common.util.concurrent.a a1, d d1, d d2) {
            return a.compareAndSwapObject(a1, b, d1, d2);
        }

        boolean a(com.google.common.util.concurrent.a a1, j j1, j j2) {
            return a.compareAndSwapObject(a1, c, j1, j2);
        }

        boolean a(com.google.common.util.concurrent.a a1, Object obj, Object obj1) {
            return a.compareAndSwapObject(a1, d, obj, obj1);
        }

        static  {
            Object obj;
            try {
                obj = Unsafe.getUnsafe();
            }
            catch (SecurityException securityexception) {
                try {
                    securityexception = JVM INSTR new #9   <Class a$i$1>;
                    securityexception._cls1();
                    securityexception = (Unsafe)AccessController.doPrivileged(securityexception);
                }
                catch (PrivilegedActionException privilegedactionexception) {
                    throw new RuntimeException("Could not initialize intrinsics", privilegedactionexception.getCause());
                }
            }
            try {
                c = ((Unsafe) (obj)).objectFieldOffset(com/google/common/util/concurrent/a.getDeclaredField("waiters"));
                b = ((Unsafe) (obj)).objectFieldOffset(com/google/common/util/concurrent/a.getDeclaredField("listeners"));
                d = ((Unsafe) (obj)).objectFieldOffset(com/google/common/util/concurrent/a.getDeclaredField("value"));
                e = ((Unsafe) (obj)).objectFieldOffset(com/google/common/util/concurrent/a$j.getDeclaredField("b"));
                f = ((Unsafe) (obj)).objectFieldOffset(com/google/common/util/concurrent/a$j.getDeclaredField("c"));
                a = ((Unsafe) (obj));
                return;
            }
            catch (Exception exception) {
                throw o.b(exception);
            }
        }

        private i() {
        }

    }

    private static final class j {

        static final j a = new j(false);
        volatile Thread b;
        volatile j c;

        void a() {
            Thread thread = b;
            if (thread != null) {
                b = null;
                LockSupport.unpark(thread);
            }
        }

        void a(j j1) {
            com.google.common.util.concurrent.a.d().a(this, j1);
        }


        j() {
            com.google.common.util.concurrent.a.d().a(this, Thread.currentThread());
        }

        j(boolean flag) {
        }
    }


    private static final boolean a = Boolean.parseBoolean(System.getProperty("guava.concurrent.generate_cancellation_cause", "false"));
    private static final Logger b;
    private static final a c;
    private static final Object d = new Object();
    private volatile Object e;
    private volatile d f;
    private volatile j g;

    protected com.google.common.util.concurrent.a() {
    }

    static d a(com.google.common.util.concurrent.a a1, d d1) {
        a1.f = d1;
        return d1;
    }

    static j a(com.google.common.util.concurrent.a a1, j j1) {
        a1.g = j1;
        return j1;
    }

    static Object a(com.google.common.util.concurrent.a a1) {
        return a1.e;
    }

    static Object a(com.google.common.util.concurrent.a a1, Object obj) {
        a1.e = obj;
        return obj;
    }

    static final CancellationException a(String s, Throwable throwable) {
        s = new CancellationException(s);
        s.initCause(throwable);
        return s;
    }

    private void a(j j1) {
        j1.b = null;
_L10:
        j1 = g;
        if (j1 != j.a) goto _L2; else goto _L1
_L1:
        return;
_L6:
        if (j1 == null) goto _L1; else goto _L3
_L3:
        j j3 = j1.c;
        if (j1.b == null) goto _L5; else goto _L4
_L4:
        j j2;
        j2 = j1;
        j1 = j3;
          goto _L6
_L5:
        if (j2 == null) goto _L8; else goto _L7
_L7:
        j2.c = j3;
        if (j2.b == null) goto _L10; else goto _L9
_L9:
        j1 = j2;
          goto _L4
_L8:
        if (c.a(this, j1, j3)) goto _L9; else goto _L10
_L2:
        j2 = null;
          goto _L6
    }

    static boolean a(com.google.common.util.concurrent.a a1, com.google.common.util.concurrent.e e1, Object obj) {
        return a1.a(e1, obj);
    }

    private boolean a(com.google.common.util.concurrent.e e1, Object obj) {
        if (!(e1 instanceof h)) goto _L2; else goto _L1
_L1:
        e1 = ((com.google.common.util.concurrent.e) (((com.google.common.util.concurrent.a)e1).e));
_L3:
        boolean flag;
        Object obj1;
        if (c.a(this, obj, e1)) {
            f();
            flag = true;
        } else {
            flag = false;
        }
        return flag;
_L2:
        obj1 = com.google.common.util.concurrent.h.a(e1);
        e1 = ((com.google.common.util.concurrent.e) (obj1));
        if (obj1 == null)
            try {
                e1 = ((com.google.common.util.concurrent.e) (d));
            }
            // Misplaced declaration of an exception variable
            catch (com.google.common.util.concurrent.e e1) {
                e1 = new c(e1.getCause());
            }
            // Misplaced declaration of an exception variable
            catch (com.google.common.util.concurrent.e e1) {
                e1 = new b(false, e1);
            }
            // Misplaced declaration of an exception variable
            catch (com.google.common.util.concurrent.e e1) {
                e1 = new c(e1);
            }
          goto _L3
    }

    static j b(com.google.common.util.concurrent.a a1) {
        return a1.g;
    }

    private Object b(Object obj) {
        if (obj instanceof b)
            throw a("Task was cancelled.", ((b)obj).b);
        if (obj instanceof c)
            throw new ExecutionException(((c)obj).b);
        Object obj1 = obj;
        if (obj == d)
            obj1 = null;
        return obj1;
    }

    private static void b(Runnable runnable, Executor executor) {
        executor.execute(runnable);
_L1:
        return;
        RuntimeException runtimeexception;
        runtimeexception;
        b.log(Level.SEVERE, (new StringBuilder()).append("RuntimeException while executing runnable ").append(runnable).append(" with executor ").append(executor).toString(), runtimeexception);
          goto _L1
    }

    static d c(com.google.common.util.concurrent.a a1) {
        return a1.f;
    }

    static a d() {
        return c;
    }

    private Throwable e() {
        return new CancellationException("Future.cancel() was called.");
    }

    private void f() {
        for (j j1 = g(); j1 != null; j1 = j1.c)
            j1.a();

        d d1 = h();
        d d2 = null;
        d d3;
        do {
            d3 = d2;
            if (d1 == null)
                break;
            d3 = d1.d;
            d1.d = d2;
            d2 = d1;
            d1 = d3;
        } while (true);
        for (; d3 != null; d3 = d3.d)
            b(d3.b, d3.c);

        c();
    }

    private j g() {
        j j1;
        do
            j1 = g;
        while (!c.a(this, j1, j.a));
        return j1;
    }

    private d h() {
        d d1;
        do
            d1 = f;
        while (!c.a(this, d1, d.a));
        return d1;
    }

    protected void a() {
    }

    public void a(Runnable runnable, Executor executor) {
        d d1;
        com.google.common.base.i.a(runnable, "Runnable was null.");
        com.google.common.base.i.a(executor, "Executor was null.");
        d1 = f;
        if (d1 == d.a) goto _L2; else goto _L1
_L1:
        d d3 = new d(runnable, executor);
_L5:
        d3.d = d1;
        if (!c.a(this, d1, d3)) goto _L4; else goto _L3
_L3:
        return;
_L4:
        d d2;
        d2 = f;
        d1 = d2;
        if (d2 != d.a) goto _L5; else goto _L2
_L2:
        b(runnable, executor);
          goto _L3
    }

    final void a(Future future) {
        boolean flag;
        if (future != null)
            flag = true;
        else
            flag = false;
        if (flag & isCancelled())
            future.cancel(b());
    }

    protected boolean a(Object obj) {
        Object obj1 = obj;
        if (obj == null)
            obj1 = d;
        boolean flag;
        if (c.a(this, null, obj1)) {
            f();
            flag = true;
        } else {
            flag = false;
        }
        return flag;
    }

    protected boolean a(Throwable throwable) {
        throwable = new c((Throwable)com.google.common.base.i.a(throwable));
        boolean flag;
        if (c.a(this, null, throwable)) {
            f();
            flag = true;
        } else {
            flag = false;
        }
        return flag;
    }

    protected final boolean b() {
        Object obj = e;
        boolean flag;
        if ((obj instanceof b) && ((b)obj).a)
            flag = true;
        else
            flag = false;
        return flag;
    }

    void c() {
    }

    public boolean cancel(boolean flag) {
        boolean flag2;
        Object obj;
        boolean flag3 = true;
        Object obj1 = e;
        boolean flag1;
        b b1;
        if (obj1 == null)
            flag1 = true;
        else
            flag1 = false;
        if (!(flag1 | (obj1 instanceof f))) goto _L2; else goto _L1
_L1:
        if (a)
            obj = e();
        else
            obj = null;
        b1 = new b(flag, ((Throwable) (obj)));
        obj = obj1;
_L5:
        if (!c.a(this, obj, b1)) goto _L4; else goto _L3
_L3:
        if (flag)
            a();
        f();
        flag2 = flag3;
        if (obj instanceof f) {
            ((f)obj).a.cancel(flag);
            flag2 = flag3;
        }
_L6:
        return flag2;
_L4:
        Object obj2;
        obj2 = e;
        obj = obj2;
        if (obj2 instanceof f) goto _L5; else goto _L2
_L2:
        flag2 = false;
          goto _L6
    }

    public Object get() {
        Object obj;
        if (Thread.interrupted())
            throw new InterruptedException();
        obj = e;
        boolean flag;
        boolean flag2;
        if (obj != null)
            flag = true;
        else
            flag = false;
        if (!(obj instanceof f))
            flag2 = true;
        else
            flag2 = false;
        if (!(flag & flag2)) goto _L2; else goto _L1
_L1:
        obj = b(obj);
_L4:
        return obj;
_L2:
        obj = g;
        if (obj != j.a) {
            j j2 = new j();
            j j1;
            do {
                j2.a(((j) (obj)));
                if (c.a(this, ((j) (obj)), j2)) {
                    do {
                        LockSupport.park(this);
                        if (Thread.interrupted()) {
                            a(j2);
                            throw new InterruptedException();
                        }
                        obj = e;
                        boolean flag1;
                        boolean flag3;
                        if (obj != null)
                            flag1 = true;
                        else
                            flag1 = false;
                        if (!(obj instanceof f))
                            flag3 = true;
                        else
                            flag3 = false;
                    } while (!(flag1 & flag3));
                    obj = b(obj);
                    continue; /* Loop/switch isn't completed */
                }
                j1 = g;
                obj = j1;
            } while (j1 != j.a);
        }
        obj = b(e);
        if (true) goto _L4; else goto _L3
_L3:
    }

    public Object get(long l, TimeUnit timeunit) {
        l = timeunit.toNanos(l);
        if (Thread.interrupted())
            throw new InterruptedException();
        timeunit = ((TimeUnit) (e));
        boolean flag;
        boolean flag3;
        if (timeunit != null)
            flag = true;
        else
            flag = false;
        if (!(timeunit instanceof f))
            flag3 = true;
        else
            flag3 = false;
        if (!(flag & flag3)) goto _L2; else goto _L1
_L1:
        timeunit = ((TimeUnit) (b(timeunit)));
_L11:
        return timeunit;
_L2:
        long l1;
        j j2;
        if (l > 0L)
            l1 = System.nanoTime() + l;
        else
            l1 = 0L;
        if (l < 1000L) goto _L4; else goto _L3
_L3:
        timeunit = g;
        if (timeunit == j.a) goto _L6; else goto _L5
_L5:
        j2 = new j();
_L9:
        j2.a(timeunit);
        if (!c.a(this, timeunit, j2)) goto _L8; else goto _L7
_L7:
        long l2 = l;
        do {
            LockSupport.parkNanos(this, l2);
            if (Thread.interrupted()) {
                a(j2);
                throw new InterruptedException();
            }
            timeunit = ((TimeUnit) (e));
            boolean flag1;
            boolean flag4;
            if (timeunit != null)
                flag1 = true;
            else
                flag1 = false;
            if (!(timeunit instanceof f))
                flag4 = true;
            else
                flag4 = false;
            if (flag1 & flag4) {
                timeunit = ((TimeUnit) (b(timeunit)));
                continue; /* Loop/switch isn't completed */
            }
            l = l1 - System.nanoTime();
            l2 = l;
        } while (l >= 1000L);
        a(j2);
_L4:
        if (l <= 0L)
            break MISSING_BLOCK_LABEL_351;
        timeunit = ((TimeUnit) (e));
        boolean flag2;
        boolean flag5;
        j j1;
        if (timeunit != null)
            flag2 = true;
        else
            flag2 = false;
        if (!(timeunit instanceof f))
            flag5 = true;
        else
            flag5 = false;
        if (flag2 & flag5) {
            timeunit = ((TimeUnit) (b(timeunit)));
            continue; /* Loop/switch isn't completed */
        }
        break MISSING_BLOCK_LABEL_327;
_L8:
        j1 = g;
        timeunit = j1;
        if (j1 != j.a) goto _L9; else goto _L6
_L6:
        timeunit = ((TimeUnit) (b(e)));
        continue; /* Loop/switch isn't completed */
        if (Thread.interrupted())
            throw new InterruptedException();
        l = l1 - System.nanoTime();
          goto _L4
        throw new TimeoutException();
        if (true) goto _L11; else goto _L10
_L10:
    }

    public boolean isCancelled() {
        return e instanceof b;
    }

    public boolean isDone() {
        boolean flag1 = true;
        Object obj = e;
        boolean flag;
        if (obj != null)
            flag = true;
        else
            flag = false;
        if (obj instanceof f)
            flag1 = false;
        return flag & flag1;
    }

    static  {
        b = Logger.getLogger(com/google/common/util/concurrent/a.getName());
        Object obj;
        try {
            obj = JVM INSTR new #37  <Class a$i>;
            ((i) (obj)).i();
        }
        catch (Throwable throwable1) {
            try {
                obj = JVM INSTR new #25  <Class a$e>;
                ((e) (obj)).e(AtomicReferenceFieldUpdater.newUpdater(com/google/common/util/concurrent/a$j, java/lang/Thread, "b"), AtomicReferenceFieldUpdater.newUpdater(com/google/common/util/concurrent/a$j, com/google/common/util/concurrent/a$j, "c"), AtomicReferenceFieldUpdater.newUpdater(com/google/common/util/concurrent/a, com/google/common/util/concurrent/a$j, "g"), AtomicReferenceFieldUpdater.newUpdater(com/google/common/util/concurrent/a, com/google/common/util/concurrent/a$d, "f"), AtomicReferenceFieldUpdater.newUpdater(com/google/common/util/concurrent/a, java/lang/Object, "e"));
            }
            catch (Throwable throwable) {
                b.log(Level.SEVERE, "UnsafeAtomicHelper is broken!", throwable1);
                b.log(Level.SEVERE, "SafeAtomicHelper is broken!", throwable);
                throwable = new g();
            }
        }
        c = ((a) (obj));
    }

    // Unreferenced inner class com/google/common/util/concurrent/AbstractFuture$Failure$1

/* anonymous class */
    static final class AbstractFuture.Failure._cls1 extends Throwable {

        public Throwable fillInStackTrace() {
            this;
            JVM INSTR monitorenter ;
            return this;
        }

    }


    // Unreferenced inner class com/google/common/util/concurrent/a$i$1

/* anonymous class */
    static final class i._cls1
        implements PrivilegedExceptionAction {

        public Unsafe a() {
            Field afield[] = sun/misc/Unsafe.getDeclaredFields();
            int l = afield.length;
            for (int k = 0; k < l; k++) {
                Object obj = afield[k];
                ((Field) (obj)).setAccessible(true);
                obj = ((Field) (obj)).get(null);
                if (sun/misc/Unsafe.isInstance(obj))
                    return (Unsafe)sun/misc/Unsafe.cast(obj);
            }

            throw new NoSuchFieldError("the Unsafe");
        }

        public Object run() {
            return a();
        }

    }

}
