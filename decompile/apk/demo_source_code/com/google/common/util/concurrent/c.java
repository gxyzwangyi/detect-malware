// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.util.concurrent;

import com.google.common.base.d;
import com.google.common.base.i;
import java.lang.reflect.UndeclaredThrowableException;
import java.util.concurrent.*;
import java.util.logging.Level;
import java.util.logging.Logger;

// Referenced classes of package com.google.common.util.concurrent:
//            d, MoreExecutors, e, b, 
//            h

public final class com.google.common.util.concurrent.c extends com.google.common.util.concurrent.d {
    private static abstract class a extends a.h
        implements Runnable {

        com.google.common.util.concurrent.e a;
        Object b;

        abstract void a(Object obj, Object obj1);

        final void c() {
            a(a);
            a = null;
            b = null;
        }

        public final void run() {
            boolean flag1 = true;
            boolean flag2;
            Object obj;
            Object obj2;
            obj2 = a;
            obj = b;
            flag2 = isCancelled();
            boolean flag;
            if (obj2 == null)
                flag = true;
            else
                flag = false;
            if (obj != null)
                flag1 = false;
            if (!(flag1 | (flag | flag2))) goto _L2; else goto _L1
_L1:
            return;
_L2:
            a = null;
            b = null;
            obj2 = h.a(((java.util.concurrent.Future) (obj2)));
            Object obj1;
            a(obj, obj2);
              goto _L1
            obj1;
            try {
                cancel(false);
            }
            // Misplaced declaration of an exception variable
            catch (Object obj1) {
                a(((UndeclaredThrowableException) (obj1)).getCause());
            }
            // Misplaced declaration of an exception variable
            catch (Object obj1) {
                a(((Throwable) (obj1)));
            }
              goto _L1
            obj1;
            a(((ExecutionException) (obj1)).getCause());
              goto _L1
        }

        a(com.google.common.util.concurrent.e e1, Object obj) {
            a = (com.google.common.util.concurrent.e)i.a(e1);
            b = i.a(obj);
        }
    }

    private static final class b extends a {

        void a(com.google.common.base.d d1, Object obj) {
            a(d1.a(obj));
        }

        volatile void a(Object obj, Object obj1) {
            a((com.google.common.base.d)obj, obj1);
        }

        b(com.google.common.util.concurrent.e e1, com.google.common.base.d d1) {
            super(e1, d1);
        }
    }

    private static class c extends d {

        private final Throwable a;

        public Object get() {
            throw new ExecutionException(a);
        }

        c(Throwable throwable) {
            a = throwable;
        }
    }

    private static abstract class d
        implements com.google.common.util.concurrent.e {

        private static final Logger a = Logger.getLogger(com/google/common/util/concurrent/c$d.getName());

        public void a(Runnable runnable, Executor executor) {
            i.a(runnable, "Runnable was null.");
            i.a(executor, "Executor was null.");
            executor.execute(runnable);
_L1:
            return;
            RuntimeException runtimeexception;
            runtimeexception;
            a.log(Level.SEVERE, (new StringBuilder()).append("RuntimeException while executing runnable ").append(runnable).append(" with executor ").append(executor).toString(), runtimeexception);
              goto _L1
        }

        public boolean cancel(boolean flag) {
            return false;
        }

        public abstract Object get();

        public Object get(long l, TimeUnit timeunit) {
            i.a(timeunit);
            return get();
        }

        public boolean isCancelled() {
            return false;
        }

        public boolean isDone() {
            return true;
        }


        private d() {
        }

    }

    private static class e extends d {

        static final e a = new e(null);
        private final Object b;

        public Object get() {
            return b;
        }


        e(Object obj) {
            b = obj;
        }
    }


    private static final com.google.common.util.concurrent.b a = new com.google.common.util.concurrent.b() {

    }
;

    public static com.google.common.util.concurrent.e a(com.google.common.util.concurrent.e e1, com.google.common.base.d d1) {
        i.a(d1);
        d1 = new b(e1, d1);
        e1.a(d1, MoreExecutors.a());
        return d1;
    }

    public static com.google.common.util.concurrent.e a(Object obj) {
        if (obj == null)
            obj = e.a;
        else
            obj = new e(obj);
        return ((com.google.common.util.concurrent.e) (obj));
    }

    public static com.google.common.util.concurrent.e a(Throwable throwable) {
        i.a(throwable);
        return new c(throwable);
    }

}
