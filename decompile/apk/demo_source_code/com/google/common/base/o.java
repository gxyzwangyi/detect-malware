// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.base;

import java.lang.reflect.Method;

// Referenced classes of package com.google.common.base:
//            i

public final class o {

    private static final Object a;
    private static final Method b;
    private static final Method c;

    private static Object a() {
        Object obj = null;
        Object obj1 = Class.forName("sun.misc.SharedSecrets", false, null).getMethod("getJavaLangAccess", new Class[0]).invoke(null, new Object[0]);
        obj = obj1;
_L2:
        return obj;
        ThreadDeath threaddeath;
        threaddeath;
        throw threaddeath;
        Throwable throwable;
        throwable;
        if (true) goto _L2; else goto _L1
_L1:
    }

    private static transient Method a(String s, Class aclass[]) {
        Object obj = null;
        try {
            s = Class.forName("sun.misc.JavaLangAccess", false, null).getMethod(s, aclass);
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            throw s;
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            s = obj;
        }
        return s;
    }

    public static void a(Throwable throwable) {
        a(throwable, java/lang/Error);
        a(throwable, java/lang/RuntimeException);
    }

    public static void a(Throwable throwable, Class class1) {
        if (throwable != null && class1.isInstance(throwable))
            throw (Throwable)class1.cast(throwable);
        else
            return;
    }

    public static RuntimeException b(Throwable throwable) {
        a((Throwable)i.a(throwable));
        throw new RuntimeException(throwable);
    }

    private static Method b() {
        return a("getStackTraceElement", new Class[] {
            java/lang/Throwable, Integer.TYPE
        });
    }

    public static void b(Throwable throwable, Class class1) {
        a(throwable, class1);
        a(throwable);
    }

    private static Method c() {
        return a("getStackTraceDepth", new Class[] {
            java/lang/Throwable
        });
    }

    static  {
        Object obj = null;
        a = a();
        Method method;
        if (a == null)
            method = null;
        else
            method = b();
        b = method;
        if (a == null)
            method = obj;
        else
            method = c();
        c = method;
    }
}
