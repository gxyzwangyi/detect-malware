// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.base;

import java.util.Arrays;

// Referenced classes of package com.google.common.base:
//            i

public final class f {
    public static final class a {

        private final String a;
        private a b;
        private a c;
        private boolean d;

        private a a() {
            a a1 = new a();
            c.c = a1;
            c = a1;
            return a1;
        }

        private a b(Object obj) {
            a().b = obj;
            return this;
        }

        private a b(String s, Object obj) {
            a a1 = a();
            a1.b = obj;
            a1.a = (String)i.a(s);
            return this;
        }

        public a a(Object obj) {
            return b(obj);
        }

        public a a(String s, int j) {
            return b(s, String.valueOf(j));
        }

        public a a(String s, long l) {
            return b(s, String.valueOf(l));
        }

        public a a(String s, Object obj) {
            return b(s, obj);
        }

        public String toString() {
            boolean flag = d;
            StringBuilder stringbuilder = (new StringBuilder(32)).append(a).append('{');
            a a1 = b.c;
            String s1 = "";
            while (a1 != null)  {
label0:
                {
                    Object obj = a1.b;
                    String s;
                    if (flag) {
                        s = s1;
                        if (obj == null)
                            break label0;
                    }
                    stringbuilder.append(s1);
                    s = ", ";
                    if (a1.a != null)
                        stringbuilder.append(a1.a).append('=');
                    if (obj != null && obj.getClass().isArray()) {
                        s1 = Arrays.deepToString(new Object[] {
                            obj
                        });
                        stringbuilder.append(s1.substring(1, s1.length() - 1));
                    } else {
                        stringbuilder.append(obj);
                    }
                }
                a1 = a1.c;
                s1 = s;
            }
            return stringbuilder.append('}').toString();
        }

        private a(String s) {
            b = new a();
            c = b;
            d = false;
            a = (String)i.a(s);
        }

    }

    private static final class a.a {

        String a;
        Object b;
        a.a c;

        private a.a() {
        }

    }


    public static a a(Object obj) {
        return new a(obj.getClass().getSimpleName());
    }

    public static Object a(Object obj, Object obj1) {
        if (obj == null)
            obj = i.a(obj1);
        return obj;
    }
}
