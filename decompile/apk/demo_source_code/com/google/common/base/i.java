// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.base;


public final class i {

    public static int a(int j, int k) {
        return a(j, k, "index");
    }

    public static int a(int j, int k, String s) {
        if (j < 0 || j >= k)
            throw new IndexOutOfBoundsException(c(j, k, s));
        else
            return j;
    }

    public static Object a(Object obj) {
        if (obj == null)
            throw new NullPointerException();
        else
            return obj;
    }

    public static Object a(Object obj, Object obj1) {
        if (obj == null)
            throw new NullPointerException(String.valueOf(obj1));
        else
            return obj;
    }

    static transient String a(String s, Object aobj[]) {
        StringBuilder stringbuilder;
label0:
        {
            int j = 0;
            s = String.valueOf(s);
            stringbuilder = new StringBuilder(s.length() + aobj.length * 16);
            int k = 0;
label1:
            do {
                int l;
label2:
                {
                    if (j < aobj.length) {
                        l = s.indexOf("%s", k);
                        if (l != -1)
                            break label2;
                    }
                    stringbuilder.append(s.substring(k));
                    if (j >= aobj.length)
                        break label0;
                    stringbuilder.append(" [");
                    stringbuilder.append(aobj[j]);
                    for (j++; j < aobj.length; j++) {
                        stringbuilder.append(", ");
                        stringbuilder.append(aobj[j]);
                    }

                    break label1;
                }
                stringbuilder.append(s.substring(k, l));
                stringbuilder.append(aobj[j]);
                k = l + 2;
                j++;
            } while (true);
            stringbuilder.append(']');
        }
        return stringbuilder.toString();
    }

    public static void a(int j, int k, int l) {
        if (j < 0 || k < j || k > l)
            throw new IndexOutOfBoundsException(b(j, k, l));
        else
            return;
    }

    public static void a(boolean flag) {
        if (!flag)
            throw new IllegalArgumentException();
        else
            return;
    }

    public static void a(boolean flag, Object obj) {
        if (!flag)
            throw new IllegalArgumentException(String.valueOf(obj));
        else
            return;
    }

    public static transient void a(boolean flag, String s, Object aobj[]) {
        if (!flag)
            throw new IllegalArgumentException(a(s, aobj));
        else
            return;
    }

    public static int b(int j, int k) {
        return b(j, k, "index");
    }

    public static int b(int j, int k, String s) {
        if (j < 0 || j > k)
            throw new IndexOutOfBoundsException(d(j, k, s));
        else
            return j;
    }

    private static String b(int j, int k, int l) {
        String s;
        if (j < 0 || j > l)
            s = d(j, l, "start index");
        else
        if (k < 0 || k > l)
            s = d(k, l, "end index");
        else
            s = a("end index (%s) must not be less than start index (%s)", new Object[] {
                Integer.valueOf(k), Integer.valueOf(j)
            });
        return s;
    }

    public static void b(boolean flag) {
        if (!flag)
            throw new IllegalStateException();
        else
            return;
    }

    public static void b(boolean flag, Object obj) {
        if (!flag)
            throw new IllegalStateException(String.valueOf(obj));
        else
            return;
    }

    public static transient void b(boolean flag, String s, Object aobj[]) {
        if (!flag)
            throw new IllegalStateException(a(s, aobj));
        else
            return;
    }

    private static String c(int j, int k, String s) {
        if (j < 0) {
            s = a("%s (%s) must not be negative", new Object[] {
                s, Integer.valueOf(j)
            });
        } else {
            if (k < 0)
                throw new IllegalArgumentException((new StringBuilder()).append("negative size: ").append(k).toString());
            s = a("%s (%s) must be less than size (%s)", new Object[] {
                s, Integer.valueOf(j), Integer.valueOf(k)
            });
        }
        return s;
    }

    private static String d(int j, int k, String s) {
        if (j < 0) {
            s = a("%s (%s) must not be negative", new Object[] {
                s, Integer.valueOf(j)
            });
        } else {
            if (k < 0)
                throw new IllegalArgumentException((new StringBuilder()).append("negative size: ").append(k).toString());
            s = a("%s (%s) must not be greater than size (%s)", new Object[] {
                s, Integer.valueOf(j), Integer.valueOf(k)
            });
        }
        return s;
    }
}
