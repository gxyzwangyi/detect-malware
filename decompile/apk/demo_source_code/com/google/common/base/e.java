// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.base;

import java.io.IOException;
import java.util.Iterator;
import java.util.Map;

// Referenced classes of package com.google.common.base:
//            i

public class e {
    public static final class a {

        private final e a;
        private final String b;

        public Appendable a(Appendable appendable, Iterator iterator) {
            i.a(appendable);
            if (iterator.hasNext()) {
                java.util.Map.Entry entry = (java.util.Map.Entry)iterator.next();
                appendable.append(a.a(entry.getKey()));
                appendable.append(b);
                appendable.append(a.a(entry.getValue()));
                java.util.Map.Entry entry1;
                for (; iterator.hasNext(); appendable.append(a.a(entry1.getValue()))) {
                    appendable.append(e.a(a));
                    entry1 = (java.util.Map.Entry)iterator.next();
                    appendable.append(a.a(entry1.getKey()));
                    appendable.append(b);
                }

            }
            return appendable;
        }

        public StringBuilder a(StringBuilder stringbuilder, Iterable iterable) {
            return a(stringbuilder, iterable.iterator());
        }

        public StringBuilder a(StringBuilder stringbuilder, Iterator iterator) {
            try {
                a(((Appendable) (stringbuilder)), iterator);
            }
            // Misplaced declaration of an exception variable
            catch (StringBuilder stringbuilder) {
                throw new AssertionError(stringbuilder);
            }
            return stringbuilder;
        }

        public StringBuilder a(StringBuilder stringbuilder, Map map) {
            return a(stringbuilder, ((Iterable) (map.entrySet())));
        }

        private a(e e1, String s) {
            a = e1;
            b = (String)i.a(s);
        }

    }


    private final String a;

    private e(e e1) {
        a = e1.a;
    }


    private e(String s) {
        a = (String)i.a(s);
    }

    public static e a(char c1) {
        return new e(String.valueOf(c1));
    }

    public static e a(String s) {
        return new e(s);
    }

    static String a(e e1) {
        return e1.a;
    }

    public Appendable a(Appendable appendable, Iterator iterator) {
        i.a(appendable);
        if (iterator.hasNext()) {
            appendable.append(a(iterator.next()));
            for (; iterator.hasNext(); appendable.append(a(iterator.next())))
                appendable.append(a);

        }
        return appendable;
    }

    CharSequence a(Object obj) {
        i.a(obj);
        if (obj instanceof CharSequence)
            obj = (CharSequence)obj;
        else
            obj = obj.toString();
        return ((CharSequence) (obj));
    }

    public final StringBuilder a(StringBuilder stringbuilder, Iterable iterable) {
        return a(stringbuilder, iterable.iterator());
    }

    public final StringBuilder a(StringBuilder stringbuilder, Iterator iterator) {
        try {
            a(((Appendable) (stringbuilder)), iterator);
        }
        // Misplaced declaration of an exception variable
        catch (StringBuilder stringbuilder) {
            throw new AssertionError(stringbuilder);
        }
        return stringbuilder;
    }

    public e b(String s) {
        i.a(s);
        return new e(this, s) {

            final String a;
            final e b;

            CharSequence a(Object obj) {
                if (obj == null)
                    obj = a;
                else
                    obj = b.a(obj);
                return ((CharSequence) (obj));
            }

            public e b(String s1) {
                throw new UnsupportedOperationException("already specified useForNull");
            }

             {
                b = e.this;
                a = s;
                super(e2, null);
            }
        }
;
    }

    public a c(String s) {
        return new a(this, s);
    }
}
