// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.base;

import java.io.Serializable;
import java.util.Collection;

// Referenced classes of package com.google.common.base:
//            e, j, i

public final class Predicates {
    private static class InPredicate
        implements j, Serializable {

        private final Collection a;

        public boolean a(Object obj) {
            boolean flag = false;
            boolean flag1 = a.contains(obj);
            flag = flag1;
_L2:
            return flag;
            obj;
            continue; /* Loop/switch isn't completed */
            obj;
            if (true) goto _L2; else goto _L1
_L1:
        }

        public boolean equals(Object obj) {
            boolean flag;
            if (obj instanceof InPredicate) {
                obj = (InPredicate)obj;
                flag = a.equals(((InPredicate) (obj)).a);
            } else {
                flag = false;
            }
            return flag;
        }

        public int hashCode() {
            return a.hashCode();
        }

        public String toString() {
            return (new StringBuilder()).append("Predicates.in(").append(a).append(")").toString();
        }

        private InPredicate(Collection collection) {
            a = (Collection)i.a(collection);
        }

    }

    private static class IsEqualToPredicate
        implements j, Serializable {

        private final Object a;

        public boolean a(Object obj) {
            return a.equals(obj);
        }

        public boolean equals(Object obj) {
            boolean flag;
            if (obj instanceof IsEqualToPredicate) {
                obj = (IsEqualToPredicate)obj;
                flag = a.equals(((IsEqualToPredicate) (obj)).a);
            } else {
                flag = false;
            }
            return flag;
        }

        public int hashCode() {
            return a.hashCode();
        }

        public String toString() {
            return (new StringBuilder()).append("Predicates.equalTo(").append(a).append(")").toString();
        }

        private IsEqualToPredicate(Object obj) {
            a = obj;
        }

    }

    static abstract class ObjectPredicate extends Enum
        implements j {

        public static final ObjectPredicate a;
        public static final ObjectPredicate b;
        public static final ObjectPredicate c;
        public static final ObjectPredicate d;
        private static final ObjectPredicate e[];

        public static ObjectPredicate valueOf(String s) {
            return (ObjectPredicate)Enum.valueOf(com/google/common/base/Predicates$ObjectPredicate, s);
        }

        public static ObjectPredicate[] values() {
            return (ObjectPredicate[])e.clone();
        }

        j a() {
            return this;
        }

        static  {
            a = new ObjectPredicate("ALWAYS_TRUE", 0) {

                public boolean a(Object obj) {
                    return true;
                }

                public String toString() {
                    return "Predicates.alwaysTrue()";
                }

            }
;
            b = new ObjectPredicate("ALWAYS_FALSE", 1) {

                public boolean a(Object obj) {
                    return false;
                }

                public String toString() {
                    return "Predicates.alwaysFalse()";
                }

            }
;
            c = new ObjectPredicate("IS_NULL", 2) {

                public boolean a(Object obj) {
                    boolean flag;
                    if (obj == null)
                        flag = true;
                    else
                        flag = false;
                    return flag;
                }

                public String toString() {
                    return "Predicates.isNull()";
                }

            }
;
            d = new ObjectPredicate("NOT_NULL", 3) {

                public boolean a(Object obj) {
                    boolean flag;
                    if (obj != null)
                        flag = true;
                    else
                        flag = false;
                    return flag;
                }

                public String toString() {
                    return "Predicates.notNull()";
                }

            }
;
            e = (new ObjectPredicate[] {
                a, b, c, d
            });
        }

        private ObjectPredicate(String s, int i) {
            super(s, i);
        }

    }


    private static final e a = e.a(',');

    public static j a() {
        return ObjectPredicate.c.a();
    }

    public static j a(Object obj) {
        if (obj == null)
            obj = a();
        else
            obj = new IsEqualToPredicate(obj);
        return ((j) (obj));
    }

    public static j a(Collection collection) {
        return new InPredicate(collection);
    }

}
