// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.base;

import java.util.Iterator;

// Referenced classes of package com.google.common.base:
//            b, i, AbstractIterator, e

public final class k {
    private static abstract class a extends AbstractIterator {

        final CharSequence b;
        final com.google.common.base.b c;
        final boolean d;
        int e;
        int f;

        abstract int a(int j);

        protected Object a() {
            return c();
        }

        abstract int b(int j);

        protected String c() {
            int i1;
            if (f == 1) {
                j = b.length();
                e = -1;
                do {
                    i1 = j;
                    if (j <= l)
                        break;
                    i1 = j;
                    if (!c.c(b.charAt(j - 1)))
                        break;
                    j--;
                } while (true);
            } else {
                f = f - 1;
                i1 = j;
            }
            s = b.subSequence(l, i1).toString();
_L2:
            return s;
            int l = e;
            int j;
            String s;
            while (e != -1)  {
                j = a(e);
                if (j == -1) {
                    j = b.length();
                    e = -1;
                } else {
                    e = b(j);
                }
                if (e == l) {
                    e = e + 1;
                    if (e >= b.length())
                        e = -1;
                } else {
label0:
                    {
                        for (; l < j && c.c(b.charAt(l)); l++);
                        for (; j > l && c.c(b.charAt(j - 1)); j--);
                        if (!d || l != j)
                            break label0;
                        l = e;
                    }
                }
            }
            s = (String)b();
            if (true) goto _L2; else goto _L1
_L1:
        }

        protected a(k k1, CharSequence charsequence) {
            e = 0;
            c = k.a(k1);
            d = k.b(k1);
            f = k.c(k1);
            b = charsequence;
        }
    }

    private static interface b {

        public abstract Iterator b(k k1, CharSequence charsequence);
    }


    private final com.google.common.base.b a;
    private final boolean b;
    private final b c;
    private final int d;

    private k(b b1) {
        this(b1, false, com.google.common.base.b.n, 0x7fffffff);
    }

    private k(b b1, boolean flag, com.google.common.base.b b2, int j) {
        c = b1;
        b = flag;
        a = b2;
        d = j;
    }

    static com.google.common.base.b a(k k1) {
        return k1.a;
    }

    public static k a(char c1) {
        return a(com.google.common.base.b.a(c1));
    }

    public static k a(com.google.common.base.b b1) {
        i.a(b1);
        return new k(new b(b1) {

            final com.google.common.base.b a;

            public a a(k k1, CharSequence charsequence) {
                return new a(this, k1, charsequence) {

                    final _cls1 a;

                    int a(int j) {
                        return a.a.a(b, j);
                    }

                    int b(int j) {
                        return j + 1;
                    }

             {
                a = _pcls1;
                super(k1, charsequence);
            }
                }
;
            }

            public Iterator b(k k1, CharSequence charsequence) {
                return a(k1, charsequence);
            }

             {
                a = b1;
                super();
            }
        }
);
    }

    static Iterator a(k k1, CharSequence charsequence) {
        return k1.b(charsequence);
    }

    private Iterator b(CharSequence charsequence) {
        return c.b(this, charsequence);
    }

    static boolean b(k k1) {
        return k1.b;
    }

    static int c(k k1) {
        return k1.d;
    }

    public k a() {
        return new k(c, true, a, d);
    }

    public Iterable a(CharSequence charsequence) {
        i.a(charsequence);
        return new Iterable(charsequence) {

            final CharSequence a;
            final k b;

            public Iterator iterator() {
                return k.a(b, a);
            }

            public String toString() {
                return e.a(", ").a((new StringBuilder()).append('['), this).append(']').toString();
            }

             {
                b = k.this;
                a = charsequence;
                super();
            }
        }
;
    }

    public k b() {
        return b(com.google.common.base.b.a);
    }

    public k b(com.google.common.base.b b1) {
        i.a(b1);
        return new k(c, b, b1, d);
    }
}
