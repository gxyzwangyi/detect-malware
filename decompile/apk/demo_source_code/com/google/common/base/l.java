// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.base;

import java.util.Locale;
import java.util.concurrent.TimeUnit;

// Referenced classes of package com.google.common.base:
//            p, i

public final class l {

    private final p a = p.b();
    private boolean b;
    private long c;
    private long d;

    l() {
    }

    public static l a() {
        return new l();
    }

    private static TimeUnit a(long l1) {
        TimeUnit timeunit;
        if (TimeUnit.DAYS.convert(l1, TimeUnit.NANOSECONDS) > 0L)
            timeunit = TimeUnit.DAYS;
        else
        if (TimeUnit.HOURS.convert(l1, TimeUnit.NANOSECONDS) > 0L)
            timeunit = TimeUnit.HOURS;
        else
        if (TimeUnit.MINUTES.convert(l1, TimeUnit.NANOSECONDS) > 0L)
            timeunit = TimeUnit.MINUTES;
        else
        if (TimeUnit.SECONDS.convert(l1, TimeUnit.NANOSECONDS) > 0L)
            timeunit = TimeUnit.SECONDS;
        else
        if (TimeUnit.MILLISECONDS.convert(l1, TimeUnit.NANOSECONDS) > 0L)
            timeunit = TimeUnit.MILLISECONDS;
        else
        if (TimeUnit.MICROSECONDS.convert(l1, TimeUnit.NANOSECONDS) > 0L)
            timeunit = TimeUnit.MICROSECONDS;
        else
            timeunit = TimeUnit.NANOSECONDS;
        return timeunit;
    }

    private static String b(TimeUnit timeunit) {
        static class _cls1 {

            static final int a[];

            static  {
                a = new int[TimeUnit.values().length];
                NoSuchFieldError nosuchfielderror;
                try {
                    a[TimeUnit.NANOSECONDS.ordinal()] = 1;
                }
                catch (NoSuchFieldError nosuchfielderror6) { }
                try {
                    a[TimeUnit.MICROSECONDS.ordinal()] = 2;
                }
                catch (NoSuchFieldError nosuchfielderror5) { }
                try {
                    a[TimeUnit.MILLISECONDS.ordinal()] = 3;
                }
                catch (NoSuchFieldError nosuchfielderror4) { }
                try {
                    a[TimeUnit.SECONDS.ordinal()] = 4;
                }
                catch (NoSuchFieldError nosuchfielderror3) { }
                try {
                    a[TimeUnit.MINUTES.ordinal()] = 5;
                }
                catch (NoSuchFieldError nosuchfielderror2) { }
                try {
                    a[TimeUnit.HOURS.ordinal()] = 6;
                }
                catch (NoSuchFieldError nosuchfielderror1) { }
                a[TimeUnit.DAYS.ordinal()] = 7;
_L2:
                return;
                nosuchfielderror;
                if (true) goto _L2; else goto _L1
_L1:
            }
        }

        _cls1.a[timeunit.ordinal()];
        JVM INSTR tableswitch 1 7: default 52
    //                   1 60
    //                   2 65
    //                   3 71
    //                   4 77
    //                   5 83
    //                   6 89
    //                   7 95;
           goto _L1 _L2 _L3 _L4 _L5 _L6 _L7 _L8
_L1:
        throw new AssertionError();
_L2:
        timeunit = "ns";
_L10:
        return timeunit;
_L3:
        timeunit = "\u03BCs";
        continue; /* Loop/switch isn't completed */
_L4:
        timeunit = "ms";
        continue; /* Loop/switch isn't completed */
_L5:
        timeunit = "s";
        continue; /* Loop/switch isn't completed */
_L6:
        timeunit = "min";
        continue; /* Loop/switch isn't completed */
_L7:
        timeunit = "h";
        continue; /* Loop/switch isn't completed */
_L8:
        timeunit = "d";
        if (true) goto _L10; else goto _L9
_L9:
    }

    private long c() {
        long l1;
        if (b)
            l1 = (a.a() - d) + c;
        else
            l1 = c;
        return l1;
    }

    public long a(TimeUnit timeunit) {
        return timeunit.convert(c(), TimeUnit.NANOSECONDS);
    }

    public l b() {
        boolean flag;
        if (!b)
            flag = true;
        else
            flag = false;
        i.b(flag, "This stopwatch is already running.");
        b = true;
        d = a.a();
        return this;
    }

    public String toString() {
        long l1 = c();
        TimeUnit timeunit = a(l1);
        double d1 = (double)l1 / (double)TimeUnit.NANOSECONDS.convert(1L, timeunit);
        return String.format(Locale.ROOT, "%.4g %s", new Object[] {
            Double.valueOf(d1), b(timeunit)
        });
    }
}
