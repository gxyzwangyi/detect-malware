// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.net;

import java.net.*;
import java.nio.ByteBuffer;
import java.util.Locale;

public final class a {

    private static final Inet4Address a = (Inet4Address)a("127.0.0.1");
    private static final Inet4Address b = (Inet4Address)a("0.0.0.0");

    private static transient IllegalArgumentException a(String s, Object aobj[]) {
        return new IllegalArgumentException(String.format(Locale.ROOT, s, aobj));
    }

    public static InetAddress a(String s) {
        byte abyte0[] = c(s);
        if (abyte0 == null)
            throw a("'%s' is not an IP string literal.", new Object[] {
                s
            });
        else
            return a(abyte0);
    }

    private static InetAddress a(byte abyte0[]) {
        try {
            abyte0 = InetAddress.getByAddress(abyte0);
        }
        // Misplaced declaration of an exception variable
        catch (byte abyte0[]) {
            throw new AssertionError(abyte0);
        }
        return abyte0;
    }

    public static boolean b(String s) {
        boolean flag;
        if (c(s) != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    private static byte[] c(String s) {
        int i;
        boolean flag;
        boolean flag1;
        i = 0;
        flag1 = false;
        flag = false;
_L5:
        if (i >= s.length()) goto _L2; else goto _L1
_L1:
        char c1 = s.charAt(i);
        if (c1 != '.') goto _L4; else goto _L3
_L3:
        flag1 = true;
_L8:
        i++;
          goto _L5
_L4:
        if (c1 != ':')
            continue; /* Loop/switch isn't completed */
        if (!flag1) goto _L7; else goto _L6
_L6:
        s = null;
_L10:
        return s;
_L7:
        flag = true;
          goto _L8
        if (Character.digit(c1, 16) != -1) goto _L8; else goto _L9
_L9:
        s = null;
          goto _L10
_L2:
        String s1;
label0:
        {
            if (!flag)
                break MISSING_BLOCK_LABEL_109;
            s1 = s;
            if (!flag1)
                break label0;
            s = f(s);
            s1 = s;
            if (s != null)
                break label0;
            s = null;
        }
          goto _L10
        s = e(s1);
          goto _L10
        if (flag1)
            s = d(s);
        else
            s = null;
          goto _L10
    }

    private static byte[] d(String s) {
        Object obj;
        String as[];
        obj = null;
        as = s.split("\\.", 5);
        if (as.length == 4) goto _L2; else goto _L1
_L1:
        s = obj;
_L6:
        return s;
_L2:
        int i;
        s = new byte[4];
        i = 0;
_L4:
        if (i >= s.length)
            continue; /* Loop/switch isn't completed */
        s[i] = g(as[i]);
        i++;
        if (true) goto _L4; else goto _L3
_L3:
        s;
        s = obj;
        if (true) goto _L6; else goto _L5
_L5:
    }

    private static byte[] e(String s) {
        String as[] = s.split(":", 10);
        if (as.length >= 3 && as.length <= 9) goto _L2; else goto _L1
_L1:
        s = null;
_L3:
        return s;
_L2:
        int i;
        int j;
        i = -1;
        j = 1;
_L4:
        int k;
        int l;
        if (j < as.length - 1) {
label0:
            {
                k = i;
                if (as[j].length() != 0)
                    break MISSING_BLOCK_LABEL_65;
                if (i < 0)
                    break label0;
                s = null;
            }
        } else {
label1:
            {
                if (i < 0)
                    break MISSING_BLOCK_LABEL_146;
                l = as.length - i - 1;
                if (as[0].length() != 0)
                    break label1;
                k = i - 1;
                j = k;
                if (k == 0)
                    break MISSING_BLOCK_LABEL_113;
                s = null;
            }
        }
          goto _L3
        k = j;
        j++;
        i = k;
          goto _L4
        j = i;
        k = l;
        if (as[as.length - 1].length() != 0)
            break MISSING_BLOCK_LABEL_273;
        k = --l;
        if (l == 0)
            break MISSING_BLOCK_LABEL_273;
        s = null;
          goto _L3
        k = as.length;
        j = 0;
_L12:
        l = 8 - (k + j);
        if (i < 0 ? l == 0 : l >= 1) goto _L6; else goto _L5
_L6:
        s = ByteBuffer.allocate(16);
        i = 0;
_L8:
        if (i >= k)
            break; /* Loop/switch isn't completed */
        s.putShort(h(as[i]));
        i++;
        if (true) goto _L8; else goto _L7
_L5:
        s = null;
          goto _L3
_L7:
        k = 0;
_L10:
        i = j;
        if (k >= l)
            break; /* Loop/switch isn't completed */
        s.putShort((short)0);
        k++;
        if (true) goto _L10; else goto _L9
_L9:
        if (i <= 0)
            break; /* Loop/switch isn't completed */
        s.putShort(h(as[as.length - i]));
        i--;
        if (true) goto _L9; else goto _L11
        s;
        s = null;
          goto _L3
_L11:
        s = s.array();
          goto _L3
        int i1 = j;
        j = k;
        k = i1;
          goto _L12
    }

    private static String f(String s) {
        int i = s.lastIndexOf(':');
        String s1 = s.substring(0, i + 1);
        byte abyte0[] = d(s.substring(i + 1));
        if (abyte0 == null) {
            s = null;
        } else {
            s = Integer.toHexString((abyte0[0] & 0xff) << 8 | abyte0[1] & 0xff);
            byte byte0 = abyte0[2];
            String s2 = Integer.toHexString(abyte0[3] & 0xff | (byte0 & 0xff) << 8);
            s = (new StringBuilder()).append(s1).append(s).append(":").append(s2).toString();
        }
        return s;
    }

    private static byte g(String s) {
        int i = Integer.parseInt(s);
        if (i > 255 || s.startsWith("0") && s.length() > 1)
            throw new NumberFormatException();
        else
            return (byte)i;
    }

    private static short h(String s) {
        int i = Integer.parseInt(s, 16);
        if (i > 65535)
            throw new NumberFormatException();
        else
            return (short)i;
    }

}
