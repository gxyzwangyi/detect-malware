// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.cache;

import com.google.common.b.a;
import com.google.common.base.Equivalence;
import com.google.common.base.i;
import com.google.common.base.n;
import com.google.common.base.p;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.k;
import com.google.common.util.concurrent.ExecutionError;
import com.google.common.util.concurrent.MoreExecutors;
import com.google.common.util.concurrent.UncheckedExecutionException;
import java.io.Serializable;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.SoftReference;
import java.lang.ref.WeakReference;
import java.util.AbstractCollection;
import java.util.AbstractMap;
import java.util.AbstractQueue;
import java.util.AbstractSet;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Queue;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.locks.ReentrantLock;
import java.util.logging.Level;
import java.util.logging.Logger;

// Referenced classes of package com.google.common.cache:
//            CacheBuilder, f, e, g, 
//            CacheLoader, b, RemovalCause

class LocalCache extends AbstractMap
    implements ConcurrentMap {
    static abstract class EntryFactory extends Enum {

        public static final EntryFactory a;
        public static final EntryFactory b;
        public static final EntryFactory c;
        public static final EntryFactory d;
        public static final EntryFactory e;
        public static final EntryFactory f;
        public static final EntryFactory g;
        public static final EntryFactory h;
        static final EntryFactory i[];
        private static final EntryFactory j[];

        static EntryFactory a(Strength strength, boolean flag, boolean flag1) {
            byte byte1 = 0;
            byte byte0;
            boolean flag2;
            if (strength == Strength.c)
                byte0 = 4;
            else
                byte0 = 0;
            if (flag)
                flag2 = true;
            else
                flag2 = false;
            if (flag1)
                byte1 = 2;
            return i[byte1 | (flag2 | byte0)];
        }

        public static EntryFactory valueOf(String s1) {
            return (EntryFactory)Enum.valueOf(com/google/common/cache/LocalCache$EntryFactory, s1);
        }

        public static EntryFactory[] values() {
            return (EntryFactory[])j.clone();
        }

        j a(Segment segment, j j1, j j2) {
            return a(segment, j1.d(), j1.c(), j2);
        }

        abstract j a(Segment segment, Object obj, int i1, j j1);

        void a(j j1, j j2) {
            j2.a(j1.e());
            com.google.common.cache.LocalCache.a(j1.g(), j2);
            com.google.common.cache.LocalCache.a(j2, j1.f());
            LocalCache.b(j1);
        }

        void b(j j1, j j2) {
            j2.b(j1.h());
            LocalCache.b(j1.j(), j2);
            LocalCache.b(j2, j1.i());
            LocalCache.c(j1);
        }

        static  {
            a = new EntryFactory("STRONG", 0) {

                j a(Segment segment, Object obj, int i1, j j1) {
                    return new n(obj, i1, j1);
                }

            }
;
            b = new EntryFactory("STRONG_ACCESS", 1) {

                j a(Segment segment, j j1, j j2) {
                    segment = super.a(segment, j1, j2);
                    a(j1, ((j) (segment)));
                    return segment;
                }

                j a(Segment segment, Object obj, int i1, j j1) {
                    return new l(obj, i1, j1);
                }

            }
;
            c = new EntryFactory("STRONG_WRITE", 2) {

                j a(Segment segment, j j1, j j2) {
                    segment = super.a(segment, j1, j2);
                    b(j1, segment);
                    return segment;
                }

                j a(Segment segment, Object obj, int i1, j j1) {
                    return new p(obj, i1, j1);
                }

            }
;
            d = new EntryFactory("STRONG_ACCESS_WRITE", 3) {

                j a(Segment segment, j j1, j j2) {
                    segment = super.a(segment, j1, j2);
                    a(j1, ((j) (segment)));
                    b(j1, segment);
                    return segment;
                }

                j a(Segment segment, Object obj, int i1, j j1) {
                    return new m(obj, i1, j1);
                }

            }
;
            e = new EntryFactory("WEAK", 4) {

                j a(Segment segment, Object obj, int i1, j j1) {
                    return new v(segment.h, obj, i1, j1);
                }

            }
;
            f = new EntryFactory("WEAK_ACCESS", 5) {

                j a(Segment segment, j j1, j j2) {
                    segment = super.a(segment, j1, j2);
                    a(j1, ((j) (segment)));
                    return segment;
                }

                j a(Segment segment, Object obj, int i1, j j1) {
                    return new t(segment.h, obj, i1, j1);
                }

            }
;
            g = new EntryFactory("WEAK_WRITE", 6) {

                j a(Segment segment, j j1, j j2) {
                    segment = super.a(segment, j1, j2);
                    b(j1, segment);
                    return segment;
                }

                j a(Segment segment, Object obj, int i1, j j1) {
                    return new x(segment.h, obj, i1, j1);
                }

            }
;
            h = new EntryFactory("WEAK_ACCESS_WRITE", 7) {

                j a(Segment segment, j j1, j j2) {
                    segment = super.a(segment, j1, j2);
                    a(j1, ((j) (segment)));
                    b(j1, segment);
                    return segment;
                }

                j a(Segment segment, Object obj, int i1, j j1) {
                    return new u(segment.h, obj, i1, j1);
                }

            }
;
            j = (new EntryFactory[] {
                a, b, c, d, e, f, g, h
            });
            i = (new EntryFactory[] {
                a, b, c, d, e, f, g, h
            });
        }

        private EntryFactory(String s1, int i1) {
            super(s1, i1);
        }

    }

    static class LocalManualCache
        implements com.google.common.cache.b, Serializable {

        final LocalCache a;

        public Object a(Object obj) {
            return a.b(obj);
        }

        public Object a(Object obj, Callable callable) {
            com.google.common.base.i.a(callable);
            return a.a(obj, new CacheLoader(this, callable) {

                final Callable a;
                final LocalManualCache b;

                public Object a(Object obj) {
                    return a.call();
                }

             {
                b = localmanualcache;
                a = callable;
                super();
            }
            }
);
        }

        public ConcurrentMap a() {
            return a;
        }

        public void a(Object obj, Object obj1) {
            a.put(obj, obj1);
        }

        LocalManualCache(CacheBuilder cachebuilder) {
            this(new LocalCache(cachebuilder, null));
        }

        private LocalManualCache(LocalCache localcache) {
            a = localcache;
        }
    }

    private static final class NullEntry extends Enum
        implements j {

        public static final NullEntry a;
        private static final NullEntry b[];

        public static NullEntry valueOf(String s1) {
            return (NullEntry)Enum.valueOf(com/google/common/cache/LocalCache$NullEntry, s1);
        }

        public static NullEntry[] values() {
            return (NullEntry[])b.clone();
        }

        public r a() {
            return null;
        }

        public void a(long l1) {
        }

        public void a(j j1) {
        }

        public void a(r r1) {
        }

        public j b() {
            return null;
        }

        public void b(long l1) {
        }

        public void b(j j1) {
        }

        public int c() {
            return 0;
        }

        public void c(j j1) {
        }

        public Object d() {
            return null;
        }

        public void d(j j1) {
        }

        public long e() {
            return 0L;
        }

        public j f() {
            return this;
        }

        public j g() {
            return this;
        }

        public long h() {
            return 0L;
        }

        public j i() {
            return this;
        }

        public j j() {
            return this;
        }

        static  {
            a = new NullEntry("INSTANCE", 0);
            b = (new NullEntry[] {
                a
            });
        }

        private NullEntry(String s1, int i1) {
            super(s1, i1);
        }
    }

    static class Segment extends ReentrantLock {

        final LocalCache a;
        volatile int b;
        long c;
        int d;
        int e;
        volatile AtomicReferenceArray f;
        final long g;
        final ReferenceQueue h;
        final ReferenceQueue i;
        final Queue j;
        final AtomicInteger k = new AtomicInteger();
        final Queue l;
        final Queue m;
        final a.b n;

        i a(Object obj, int i1, boolean flag) {
            lock();
            int j1;
            long l3;
            Object obj2;
            AtomicReferenceArray atomicreferencearray;
            l3 = a.q.a();
            c(l3);
            atomicreferencearray = f;
            j1 = i1 & atomicreferencearray.length() - 1;
            obj2 = (j)atomicreferencearray.get(j1);
            Object obj1 = obj2;
_L12:
            if (obj1 == null) goto _L2; else goto _L1
_L1:
            Object obj3 = ((j) (obj1)).d();
            if (((j) (obj1)).c() != i1 || obj3 == null) goto _L4; else goto _L3
_L3:
            if (!a.f.a(obj, obj3)) goto _L4; else goto _L5
_L5:
            obj2 = ((j) (obj1)).a();
            if (((r) (obj2)).c()) goto _L7; else goto _L6
_L6:
            if (!flag) goto _L9; else goto _L8
_L8:
            long l1;
            long l2;
            l2 = ((j) (obj1)).h();
            l1 = a.n;
            if (l3 - l2 >= l1) goto _L9; else goto _L7
_L7:
            obj = null;
            unlock();
            m();
_L10:
            return ((i) (obj));
_L9:
            d = d + 1;
            obj = JVM INSTR new #167 <Class LocalCache$i>;
            ((i) (obj)).i(((r) (obj2)));
            ((j) (obj1)).a(((r) (obj)));
            unlock();
            m();
              goto _L10
_L4:
            obj1 = ((j) (obj1)).b();
            continue; /* Loop/switch isn't completed */
_L2:
            d = d + 1;
            obj1 = JVM INSTR new #167 <Class LocalCache$i>;
            ((i) (obj1)).i();
            obj = a(obj, i1, ((j) (obj2)));
            ((j) (obj)).a(((r) (obj1)));
            atomicreferencearray.set(j1, obj);
            unlock();
            m();
            obj = obj1;
              goto _L10
            obj;
            unlock();
            m();
            throw obj;
            if (true) goto _L12; else goto _L11
_L11:
        }

        j a(j j1, j j2) {
            j j3 = null;
            if (j1.d() != null) goto _L2; else goto _L1
_L1:
            return j3;
_L2:
            r r1 = j1.a();
            Object obj = r1.get();
            if (obj != null || !r1.d()) {
                j3 = a.r.a(this, j1, j2);
                j3.a(r1.a(i, obj, j3));
            }
            if (true) goto _L1; else goto _L3
_L3:
        }

        j a(j j1, j j2, Object obj, int i1, r r1, RemovalCause removalcause) {
            a(obj, i1, r1, removalcause);
            l.remove(j2);
            m.remove(j2);
            if (r1.c())
                r1.a(null);
            else
                j1 = b(j1, j2);
            return j1;
        }

        j a(Object obj, int i1) {
            j j1 = b(i1);
_L3:
            if (j1 == null) goto _L2; else goto _L1
_L1:
            Object obj1;
            if (j1.c() == i1) {
                obj1 = j1.d();
                if (obj1 != null)
                    continue; /* Loop/switch isn't completed */
                a();
            }
_L5:
            j1 = j1.b();
              goto _L3
            if (!a.f.a(obj, obj1)) goto _L5; else goto _L4
_L4:
            return j1;
_L2:
            j1 = null;
            if (true) goto _L4; else goto _L6
_L6:
        }

        j a(Object obj, int i1, long l1) {
            Object obj1;
            obj1 = null;
            obj = a(obj, i1);
            if (obj != null) goto _L2; else goto _L1
_L1:
            obj = obj1;
_L4:
            return ((j) (obj));
_L2:
            if (a.b(((j) (obj)), l1)) {
                a(l1);
                obj = obj1;
            }
            if (true) goto _L4; else goto _L3
_L3:
        }

        j a(Object obj, int i1, j j1) {
            return a.r.a(this, com.google.common.base.i.a(obj), i1, j1);
        }

        Object a(j j1, Object obj, int i1, Object obj1, long l1, CacheLoader cacheloader) {
            Object obj2 = obj1;
            if (a.e()) {
                obj2 = obj1;
                if (l1 - j1.h() > a.n) {
                    obj2 = obj1;
                    if (!j1.a().c()) {
                        j1 = ((j) (a(obj, i1, cacheloader, true)));
                        obj2 = obj1;
                        if (j1 != null)
                            obj2 = j1;
                    }
                }
            }
            return obj2;
        }

        Object a(j j1, Object obj, r r1) {
            if (!r1.c())
                throw new AssertionError();
            boolean flag;
            if (!Thread.holdsLock(j1))
                flag = true;
            else
                flag = false;
            com.google.common.base.i.b(flag, "Recursive load of: %s", new Object[] {
                obj
            });
            r1 = ((r) (r1.e()));
            if (r1 != null)
                break MISSING_BLOCK_LABEL_111;
            j1 = JVM INSTR new #265 <Class CacheLoader$InvalidCacheLoadException>;
            r1 = JVM INSTR new #267 <Class StringBuilder>;
            r1.StringBuilder();
            j1.CacheLoader.InvalidCacheLoadException(r1.append("CacheLoader returned null for key ").append(obj).append(".").toString());
            throw j1;
            j1;
            n.b(1);
            throw j1;
            a(j1, a.q.a());
            n.b(1);
            return r1;
        }

        Object a(Object obj, int i1, CacheLoader cacheloader) {
            com.google.common.base.i.a(obj);
            com.google.common.base.i.a(cacheloader);
            if (b == 0) goto _L2; else goto _L1
_L1:
            j j1 = a(obj, i1);
            if (j1 == null) goto _L2; else goto _L3
_L3:
            long l1;
            Object obj1;
            l1 = a.q.a();
            obj1 = c(j1, l1);
            if (obj1 == null) goto _L5; else goto _L4
_L4:
            a(j1, l1);
            n.a(1);
            obj = a(j1, obj, i1, obj1, l1, cacheloader);
            l();
_L7:
            return obj;
_L5:
            obj1 = j1.a();
            if (!((r) (obj1)).c()) goto _L2; else goto _L6
_L6:
            obj = a(j1, obj, ((r) (obj1)));
            l();
              goto _L7
_L2:
            obj = b(obj, i1, cacheloader);
            l();
              goto _L7
            cacheloader;
            obj = cacheloader.getCause();
            if (obj instanceof Error) {
                cacheloader = JVM INSTR new #319 <Class ExecutionError>;
                cacheloader.ExecutionError((Error)obj);
                throw cacheloader;
            }
            break MISSING_BLOCK_LABEL_180;
            obj;
            l();
            throw obj;
            if (obj instanceof RuntimeException) {
                cacheloader = JVM INSTR new #326 <Class UncheckedExecutionException>;
                cacheloader.UncheckedExecutionException(((Throwable) (obj)));
                throw cacheloader;
            } else {
                throw cacheloader;
            }
        }

        Object a(Object obj, int i1, CacheLoader cacheloader, boolean flag) {
            Object obj1;
            i j1;
            obj1 = null;
            j1 = a(obj, i1, flag);
            if (j1 != null) goto _L2; else goto _L1
_L1:
            obj = obj1;
_L4:
            return obj;
_L2:
            cacheloader = b(obj, i1, j1, cacheloader);
            obj = obj1;
            if (cacheloader.isDone())
                try {
                    obj = com.google.common.util.concurrent.h.a(cacheloader);
                }
                // Misplaced declaration of an exception variable
                catch (Object obj) {
                    obj = obj1;
                }
            if (true) goto _L4; else goto _L3
_L3:
        }

        Object a(Object obj, int i1, i j1, CacheLoader cacheloader) {
            return a(obj, i1, j1, j1.a(obj, cacheloader));
        }

        Object a(Object obj, int i1, i j1, com.google.common.util.concurrent.e e1) {
            com.google.common.util.concurrent.e e2 = null;
            e1 = ((com.google.common.util.concurrent.e) (com.google.common.util.concurrent.h.a(e1)));
            if (e1 != null)
                break MISSING_BLOCK_LABEL_110;
            e2 = e1;
            CacheLoader.InvalidCacheLoadException invalidcacheloadexception = JVM INSTR new #265 <Class CacheLoader$InvalidCacheLoadException>;
            e2 = e1;
            StringBuilder stringbuilder = JVM INSTR new #267 <Class StringBuilder>;
            e2 = e1;
            stringbuilder.StringBuilder();
            e2 = e1;
            invalidcacheloadexception.CacheLoader.InvalidCacheLoadException(stringbuilder.append("CacheLoader returned null for key ").append(obj).append(".").toString());
            e2 = e1;
            throw invalidcacheloadexception;
            e1;
            if (e2 == null) {
                n.b(j1.f());
                a(obj, i1, j1);
            }
            throw e1;
            e2 = e1;
            n.a(j1.f());
            e2 = e1;
            a(obj, i1, j1, e1);
            if (e1 == null) {
                n.b(j1.f());
                a(obj, i1, j1);
            }
            return e1;
        }

        Object a(Object obj, int i1, Object obj1) {
            lock();
            int j1;
            long l1;
            j j3;
            AtomicReferenceArray atomicreferencearray;
            l1 = a.q.a();
            c(l1);
            atomicreferencearray = f;
            j1 = i1 & atomicreferencearray.length() - 1;
            j3 = (j)atomicreferencearray.get(j1);
            j j2 = j3;
_L11:
            if (j2 == null) goto _L2; else goto _L1
_L1:
            Object obj3 = j2.d();
            if (j2.c() != i1 || obj3 == null) goto _L4; else goto _L3
_L3:
            if (!a.f.a(obj, obj3)) goto _L4; else goto _L5
_L5:
            Object obj2;
            r r1;
            r1 = j2.a();
            obj2 = r1.get();
            if (obj2 != null) goto _L7; else goto _L6
_L6:
            if (r1.d()) {
                int k1 = b;
                d = d + 1;
                obj = a(j3, j2, obj3, i1, r1, RemovalCause.c);
                i1 = b;
                atomicreferencearray.set(j1, obj);
                b = i1 - 1;
            }
            unlock();
            m();
            obj = null;
_L9:
            return obj;
_L7:
            d = d + 1;
            a(obj, i1, r1, RemovalCause.b);
            a(j2, obj, obj1, l1);
            a(j2);
            unlock();
            m();
            obj = obj2;
            continue; /* Loop/switch isn't completed */
_L4:
            j2 = j2.b();
            continue; /* Loop/switch isn't completed */
_L2:
            unlock();
            m();
            obj = null;
            if (true) goto _L9; else goto _L8
_L8:
            obj;
            unlock();
            m();
            throw obj;
            if (true) goto _L11; else goto _L10
_L10:
        }

        Object a(Object obj, int i1, Object obj1, boolean flag) {
            lock();
            int k1;
            long l1;
            Object obj3;
            Object obj4;
            l1 = a.q.a();
            c(l1);
            if (b + 1 > e) {
                j();
                int j1 = b;
            }
            obj4 = f;
            k1 = i1 & ((AtomicReferenceArray) (obj4)).length() - 1;
            obj3 = (j)((AtomicReferenceArray) (obj4)).get(k1);
            Object obj2 = obj3;
_L13:
            if (obj2 == null) goto _L2; else goto _L1
_L1:
            Object obj5 = ((j) (obj2)).d();
            if (((j) (obj2)).c() != i1 || obj5 == null) goto _L4; else goto _L3
_L3:
            if (!a.f.a(obj, obj5)) goto _L4; else goto _L5
_L5:
            obj4 = ((j) (obj2)).a();
            obj3 = ((r) (obj4)).get();
            if (obj3 != null) goto _L7; else goto _L6
_L6:
            d = d + 1;
            if (!((r) (obj4)).d()) goto _L9; else goto _L8
_L8:
            a(obj, i1, ((r) (obj4)), RemovalCause.c);
            a(((j) (obj2)), obj, obj1, l1);
            i1 = b;
_L10:
            b = i1;
            a(((j) (obj2)));
            unlock();
            m();
            obj = null;
_L11:
            return obj;
_L9:
            a(((j) (obj2)), obj, obj1, l1);
            i1 = b + 1;
              goto _L10
_L7:
            if (!flag)
                break MISSING_BLOCK_LABEL_263;
            b(((j) (obj2)), l1);
            unlock();
            m();
            obj = obj3;
              goto _L11
            d = d + 1;
            a(obj, i1, ((r) (obj4)), RemovalCause.b);
            a(((j) (obj2)), obj, obj1, l1);
            a(((j) (obj2)));
            unlock();
            m();
            obj = obj3;
              goto _L11
_L4:
            obj2 = ((j) (obj2)).b();
            continue; /* Loop/switch isn't completed */
_L2:
            d = d + 1;
            j j2 = a(obj, i1, ((j) (obj3)));
            a(j2, obj, obj1, l1);
            ((AtomicReferenceArray) (obj4)).set(k1, j2);
            b = b + 1;
            a(j2);
            unlock();
            m();
            obj = null;
              goto _L11
            obj;
            unlock();
            m();
            throw obj;
            if (true) goto _L13; else goto _L12
_L12:
        }

        AtomicReferenceArray a(int i1) {
            return new AtomicReferenceArray(i1);
        }

        void a() {
            if (!tryLock())
                break MISSING_BLOCK_LABEL_15;
            b();
            unlock();
            return;
            Exception exception;
            exception;
            unlock();
            throw exception;
        }

        void a(long l1) {
            if (!tryLock())
                break MISSING_BLOCK_LABEL_16;
            b(l1);
            unlock();
            return;
            Exception exception;
            exception;
            unlock();
            throw exception;
        }

        void a(j j1) {
            if (a.a()) goto _L2; else goto _L1
_L1:
            return;
_L2:
            h();
            if ((long)j1.a().a() > g && !a(j1, j1.c(), RemovalCause.e))
                throw new AssertionError();
            do {
                if (c <= g)
                    continue; /* Loop/switch isn't completed */
                j1 = i();
            } while (a(j1, j1.c(), RemovalCause.e));
            break; /* Loop/switch isn't completed */
            if (true) goto _L1; else goto _L3
_L3:
            throw new AssertionError();
        }

        void a(j j1, int i1, long l1) {
            h();
            c = c + (long)i1;
            if (a.i())
                j1.a(l1);
            if (a.h())
                j1.b(l1);
            m.add(j1);
            l.add(j1);
        }

        void a(j j1, long l1) {
            if (a.i())
                j1.a(l1);
            j.add(j1);
        }

        void a(j j1, RemovalCause removalcause) {
            a(j1.d(), j1.c(), j1.a(), removalcause);
        }

        void a(j j1, Object obj, Object obj1, long l1) {
            r r1 = j1.a();
            int i1 = a.k.a(obj, obj1);
            boolean flag;
            if (i1 >= 0)
                flag = true;
            else
                flag = false;
            com.google.common.base.i.b(flag, "Weights must be non-negative");
            j1.a(a.i.a(this, j1, obj1, i1));
            a(j1, i1, l1);
            r1.a(obj1);
        }

        void a(Object obj, int i1, r r1, RemovalCause removalcause) {
            c = c - (long)r1.a();
            if (removalcause.a())
                n.a();
            if (a.o != LocalCache.v) {
                obj = com.google.common.cache.f.a(obj, r1.get(), removalcause);
                a.o.offer(obj);
            }
        }

        void a(AtomicReferenceArray atomicreferencearray) {
            e = (atomicreferencearray.length() * 3) / 4;
            if (!a.b() && (long)e == g)
                e = e + 1;
            f = atomicreferencearray;
        }

        boolean a(j j1, int i1) {
            lock();
            int k1;
            j j3;
            AtomicReferenceArray atomicreferencearray;
            k1 = b;
            atomicreferencearray = f;
            k1 = i1 & atomicreferencearray.length() - 1;
            j3 = (j)atomicreferencearray.get(k1);
            j j2 = j3;
_L8:
            if (j2 == null) goto _L2; else goto _L1
_L1:
            if (j2 != j1) goto _L4; else goto _L3
_L3:
            d = d + 1;
            j1 = a(j3, j2, j2.d(), i1, j2.a(), RemovalCause.c);
            i1 = b;
            atomicreferencearray.set(k1, j1);
            b = i1 - 1;
            boolean flag;
            flag = true;
            unlock();
            m();
_L6:
            return flag;
_L4:
            j2 = j2.b();
            continue; /* Loop/switch isn't completed */
_L2:
            flag = false;
            unlock();
            m();
            if (true) goto _L6; else goto _L5
_L5:
            j1;
            unlock();
            m();
            throw j1;
            if (true) goto _L8; else goto _L7
_L7:
        }

        boolean a(j j1, int i1, RemovalCause removalcause) {
            int k1;
            j j2;
            j j3;
            AtomicReferenceArray atomicreferencearray;
            k1 = b;
            atomicreferencearray = f;
            k1 = i1 & atomicreferencearray.length() - 1;
            j3 = (j)atomicreferencearray.get(k1);
            j2 = j3;
_L3:
            if (j2 == null)
                break MISSING_BLOCK_LABEL_123;
            if (j2 != j1) goto _L2; else goto _L1
_L1:
            boolean flag;
            d = d + 1;
            j1 = a(j3, j2, j2.d(), i1, j2.a(), removalcause);
            i1 = b;
            atomicreferencearray.set(k1, j1);
            b = i1 - 1;
            flag = true;
_L4:
            return flag;
_L2:
            j2 = j2.b();
              goto _L3
            flag = false;
              goto _L4
        }

        boolean a(Object obj, int i1, i j1) {
            lock();
            int k1;
            j j3;
            AtomicReferenceArray atomicreferencearray;
            atomicreferencearray = f;
            k1 = i1 & atomicreferencearray.length() - 1;
            j3 = (j)atomicreferencearray.get(k1);
            j j2 = j3;
_L10:
            if (j2 == null)
                break MISSING_BLOCK_LABEL_181;
            Object obj1 = j2.d();
            if (j2.c() != i1 || obj1 == null) goto _L2; else goto _L1
_L1:
            if (!a.f.a(obj, obj1)) goto _L2; else goto _L3
_L3:
            if (j2.a() != j1) goto _L5; else goto _L4
_L4:
            if (!j1.d()) goto _L7; else goto _L6
_L6:
            j2.a(j1.g());
_L8:
            boolean flag;
            flag = true;
            unlock();
            m();
_L9:
            return flag;
_L7:
            atomicreferencearray.set(k1, b(j3, j2));
              goto _L8
            obj;
            unlock();
            m();
            throw obj;
_L5:
            unlock();
            m();
            flag = false;
              goto _L9
_L2:
            j2 = j2.b();
              goto _L10
            unlock();
            m();
            flag = false;
              goto _L9
        }

        boolean a(Object obj, int i1, i j1, Object obj1) {
            lock();
            int l1;
            long l2;
            l2 = a.q.a();
            c(l2);
            l1 = b + 1;
            int k1 = l1;
            Object obj3;
            Object obj4;
            if (l1 > e) {
                j();
                k1 = b + 1;
            }
            obj4 = f;
            l1 = i1 & ((AtomicReferenceArray) (obj4)).length() - 1;
            obj3 = (j)((AtomicReferenceArray) (obj4)).get(l1);
            Object obj2 = obj3;
_L17:
            if (obj2 == null) goto _L2; else goto _L1
_L1:
            Object obj5 = ((j) (obj2)).d();
            if (((j) (obj2)).c() != i1 || obj5 == null) goto _L4; else goto _L3
_L3:
            if (!a.f.a(obj, obj5)) goto _L4; else goto _L5
_L5:
            obj3 = ((j) (obj2)).a();
            obj4 = ((r) (obj3)).get();
            if (j1 == obj3) goto _L7; else goto _L6
_L6:
            if (obj4 != null) goto _L9; else goto _L8
_L8:
            if (obj3 == LocalCache.u) goto _L9; else goto _L7
_L7:
            d = d + 1;
            l1 = k1;
            if (!j1.d()) goto _L11; else goto _L10
_L10:
            if (obj4 != null) goto _L13; else goto _L12
_L12:
            obj3 = RemovalCause.c;
_L14:
            a(obj, i1, ((r) (j1)), ((RemovalCause) (obj3)));
            l1 = k1 - 1;
_L11:
            a(((j) (obj2)), obj, obj1, l2);
            b = l1;
            a(((j) (obj2)));
            boolean flag;
            unlock();
            m();
            flag = true;
_L15:
            return flag;
_L13:
            obj3 = RemovalCause.b;
              goto _L14
_L9:
            j1 = JVM INSTR new #489 <Class LocalCache$z>;
            j1.z(obj1, 0);
            a(obj, i1, ((r) (j1)), RemovalCause.b);
            unlock();
            m();
            flag = false;
              goto _L15
_L4:
            obj2 = ((j) (obj2)).b();
            continue; /* Loop/switch isn't completed */
_L2:
            d = d + 1;
            j1 = a(obj, i1, ((j) (obj3)));
            a(((j) (j1)), obj, obj1, l2);
            ((AtomicReferenceArray) (obj4)).set(l1, j1);
            b = k1;
            a(((j) (j1)));
            unlock();
            m();
            flag = true;
              goto _L15
            obj;
            unlock();
            m();
            throw obj;
            if (true) goto _L17; else goto _L16
_L16:
        }

        boolean a(Object obj, int i1, r r1) {
            boolean flag1;
            flag1 = false;
            lock();
            int j1;
            j j3;
            AtomicReferenceArray atomicreferencearray;
            j1 = b;
            atomicreferencearray = f;
            j1 = i1 & atomicreferencearray.length() - 1;
            j3 = (j)atomicreferencearray.get(j1);
            j j2 = j3;
_L11:
            if (j2 == null) goto _L2; else goto _L1
_L1:
            Object obj1 = j2.d();
            if (j2.c() != i1 || obj1 == null) goto _L4; else goto _L3
_L3:
            if (!a.f.a(obj, obj1)) goto _L4; else goto _L5
_L5:
            if (j2.a() != r1) goto _L7; else goto _L6
_L6:
            d = d + 1;
            obj = a(j3, j2, obj1, i1, r1, RemovalCause.c);
            i1 = b;
            atomicreferencearray.set(j1, obj);
            b = i1 - 1;
            boolean flag;
            flag1 = true;
            unlock();
            flag = flag1;
            if (!isHeldByCurrentThread()) {
                m();
                flag = flag1;
            }
_L9:
            return flag;
_L7:
            unlock();
            flag = flag1;
            if (!isHeldByCurrentThread()) {
                m();
                flag = flag1;
            }
            continue; /* Loop/switch isn't completed */
_L4:
            j2 = j2.b();
            continue; /* Loop/switch isn't completed */
_L2:
            unlock();
            flag = flag1;
            if (!isHeldByCurrentThread()) {
                m();
                flag = flag1;
            }
            if (true) goto _L9; else goto _L8
_L8:
            obj;
            unlock();
            if (!isHeldByCurrentThread())
                m();
            throw obj;
            if (true) goto _L11; else goto _L10
_L10:
        }

        boolean a(Object obj, int i1, Object obj1, Object obj2) {
            lock();
            int j1;
            long l1;
            j j3;
            AtomicReferenceArray atomicreferencearray;
            l1 = a.q.a();
            c(l1);
            atomicreferencearray = f;
            j1 = i1 & atomicreferencearray.length() - 1;
            j3 = (j)atomicreferencearray.get(j1);
            j j2 = j3;
_L11:
            if (j2 == null) goto _L2; else goto _L1
_L1:
            Object obj3 = j2.d();
            if (j2.c() != i1 || obj3 == null) goto _L4; else goto _L3
_L3:
            if (!a.f.a(obj, obj3)) goto _L4; else goto _L5
_L5:
            Object obj4;
            r r1;
            r1 = j2.a();
            obj4 = r1.get();
            if (obj4 != null) goto _L7; else goto _L6
_L6:
            if (r1.d()) {
                int k1 = b;
                d = d + 1;
                obj = a(j3, j2, obj3, i1, r1, RemovalCause.c);
                i1 = b;
                atomicreferencearray.set(j1, obj);
                b = i1 - 1;
            }
            boolean flag;
            flag = false;
            unlock();
            m();
_L9:
            return flag;
_L7:
            if (!a.g.a(obj1, obj4))
                break MISSING_BLOCK_LABEL_269;
            d = d + 1;
            a(obj, i1, r1, RemovalCause.b);
            a(j2, obj, obj2, l1);
            a(j2);
            flag = true;
            unlock();
            m();
            continue; /* Loop/switch isn't completed */
            b(j2, l1);
            flag = false;
            unlock();
            m();
            continue; /* Loop/switch isn't completed */
_L4:
            j2 = j2.b();
            continue; /* Loop/switch isn't completed */
_L2:
            flag = false;
            unlock();
            m();
            if (true) goto _L9; else goto _L8
_L8:
            obj;
            unlock();
            m();
            throw obj;
            if (true) goto _L11; else goto _L10
_L10:
        }

        j b(int i1) {
            AtomicReferenceArray atomicreferencearray = f;
            return (j)atomicreferencearray.get(atomicreferencearray.length() - 1 & i1);
        }

        j b(j j1, j j2) {
            int i1 = b;
            j j4 = j2.b();
            j j3 = j1;
            j1 = j4;
            while (j3 != j2)  {
                j j5 = a(j3, j1);
                if (j5 != null) {
                    j1 = j5;
                } else {
                    b(j3);
                    i1--;
                }
                j3 = j3.b();
            }
            b = i1;
            return j1;
        }

        com.google.common.util.concurrent.e b(Object obj, int i1, i j1, CacheLoader cacheloader) {
            cacheloader = j1.a(obj, cacheloader);
            cacheloader.a(new Runnable(this, obj, i1, j1, cacheloader) {

                final Object a;
                final int b;
                final i c;
                final com.google.common.util.concurrent.e d;
                final Segment e;

                public void run() {
                    e.a(a, b, c, d);
_L1:
                    return;
                    Throwable throwable;
                    throwable;
                    com.google.common.cache.LocalCache.a.log(Level.WARNING, "Exception thrown during refresh", throwable);
                    c.a(throwable);
                      goto _L1
                }

             {
                e = segment;
                a = obj;
                b = i1;
                c = j1;
                d = e1;
                super();
            }
            }
, MoreExecutors.a());
            return cacheloader;
        }

        Object b(Object obj, int i1) {
            Object obj1 = null;
            long l1;
            if (b == 0)
                break MISSING_BLOCK_LABEL_100;
            l1 = a.q.a();
            obj = a(obj, i1, l1);
            if (obj != null) goto _L2; else goto _L1
_L1:
            l();
            obj = obj1;
_L3:
            return obj;
_L2:
            Object obj2 = ((j) (obj)).a().get();
            if (obj2 == null)
                break MISSING_BLOCK_LABEL_96;
            a(((j) (obj)), l1);
            obj = a(((j) (obj)), ((j) (obj)).d(), i1, obj2, l1, a.t);
            l();
              goto _L3
            a();
            l();
            obj = obj1;
              goto _L3
            obj;
            l();
            throw obj;
        }

        Object b(Object obj, int i1, CacheLoader cacheloader) {
            lock();
            int j1;
            int k1;
            long l1;
            j j3;
            AtomicReferenceArray atomicreferencearray;
            l1 = a.q.a();
            c(l1);
            j1 = b;
            atomicreferencearray = f;
            k1 = i1 & atomicreferencearray.length() - 1;
            j3 = (j)atomicreferencearray.get(k1);
            j j2 = j3;
_L15:
            if (j2 == null)
                break MISSING_BLOCK_LABEL_416;
            Object obj2 = j2.d();
            if (j2.c() != i1 || obj2 == null) goto _L2; else goto _L1
_L1:
            if (!a.f.a(obj, obj2)) goto _L2; else goto _L3
_L3:
            r r1 = j2.a();
            if (!r1.c()) goto _L5; else goto _L4
_L4:
            j1 = 0;
_L12:
            if (j1 == 0) goto _L7; else goto _L6
_L6:
            Object obj1;
            obj1 = JVM INSTR new #167 <Class LocalCache$i>;
            ((i) (obj1)).i();
            if (j2 != null) goto _L9; else goto _L8
_L8:
            j2 = a(obj, i1, j3);
            j2.a(((r) (obj1)));
            atomicreferencearray.set(k1, j2);
_L16:
            unlock();
            m();
            if (j1 == 0) goto _L11; else goto _L10
_L10:
            j2;
            JVM INSTR monitorenter ;
            obj = a(obj, i1, ((i) (obj1)), cacheloader);
            j2;
            JVM INSTR monitorexit ;
            n.b(1);
_L14:
            return obj;
_L5:
            obj1 = r1.get();
            if (obj1 != null)
                break MISSING_BLOCK_LABEL_282;
            a(obj2, i1, r1, RemovalCause.c);
_L13:
            l.remove(j2);
            m.remove(j2);
            b = j1 - 1;
            j1 = 1;
              goto _L12
            if (!a.b(j2, l1))
                break MISSING_BLOCK_LABEL_322;
            a(obj2, i1, r1, RemovalCause.d);
              goto _L13
            obj;
            unlock();
            m();
            throw obj;
            b(j2, l1);
            n.a(1);
            unlock();
            m();
            obj = obj1;
              goto _L14
_L2:
            j2 = j2.b();
              goto _L15
_L9:
            j2.a(((r) (obj1)));
              goto _L16
            obj;
            j2;
            JVM INSTR monitorexit ;
            throw obj;
            obj;
            n.b(1);
            throw obj;
_L11:
            obj = a(j2, obj, r1);
              goto _L14
_L7:
            obj1 = null;
              goto _L16
            r1 = null;
            j1 = 1;
              goto _L12
        }

        void b() {
            if (a.m())
                c();
            if (a.n())
                d();
        }

        void b(long l1) {
            h();
            do {
                j j1 = (j)l.peek();
                if (j1 != null && a.b(j1, l1)) {
                    if (!a(j1, j1.c(), RemovalCause.d))
                        throw new AssertionError();
                } else {
                    do {
                        j j2 = (j)m.peek();
                        if (j2 != null && a.b(j2, l1)) {
                            if (!a(j2, j2.c(), RemovalCause.d))
                                throw new AssertionError();
                        } else {
                            return;
                        }
                    } while (true);
                }
            } while (true);
        }

        void b(j j1) {
            a(j1, RemovalCause.c);
            l.remove(j1);
            m.remove(j1);
        }

        void b(j j1, long l1) {
            if (a.i())
                j1.a(l1);
            m.add(j1);
        }

        boolean b(Object obj, int i1, Object obj1) {
            boolean flag;
            flag = false;
            lock();
            int j1;
            j j3;
            AtomicReferenceArray atomicreferencearray;
            c(a.q.a());
            j1 = b;
            atomicreferencearray = f;
            j1 = i1 & atomicreferencearray.length() - 1;
            j3 = (j)atomicreferencearray.get(j1);
            j j2 = j3;
_L9:
            if (j2 == null)
                break MISSING_BLOCK_LABEL_260;
            Object obj2 = j2.d();
            if (j2.c() != i1 || obj2 == null) goto _L2; else goto _L1
_L1:
            if (!a.f.a(obj, obj2)) goto _L2; else goto _L3
_L3:
            r r1;
            r1 = j2.a();
            obj = r1.get();
            if (!a.g.a(obj1, obj)) goto _L5; else goto _L4
_L4:
            obj = com.google.common.cache.RemovalCause.a;
_L6:
            d = d + 1;
            obj1 = a(j3, j2, obj2, i1, r1, ((RemovalCause) (obj)));
            i1 = b;
            atomicreferencearray.set(j1, obj1);
            b = i1 - 1;
            obj1 = com.google.common.cache.RemovalCause.a;
            if (obj == obj1)
                flag = true;
            else
                flag = false;
            unlock();
            m();
_L7:
            return flag;
_L5:
            if (obj != null)
                break MISSING_BLOCK_LABEL_231;
            if (!r1.d())
                break MISSING_BLOCK_LABEL_231;
            obj = RemovalCause.c;
              goto _L6
            unlock();
            m();
            break MISSING_BLOCK_LABEL_207;
_L2:
            j2 = j2.b();
            continue; /* Loop/switch isn't completed */
            unlock();
            m();
              goto _L7
            obj;
            unlock();
            m();
            throw obj;
            if (true) goto _L9; else goto _L8
_L8:
        }

        Object c(j j1, long l1) {
            Object obj1 = null;
            if (j1.d() == null) {
                a();
                j1 = obj1;
            } else {
                Object obj = j1.a().get();
                if (obj == null) {
                    a();
                    j1 = obj1;
                } else
                if (a.b(j1, l1)) {
                    a(l1);
                    j1 = obj1;
                } else {
                    j1 = ((j) (obj));
                }
            }
            return j1;
        }

        void c() {
            int i1 = 0;
            do {
                Object obj = h.poll();
                if (obj == null)
                    break;
                obj = (j)obj;
                a.a(((j) (obj)));
            } while (++i1 != 16);
        }

        void c(long l1) {
            d(l1);
        }

        boolean c(Object obj, int i1) {
            boolean flag;
            boolean flag1;
            flag1 = false;
            flag = false;
            if (b == 0) goto _L2; else goto _L1
_L1:
            obj = a(obj, i1, a.q.a());
            if (obj != null) goto _L4; else goto _L3
_L3:
            l();
_L6:
            return flag;
_L4:
            obj = ((j) (obj)).a().get();
            flag = flag1;
            if (obj != null)
                flag = true;
            l();
            continue; /* Loop/switch isn't completed */
_L2:
            l();
            if (true) goto _L6; else goto _L5
_L5:
            obj;
            l();
            throw obj;
        }

        Object d(Object obj, int i1) {
            Object obj2;
            obj2 = null;
            lock();
            int j1;
            j j3;
            AtomicReferenceArray atomicreferencearray;
            c(a.q.a());
            j1 = b;
            atomicreferencearray = f;
            j1 = i1 & atomicreferencearray.length() - 1;
            j3 = (j)atomicreferencearray.get(j1);
            j j2 = j3;
_L9:
            if (j2 == null)
                break MISSING_BLOCK_LABEL_230;
            Object obj3 = j2.d();
            if (j2.c() != i1 || obj3 == null) goto _L2; else goto _L1
_L1:
            if (!a.f.a(obj, obj3)) goto _L2; else goto _L3
_L3:
            Object obj1;
            r r1;
            r1 = j2.a();
            obj1 = r1.get();
            if (obj1 == null) goto _L5; else goto _L4
_L4:
            obj = com.google.common.cache.RemovalCause.a;
_L6:
            d = d + 1;
            obj = a(j3, j2, obj3, i1, r1, ((RemovalCause) (obj)));
            i1 = b;
            atomicreferencearray.set(j1, obj);
            b = i1 - 1;
            unlock();
            m();
            obj = obj1;
_L7:
            return obj;
_L5:
label0:
            {
                if (!r1.d())
                    break label0;
                obj = RemovalCause.c;
            }
              goto _L6
            unlock();
            m();
            obj = obj2;
              goto _L7
_L2:
            j2 = j2.b();
            continue; /* Loop/switch isn't completed */
            unlock();
            m();
            obj = obj2;
              goto _L7
            obj;
            unlock();
            m();
            throw obj;
            if (true) goto _L9; else goto _L8
_L8:
        }

        void d() {
            int i1 = 0;
            do {
                Object obj = i.poll();
                if (obj == null)
                    break;
                obj = (r)obj;
                a.a(((r) (obj)));
            } while (++i1 != 16);
        }

        void d(long l1) {
            if (!tryLock())
                break MISSING_BLOCK_LABEL_28;
            b();
            b(l1);
            k.set(0);
            unlock();
            return;
            Exception exception;
            exception;
            unlock();
            throw exception;
        }

        void e() {
            if (a.m())
                f();
            if (a.n())
                g();
        }

        void f() {
            while (h.poll() != null) ;
        }

        void g() {
            while (i.poll() != null) ;
        }

        void h() {
            do {
                j j1 = (j)j.poll();
                if (j1 == null)
                    break;
                if (m.contains(j1))
                    m.add(j1);
            } while (true);
        }

        j i() {
            for (Iterator iterator = m.iterator(); iterator.hasNext();) {
                j j1 = (j)iterator.next();
                if (j1.a().a() > 0)
                    return j1;
            }

            throw new AssertionError();
        }

        void j() {
            int j2;
            AtomicReferenceArray atomicreferencearray1;
            atomicreferencearray1 = f;
            j2 = atomicreferencearray1.length();
            if (j2 < 0x40000000) goto _L2; else goto _L1
_L1:
            return;
_L2:
            int i1;
            int k1;
            int i2;
            AtomicReferenceArray atomicreferencearray;
            i1 = b;
            atomicreferencearray = a(j2 << 1);
            e = (atomicreferencearray.length() * 3) / 4;
            i2 = atomicreferencearray.length() - 1;
            k1 = 0;
_L7:
            if (k1 >= j2) goto _L4; else goto _L3
_L3:
            int j1;
            j j4;
            j j5;
            j5 = (j)atomicreferencearray1.get(k1);
            if (j5 == null)
                break MISSING_BLOCK_LABEL_275;
            j4 = j5.b();
            j1 = j5.c() & i2;
            if (j4 != null) goto _L6; else goto _L5
_L5:
            atomicreferencearray.set(j1, j5);
            j1 = i1;
_L9:
            k1++;
            i1 = j1;
              goto _L7
_L6:
            j j3;
            j3 = j5;
            for (; j4 != null; j4 = j4.b()) {
                int l1 = j4.c() & i2;
                if (l1 != j1) {
                    j3 = j4;
                    j1 = l1;
                }
            }

            atomicreferencearray.set(j1, j3);
            j4 = j5;
_L10:
            j1 = i1;
            if (j4 == j3) goto _L9; else goto _L8
_L8:
            j1 = j4.c() & i2;
            j j6 = a(j4, (j)atomicreferencearray.get(j1));
            if (j6 != null) {
                atomicreferencearray.set(j1, j6);
            } else {
                b(j4);
                i1--;
            }
            j4 = j4.b();
              goto _L10
_L4:
            f = atomicreferencearray;
            b = i1;
              goto _L1
            j1 = i1;
              goto _L9
        }

        void k() {
            if (b == 0)
                break MISSING_BLOCK_LABEL_152;
            lock();
            AtomicReferenceArray atomicreferencearray = f;
            int i1 = 0;
_L4:
            j j1;
            if (i1 >= atomicreferencearray.length())
                break; /* Loop/switch isn't completed */
            j1 = (j)atomicreferencearray.get(i1);
_L2:
            if (j1 == null)
                break; /* Loop/switch isn't completed */
            if (j1.a().d())
                a(j1, com.google.common.cache.RemovalCause.a);
            j1 = j1.b();
            if (true) goto _L2; else goto _L1
_L1:
            i1++;
            if (true) goto _L4; else goto _L3
_L3:
            i1 = 0;
_L6:
            if (i1 >= atomicreferencearray.length())
                break; /* Loop/switch isn't completed */
            atomicreferencearray.set(i1, null);
            i1++;
            if (true) goto _L6; else goto _L5
_L5:
            e();
            l.clear();
            m.clear();
            k.set(0);
            d = d + 1;
            b = 0;
            unlock();
            m();
            return;
            Exception exception;
            exception;
            unlock();
            m();
            throw exception;
        }

        void l() {
            if ((k.incrementAndGet() & 0x3f) == 0)
                n();
        }

        void m() {
            o();
        }

        void n() {
            d(a.q.a());
            o();
        }

        void o() {
            if (!isHeldByCurrentThread())
                a.r();
        }

        Segment(LocalCache localcache, int i1, long l1, a.b b1) {
            Object obj = null;
            super();
            a = localcache;
            g = l1;
            n = (a.b)com.google.common.base.i.a(b1);
            a(a(i1));
            if (localcache.m())
                b1 = new ReferenceQueue();
            else
                b1 = null;
            h = b1;
            b1 = obj;
            if (localcache.n())
                b1 = new ReferenceQueue();
            i = b1;
            if (localcache.f())
                b1 = new ConcurrentLinkedQueue();
            else
                b1 = LocalCache.q();
            j = b1;
            if (localcache.g())
                b1 = new ab();
            else
                b1 = LocalCache.q();
            l = b1;
            if (localcache.f())
                localcache = new c();
            else
                localcache = LocalCache.q();
            m = localcache;
        }
    }

    static abstract class Strength extends Enum {

        public static final Strength a;
        public static final Strength b;
        public static final Strength c;
        private static final Strength d[];

        public static Strength valueOf(String s1) {
            return (Strength)Enum.valueOf(com/google/common/cache/LocalCache$Strength, s1);
        }

        public static Strength[] values() {
            return (Strength[])d.clone();
        }

        abstract Equivalence a();

        abstract r a(Segment segment, j j1, Object obj, int i1);

        static  {
            a = new Strength("STRONG", 0) {

                Equivalence a() {
                    return Equivalence.a();
                }

                r a(Segment segment, j j1, Object obj, int i1) {
                    if (i1 == 1)
                        segment = new o(obj);
                    else
                        segment = new z(obj, i1);
                    return segment;
                }

            }
;
            b = new Strength("SOFT", 1) {

                Equivalence a() {
                    return Equivalence.b();
                }

                r a(Segment segment, j j1, Object obj, int i1) {
                    if (i1 == 1)
                        segment = new k(segment.i, obj, j1);
                    else
                        segment = new y(segment.i, obj, j1, i1);
                    return segment;
                }

            }
;
            c = new Strength("WEAK", 2) {

                Equivalence a() {
                    return Equivalence.b();
                }

                r a(Segment segment, j j1, Object obj, int i1) {
                    if (i1 == 1)
                        segment = new w(segment.i, obj, j1);
                    else
                        segment = new aa(segment.i, obj, j1, i1);
                    return segment;
                }

            }
;
            d = (new Strength[] {
                a, b, c
            });
        }

        private Strength(String s1, int i1) {
            super(s1, i1);
        }

    }

    abstract class a extends AbstractSet {

        final ConcurrentMap a;
        final LocalCache b;

        public void clear() {
            a.clear();
        }

        public boolean isEmpty() {
            return a.isEmpty();
        }

        public int size() {
            return a.size();
        }

        public Object[] toArray() {
            return com.google.common.cache.LocalCache.a(this).toArray();
        }

        public Object[] toArray(Object aobj[]) {
            return com.google.common.cache.LocalCache.a(this).toArray(aobj);
        }

        a(ConcurrentMap concurrentmap) {
            b = LocalCache.this;
            super();
            a = concurrentmap;
        }
    }

    static final class aa extends w {

        final int b;

        public int a() {
            return b;
        }

        public r a(ReferenceQueue referencequeue, Object obj, j j1) {
            return new aa(referencequeue, obj, j1, b);
        }

        aa(ReferenceQueue referencequeue, Object obj, j j1, int i1) {
            super(referencequeue, obj, j1);
            b = i1;
        }
    }

    static final class ab extends AbstractQueue {

        final j a = new _cls1(this);

        public j a() {
            j j2 = a.i();
            j j1 = j2;
            if (j2 == a)
                j1 = null;
            return j1;
        }

        public boolean a(j j1) {
            LocalCache.b(j1.j(), j1.i());
            LocalCache.b(a.j(), j1);
            LocalCache.b(j1, a);
            return true;
        }

        public j b() {
            j j1 = a.i();
            if (j1 == a)
                j1 = null;
            else
                remove(j1);
            return j1;
        }

        public void clear() {
            j j2;
            for (j j1 = a.i(); j1 != a; j1 = j2) {
                j2 = j1.i();
                LocalCache.c(j1);
            }

            a.c(a);
            a.d(a);
        }

        public boolean contains(Object obj) {
            boolean flag;
            if (((j)obj).i() != com.google.common.cache.NullEntry.a)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public boolean isEmpty() {
            boolean flag;
            if (a.i() == a)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public Iterator iterator() {
            return new com.google.common.collect.e(this, a()) {

                final ab a;

                protected j a(j j1) {
                    j j2 = j1.i();
                    j1 = j2;
                    if (j2 == a.a)
                        j1 = null;
                    return j1;
                }

                protected volatile Object a(Object obj) {
                    return a((j)obj);
                }

             {
                a = ab1;
                super(j1);
            }
            }
;
        }

        public boolean offer(Object obj) {
            return a((j)obj);
        }

        public Object peek() {
            return a();
        }

        public Object poll() {
            return b();
        }

        public boolean remove(Object obj) {
            obj = (j)obj;
            j j1 = ((j) (obj)).j();
            j j2 = ((j) (obj)).i();
            LocalCache.b(j1, j2);
            LocalCache.c(((j) (obj)));
            boolean flag;
            if (j2 != com.google.common.cache.NullEntry.a)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public int size() {
            int i1 = 0;
            for (j j1 = a.i(); j1 != a; j1 = j1.i())
                i1++;

            return i1;
        }

        ab() {
        }
    }

    final class ac
        implements java.util.Map.Entry {

        final Object a;
        Object b;
        final LocalCache c;

        public boolean equals(Object obj) {
            boolean flag1 = false;
            boolean flag = flag1;
            if (obj instanceof java.util.Map.Entry) {
                obj = (java.util.Map.Entry)obj;
                flag = flag1;
                if (a.equals(((java.util.Map.Entry) (obj)).getKey())) {
                    flag = flag1;
                    if (b.equals(((java.util.Map.Entry) (obj)).getValue()))
                        flag = true;
                }
            }
            return flag;
        }

        public Object getKey() {
            return a;
        }

        public Object getValue() {
            return b;
        }

        public int hashCode() {
            return a.hashCode() ^ b.hashCode();
        }

        public Object setValue(Object obj) {
            throw new UnsupportedOperationException();
        }

        public String toString() {
            return (new StringBuilder()).append(getKey()).append("=").append(getValue()).toString();
        }

        ac(Object obj, Object obj1) {
            c = LocalCache.this;
            super();
            a = obj;
            b = obj1;
        }
    }

    static abstract class b
        implements j {

        public r a() {
            throw new UnsupportedOperationException();
        }

        public void a(long l1) {
            throw new UnsupportedOperationException();
        }

        public void a(j j1) {
            throw new UnsupportedOperationException();
        }

        public void a(r r1) {
            throw new UnsupportedOperationException();
        }

        public j b() {
            throw new UnsupportedOperationException();
        }

        public void b(long l1) {
            throw new UnsupportedOperationException();
        }

        public void b(j j1) {
            throw new UnsupportedOperationException();
        }

        public int c() {
            throw new UnsupportedOperationException();
        }

        public void c(j j1) {
            throw new UnsupportedOperationException();
        }

        public Object d() {
            throw new UnsupportedOperationException();
        }

        public void d(j j1) {
            throw new UnsupportedOperationException();
        }

        public long e() {
            throw new UnsupportedOperationException();
        }

        public j f() {
            throw new UnsupportedOperationException();
        }

        public j g() {
            throw new UnsupportedOperationException();
        }

        public long h() {
            throw new UnsupportedOperationException();
        }

        public j i() {
            throw new UnsupportedOperationException();
        }

        public j j() {
            throw new UnsupportedOperationException();
        }

        b() {
        }
    }

    static final class c extends AbstractQueue {

        final j a = new _cls1(this);

        public j a() {
            j j2 = a.f();
            j j1 = j2;
            if (j2 == a)
                j1 = null;
            return j1;
        }

        public boolean a(j j1) {
            com.google.common.cache.LocalCache.a(j1.g(), j1.f());
            com.google.common.cache.LocalCache.a(a.g(), j1);
            com.google.common.cache.LocalCache.a(j1, a);
            return true;
        }

        public j b() {
            j j1 = a.f();
            if (j1 == a)
                j1 = null;
            else
                remove(j1);
            return j1;
        }

        public void clear() {
            j j2;
            for (j j1 = a.f(); j1 != a; j1 = j2) {
                j2 = j1.f();
                LocalCache.b(j1);
            }

            a.a(a);
            a.b(a);
        }

        public boolean contains(Object obj) {
            boolean flag;
            if (((j)obj).f() != com.google.common.cache.NullEntry.a)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public boolean isEmpty() {
            boolean flag;
            if (a.f() == a)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public Iterator iterator() {
            return new com.google.common.collect.e(this, a()) {

                final c a;

                protected j a(j j1) {
                    j j2 = j1.f();
                    j1 = j2;
                    if (j2 == a.a)
                        j1 = null;
                    return j1;
                }

                protected volatile Object a(Object obj) {
                    return a((j)obj);
                }

             {
                a = c1;
                super(j1);
            }
            }
;
        }

        public boolean offer(Object obj) {
            return a((j)obj);
        }

        public Object peek() {
            return a();
        }

        public Object poll() {
            return b();
        }

        public boolean remove(Object obj) {
            obj = (j)obj;
            j j2 = ((j) (obj)).g();
            j j1 = ((j) (obj)).f();
            com.google.common.cache.LocalCache.a(j2, j1);
            LocalCache.b(((j) (obj)));
            boolean flag;
            if (j1 != com.google.common.cache.NullEntry.a)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public int size() {
            int i1 = 0;
            for (j j1 = a.f(); j1 != a; j1 = j1.f())
                i1++;

            return i1;
        }

        c() {
        }
    }

    final class d extends f {

        final LocalCache a;

        public java.util.Map.Entry a() {
            return e();
        }

        public Object next() {
            return a();
        }

        d() {
            a = LocalCache.this;
            super();
        }
    }

    final class e extends a {

        final LocalCache c;

        public boolean contains(Object obj) {
            boolean flag1 = false;
            if (obj instanceof java.util.Map.Entry) goto _L2; else goto _L1
_L1:
            boolean flag = flag1;
_L4:
            return flag;
_L2:
            obj = (java.util.Map.Entry)obj;
            Object obj1 = ((java.util.Map.Entry) (obj)).getKey();
            flag = flag1;
            if (obj1 != null) {
                obj1 = c.get(obj1);
                flag = flag1;
                if (obj1 != null) {
                    flag = flag1;
                    if (c.g.a(((java.util.Map.Entry) (obj)).getValue(), obj1))
                        flag = true;
                }
            }
            if (true) goto _L4; else goto _L3
_L3:
        }

        public Iterator iterator() {
            return c. new d();
        }

        public boolean remove(Object obj) {
            boolean flag1 = false;
            if (obj instanceof java.util.Map.Entry) goto _L2; else goto _L1
_L1:
            boolean flag = flag1;
_L4:
            return flag;
_L2:
            java.util.Map.Entry entry = (java.util.Map.Entry)obj;
            obj = entry.getKey();
            flag = flag1;
            if (obj != null) {
                flag = flag1;
                if (c.remove(obj, entry.getValue()))
                    flag = true;
            }
            if (true) goto _L4; else goto _L3
_L3:
        }

        e(ConcurrentMap concurrentmap) {
            c = LocalCache.this;
            super(concurrentmap);
        }
    }

    abstract class f
        implements Iterator {

        int b;
        int c;
        Segment d;
        AtomicReferenceArray e;
        j f;
        ac g;
        ac h;
        final LocalCache i;

        boolean a(j j1) {
            Object obj;
            long l1 = i.q.a();
            obj = j1.d();
            j1 = ((j) (i.a(j1, l1)));
            if (j1 == null) goto _L2; else goto _L1
_L1:
            ac ac1 = JVM INSTR new #65  <Class LocalCache$ac>;
            ac1.i. ac(obj, j1);
            g = ac1;
            boolean flag;
            flag = true;
            d.l();
_L4:
            return flag;
_L2:
            flag = false;
            d.l();
            if (true) goto _L4; else goto _L3
_L3:
            j1;
            d.l();
            throw j1;
        }

        final void b() {
            g = null;
            break MISSING_BLOCK_LABEL_5;
            if (!c() && !d())
label0:
                do {
                    do {
                        if (b < 0)
                            break label0;
                        Segment asegment[] = i.d;
                        int i1 = b;
                        b = i1 - 1;
                        d = asegment[i1];
                    } while (d.b == 0);
                    e = d.f;
                    c = e.length() - 1;
                } while (!d());
            return;
        }

        boolean c() {
            if (f == null)
                break MISSING_BLOCK_LABEL_58;
            f = f.b();
_L3:
            if (f == null)
                break MISSING_BLOCK_LABEL_58;
            if (!a(f)) goto _L2; else goto _L1
_L1:
            boolean flag = true;
_L4:
            return flag;
_L2:
            f = f.b();
              goto _L3
            flag = false;
              goto _L4
        }

        boolean d() {
_L4:
            if (c < 0) goto _L2; else goto _L1
_L1:
            Object obj;
            obj = e;
            int i1 = c;
            c = i1 - 1;
            obj = (j)((AtomicReferenceArray) (obj)).get(i1);
            f = ((j) (obj));
            if (obj == null || !a(f) && !c()) goto _L4; else goto _L3
_L3:
            boolean flag = true;
_L6:
            return flag;
_L2:
            flag = false;
            if (true) goto _L6; else goto _L5
_L5:
        }

        ac e() {
            if (g == null) {
                throw new NoSuchElementException();
            } else {
                h = g;
                b();
                return h;
            }
        }

        public boolean hasNext() {
            boolean flag;
            if (g != null)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public void remove() {
            boolean flag;
            if (h != null)
                flag = true;
            else
                flag = false;
            com.google.common.base.i.b(flag);
            i.remove(h.getKey());
            h = null;
        }

        f() {
            i = LocalCache.this;
            super();
            b = LocalCache.this.d.length - 1;
            c = -1;
            b();
        }
    }

    final class g extends f {

        final LocalCache a;

        public Object next() {
            return e().getKey();
        }

        g() {
            a = LocalCache.this;
            super();
        }
    }

    final class h extends a {

        final LocalCache c;

        public boolean contains(Object obj) {
            return a.containsKey(obj);
        }

        public Iterator iterator() {
            return c. new g();
        }

        public boolean remove(Object obj) {
            boolean flag;
            if (a.remove(obj) != null)
                flag = true;
            else
                flag = false;
            return flag;
        }

        h(ConcurrentMap concurrentmap) {
            c = LocalCache.this;
            super(concurrentmap);
        }
    }

    static class i
        implements r {

        volatile r a;
        final com.google.common.util.concurrent.g b;
        final com.google.common.base.l c;

        private com.google.common.util.concurrent.e b(Throwable throwable) {
            return com.google.common.util.concurrent.c.a(throwable);
        }

        public int a() {
            return a.a();
        }

        public r a(ReferenceQueue referencequeue, Object obj, j j1) {
            return this;
        }

        public com.google.common.util.concurrent.e a(Object obj, CacheLoader cacheloader) {
            Object obj1;
            c.b();
            obj1 = a.get();
            if (obj1 != null) goto _L2; else goto _L1
_L1:
            obj = cacheloader.a(obj);
            if (!b(obj)) goto _L4; else goto _L3
_L3:
            obj = b;
_L6:
            return ((com.google.common.util.concurrent.e) (obj));
_L4:
            try {
                obj = com.google.common.util.concurrent.c.a(obj);
            }
            catch (Throwable throwable) {
                if (a(throwable))
                    cacheloader = b;
                else
                    cacheloader = b(throwable);
                obj = cacheloader;
                if (throwable instanceof InterruptedException) {
                    Thread.currentThread().interrupt();
                    obj = cacheloader;
                }
            }
            continue; /* Loop/switch isn't completed */
_L2:
            obj = cacheloader.a(obj, obj1);
            if (obj != null)
                break MISSING_BLOCK_LABEL_70;
            obj = com.google.common.util.concurrent.c.a(null);
            continue; /* Loop/switch isn't completed */
            cacheloader = JVM INSTR new #12  <Class LocalCache$i$1>;
            cacheloader._cls1(this);
            obj = com.google.common.util.concurrent.c.a(((com.google.common.util.concurrent.e) (obj)), cacheloader);
            if (true) goto _L6; else goto _L5
_L5:
        }

        public void a(Object obj) {
            if (obj != null)
                b(obj);
            else
                a = LocalCache.o();
        }

        public boolean a(Throwable throwable) {
            return b.a(throwable);
        }

        public j b() {
            return null;
        }

        public boolean b(Object obj) {
            return b.a(obj);
        }

        public boolean c() {
            return true;
        }

        public boolean d() {
            return a.d();
        }

        public Object e() {
            return com.google.common.util.concurrent.h.a(b);
        }

        public long f() {
            return c.a(TimeUnit.NANOSECONDS);
        }

        public r g() {
            return a;
        }

        public Object get() {
            return a.get();
        }

        public i() {
            this(LocalCache.o());
        }

        public i(r r1) {
            b = com.google.common.util.concurrent.g.e();
            c = com.google.common.base.l.a();
            a = r1;
        }
    }

    static interface j {

        public abstract r a();

        public abstract void a(long l1);

        public abstract void a(j j1);

        public abstract void a(r r1);

        public abstract j b();

        public abstract void b(long l1);

        public abstract void b(j j1);

        public abstract int c();

        public abstract void c(j j1);

        public abstract Object d();

        public abstract void d(j j1);

        public abstract long e();

        public abstract j f();

        public abstract j g();

        public abstract long h();

        public abstract j i();

        public abstract j j();
    }

    static class k extends SoftReference
        implements r {

        final j a;

        public int a() {
            return 1;
        }

        public r a(ReferenceQueue referencequeue, Object obj, j j1) {
            return new k(referencequeue, obj, j1);
        }

        public void a(Object obj) {
        }

        public j b() {
            return a;
        }

        public boolean c() {
            return false;
        }

        public boolean d() {
            return true;
        }

        public Object e() {
            return get();
        }

        k(ReferenceQueue referencequeue, Object obj, j j1) {
            super(obj, referencequeue);
            a = j1;
        }
    }

    static final class l extends n {

        volatile long a;
        j b;
        j c;

        public void a(long l1) {
            a = l1;
        }

        public void a(j j1) {
            b = j1;
        }

        public void b(j j1) {
            c = j1;
        }

        public long e() {
            return a;
        }

        public j f() {
            return b;
        }

        public j g() {
            return c;
        }

        l(Object obj, int i1, j j1) {
            super(obj, i1, j1);
            a = 0xffffffffL;
            b = com.google.common.cache.LocalCache.p();
            c = com.google.common.cache.LocalCache.p();
        }
    }

    static final class m extends n {

        volatile long a;
        j b;
        j c;
        volatile long d;
        j e;
        j f;

        public void a(long l1) {
            a = l1;
        }

        public void a(j j1) {
            b = j1;
        }

        public void b(long l1) {
            d = l1;
        }

        public void b(j j1) {
            c = j1;
        }

        public void c(j j1) {
            e = j1;
        }

        public void d(j j1) {
            f = j1;
        }

        public long e() {
            return a;
        }

        public j f() {
            return b;
        }

        public j g() {
            return c;
        }

        public long h() {
            return d;
        }

        public j i() {
            return e;
        }

        public j j() {
            return f;
        }

        m(Object obj, int i1, j j1) {
            super(obj, i1, j1);
            a = 0xffffffffL;
            b = com.google.common.cache.LocalCache.p();
            c = com.google.common.cache.LocalCache.p();
            d = 0xffffffffL;
            e = com.google.common.cache.LocalCache.p();
            f = com.google.common.cache.LocalCache.p();
        }
    }

    static class n extends b {

        final Object g;
        final int h;
        final j i;
        volatile r j;

        public r a() {
            return j;
        }

        public void a(r r1) {
            j = r1;
        }

        public j b() {
            return i;
        }

        public int c() {
            return h;
        }

        public Object d() {
            return g;
        }

        n(Object obj, int i1, j j1) {
            j = LocalCache.o();
            g = obj;
            h = i1;
            i = j1;
        }
    }

    static class o
        implements r {

        final Object a;

        public int a() {
            return 1;
        }

        public r a(ReferenceQueue referencequeue, Object obj, j j1) {
            return this;
        }

        public void a(Object obj) {
        }

        public j b() {
            return null;
        }

        public boolean c() {
            return false;
        }

        public boolean d() {
            return true;
        }

        public Object e() {
            return get();
        }

        public Object get() {
            return a;
        }

        o(Object obj) {
            a = obj;
        }
    }

    static final class p extends n {

        volatile long a;
        j b;
        j c;

        public void b(long l1) {
            a = l1;
        }

        public void c(j j1) {
            b = j1;
        }

        public void d(j j1) {
            c = j1;
        }

        public long h() {
            return a;
        }

        public j i() {
            return b;
        }

        public j j() {
            return c;
        }

        p(Object obj, int i1, j j1) {
            super(obj, i1, j1);
            a = 0xffffffffL;
            b = com.google.common.cache.LocalCache.p();
            c = com.google.common.cache.LocalCache.p();
        }
    }

    final class q extends f {

        final LocalCache a;

        public Object next() {
            return e().getValue();
        }

        q() {
            a = LocalCache.this;
            super();
        }
    }

    static interface r {

        public abstract int a();

        public abstract r a(ReferenceQueue referencequeue, Object obj, j j1);

        public abstract void a(Object obj);

        public abstract j b();

        public abstract boolean c();

        public abstract boolean d();

        public abstract Object e();

        public abstract Object get();
    }

    final class s extends AbstractCollection {

        final LocalCache a;
        private final ConcurrentMap b;

        public void clear() {
            b.clear();
        }

        public boolean contains(Object obj) {
            return b.containsValue(obj);
        }

        public boolean isEmpty() {
            return b.isEmpty();
        }

        public Iterator iterator() {
            return a. new q();
        }

        public int size() {
            return b.size();
        }

        public Object[] toArray() {
            return com.google.common.cache.LocalCache.a(this).toArray();
        }

        public Object[] toArray(Object aobj[]) {
            return com.google.common.cache.LocalCache.a(this).toArray(aobj);
        }

        s(ConcurrentMap concurrentmap) {
            a = LocalCache.this;
            super();
            b = concurrentmap;
        }
    }

    static final class t extends v {

        volatile long a;
        j b;
        j c;

        public void a(long l1) {
            a = l1;
        }

        public void a(j j1) {
            b = j1;
        }

        public void b(j j1) {
            c = j1;
        }

        public long e() {
            return a;
        }

        public j f() {
            return b;
        }

        public j g() {
            return c;
        }

        t(ReferenceQueue referencequeue, Object obj, int i1, j j1) {
            super(referencequeue, obj, i1, j1);
            a = 0xffffffffL;
            b = com.google.common.cache.LocalCache.p();
            c = com.google.common.cache.LocalCache.p();
        }
    }

    static final class u extends v {

        volatile long a;
        j b;
        j c;
        volatile long d;
        j e;
        j f;

        public void a(long l1) {
            a = l1;
        }

        public void a(j j1) {
            b = j1;
        }

        public void b(long l1) {
            d = l1;
        }

        public void b(j j1) {
            c = j1;
        }

        public void c(j j1) {
            e = j1;
        }

        public void d(j j1) {
            f = j1;
        }

        public long e() {
            return a;
        }

        public j f() {
            return b;
        }

        public j g() {
            return c;
        }

        public long h() {
            return d;
        }

        public j i() {
            return e;
        }

        public j j() {
            return f;
        }

        u(ReferenceQueue referencequeue, Object obj, int i1, j j1) {
            super(referencequeue, obj, i1, j1);
            a = 0xffffffffL;
            b = com.google.common.cache.LocalCache.p();
            c = com.google.common.cache.LocalCache.p();
            d = 0xffffffffL;
            e = com.google.common.cache.LocalCache.p();
            f = com.google.common.cache.LocalCache.p();
        }
    }

    static class v extends WeakReference
        implements j {

        final int g;
        final j h;
        volatile r i;

        public r a() {
            return i;
        }

        public void a(long l1) {
            throw new UnsupportedOperationException();
        }

        public void a(j j1) {
            throw new UnsupportedOperationException();
        }

        public void a(r r1) {
            i = r1;
        }

        public j b() {
            return h;
        }

        public void b(long l1) {
            throw new UnsupportedOperationException();
        }

        public void b(j j1) {
            throw new UnsupportedOperationException();
        }

        public int c() {
            return g;
        }

        public void c(j j1) {
            throw new UnsupportedOperationException();
        }

        public Object d() {
            return get();
        }

        public void d(j j1) {
            throw new UnsupportedOperationException();
        }

        public long e() {
            throw new UnsupportedOperationException();
        }

        public j f() {
            throw new UnsupportedOperationException();
        }

        public j g() {
            throw new UnsupportedOperationException();
        }

        public long h() {
            throw new UnsupportedOperationException();
        }

        public j i() {
            throw new UnsupportedOperationException();
        }

        public j j() {
            throw new UnsupportedOperationException();
        }

        v(ReferenceQueue referencequeue, Object obj, int i1, j j1) {
            super(obj, referencequeue);
            i = LocalCache.o();
            g = i1;
            h = j1;
        }
    }

    static class w extends WeakReference
        implements r {

        final j a;

        public int a() {
            return 1;
        }

        public r a(ReferenceQueue referencequeue, Object obj, j j1) {
            return new w(referencequeue, obj, j1);
        }

        public void a(Object obj) {
        }

        public j b() {
            return a;
        }

        public boolean c() {
            return false;
        }

        public boolean d() {
            return true;
        }

        public Object e() {
            return get();
        }

        w(ReferenceQueue referencequeue, Object obj, j j1) {
            super(obj, referencequeue);
            a = j1;
        }
    }

    static final class x extends v {

        volatile long a;
        j b;
        j c;

        public void b(long l1) {
            a = l1;
        }

        public void c(j j1) {
            b = j1;
        }

        public void d(j j1) {
            c = j1;
        }

        public long h() {
            return a;
        }

        public j i() {
            return b;
        }

        public j j() {
            return c;
        }

        x(ReferenceQueue referencequeue, Object obj, int i1, j j1) {
            super(referencequeue, obj, i1, j1);
            a = 0xffffffffL;
            b = com.google.common.cache.LocalCache.p();
            c = com.google.common.cache.LocalCache.p();
        }
    }

    static final class y extends k {

        final int b;

        public int a() {
            return b;
        }

        public r a(ReferenceQueue referencequeue, Object obj, j j1) {
            return new y(referencequeue, obj, j1, b);
        }

        y(ReferenceQueue referencequeue, Object obj, j j1, int i1) {
            super(referencequeue, obj, j1);
            b = i1;
        }
    }

    static final class z extends o {

        final int b;

        public int a() {
            return b;
        }

        z(Object obj, int i1) {
            super(obj);
            b = i1;
        }
    }


    static final Logger a = Logger.getLogger(com/google/common/cache/LocalCache.getName());
    static final r u = new r() {

        public int a() {
            return 0;
        }

        public r a(ReferenceQueue referencequeue, Object obj, j j1) {
            return this;
        }

        public void a(Object obj) {
        }

        public j b() {
            return null;
        }

        public boolean c() {
            return false;
        }

        public boolean d() {
            return false;
        }

        public Object e() {
            return null;
        }

        public Object get() {
            return null;
        }

    }
;
    static final Queue v = new AbstractQueue() {

        public Iterator iterator() {
            return ImmutableSet.h().d_();
        }

        public boolean offer(Object obj) {
            return true;
        }

        public Object peek() {
            return null;
        }

        public Object poll() {
            return null;
        }

        public int size() {
            return 0;
        }

    }
;
    final int b;
    final int c;
    final Segment d[];
    final int e;
    final Equivalence f;
    final Equivalence g;
    final Strength h;
    final Strength i;
    final long j;
    final com.google.common.cache.g k;
    final long l;
    final long m;
    final long n;
    final Queue o;
    final com.google.common.cache.e p;
    final com.google.common.base.p q;
    final EntryFactory r;
    final a.b s;
    final CacheLoader t;
    Set w;
    Collection x;
    Set y;

    LocalCache(CacheBuilder cachebuilder, CacheLoader cacheloader) {
        boolean flag1 = false;
        boolean flag = false;
        super();
        e = Math.min(cachebuilder.e(), 0x10000);
        h = cachebuilder.h();
        i = cachebuilder.i();
        f = cachebuilder.b();
        g = cachebuilder.c();
        j = cachebuilder.f();
        k = cachebuilder.g();
        l = cachebuilder.k();
        m = cachebuilder.j();
        n = cachebuilder.l();
        p = cachebuilder.m();
        int i1;
        int k1;
        int l1;
        Object obj;
        if (p == com.google.common.cache.CacheBuilder.NullListener.a)
            obj = q();
        else
            obj = new ConcurrentLinkedQueue();
        o = ((Queue) (obj));
        q = cachebuilder.a(j());
        r = com.google.common.cache.EntryFactory.a(h, l(), k());
        s = (a.b)cachebuilder.n().get();
        t = cacheloader;
        i1 = Math.min(cachebuilder.d(), 0x40000000);
        k1 = i1;
        if (a()) {
            k1 = i1;
            if (!b())
                k1 = Math.min(i1, (int)j);
        }
        i1 = 1;
        l1 = 0;
        for (; i1 < e && (!a() || (long)(i1 * 20) <= j); i1 <<= 1)
            l1++;

        c = 32 - l1;
        b = i1 - 1;
        d = c(i1);
        l1 = k1 / i1;
        if (l1 * i1 < k1)
            l1++;
        for (k1 = 1; k1 < l1; k1 <<= 1);
        l1 = ((flag1) ? 1 : 0);
        if (a()) {
            long l2 = j / (long)i1;
            long l4 = j;
            long l3 = i1;
            l2++;
            for (int j1 = ((flag) ? 1 : 0); j1 < d.length; j1++) {
                if ((long)j1 == l4 % l3)
                    l2--;
                d[j1] = a(k1, l2, (a.b)cachebuilder.n().get());
            }

        } else {
            for (; l1 < d.length; l1++)
                d[l1] = a(k1, -1L, (a.b)cachebuilder.n().get());

        }
    }

    static int a(int i1) {
        i1 = (i1 << 15 ^ 0xffffcd7d) + i1;
        i1 ^= i1 >>> 10;
        i1 += i1 << 3;
        i1 ^= i1 >>> 6;
        i1 += (i1 << 2) + (i1 << 14);
        return i1 ^ i1 >>> 16;
    }

    static ArrayList a(Collection collection) {
        return b(collection);
    }

    static void a(j j1, j j2) {
        j1.a(j2);
        j2.b(j1);
    }

    private static ArrayList b(Collection collection) {
        ArrayList arraylist = new ArrayList(collection.size());
        com.google.common.collect.k.a(arraylist, collection.iterator());
        return arraylist;
    }

    static void b(j j1) {
        j j2 = p();
        j1.a(j2);
        j1.b(j2);
    }

    static void b(j j1, j j2) {
        j1.c(j2);
        j2.d(j1);
    }

    static void c(j j1) {
        j j2 = p();
        j1.c(j2);
        j1.d(j2);
    }

    static r o() {
        return u;
    }

    static j p() {
        return com.google.common.cache.NullEntry.a;
    }

    static Queue q() {
        return v;
    }

    int a(Object obj) {
        return a(f.a(obj));
    }

    Segment a(int i1, long l1, a.b b1) {
        return new Segment(this, i1, l1, b1);
    }

    Object a(j j1, long l1) {
        Object obj1 = null;
        if (j1.d() != null) goto _L2; else goto _L1
_L1:
        Object obj = obj1;
_L4:
        return obj;
_L2:
        Object obj2 = j1.a().get();
        obj = obj1;
        if (obj2 != null) {
            obj = obj1;
            if (!b(j1, l1))
                obj = obj2;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    Object a(Object obj, CacheLoader cacheloader) {
        int i1 = a(com.google.common.base.i.a(obj));
        return b(i1).a(obj, i1, cacheloader);
    }

    void a(j j1) {
        int i1 = j1.c();
        b(i1).a(j1, i1);
    }

    void a(r r1) {
        j j1 = r1.b();
        int i1 = j1.c();
        b(i1).a(j1.d(), i1, r1);
    }

    boolean a() {
        boolean flag;
        if (j >= 0L)
            flag = true;
        else
            flag = false;
        return flag;
    }

    Segment b(int i1) {
        return d[i1 >>> c & b];
    }

    public Object b(Object obj) {
        int i1 = a(com.google.common.base.i.a(obj));
        obj = b(i1).b(obj, i1);
        if (obj == null)
            s.b(1);
        else
            s.a(1);
        return obj;
    }

    boolean b() {
        boolean flag;
        if (k != com.google.common.cache.CacheBuilder.OneWeigher.a)
            flag = true;
        else
            flag = false;
        return flag;
    }

    boolean b(j j1, long l1) {
        boolean flag;
        flag = true;
        com.google.common.base.i.a(j1);
        break MISSING_BLOCK_LABEL_8;
        if ((!d() || l1 - j1.e() < l) && (!c() || l1 - j1.h() < m))
            flag = false;
        return flag;
    }

    boolean c() {
        boolean flag;
        if (m > 0L)
            flag = true;
        else
            flag = false;
        return flag;
    }

    final Segment[] c(int i1) {
        return new Segment[i1];
    }

    public void clear() {
        Segment asegment[] = d;
        int j1 = asegment.length;
        for (int i1 = 0; i1 < j1; i1++)
            asegment[i1].k();

    }

    public boolean containsKey(Object obj) {
        boolean flag;
        if (obj == null) {
            flag = false;
        } else {
            int i1 = a(obj);
            flag = b(i1).c(obj, i1);
        }
        return flag;
    }

    public boolean containsValue(Object obj) {
        if (obj != null) goto _L2; else goto _L1
_L1:
        boolean flag = false;
_L3:
        return flag;
_L2:
        int i1;
        long l3;
        long l4;
        Segment asegment[];
        l4 = q.a();
        asegment = d;
        i1 = 0;
        l3 = -1L;
_L7:
        int j1;
        int l1;
        long l2;
        if (i1 >= 3)
            break MISSING_BLOCK_LABEL_181;
        l1 = asegment.length;
        l2 = 0L;
        j1 = 0;
_L6:
        int k1;
        Segment segment;
        AtomicReferenceArray atomicreferencearray;
        if (j1 >= l1)
            break MISSING_BLOCK_LABEL_173;
        segment = asegment[j1];
        k1 = segment.b;
        atomicreferencearray = segment.f;
        k1 = 0;
_L5:
        j j2;
        if (k1 >= atomicreferencearray.length())
            break MISSING_BLOCK_LABEL_156;
        j2 = (j)atomicreferencearray.get(k1);
_L4:
label0:
        {
            if (j2 == null)
                break MISSING_BLOCK_LABEL_150;
            Object obj1 = segment.c(j2, l4);
            if (obj1 == null || !g.a(obj, obj1))
                break label0;
            flag = true;
        }
          goto _L3
        j2 = j2.b();
          goto _L4
        k1++;
          goto _L5
        l2 += segment.d;
        j1++;
          goto _L6
        if (l2 != l3)
            break MISSING_BLOCK_LABEL_187;
        flag = false;
          goto _L3
        i1++;
        l3 = l2;
          goto _L7
    }

    boolean d() {
        boolean flag;
        if (l > 0L)
            flag = true;
        else
            flag = false;
        return flag;
    }

    boolean e() {
        boolean flag;
        if (n > 0L)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public Set entrySet() {
        Object obj = y;
        if (obj == null) {
            obj = new e(this);
            y = ((Set) (obj));
        }
        return ((Set) (obj));
    }

    boolean f() {
        boolean flag;
        if (d() || a())
            flag = true;
        else
            flag = false;
        return flag;
    }

    boolean g() {
        return c();
    }

    public Object get(Object obj) {
        if (obj == null) {
            obj = null;
        } else {
            int i1 = a(obj);
            obj = b(i1).b(obj, i1);
        }
        return obj;
    }

    boolean h() {
        boolean flag;
        if (c() || e())
            flag = true;
        else
            flag = false;
        return flag;
    }

    boolean i() {
        return d();
    }

    public boolean isEmpty() {
        int i1;
        long l1;
        boolean flag1;
        Segment asegment[];
        flag1 = false;
        asegment = d;
        i1 = 0;
        l1 = 0L;
_L5:
        if (i1 >= asegment.length) goto _L2; else goto _L1
_L1:
        if (asegment[i1].b == 0) goto _L4; else goto _L3
_L3:
        boolean flag = flag1;
_L9:
        return flag;
_L4:
        l1 += asegment[i1].d;
        i1++;
          goto _L5
_L2:
        if (l1 == 0L) goto _L7; else goto _L6
_L6:
        i1 = 0;
_L10:
        if (i1 >= asegment.length)
            break MISSING_BLOCK_LABEL_100;
        flag = flag1;
        if (asegment[i1].b != 0) goto _L9; else goto _L8
_L8:
        l1 -= asegment[i1].d;
        i1++;
          goto _L10
        flag = flag1;
        if (l1 != 0L) goto _L9; else goto _L7
_L7:
        flag = true;
          goto _L9
    }

    boolean j() {
        boolean flag;
        if (h() || i())
            flag = true;
        else
            flag = false;
        return flag;
    }

    boolean k() {
        boolean flag;
        if (g() || h())
            flag = true;
        else
            flag = false;
        return flag;
    }

    public Set keySet() {
        Object obj = w;
        if (obj == null) {
            obj = new h(this);
            w = ((Set) (obj));
        }
        return ((Set) (obj));
    }

    boolean l() {
        boolean flag;
        if (f() || i())
            flag = true;
        else
            flag = false;
        return flag;
    }

    boolean m() {
        boolean flag;
        if (h != com.google.common.cache.Strength.a)
            flag = true;
        else
            flag = false;
        return flag;
    }

    boolean n() {
        boolean flag;
        if (i != com.google.common.cache.Strength.a)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public Object put(Object obj, Object obj1) {
        com.google.common.base.i.a(obj);
        com.google.common.base.i.a(obj1);
        int i1 = a(obj);
        return b(i1).a(obj, i1, obj1, false);
    }

    public void putAll(Map map) {
        for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext(); put(map.getKey(), map.getValue()))
            map = (java.util.Map.Entry)iterator.next();

    }

    public Object putIfAbsent(Object obj, Object obj1) {
        com.google.common.base.i.a(obj);
        com.google.common.base.i.a(obj1);
        int i1 = a(obj);
        return b(i1).a(obj, i1, obj1, true);
    }

    void r() {
        do {
            com.google.common.cache.f f1 = (com.google.common.cache.f)o.poll();
            if (f1 != null)
                try {
                    p.a(f1);
                }
                catch (Throwable throwable) {
                    a.log(Level.WARNING, "Exception thrown by removal listener", throwable);
                }
            else
                return;
        } while (true);
    }

    public Object remove(Object obj) {
        if (obj == null) {
            obj = null;
        } else {
            int i1 = a(obj);
            obj = b(i1).d(obj, i1);
        }
        return obj;
    }

    public boolean remove(Object obj, Object obj1) {
        boolean flag;
        if (obj == null || obj1 == null) {
            flag = false;
        } else {
            int i1 = a(obj);
            flag = b(i1).b(obj, i1, obj1);
        }
        return flag;
    }

    public Object replace(Object obj, Object obj1) {
        com.google.common.base.i.a(obj);
        com.google.common.base.i.a(obj1);
        int i1 = a(obj);
        return b(i1).a(obj, i1, obj1);
    }

    public boolean replace(Object obj, Object obj1, Object obj2) {
        com.google.common.base.i.a(obj);
        com.google.common.base.i.a(obj2);
        boolean flag;
        if (obj1 == null) {
            flag = false;
        } else {
            int i1 = a(obj);
            flag = b(i1).a(obj, i1, obj1, obj2);
        }
        return flag;
    }

    long s() {
        Segment asegment[] = d;
        long l1 = 0L;
        for (int i1 = 0; i1 < asegment.length; i1++)
            l1 += Math.max(0, asegment[i1].b);

        return l1;
    }

    public int size() {
        return com.google.common.b.a.a(s());
    }

    public Collection values() {
        Object obj = x;
        if (obj == null) {
            obj = new s(this);
            x = ((Collection) (obj));
        }
        return ((Collection) (obj));
    }


    // Unreferenced inner class com/google/common/cache/LocalCache$ab$1

/* anonymous class */
    class ab._cls1 extends b {

        j a;
        j b;
        final ab c;

        public void b(long l1) {
        }

        public void c(j j1) {
            a = j1;
        }

        public void d(j j1) {
            b = j1;
        }

        public long h() {
            return 0xffffffffL;
        }

        public j i() {
            return a;
        }

        public j j() {
            return b;
        }

             {
                c = ab1;
                super();
                a = this;
                b = this;
            }
    }


    // Unreferenced inner class com/google/common/cache/LocalCache$c$1

/* anonymous class */
    class c._cls1 extends b {

        j a;
        j b;
        final c c;

        public void a(long l1) {
        }

        public void a(j j1) {
            a = j1;
        }

        public void b(j j1) {
            b = j1;
        }

        public long e() {
            return 0xffffffffL;
        }

        public j f() {
            return a;
        }

        public j g() {
            return b;
        }

             {
                c = c1;
                super();
                a = this;
                b = this;
            }
    }


    // Unreferenced inner class com/google/common/cache/LocalCache$i$1

/* anonymous class */
    class i._cls1
        implements com.google.common.base.d {

        final i a;

        public Object a(Object obj) {
            a.b(obj);
            return obj;
        }

             {
                a = i1;
                super();
            }
    }

}
