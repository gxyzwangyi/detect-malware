// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.cache;

import com.google.common.base.*;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

// Referenced classes of package com.google.common.cache:
//            c, g, e, b, 
//            f

public final class CacheBuilder {
    static final class NullListener extends Enum
        implements e {

        public static final NullListener a;
        private static final NullListener b[];

        public static NullListener valueOf(String s1) {
            return (NullListener)Enum.valueOf(com/google/common/cache/CacheBuilder$NullListener, s1);
        }

        public static NullListener[] values() {
            return (NullListener[])b.clone();
        }

        public void a(com.google.common.cache.f f1) {
        }

        static  {
            a = new NullListener("INSTANCE", 0);
            b = (new NullListener[] {
                a
            });
        }

        private NullListener(String s1, int i1) {
            super(s1, i1);
        }
    }

    static final class OneWeigher extends Enum
        implements g {

        public static final OneWeigher a;
        private static final OneWeigher b[];

        public static OneWeigher valueOf(String s1) {
            return (OneWeigher)Enum.valueOf(com/google/common/cache/CacheBuilder$OneWeigher, s1);
        }

        public static OneWeigher[] values() {
            return (OneWeigher[])b.clone();
        }

        public int a(Object obj, Object obj1) {
            return 1;
        }

        static  {
            a = new OneWeigher("INSTANCE", 0);
            b = (new OneWeigher[] {
                a
            });
        }

        private OneWeigher(String s1, int i1) {
            super(s1, i1);
        }
    }


    static final n a = Suppliers.a(new a.b() {

        public void a() {
        }

        public void a(int i1) {
        }

        public void a(long l1) {
        }

        public void b(int i1) {
        }

        public void b(long l1) {
        }

    }
);
    static final c b = new c(0L, 0L, 0L, 0L, 0L, 0L);
    static final n c = new n() {

        public a.b a() {
            return new a.a();
        }

        public Object get() {
            return a();
        }

    }
;
    static final p d = new p() {

        public long a() {
            return 0L;
        }

    }
;
    private static final Logger u = Logger.getLogger(com/google/common/cache/CacheBuilder.getName());
    boolean e;
    int f;
    int g;
    long h;
    long i;
    g j;
    LocalCache.Strength k;
    LocalCache.Strength l;
    long m;
    long n;
    long o;
    Equivalence p;
    Equivalence q;
    e r;
    p s;
    n t;

    CacheBuilder() {
        e = true;
        f = -1;
        g = -1;
        h = -1L;
        i = -1L;
        m = -1L;
        n = -1L;
        o = -1L;
        t = a;
    }

    public static CacheBuilder a() {
        return new CacheBuilder();
    }

    private void p() {
        boolean flag;
        if (o == -1L)
            flag = true;
        else
            flag = false;
        com.google.common.base.i.b(flag, "refreshAfterWrite requires a LoadingCache");
    }

    private void q() {
        boolean flag;
        boolean flag2;
        flag2 = true;
        flag = true;
        if (j != null) goto _L2; else goto _L1
_L1:
        if (i != -1L)
            flag = false;
        com.google.common.base.i.b(flag, "maximumWeight requires weigher");
_L4:
        return;
_L2:
        if (e) {
            boolean flag1;
            if (i != -1L)
                flag1 = flag2;
            else
                flag1 = false;
            com.google.common.base.i.b(flag1, "weigher requires maximumWeight");
        } else
        if (i == -1L)
            u.log(Level.WARNING, "ignoring weigher specified without maximumWeight");
        if (true) goto _L4; else goto _L3
_L3:
    }

    p a(boolean flag) {
        p p1;
        if (s != null)
            p1 = s;
        else
        if (flag)
            p1 = com.google.common.base.p.b();
        else
            p1 = d;
        return p1;
    }

    public CacheBuilder a(int i1) {
        boolean flag1 = true;
        boolean flag;
        if (g == -1)
            flag = true;
        else
            flag = false;
        com.google.common.base.i.b(flag, "concurrency level was already set to %s", new Object[] {
            Integer.valueOf(g)
        });
        if (i1 > 0)
            flag = flag1;
        else
            flag = false;
        com.google.common.base.i.a(flag);
        g = i1;
        return this;
    }

    public CacheBuilder a(long l1, TimeUnit timeunit) {
        boolean flag;
        if (m == -1L)
            flag = true;
        else
            flag = false;
        com.google.common.base.i.b(flag, "expireAfterWrite was already set to %s ns", new Object[] {
            Long.valueOf(m)
        });
        if (l1 >= 0L)
            flag = true;
        else
            flag = false;
        com.google.common.base.i.a(flag, "duration cannot be negative: %s %s", new Object[] {
            Long.valueOf(l1), timeunit
        });
        m = timeunit.toNanos(l1);
        return this;
    }

    Equivalence b() {
        return (Equivalence)com.google.common.base.f.a(p, h().a());
    }

    public CacheBuilder b(long l1, TimeUnit timeunit) {
        boolean flag;
        if (n == -1L)
            flag = true;
        else
            flag = false;
        com.google.common.base.i.b(flag, "expireAfterAccess was already set to %s ns", new Object[] {
            Long.valueOf(n)
        });
        if (l1 >= 0L)
            flag = true;
        else
            flag = false;
        com.google.common.base.i.a(flag, "duration cannot be negative: %s %s", new Object[] {
            Long.valueOf(l1), timeunit
        });
        n = timeunit.toNanos(l1);
        return this;
    }

    Equivalence c() {
        return (Equivalence)com.google.common.base.f.a(q, i().a());
    }

    int d() {
        int i1;
        if (f == -1)
            i1 = 16;
        else
            i1 = f;
        return i1;
    }

    int e() {
        int i1;
        if (g == -1)
            i1 = 4;
        else
            i1 = g;
        return i1;
    }

    long f() {
        long l2 = 0L;
        long l1 = l2;
        if (m != 0L)
            if (n == 0L)
                l1 = l2;
            else
            if (j == null)
                l1 = h;
            else
                l1 = i;
        return l1;
    }

    g g() {
        return (g)com.google.common.base.f.a(j, com.google.common.cache.OneWeigher.a);
    }

    LocalCache.Strength h() {
        return (LocalCache.Strength)com.google.common.base.f.a(k, com.google.common.cache.LocalCache.Strength.a);
    }

    LocalCache.Strength i() {
        return (LocalCache.Strength)com.google.common.base.f.a(l, com.google.common.cache.LocalCache.Strength.a);
    }

    long j() {
        long l1;
        if (m == -1L)
            l1 = 0L;
        else
            l1 = m;
        return l1;
    }

    long k() {
        long l1;
        if (n == -1L)
            l1 = 0L;
        else
            l1 = n;
        return l1;
    }

    long l() {
        long l1;
        if (o == -1L)
            l1 = 0L;
        else
            l1 = o;
        return l1;
    }

    e m() {
        return (e)com.google.common.base.f.a(r, com.google.common.cache.NullListener.a);
    }

    n n() {
        return t;
    }

    public b o() {
        q();
        p();
        return new LocalCache.LocalManualCache(this);
    }

    public String toString() {
        com.google.common.base.f.a a1 = com.google.common.base.f.a(this);
        if (f != -1)
            a1.a("initialCapacity", f);
        if (g != -1)
            a1.a("concurrencyLevel", g);
        if (h != -1L)
            a1.a("maximumSize", h);
        if (i != -1L)
            a1.a("maximumWeight", i);
        if (m != -1L)
            a1.a("expireAfterWrite", (new StringBuilder()).append(m).append("ns").toString());
        if (n != -1L)
            a1.a("expireAfterAccess", (new StringBuilder()).append(n).append("ns").toString());
        if (k != null)
            a1.a("keyStrength", com.google.common.base.a.a(k.toString()));
        if (l != null)
            a1.a("valueStrength", com.google.common.base.a.a(l.toString()));
        if (p != null)
            a1.a("keyEquivalence");
        if (q != null)
            a1.a("valueEquivalence");
        if (r != null)
            a1.a("removalListener");
        return a1.toString();
    }

}
