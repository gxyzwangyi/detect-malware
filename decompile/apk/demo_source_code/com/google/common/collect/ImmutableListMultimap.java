// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import java.util.*;

// Referenced classes of package com.google.common.collect:
//            ImmutableMultimap, l, EmptyImmutableListMultimap, m, 
//            ImmutableList, ImmutableMap, ImmutableCollection

public class ImmutableListMultimap extends ImmutableMultimap
    implements l {
    public static final class a extends ImmutableMultimap.a {

        public a a(Object obj, Object obj1) {
            super.b(obj, obj1);
            return this;
        }

        public ImmutableListMultimap a() {
            return (ImmutableListMultimap)super.b();
        }

        public ImmutableMultimap.a b(Object obj, Object obj1) {
            return a(obj, obj1);
        }

        public ImmutableMultimap b() {
            return a();
        }

        public a() {
        }
    }


    ImmutableListMultimap(ImmutableMap immutablemap, int i) {
        super(immutablemap, i);
    }

    public static ImmutableListMultimap a() {
        return EmptyImmutableListMultimap.a;
    }

    public static ImmutableListMultimap a(m m1) {
        if (!m1.j()) goto _L2; else goto _L1
_L1:
        Object obj = a();
_L4:
        return ((ImmutableListMultimap) (obj));
_L2:
        if (m1 instanceof ImmutableListMultimap) {
            ImmutableListMultimap immutablelistmultimap = (ImmutableListMultimap)m1;
            obj = immutablelistmultimap;
            if (!immutablelistmultimap.m())
                continue; /* Loop/switch isn't completed */
        }
        obj = new ImmutableMap.a(m1.b().size());
        Iterator iterator = m1.b().entrySet().iterator();
        int i = 0;
        do {
            if (!iterator.hasNext())
                break;
            java.util.Map.Entry entry = (java.util.Map.Entry)iterator.next();
            m1 = ImmutableList.a((Collection)entry.getValue());
            if (!m1.isEmpty()) {
                ((ImmutableMap.a) (obj)).a(entry.getKey(), m1);
                i = m1.size() + i;
            }
        } while (true);
        obj = new ImmutableListMultimap(((ImmutableMap.a) (obj)).a(), i);
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static a c() {
        return new a();
    }

    public static ImmutableListMultimap d(Object obj, Object obj1) {
        a a1 = c();
        a1.a(obj, obj1);
        return a1.a();
    }

    public ImmutableList a(Object obj) {
        ImmutableList immutablelist = (ImmutableList)b.get(obj);
        obj = immutablelist;
        if (immutablelist == null)
            obj = ImmutableList.c();
        return ((ImmutableList) (obj));
    }

    public Collection b(Object obj) {
        return a(obj);
    }

    public ImmutableCollection c(Object obj) {
        return a(obj);
    }
}
