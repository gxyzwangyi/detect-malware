// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import com.google.common.b.a;
import com.google.common.base.g;
import com.google.common.base.i;
import java.io.Serializable;
import java.util.Collection;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Set;

// Referenced classes of package com.google.common.collect:
//            g, n, k, p, 
//            w

public final class Multisets {
    static class ImmutableEntry extends a
        implements Serializable {

        private final Object a;
        private final int b;

        public final Object a() {
            return a;
        }

        public final int b() {
            return b;
        }

        public ImmutableEntry c() {
            return null;
        }

        ImmutableEntry(Object obj, int j) {
            a = obj;
            b = j;
            com.google.common.collect.g.a(j, "count");
        }
    }

    static abstract class a
        implements n.a {

        public boolean equals(Object obj) {
            boolean flag1 = false;
            boolean flag = flag1;
            if (obj instanceof n.a) {
                obj = (n.a)obj;
                flag = flag1;
                if (b() == ((n.a) (obj)).b()) {
                    flag = flag1;
                    if (g.a(a(), ((n.a) (obj)).a()))
                        flag = true;
                }
            }
            return flag;
        }

        public int hashCode() {
            Object obj = a();
            int j;
            if (obj == null)
                j = 0;
            else
                j = obj.hashCode();
            return j ^ b();
        }

        public String toString() {
            String s = String.valueOf(a());
            int j = b();
            if (j != 1)
                s = (new StringBuilder()).append(s).append(" x ").append(j).toString();
            return s;
        }

        a() {
        }
    }

    static abstract class b extends t.a {

        abstract n a();

        public void clear() {
            a().clear();
        }

        public boolean contains(Object obj) {
            return a().contains(obj);
        }

        public boolean containsAll(Collection collection) {
            return a().containsAll(collection);
        }

        public boolean isEmpty() {
            return a().isEmpty();
        }

        public Iterator iterator() {
            return new w(this, a().a().iterator()) {

                final b a;

                Object a(n.a a1) {
                    return a1.a();
                }

                volatile Object a(Object obj) {
                    return a((n.a)obj);
                }

             {
                a = b1;
                super(iterator);
            }
            }
;
        }

        public boolean remove(Object obj) {
            boolean flag;
            if (a().b(obj, 0x7fffffff) > 0)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public int size() {
            return a().a().size();
        }

        b() {
        }
    }

    static abstract class c extends t.a {

        abstract n a();

        public void clear() {
            a().clear();
        }

        public boolean contains(Object obj) {
            boolean flag;
            boolean flag1;
            flag1 = false;
            flag = flag1;
            if (!(obj instanceof n.a)) goto _L2; else goto _L1
_L1:
            obj = (n.a)obj;
            if (((n.a) (obj)).b() > 0) goto _L4; else goto _L3
_L3:
            flag = flag1;
_L2:
            return flag;
_L4:
            flag = flag1;
            if (a().a(((n.a) (obj)).a()) == ((n.a) (obj)).b())
                flag = true;
            if (true) goto _L2; else goto _L5
_L5:
        }

        public boolean remove(Object obj) {
            boolean flag1 = false;
            boolean flag = flag1;
            if (obj instanceof n.a) {
                obj = (n.a)obj;
                Object obj1 = ((n.a) (obj)).a();
                int j = ((n.a) (obj)).b();
                flag = flag1;
                if (j != 0)
                    flag = a().a(obj1, j, 0);
            }
            return flag;
        }

        c() {
        }
    }

    static final class d
        implements Iterator {

        private final n a;
        private final Iterator b;
        private n.a c;
        private int d;
        private int e;
        private boolean f;

        public boolean hasNext() {
            boolean flag;
            if (d > 0 || b.hasNext())
                flag = true;
            else
                flag = false;
            return flag;
        }

        public Object next() {
            if (!hasNext())
                throw new NoSuchElementException();
            if (d == 0) {
                c = (n.a)b.next();
                int j = c.b();
                d = j;
                e = j;
            }
            d = d - 1;
            f = true;
            return c.a();
        }

        public void remove() {
            com.google.common.collect.g.a(f);
            if (e == 1)
                b.remove();
            else
                a.remove(c.a());
            e = e - 1;
            f = false;
        }

        d(n n1, Iterator iterator) {
            a = n1;
            b = iterator;
        }
    }


    private static final p a = new p() {

        public int a(n.a a1, n.a a2) {
            return com.google.common.b.a.a(a2.b(), a1.b());
        }

        public int compare(Object obj, Object obj1) {
            return a((n.a)obj, (n.a)obj1);
        }

    }
;

    static int a(n n1, Object obj, int j) {
        int l;
        com.google.common.collect.g.a(j, "count");
        l = n1.a(obj);
        j -= l;
        if (j <= 0) goto _L2; else goto _L1
_L1:
        n1.a(obj, j);
_L4:
        return l;
_L2:
        if (j < 0)
            n1.b(obj, -j);
        if (true) goto _L4; else goto _L3
_L3:
    }

    static int a(Iterable iterable) {
        int j;
        if (iterable instanceof n)
            j = ((n)iterable).d().size();
        else
            j = 11;
        return j;
    }

    static Iterator a(n n1) {
        return new d(n1, n1.a().iterator());
    }

    static boolean a(n n1, Object obj) {
        if (obj != n1) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        if (obj instanceof n) {
            obj = (n)obj;
            if (n1.size() != ((n) (obj)).size() || n1.a().size() != ((n) (obj)).a().size()) {
                flag = false;
                continue; /* Loop/switch isn't completed */
            }
            for (obj = ((n) (obj)).a().iterator(); ((Iterator) (obj)).hasNext();) {
                n.a a1 = (n.a)((Iterator) (obj)).next();
                if (n1.a(a1.a()) != a1.b()) {
                    flag = false;
                    continue; /* Loop/switch isn't completed */
                }
            }

            flag = true;
            continue; /* Loop/switch isn't completed */
        }
        flag = false;
        if (true) goto _L4; else goto _L3
_L3:
    }

    static boolean a(n n1, Object obj, int j, int l) {
        com.google.common.collect.g.a(j, "oldCount");
        com.google.common.collect.g.a(l, "newCount");
        boolean flag;
        if (n1.a(obj) == j) {
            n1.c(obj, l);
            flag = true;
        } else {
            flag = false;
        }
        return flag;
    }

    static boolean a(n n1, Collection collection) {
        boolean flag;
        if (collection.isEmpty()) {
            flag = false;
        } else {
            if (collection instanceof n) {
                n.a a1;
                for (collection = b(collection).a().iterator(); collection.hasNext(); n1.a(a1.a(), a1.b()))
                    a1 = (n.a)collection.next();

            } else {
                com.google.common.collect.k.a(n1, collection.iterator());
            }
            flag = true;
        }
        return flag;
    }

    static int b(n n1) {
        n1 = n1.a().iterator();
        long l;
        for (l = 0L; n1.hasNext(); l = (long)((n.a)n1.next()).b() + l);
        return com.google.common.b.a.a(l);
    }

    static n b(Iterable iterable) {
        return (n)iterable;
    }

    static boolean b(n n1, Collection collection) {
        Object obj = collection;
        if (collection instanceof n)
            obj = ((n)collection).d();
        return n1.d().removeAll(((Collection) (obj)));
    }

    static boolean c(n n1, Collection collection) {
        i.a(collection);
        Object obj = collection;
        if (collection instanceof n)
            obj = ((n)collection).d();
        return n1.d().retainAll(((Collection) (obj)));
    }

}
