// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import com.google.common.base.i;
import java.util.*;

// Referenced classes of package com.google.common.collect:
//            m, k, Multimaps, s, 
//            t

abstract class c
    implements m {
    private class a extends Multimaps.a {

        final c a;

        m a() {
            return a;
        }

        public Iterator iterator() {
            return a.h();
        }

        private a() {
            a = c.this;
            super();
        }

    }

    private class b extends a
        implements Set {

        final c b;

        public boolean equals(Object obj) {
            return t.a(this, obj);
        }

        public int hashCode() {
            return t.a(this);
        }

        private b() {
            b = c.this;
            super();
        }

    }


    private transient Collection a;
    private transient Set b;
    private transient Map c;

    c() {
    }

    public boolean a(Object obj, Iterable iterable) {
        boolean flag;
        flag = true;
        com.google.common.base.i.a(iterable);
        if (!(iterable instanceof Collection)) goto _L2; else goto _L1
_L1:
        iterable = (Collection)iterable;
        if (iterable.isEmpty() || !b(obj).addAll(iterable))
            flag = false;
_L4:
        return flag;
_L2:
        iterable = iterable.iterator();
        if (!iterable.hasNext() || !com.google.common.collect.k.a(b(obj), iterable))
            flag = false;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public boolean a(Object obj, Object obj1) {
        return b(obj).add(obj1);
    }

    public Map b() {
        Map map1 = c;
        Map map = map1;
        if (map1 == null) {
            map = i();
            c = map;
        }
        return map;
    }

    public boolean b(Object obj, Object obj1) {
        obj = (Collection)b().get(obj);
        boolean flag;
        if (obj != null && ((Collection) (obj)).contains(obj1))
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean c(Object obj, Object obj1) {
        obj = (Collection)b().get(obj);
        boolean flag;
        if (obj != null && ((Collection) (obj)).remove(obj1))
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean equals(Object obj) {
        return Multimaps.a(this, obj);
    }

    Set f() {
        return new Maps.d(b());
    }

    public Collection g() {
        Collection collection1 = a;
        Collection collection = collection1;
        if (collection1 == null) {
            collection = k();
            a = collection;
        }
        return collection;
    }

    abstract Iterator h();

    public int hashCode() {
        return b().hashCode();
    }

    abstract Map i();

    public boolean j() {
        boolean flag;
        if (d() == 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    Collection k() {
        Object obj;
        if (this instanceof s)
            obj = new b();
        else
            obj = new a();
        return ((Collection) (obj));
    }

    public Set l() {
        Set set1 = b;
        Set set = set1;
        if (set1 == null) {
            set = f();
            b = set;
        }
        return set;
    }

    public String toString() {
        return b().toString();
    }
}
