// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import com.google.common.b.a;
import com.google.common.base.g;
import com.google.common.base.i;
import java.util.*;

// Referenced classes of package com.google.common.collect:
//            ImmutableMultiset, ImmutableList, ImmutableSet, i

class RegularImmutableMultiset extends ImmutableMultiset {
    private final class ElementSet extends ImmutableSet.Indexed {

        final RegularImmutableMultiset a;

        Object a(int j) {
            return com.google.common.collect.RegularImmutableMultiset.a(a)[j].a();
        }

        public boolean contains(Object obj) {
            return a.contains(obj);
        }

        boolean e() {
            return true;
        }

        public int size() {
            return com.google.common.collect.RegularImmutableMultiset.a(a).length;
        }

        private ElementSet() {
            a = RegularImmutableMultiset.this;
            super();
        }

    }

    private static final class NonTerminalEntry extends Multisets.ImmutableEntry {

        private final Multisets.ImmutableEntry a;

        public Multisets.ImmutableEntry c() {
            return a;
        }

        NonTerminalEntry(Object obj, int j, Multisets.ImmutableEntry immutableentry) {
            super(obj, j);
            a = immutableentry;
        }
    }


    static final RegularImmutableMultiset a = new RegularImmutableMultiset(ImmutableList.c());
    private final transient Multisets.ImmutableEntry b[];
    private final transient Multisets.ImmutableEntry c[];
    private final transient int d;
    private final transient int e;
    private transient ImmutableSet f;

    RegularImmutableMultiset(Collection collection) {
        int j = collection.size();
        Multisets.ImmutableEntry aimmutableentry1[] = new Multisets.ImmutableEntry[j];
        if (j == 0) {
            b = aimmutableentry1;
            c = null;
            d = 0;
            e = 0;
            f = ImmutableSet.h();
        } else {
            int l = com.google.common.collect.i.a(j, 1.0D);
            Multisets.ImmutableEntry aimmutableentry[] = new Multisets.ImmutableEntry[l];
            Iterator iterator = collection.iterator();
            j = 0;
            long l1 = 0L;
            int k = 0;
            while (iterator.hasNext())  {
                n.a a1 = (n.a)iterator.next();
                collection = ((Collection) (i.a(a1.a())));
                int i1 = a1.b();
                int j1 = collection.hashCode();
                int k1 = com.google.common.collect.i.a(j1) & l - 1;
                Multisets.ImmutableEntry immutableentry = aimmutableentry[k1];
                if (immutableentry == null) {
                    boolean flag;
                    if ((a1 instanceof Multisets.ImmutableEntry) && !(a1 instanceof NonTerminalEntry))
                        flag = true;
                    else
                        flag = false;
                    if (flag)
                        collection = (Multisets.ImmutableEntry)a1;
                    else
                        collection = new Multisets.ImmutableEntry(collection, i1);
                } else {
                    collection = new NonTerminalEntry(collection, i1, immutableentry);
                }
                aimmutableentry1[j] = collection;
                aimmutableentry[k1] = collection;
                l1 = (long)i1 + l1;
                j++;
                k = (j1 ^ i1) + k;
            }
            b = aimmutableentry1;
            c = aimmutableentry;
            d = com.google.common.b.a.a(l1);
            e = k;
        }
    }

    static Multisets.ImmutableEntry[] a(RegularImmutableMultiset regularimmutablemultiset) {
        return regularimmutablemultiset.b;
    }

    public int a(Object obj) {
        int j;
        boolean flag;
        Multisets.ImmutableEntry aimmutableentry[];
        flag = false;
        aimmutableentry = c;
        j = ((flag) ? 1 : 0);
        if (obj == null) goto _L2; else goto _L1
_L1:
        if (aimmutableentry != null) goto _L4; else goto _L3
_L3:
        j = ((flag) ? 1 : 0);
_L2:
        return j;
_L4:
        Multisets.ImmutableEntry immutableentry = aimmutableentry[com.google.common.collect.i.a(obj) & aimmutableentry.length - 1];
        do {
            j = ((flag) ? 1 : 0);
            if (immutableentry != null) {
label0:
                {
                    if (!g.a(obj, immutableentry.a()))
                        break label0;
                    j = immutableentry.b();
                }
            }
            if (true)
                continue;
            immutableentry = immutableentry.c();
        } while (true);
        if (true) goto _L2; else goto _L5
_L5:
    }

    n.a a(int j) {
        return b[j];
    }

    public Set d() {
        return h();
    }

    boolean e() {
        return false;
    }

    public ImmutableSet h() {
        ImmutableSet immutableset = f;
        Object obj = immutableset;
        if (immutableset == null) {
            obj = new ElementSet();
            f = ((ImmutableSet) (obj));
        }
        return ((ImmutableSet) (obj));
    }

    public int hashCode() {
        return e;
    }

    public int size() {
        return d;
    }

}
