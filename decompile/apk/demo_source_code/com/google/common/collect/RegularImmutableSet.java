// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import java.util.Iterator;

// Referenced classes of package com.google.common.collect:
//            ImmutableSet, o, i, k, 
//            ImmutableList, RegularImmutableAsList, z

final class RegularImmutableSet extends ImmutableSet {

    static final RegularImmutableSet a;
    final transient Object b[];
    private final transient Object c[];
    private final transient int d;
    private final transient int e;

    RegularImmutableSet(Object aobj[], int j, Object aobj1[], int l) {
        c = aobj;
        b = aobj1;
        d = l;
        e = j;
    }

    int a(Object aobj[], int j) {
        System.arraycopy(((Object) (c)), 0, ((Object) (aobj)), j, c.length);
        return c.length + j;
    }

    boolean a_() {
        return true;
    }

    public boolean contains(Object obj) {
        Object aobj[] = b;
        if (obj != null && aobj != null) goto _L2; else goto _L1
_L1:
        boolean flag = false;
_L4:
        return flag;
_L2:
        int j = i.a(obj);
        do {
            j &= d;
            Object obj1 = aobj[j];
            if (obj1 == null) {
                flag = false;
            } else {
label0:
                {
                    if (!obj1.equals(obj))
                        break label0;
                    flag = true;
                }
            }
            if (true)
                continue;
            j++;
        } while (true);
        if (true) goto _L4; else goto _L3
_L3:
    }

    public z d_() {
        return k.a(c);
    }

    boolean e() {
        return false;
    }

    ImmutableList g() {
        Object obj;
        if (b == null)
            obj = ImmutableList.c();
        else
            obj = new RegularImmutableAsList(this, c);
        return ((ImmutableList) (obj));
    }

    public int hashCode() {
        return e;
    }

    public Iterator iterator() {
        return d_();
    }

    public int size() {
        return c.length;
    }

    static  {
        a = new RegularImmutableSet(o.a, 0, null, 0);
    }
}
