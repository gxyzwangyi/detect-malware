// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import com.google.common.base.i;
import java.util.*;

// Referenced classes of package com.google.common.collect:
//            Maps, n, k

public final class t {
    static abstract class a extends AbstractSet {

        public boolean removeAll(Collection collection) {
            return t.a(this, collection);
        }

        public boolean retainAll(Collection collection) {
            return super.retainAll((Collection)i.a(collection));
        }

        a() {
        }
    }


    static int a(Set set) {
        Iterator iterator = set.iterator();
        int j = 0;
        while (iterator.hasNext())  {
            set = ((Set) (iterator.next()));
            int l;
            if (set != null)
                l = set.hashCode();
            else
                l = 0;
            j = ~~(j + l);
        }
        return j;
    }

    public static HashSet a() {
        return new HashSet();
    }

    public static HashSet a(int j) {
        return new HashSet(Maps.b(j));
    }

    static boolean a(Set set, Object obj) {
        boolean flag1;
        boolean flag2;
        flag1 = true;
        flag2 = false;
        if (set != obj) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        flag = flag2;
        if (!(obj instanceof Set))
            continue; /* Loop/switch isn't completed */
        obj = (Set)obj;
        if (set.size() != ((Set) (obj)).size())
            break MISSING_BLOCK_LABEL_61;
        flag = set.containsAll(((Collection) (obj)));
        if (flag) {
            flag = flag1;
            continue; /* Loop/switch isn't completed */
        }
        flag = false;
        continue; /* Loop/switch isn't completed */
        set;
        flag = flag2;
        continue; /* Loop/switch isn't completed */
        set;
        flag = flag2;
        if (true) goto _L4; else goto _L3
_L3:
    }

    static boolean a(Set set, Collection collection) {
        i.a(collection);
        Object obj = collection;
        if (collection instanceof n)
            obj = ((n)collection).d();
        boolean flag;
        if ((obj instanceof Set) && ((Collection) (obj)).size() > set.size())
            flag = k.a(set.iterator(), ((Collection) (obj)));
        else
            flag = a(set, ((Collection) (obj)).iterator());
        return flag;
    }

    static boolean a(Set set, Iterator iterator) {
        boolean flag;
        for (flag = false; iterator.hasNext(); flag |= set.remove(iterator.next()));
        return flag;
    }
}
