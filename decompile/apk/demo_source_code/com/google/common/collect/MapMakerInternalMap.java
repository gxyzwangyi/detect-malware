// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import com.google.common.b.a;
import com.google.common.base.Equivalence;
import com.google.common.base.i;
import com.google.common.base.p;
import java.io.Serializable;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.SoftReference;
import java.lang.ref.WeakReference;
import java.util.AbstractCollection;
import java.util.AbstractMap;
import java.util.AbstractQueue;
import java.util.AbstractSet;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Queue;
import java.util.Set;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.locks.ReentrantLock;
import java.util.logging.Level;
import java.util.logging.Logger;

// Referenced classes of package com.google.common.collect:
//            MapMaker, k, e, g, 
//            b

class MapMakerInternalMap extends AbstractMap
    implements Serializable, ConcurrentMap {
    static abstract class EntryFactory extends Enum {

        public static final EntryFactory a;
        public static final EntryFactory b;
        public static final EntryFactory c;
        public static final EntryFactory d;
        public static final EntryFactory e;
        public static final EntryFactory f;
        public static final EntryFactory g;
        public static final EntryFactory h;
        static final EntryFactory i[][];
        private static final EntryFactory j[];

        static EntryFactory a(Strength strength, boolean flag, boolean flag1) {
            byte byte0 = 0;
            boolean flag2;
            if (flag)
                flag2 = true;
            else
                flag2 = false;
            if (flag1)
                byte0 = 2;
            return i[strength.ordinal()][byte0 | flag2];
        }

        public static EntryFactory valueOf(String s1) {
            return (EntryFactory)Enum.valueOf(com/google/common/collect/MapMakerInternalMap$EntryFactory, s1);
        }

        public static EntryFactory[] values() {
            return (EntryFactory[])j.clone();
        }

        i a(Segment segment, i i1, i j1) {
            return a(segment, i1.d(), i1.c(), j1);
        }

        abstract i a(Segment segment, Object obj, int i1, i j1);

        void a(i i1, i j1) {
            j1.a(i1.e());
            com.google.common.collect.MapMakerInternalMap.a(i1.g(), j1);
            com.google.common.collect.MapMakerInternalMap.a(j1, i1.f());
            MapMakerInternalMap.d(i1);
        }

        void b(i i1, i j1) {
            MapMakerInternalMap.b(i1.i(), j1);
            MapMakerInternalMap.b(j1, i1.h());
            MapMakerInternalMap.e(i1);
        }

        static  {
            a = new EntryFactory("STRONG", 0) {

                i a(Segment segment, Object obj, int i1, i j1) {
                    return new l(obj, i1, j1);
                }

            }
;
            b = new EntryFactory("STRONG_EXPIRABLE", 1) {

                i a(Segment segment, i i1, i j1) {
                    segment = super.a(segment, i1, j1);
                    a(i1, ((i) (segment)));
                    return segment;
                }

                i a(Segment segment, Object obj, int i1, i j1) {
                    return new n(obj, i1, j1);
                }

            }
;
            c = new EntryFactory("STRONG_EVICTABLE", 2) {

                i a(Segment segment, i i1, i j1) {
                    segment = super.a(segment, i1, j1);
                    b(i1, segment);
                    return segment;
                }

                i a(Segment segment, Object obj, int i1, i j1) {
                    return new m(obj, i1, j1);
                }

            }
;
            d = new EntryFactory("STRONG_EXPIRABLE_EVICTABLE", 3) {

                i a(Segment segment, i i1, i j1) {
                    segment = super.a(segment, i1, j1);
                    a(i1, ((i) (segment)));
                    b(i1, segment);
                    return segment;
                }

                i a(Segment segment, Object obj, int i1, i j1) {
                    return new o(obj, i1, j1);
                }

            }
;
            e = new EntryFactory("WEAK", 4) {

                i a(Segment segment, Object obj, int i1, i j1) {
                    return new t(segment.g, obj, i1, j1);
                }

            }
;
            f = new EntryFactory("WEAK_EXPIRABLE", 5) {

                i a(Segment segment, i i1, i j1) {
                    segment = super.a(segment, i1, j1);
                    a(i1, ((i) (segment)));
                    return segment;
                }

                i a(Segment segment, Object obj, int i1, i j1) {
                    return new v(segment.g, obj, i1, j1);
                }

            }
;
            g = new EntryFactory("WEAK_EVICTABLE", 6) {

                i a(Segment segment, i i1, i j1) {
                    segment = super.a(segment, i1, j1);
                    b(i1, segment);
                    return segment;
                }

                i a(Segment segment, Object obj, int i1, i j1) {
                    return new u(segment.g, obj, i1, j1);
                }

            }
;
            h = new EntryFactory("WEAK_EXPIRABLE_EVICTABLE", 7) {

                i a(Segment segment, i i1, i j1) {
                    segment = super.a(segment, i1, j1);
                    a(i1, ((i) (segment)));
                    b(i1, segment);
                    return segment;
                }

                i a(Segment segment, Object obj, int i1, i j1) {
                    return new w(segment.g, obj, i1, j1);
                }

            }
;
            j = (new EntryFactory[] {
                a, b, c, d, e, f, g, h
            });
            i = (new EntryFactory[][] {
                new EntryFactory[] {
                    a, b, c, d
                }, new EntryFactory[0], new EntryFactory[] {
                    e, f, g, h
                }
            });
        }

        private EntryFactory(String s1, int i1) {
            super(s1, i1);
        }

    }

    private static final class NullEntry extends Enum
        implements i {

        public static final NullEntry a;
        private static final NullEntry b[];

        public static NullEntry valueOf(String s1) {
            return (NullEntry)Enum.valueOf(com/google/common/collect/MapMakerInternalMap$NullEntry, s1);
        }

        public static NullEntry[] values() {
            return (NullEntry[])b.clone();
        }

        public r a() {
            return null;
        }

        public void a(long l1) {
        }

        public void a(i i1) {
        }

        public void a(r r1) {
        }

        public i b() {
            return null;
        }

        public void b(i i1) {
        }

        public int c() {
            return 0;
        }

        public void c(i i1) {
        }

        public Object d() {
            return null;
        }

        public void d(i i1) {
        }

        public long e() {
            return 0L;
        }

        public i f() {
            return this;
        }

        public i g() {
            return this;
        }

        public i h() {
            return this;
        }

        public i i() {
            return this;
        }

        static  {
            a = new NullEntry("INSTANCE", 0);
            b = (new NullEntry[] {
                a
            });
        }

        private NullEntry(String s1, int i1) {
            super(s1, i1);
        }
    }

    static class Segment extends ReentrantLock {

        final MapMakerInternalMap a;
        volatile int b;
        int c;
        int d;
        volatile AtomicReferenceArray e;
        final int f;
        final ReferenceQueue g;
        final ReferenceQueue h;
        final Queue i;
        final AtomicInteger j = new AtomicInteger();
        final Queue k;
        final Queue l;

        i a(i i1, i j1) {
            i k1 = null;
            if (i1.d() != null) goto _L2; else goto _L1
_L1:
            return k1;
_L2:
            r r1 = i1.a();
            Object obj = r1.get();
            if (obj != null || r1.b()) {
                k1 = a.n.a(this, i1, j1);
                k1.a(r1.a(h, obj, k1));
            }
            if (true) goto _L1; else goto _L3
_L3:
        }

        i a(Object obj, int i1) {
            if (b == 0) goto _L2; else goto _L1
_L1:
            i j1 = b(i1);
_L4:
            if (j1 == null) goto _L2; else goto _L3
_L3:
            Object obj1;
            if (j1.c() == i1) {
                obj1 = j1.d();
                if (obj1 != null)
                    continue; /* Loop/switch isn't completed */
                a();
            }
_L6:
            j1 = j1.b();
              goto _L4
            if (!a.e.a(obj, obj1)) goto _L6; else goto _L5
_L5:
            return j1;
_L2:
            j1 = null;
            if (true) goto _L5; else goto _L7
_L7:
        }

        i a(Object obj, int i1, i j1) {
            return a.n.a(this, obj, i1, j1);
        }

        Object a(Object obj, int i1, Object obj1) {
            lock();
            int j1;
            i i2;
            AtomicReferenceArray atomicreferencearray;
            o();
            atomicreferencearray = e;
            j1 = i1 & atomicreferencearray.length() - 1;
            i2 = (i)atomicreferencearray.get(j1);
            i l1 = i2;
_L11:
            if (l1 == null) goto _L2; else goto _L1
_L1:
            Object obj3 = l1.d();
            if (l1.c() != i1 || obj3 == null) goto _L4; else goto _L3
_L3:
            if (!a.e.a(obj, obj3)) goto _L4; else goto _L5
_L5:
            Object obj2;
            r r1;
            r1 = l1.a();
            obj2 = r1.get();
            if (obj2 != null) goto _L7; else goto _L6
_L6:
            if (a(r1)) {
                int k1 = b;
                c = c + 1;
                a(obj3, i1, obj2, MapMaker.RemovalCause.c);
                obj = b(i2, l1);
                i1 = b;
                atomicreferencearray.set(j1, obj);
                b = i1 - 1;
            }
            unlock();
            p();
            obj = null;
_L9:
            return obj;
_L7:
            c = c + 1;
            a(obj, i1, obj2, MapMaker.RemovalCause.b);
            a(l1, obj1);
            unlock();
            p();
            obj = obj2;
            continue; /* Loop/switch isn't completed */
_L4:
            l1 = l1.b();
            continue; /* Loop/switch isn't completed */
_L2:
            unlock();
            p();
            obj = null;
            if (true) goto _L9; else goto _L8
_L8:
            obj;
            unlock();
            p();
            throw obj;
            if (true) goto _L11; else goto _L10
_L10:
        }

        Object a(Object obj, int i1, Object obj1, boolean flag) {
            lock();
            int k1;
            o();
            k1 = b + 1;
            int j1 = k1;
            Object obj3;
            Object obj4;
            if (k1 > d) {
                l();
                j1 = b + 1;
            }
            obj4 = e;
            k1 = i1 & ((AtomicReferenceArray) (obj4)).length() - 1;
            obj3 = (i)((AtomicReferenceArray) (obj4)).get(k1);
            Object obj2 = obj3;
_L14:
            if (obj2 == null) goto _L2; else goto _L1
_L1:
            Object obj5 = ((i) (obj2)).d();
            if (((i) (obj2)).c() != i1 || obj5 == null) goto _L4; else goto _L3
_L3:
            if (!a.e.a(obj, obj5)) goto _L4; else goto _L5
_L5:
            obj4 = ((i) (obj2)).a();
            obj3 = ((r) (obj4)).get();
            if (obj3 != null) goto _L7; else goto _L6
_L6:
            c = c + 1;
            a(((i) (obj2)), obj1);
            if (((r) (obj4)).b()) goto _L9; else goto _L8
_L8:
            a(obj, i1, obj3, MapMaker.RemovalCause.c);
            j1 = b;
_L11:
            b = j1;
            unlock();
            p();
            obj = null;
_L12:
            return obj;
_L9:
            if (!k()) goto _L11; else goto _L10
_L10:
            j1 = b + 1;
              goto _L11
_L7:
            if (!flag)
                break MISSING_BLOCK_LABEL_248;
            b(((i) (obj2)));
            unlock();
            p();
            obj = obj3;
              goto _L12
            c = c + 1;
            a(obj, i1, obj3, MapMaker.RemovalCause.b);
            a(((i) (obj2)), obj1);
            unlock();
            p();
            obj = obj3;
              goto _L12
_L4:
            obj2 = ((i) (obj2)).b();
            continue; /* Loop/switch isn't completed */
_L2:
            c = c + 1;
            obj = a(obj, i1, ((i) (obj3)));
            a(((i) (obj)), obj1);
            ((AtomicReferenceArray) (obj4)).set(k1, obj);
            if (k())
                j1 = b + 1;
            b = j1;
            unlock();
            p();
            obj = null;
              goto _L12
            obj;
            unlock();
            p();
            throw obj;
            if (true) goto _L14; else goto _L13
_L13:
        }

        AtomicReferenceArray a(int i1) {
            return new AtomicReferenceArray(i1);
        }

        void a() {
            if (!tryLock())
                break MISSING_BLOCK_LABEL_15;
            b();
            unlock();
            return;
            Exception exception;
            exception;
            unlock();
            throw exception;
        }

        void a(i i1) {
            if (a.d())
                a(i1, a.j);
            i.add(i1);
        }

        void a(i i1, long l1) {
            i1.a(a.o.a() + l1);
        }

        void a(i i1, MapMaker.RemovalCause removalcause) {
            a(i1.d(), i1.c(), i1.a().get(), removalcause);
        }

        void a(i i1, Object obj) {
            i1.a(a.h.a(this, i1, obj));
            c(i1);
        }

        void a(Object obj, int i1, Object obj1, MapMaker.RemovalCause removalcause) {
            if (a.l != MapMakerInternalMap.q) {
                obj = new MapMaker.RemovalNotification(obj, obj1, removalcause);
                a.l.offer(obj);
            }
        }

        void a(AtomicReferenceArray atomicreferencearray) {
            d = (atomicreferencearray.length() * 3) / 4;
            if (d == f)
                d = d + 1;
            e = atomicreferencearray;
        }

        boolean a(i i1, int j1) {
            lock();
            int k1;
            i i2;
            AtomicReferenceArray atomicreferencearray;
            k1 = b;
            atomicreferencearray = e;
            k1 = j1 & atomicreferencearray.length() - 1;
            i2 = (i)atomicreferencearray.get(k1);
            i l1 = i2;
_L8:
            if (l1 == null) goto _L2; else goto _L1
_L1:
            if (l1 != i1) goto _L4; else goto _L3
_L3:
            c = c + 1;
            a(l1.d(), j1, l1.a().get(), MapMaker.RemovalCause.c);
            i1 = b(i2, l1);
            j1 = b;
            atomicreferencearray.set(k1, i1);
            b = j1 - 1;
            boolean flag;
            flag = true;
            unlock();
            p();
_L6:
            return flag;
_L4:
            l1 = l1.b();
            continue; /* Loop/switch isn't completed */
_L2:
            flag = false;
            unlock();
            p();
            if (true) goto _L6; else goto _L5
_L5:
            i1;
            unlock();
            p();
            throw i1;
            if (true) goto _L8; else goto _L7
_L7:
        }

        boolean a(i i1, int j1, MapMaker.RemovalCause removalcause) {
            int k1;
            i l1;
            i i2;
            AtomicReferenceArray atomicreferencearray;
            k1 = b;
            atomicreferencearray = e;
            k1 = j1 & atomicreferencearray.length() - 1;
            i2 = (i)atomicreferencearray.get(k1);
            l1 = i2;
_L3:
            if (l1 == null)
                break MISSING_BLOCK_LABEL_132;
            if (l1 != i1) goto _L2; else goto _L1
_L1:
            boolean flag;
            c = c + 1;
            a(l1.d(), j1, l1.a().get(), removalcause);
            i1 = b(i2, l1);
            j1 = b;
            atomicreferencearray.set(k1, i1);
            b = j1 - 1;
            flag = true;
_L4:
            return flag;
_L2:
            l1 = l1.b();
              goto _L3
            flag = false;
              goto _L4
        }

        boolean a(r r1) {
            boolean flag;
            flag = false;
            break MISSING_BLOCK_LABEL_2;
            if (!r1.b() && r1.get() == null)
                flag = true;
            return flag;
        }

        boolean a(Object obj, int i1, r r1) {
            lock();
            int j1;
            i l1;
            AtomicReferenceArray atomicreferencearray;
            j1 = b;
            atomicreferencearray = e;
            j1 = i1 & atomicreferencearray.length() - 1;
            l1 = (i)atomicreferencearray.get(j1);
            i k1 = l1;
_L11:
            if (k1 == null) goto _L2; else goto _L1
_L1:
            Object obj1 = k1.d();
            if (k1.c() != i1 || obj1 == null) goto _L4; else goto _L3
_L3:
            if (!a.e.a(obj, obj1)) goto _L4; else goto _L5
_L5:
            if (k1.a() != r1) goto _L7; else goto _L6
_L6:
            c = c + 1;
            a(obj, i1, r1.get(), MapMaker.RemovalCause.c);
            obj = b(l1, k1);
            i1 = b;
            atomicreferencearray.set(j1, obj);
            b = i1 - 1;
            boolean flag;
            boolean flag1 = true;
            unlock();
            flag = flag1;
            if (!isHeldByCurrentThread()) {
                p();
                flag = flag1;
            }
_L9:
            return flag;
_L7:
            unlock();
            if (!isHeldByCurrentThread())
                p();
            flag = false;
            continue; /* Loop/switch isn't completed */
_L4:
            k1 = k1.b();
            continue; /* Loop/switch isn't completed */
_L2:
            unlock();
            if (!isHeldByCurrentThread())
                p();
            flag = false;
            if (true) goto _L9; else goto _L8
_L8:
            obj;
            unlock();
            if (!isHeldByCurrentThread())
                p();
            throw obj;
            if (true) goto _L11; else goto _L10
_L10:
        }

        boolean a(Object obj, int i1, Object obj1, Object obj2) {
            lock();
            int j1;
            i i2;
            AtomicReferenceArray atomicreferencearray;
            o();
            atomicreferencearray = e;
            j1 = i1 & atomicreferencearray.length() - 1;
            i2 = (i)atomicreferencearray.get(j1);
            i l1 = i2;
_L11:
            if (l1 == null) goto _L2; else goto _L1
_L1:
            Object obj3 = l1.d();
            if (l1.c() != i1 || obj3 == null) goto _L4; else goto _L3
_L3:
            if (!a.e.a(obj, obj3)) goto _L4; else goto _L5
_L5:
            r r1;
            Object obj4;
            r1 = l1.a();
            obj4 = r1.get();
            if (obj4 != null) goto _L7; else goto _L6
_L6:
            if (a(r1)) {
                int k1 = b;
                c = c + 1;
                a(obj3, i1, obj4, MapMaker.RemovalCause.c);
                obj = b(i2, l1);
                i1 = b;
                atomicreferencearray.set(j1, obj);
                b = i1 - 1;
            }
            boolean flag;
            unlock();
            p();
            flag = false;
_L9:
            return flag;
_L7:
            if (!a.f.a(obj1, obj4))
                break MISSING_BLOCK_LABEL_249;
            c = c + 1;
            a(obj, i1, obj4, MapMaker.RemovalCause.b);
            a(l1, obj2);
            flag = true;
            unlock();
            p();
            continue; /* Loop/switch isn't completed */
            b(l1);
            unlock();
            p();
            flag = false;
            continue; /* Loop/switch isn't completed */
_L4:
            l1 = l1.b();
            continue; /* Loop/switch isn't completed */
_L2:
            unlock();
            p();
            flag = false;
            if (true) goto _L9; else goto _L8
_L8:
            obj;
            unlock();
            p();
            throw obj;
            if (true) goto _L11; else goto _L10
_L10:
        }

        i b(int i1) {
            AtomicReferenceArray atomicreferencearray = e;
            return (i)atomicreferencearray.get(atomicreferencearray.length() - 1 & i1);
        }

        i b(i i1, i j1) {
            k.remove(j1);
            l.remove(j1);
            int k1 = b;
            i i2 = j1.b();
            i l1 = i1;
            i1 = i2;
            while (l1 != j1)  {
                i j2 = a(l1, i1);
                if (j2 != null) {
                    i1 = j2;
                } else {
                    d(l1);
                    k1--;
                }
                l1 = l1.b();
            }
            b = k1;
            return i1;
        }

        i b(Object obj, int i1) {
            Object obj1;
            obj1 = null;
            obj = a(obj, i1);
            if (obj != null) goto _L2; else goto _L1
_L1:
            obj = obj1;
_L4:
            return ((i) (obj));
_L2:
            if (a.b() && a.c(((i) (obj)))) {
                i();
                obj = obj1;
            }
            if (true) goto _L4; else goto _L3
_L3:
        }

        void b() {
            if (a.e())
                c();
            if (a.f())
                d();
        }

        void b(i i1) {
            k.add(i1);
            if (a.d()) {
                a(i1, a.j);
                l.add(i1);
            }
        }

        boolean b(Object obj, int i1, Object obj1) {
            boolean flag;
            flag = false;
            lock();
            int j1;
            i l1;
            AtomicReferenceArray atomicreferencearray;
            o();
            j1 = b;
            atomicreferencearray = e;
            j1 = i1 & atomicreferencearray.length() - 1;
            l1 = (i)atomicreferencearray.get(j1);
            i k1 = l1;
_L9:
            if (k1 == null)
                break MISSING_BLOCK_LABEL_248;
            Object obj2 = k1.d();
            if (k1.c() != i1 || obj2 == null) goto _L2; else goto _L1
_L1:
            if (!a.e.a(obj, obj2)) goto _L2; else goto _L3
_L3:
            Object obj3;
            obj = k1.a();
            obj3 = ((r) (obj)).get();
            if (!a.f.a(obj1, obj3)) goto _L5; else goto _L4
_L4:
            obj = com.google.common.collect.MapMaker.RemovalCause.a;
_L6:
            c = c + 1;
            a(obj2, i1, obj3, ((MapMaker.RemovalCause) (obj)));
            obj1 = b(l1, k1);
            i1 = b;
            atomicreferencearray.set(j1, obj1);
            b = i1 - 1;
            obj1 = com.google.common.collect.MapMaker.RemovalCause.a;
            if (obj == obj1)
                flag = true;
            else
                flag = false;
            unlock();
            p();
_L7:
            return flag;
_L5:
label0:
            {
                if (!a(((r) (obj))))
                    break label0;
                obj = MapMaker.RemovalCause.c;
            }
              goto _L6
            unlock();
            p();
            break MISSING_BLOCK_LABEL_201;
_L2:
            k1 = k1.b();
            continue; /* Loop/switch isn't completed */
            unlock();
            p();
              goto _L7
            obj;
            unlock();
            p();
            throw obj;
            if (true) goto _L9; else goto _L8
_L8:
        }

        Object c(Object obj, int i1) {
            i j1 = b(obj, i1);
            if (j1 != null) goto _L2; else goto _L1
_L1:
            obj = null;
            n();
_L4:
            return obj;
_L2:
            obj = j1.a().get();
            if (obj == null)
                break; /* Loop/switch isn't completed */
            a(j1);
_L5:
            n();
            if (true) goto _L4; else goto _L3
_L3:
            a();
              goto _L5
            obj;
            n();
            throw obj;
        }

        void c() {
            int i1 = 0;
            do {
                Object obj = g.poll();
                if (obj == null)
                    break;
                obj = (i)obj;
                a.a(((i) (obj)));
            } while (++i1 != 16);
        }

        void c(i i1) {
            h();
            k.add(i1);
            if (a.b()) {
                long l1;
                if (a.d())
                    l1 = a.j;
                else
                    l1 = a.k;
                a(i1, l1);
                l.add(i1);
            }
        }

        void d() {
            int i1 = 0;
            do {
                Object obj = h.poll();
                if (obj == null)
                    break;
                obj = (r)obj;
                a.a(((r) (obj)));
            } while (++i1 != 16);
        }

        void d(i i1) {
            a(i1, MapMaker.RemovalCause.c);
            k.remove(i1);
            l.remove(i1);
        }

        boolean d(Object obj, int i1) {
            boolean flag;
            boolean flag1;
            flag1 = false;
            flag = false;
            if (b == 0) goto _L2; else goto _L1
_L1:
            obj = b(obj, i1);
            if (obj != null) goto _L4; else goto _L3
_L3:
            n();
_L6:
            return flag;
_L4:
            obj = ((i) (obj)).a().get();
            flag = flag1;
            if (obj != null)
                flag = true;
            n();
            continue; /* Loop/switch isn't completed */
_L2:
            n();
            if (true) goto _L6; else goto _L5
_L5:
            obj;
            n();
            throw obj;
        }

        Object e(i i1) {
            Object obj1 = null;
            if (i1.d() == null) {
                a();
                i1 = obj1;
            } else {
                Object obj = i1.a().get();
                if (obj == null) {
                    a();
                    i1 = obj1;
                } else
                if (a.b() && a.c(i1)) {
                    i();
                    i1 = obj1;
                } else {
                    i1 = ((i) (obj));
                }
            }
            return i1;
        }

        Object e(Object obj, int i1) {
            lock();
            int j1;
            i l1;
            AtomicReferenceArray atomicreferencearray;
            o();
            j1 = b;
            atomicreferencearray = e;
            j1 = i1 & atomicreferencearray.length() - 1;
            l1 = (i)atomicreferencearray.get(j1);
            i k1 = l1;
_L9:
            if (k1 == null)
                break MISSING_BLOCK_LABEL_216;
            Object obj2 = k1.d();
            if (k1.c() != i1 || obj2 == null) goto _L2; else goto _L1
_L1:
            if (!a.e.a(obj, obj2)) goto _L2; else goto _L3
_L3:
            Object obj1;
            obj = k1.a();
            obj1 = ((r) (obj)).get();
            if (obj1 == null) goto _L5; else goto _L4
_L4:
            obj = com.google.common.collect.MapMaker.RemovalCause.a;
_L6:
            c = c + 1;
            a(obj2, i1, obj1, ((MapMaker.RemovalCause) (obj)));
            obj = b(l1, k1);
            i1 = b;
            atomicreferencearray.set(j1, obj);
            b = i1 - 1;
            unlock();
            p();
            obj = obj1;
_L7:
            return obj;
_L5:
label0:
            {
                if (!a(((r) (obj))))
                    break label0;
                obj = MapMaker.RemovalCause.c;
            }
              goto _L6
            unlock();
            p();
            obj = null;
              goto _L7
_L2:
            k1 = k1.b();
            continue; /* Loop/switch isn't completed */
            unlock();
            p();
            obj = null;
              goto _L7
            obj;
            unlock();
            p();
            throw obj;
            if (true) goto _L9; else goto _L8
_L8:
        }

        void e() {
            if (a.e())
                f();
            if (a.f())
                g();
        }

        void f() {
            while (g.poll() != null) ;
        }

        void g() {
            while (h.poll() != null) ;
        }

        void h() {
            do {
                i i1 = (i)i.poll();
                if (i1 == null)
                    break;
                if (k.contains(i1))
                    k.add(i1);
                if (a.d() && l.contains(i1))
                    l.add(i1);
            } while (true);
        }

        void i() {
            if (!tryLock())
                break MISSING_BLOCK_LABEL_15;
            j();
            unlock();
            return;
            Exception exception;
            exception;
            unlock();
            throw exception;
        }

        void j() {
            h();
            if (!l.isEmpty()) goto _L2; else goto _L1
_L1:
            return;
_L2:
            long l1 = a.o.a();
            do {
                i i1 = (i)l.peek();
                if (i1 == null || !a.a(i1, l1))
                    continue; /* Loop/switch isn't completed */
                if (!a(i1, i1.c(), MapMaker.RemovalCause.d))
                    throw new AssertionError();
            } while (true);
            if (true) goto _L1; else goto _L3
_L3:
        }

        boolean k() {
            boolean flag;
            if (a.a() && b >= f) {
                h();
                i i1 = (i)k.remove();
                if (!a(i1, i1.c(), MapMaker.RemovalCause.e))
                    throw new AssertionError();
                flag = true;
            } else {
                flag = false;
            }
            return flag;
        }

        void l() {
            int i2;
            AtomicReferenceArray atomicreferencearray1;
            atomicreferencearray1 = e;
            i2 = atomicreferencearray1.length();
            if (i2 < 0x40000000) goto _L2; else goto _L1
_L1:
            return;
_L2:
            int i1;
            int k1;
            int j2;
            AtomicReferenceArray atomicreferencearray;
            i1 = b;
            atomicreferencearray = a(i2 << 1);
            d = (atomicreferencearray.length() * 3) / 4;
            j2 = atomicreferencearray.length() - 1;
            k1 = 0;
_L7:
            if (k1 >= i2) goto _L4; else goto _L3
_L3:
            int j1;
            i l2;
            i i3;
            i3 = (i)atomicreferencearray1.get(k1);
            if (i3 == null)
                break MISSING_BLOCK_LABEL_275;
            l2 = i3.b();
            j1 = i3.c() & j2;
            if (l2 != null) goto _L6; else goto _L5
_L5:
            atomicreferencearray.set(j1, i3);
            j1 = i1;
_L9:
            k1++;
            i1 = j1;
              goto _L7
_L6:
            i k2;
            k2 = i3;
            for (; l2 != null; l2 = l2.b()) {
                int l1 = l2.c() & j2;
                if (l1 != j1) {
                    k2 = l2;
                    j1 = l1;
                }
            }

            atomicreferencearray.set(j1, k2);
            l2 = i3;
_L10:
            j1 = i1;
            if (l2 == k2) goto _L9; else goto _L8
_L8:
            j1 = l2.c() & j2;
            i j3 = a(l2, (i)atomicreferencearray.get(j1));
            if (j3 != null) {
                atomicreferencearray.set(j1, j3);
            } else {
                d(l2);
                i1--;
            }
            l2 = l2.b();
              goto _L10
_L4:
            e = atomicreferencearray;
            b = i1;
              goto _L1
            j1 = i1;
              goto _L9
        }

        void m() {
            if (b == 0)
                break MISSING_BLOCK_LABEL_165;
            lock();
            AtomicReferenceArray atomicreferencearray = e;
            if (a.l == MapMakerInternalMap.q) goto _L2; else goto _L1
_L1:
            int i1 = 0;
_L5:
            i j1;
            if (i1 >= atomicreferencearray.length())
                break; /* Loop/switch isn't completed */
            j1 = (i)atomicreferencearray.get(i1);
_L4:
            if (j1 == null)
                break; /* Loop/switch isn't completed */
            if (!j1.a().b())
                a(j1, com.google.common.collect.MapMaker.RemovalCause.a);
            j1 = j1.b();
            if (true) goto _L4; else goto _L3
_L3:
            i1++;
            if (true) goto _L5; else goto _L2
_L2:
            i1 = 0;
_L7:
            if (i1 >= atomicreferencearray.length())
                break; /* Loop/switch isn't completed */
            atomicreferencearray.set(i1, null);
            i1++;
            if (true) goto _L7; else goto _L6
_L6:
            e();
            k.clear();
            l.clear();
            j.set(0);
            c = c + 1;
            b = 0;
            unlock();
            p();
            return;
            Exception exception;
            exception;
            unlock();
            p();
            throw exception;
        }

        void n() {
            if ((j.incrementAndGet() & 0x3f) == 0)
                q();
        }

        void o() {
            r();
        }

        void p() {
            s();
        }

        void q() {
            r();
            s();
        }

        void r() {
            if (!tryLock())
                break MISSING_BLOCK_LABEL_27;
            b();
            j();
            j.set(0);
            unlock();
            return;
            Exception exception;
            exception;
            unlock();
            throw exception;
        }

        void s() {
            if (!isHeldByCurrentThread())
                a.j();
        }

        Segment(MapMakerInternalMap mapmakerinternalmap, int i1, int j1) {
            Object obj1 = null;
            super();
            a = mapmakerinternalmap;
            f = j1;
            a(a(i1));
            Object obj;
            if (mapmakerinternalmap.e())
                obj = new ReferenceQueue();
            else
                obj = null;
            g = ((ReferenceQueue) (obj));
            obj = obj1;
            if (mapmakerinternalmap.f())
                obj = new ReferenceQueue();
            h = ((ReferenceQueue) (obj));
            if (mapmakerinternalmap.a() || mapmakerinternalmap.d())
                obj = new ConcurrentLinkedQueue();
            else
                obj = com.google.common.collect.MapMakerInternalMap.i();
            i = ((Queue) (obj));
            if (mapmakerinternalmap.a())
                obj = new d();
            else
                obj = com.google.common.collect.MapMakerInternalMap.i();
            k = ((Queue) (obj));
            if (mapmakerinternalmap.b())
                mapmakerinternalmap = new e();
            else
                mapmakerinternalmap = com.google.common.collect.MapMakerInternalMap.i();
            l = mapmakerinternalmap;
        }
    }

    static abstract class Strength extends Enum {

        public static final Strength a;
        public static final Strength b;
        public static final Strength c;
        private static final Strength d[];

        public static Strength valueOf(String s1) {
            return (Strength)Enum.valueOf(com/google/common/collect/MapMakerInternalMap$Strength, s1);
        }

        public static Strength[] values() {
            return (Strength[])d.clone();
        }

        abstract Equivalence a();

        abstract r a(Segment segment, i i1, Object obj);

        static  {
            a = new Strength("STRONG", 0) {

                Equivalence a() {
                    return Equivalence.a();
                }

                r a(Segment segment, i i1, Object obj) {
                    return new p(obj);
                }

            }
;
            b = new Strength("SOFT", 1) {

                Equivalence a() {
                    return Equivalence.b();
                }

                r a(Segment segment, i i1, Object obj) {
                    return new k(segment.h, obj, i1);
                }

            }
;
            c = new Strength("WEAK", 2) {

                Equivalence a() {
                    return Equivalence.b();
                }

                r a(Segment segment, i i1, Object obj) {
                    return new x(segment.h, obj, i1);
                }

            }
;
            d = (new Strength[] {
                a, b, c
            });
        }

        private Strength(String s1, int i1) {
            super(s1, i1);
        }

    }

    static abstract class a
        implements i {

        public r a() {
            throw new UnsupportedOperationException();
        }

        public void a(long l1) {
            throw new UnsupportedOperationException();
        }

        public void a(i i1) {
            throw new UnsupportedOperationException();
        }

        public void a(r r1) {
            throw new UnsupportedOperationException();
        }

        public i b() {
            throw new UnsupportedOperationException();
        }

        public void b(i i1) {
            throw new UnsupportedOperationException();
        }

        public int c() {
            throw new UnsupportedOperationException();
        }

        public void c(i i1) {
            throw new UnsupportedOperationException();
        }

        public Object d() {
            throw new UnsupportedOperationException();
        }

        public void d(i i1) {
            throw new UnsupportedOperationException();
        }

        public long e() {
            throw new UnsupportedOperationException();
        }

        public i f() {
            throw new UnsupportedOperationException();
        }

        public i g() {
            throw new UnsupportedOperationException();
        }

        public i h() {
            throw new UnsupportedOperationException();
        }

        public i i() {
            throw new UnsupportedOperationException();
        }

        a() {
        }
    }

    final class b extends f {

        final MapMakerInternalMap a;

        public java.util.Map.Entry a() {
            return e();
        }

        public Object next() {
            return a();
        }

        b() {
            a = MapMakerInternalMap.this;
            super();
        }
    }

    final class c extends j {

        final MapMakerInternalMap a;

        public void clear() {
            a.clear();
        }

        public boolean contains(Object obj) {
            boolean flag1 = false;
            if (obj instanceof java.util.Map.Entry) goto _L2; else goto _L1
_L1:
            boolean flag = flag1;
_L4:
            return flag;
_L2:
            obj = (java.util.Map.Entry)obj;
            Object obj1 = ((java.util.Map.Entry) (obj)).getKey();
            flag = flag1;
            if (obj1 != null) {
                obj1 = a.get(obj1);
                flag = flag1;
                if (obj1 != null) {
                    flag = flag1;
                    if (a.f.a(((java.util.Map.Entry) (obj)).getValue(), obj1))
                        flag = true;
                }
            }
            if (true) goto _L4; else goto _L3
_L3:
        }

        public boolean isEmpty() {
            return a.isEmpty();
        }

        public Iterator iterator() {
            return a. new b();
        }

        public boolean remove(Object obj) {
            boolean flag1 = false;
            if (obj instanceof java.util.Map.Entry) goto _L2; else goto _L1
_L1:
            boolean flag = flag1;
_L4:
            return flag;
_L2:
            obj = (java.util.Map.Entry)obj;
            Object obj1 = ((java.util.Map.Entry) (obj)).getKey();
            flag = flag1;
            if (obj1 != null) {
                flag = flag1;
                if (a.remove(obj1, ((java.util.Map.Entry) (obj)).getValue()))
                    flag = true;
            }
            if (true) goto _L4; else goto _L3
_L3:
        }

        public int size() {
            return a.size();
        }

        c() {
            a = MapMakerInternalMap.this;
            super();
        }
    }

    static final class d extends AbstractQueue {

        final i a = new _cls1(this);

        public i a() {
            i j1 = a.h();
            i i1 = j1;
            if (j1 == a)
                i1 = null;
            return i1;
        }

        public boolean a(i i1) {
            MapMakerInternalMap.b(i1.i(), i1.h());
            MapMakerInternalMap.b(a.i(), i1);
            MapMakerInternalMap.b(i1, a);
            return true;
        }

        public i b() {
            i i1 = a.h();
            if (i1 == a)
                i1 = null;
            else
                remove(i1);
            return i1;
        }

        public void clear() {
            i j1;
            for (i i1 = a.h(); i1 != a; i1 = j1) {
                j1 = i1.h();
                MapMakerInternalMap.e(i1);
            }

            a.c(a);
            a.d(a);
        }

        public boolean contains(Object obj) {
            boolean flag;
            if (((i)obj).h() != com.google.common.collect.NullEntry.a)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public boolean isEmpty() {
            boolean flag;
            if (a.h() == a)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public Iterator iterator() {
            return new com.google.common.collect.e(this, a()) {

                final d a;

                protected i a(i i1) {
                    i j1 = i1.h();
                    i1 = j1;
                    if (j1 == a.a)
                        i1 = null;
                    return i1;
                }

                protected volatile Object a(Object obj) {
                    return a((i)obj);
                }

             {
                a = d1;
                super(i1);
            }
            }
;
        }

        public boolean offer(Object obj) {
            return a((i)obj);
        }

        public Object peek() {
            return a();
        }

        public Object poll() {
            return b();
        }

        public boolean remove(Object obj) {
            i i1 = (i)obj;
            obj = i1.i();
            i j1 = i1.h();
            MapMakerInternalMap.b(((i) (obj)), j1);
            MapMakerInternalMap.e(i1);
            boolean flag;
            if (j1 != com.google.common.collect.NullEntry.a)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public int size() {
            int i1 = 0;
            for (i j1 = a.h(); j1 != a; j1 = j1.h())
                i1++;

            return i1;
        }

        d() {
        }
    }

    static final class e extends AbstractQueue {

        final i a = new _cls1(this);

        public i a() {
            i j1 = a.f();
            i i1 = j1;
            if (j1 == a)
                i1 = null;
            return i1;
        }

        public boolean a(i i1) {
            com.google.common.collect.MapMakerInternalMap.a(i1.g(), i1.f());
            com.google.common.collect.MapMakerInternalMap.a(a.g(), i1);
            com.google.common.collect.MapMakerInternalMap.a(i1, a);
            return true;
        }

        public i b() {
            i i1 = a.f();
            if (i1 == a)
                i1 = null;
            else
                remove(i1);
            return i1;
        }

        public void clear() {
            i j1;
            for (i i1 = a.f(); i1 != a; i1 = j1) {
                j1 = i1.f();
                MapMakerInternalMap.d(i1);
            }

            a.a(a);
            a.b(a);
        }

        public boolean contains(Object obj) {
            boolean flag;
            if (((i)obj).f() != com.google.common.collect.NullEntry.a)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public boolean isEmpty() {
            boolean flag;
            if (a.f() == a)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public Iterator iterator() {
            return new com.google.common.collect.e(this, a()) {

                final e a;

                protected i a(i i1) {
                    i j1 = i1.f();
                    i1 = j1;
                    if (j1 == a.a)
                        i1 = null;
                    return i1;
                }

                protected volatile Object a(Object obj) {
                    return a((i)obj);
                }

             {
                a = e1;
                super(i1);
            }
            }
;
        }

        public boolean offer(Object obj) {
            return a((i)obj);
        }

        public Object peek() {
            return a();
        }

        public Object poll() {
            return b();
        }

        public boolean remove(Object obj) {
            obj = (i)obj;
            i j1 = ((i) (obj)).g();
            i i1 = ((i) (obj)).f();
            com.google.common.collect.MapMakerInternalMap.a(j1, i1);
            MapMakerInternalMap.d(((i) (obj)));
            boolean flag;
            if (i1 != com.google.common.collect.NullEntry.a)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public int size() {
            int i1 = 0;
            for (i j1 = a.f(); j1 != a; j1 = j1.f())
                i1++;

            return i1;
        }

        e() {
        }
    }

    abstract class f
        implements Iterator {

        int b;
        int c;
        Segment d;
        AtomicReferenceArray e;
        i f;
        y g;
        y h;
        final MapMakerInternalMap i;

        boolean a(i i1) {
            Object obj;
            obj = i1.d();
            i1 = ((i) (i.b(i1)));
            if (i1 == null) goto _L2; else goto _L1
_L1:
            y y1 = JVM INSTR new #56  <Class MapMakerInternalMap$y>;
            y1.i. y(obj, i1);
            g = y1;
            boolean flag;
            flag = true;
            d.n();
_L4:
            return flag;
_L2:
            flag = false;
            d.n();
            if (true) goto _L4; else goto _L3
_L3:
            i1;
            d.n();
            throw i1;
        }

        final void b() {
            g = null;
            break MISSING_BLOCK_LABEL_5;
            if (!c() && !d())
label0:
                do {
                    do {
                        if (b < 0)
                            break label0;
                        Segment asegment[] = i.c;
                        int i1 = b;
                        b = i1 - 1;
                        d = asegment[i1];
                    } while (d.b == 0);
                    e = d.e;
                    c = e.length() - 1;
                } while (!d());
            return;
        }

        boolean c() {
            if (f == null)
                break MISSING_BLOCK_LABEL_58;
            f = f.b();
_L3:
            if (f == null)
                break MISSING_BLOCK_LABEL_58;
            if (!a(f)) goto _L2; else goto _L1
_L1:
            boolean flag = true;
_L4:
            return flag;
_L2:
            f = f.b();
              goto _L3
            flag = false;
              goto _L4
        }

        boolean d() {
_L4:
            if (c < 0) goto _L2; else goto _L1
_L1:
            Object obj;
            obj = e;
            int i1 = c;
            c = i1 - 1;
            obj = (i)((AtomicReferenceArray) (obj)).get(i1);
            f = ((i) (obj));
            if (obj == null || !a(f) && !c()) goto _L4; else goto _L3
_L3:
            boolean flag = true;
_L6:
            return flag;
_L2:
            flag = false;
            if (true) goto _L6; else goto _L5
_L5:
        }

        y e() {
            if (g == null) {
                throw new NoSuchElementException();
            } else {
                h = g;
                b();
                return h;
            }
        }

        public boolean hasNext() {
            boolean flag;
            if (g != null)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public void remove() {
            boolean flag;
            if (h != null)
                flag = true;
            else
                flag = false;
            com.google.common.collect.g.a(flag);
            i.remove(h.getKey());
            h = null;
        }

        f() {
            i = MapMakerInternalMap.this;
            super();
            b = MapMakerInternalMap.this.c.length - 1;
            c = -1;
            b();
        }
    }

    final class g extends f {

        final MapMakerInternalMap a;

        public Object next() {
            return e().getKey();
        }

        g() {
            a = MapMakerInternalMap.this;
            super();
        }
    }

    final class h extends j {

        final MapMakerInternalMap a;

        public void clear() {
            a.clear();
        }

        public boolean contains(Object obj) {
            return a.containsKey(obj);
        }

        public boolean isEmpty() {
            return a.isEmpty();
        }

        public Iterator iterator() {
            return a. new g();
        }

        public boolean remove(Object obj) {
            boolean flag;
            if (a.remove(obj) != null)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public int size() {
            return a.size();
        }

        h() {
            a = MapMakerInternalMap.this;
            super();
        }
    }

    static interface i {

        public abstract r a();

        public abstract void a(long l1);

        public abstract void a(i i1);

        public abstract void a(r r1);

        public abstract i b();

        public abstract void b(i i1);

        public abstract int c();

        public abstract void c(i i1);

        public abstract Object d();

        public abstract void d(i i1);

        public abstract long e();

        public abstract i f();

        public abstract i g();

        public abstract i h();

        public abstract i i();
    }

    private static abstract class j extends AbstractSet {

        public Object[] toArray() {
            return com.google.common.collect.MapMakerInternalMap.a(this).toArray();
        }

        public Object[] toArray(Object aobj[]) {
            return com.google.common.collect.MapMakerInternalMap.a(this).toArray(aobj);
        }

        private j() {
        }

    }

    static final class k extends SoftReference
        implements r {

        final i a;

        public i a() {
            return a;
        }

        public r a(ReferenceQueue referencequeue, Object obj, i i1) {
            return new k(referencequeue, obj, i1);
        }

        public void a(r r1) {
            clear();
        }

        public boolean b() {
            return false;
        }

        k(ReferenceQueue referencequeue, Object obj, i i1) {
            super(obj, referencequeue);
            a = i1;
        }
    }

    static class l
        implements i {

        final Object a;
        final int b;
        final i c;
        volatile r d;

        public r a() {
            return d;
        }

        public void a(long l1) {
            throw new UnsupportedOperationException();
        }

        public void a(i i1) {
            throw new UnsupportedOperationException();
        }

        public void a(r r1) {
            r r2 = d;
            d = r1;
            r2.a(r1);
        }

        public i b() {
            return c;
        }

        public void b(i i1) {
            throw new UnsupportedOperationException();
        }

        public int c() {
            return b;
        }

        public void c(i i1) {
            throw new UnsupportedOperationException();
        }

        public Object d() {
            return a;
        }

        public void d(i i1) {
            throw new UnsupportedOperationException();
        }

        public long e() {
            throw new UnsupportedOperationException();
        }

        public i f() {
            throw new UnsupportedOperationException();
        }

        public i g() {
            throw new UnsupportedOperationException();
        }

        public i h() {
            throw new UnsupportedOperationException();
        }

        public i i() {
            throw new UnsupportedOperationException();
        }

        l(Object obj, int i1, i j1) {
            d = MapMakerInternalMap.g();
            a = obj;
            b = i1;
            c = j1;
        }
    }

    static final class m extends l
        implements i {

        i e;
        i f;

        public void c(i i1) {
            e = i1;
        }

        public void d(i i1) {
            f = i1;
        }

        public i h() {
            return e;
        }

        public i i() {
            return f;
        }

        m(Object obj, int i1, i j1) {
            super(obj, i1, j1);
            e = MapMakerInternalMap.h();
            f = MapMakerInternalMap.h();
        }
    }

    static final class n extends l
        implements i {

        volatile long e;
        i f;
        i g;

        public void a(long l1) {
            e = l1;
        }

        public void a(i i1) {
            f = i1;
        }

        public void b(i i1) {
            g = i1;
        }

        public long e() {
            return e;
        }

        public i f() {
            return f;
        }

        public i g() {
            return g;
        }

        n(Object obj, int i1, i j1) {
            super(obj, i1, j1);
            e = 0xffffffffL;
            f = MapMakerInternalMap.h();
            g = MapMakerInternalMap.h();
        }
    }

    static final class o extends l
        implements i {

        volatile long e;
        i f;
        i g;
        i h;
        i i;

        public void a(long l1) {
            e = l1;
        }

        public void a(i i1) {
            f = i1;
        }

        public void b(i i1) {
            g = i1;
        }

        public void c(i i1) {
            h = i1;
        }

        public void d(i i1) {
            i = i1;
        }

        public long e() {
            return e;
        }

        public i f() {
            return f;
        }

        public i g() {
            return g;
        }

        public i h() {
            return h;
        }

        public i i() {
            return i;
        }

        o(Object obj, int i1, i j1) {
            super(obj, i1, j1);
            e = 0xffffffffL;
            f = MapMakerInternalMap.h();
            g = MapMakerInternalMap.h();
            h = MapMakerInternalMap.h();
            i = MapMakerInternalMap.h();
        }
    }

    static final class p
        implements r {

        final Object a;

        public i a() {
            return null;
        }

        public r a(ReferenceQueue referencequeue, Object obj, i i1) {
            return this;
        }

        public void a(r r1) {
        }

        public boolean b() {
            return false;
        }

        public Object get() {
            return a;
        }

        p(Object obj) {
            a = obj;
        }
    }

    final class q extends f {

        final MapMakerInternalMap a;

        public Object next() {
            return e().getValue();
        }

        q() {
            a = MapMakerInternalMap.this;
            super();
        }
    }

    static interface r {

        public abstract i a();

        public abstract r a(ReferenceQueue referencequeue, Object obj, i i1);

        public abstract void a(r r1);

        public abstract boolean b();

        public abstract Object get();
    }

    final class s extends AbstractCollection {

        final MapMakerInternalMap a;

        public void clear() {
            a.clear();
        }

        public boolean contains(Object obj) {
            return a.containsValue(obj);
        }

        public boolean isEmpty() {
            return a.isEmpty();
        }

        public Iterator iterator() {
            return a. new q();
        }

        public int size() {
            return a.size();
        }

        public Object[] toArray() {
            return com.google.common.collect.MapMakerInternalMap.a(this).toArray();
        }

        public Object[] toArray(Object aobj[]) {
            return com.google.common.collect.MapMakerInternalMap.a(this).toArray(aobj);
        }

        s() {
            a = MapMakerInternalMap.this;
            super();
        }
    }

    static class t extends WeakReference
        implements i {

        final int a;
        final i b;
        volatile r c;

        public r a() {
            return c;
        }

        public void a(long l1) {
            throw new UnsupportedOperationException();
        }

        public void a(i i1) {
            throw new UnsupportedOperationException();
        }

        public void a(r r1) {
            r r2 = c;
            c = r1;
            r2.a(r1);
        }

        public i b() {
            return b;
        }

        public void b(i i1) {
            throw new UnsupportedOperationException();
        }

        public int c() {
            return a;
        }

        public void c(i i1) {
            throw new UnsupportedOperationException();
        }

        public Object d() {
            return get();
        }

        public void d(i i1) {
            throw new UnsupportedOperationException();
        }

        public long e() {
            throw new UnsupportedOperationException();
        }

        public i f() {
            throw new UnsupportedOperationException();
        }

        public i g() {
            throw new UnsupportedOperationException();
        }

        public i h() {
            throw new UnsupportedOperationException();
        }

        public i i() {
            throw new UnsupportedOperationException();
        }

        t(ReferenceQueue referencequeue, Object obj, int i1, i j1) {
            super(obj, referencequeue);
            c = MapMakerInternalMap.g();
            a = i1;
            b = j1;
        }
    }

    static final class u extends t
        implements i {

        i d;
        i e;

        public void c(i i1) {
            d = i1;
        }

        public void d(i i1) {
            e = i1;
        }

        public i h() {
            return d;
        }

        public i i() {
            return e;
        }

        u(ReferenceQueue referencequeue, Object obj, int i1, i j1) {
            super(referencequeue, obj, i1, j1);
            d = MapMakerInternalMap.h();
            e = MapMakerInternalMap.h();
        }
    }

    static final class v extends t
        implements i {

        volatile long d;
        i e;
        i f;

        public void a(long l1) {
            d = l1;
        }

        public void a(i i1) {
            e = i1;
        }

        public void b(i i1) {
            f = i1;
        }

        public long e() {
            return d;
        }

        public i f() {
            return e;
        }

        public i g() {
            return f;
        }

        v(ReferenceQueue referencequeue, Object obj, int i1, i j1) {
            super(referencequeue, obj, i1, j1);
            d = 0xffffffffL;
            e = MapMakerInternalMap.h();
            f = MapMakerInternalMap.h();
        }
    }

    static final class w extends t
        implements i {

        volatile long d;
        i e;
        i f;
        i g;
        i h;

        public void a(long l1) {
            d = l1;
        }

        public void a(i i1) {
            e = i1;
        }

        public void b(i i1) {
            f = i1;
        }

        public void c(i i1) {
            g = i1;
        }

        public void d(i i1) {
            h = i1;
        }

        public long e() {
            return d;
        }

        public i f() {
            return e;
        }

        public i g() {
            return f;
        }

        public i h() {
            return g;
        }

        public i i() {
            return h;
        }

        w(ReferenceQueue referencequeue, Object obj, int i1, i j1) {
            super(referencequeue, obj, i1, j1);
            d = 0xffffffffL;
            e = MapMakerInternalMap.h();
            f = MapMakerInternalMap.h();
            g = MapMakerInternalMap.h();
            h = MapMakerInternalMap.h();
        }
    }

    static final class x extends WeakReference
        implements r {

        final i a;

        public i a() {
            return a;
        }

        public r a(ReferenceQueue referencequeue, Object obj, i i1) {
            return new x(referencequeue, obj, i1);
        }

        public void a(r r1) {
            clear();
        }

        public boolean b() {
            return false;
        }

        x(ReferenceQueue referencequeue, Object obj, i i1) {
            super(obj, referencequeue);
            a = i1;
        }
    }

    final class y extends com.google.common.collect.b {

        final Object a;
        Object b;
        final MapMakerInternalMap c;

        public boolean equals(Object obj) {
            boolean flag1 = false;
            boolean flag = flag1;
            if (obj instanceof java.util.Map.Entry) {
                obj = (java.util.Map.Entry)obj;
                flag = flag1;
                if (a.equals(((java.util.Map.Entry) (obj)).getKey())) {
                    flag = flag1;
                    if (b.equals(((java.util.Map.Entry) (obj)).getValue()))
                        flag = true;
                }
            }
            return flag;
        }

        public Object getKey() {
            return a;
        }

        public Object getValue() {
            return b;
        }

        public int hashCode() {
            return a.hashCode() ^ b.hashCode();
        }

        public Object setValue(Object obj) {
            Object obj1 = c.put(a, obj);
            b = obj;
            return obj1;
        }

        y(Object obj, Object obj1) {
            c = MapMakerInternalMap.this;
            super();
            a = obj;
            b = obj1;
        }
    }


    static final r p = new r() {

        public i a() {
            return null;
        }

        public r a(ReferenceQueue referencequeue, Object obj, i i1) {
            return this;
        }

        public void a(r r1) {
        }

        public boolean b() {
            return false;
        }

        public Object get() {
            return null;
        }

    }
;
    static final Queue q = new AbstractQueue() {

        public Iterator iterator() {
            return com.google.common.collect.k.a();
        }

        public boolean offer(Object obj) {
            return true;
        }

        public Object peek() {
            return null;
        }

        public Object poll() {
            return null;
        }

        public int size() {
            return 0;
        }

    }
;
    private static final Logger u = Logger.getLogger(com/google/common/collect/MapMakerInternalMap.getName());
    final transient int a;
    final transient int b;
    final transient Segment c[];
    final int d;
    final Equivalence e;
    final Equivalence f;
    final Strength g;
    final Strength h;
    final int i;
    final long j;
    final long k;
    final Queue l;
    final MapMaker.a m;
    final transient EntryFactory n;
    final com.google.common.base.p o;
    transient Set r;
    transient Collection s;
    transient Set t;

    MapMakerInternalMap(MapMaker mapmaker) {
        int j2 = 1;
        boolean flag1 = false;
        boolean flag = false;
        super();
        d = Math.min(mapmaker.d(), 0x10000);
        g = mapmaker.e();
        h = mapmaker.f();
        e = mapmaker.b();
        f = h.a();
        i = mapmaker.e;
        j = mapmaker.h();
        k = mapmaker.g();
        n = com.google.common.collect.EntryFactory.a(g, b(), a());
        o = mapmaker.i();
        m = mapmaker.a();
        int i1;
        int j1;
        int k1;
        Object obj;
        if (m == com.google.common.collect.GenericMapMaker.NullListener.a)
            obj = i();
        else
            obj = new ConcurrentLinkedQueue();
        l = ((Queue) (obj));
        i1 = Math.min(mapmaker.c(), 0x40000000);
        j1 = i1;
        if (a())
            j1 = Math.min(i1, i);
        i1 = 1;
        k1 = 0;
        for (; i1 < d && (!a() || i1 * 2 <= i); i1 <<= 1)
            k1++;

        b = 32 - k1;
        a = i1 - 1;
        c = c(i1);
        k1 = j1 / i1;
        if (k1 * i1 < j1) {
            k1++;
            j1 = j2;
        } else {
            j1 = j2;
        }
        for (; j1 < k1; j1 <<= 1);
        k1 = ((flag1) ? 1 : 0);
        if (a()) {
            int i2 = i / i1 + 1;
            j2 = i;
            for (k1 = ((flag) ? 1 : 0); k1 < c.length;) {
                int l1 = i2;
                if (k1 == j2 % i1)
                    l1 = i2 - 1;
                c[k1] = a(j1, l1);
                k1++;
                i2 = l1;
            }

        } else {
            for (; k1 < c.length; k1++)
                c[k1] = a(j1, -1);

        }
    }

    static int a(int i1) {
        i1 = (i1 << 15 ^ 0xffffcd7d) + i1;
        i1 ^= i1 >>> 10;
        i1 += i1 << 3;
        i1 ^= i1 >>> 6;
        i1 += (i1 << 2) + (i1 << 14);
        return i1 ^ i1 >>> 16;
    }

    static ArrayList a(Collection collection) {
        return b(collection);
    }

    static void a(i i1, i j1) {
        i1.a(j1);
        j1.b(i1);
    }

    private static ArrayList b(Collection collection) {
        ArrayList arraylist = new ArrayList(collection.size());
        com.google.common.collect.k.a(arraylist, collection.iterator());
        return arraylist;
    }

    static void b(i i1, i j1) {
        i1.c(j1);
        j1.d(i1);
    }

    static void d(i i1) {
        i j1 = h();
        i1.a(j1);
        i1.b(j1);
    }

    static void e(i i1) {
        i j1 = h();
        i1.c(j1);
        i1.d(j1);
    }

    static r g() {
        return p;
    }

    static i h() {
        return com.google.common.collect.NullEntry.a;
    }

    static Queue i() {
        return q;
    }

    int a(Object obj) {
        return a(e.a(obj));
    }

    Segment a(int i1, int j1) {
        return new Segment(this, i1, j1);
    }

    void a(i i1) {
        int j1 = i1.c();
        b(j1).a(i1, j1);
    }

    void a(r r1) {
        i j1 = r1.a();
        int i1 = j1.c();
        b(i1).a(j1.d(), i1, r1);
    }

    boolean a() {
        boolean flag;
        if (i != -1)
            flag = true;
        else
            flag = false;
        return flag;
    }

    boolean a(i i1, long l1) {
        boolean flag;
        if (l1 - i1.e() > 0L)
            flag = true;
        else
            flag = false;
        return flag;
    }

    Segment b(int i1) {
        return c[i1 >>> b & a];
    }

    Object b(i i1) {
        Object obj2 = null;
        if (i1.d() != null) goto _L2; else goto _L1
_L1:
        Object obj = obj2;
_L4:
        return obj;
_L2:
        Object obj1 = i1.a().get();
        obj = obj2;
        if (obj1 == null)
            continue; /* Loop/switch isn't completed */
        if (b()) {
            obj = obj2;
            if (c(i1))
                continue; /* Loop/switch isn't completed */
        }
        obj = obj1;
        if (true) goto _L4; else goto _L3
_L3:
    }

    boolean b() {
        boolean flag;
        if (c() || d())
            flag = true;
        else
            flag = false;
        return flag;
    }

    boolean c() {
        boolean flag;
        if (k > 0L)
            flag = true;
        else
            flag = false;
        return flag;
    }

    boolean c(i i1) {
        return a(i1, o.a());
    }

    final Segment[] c(int i1) {
        return new Segment[i1];
    }

    public void clear() {
        Segment asegment[] = c;
        int j1 = asegment.length;
        for (int i1 = 0; i1 < j1; i1++)
            asegment[i1].m();

    }

    public boolean containsKey(Object obj) {
        boolean flag;
        if (obj == null) {
            flag = false;
        } else {
            int i1 = a(obj);
            flag = b(i1).d(obj, i1);
        }
        return flag;
    }

    public boolean containsValue(Object obj) {
        if (obj != null) goto _L2; else goto _L1
_L1:
        boolean flag = false;
_L3:
        return flag;
_L2:
        int i1;
        long l3;
        Segment asegment[];
        asegment = c;
        i1 = 0;
        l3 = -1L;
_L7:
        int j1;
        int l1;
        long l2;
        if (i1 >= 3)
            break MISSING_BLOCK_LABEL_170;
        l1 = asegment.length;
        l2 = 0L;
        j1 = 0;
_L6:
        int k1;
        AtomicReferenceArray atomicreferencearray;
        Segment segment;
        if (j1 >= l1)
            break MISSING_BLOCK_LABEL_162;
        segment = asegment[j1];
        k1 = segment.b;
        atomicreferencearray = segment.e;
        k1 = 0;
_L5:
        i i2;
        if (k1 >= atomicreferencearray.length())
            break MISSING_BLOCK_LABEL_145;
        i2 = (i)atomicreferencearray.get(k1);
_L4:
label0:
        {
            if (i2 == null)
                break MISSING_BLOCK_LABEL_139;
            Object obj1 = segment.e(i2);
            if (obj1 == null || !f.a(obj, obj1))
                break label0;
            flag = true;
        }
          goto _L3
        i2 = i2.b();
          goto _L4
        k1++;
          goto _L5
        l2 += segment.c;
        j1++;
          goto _L6
        if (l2 != l3)
            break MISSING_BLOCK_LABEL_176;
        flag = false;
          goto _L3
        i1++;
        l3 = l2;
          goto _L7
    }

    boolean d() {
        boolean flag;
        if (j > 0L)
            flag = true;
        else
            flag = false;
        return flag;
    }

    boolean e() {
        boolean flag;
        if (g != com.google.common.collect.Strength.a)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public Set entrySet() {
        Object obj = t;
        if (obj == null) {
            obj = new c();
            t = ((Set) (obj));
        }
        return ((Set) (obj));
    }

    boolean f() {
        boolean flag;
        if (h != com.google.common.collect.Strength.a)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public Object get(Object obj) {
        if (obj == null) {
            obj = null;
        } else {
            int i1 = a(obj);
            obj = b(i1).c(obj, i1);
        }
        return obj;
    }

    public boolean isEmpty() {
        int i1;
        long l1;
        boolean flag1;
        Segment asegment[];
        flag1 = false;
        asegment = c;
        i1 = 0;
        l1 = 0L;
_L5:
        if (i1 >= asegment.length) goto _L2; else goto _L1
_L1:
        if (asegment[i1].b == 0) goto _L4; else goto _L3
_L3:
        boolean flag = flag1;
_L9:
        return flag;
_L4:
        l1 += asegment[i1].c;
        i1++;
          goto _L5
_L2:
        if (l1 == 0L) goto _L7; else goto _L6
_L6:
        i1 = 0;
_L10:
        if (i1 >= asegment.length)
            break MISSING_BLOCK_LABEL_100;
        flag = flag1;
        if (asegment[i1].b != 0) goto _L9; else goto _L8
_L8:
        l1 -= asegment[i1].c;
        i1++;
          goto _L10
        flag = flag1;
        if (l1 != 0L) goto _L9; else goto _L7
_L7:
        flag = true;
          goto _L9
    }

    void j() {
        do {
            MapMaker.RemovalNotification removalnotification = (MapMaker.RemovalNotification)l.poll();
            if (removalnotification != null)
                try {
                    m.a(removalnotification);
                }
                catch (Exception exception) {
                    u.log(Level.WARNING, "Exception thrown by removal listener", exception);
                }
            else
                return;
        } while (true);
    }

    public Set keySet() {
        Object obj = r;
        if (obj == null) {
            obj = new h();
            r = ((Set) (obj));
        }
        return ((Set) (obj));
    }

    public Object put(Object obj, Object obj1) {
        com.google.common.base.i.a(obj);
        com.google.common.base.i.a(obj1);
        int i1 = a(obj);
        return b(i1).a(obj, i1, obj1, false);
    }

    public void putAll(Map map) {
        for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext(); put(map.getKey(), map.getValue()))
            map = (java.util.Map.Entry)iterator.next();

    }

    public Object putIfAbsent(Object obj, Object obj1) {
        com.google.common.base.i.a(obj);
        com.google.common.base.i.a(obj1);
        int i1 = a(obj);
        return b(i1).a(obj, i1, obj1, true);
    }

    public Object remove(Object obj) {
        if (obj == null) {
            obj = null;
        } else {
            int i1 = a(obj);
            obj = b(i1).e(obj, i1);
        }
        return obj;
    }

    public boolean remove(Object obj, Object obj1) {
        boolean flag;
        if (obj == null || obj1 == null) {
            flag = false;
        } else {
            int i1 = a(obj);
            flag = b(i1).b(obj, i1, obj1);
        }
        return flag;
    }

    public Object replace(Object obj, Object obj1) {
        com.google.common.base.i.a(obj);
        com.google.common.base.i.a(obj1);
        int i1 = a(obj);
        return b(i1).a(obj, i1, obj1);
    }

    public boolean replace(Object obj, Object obj1, Object obj2) {
        com.google.common.base.i.a(obj);
        com.google.common.base.i.a(obj2);
        boolean flag;
        if (obj1 == null) {
            flag = false;
        } else {
            int i1 = a(obj);
            flag = b(i1).a(obj, i1, obj1, obj2);
        }
        return flag;
    }

    public int size() {
        Segment asegment[] = c;
        long l1 = 0L;
        for (int i1 = 0; i1 < asegment.length; i1++)
            l1 += asegment[i1].b;

        return com.google.common.b.a.a(l1);
    }

    public Collection values() {
        Object obj = s;
        if (obj == null) {
            obj = new s();
            s = ((Collection) (obj));
        }
        return ((Collection) (obj));
    }


    // Unreferenced inner class com/google/common/collect/MapMakerInternalMap$d$1

/* anonymous class */
    class d._cls1 extends a {

        i a;
        i b;
        final d c;

        public void c(i i1) {
            a = i1;
        }

        public void d(i i1) {
            b = i1;
        }

        public i h() {
            return a;
        }

        public i i() {
            return b;
        }

             {
                c = d1;
                super();
                a = this;
                b = this;
            }
    }


    // Unreferenced inner class com/google/common/collect/MapMakerInternalMap$e$1

/* anonymous class */
    class e._cls1 extends a {

        i a;
        i b;
        final e c;

        public void a(long l1) {
        }

        public void a(i i1) {
            a = i1;
        }

        public void b(i i1) {
            b = i1;
        }

        public long e() {
            return 0xffffffffL;
        }

        public i f() {
            return a;
        }

        public i g() {
            return b;
        }

             {
                c = e1;
                super();
                a = this;
                b = this;
            }
    }

}
