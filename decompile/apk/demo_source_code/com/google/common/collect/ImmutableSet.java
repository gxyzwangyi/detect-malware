// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import com.google.common.base.i;
import java.util.*;

// Referenced classes of package com.google.common.collect:
//            ImmutableCollection, o, i, SingletonImmutableSet, 
//            RegularImmutableSet, ImmutableSortedSet, ImmutableEnumSet, t, 
//            z, ImmutableList, ImmutableAsList

public abstract class ImmutableSet extends ImmutableCollection
    implements Set {
    static abstract class Indexed extends ImmutableSet {

        abstract Object a(int j);

        public z d_() {
            return f().d_();
        }

        ImmutableList g() {
            return new ImmutableAsList(this) {

                final Indexed a;

                ImmutableCollection b() {
                    return j();
                }

                public Object get(int k) {
                    return a.a(k);
                }

                Indexed j() {
                    return a;
                }

             {
                a = indexed;
                super();
            }
            }
;
        }

        public Iterator iterator() {
            return d_();
        }

        Indexed() {
        }
    }


    ImmutableSet() {
    }

    private static transient ImmutableSet a(int j, Object aobj[]) {
        j;
        JVM INSTR tableswitch 0 1: default 24
    //                   0 146
    //                   1 152;
           goto _L1 _L2 _L3
_L1:
        int k;
        int l;
        int i1;
        int k1;
        int l1;
        Object aobj2[];
        k1 = c(j);
        aobj2 = new Object[k1];
        l1 = k1 - 1;
        i1 = 0;
        l = 0;
        k = 0;
_L5:
        int j1;
        int i2;
        Object obj;
        if (i1 >= j)
            break MISSING_BLOCK_LABEL_189;
        obj = o.a(aobj[i1], i1);
        i2 = obj.hashCode();
        j1 = i.a(i2);
_L6:
        int j2 = j1 & l1;
        Object obj1 = aobj2[j2];
        if (obj1 == null) {
            j1 = l + 1;
            aobj[l] = obj;
            aobj2[j2] = obj;
            l = k + i2;
            k = j1;
        } else {
label0:
            {
                if (!obj1.equals(obj))
                    break label0;
                j1 = l;
                l = k;
                k = j1;
            }
        }
        j1 = i1 + 1;
        i1 = l;
        l = k;
        k = i1;
        i1 = j1;
        if (true) goto _L5; else goto _L4
_L2:
        aobj = h();
_L4:
        return ((ImmutableSet) (aobj));
_L3:
        aobj = b(aobj[0]);
          goto _L4
        j1++;
          goto _L6
        Arrays.fill(aobj, l, j, null);
        if (l == 1)
            aobj = new SingletonImmutableSet(aobj[0], k);
        else
        if (k1 != c(l)) {
            aobj = a(l, aobj);
        } else {
            Object aobj1[] = aobj;
            if (l < aobj.length)
                aobj1 = o.b(aobj, l);
            aobj = new RegularImmutableSet(aobj1, k, aobj2, l1);
        }
          goto _L4
    }

    public static transient ImmutableSet a(Object obj, Object obj1, Object obj2, Object obj3, Object obj4, Object obj5, Object aobj[]) {
        Object aobj1[] = new Object[aobj.length + 6];
        aobj1[0] = obj;
        aobj1[1] = obj1;
        aobj1[2] = obj2;
        aobj1[3] = obj3;
        aobj1[4] = obj4;
        aobj1[5] = obj5;
        System.arraycopy(((Object) (aobj)), 0, ((Object) (aobj1)), 6, aobj.length);
        return a(aobj1.length, aobj1);
    }

    public static ImmutableSet a(Collection collection) {
        if (!(collection instanceof ImmutableSet) || (collection instanceof ImmutableSortedSet)) goto _L2; else goto _L1
_L1:
        ImmutableSet immutableset = (ImmutableSet)collection;
        if (immutableset.e()) goto _L4; else goto _L3
_L3:
        collection = immutableset;
_L6:
        return collection;
_L2:
        if (collection instanceof EnumSet) {
            collection = a((EnumSet)collection);
            continue; /* Loop/switch isn't completed */
        }
_L4:
        collection = ((Collection) (collection.toArray()));
        collection = a(collection.length, ((Object []) (collection)));
        if (true) goto _L6; else goto _L5
_L5:
    }

    private static ImmutableSet a(EnumSet enumset) {
        return ImmutableEnumSet.a(EnumSet.copyOf(enumset));
    }

    public static ImmutableSet b(Object obj) {
        return new SingletonImmutableSet(obj);
    }

    static int c(int j) {
        int l;
        if (j < 0x2ccccccc) {
            int k = Integer.highestOneBit(j - 1) << 1;
            do {
                l = k;
                if ((double)k * 0.69999999999999996D >= (double)j)
                    break;
                k <<= 1;
            } while (true);
        } else {
            boolean flag;
            if (j < 0x40000000)
                flag = true;
            else
                flag = false;
            i.a(flag, "collection too large");
            l = 0x40000000;
        }
        return l;
    }

    public static ImmutableSet h() {
        return RegularImmutableSet.a;
    }

    boolean a_() {
        return false;
    }

    public abstract z d_();

    public boolean equals(Object obj) {
        boolean flag;
        if (obj == this)
            flag = true;
        else
        if ((obj instanceof ImmutableSet) && a_() && ((ImmutableSet)obj).a_() && hashCode() != obj.hashCode())
            flag = false;
        else
            flag = t.a(this, obj);
        return flag;
    }

    public int hashCode() {
        return t.a(this);
    }

    public Iterator iterator() {
        return d_();
    }
}
