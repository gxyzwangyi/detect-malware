// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import com.google.common.base.d;
import com.google.common.base.e;
import com.google.common.base.i;
import java.util.AbstractCollection;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.NavigableMap;
import java.util.NavigableSet;
import java.util.Set;
import java.util.SortedMap;

// Referenced classes of package com.google.common.collect:
//            h, k, ImmutableEntry, r, 
//            g, z, w, t, 
//            b

public final class Maps {
    private static abstract class EntryFunction extends Enum
        implements com.google.common.base.d {

        public static final EntryFunction a;
        public static final EntryFunction b;
        private static final EntryFunction c[];

        public static EntryFunction valueOf(String s) {
            return (EntryFunction)Enum.valueOf(com/google/common/collect/Maps$EntryFunction, s);
        }

        public static EntryFunction[] values() {
            return (EntryFunction[])c.clone();
        }

        static  {
            a = new EntryFunction("KEY", 0) {

                public volatile Object a(Object obj) {
                    return a((java.util.Map.Entry)obj);
                }

                public Object a(java.util.Map.Entry entry) {
                    return entry.getKey();
                }

            }
;
            b = new EntryFunction("VALUE", 1) {

                public volatile Object a(Object obj) {
                    return a((java.util.Map.Entry)obj);
                }

                public Object a(java.util.Map.Entry entry) {
                    return entry.getValue();
                }

            }
;
            c = (new EntryFunction[] {
                a, b
            });
        }

        private EntryFunction(String s, int j) {
            super(s, j);
        }

    }

    static abstract class a extends t.a {

        abstract Map a();

        public void clear() {
            a().clear();
        }

        public boolean contains(Object obj) {
            boolean flag;
label0:
            {
                boolean flag1 = false;
                flag = flag1;
                if (!(obj instanceof java.util.Map.Entry))
                    break label0;
                obj = (java.util.Map.Entry)obj;
                Object obj1 = ((java.util.Map.Entry) (obj)).getKey();
                Object obj2 = Maps.a(a(), obj1);
                flag = flag1;
                if (!com.google.common.base.g.a(obj2, ((java.util.Map.Entry) (obj)).getValue()))
                    break label0;
                if (obj2 == null) {
                    flag = flag1;
                    if (!a().containsKey(obj1))
                        break label0;
                }
                flag = true;
            }
            return flag;
        }

        public boolean isEmpty() {
            return a().isEmpty();
        }

        public boolean remove(Object obj) {
            boolean flag;
            if (contains(obj)) {
                obj = (java.util.Map.Entry)obj;
                flag = a().keySet().remove(((java.util.Map.Entry) (obj)).getKey());
            } else {
                flag = false;
            }
            return flag;
        }

        public boolean removeAll(Collection collection) {
            boolean flag;
            try {
                flag = super.removeAll((Collection)com.google.common.base.i.a(collection));
            }
            catch (UnsupportedOperationException unsupportedoperationexception) {
                flag = t.a(this, collection.iterator());
            }
            return flag;
        }

        public boolean retainAll(Collection collection) {
            boolean flag;
            try {
                flag = super.retainAll((Collection)com.google.common.base.i.a(collection));
            }
            catch (UnsupportedOperationException unsupportedoperationexception) {
                java.util.HashSet hashset = t.a(collection.size());
                collection = collection.iterator();
                do {
                    if (!collection.hasNext())
                        break;
                    Object obj = collection.next();
                    if (contains(obj))
                        hashset.add(((java.util.Map.Entry)obj).getKey());
                } while (true);
                flag = a().keySet().retainAll(hashset);
            }
            return flag;
        }

        public int size() {
            return a().size();
        }

        a() {
        }
    }

    public static interface b {

        public abstract Object a(Object obj, Object obj1);
    }

    static abstract class c extends AbstractMap {

        abstract Iterator a();

        public void clear() {
            k.c(a());
        }

        public Set entrySet() {
            return new a(this) {

                final c a;

                Map a() {
                    return a;
                }

                public Iterator iterator() {
                    return a.a();
                }

             {
                a = c1;
                super();
            }
            }
;
        }

        c() {
        }
    }

    static class d extends t.a {

        final Map c;

        Map b() {
            return c;
        }

        public void clear() {
            b().clear();
        }

        public boolean contains(Object obj) {
            return b().containsKey(obj);
        }

        public boolean isEmpty() {
            return b().isEmpty();
        }

        public Iterator iterator() {
            return Maps.a(b().entrySet().iterator());
        }

        public boolean remove(Object obj) {
            boolean flag;
            if (contains(obj)) {
                b().remove(obj);
                flag = true;
            } else {
                flag = false;
            }
            return flag;
        }

        public int size() {
            return b().size();
        }

        d(Map map) {
            c = (Map)com.google.common.base.i.a(map);
        }
    }

    static class e extends c {

        final Map a;
        final b b;

        Iterator a() {
            return k.a(a.entrySet().iterator(), Maps.a(b));
        }

        public void clear() {
            a.clear();
        }

        public boolean containsKey(Object obj) {
            return a.containsKey(obj);
        }

        public Object get(Object obj) {
            Object obj1 = a.get(obj);
            if (obj1 != null || a.containsKey(obj))
                obj = b.a(obj, obj1);
            else
                obj = null;
            return obj;
        }

        public Set keySet() {
            return a.keySet();
        }

        public Object remove(Object obj) {
            if (a.containsKey(obj))
                obj = b.a(obj, a.remove(obj));
            else
                obj = null;
            return obj;
        }

        public int size() {
            return a.size();
        }

        public Collection values() {
            return new h(this);
        }

        e(Map map, b b1) {
            a = (Map)com.google.common.base.i.a(map);
            b = (b)com.google.common.base.i.a(b1);
        }
    }

    private static class f extends g
        implements NavigableMap {

        private java.util.Map.Entry a(java.util.Map.Entry entry) {
            if (entry == null)
                entry = null;
            else
                entry = Maps.a(b, entry);
            return entry;
        }

        public NavigableMap a(Object obj) {
            return headMap(obj, false);
        }

        public NavigableMap a(Object obj, Object obj1) {
            return subMap(obj, true, obj1, false);
        }

        protected NavigableMap b() {
            return (NavigableMap)super.c();
        }

        public NavigableMap b(Object obj) {
            return tailMap(obj, true);
        }

        protected SortedMap c() {
            return b();
        }

        public java.util.Map.Entry ceilingEntry(Object obj) {
            return a(b().ceilingEntry(obj));
        }

        public Object ceilingKey(Object obj) {
            return b().ceilingKey(obj);
        }

        public NavigableSet descendingKeySet() {
            return b().descendingKeySet();
        }

        public NavigableMap descendingMap() {
            return Maps.a(b().descendingMap(), b);
        }

        public java.util.Map.Entry firstEntry() {
            return a(b().firstEntry());
        }

        public java.util.Map.Entry floorEntry(Object obj) {
            return a(b().floorEntry(obj));
        }

        public Object floorKey(Object obj) {
            return b().floorKey(obj);
        }

        public NavigableMap headMap(Object obj, boolean flag) {
            return Maps.a(b().headMap(obj, flag), b);
        }

        public SortedMap headMap(Object obj) {
            return a(obj);
        }

        public java.util.Map.Entry higherEntry(Object obj) {
            return a(b().higherEntry(obj));
        }

        public Object higherKey(Object obj) {
            return b().higherKey(obj);
        }

        public java.util.Map.Entry lastEntry() {
            return a(b().lastEntry());
        }

        public java.util.Map.Entry lowerEntry(Object obj) {
            return a(b().lowerEntry(obj));
        }

        public Object lowerKey(Object obj) {
            return b().lowerKey(obj);
        }

        public NavigableSet navigableKeySet() {
            return b().navigableKeySet();
        }

        public java.util.Map.Entry pollFirstEntry() {
            return a(b().pollFirstEntry());
        }

        public java.util.Map.Entry pollLastEntry() {
            return a(b().pollLastEntry());
        }

        public NavigableMap subMap(Object obj, boolean flag, Object obj1, boolean flag1) {
            return Maps.a(b().subMap(obj, flag, obj1, flag1), b);
        }

        public SortedMap subMap(Object obj, Object obj1) {
            return a(obj, obj1);
        }

        public NavigableMap tailMap(Object obj, boolean flag) {
            return Maps.a(b().tailMap(obj, flag), b);
        }

        public SortedMap tailMap(Object obj) {
            return b(obj);
        }

        f(NavigableMap navigablemap, b b1) {
            super(navigablemap, b1);
        }
    }

    static class g extends e
        implements SortedMap {

        protected SortedMap c() {
            return (SortedMap)a;
        }

        public Comparator comparator() {
            return c().comparator();
        }

        public Object firstKey() {
            return c().firstKey();
        }

        public SortedMap headMap(Object obj) {
            return Maps.a(c().headMap(obj), b);
        }

        public Object lastKey() {
            return c().lastKey();
        }

        public SortedMap subMap(Object obj, Object obj1) {
            return Maps.a(c().subMap(obj, obj1), b);
        }

        public SortedMap tailMap(Object obj) {
            return Maps.a(c().tailMap(obj), b);
        }

        g(SortedMap sortedmap, b b1) {
            super(sortedmap, b1);
        }
    }

    static class h extends AbstractCollection {

        final Map a;

        final Map a() {
            return a;
        }

        public void clear() {
            a().clear();
        }

        public boolean contains(Object obj) {
            return a().containsValue(obj);
        }

        public boolean isEmpty() {
            return a().isEmpty();
        }

        public Iterator iterator() {
            return Maps.b(a().entrySet().iterator());
        }

        public boolean remove(Object obj) {
            boolean flag = super.remove(obj);
_L2:
            return flag;
            UnsupportedOperationException unsupportedoperationexception;
            unsupportedoperationexception;
            for (Iterator iterator1 = a().entrySet().iterator(); iterator1.hasNext();) {
                java.util.Map.Entry entry = (java.util.Map.Entry)iterator1.next();
                if (com.google.common.base.g.a(obj, entry.getValue())) {
                    a().remove(entry.getKey());
                    flag = true;
                    continue; /* Loop/switch isn't completed */
                }
            }

            flag = false;
            if (true) goto _L2; else goto _L1
_L1:
        }

        public boolean removeAll(Collection collection) {
            boolean flag;
            try {
                flag = super.removeAll((Collection)com.google.common.base.i.a(collection));
            }
            catch (UnsupportedOperationException unsupportedoperationexception) {
                java.util.HashSet hashset = t.a();
                Iterator iterator1 = a().entrySet().iterator();
                do {
                    if (!iterator1.hasNext())
                        break;
                    java.util.Map.Entry entry = (java.util.Map.Entry)iterator1.next();
                    if (collection.contains(entry.getValue()))
                        hashset.add(entry.getKey());
                } while (true);
                flag = a().keySet().removeAll(hashset);
            }
            return flag;
        }

        public boolean retainAll(Collection collection) {
            boolean flag;
            try {
                flag = super.retainAll((Collection)com.google.common.base.i.a(collection));
            }
            catch (UnsupportedOperationException unsupportedoperationexception) {
                java.util.HashSet hashset = t.a();
                Iterator iterator1 = a().entrySet().iterator();
                do {
                    if (!iterator1.hasNext())
                        break;
                    java.util.Map.Entry entry = (java.util.Map.Entry)iterator1.next();
                    if (collection.contains(entry.getValue()))
                        hashset.add(entry.getKey());
                } while (true);
                flag = a().keySet().retainAll(hashset);
            }
            return flag;
        }

        public int size() {
            return a().size();
        }

        h(Map map) {
            a = (Map)com.google.common.base.i.a(map);
        }
    }

    static abstract class i extends AbstractMap {

        private transient Set a;
        private transient Set b;
        private transient Collection c;

        abstract Set a();

        Set e() {
            return new d(this);
        }

        public Set entrySet() {
            Set set1 = a;
            Set set = set1;
            if (set1 == null) {
                set = a();
                a = set;
            }
            return set;
        }

        Collection f() {
            return new h(this);
        }

        public Set keySet() {
            Set set1 = b;
            Set set = set1;
            if (set1 == null) {
                set = e();
                b = set;
            }
            return set;
        }

        public Collection values() {
            Collection collection1 = c;
            Collection collection = collection1;
            if (collection1 == null) {
                collection = f();
                c = collection;
            }
            return collection;
        }

        i() {
        }
    }


    static final com.google.common.base.e.a a;

    static com.google.common.base.d a() {
        return EntryFunction.a;
    }

    static com.google.common.base.d a(b b1) {
        com.google.common.base.i.a(b1);
        return new com.google.common.base.d(b1) {

            final b a;

            public volatile Object a(Object obj) {
                return a((java.util.Map.Entry)obj);
            }

            public java.util.Map.Entry a(java.util.Map.Entry entry) {
                return Maps.a(a, entry);
            }

             {
                a = b1;
                super();
            }
        }
;
    }

    static com.google.common.base.d a(b b1, Object obj) {
        com.google.common.base.i.a(b1);
        return new com.google.common.base.d(b1, obj) {

            final b a;
            final Object b;

            public Object a(Object obj1) {
                return a.a(b, obj1);
            }

             {
                a = b1;
                b = obj;
                super();
            }
        }
;
    }

    static b a(com.google.common.base.d d1) {
        com.google.common.base.i.a(d1);
        return new b(d1) {

            final com.google.common.base.d a;

            public Object a(Object obj, Object obj1) {
                return a.a(obj1);
            }

             {
                a = d1;
                super();
            }
        }
;
    }

    static Object a(Map map, Object obj) {
        Object obj1 = null;
        com.google.common.base.i.a(map);
        try {
            map = ((Map) (map.get(obj)));
        }
        // Misplaced declaration of an exception variable
        catch (Map map) {
            map = obj1;
        }
        // Misplaced declaration of an exception variable
        catch (Map map) {
            map = obj1;
        }
        return map;
    }

    public static HashMap a(int j) {
        return new HashMap(b(j));
    }

    static Iterator a(Iterator iterator) {
        return k.a(iterator, a());
    }

    public static LinkedHashMap a(Map map) {
        return new LinkedHashMap(map);
    }

    static java.util.Map.Entry a(b b1, java.util.Map.Entry entry) {
        com.google.common.base.i.a(b1);
        com.google.common.base.i.a(entry);
        return new com.google.common.collect.b(entry, b1) {

            final java.util.Map.Entry a;
            final b b;

            public Object getKey() {
                return a.getKey();
            }

            public Object getValue() {
                return b.a(a.getKey(), a.getValue());
            }

             {
                a = entry;
                b = b1;
                super();
            }
        }
;
    }

    public static java.util.Map.Entry a(Object obj, Object obj1) {
        return new ImmutableEntry(obj, obj1);
    }

    static java.util.Map.Entry a(java.util.Map.Entry entry) {
        com.google.common.base.i.a(entry);
        return new com.google.common.collect.b(entry) {

            final java.util.Map.Entry a;

            public Object getKey() {
                return a.getKey();
            }

            public Object getValue() {
                return a.getValue();
            }

             {
                a = entry;
                super();
            }
        }
;
    }

    public static Map a(Map map, com.google.common.base.d d1) {
        return a(map, a(d1));
    }

    public static Map a(Map map, b b1) {
        if (map instanceof SortedMap)
            map = a((SortedMap)map, b1);
        else
            map = new e(map, b1);
        return map;
    }

    public static NavigableMap a(NavigableMap navigablemap, b b1) {
        return new f(navigablemap, b1);
    }

    public static SortedMap a(SortedMap sortedmap, b b1) {
        return r.a(sortedmap, b1);
    }

    static int b(int j) {
        if (j < 3) {
            com.google.common.collect.g.a(j, "expectedSize");
            j++;
        } else
        if (j < 0x40000000)
            j = (int)((float)j / 0.75F + 1.0F);
        else
            j = 0x7fffffff;
        return j;
    }

    static com.google.common.base.d b() {
        return EntryFunction.b;
    }

    static Object b(java.util.Map.Entry entry) {
        if (entry == null)
            entry = null;
        else
            entry = ((java.util.Map.Entry) (entry.getKey()));
        return entry;
    }

    static String b(Map map) {
        StringBuilder stringbuilder = com.google.common.collect.h.a(map.size()).append('{');
        a.a(stringbuilder, map);
        return stringbuilder.append('}').toString();
    }

    static Iterator b(Iterator iterator) {
        return k.a(iterator, b());
    }

    static SortedMap b(SortedMap sortedmap, b b1) {
        return new g(sortedmap, b1);
    }

    static boolean b(Map map, Object obj) {
        boolean flag1 = false;
        com.google.common.base.i.a(map);
        boolean flag;
        try {
            flag = map.containsKey(obj);
        }
        // Misplaced declaration of an exception variable
        catch (Map map) {
            flag = flag1;
        }
        // Misplaced declaration of an exception variable
        catch (Map map) {
            flag = flag1;
        }
        return flag;
    }

    static z c(Iterator iterator) {
        return new z(iterator) {

            final Iterator a;

            public java.util.Map.Entry a() {
                return Maps.a((java.util.Map.Entry)a.next());
            }

            public boolean hasNext() {
                return a.hasNext();
            }

            public Object next() {
                return a();
            }

             {
                a = iterator;
                super();
            }
        }
;
    }

    static Object c(Map map, Object obj) {
        Object obj1 = null;
        com.google.common.base.i.a(map);
        try {
            map = ((Map) (map.remove(obj)));
        }
        // Misplaced declaration of an exception variable
        catch (Map map) {
            map = obj1;
        }
        // Misplaced declaration of an exception variable
        catch (Map map) {
            map = obj1;
        }
        return map;
    }

    public static HashMap c() {
        return new HashMap();
    }

    public static LinkedHashMap c(int j) {
        return new LinkedHashMap(b(j));
    }

    static boolean d(Map map, Object obj) {
        boolean flag;
        if (map == obj)
            flag = true;
        else
        if (obj instanceof Map) {
            obj = (Map)obj;
            flag = map.entrySet().equals(((Map) (obj)).entrySet());
        } else {
            flag = false;
        }
        return flag;
    }

    static  {
        a = com.google.common.collect.h.a.c("=");
    }

    // Unreferenced inner class com/google/common/collect/Maps$1

/* anonymous class */
    static final class _cls1 extends w {

        final com.google.common.base.d a;

        Object a(Object obj) {
            return b(obj);
        }

        java.util.Map.Entry b(Object obj) {
            return Maps.a(obj, a.a(obj));
        }
    }

}
