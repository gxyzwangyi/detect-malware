// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import com.google.common.base.*;
import java.io.Serializable;
import java.util.*;

// Referenced classes of package com.google.common.collect:
//            h, k, x

public final class Lists {
    private static class TransformingRandomAccessList extends AbstractList
        implements Serializable, RandomAccess {

        final List a;
        final d b;

        public void clear() {
            a.clear();
        }

        public Object get(int j) {
            return b.a(a.get(j));
        }

        public boolean isEmpty() {
            return a.isEmpty();
        }

        public Iterator iterator() {
            return listIterator();
        }

        public ListIterator listIterator(int j) {
            return new x(this, a.listIterator(j)) {

                final TransformingRandomAccessList a;

                Object a(Object obj) {
                    return a.b.a(obj);
                }

             {
                a = transformingrandomaccesslist;
                super(listiterator);
            }
            }
;
        }

        public Object remove(int j) {
            return b.a(a.remove(j));
        }

        public int size() {
            return a.size();
        }

        TransformingRandomAccessList(List list, d d1) {
            a = (List)i.a(list);
            b = (d)i.a(d1);
        }
    }

    private static class TransformingSequentialList extends AbstractSequentialList
        implements Serializable {

        final List a;
        final d b;

        public void clear() {
            a.clear();
        }

        public ListIterator listIterator(int j) {
            return new x(this, a.listIterator(j)) {

                final TransformingSequentialList a;

                Object a(Object obj) {
                    return a.b.a(obj);
                }

             {
                a = transformingsequentiallist;
                super(listiterator);
            }
            }
;
        }

        public int size() {
            return a.size();
        }

        TransformingSequentialList(List list, d d1) {
            a = (List)i.a(list);
            b = (d)i.a(d1);
        }
    }


    public static ArrayList a() {
        return new ArrayList();
    }

    public static ArrayList a(Iterable iterable) {
        i.a(iterable);
        if (iterable instanceof Collection)
            iterable = new ArrayList(h.a(iterable));
        else
            iterable = a(iterable.iterator());
        return iterable;
    }

    public static ArrayList a(Iterator iterator) {
        ArrayList arraylist = a();
        k.a(arraylist, iterator);
        return arraylist;
    }

    public static List a(List list, d d1) {
        if (list instanceof RandomAccess)
            list = new TransformingRandomAccessList(list, d1);
        else
            list = new TransformingSequentialList(list, d1);
        return list;
    }

    static boolean a(List list, Object obj) {
        boolean flag1 = true;
        if (obj != i.a(list)) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        if (!(obj instanceof List)) {
            flag = false;
            continue; /* Loop/switch isn't completed */
        }
        obj = (List)obj;
        int l = list.size();
        if (l != ((List) (obj)).size()) {
            flag = false;
            continue; /* Loop/switch isn't completed */
        }
        if ((list instanceof RandomAccess) && (obj instanceof RandomAccess)) {
            int j = 0;
            do {
                flag = flag1;
                if (j >= l)
                    continue; /* Loop/switch isn't completed */
                if (!g.a(list.get(j), ((List) (obj)).get(j))) {
                    flag = false;
                    continue; /* Loop/switch isn't completed */
                }
                j++;
            } while (true);
        }
        flag = k.a(list.iterator(), ((List) (obj)).iterator());
        if (true) goto _L4; else goto _L3
_L3:
    }

    static int b(List list, Object obj) {
        if (!(list instanceof RandomAccess)) goto _L2; else goto _L1
_L1:
        int j = d(list, obj);
_L4:
        return j;
_L2:
        for (list = list.listIterator(); list.hasNext();)
            if (g.a(obj, list.next())) {
                j = list.previousIndex();
                continue; /* Loop/switch isn't completed */
            }

        j = -1;
        if (true) goto _L4; else goto _L3
_L3:
    }

    static int c(List list, Object obj) {
        if (!(list instanceof RandomAccess)) goto _L2; else goto _L1
_L1:
        int j = e(list, obj);
_L4:
        return j;
_L2:
        for (list = list.listIterator(list.size()); list.hasPrevious();)
            if (g.a(obj, list.previous())) {
                j = list.nextIndex();
                continue; /* Loop/switch isn't completed */
            }

        j = -1;
        if (true) goto _L4; else goto _L3
_L3:
    }

    private static int d(List list, Object obj) {
        int j;
        boolean flag;
        int l;
        j = 0;
        flag = false;
        l = list.size();
        if (obj != null) goto _L2; else goto _L1
_L1:
        j = ((flag) ? 1 : 0);
_L7:
        if (j >= l) goto _L4; else goto _L3
_L3:
        if (list.get(j) != null) goto _L6; else goto _L5
_L5:
        return j;
_L6:
        j++;
          goto _L7
_L9:
        j++;
_L2:
        if (j >= l) goto _L4; else goto _L8
_L8:
        if (!obj.equals(list.get(j))) goto _L9; else goto _L5
_L4:
        j = -1;
          goto _L5
    }

    private static int e(List list, Object obj) {
        if (obj != null) goto _L2; else goto _L1
_L1:
        int j = list.size() - 1;
_L5:
        if (j < 0)
            break MISSING_BLOCK_LABEL_70;
        if (list.get(j) != null) goto _L4; else goto _L3
_L3:
        return j;
_L4:
        j--;
          goto _L5
_L2:
        int l = list.size() - 1;
_L7:
        if (l < 0)
            break MISSING_BLOCK_LABEL_70;
        j = l;
        if (obj.equals(list.get(l))) goto _L3; else goto _L6
_L6:
        l--;
          goto _L7
        j = -1;
          goto _L3
    }
}
