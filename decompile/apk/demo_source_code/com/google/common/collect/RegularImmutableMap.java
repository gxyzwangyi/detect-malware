// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import com.google.common.base.i;

// Referenced classes of package com.google.common.collect:
//            ImmutableMap, i, ImmutableMapEntry, g, 
//            ImmutableSet

final class RegularImmutableMap extends ImmutableMap {

    private final transient java.util.Map.Entry b[];
    private final transient ImmutableMapEntry c[];
    private final transient int d;

    private RegularImmutableMap(java.util.Map.Entry aentry[], ImmutableMapEntry aimmutablemapentry[], int j) {
        b = aentry;
        c = aimmutablemapentry;
        d = j;
    }

    static RegularImmutableMap a(int j, java.util.Map.Entry aentry[]) {
        i.b(j, aentry.length);
        int k;
        int l;
        Object aobj[];
        ImmutableMapEntry aimmutablemapentry[];
        if (j == aentry.length)
            aobj = aentry;
        else
            aobj = ImmutableMapEntry.a(j);
        k = i.a(j, 1.2D);
        aimmutablemapentry = ImmutableMapEntry.a(k);
        l = k - 1;
        k = 0;
        while (k < j)  {
            Object obj = aentry[k];
            Object obj1 = ((java.util.Map.Entry) (obj)).getKey();
            Object obj2 = ((java.util.Map.Entry) (obj)).getValue();
            g.a(obj1, obj2);
            int i1 = i.a(obj1.hashCode()) & l;
            ImmutableMapEntry immutablemapentry = aimmutablemapentry[i1];
            if (immutablemapentry == null) {
                boolean flag;
                if ((obj instanceof ImmutableMapEntry) && ((ImmutableMapEntry)obj).c())
                    flag = true;
                else
                    flag = false;
                if (flag)
                    obj = (ImmutableMapEntry)obj;
                else
                    obj = new ImmutableMapEntry(obj1, obj2);
            } else {
                obj = new ImmutableMapEntry.NonTerminalImmutableMapEntry(obj1, obj2, immutablemapentry);
            }
            aimmutablemapentry[i1] = ((ImmutableMapEntry) (obj));
            aobj[k] = ((java.util.Map.Entry) (obj));
            a(obj1, ((java.util.Map.Entry) (obj)), immutablemapentry);
            k++;
        }
        return new RegularImmutableMap(((java.util.Map.Entry []) (aobj)), aimmutablemapentry, l);
    }

    static transient RegularImmutableMap a(java.util.Map.Entry aentry[]) {
        return a(aentry.length, aentry);
    }

    static Object a(Object obj, ImmutableMapEntry aimmutablemapentry[], int j) {
        Object obj1 = null;
        if (obj != null) goto _L2; else goto _L1
_L1:
        aimmutablemapentry = obj1;
_L4:
        return aimmutablemapentry;
_L2:
        ImmutableMapEntry immutablemapentry = aimmutablemapentry[i.a(obj.hashCode()) & j];
        do {
            aimmutablemapentry = obj1;
            if (immutablemapentry != null) {
label0:
                {
                    if (!obj.equals(immutablemapentry.getKey()))
                        break label0;
                    aimmutablemapentry = ((ImmutableMapEntry []) (immutablemapentry.getValue()));
                }
            }
            if (true)
                continue;
            immutablemapentry = immutablemapentry.a();
        } while (true);
        if (true) goto _L4; else goto _L3
_L3:
    }

    static void a(Object obj, java.util.Map.Entry entry, ImmutableMapEntry immutablemapentry) {
        while (immutablemapentry != null)  {
            boolean flag;
            if (!obj.equals(immutablemapentry.getKey()))
                flag = true;
            else
                flag = false;
            a(flag, "key", entry, ((java.util.Map.Entry) (immutablemapentry)));
            immutablemapentry = immutablemapentry.a();
        }
    }

    boolean c() {
        return false;
    }

    public Object get(Object obj) {
        return a(obj, c, d);
    }

    ImmutableSet h() {
        return new ImmutableMapEntrySet.RegularEntrySet(this, b);
    }

    public int size() {
        return b.length;
    }
}
