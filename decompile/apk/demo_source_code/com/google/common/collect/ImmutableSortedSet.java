// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import com.google.common.base.i;
import java.util.*;

// Referenced classes of package com.google.common.collect:
//            ImmutableSortedSetFauxverideShim, u, p, RegularImmutableSortedSet, 
//            ImmutableList, j, DescendingImmutableSortedSet, z, 
//            k

public abstract class ImmutableSortedSet extends ImmutableSortedSetFauxverideShim
    implements u, NavigableSet {

    private static final Comparator c;
    private static final RegularImmutableSortedSet d;
    final transient Comparator a;
    transient ImmutableSortedSet b;

    ImmutableSortedSet(Comparator comparator1) {
        a = comparator1;
    }

    static int a(Comparator comparator1, Object obj, Object obj1) {
        return comparator1.compare(obj, obj1);
    }

    static RegularImmutableSortedSet a(Comparator comparator1) {
        if (c.equals(comparator1))
            comparator1 = d;
        else
            comparator1 = new RegularImmutableSortedSet(ImmutableList.c(), comparator1);
        return comparator1;
    }

    abstract int a(Object obj);

    int a(Object obj, Object obj1) {
        return a(a, obj, obj1);
    }

    abstract ImmutableSortedSet a(Object obj, boolean flag);

    abstract ImmutableSortedSet a(Object obj, boolean flag, Object obj1, boolean flag1);

    public ImmutableSortedSet b() {
        ImmutableSortedSet immutablesortedset1 = b;
        ImmutableSortedSet immutablesortedset = immutablesortedset1;
        if (immutablesortedset1 == null) {
            immutablesortedset = d();
            b = immutablesortedset;
            immutablesortedset.b = this;
        }
        return immutablesortedset;
    }

    public ImmutableSortedSet b(Object obj, Object obj1) {
        return b(obj, true, obj1, false);
    }

    abstract ImmutableSortedSet b(Object obj, boolean flag);

    public ImmutableSortedSet b(Object obj, boolean flag, Object obj1, boolean flag1) {
        i.a(obj);
        i.a(obj1);
        boolean flag2;
        if (a.compare(obj, obj1) <= 0)
            flag2 = true;
        else
            flag2 = false;
        i.a(flag2);
        return a(obj, flag, obj1, flag1);
    }

    public ImmutableSortedSet c(Object obj) {
        return c(obj, false);
    }

    public ImmutableSortedSet c(Object obj, boolean flag) {
        return a(i.a(obj), flag);
    }

    public abstract z c();

    public Object ceiling(Object obj) {
        return j.a(d(obj, true), null);
    }

    public Comparator comparator() {
        return a;
    }

    ImmutableSortedSet d() {
        return new DescendingImmutableSortedSet(this);
    }

    public ImmutableSortedSet d(Object obj) {
        return d(obj, true);
    }

    public ImmutableSortedSet d(Object obj, boolean flag) {
        return b(i.a(obj), flag);
    }

    public abstract z d_();

    public Iterator descendingIterator() {
        return c();
    }

    public NavigableSet descendingSet() {
        return b();
    }

    public Object first() {
        return d_().next();
    }

    public Object floor(Object obj) {
        return k.b(c(obj, true).c(), null);
    }

    public NavigableSet headSet(Object obj, boolean flag) {
        return c(obj, flag);
    }

    public SortedSet headSet(Object obj) {
        return c(obj);
    }

    public Object higher(Object obj) {
        return j.a(d(obj, false), null);
    }

    public Iterator iterator() {
        return d_();
    }

    public Object last() {
        return c().next();
    }

    public Object lower(Object obj) {
        return k.b(c(obj, false).c(), null);
    }

    public final Object pollFirst() {
        throw new UnsupportedOperationException();
    }

    public final Object pollLast() {
        throw new UnsupportedOperationException();
    }

    public NavigableSet subSet(Object obj, boolean flag, Object obj1, boolean flag1) {
        return b(obj, flag, obj1, flag1);
    }

    public SortedSet subSet(Object obj, Object obj1) {
        return b(obj, obj1);
    }

    public NavigableSet tailSet(Object obj, boolean flag) {
        return d(obj, flag);
    }

    public SortedSet tailSet(Object obj) {
        return d(obj);
    }

    static  {
        c = p.b();
        d = new RegularImmutableSortedSet(ImmutableList.c(), c);
    }
}
