// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import com.google.common.base.Equivalence;
import com.google.common.base.a;
import com.google.common.base.f;
import com.google.common.base.i;
import com.google.common.base.p;
import java.io.Serializable;
import java.util.AbstractMap;
import java.util.Collections;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

// Referenced classes of package com.google.common.collect:
//            GenericMapMaker, MapMakerInternalMap, ImmutableEntry

public final class MapMaker extends GenericMapMaker {
    static class NullConcurrentMap extends AbstractMap
        implements Serializable, ConcurrentMap {

        private final a a;
        private final RemovalCause b;

        void a(Object obj, Object obj1) {
            obj = new RemovalNotification(obj, obj1, b);
            a.a(((RemovalNotification) (obj)));
        }

        public boolean containsKey(Object obj) {
            return false;
        }

        public boolean containsValue(Object obj) {
            return false;
        }

        public Set entrySet() {
            return Collections.emptySet();
        }

        public Object get(Object obj) {
            return null;
        }

        public Object put(Object obj, Object obj1) {
            com.google.common.base.i.a(obj);
            com.google.common.base.i.a(obj1);
            a(obj, obj1);
            return null;
        }

        public Object putIfAbsent(Object obj, Object obj1) {
            return put(obj, obj1);
        }

        public Object remove(Object obj) {
            return null;
        }

        public boolean remove(Object obj, Object obj1) {
            return false;
        }

        public Object replace(Object obj, Object obj1) {
            com.google.common.base.i.a(obj);
            com.google.common.base.i.a(obj1);
            return null;
        }

        public boolean replace(Object obj, Object obj1, Object obj2) {
            com.google.common.base.i.a(obj);
            com.google.common.base.i.a(obj2);
            return false;
        }

        NullConcurrentMap(MapMaker mapmaker) {
            a = mapmaker.a();
            b = mapmaker.j;
        }
    }

    static abstract class RemovalCause extends Enum {

        public static final RemovalCause a;
        public static final RemovalCause b;
        public static final RemovalCause c;
        public static final RemovalCause d;
        public static final RemovalCause e;
        private static final RemovalCause f[];

        public static RemovalCause valueOf(String s) {
            return (RemovalCause)Enum.valueOf(com/google/common/collect/MapMaker$RemovalCause, s);
        }

        public static RemovalCause[] values() {
            return (RemovalCause[])f.clone();
        }

        static  {
            a = new RemovalCause("EXPLICIT", 0) {

            }
;
            b = new RemovalCause("REPLACED", 1) {

            }
;
            c = new RemovalCause("COLLECTED", 2) {

            }
;
            d = new RemovalCause("EXPIRED", 3) {

            }
;
            e = new RemovalCause("SIZE", 4) {

            }
;
            f = (new RemovalCause[] {
                a, b, c, d, e
            });
        }

        private RemovalCause(String s, int i1) {
            super(s, i1);
        }

    }

    static final class RemovalNotification extends ImmutableEntry {

        private final RemovalCause c;

        RemovalNotification(Object obj, Object obj1, RemovalCause removalcause) {
            super(obj, obj1);
            c = removalcause;
        }
    }

    static interface a {

        public abstract void a(RemovalNotification removalnotification);
    }


    boolean b;
    int c;
    int d;
    int e;
    MapMakerInternalMap.Strength f;
    MapMakerInternalMap.Strength g;
    long h;
    long i;
    RemovalCause j;
    Equivalence k;
    p l;

    public MapMaker() {
        c = -1;
        d = -1;
        e = -1;
        h = -1L;
        i = -1L;
    }

    public MapMaker a(int i1) {
        boolean flag1 = true;
        boolean flag;
        if (d == -1)
            flag = true;
        else
            flag = false;
        com.google.common.base.i.b(flag, "concurrency level was already set to %s", new Object[] {
            Integer.valueOf(d)
        });
        if (i1 > 0)
            flag = flag1;
        else
            flag = false;
        com.google.common.base.i.a(flag);
        d = i1;
        return this;
    }

    Equivalence b() {
        return (Equivalence)com.google.common.base.f.a(k, e().a());
    }

    int c() {
        int i1;
        if (c == -1)
            i1 = 16;
        else
            i1 = c;
        return i1;
    }

    int d() {
        int i1;
        if (d == -1)
            i1 = 4;
        else
            i1 = d;
        return i1;
    }

    MapMakerInternalMap.Strength e() {
        return (MapMakerInternalMap.Strength)com.google.common.base.f.a(f, com.google.common.collect.MapMakerInternalMap.Strength.a);
    }

    MapMakerInternalMap.Strength f() {
        return (MapMakerInternalMap.Strength)com.google.common.base.f.a(g, com.google.common.collect.MapMakerInternalMap.Strength.a);
    }

    long g() {
        long l1;
        if (h == -1L)
            l1 = 0L;
        else
            l1 = h;
        return l1;
    }

    long h() {
        long l1;
        if (i == -1L)
            l1 = 0L;
        else
            l1 = i;
        return l1;
    }

    p i() {
        return (p)com.google.common.base.f.a(l, p.b());
    }

    public ConcurrentMap j() {
        Object obj;
        if (!b) {
            obj = new ConcurrentHashMap(c(), 0.75F, d());
        } else {
            if (j == null)
                obj = new MapMakerInternalMap(this);
            else
                obj = new NullConcurrentMap(this);
            obj = (ConcurrentMap)obj;
        }
        return ((ConcurrentMap) (obj));
    }

    public String toString() {
        com.google.common.base.f.a a1 = com.google.common.base.f.a(this);
        if (c != -1)
            a1.a("initialCapacity", c);
        if (d != -1)
            a1.a("concurrencyLevel", d);
        if (e != -1)
            a1.a("maximumSize", e);
        if (h != -1L)
            a1.a("expireAfterWrite", (new StringBuilder()).append(h).append("ns").toString());
        if (i != -1L)
            a1.a("expireAfterAccess", (new StringBuilder()).append(i).append("ns").toString());
        if (f != null)
            a1.a("keyStrength", com.google.common.base.a.a(f.toString()));
        if (g != null)
            a1.a("valueStrength", com.google.common.base.a.a(g.toString()));
        if (k != null)
            a1.a("keyEquivalence");
        if (a != null)
            a1.a("removalListener");
        return a1.toString();
    }
}
