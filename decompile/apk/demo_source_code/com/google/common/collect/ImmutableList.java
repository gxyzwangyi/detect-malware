// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import com.google.common.base.i;
import java.util.*;

// Referenced classes of package com.google.common.collect:
//            ImmutableCollection, SingletonImmutableList, o, RegularImmutableList, 
//            Lists, aa, z, a

public abstract class ImmutableList extends ImmutableCollection
    implements List, RandomAccess {
    private static class ReverseImmutableList extends ImmutableList {

        private final transient ImmutableList a;

        private int b(int j) {
            return size() - 1 - j;
        }

        private int c(int j) {
            return size() - j;
        }

        public ImmutableList a(int j, int k) {
            com.google.common.base.i.a(j, k, size());
            return a.a(c(k), c(j)).h();
        }

        public boolean contains(Object obj) {
            return a.contains(obj);
        }

        boolean e() {
            return a.e();
        }

        public Object get(int j) {
            com.google.common.base.i.a(j, size());
            return a.get(b(j));
        }

        public ImmutableList h() {
            return a;
        }

        public int indexOf(Object obj) {
            int j = a.lastIndexOf(obj);
            if (j >= 0)
                j = b(j);
            else
                j = -1;
            return j;
        }

        public Iterator iterator() {
            return d_();
        }

        public int lastIndexOf(Object obj) {
            int j = a.indexOf(obj);
            if (j >= 0)
                j = b(j);
            else
                j = -1;
            return j;
        }

        public ListIterator listIterator() {
            return d();
        }

        public ListIterator listIterator(int j) {
            return a(j);
        }

        public int size() {
            return a.size();
        }

        public List subList(int j, int k) {
            return a(j, k);
        }

        ReverseImmutableList(ImmutableList immutablelist) {
            a = immutablelist;
        }
    }

    class SubList extends ImmutableList {

        final transient int a;
        final transient int b;
        final ImmutableList c;

        public ImmutableList a(int j, int k) {
            com.google.common.base.i.a(j, k, b);
            return c.a(a + j, a + k);
        }

        boolean e() {
            return true;
        }

        public Object get(int j) {
            com.google.common.base.i.a(j, b);
            return c.get(a + j);
        }

        public Iterator iterator() {
            return d_();
        }

        public ListIterator listIterator() {
            return d();
        }

        public ListIterator listIterator(int j) {
            return a(j);
        }

        public int size() {
            return b;
        }

        public List subList(int j, int k) {
            return a(j, k);
        }

        SubList(int j, int k) {
            c = ImmutableList.this;
            super();
            a = j;
            b = k;
        }
    }

    public static final class a extends ImmutableCollection.a {

        public ImmutableCollection.a a(Object obj) {
            return c(obj);
        }

        public ImmutableCollection.b a(Iterable iterable) {
            return b(iterable);
        }

        public ImmutableCollection.b a(Iterator iterator1) {
            return b(iterator1);
        }

        public ImmutableList a() {
            return ImmutableList.b(a, b);
        }

        public ImmutableCollection.b b(Object obj) {
            return c(obj);
        }

        public a b(Iterable iterable) {
            super.a(iterable);
            return this;
        }

        public a b(Iterator iterator1) {
            super.a(iterator1);
            return this;
        }

        public a c(Object obj) {
            super.a(obj);
            return this;
        }

        public a() {
            this(4);
        }

        a(int j) {
            super(j);
        }
    }


    ImmutableList() {
    }

    public static ImmutableList a(Iterable iterable) {
        com.google.common.base.i.a(iterable);
        if (iterable instanceof Collection)
            iterable = a((Collection)iterable);
        else
            iterable = a(iterable.iterator());
        return iterable;
    }

    public static ImmutableList a(Object obj) {
        return new SingletonImmutableList(obj);
    }

    public static ImmutableList a(Object obj, Object obj1) {
        return b(new Object[] {
            obj, obj1
        });
    }

    public static ImmutableList a(Object obj, Object obj1, Object obj2) {
        return b(new Object[] {
            obj, obj1, obj2
        });
    }

    public static ImmutableList a(Collection collection) {
        if (collection instanceof ImmutableCollection) {
            ImmutableList immutablelist = ((ImmutableCollection)collection).f();
            collection = immutablelist;
            if (immutablelist.e())
                collection = a(immutablelist.toArray());
        } else {
            collection = b(collection.toArray());
        }
        return collection;
    }

    public static ImmutableList a(Iterator iterator1) {
        if (!iterator1.hasNext()) {
            iterator1 = c();
        } else {
            Object obj = iterator1.next();
            if (!iterator1.hasNext())
                iterator1 = a(obj);
            else
                iterator1 = (new a()).c(obj).b(iterator1).a();
        }
        return iterator1;
    }

    static ImmutableList a(Object aobj[]) {
        return b(aobj, aobj.length);
    }

    private static transient ImmutableList b(Object aobj[]) {
        return a(o.a(aobj));
    }

    static ImmutableList b(Object aobj[], int j) {
        j;
        JVM INSTR tableswitch 0 1: default 24
    //                   0 49
    //                   1 56;
           goto _L1 _L2 _L3
_L1:
        Object aobj1[] = aobj;
        if (j < aobj.length)
            aobj1 = o.b(aobj, j);
        aobj = new RegularImmutableList(aobj1);
_L5:
        return ((ImmutableList) (aobj));
_L2:
        aobj = c();
        continue; /* Loop/switch isn't completed */
_L3:
        aobj = new SingletonImmutableList(aobj[0]);
        if (true) goto _L5; else goto _L4
_L4:
    }

    public static ImmutableList c() {
        return RegularImmutableList.a;
    }

    public static a i() {
        return new a();
    }

    int a(Object aobj[], int j) {
        int l = size();
        for (int k = 0; k < l; k++)
            aobj[j + k] = get(k);

        return j + l;
    }

    public ImmutableList a(int j, int k) {
        int l;
        com.google.common.base.i.a(j, k, size());
        l = k - j;
        if (l != size()) goto _L2; else goto _L1
_L1:
        ImmutableList immutablelist = this;
_L4:
        return immutablelist;
_L2:
        switch (l) {
        default:
            immutablelist = b(j, k);
            break;

        case 0: // '\0'
            immutablelist = c();
            break;

        case 1: // '\001'
            immutablelist = a(get(j));
            break;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public aa a(int j) {
        return new com.google.common.collect.a(size(), j) {

            final ImmutableList a;

            protected Object a(int k) {
                return a.get(k);
            }

             {
                a = ImmutableList.this;
                super(j, k);
            }
        }
;
    }

    public final void add(int j, Object obj) {
        throw new UnsupportedOperationException();
    }

    public final boolean addAll(int j, Collection collection) {
        throw new UnsupportedOperationException();
    }

    ImmutableList b(int j, int k) {
        return new SubList(j, k - j);
    }

    public boolean contains(Object obj) {
        boolean flag;
        if (indexOf(obj) >= 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public aa d() {
        return a(0);
    }

    public z d_() {
        return d();
    }

    public boolean equals(Object obj) {
        return Lists.a(this, obj);
    }

    public final ImmutableList f() {
        return this;
    }

    public ImmutableList h() {
        Object obj;
        if (size() <= 1)
            obj = this;
        else
            obj = new ReverseImmutableList(this);
        return ((ImmutableList) (obj));
    }

    public int hashCode() {
        int j = 1;
        int l = size();
        for (int k = 0; k < l; k++)
            j = ~~(j * 31 + get(k).hashCode());

        return j;
    }

    public int indexOf(Object obj) {
        int j;
        if (obj == null)
            j = -1;
        else
            j = Lists.b(this, obj);
        return j;
    }

    public Iterator iterator() {
        return d_();
    }

    public int lastIndexOf(Object obj) {
        int j;
        if (obj == null)
            j = -1;
        else
            j = Lists.c(this, obj);
        return j;
    }

    public ListIterator listIterator() {
        return d();
    }

    public ListIterator listIterator(int j) {
        return a(j);
    }

    public final Object remove(int j) {
        throw new UnsupportedOperationException();
    }

    public final Object set(int j, Object obj) {
        throw new UnsupportedOperationException();
    }

    public List subList(int j, int k) {
        return a(j, k);
    }
}
