// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import java.util.*;

// Referenced classes of package com.google.common.collect:
//            ImmutableCollection, n, Multisets, LinkedHashMultiset, 
//            RegularImmutableMultiset, ImmutableSet, t, z

public abstract class ImmutableMultiset extends ImmutableCollection
    implements n {
    private final class EntrySet extends ImmutableSet.Indexed {

        final ImmutableMultiset a;

        Object a(int i) {
            return b(i);
        }

        n.a b(int i) {
            return a.a(i);
        }

        public boolean contains(Object obj) {
            boolean flag;
            boolean flag1;
            flag1 = false;
            flag = flag1;
            if (!(obj instanceof n.a)) goto _L2; else goto _L1
_L1:
            obj = (n.a)obj;
            if (((n.a) (obj)).b() > 0) goto _L4; else goto _L3
_L3:
            flag = flag1;
_L2:
            return flag;
_L4:
            flag = flag1;
            if (a.a(((n.a) (obj)).a()) == ((n.a) (obj)).b())
                flag = true;
            if (true) goto _L2; else goto _L5
_L5:
        }

        boolean e() {
            return a.e();
        }

        public int hashCode() {
            return a.hashCode();
        }

        public int size() {
            return a.d().size();
        }

        private EntrySet() {
            a = ImmutableMultiset.this;
            super();
        }

    }


    private transient ImmutableSet a;

    ImmutableMultiset() {
    }

    public static ImmutableMultiset a(Iterable iterable) {
        if (!(iterable instanceof ImmutableMultiset)) goto _L2; else goto _L1
_L1:
        ImmutableMultiset immutablemultiset = (ImmutableMultiset)iterable;
        if (immutablemultiset.e()) goto _L2; else goto _L3
_L3:
        iterable = immutablemultiset;
_L5:
        return iterable;
_L2:
        if (iterable instanceof n)
            iterable = Multisets.b(iterable);
        else
            iterable = LinkedHashMultiset.a(iterable);
        iterable = a(((Collection) (iterable.a())));
        if (true) goto _L5; else goto _L4
_L4:
    }

    static ImmutableMultiset a(Collection collection) {
        if (collection.isEmpty())
            collection = b();
        else
            collection = new RegularImmutableMultiset(collection);
        return collection;
    }

    public static ImmutableMultiset b() {
        return RegularImmutableMultiset.a;
    }

    private final ImmutableSet h() {
        Object obj;
        if (isEmpty())
            obj = ImmutableSet.h();
        else
            obj = new EntrySet();
        return ((ImmutableSet) (obj));
    }

    public final int a(Object obj, int i) {
        throw new UnsupportedOperationException();
    }

    int a(Object aobj[], int i) {
        for (Iterator iterator1 = c().iterator(); iterator1.hasNext();) {
            n.a a1 = (n.a)iterator1.next();
            Arrays.fill(aobj, i, a1.b() + i, a1.a());
            i += a1.b();
        }

        return i;
    }

    abstract n.a a(int i);

    public Set a() {
        return c();
    }

    public final boolean a(Object obj, int i, int j) {
        throw new UnsupportedOperationException();
    }

    public final int b(Object obj, int i) {
        throw new UnsupportedOperationException();
    }

    public final int c(Object obj, int i) {
        throw new UnsupportedOperationException();
    }

    public ImmutableSet c() {
        ImmutableSet immutableset1 = a;
        ImmutableSet immutableset = immutableset1;
        if (immutableset1 == null) {
            immutableset = h();
            a = immutableset;
        }
        return immutableset;
    }

    public boolean contains(Object obj) {
        boolean flag;
        if (a(obj) > 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public z d_() {
        return new z(c().d_()) {

            int a;
            Object b;
            final Iterator c;
            final ImmutableMultiset d;

            public boolean hasNext() {
                boolean flag;
                if (a > 0 || c.hasNext())
                    flag = true;
                else
                    flag = false;
                return flag;
            }

            public Object next() {
                if (a <= 0) {
                    n.a a1 = (n.a)c.next();
                    b = a1.a();
                    a = a1.b();
                }
                a = a - 1;
                return b;
            }

             {
                d = ImmutableMultiset.this;
                c = iterator1;
                super();
            }
        }
;
    }

    public boolean equals(Object obj) {
        return Multisets.a(this, obj);
    }

    public int hashCode() {
        return t.a(c());
    }

    public Iterator iterator() {
        return d_();
    }

    public String toString() {
        return c().toString();
    }
}
