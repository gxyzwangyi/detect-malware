// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import com.google.common.base.i;
import java.util.*;

// Referenced classes of package com.google.common.collect:
//            ImmutableSortedSet, SortedLists, ImmutableList, n, 
//            v, k, q, p, 
//            ImmutableSortedAsList, z

final class RegularImmutableSortedSet extends ImmutableSortedSet {

    private final transient ImmutableList c;

    RegularImmutableSortedSet(ImmutableList immutablelist, Comparator comparator) {
        super(comparator);
        c = immutablelist;
    }

    private int e(Object obj) {
        return Collections.binarySearch(c, obj, i());
    }

    int a(Object obj) {
        int j = -1;
        if (obj != null) goto _L2; else goto _L1
_L1:
        return j;
_L2:
        int l = SortedLists.a(c, obj, i(), SortedLists.KeyPresentBehavior.a, SortedLists.KeyAbsentBehavior.c);
        j = l;
        if (j < 0)
            j = -1;
        continue; /* Loop/switch isn't completed */
        obj;
        if (true) goto _L1; else goto _L3
_L3:
    }

    int a(Object aobj[], int j) {
        return c.a(aobj, j);
    }

    ImmutableSortedSet a(Object obj, boolean flag) {
        return a(0, e(obj, flag));
    }

    ImmutableSortedSet a(Object obj, boolean flag, Object obj1, boolean flag1) {
        return b(obj, flag).a(obj1, flag1);
    }

    RegularImmutableSortedSet a(int j, int l) {
        RegularImmutableSortedSet regularimmutablesortedset;
        if (j == 0 && l == size())
            regularimmutablesortedset = this;
        else
        if (j < l)
            regularimmutablesortedset = new RegularImmutableSortedSet(c.a(j, l), a);
        else
            regularimmutablesortedset = a(a);
        return regularimmutablesortedset;
    }

    ImmutableSortedSet b(Object obj, boolean flag) {
        return a(f(obj, flag), size());
    }

    public z c() {
        return c.h().d_();
    }

    public Object ceiling(Object obj) {
        int j = f(obj, true);
        if (j == size())
            obj = null;
        else
            obj = c.get(j);
        return obj;
    }

    public boolean contains(Object obj) {
        boolean flag;
        boolean flag1;
        flag1 = false;
        flag = flag1;
        if (obj == null)
            break MISSING_BLOCK_LABEL_25;
        int j = e(obj);
        flag = flag1;
        if (j >= 0)
            flag = true;
_L2:
        return flag;
        obj;
        flag = flag1;
        if (true) goto _L2; else goto _L1
_L1:
    }

    public boolean containsAll(Collection collection) {
        Object obj;
        obj = collection;
        if (collection instanceof n)
            obj = ((n)collection).d();
        if (v.a(comparator(), ((Iterable) (obj))) && ((Collection) (obj)).size() > 1) goto _L2; else goto _L1
_L1:
        boolean flag = super.containsAll(((Collection) (obj)));
_L7:
        return flag;
_L2:
        q q1;
        q1 = k.d(d_());
        obj = ((Collection) (obj)).iterator();
        collection = ((Collection) (((Iterator) (obj)).next()));
_L4:
        int j;
        if (!q1.hasNext())
            break MISSING_BLOCK_LABEL_168;
        j = a(q1.a(), collection);
        if (j < 0) {
            try {
                q1.next();
            }
            // Misplaced declaration of an exception variable
            catch (Collection collection) {
                flag = false;
                continue; /* Loop/switch isn't completed */
            }
            // Misplaced declaration of an exception variable
            catch (Collection collection) {
                flag = false;
                continue; /* Loop/switch isn't completed */
            }
            continue; /* Loop/switch isn't completed */
        }
        if (j != 0)
            continue; /* Loop/switch isn't completed */
        if (!((Iterator) (obj)).hasNext()) {
            flag = true;
            continue; /* Loop/switch isn't completed */
        }
        collection = ((Collection) (((Iterator) (obj)).next()));
        if (true) goto _L4; else goto _L3
_L3:
        if (j <= 0) goto _L4; else goto _L5
_L5:
        flag = false;
        continue; /* Loop/switch isn't completed */
        flag = false;
        if (true) goto _L7; else goto _L6
_L6:
    }

    ImmutableSortedSet d() {
        Object obj = p.a(a).a();
        if (isEmpty())
            obj = a(((Comparator) (obj)));
        else
            obj = new RegularImmutableSortedSet(c.h(), ((Comparator) (obj)));
        return ((ImmutableSortedSet) (obj));
    }

    public z d_() {
        return c.d_();
    }

    public Iterator descendingIterator() {
        return c();
    }

    int e(Object obj, boolean flag) {
        ImmutableList immutablelist = c;
        Object obj1 = com.google.common.base.i.a(obj);
        Comparator comparator = comparator();
        if (flag)
            obj = SortedLists.KeyPresentBehavior.d;
        else
            obj = SortedLists.KeyPresentBehavior.c;
        return SortedLists.a(immutablelist, obj1, comparator, ((SortedLists.KeyPresentBehavior) (obj)), SortedLists.KeyAbsentBehavior.b);
    }

    boolean e() {
        return c.e();
    }

    public boolean equals(Object obj) {
        boolean flag1 = true;
        if (obj != this) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L6:
        return flag;
_L2:
        if (!(obj instanceof Set)) {
            flag = false;
            continue; /* Loop/switch isn't completed */
        }
        obj = (Set)obj;
        if (size() != ((Set) (obj)).size()) {
            flag = false;
            continue; /* Loop/switch isn't completed */
        }
        flag = flag1;
        if (isEmpty())
            continue; /* Loop/switch isn't completed */
        if (!v.a(a, ((Iterable) (obj))))
            break MISSING_BLOCK_LABEL_146;
        Iterator iterator1 = ((Set) (obj)).iterator();
        int j;
        Object obj1;
        Object obj2;
        try {
            obj = d_();
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            flag = false;
            continue; /* Loop/switch isn't completed */
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            flag = false;
            continue; /* Loop/switch isn't completed */
        }
        flag = flag1;
        if (!((Iterator) (obj)).hasNext())
            continue; /* Loop/switch isn't completed */
        obj2 = ((Iterator) (obj)).next();
        obj1 = iterator1.next();
        if (obj1 == null)
            break; /* Loop/switch isn't completed */
        j = a(obj2, obj1);
        if (j == 0) goto _L4; else goto _L3
_L4:
        break MISSING_BLOCK_LABEL_82;
_L3:
        flag = false;
        continue; /* Loop/switch isn't completed */
        flag = containsAll(((Collection) (obj)));
        if (true) goto _L6; else goto _L5
_L5:
    }

    int f(Object obj, boolean flag) {
        ImmutableList immutablelist = c;
        Object obj1 = com.google.common.base.i.a(obj);
        Comparator comparator = comparator();
        if (flag)
            obj = SortedLists.KeyPresentBehavior.c;
        else
            obj = SortedLists.KeyPresentBehavior.d;
        return SortedLists.a(immutablelist, obj1, comparator, ((SortedLists.KeyPresentBehavior) (obj)), SortedLists.KeyAbsentBehavior.b);
    }

    public Object first() {
        if (isEmpty())
            throw new NoSuchElementException();
        else
            return c.get(0);
    }

    public Object floor(Object obj) {
        int j = e(obj, true) - 1;
        if (j == -1)
            obj = null;
        else
            obj = c.get(j);
        return obj;
    }

    ImmutableList g() {
        Object obj;
        if (size() <= 1)
            obj = c;
        else
            obj = new ImmutableSortedAsList(this, c);
        return ((ImmutableList) (obj));
    }

    public Object higher(Object obj) {
        int j = f(obj, false);
        if (j == size())
            obj = null;
        else
            obj = c.get(j);
        return obj;
    }

    Comparator i() {
        return a;
    }

    public Iterator iterator() {
        return d_();
    }

    public Object last() {
        if (isEmpty())
            throw new NoSuchElementException();
        else
            return c.get(size() - 1);
    }

    public Object lower(Object obj) {
        int j = e(obj, false) - 1;
        if (j == -1)
            obj = null;
        else
            obj = c.get(j);
        return obj;
    }

    public int size() {
        return c.size();
    }
}
