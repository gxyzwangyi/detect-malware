// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import java.util.*;

// Referenced classes of package com.google.common.collect:
//            AbstractMapBasedMultiset, Maps, Multisets, j

public final class LinkedHashMultiset extends AbstractMapBasedMultiset {

    private LinkedHashMultiset() {
        super(new LinkedHashMap());
    }

    private LinkedHashMultiset(int i) {
        super(Maps.c(i));
    }

    public static LinkedHashMultiset a(int i) {
        return new LinkedHashMultiset(i);
    }

    public static LinkedHashMultiset a(Iterable iterable) {
        LinkedHashMultiset linkedhashmultiset = a(Multisets.a(iterable));
        j.a(linkedhashmultiset, iterable);
        return linkedhashmultiset;
    }

    public volatile int a(Object obj) {
        return super.a(obj);
    }

    public volatile int a(Object obj, int i) {
        return super.a(obj, i);
    }

    public volatile Set a() {
        return super.a();
    }

    public volatile boolean a(Object obj, int i, int k) {
        return super.a(obj, i, k);
    }

    public volatile boolean add(Object obj) {
        return super.add(obj);
    }

    public volatile boolean addAll(Collection collection) {
        return super.addAll(collection);
    }

    public volatile int b(Object obj, int i) {
        return super.b(obj, i);
    }

    public volatile int c(Object obj, int i) {
        return super.c(obj, i);
    }

    public volatile void clear() {
        super.clear();
    }

    public volatile boolean contains(Object obj) {
        return super.contains(obj);
    }

    public volatile Set d() {
        return super.d();
    }

    public volatile boolean equals(Object obj) {
        return super.equals(obj);
    }

    public volatile int hashCode() {
        return super.hashCode();
    }

    public volatile boolean isEmpty() {
        return super.isEmpty();
    }

    public volatile Iterator iterator() {
        return super.iterator();
    }

    public volatile boolean remove(Object obj) {
        return super.remove(obj);
    }

    public volatile boolean removeAll(Collection collection) {
        return super.removeAll(collection);
    }

    public volatile boolean retainAll(Collection collection) {
        return super.retainAll(collection);
    }

    public volatile int size() {
        return super.size();
    }

    public volatile String toString() {
        return super.toString();
    }
}
