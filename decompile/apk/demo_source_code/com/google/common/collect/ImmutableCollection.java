// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import com.google.common.base.i;
import java.io.Serializable;
import java.util.*;

// Referenced classes of package com.google.common.collect:
//            RegularImmutableAsList, ImmutableList, z, o, 
//            g

public abstract class ImmutableCollection extends AbstractCollection
    implements Serializable {
    static abstract class a extends b {

        Object a[];
        int b;

        private void a(int j) {
            if (a.length < j)
                a = o.b(a, a(a.length, j));
        }

        public a a(Object obj) {
            i.a(obj);
            a(b + 1);
            Object aobj[] = a;
            int j = b;
            b = j + 1;
            aobj[j] = obj;
            return this;
        }

        public b a(Iterable iterable) {
            if (iterable instanceof Collection) {
                Collection collection = (Collection)iterable;
                int j = b;
                a(collection.size() + j);
            }
            super.a(iterable);
            return this;
        }

        public b b(Object obj) {
            return a(obj);
        }

        a(int j) {
            com.google.common.collect.g.a(j, "initialCapacity");
            a = new Object[j];
            b = 0;
        }
    }

    public static abstract class b {

        static int a(int j, int k) {
            if (k < 0)
                throw new AssertionError("cannot store more than MAX_VALUE elements");
            int l = (j >> 1) + j + 1;
            j = l;
            if (l < k)
                j = Integer.highestOneBit(k - 1) << 1;
            k = j;
            if (j < 0)
                k = 0x7fffffff;
            return k;
        }

        public b a(Iterable iterable) {
            for (iterable = iterable.iterator(); iterable.hasNext(); b(iterable.next()));
            return this;
        }

        public b a(Iterator iterator1) {
            for (; iterator1.hasNext(); b(iterator1.next()));
            return this;
        }

        public abstract b b(Object obj);

        b() {
        }
    }


    private transient ImmutableList a;

    ImmutableCollection() {
    }

    int a(Object aobj[], int j) {
        for (Iterator iterator1 = iterator(); iterator1.hasNext();) {
            aobj[j] = iterator1.next();
            j++;
        }

        return j;
    }

    public final boolean add(Object obj) {
        throw new UnsupportedOperationException();
    }

    public final boolean addAll(Collection collection) {
        throw new UnsupportedOperationException();
    }

    public final void clear() {
        throw new UnsupportedOperationException();
    }

    public abstract boolean contains(Object obj);

    public abstract z d_();

    abstract boolean e();

    public ImmutableList f() {
        ImmutableList immutablelist1 = a;
        ImmutableList immutablelist = immutablelist1;
        if (immutablelist1 == null) {
            immutablelist = g();
            a = immutablelist;
        }
        return immutablelist;
    }

    ImmutableList g() {
        size();
        JVM INSTR tableswitch 0 1: default 28
    //                   0 43
    //                   1 50;
           goto _L1 _L2 _L3
_L1:
        Object obj = new RegularImmutableAsList(this, toArray());
_L5:
        return ((ImmutableList) (obj));
_L2:
        obj = ImmutableList.c();
        continue; /* Loop/switch isn't completed */
_L3:
        obj = ImmutableList.a(d_().next());
        if (true) goto _L5; else goto _L4
_L4:
    }

    public Iterator iterator() {
        return d_();
    }

    public final boolean remove(Object obj) {
        throw new UnsupportedOperationException();
    }

    public final boolean removeAll(Collection collection) {
        throw new UnsupportedOperationException();
    }

    public final boolean retainAll(Collection collection) {
        throw new UnsupportedOperationException();
    }

    public final Object[] toArray() {
        int j = size();
        Object aobj[];
        if (j == 0) {
            aobj = o.a;
        } else {
            aobj = new Object[j];
            a(aobj, 0);
        }
        return aobj;
    }

    public final Object[] toArray(Object aobj[]) {
        int j;
        i.a(((Object) (aobj)));
        j = size();
        if (aobj.length >= j) goto _L2; else goto _L1
_L1:
        Object aobj1[] = o.a(aobj, j);
_L4:
        a(aobj1, 0);
        return aobj1;
_L2:
        aobj1 = aobj;
        if (aobj.length > j) {
            aobj[j] = null;
            aobj1 = aobj;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }
}
