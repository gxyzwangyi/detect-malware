// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import com.google.common.base.i;
import java.util.EnumMap;
import java.util.Set;

// Referenced classes of package com.google.common.collect:
//            ImmutableMap, j, k, Maps, 
//            z

final class ImmutableEnumMap extends ImmutableMap.IteratorBasedImmutableMap {

    private final transient EnumMap b;

    private ImmutableEnumMap(EnumMap enummap) {
        b = enummap;
        boolean flag;
        if (!enummap.isEmpty())
            flag = true;
        else
            flag = false;
        i.a(flag);
    }

    static ImmutableMap a(EnumMap enummap) {
        enummap.size();
        JVM INSTR tableswitch 0 1: default 28
    //                   0 39
    //                   1 46;
           goto _L1 _L2 _L3
_L1:
        enummap = new ImmutableEnumMap(enummap);
_L5:
        return enummap;
_L2:
        enummap = ImmutableMap.e();
        continue; /* Loop/switch isn't completed */
_L3:
        enummap = (java.util.Map.Entry)j.a(enummap.entrySet());
        enummap = ImmutableMap.b(enummap.getKey(), enummap.getValue());
        if (true) goto _L5; else goto _L4
_L4:
    }

    z a() {
        return k.a(b.keySet().iterator());
    }

    z b() {
        return Maps.c(b.entrySet().iterator());
    }

    boolean c() {
        return false;
    }

    public boolean containsKey(Object obj) {
        return b.containsKey(obj);
    }

    public boolean equals(Object obj) {
        boolean flag;
        if (obj == this) {
            flag = true;
        } else {
            Object obj1 = obj;
            if (obj instanceof ImmutableEnumMap)
                obj1 = ((ImmutableEnumMap)obj).b;
            flag = b.equals(obj1);
        }
        return flag;
    }

    public Object get(Object obj) {
        return b.get(obj);
    }

    public int size() {
        return b.size();
    }
}
