// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import java.util.Iterator;

// Referenced classes of package com.google.common.collect:
//            ImmutableBiMap, ImmutableMap, RegularImmutableMap, ImmutableSet, 
//            ImmutableMapEntry, i, ImmutableMapEntrySet, ImmutableList, 
//            z, ImmutableAsList, Maps, ImmutableCollection

class RegularImmutableBiMap extends ImmutableBiMap {
    private final class Inverse extends ImmutableBiMap {

        final RegularImmutableBiMap b;

        public ImmutableBiMap b() {
            return b;
        }

        boolean c() {
            return false;
        }

        public Object get(Object obj) {
            Object obj1;
            Object obj2;
            obj2 = null;
            obj1 = obj2;
            if (obj == null) goto _L2; else goto _L1
_L1:
            if (RegularImmutableBiMap.a(b) != null) goto _L4; else goto _L3
_L3:
            obj1 = obj2;
_L2:
            return obj1;
_L4:
            int j = i.a(obj.hashCode());
            int l = RegularImmutableBiMap.b(b);
            ImmutableMapEntry immutablemapentry = RegularImmutableBiMap.a(b)[j & l];
            do {
                obj1 = obj2;
                if (immutablemapentry != null) {
label0:
                    {
                        if (!obj.equals(immutablemapentry.getValue()))
                            break label0;
                        obj1 = immutablemapentry.getKey();
                    }
                }
                if (true)
                    continue;
                immutablemapentry = immutablemapentry.b();
            } while (true);
            if (true) goto _L2; else goto _L5
_L5:
        }

        ImmutableSet h() {
            return new InverseEntrySet(this);
        }

        public int size() {
            return b().size();
        }

        private Inverse() {
            b = RegularImmutableBiMap.this;
            super();
        }

    }

    final class Inverse.InverseEntrySet extends ImmutableMapEntrySet {

        final Inverse a;

        boolean a_() {
            return true;
        }

        ImmutableMap c() {
            return a;
        }

        public z d_() {
            return f().d_();
        }

        ImmutableList g() {
            return new ImmutableAsList(this) {

                final Inverse.InverseEntrySet a;

                ImmutableCollection b() {
                    return a;
                }

                public java.util.Map.Entry b(int i) {
                    java.util.Map.Entry entry = RegularImmutableBiMap.d(a.a.b)[i];
                    return Maps.a(entry.getValue(), entry.getKey());
                }

                public Object get(int i) {
                    return b(i);
                }

             {
                a = inverseentryset;
                super();
            }
            }
;
        }

        public int hashCode() {
            return RegularImmutableBiMap.c(a.b);
        }

        public Iterator iterator() {
            return d_();
        }

        Inverse.InverseEntrySet(Inverse inverse) {
            a = inverse;
            super();
        }
    }


    static final RegularImmutableBiMap b;
    private final transient ImmutableMapEntry c[];
    private final transient ImmutableMapEntry d[];
    private final transient java.util.Map.Entry e[];
    private final transient int f;
    private final transient int g;
    private transient ImmutableBiMap h;

    private RegularImmutableBiMap(ImmutableMapEntry aimmutablemapentry[], ImmutableMapEntry aimmutablemapentry1[], java.util.Map.Entry aentry[], int i, int j) {
        c = aimmutablemapentry;
        d = aimmutablemapentry1;
        e = aentry;
        f = i;
        g = j;
    }

    static ImmutableMapEntry[] a(RegularImmutableBiMap regularimmutablebimap) {
        return regularimmutablebimap.d;
    }

    static int b(RegularImmutableBiMap regularimmutablebimap) {
        return regularimmutablebimap.f;
    }

    static int c(RegularImmutableBiMap regularimmutablebimap) {
        return regularimmutablebimap.g;
    }

    static java.util.Map.Entry[] d(RegularImmutableBiMap regularimmutablebimap) {
        return regularimmutablebimap.e;
    }

    public ImmutableBiMap b() {
        if (!isEmpty()) goto _L2; else goto _L1
_L1:
        Object obj = ImmutableBiMap.b_();
_L4:
        return ((ImmutableBiMap) (obj));
_L2:
        ImmutableBiMap immutablebimap = h;
        obj = immutablebimap;
        if (immutablebimap == null) {
            obj = new Inverse();
            h = ((ImmutableBiMap) (obj));
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    boolean c() {
        return false;
    }

    public Object get(Object obj) {
        if (c == null)
            obj = null;
        else
            obj = RegularImmutableMap.a(obj, c, f);
        return obj;
    }

    ImmutableSet h() {
        Object obj;
        if (isEmpty())
            obj = ImmutableSet.h();
        else
            obj = new ImmutableMapEntrySet.RegularEntrySet(this, e);
        return ((ImmutableSet) (obj));
    }

    public int hashCode() {
        return g;
    }

    boolean k() {
        return true;
    }

    public int size() {
        return e.length;
    }

    static  {
        b = new RegularImmutableBiMap(null, null, (java.util.Map.Entry[])ImmutableMap.a, 0, 0);
    }
}
