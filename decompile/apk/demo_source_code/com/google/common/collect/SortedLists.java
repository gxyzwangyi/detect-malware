// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import com.google.common.base.i;
import java.util.*;

// Referenced classes of package com.google.common.collect:
//            Lists

final class SortedLists {
    public static abstract class KeyAbsentBehavior extends Enum {

        public static final KeyAbsentBehavior a;
        public static final KeyAbsentBehavior b;
        public static final KeyAbsentBehavior c;
        private static final KeyAbsentBehavior d[];

        public static KeyAbsentBehavior valueOf(String s) {
            return (KeyAbsentBehavior)Enum.valueOf(com/google/common/collect/SortedLists$KeyAbsentBehavior, s);
        }

        public static KeyAbsentBehavior[] values() {
            return (KeyAbsentBehavior[])d.clone();
        }

        abstract int a(int j);

        static  {
            a = new KeyAbsentBehavior("NEXT_LOWER", 0) {

                int a(int j) {
                    return j - 1;
                }

            }
;
            b = new KeyAbsentBehavior("NEXT_HIGHER", 1) {

                public int a(int j) {
                    return j;
                }

            }
;
            c = new KeyAbsentBehavior("INVERTED_INSERTION_INDEX", 2) {

                public int a(int j) {
                    return ~j;
                }

            }
;
            d = (new KeyAbsentBehavior[] {
                a, b, c
            });
        }

        private KeyAbsentBehavior(String s, int j) {
            super(s, j);
        }

    }

    public static abstract class KeyPresentBehavior extends Enum {

        public static final KeyPresentBehavior a;
        public static final KeyPresentBehavior b;
        public static final KeyPresentBehavior c;
        public static final KeyPresentBehavior d;
        public static final KeyPresentBehavior e;
        private static final KeyPresentBehavior f[];

        public static KeyPresentBehavior valueOf(String s) {
            return (KeyPresentBehavior)Enum.valueOf(com/google/common/collect/SortedLists$KeyPresentBehavior, s);
        }

        public static KeyPresentBehavior[] values() {
            return (KeyPresentBehavior[])f.clone();
        }

        abstract int a(Comparator comparator, Object obj, List list, int j);

        static  {
            a = new KeyPresentBehavior("ANY_PRESENT", 0) {

                int a(Comparator comparator, Object obj, List list, int j) {
                    return j;
                }

            }
;
            b = new KeyPresentBehavior("LAST_PRESENT", 1) {

                int a(Comparator comparator, Object obj, List list, int j) {
                    for (int k = list.size() - 1; j < k;) {
                        int l = j + k + 1 >>> 1;
                        if (comparator.compare(list.get(l), obj) > 0)
                            k = l - 1;
                        else
                            j = l;
                    }

                    return j;
                }

            }
;
            c = new KeyPresentBehavior("FIRST_PRESENT", 2) {

                int a(Comparator comparator, Object obj, List list, int j) {
                    boolean flag = false;
                    int k = j;
                    for (j = ((flag) ? 1 : 0); j < k;) {
                        int l = j + k >>> 1;
                        if (comparator.compare(list.get(l), obj) < 0)
                            j = l + 1;
                        else
                            k = l;
                    }

                    return j;
                }

            }
;
            d = new KeyPresentBehavior("FIRST_AFTER", 3) {

                public int a(Comparator comparator, Object obj, List list, int j) {
                    return b.a(comparator, obj, list, j) + 1;
                }

            }
;
            e = new KeyPresentBehavior("LAST_BEFORE", 4) {

                public int a(Comparator comparator, Object obj, List list, int j) {
                    return c.a(comparator, obj, list, j) - 1;
                }

            }
;
            f = (new KeyPresentBehavior[] {
                a, b, c, d, e
            });
        }

        private KeyPresentBehavior(String s, int j) {
            super(s, j);
        }

    }


    public static int a(List list, Object obj, Comparator comparator, KeyPresentBehavior keypresentbehavior, KeyAbsentBehavior keyabsentbehavior) {
        j = keypresentbehavior.a(comparator, obj, ((List) (obj1)).subList(j, k + 1), i1 - j) + j;
_L2:
        return j;
        i.a(comparator);
        i.a(list);
        i.a(keypresentbehavior);
        i.a(keyabsentbehavior);
        Object obj1 = list;
        if (!(list instanceof RandomAccess))
            obj1 = Lists.a(list);
        int j = 0;
        int k;
        int i1;
        for (k = ((List) (obj1)).size() - 1; j <= k;) {
            i1 = j + k >>> 1;
            int l = comparator.compare(obj, ((List) (obj1)).get(i1));
            if (l < 0) {
                k = i1 - 1;
            } else {
label0:
                {
                    if (l <= 0)
                        break label0;
                    j = i1 + 1;
                }
            }
        }

        j = keyabsentbehavior.a(j);
        if (true) goto _L2; else goto _L1
_L1:
    }
}
