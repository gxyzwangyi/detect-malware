// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import java.util.Iterator;
import java.util.NavigableSet;

// Referenced classes of package com.google.common.collect:
//            ImmutableSortedSet, p, z

class DescendingImmutableSortedSet extends ImmutableSortedSet {

    private final ImmutableSortedSet c;

    DescendingImmutableSortedSet(ImmutableSortedSet immutablesortedset) {
        super(p.a(immutablesortedset.comparator()).a());
        c = immutablesortedset;
    }

    int a(Object obj) {
        int i = c.a(obj);
        if (i != -1)
            i = size() - 1 - i;
        return i;
    }

    ImmutableSortedSet a(Object obj, boolean flag) {
        return c.d(obj, flag).b();
    }

    ImmutableSortedSet a(Object obj, boolean flag, Object obj1, boolean flag1) {
        return c.b(obj1, flag1, obj, flag).b();
    }

    public ImmutableSortedSet b() {
        return c;
    }

    ImmutableSortedSet b(Object obj, boolean flag) {
        return c.c(obj, flag).b();
    }

    public z c() {
        return c.d_();
    }

    public Object ceiling(Object obj) {
        return c.floor(obj);
    }

    public boolean contains(Object obj) {
        return c.contains(obj);
    }

    ImmutableSortedSet d() {
        throw new AssertionError("should never be called");
    }

    public z d_() {
        return c.c();
    }

    public Iterator descendingIterator() {
        return c();
    }

    public NavigableSet descendingSet() {
        return b();
    }

    boolean e() {
        return c.e();
    }

    public Object floor(Object obj) {
        return c.ceiling(obj);
    }

    public Object higher(Object obj) {
        return c.lower(obj);
    }

    public Iterator iterator() {
        return d_();
    }

    public Object lower(Object obj) {
        return c.higher(obj);
    }

    public int size() {
        return c.size();
    }
}
