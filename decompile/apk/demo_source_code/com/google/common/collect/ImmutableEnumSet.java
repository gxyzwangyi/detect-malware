// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import java.util.*;

// Referenced classes of package com.google.common.collect:
//            ImmutableSet, j, k, z

final class ImmutableEnumSet extends ImmutableSet {

    private final transient EnumSet a;
    private transient int b;

    private ImmutableEnumSet(EnumSet enumset) {
        a = enumset;
    }

    static ImmutableSet a(EnumSet enumset) {
        enumset.size();
        JVM INSTR tableswitch 0 1: default 28
    //                   0 39
    //                   1 46;
           goto _L1 _L2 _L3
_L1:
        enumset = new ImmutableEnumSet(enumset);
_L5:
        return enumset;
_L2:
        enumset = ImmutableSet.h();
        continue; /* Loop/switch isn't completed */
_L3:
        enumset = ImmutableSet.b(j.a(enumset));
        if (true) goto _L5; else goto _L4
_L4:
    }

    boolean a_() {
        return true;
    }

    public boolean contains(Object obj) {
        return a.contains(obj);
    }

    public boolean containsAll(Collection collection) {
        Object obj = collection;
        if (collection instanceof ImmutableEnumSet)
            obj = ((ImmutableEnumSet)collection).a;
        return a.containsAll(((Collection) (obj)));
    }

    public z d_() {
        return k.a(a.iterator());
    }

    boolean e() {
        return false;
    }

    public boolean equals(Object obj) {
        boolean flag;
        if (obj == this) {
            flag = true;
        } else {
            Object obj1 = obj;
            if (obj instanceof ImmutableEnumSet)
                obj1 = ((ImmutableEnumSet)obj).a;
            flag = a.equals(obj1);
        }
        return flag;
    }

    public int hashCode() {
        int l = b;
        int i = l;
        if (l == 0) {
            i = a.hashCode();
            b = i;
        }
        return i;
    }

    public boolean isEmpty() {
        return a.isEmpty();
    }

    public Iterator iterator() {
        return d_();
    }

    public int size() {
        return a.size();
    }

    public String toString() {
        return a.toString();
    }
}
