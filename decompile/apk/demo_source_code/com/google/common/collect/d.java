// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import com.google.common.base.g;
import java.util.*;

// Referenced classes of package com.google.common.collect:
//            n, Multisets, k

abstract class d extends AbstractCollection
    implements n {
    class a extends Multisets.b {

        final d a;

        n a() {
            return a;
        }

        a() {
            a = d.this;
            super();
        }
    }

    class b extends Multisets.c {

        final d a;

        n a() {
            return a;
        }

        public Iterator iterator() {
            return a.b();
        }

        public int size() {
            return a.c();
        }

        b() {
            a = d.this;
            super();
        }
    }


    private transient Set a;
    private transient Set b;

    d() {
    }

    public int a(Object obj) {
        Iterator iterator1 = a().iterator();
_L4:
        if (!iterator1.hasNext()) goto _L2; else goto _L1
_L1:
        n.a a1 = (n.a)iterator1.next();
        if (!g.a(a1.a(), obj)) goto _L4; else goto _L3
_L3:
        int i = a1.b();
_L6:
        return i;
_L2:
        i = 0;
        if (true) goto _L6; else goto _L5
_L5:
    }

    public int a(Object obj, int i) {
        throw new UnsupportedOperationException();
    }

    public Set a() {
        Set set1 = b;
        Set set = set1;
        if (set1 == null) {
            set = f();
            b = set;
        }
        return set;
    }

    public boolean a(Object obj, int i, int j) {
        return Multisets.a(this, obj, i, j);
    }

    public boolean add(Object obj) {
        a(obj, 1);
        return true;
    }

    public boolean addAll(Collection collection) {
        return Multisets.a(this, collection);
    }

    public int b(Object obj, int i) {
        throw new UnsupportedOperationException();
    }

    abstract Iterator b();

    abstract int c();

    public int c(Object obj, int i) {
        return Multisets.a(this, obj, i);
    }

    public void clear() {
        k.c(b());
    }

    public boolean contains(Object obj) {
        boolean flag;
        if (a(obj) > 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public Set d() {
        Set set1 = a;
        Set set = set1;
        if (set1 == null) {
            set = e();
            a = set;
        }
        return set;
    }

    Set e() {
        return new a();
    }

    public boolean equals(Object obj) {
        return Multisets.a(this, obj);
    }

    Set f() {
        return new b();
    }

    public int hashCode() {
        return a().hashCode();
    }

    public boolean isEmpty() {
        return a().isEmpty();
    }

    public Iterator iterator() {
        return Multisets.a(this);
    }

    public boolean remove(Object obj) {
        boolean flag = true;
        if (b(obj, 1) <= 0)
            flag = false;
        return flag;
    }

    public boolean removeAll(Collection collection) {
        return Multisets.b(this, collection);
    }

    public boolean retainAll(Collection collection) {
        return Multisets.c(this, collection);
    }

    public int size() {
        return Multisets.b(this);
    }

    public String toString() {
        return a().toString();
    }
}
