// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import com.google.common.base.*;
import java.util.*;

// Referenced classes of package com.google.common.collect:
//            z, aa, q, a, 
//            g, w

public final class k {
    private static class a
        implements q {

        private final Iterator a;
        private boolean b;
        private Object c;

        public Object a() {
            if (!b) {
                c = a.next();
                b = true;
            }
            return c;
        }

        public boolean hasNext() {
            boolean flag;
            if (b || a.hasNext())
                flag = true;
            else
                flag = false;
            return flag;
        }

        public Object next() {
            Object obj;
            if (!b) {
                obj = a.next();
            } else {
                obj = c;
                b = false;
                c = null;
            }
            return obj;
        }

        public void remove() {
            boolean flag;
            if (!b)
                flag = true;
            else
                flag = false;
            i.b(flag, "Can't remove after you've peeked at next");
            a.remove();
        }

        public a(Iterator iterator) {
            a = (Iterator)i.a(iterator);
        }
    }


    static final aa a = new aa() {

        public boolean hasNext() {
            return false;
        }

        public boolean hasPrevious() {
            return false;
        }

        public Object next() {
            throw new NoSuchElementException();
        }

        public int nextIndex() {
            return 0;
        }

        public Object previous() {
            throw new NoSuchElementException();
        }

        public int previousIndex() {
            return -1;
        }

    }
;
    private static final Iterator b = new Iterator() {

        public boolean hasNext() {
            return false;
        }

        public Object next() {
            throw new NoSuchElementException();
        }

        public void remove() {
            g.a(false);
        }

    }
;

    static aa a(Object aobj[], int l, int i1, int j1) {
        boolean flag;
        if (i1 >= 0)
            flag = true;
        else
            flag = false;
        i.a(flag);
        i.a(l, l + i1, aobj.length);
        i.b(j1, i1);
        if (i1 == 0)
            aobj = b();
        else
            aobj = new com.google.common.collect.a(i1, j1, aobj, l) {

                final Object a[];
                final int b;

                protected Object a(int k1) {
                    return a[b + k1];
                }

             {
                a = aobj;
                b = j1;
                super(l, i1);
            }
            }
;
        return ((aa) (aobj));
    }

    public static z a() {
        return b();
    }

    public static z a(Object obj) {
        return new z(obj) {

            boolean a;
            final Object b;

            public boolean hasNext() {
                boolean flag;
                if (!a)
                    flag = true;
                else
                    flag = false;
                return flag;
            }

            public Object next() {
                if (a) {
                    throw new NoSuchElementException();
                } else {
                    a = true;
                    return b;
                }
            }

             {
                b = obj;
                super();
            }
        }
;
    }

    public static z a(Iterator iterator) {
        i.a(iterator);
        if (iterator instanceof z)
            iterator = (z)iterator;
        else
            iterator = new z(iterator) {

                final Iterator a;

                public boolean hasNext() {
                    return a.hasNext();
                }

                public Object next() {
                    return a.next();
                }

             {
                a = iterator;
                super();
            }
            }
;
        return iterator;
    }

    public static transient z a(Object aobj[]) {
        return a(aobj, 0, aobj.length, 0);
    }

    public static Object a(Iterator iterator, int l) {
        a(l);
        int i1 = b(iterator, l);
        if (!iterator.hasNext())
            throw new IndexOutOfBoundsException((new StringBuilder()).append("position (").append(l).append(") must be less than the number of elements that remained (").append(i1).append(")").toString());
        else
            return iterator.next();
    }

    public static Iterator a(Iterator iterator, d d1) {
        i.a(d1);
        return new w(iterator, d1) {

            final d a;

            Object a(Object obj) {
                return a.a(obj);
            }

             {
                a = d1;
                super(iterator);
            }
        }
;
    }

    static void a(int l) {
        if (l < 0)
            throw new IndexOutOfBoundsException((new StringBuilder()).append("position (").append(l).append(") must not be negative").toString());
        else
            return;
    }

    public static boolean a(Collection collection, Iterator iterator) {
        i.a(collection);
        i.a(iterator);
        boolean flag;
        for (flag = false; iterator.hasNext(); flag |= collection.add(iterator.next()));
        return flag;
    }

    public static boolean a(Iterator iterator, j j1) {
        i.a(j1);
        boolean flag = false;
        do {
            if (!iterator.hasNext())
                break;
            if (j1.a(iterator.next())) {
                iterator.remove();
                flag = true;
            }
        } while (true);
        return flag;
    }

    public static boolean a(Iterator iterator, Object obj) {
        return b(iterator, Predicates.a(obj));
    }

    public static boolean a(Iterator iterator, Collection collection) {
        return a(iterator, Predicates.a(collection));
    }

    public static boolean a(Iterator iterator, Iterator iterator1) {
        boolean flag = false;
_L2:
        if (iterator.hasNext())
            continue;
        break; /* Loop/switch isn't completed */
_L4:
        do
            return flag;
        while (!iterator1.hasNext() || !g.a(iterator.next(), iterator1.next()));
        if (true) goto _L2; else goto _L1
_L1:
        if (iterator1.hasNext()) goto _L4; else goto _L3
_L3:
        flag = true;
          goto _L4
    }

    public static int b(Iterator iterator, int l) {
        int i1 = 0;
        i.a(iterator);
        boolean flag;
        if (l >= 0)
            flag = true;
        else
            flag = false;
        i.a(flag, "numberToAdvance must be nonnegative");
        for (; i1 < l && iterator.hasNext(); i1++)
            iterator.next();

        return i1;
    }

    static aa b() {
        return a;
    }

    public static Object b(Iterator iterator) {
        Object obj = iterator.next();
        if (!iterator.hasNext())
            return obj;
        StringBuilder stringbuilder = new StringBuilder();
        stringbuilder.append((new StringBuilder()).append("expected one element but was: <").append(obj).toString());
        for (int l = 0; l < 4 && iterator.hasNext(); l++)
            stringbuilder.append((new StringBuilder()).append(", ").append(iterator.next()).toString());

        if (iterator.hasNext())
            stringbuilder.append(", ...");
        stringbuilder.append('>');
        throw new IllegalArgumentException(stringbuilder.toString());
    }

    public static Object b(Iterator iterator, Object obj) {
        if (iterator.hasNext())
            obj = iterator.next();
        return obj;
    }

    public static boolean b(Iterator iterator, j j1) {
        boolean flag;
        if (c(iterator, j1) != -1)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public static int c(Iterator iterator, j j1) {
        int l;
        i.a(j1, "predicate");
        l = 0;
_L3:
        if (!iterator.hasNext())
            break MISSING_BLOCK_LABEL_41;
        if (!j1.a(iterator.next())) goto _L2; else goto _L1
_L1:
        return l;
_L2:
        l++;
          goto _L3
        l = -1;
          goto _L1
    }

    static Iterator c() {
        return b;
    }

    static void c(Iterator iterator) {
        i.a(iterator);
        for (; iterator.hasNext(); iterator.remove())
            iterator.next();

    }

    public static q d(Iterator iterator) {
        if (iterator instanceof a)
            iterator = (a)iterator;
        else
            iterator = new a(iterator);
        return iterator;
    }

    static ListIterator e(Iterator iterator) {
        return (ListIterator)iterator;
    }

}
