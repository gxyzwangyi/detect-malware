// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.google.common.collect;

import java.io.Serializable;
import java.util.*;

// Referenced classes of package com.google.common.collect:
//            j, RegularImmutableMap, g, ImmutableEnumMap, 
//            ImmutableSortedMap, ImmutableBiMap, ImmutableMapEntry, ImmutableSet, 
//            ImmutableCollection, ImmutableMapValues, Maps, t, 
//            ImmutableMapKeySet, z, ImmutableMapEntrySet, o, 
//            p

public abstract class ImmutableMap
    implements Serializable, Map {
    static abstract class IteratorBasedImmutableMap extends ImmutableMap {

        abstract z b();

        public Set entrySet() {
            return g();
        }

        ImmutableSet h() {
            class IteratorBasedImmutableMap._cls1EntrySetImpl extends ImmutableMapEntrySet {

                final IteratorBasedImmutableMap a;

                ImmutableMap c() {
                    return a;
                }

                public z d_() {
                    return a.b();
                }

                public Iterator iterator() {
                    return d_();
                }

            IteratorBasedImmutableMap._cls1EntrySetImpl(IteratorBasedImmutableMap iteratorbasedimmutablemap) {
                a = iteratorbasedimmutablemap;
                super();
            }
            }

            return new _cls1EntrySetImpl(this);
        }

        public Set keySet() {
            return i();
        }

        public Collection values() {
            return d();
        }

        IteratorBasedImmutableMap() {
        }
    }

    public static class a {

        Comparator a;
        ImmutableMapEntry b[];
        int c;
        boolean d;

        private void a(int l) {
            if (l > b.length) {
                b = (ImmutableMapEntry[])o.b(b, ImmutableCollection.b.a(b.length, l));
                d = false;
            }
        }

        public a a(Object obj, Object obj1) {
            a(c + 1);
            obj1 = ImmutableMap.c(obj, obj1);
            obj = b;
            int l = c;
            c = l + 1;
            obj[l] = obj1;
            return this;
        }

        public ImmutableMap a() {
            c;
            JVM INSTR tableswitch 0 1: default 28
        //                       0 118
        //                       1 125;
               goto _L1 _L2 _L3
_L1:
            if (a != null) {
                if (d)
                    b = (ImmutableMapEntry[])o.b(b, c);
                Arrays.sort(b, 0, c, p.a(a).a(Maps.b()));
            }
            boolean flag;
            Object obj;
            if (c == b.length)
                flag = true;
            else
                flag = false;
            d = flag;
            obj = RegularImmutableMap.a(c, b);
_L5:
            return ((ImmutableMap) (obj));
_L2:
            obj = ImmutableMap.e();
            continue; /* Loop/switch isn't completed */
_L3:
            obj = ImmutableMap.b(b[0].getKey(), b[0].getValue());
            if (true) goto _L5; else goto _L4
_L4:
        }

        public a() {
            this(4);
        }

        a(int l) {
            b = new ImmutableMapEntry[l];
            c = 0;
            d = false;
        }
    }


    static final java.util.Map.Entry a[] = new java.util.Map.Entry[0];
    private transient ImmutableSet b;
    private transient ImmutableSet c;
    private transient ImmutableCollection d;

    ImmutableMap() {
    }

    public static ImmutableMap a(Iterable iterable) {
        iterable = (java.util.Map.Entry[])(java.util.Map.Entry[])com.google.common.collect.j.a(iterable, a);
        iterable.length;
        JVM INSTR tableswitch 0 1: default 40
    //                   0 47
    //                   1 54;
           goto _L1 _L2 _L3
_L1:
        iterable = RegularImmutableMap.a(iterable);
_L5:
        return iterable;
_L2:
        iterable = e();
        continue; /* Loop/switch isn't completed */
_L3:
        iterable = iterable[0];
        iterable = b(iterable.getKey(), iterable.getValue());
        if (true) goto _L5; else goto _L4
_L4:
    }

    private static ImmutableMap a(EnumMap enummap) {
        EnumMap enummap1 = new EnumMap(enummap);
        java.util.Map.Entry entry;
        for (enummap = enummap1.entrySet().iterator(); enummap.hasNext(); com.google.common.collect.g.a(entry.getKey(), entry.getValue()))
            entry = (java.util.Map.Entry)enummap.next();

        return ImmutableEnumMap.a(enummap1);
    }

    public static ImmutableMap a(Map map) {
        if (!(map instanceof ImmutableMap) || (map instanceof ImmutableSortedMap)) goto _L2; else goto _L1
_L1:
        ImmutableMap immutablemap = (ImmutableMap)map;
        if (immutablemap.c()) goto _L4; else goto _L3
_L3:
        map = immutablemap;
_L6:
        return map;
_L2:
        if (map instanceof EnumMap) {
            map = a((EnumMap)map);
            continue; /* Loop/switch isn't completed */
        }
_L4:
        map = a(((Iterable) (map.entrySet())));
        if (true) goto _L6; else goto _L5
_L5:
    }

    static void a(boolean flag, String s, java.util.Map.Entry entry, java.util.Map.Entry entry1) {
        if (!flag)
            throw new IllegalArgumentException((new StringBuilder()).append("Multiple entries with same ").append(s).append(": ").append(entry).append(" and ").append(entry1).toString());
        else
            return;
    }

    public static ImmutableMap b(Object obj, Object obj1) {
        return ImmutableBiMap.a(obj, obj1);
    }

    static ImmutableMapEntry c(Object obj, Object obj1) {
        return new ImmutableMapEntry(obj, obj1);
    }

    public static ImmutableMap e() {
        return ImmutableBiMap.b_();
    }

    public static a f() {
        return new a();
    }

    z a() {
        return new z(g().d_()) {

            final z a;
            final ImmutableMap b;

            public boolean hasNext() {
                return a.hasNext();
            }

            public Object next() {
                return ((java.util.Map.Entry)a.next()).getKey();
            }

             {
                b = ImmutableMap.this;
                a = z1;
                super();
            }
        }
;
    }

    abstract boolean c();

    public final void clear() {
        throw new UnsupportedOperationException();
    }

    public boolean containsKey(Object obj) {
        boolean flag;
        if (get(obj) != null)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean containsValue(Object obj) {
        return d().contains(obj);
    }

    public ImmutableCollection d() {
        ImmutableCollection immutablecollection = d;
        Object obj = immutablecollection;
        if (immutablecollection == null) {
            obj = new ImmutableMapValues(this);
            d = ((ImmutableCollection) (obj));
        }
        return ((ImmutableCollection) (obj));
    }

    public Set entrySet() {
        return g();
    }

    public boolean equals(Object obj) {
        return Maps.d(this, obj);
    }

    public ImmutableSet g() {
        ImmutableSet immutableset1 = b;
        ImmutableSet immutableset = immutableset1;
        if (immutableset1 == null) {
            immutableset = h();
            b = immutableset;
        }
        return immutableset;
    }

    public abstract Object get(Object obj);

    abstract ImmutableSet h();

    public int hashCode() {
        return t.a(g());
    }

    public ImmutableSet i() {
        ImmutableSet immutableset1 = c;
        ImmutableSet immutableset = immutableset1;
        if (immutableset1 == null) {
            immutableset = j();
            c = immutableset;
        }
        return immutableset;
    }

    public boolean isEmpty() {
        boolean flag;
        if (size() == 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    ImmutableSet j() {
        Object obj;
        if (isEmpty())
            obj = ImmutableSet.h();
        else
            obj = new ImmutableMapKeySet(this);
        return ((ImmutableSet) (obj));
    }

    boolean k() {
        return false;
    }

    public Set keySet() {
        return i();
    }

    public final Object put(Object obj, Object obj1) {
        throw new UnsupportedOperationException();
    }

    public final void putAll(Map map) {
        throw new UnsupportedOperationException();
    }

    public final Object remove(Object obj) {
        throw new UnsupportedOperationException();
    }

    public String toString() {
        return Maps.b(this);
    }

    public Collection values() {
        return d();
    }

}
