// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.github.clans.fab;

import android.animation.*;
import android.content.Context;
import android.content.res.*;
import android.graphics.Color;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.os.Handler;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.view.*;
import android.view.animation.*;
import android.widget.ImageView;

// Referenced classes of package com.github.clans.fab:
//            b, FloatingActionButton, Label

public class FloatingActionMenu extends ViewGroup {
    public static interface a {

        public abstract void a(boolean flag);
    }


    private int A;
    private float B;
    private float C;
    private float D;
    private int E;
    private int F;
    private int G;
    private Drawable H;
    private int I;
    private Interpolator J;
    private Interpolator K;
    private boolean L;
    private boolean M;
    private int N;
    private int O;
    private int P;
    private int Q;
    private Typeface R;
    private boolean S;
    private ImageView T;
    private Animation U;
    private Animation V;
    private Animation W;
    private AnimatorSet a;
    private Animation aa;
    private boolean ab;
    private int ac;
    private a ad;
    private ValueAnimator ae;
    private ValueAnimator af;
    private int ag;
    private int ah;
    private Context ai;
    private String aj;
    private boolean ak;
    private AnimatorSet b;
    private AnimatorSet c;
    private int d;
    private FloatingActionButton e;
    private int f;
    private int g;
    private int h;
    private int i;
    private boolean j;
    private boolean k;
    private Handler l;
    private int m;
    private int n;
    private int o;
    private int p;
    private int q;
    private int r;
    private ColorStateList s;
    private float t;
    private int u;
    private boolean v;
    private int w;
    private int x;
    private int y;
    private boolean z;

    public FloatingActionMenu(Context context) {
        this(context, null);
    }

    public FloatingActionMenu(Context context, AttributeSet attributeset) {
        this(context, attributeset, 0);
    }

    public FloatingActionMenu(Context context, AttributeSet attributeset, int i1) {
        super(context, attributeset, i1);
        a = new AnimatorSet();
        b = new AnimatorSet();
        d = com.github.clans.fab.b.a(getContext(), 0.0F);
        g = com.github.clans.fab.b.a(getContext(), 0.0F);
        h = com.github.clans.fab.b.a(getContext(), 0.0F);
        l = new Handler();
        o = com.github.clans.fab.b.a(getContext(), 4F);
        p = com.github.clans.fab.b.a(getContext(), 8F);
        q = com.github.clans.fab.b.a(getContext(), 4F);
        r = com.github.clans.fab.b.a(getContext(), 8F);
        u = com.github.clans.fab.b.a(getContext(), 3F);
        B = 4F;
        C = 1.0F;
        D = 3F;
        L = true;
        S = true;
        a(context, attributeset);
    }

    private void a(int i1) {
        o = i1;
        p = i1;
        q = i1;
        r = i1;
    }

    private void a(Context context, AttributeSet attributeset) {
        attributeset = context.obtainStyledAttributes(attributeset, a.e.FloatingActionMenu, 0, 0);
        d = attributeset.getDimensionPixelSize(a.e.FloatingActionMenu_menu_buttonSpacing, d);
        g = attributeset.getDimensionPixelSize(a.e.FloatingActionMenu_menu_labels_margin, g);
        ah = attributeset.getInt(a.e.FloatingActionMenu_menu_labels_position, 0);
        int j1 = a.e.FloatingActionMenu_menu_labels_showAnimation;
        int i1;
        if (ah == 0)
            i1 = a.a.fab_slide_in_from_right;
        else
            i1 = a.a.fab_slide_in_from_left;
        m = attributeset.getResourceId(j1, i1);
        j1 = a.e.FloatingActionMenu_menu_labels_hideAnimation;
        if (ah == 0)
            i1 = a.a.fab_slide_out_to_right;
        else
            i1 = a.a.fab_slide_out_to_left;
        n = attributeset.getResourceId(j1, i1);
        o = attributeset.getDimensionPixelSize(a.e.FloatingActionMenu_menu_labels_paddingTop, o);
        p = attributeset.getDimensionPixelSize(a.e.FloatingActionMenu_menu_labels_paddingRight, p);
        q = attributeset.getDimensionPixelSize(a.e.FloatingActionMenu_menu_labels_paddingBottom, q);
        r = attributeset.getDimensionPixelSize(a.e.FloatingActionMenu_menu_labels_paddingLeft, r);
        s = attributeset.getColorStateList(a.e.FloatingActionMenu_menu_labels_textColor);
        if (s == null)
            s = ColorStateList.valueOf(-1);
        t = attributeset.getDimension(a.e.FloatingActionMenu_menu_labels_textSize, getResources().getDimension(a.b.labels_text_size));
        u = attributeset.getDimensionPixelSize(a.e.FloatingActionMenu_menu_labels_cornerRadius, u);
        v = attributeset.getBoolean(a.e.FloatingActionMenu_menu_labels_showShadow, true);
        w = attributeset.getColor(a.e.FloatingActionMenu_menu_labels_colorNormal, 0xff333333);
        x = attributeset.getColor(a.e.FloatingActionMenu_menu_labels_colorPressed, 0xff444444);
        y = attributeset.getColor(a.e.FloatingActionMenu_menu_labels_colorRipple, 0x66ffffff);
        z = attributeset.getBoolean(a.e.FloatingActionMenu_menu_showShadow, true);
        A = attributeset.getColor(a.e.FloatingActionMenu_menu_shadowColor, 0x66000000);
        B = attributeset.getDimension(a.e.FloatingActionMenu_menu_shadowRadius, B);
        C = attributeset.getDimension(a.e.FloatingActionMenu_menu_shadowXOffset, C);
        D = attributeset.getDimension(a.e.FloatingActionMenu_menu_shadowYOffset, D);
        E = attributeset.getColor(a.e.FloatingActionMenu_menu_colorNormal, 0xffda4336);
        F = attributeset.getColor(a.e.FloatingActionMenu_menu_colorPressed, 0xffe75043);
        G = attributeset.getColor(a.e.FloatingActionMenu_menu_colorRipple, 0x99ffffff);
        I = attributeset.getInt(a.e.FloatingActionMenu_menu_animationDelayPerItem, 50);
        H = attributeset.getDrawable(a.e.FloatingActionMenu_menu_icon);
        if (H == null)
            H = getResources().getDrawable(a.c.fab_add);
        M = attributeset.getBoolean(a.e.FloatingActionMenu_menu_labels_singleLine, false);
        N = attributeset.getInt(a.e.FloatingActionMenu_menu_labels_ellipsize, 0);
        O = attributeset.getInt(a.e.FloatingActionMenu_menu_labels_maxLines, -1);
        P = attributeset.getInt(a.e.FloatingActionMenu_menu_fab_size, 0);
        Q = attributeset.getResourceId(a.e.FloatingActionMenu_menu_labels_style, 0);
        context = attributeset.getString(a.e.FloatingActionMenu_menu_labels_customFont);
        try {
            if (!TextUtils.isEmpty(context))
                R = Typeface.createFromAsset(getContext().getAssets(), context);
        }
        // Misplaced declaration of an exception variable
        catch (AttributeSet attributeset) {
            throw new IllegalArgumentException((new StringBuilder()).append("Unable to load specified custom font: ").append(context).toString(), attributeset);
        }
        ac = attributeset.getInt(a.e.FloatingActionMenu_menu_openDirection, 0);
        ag = attributeset.getColor(a.e.FloatingActionMenu_menu_backgroundColor, 0);
        if (attributeset.hasValue(a.e.FloatingActionMenu_menu_fab_label)) {
            ak = true;
            aj = attributeset.getString(a.e.FloatingActionMenu_menu_fab_label);
        }
        if (attributeset.hasValue(a.e.FloatingActionMenu_menu_labels_padding))
            a(attributeset.getDimensionPixelSize(a.e.FloatingActionMenu_menu_labels_padding, 0));
        J = new OvershootInterpolator();
        K = new AnticipateInterpolator();
        ai = new ContextThemeWrapper(getContext(), Q);
        c();
        e();
        a(((TypedArray) (attributeset)));
        attributeset.recycle();
    }

    private void a(TypedArray typedarray) {
        int i1 = typedarray.getResourceId(a.e.FloatingActionMenu_menu_fab_show_animation, a.a.fab_scale_up);
        setMenuButtonShowAnimation(AnimationUtils.loadAnimation(getContext(), i1));
        W = AnimationUtils.loadAnimation(getContext(), i1);
        i1 = typedarray.getResourceId(a.e.FloatingActionMenu_menu_fab_hide_animation, a.a.fab_scale_down);
        setMenuButtonHideAnimation(AnimationUtils.loadAnimation(getContext(), i1));
        aa = AnimationUtils.loadAnimation(getContext(), i1);
    }

    private void a(FloatingActionButton floatingactionbutton) {
        String s1 = floatingactionbutton.getLabelText();
        if (!TextUtils.isEmpty(s1)) goto _L2; else goto _L1
_L1:
        return;
_L2:
        Label label;
        label = new Label(ai);
        label.setClickable(true);
        label.setFab(floatingactionbutton);
        label.setShowAnimation(AnimationUtils.loadAnimation(getContext(), m));
        label.setHideAnimation(AnimationUtils.loadAnimation(getContext(), n));
        if (Q <= 0)
            break; /* Loop/switch isn't completed */
        label.setTextAppearance(getContext(), Q);
        label.setShowShadow(false);
        label.setUsingStyle(true);
_L4:
        if (R != null)
            label.setTypeface(R);
        label.setText(s1);
        label.setOnClickListener(floatingactionbutton.getOnClickListener());
        addView(label);
        floatingactionbutton.setTag(a.d.fab_label, label);
        if (true) goto _L1; else goto _L3
_L3:
        label.a(w, x, y);
        label.setShowShadow(v);
        label.setCornerRadius(u);
        if (N > 0)
            setLabelEllipsize(label);
        label.setMaxLines(O);
        label.c();
        label.setTextSize(0, t);
        label.setTextColor(s);
        int l1 = r;
        int k1 = o;
        int j1 = k1;
        int i1 = l1;
        if (v) {
            i1 = l1 + (floatingactionbutton.getShadowRadius() + Math.abs(floatingactionbutton.getShadowXOffset()));
            j1 = k1 + (floatingactionbutton.getShadowRadius() + Math.abs(floatingactionbutton.getShadowYOffset()));
        }
        label.setPadding(i1, j1, r, o);
        if (O < 0 || M)
            label.setSingleLine(M);
          goto _L4
        if (true) goto _L1; else goto _L5
_L5:
    }

    static boolean a(FloatingActionMenu floatingactionmenu) {
        return floatingactionmenu.L;
    }

    static boolean a(FloatingActionMenu floatingactionmenu, boolean flag) {
        floatingactionmenu.j = flag;
        return flag;
    }

    private int b(int i1) {
        return (int)((double)i1 * 0.029999999999999999D + (double)i1);
    }

    static FloatingActionButton b(FloatingActionMenu floatingactionmenu) {
        return floatingactionmenu.e;
    }

    static a c(FloatingActionMenu floatingactionmenu) {
        return floatingactionmenu.ad;
    }

    private void c() {
        int j1 = Color.alpha(ag);
        int i1 = Color.red(ag);
        int k1 = Color.green(ag);
        int l1 = Color.blue(ag);
        ae = ValueAnimator.ofInt(new int[] {
            0, j1
        });
        ae.setDuration(300L);
        ae.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener(i1, k1, l1) {

            final int a;
            final int b;
            final int c;
            final FloatingActionMenu d;

            public void onAnimationUpdate(ValueAnimator valueanimator) {
                valueanimator = (Integer)valueanimator.getAnimatedValue();
                d.setBackgroundColor(Color.argb(valueanimator.intValue(), a, b, c));
            }

             {
                d = FloatingActionMenu.this;
                a = i1;
                b = j1;
                c = k1;
                super();
            }
        }
);
        af = ValueAnimator.ofInt(new int[] {
            j1, 0
        });
        af.setDuration(300L);
        af.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener(i1, k1, l1) {

            final int a;
            final int b;
            final int c;
            final FloatingActionMenu d;

            public void onAnimationUpdate(ValueAnimator valueanimator) {
                valueanimator = (Integer)valueanimator.getAnimatedValue();
                d.setBackgroundColor(Color.argb(valueanimator.intValue(), a, b, c));
            }

             {
                d = FloatingActionMenu.this;
                a = i1;
                b = j1;
                c = k1;
                super();
            }
        }
);
    }

    private boolean d() {
        boolean flag;
        if (ag != 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    private void e() {
        e = new FloatingActionButton(getContext());
        e.b = z;
        if (z) {
            e.d = com.github.clans.fab.b.a(getContext(), B);
            e.e = com.github.clans.fab.b.a(getContext(), C);
            e.f = com.github.clans.fab.b.a(getContext(), D);
        }
        e.a(E, F, G);
        e.c = A;
        e.a = P;
        e.c();
        e.setLabelText(aj);
        T = new ImageView(getContext());
        T.setImageDrawable(H);
        addView(e, super.generateDefaultLayoutParams());
        addView(T);
        f();
    }

    private void f() {
        float f2;
        float f3;
        f2 = 135F;
        f3 = -135F;
        if (ac != 0) goto _L2; else goto _L1
_L1:
        float f1;
        ObjectAnimator objectanimator;
        ObjectAnimator objectanimator1;
        if (ah == 0)
            f1 = -135F;
        else
            f1 = 135F;
        if (ah == 0)
            f2 = f3;
        else
            f2 = 135F;
_L4:
        objectanimator = ObjectAnimator.ofFloat(T, "rotation", new float[] {
            f1, 0.0F
        });
        objectanimator1 = ObjectAnimator.ofFloat(T, "rotation", new float[] {
            0.0F, f2
        });
        a.play(objectanimator1);
        b.play(objectanimator);
        a.setInterpolator(J);
        b.setInterpolator(K);
        a.setDuration(300L);
        b.setDuration(300L);
        return;
_L2:
        if (ah == 0)
            f1 = 135F;
        else
            f1 = -135F;
        if (ah != 0)
            f2 = -135F;
        if (true) goto _L4; else goto _L3
_L3:
    }

    private void g() {
        int i1 = 0;
        while (i1 < i)  {
            if (getChildAt(i1) != T) {
                FloatingActionButton floatingactionbutton = (FloatingActionButton)getChildAt(i1);
                if (floatingactionbutton.getTag(a.d.fab_label) == null) {
                    a(floatingactionbutton);
                    if (floatingactionbutton == e)
                        e.setOnClickListener(new android.view.View.OnClickListener() {

                            final FloatingActionMenu a;

                            public void onClick(View view) {
                                a.a(FloatingActionMenu.a(a));
                            }

             {
                a = FloatingActionMenu.this;
                super();
            }
                        }
);
                }
            }
            i1++;
        }
    }

    private void setLabelEllipsize(Label label) {
        N;
        JVM INSTR tableswitch 1 4: default 36
    //                   1 37
    //                   2 47
    //                   3 57
    //                   4 67;
           goto _L1 _L2 _L3 _L4 _L5
_L1:
        return;
_L2:
        label.setEllipsize(android.text.TextUtils.TruncateAt.START);
        continue; /* Loop/switch isn't completed */
_L3:
        label.setEllipsize(android.text.TextUtils.TruncateAt.MIDDLE);
        continue; /* Loop/switch isn't completed */
_L4:
        label.setEllipsize(android.text.TextUtils.TruncateAt.END);
        continue; /* Loop/switch isn't completed */
_L5:
        label.setEllipsize(android.text.TextUtils.TruncateAt.MARQUEE);
        if (true) goto _L1; else goto _L6
_L6:
    }

    protected android.view.ViewGroup.MarginLayoutParams a() {
        return new android.view.ViewGroup.MarginLayoutParams(-2, -2);
    }

    public android.view.ViewGroup.MarginLayoutParams a(AttributeSet attributeset) {
        return new android.view.ViewGroup.MarginLayoutParams(getContext(), attributeset);
    }

    protected android.view.ViewGroup.MarginLayoutParams a(android.view.ViewGroup.LayoutParams layoutparams) {
        return new android.view.ViewGroup.MarginLayoutParams(layoutparams);
    }

    public void a(boolean flag) {
        if (b())
            c(flag);
        else
            b(flag);
    }

    public void b(boolean flag) {
        int i1 = 0;
        if (!b()) {
            if (d())
                ae.start();
            int j1;
            int k1;
            if (S)
                if (c != null) {
                    c.start();
                } else {
                    b.cancel();
                    a.start();
                }
            k = true;
            k1 = getChildCount() - 1;
            j1 = 0;
            for (; k1 >= 0; k1--) {
                Object obj = getChildAt(k1);
                if ((obj instanceof FloatingActionButton) && ((View) (obj)).getVisibility() != 8) {
                    obj = (FloatingActionButton)obj;
                    l.postDelayed(new Runnable(((FloatingActionButton) (obj)), flag) {

                        final FloatingActionButton a;
                        final boolean b;
                        final FloatingActionMenu c;

                        public void run() {
                            if (!c.b()) goto _L2; else goto _L1
_L1:
                            return;
_L2:
                            if (a != FloatingActionMenu.b(c))
                                a.a(b);
                            Label label = (Label)a.getTag(a.d.fab_label);
                            if (label != null && label.f())
                                label.a(b);
                            if (true) goto _L1; else goto _L3
_L3:
                        }

             {
                c = FloatingActionMenu.this;
                a = floatingactionbutton;
                b = flag;
                super();
            }
                    }
, j1);
                    j1 = I + j1;
                    i1++;
                }
            }

            l.postDelayed(new Runnable() {

                final FloatingActionMenu a;

                public void run() {
                    FloatingActionMenu.a(a, true);
                    if (FloatingActionMenu.c(a) != null)
                        FloatingActionMenu.c(a).a(true);
                }

             {
                a = FloatingActionMenu.this;
                super();
            }
            }
, (i1 + 1) * I);
        }
    }

    public boolean b() {
        return j;
    }

    public void c(boolean flag) {
        if (b()) {
            if (d())
                af.start();
            int j1;
            int i2;
            if (S)
                if (c != null) {
                    c.start();
                } else {
                    b.start();
                    a.cancel();
                }
            k = false;
            j1 = 0;
            i2 = 0;
            int k1;
            for (int i1 = 0; j1 < getChildCount(); i1 = k1) {
                Object obj = getChildAt(j1);
                int l1 = i2;
                k1 = i1;
                if (obj instanceof FloatingActionButton) {
                    l1 = i2;
                    k1 = i1;
                    if (((View) (obj)).getVisibility() != 8) {
                        l1 = i2 + 1;
                        obj = (FloatingActionButton)obj;
                        l.postDelayed(new Runnable(((FloatingActionButton) (obj)), flag) {

                            final FloatingActionButton a;
                            final boolean b;
                            final FloatingActionMenu c;

                            public void run() {
                                if (c.b()) goto _L2; else goto _L1
_L1:
                                return;
_L2:
                                if (a != FloatingActionMenu.b(c))
                                    a.b(b);
                                Label label = (Label)a.getTag(a.d.fab_label);
                                if (label != null && label.f())
                                    label.b(b);
                                if (true) goto _L1; else goto _L3
_L3:
                            }

             {
                c = FloatingActionMenu.this;
                a = floatingactionbutton;
                b = flag;
                super();
            }
                        }
, i1);
                        k1 = i1 + I;
                    }
                }
                j1++;
                i2 = l1;
            }

            l.postDelayed(new Runnable() {

                final FloatingActionMenu a;

                public void run() {
                    FloatingActionMenu.a(a, false);
                    if (FloatingActionMenu.c(a) != null)
                        FloatingActionMenu.c(a).a(false);
                }

             {
                a = FloatingActionMenu.this;
                super();
            }
            }
, (i2 + 1) * I);
        }
    }

    protected boolean checkLayoutParams(android.view.ViewGroup.LayoutParams layoutparams) {
        return layoutparams instanceof android.view.ViewGroup.MarginLayoutParams;
    }

    protected android.view.ViewGroup.LayoutParams generateDefaultLayoutParams() {
        return a();
    }

    public android.view.ViewGroup.LayoutParams generateLayoutParams(AttributeSet attributeset) {
        return a(attributeset);
    }

    protected android.view.ViewGroup.LayoutParams generateLayoutParams(android.view.ViewGroup.LayoutParams layoutparams) {
        return a(layoutparams);
    }

    public int getAnimationDelayPerItem() {
        return I;
    }

    public AnimatorSet getIconToggleAnimatorSet() {
        return c;
    }

    public int getMenuButtonColorNormal() {
        return E;
    }

    public int getMenuButtonColorPressed() {
        return F;
    }

    public int getMenuButtonColorRipple() {
        return G;
    }

    public String getMenuButtonLabelText() {
        return aj;
    }

    public ImageView getMenuIconView() {
        return T;
    }

    protected void onFinishInflate() {
        super.onFinishInflate();
        bringChildToFront(e);
        bringChildToFront(T);
        i = getChildCount();
        g();
    }

    protected void onLayout(boolean flag, int i1, int j1, int k1, int l1) {
        boolean flag1;
        if (ah == 0)
            k1 = k1 - i1 - f / 2 - getPaddingRight();
        else
            k1 = f / 2 + getPaddingLeft();
        if (ac == 0)
            flag1 = true;
        else
            flag1 = false;
        if (flag1)
            i1 = l1 - j1 - e.getMeasuredHeight() - getPaddingBottom();
        else
            i1 = getPaddingTop();
        j1 = k1 - e.getMeasuredWidth() / 2;
        e.layout(j1, i1, e.getMeasuredWidth() + j1, e.getMeasuredHeight() + i1);
        j1 = k1 - T.getMeasuredWidth() / 2;
        l1 = (e.getMeasuredHeight() / 2 + i1) - T.getMeasuredHeight() / 2;
        T.layout(j1, l1, T.getMeasuredWidth() + j1, T.getMeasuredHeight() + l1);
        j1 = i1;
        if (flag1)
            j1 = i1 + e.getMeasuredHeight() + d;
        l1 = i - 1;
        i1 = j1;
        while (l1 >= 0)  {
            View view1 = getChildAt(l1);
            if (view1 == T) {
                j1 = i1;
            } else {
                FloatingActionButton floatingactionbutton = (FloatingActionButton)view1;
                j1 = i1;
                if (floatingactionbutton.getVisibility() != 8) {
                    j1 = k1 - floatingactionbutton.getMeasuredWidth() / 2;
                    int i2;
                    View view;
                    if (flag1)
                        i2 = i1 - floatingactionbutton.getMeasuredHeight() - d;
                    else
                        i2 = i1;
                    if (floatingactionbutton != e) {
                        floatingactionbutton.layout(j1, i2, floatingactionbutton.getMeasuredWidth() + j1, floatingactionbutton.getMeasuredHeight() + i2);
                        if (!k)
                            floatingactionbutton.b(false);
                    }
                    view = (View)floatingactionbutton.getTag(a.d.fab_label);
                    if (view != null) {
                        int j2;
                        if (ak)
                            i1 = f / 2;
                        else
                            i1 = floatingactionbutton.getMeasuredWidth() / 2;
                        i1 += g;
                        if (ah == 0)
                            i1 = k1 - i1;
                        else
                            i1 += k1;
                        if (ah == 0)
                            j1 = i1 - view.getMeasuredWidth();
                        else
                            j1 = view.getMeasuredWidth() + i1;
                        if (ah == 0)
                            j2 = j1;
                        else
                            j2 = i1;
                        if (ah != 0)
                            i1 = j1;
                        j1 = h;
                        j1 = (floatingactionbutton.getMeasuredHeight() - view.getMeasuredHeight()) / 2 + (i2 - j1);
                        view.layout(j2, j1, i1, view.getMeasuredHeight() + j1);
                        if (!k)
                            view.setVisibility(4);
                    }
                    if (flag1)
                        i1 = i2 - d;
                    else
                        i1 = view1.getMeasuredHeight() + i2 + d;
                    j1 = i1;
                }
            }
            l1--;
            i1 = j1;
        }
    }

    protected void onMeasure(int i1, int j1) {
        f = 0;
        int l1 = 0;
        measureChildWithMargins(T, i1, 0, j1, 0);
        int k1 = 0;
        while (k1 < i)  {
            View view = getChildAt(k1);
            if (view.getVisibility() != 8 && view != T) {
                measureChildWithMargins(view, i1, 0, j1, 0);
                f = Math.max(f, view.getMeasuredWidth());
            }
            k1++;
        }
        int i2 = 0;
        int j2 = 0;
        k1 = l1;
        l1 = j2;
        while (i2 < i)  {
            View view1 = getChildAt(i2);
            if (view1.getVisibility() != 8 && view1 != T) {
                int k2 = view1.getMeasuredWidth();
                l1 += view1.getMeasuredHeight();
                Label label = (Label)view1.getTag(a.d.fab_label);
                if (label != null) {
                    int j3 = f;
                    int i3 = view1.getMeasuredWidth();
                    if (ak)
                        j2 = 1;
                    else
                        j2 = 2;
                    j2 = (j3 - i3) / j2;
                    measureChildWithMargins(label, i1, view1.getMeasuredWidth() + label.a() + g + j2, j1, 0);
                    k1 = Math.max(k1, label.getMeasuredWidth() + (0 + k2) + j2);
                }
            }
            i2++;
        }
        int l2 = Math.max(f, g + k1);
        i2 = getPaddingLeft();
        j2 = getPaddingRight();
        k1 = b(l1 + (d * (i - 1) + getPaddingTop() + getPaddingBottom()));
        if (getLayoutParams().width == -1)
            i1 = getDefaultSize(getSuggestedMinimumWidth(), i1);
        else
            i1 = l2 + i2 + j2;
        if (getLayoutParams().height == -1)
            j1 = getDefaultSize(getSuggestedMinimumHeight(), j1);
        else
            j1 = k1;
        setMeasuredDimension(i1, j1);
    }

    public boolean onTouchEvent(MotionEvent motionevent) {
        if (!ab) goto _L2; else goto _L1
_L1:
        boolean flag = false;
        motionevent.getAction();
        JVM INSTR tableswitch 0 1: default 36
    //                   0 38
    //                   1 46;
           goto _L3 _L4 _L5
_L3:
        return flag;
_L4:
        flag = b();
        continue; /* Loop/switch isn't completed */
_L5:
        c(L);
        flag = true;
        continue; /* Loop/switch isn't completed */
_L2:
        flag = super.onTouchEvent(motionevent);
        if (true) goto _L3; else goto _L6
_L6:
    }

    public void setAnimated(boolean flag) {
        long l2 = 300L;
        L = flag;
        AnimatorSet animatorset = a;
        long l1;
        if (flag)
            l1 = 300L;
        else
            l1 = 0L;
        animatorset.setDuration(l1);
        animatorset = b;
        if (flag)
            l1 = l2;
        else
            l1 = 0L;
        animatorset.setDuration(l1);
    }

    public void setAnimationDelayPerItem(int i1) {
        I = i1;
    }

    public void setClosedOnTouchOutside(boolean flag) {
        ab = flag;
    }

    public void setIconAnimated(boolean flag) {
        S = flag;
    }

    public void setIconAnimationCloseInterpolator(Interpolator interpolator) {
        b.setInterpolator(interpolator);
    }

    public void setIconAnimationInterpolator(Interpolator interpolator) {
        a.setInterpolator(interpolator);
        b.setInterpolator(interpolator);
    }

    public void setIconAnimationOpenInterpolator(Interpolator interpolator) {
        a.setInterpolator(interpolator);
    }

    public void setIconToggleAnimatorSet(AnimatorSet animatorset) {
        c = animatorset;
    }

    public void setMenuButtonColorNormal(int i1) {
        E = i1;
        e.setColorNormal(i1);
    }

    public void setMenuButtonColorNormalResId(int i1) {
        E = getResources().getColor(i1);
        e.setColorNormalResId(i1);
    }

    public void setMenuButtonColorPressed(int i1) {
        F = i1;
        e.setColorPressed(i1);
    }

    public void setMenuButtonColorPressedResId(int i1) {
        F = getResources().getColor(i1);
        e.setColorPressedResId(i1);
    }

    public void setMenuButtonColorRipple(int i1) {
        G = i1;
        e.setColorRipple(i1);
    }

    public void setMenuButtonColorRippleResId(int i1) {
        G = getResources().getColor(i1);
        e.setColorRippleResId(i1);
    }

    public void setMenuButtonHideAnimation(Animation animation) {
        V = animation;
        e.setHideAnimation(animation);
    }

    public void setMenuButtonLabelText(String s1) {
        e.setLabelText(s1);
    }

    public void setMenuButtonShowAnimation(Animation animation) {
        U = animation;
        e.setShowAnimation(animation);
    }

    public void setOnMenuButtonClickListener(android.view.View.OnClickListener onclicklistener) {
        e.setOnClickListener(onclicklistener);
    }

    public void setOnMenuButtonLongClickListener(android.view.View.OnLongClickListener onlongclicklistener) {
        e.setOnLongClickListener(onlongclicklistener);
    }

    public void setOnMenuToggleListener(a a1) {
        ad = a1;
    }
}
