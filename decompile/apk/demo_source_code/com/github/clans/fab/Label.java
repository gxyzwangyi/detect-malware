// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.github.clans.fab;

import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.*;
import android.graphics.drawable.*;
import android.graphics.drawable.shapes.RoundRectShape;
import android.util.AttributeSet;
import android.view.*;
import android.view.animation.Animation;
import android.widget.TextView;

// Referenced classes of package com.github.clans.fab:
//            b, FloatingActionButton

public class Label extends TextView {
    private class a extends Drawable {

        final Label a;
        private Paint b;
        private Paint c;

        private void a() {
            a.setLayerType(1, null);
            b.setStyle(android.graphics.Paint.Style.FILL);
            b.setColor(Label.b(a));
            c.setXfermode(Label.g());
            if (!a.isInEditMode())
                b.setShadowLayer(Label.c(a), Label.d(a), Label.e(a), Label.f(a));
        }

        public void draw(Canvas canvas) {
            RectF rectf = new RectF(Label.c(a) + Math.abs(Label.d(a)), Label.c(a) + Math.abs(Label.e(a)), Label.g(a), Label.h(a));
            canvas.drawRoundRect(rectf, Label.i(a), Label.i(a), b);
            canvas.drawRoundRect(rectf, Label.i(a), Label.i(a), c);
        }

        public int getOpacity() {
            return 0;
        }

        public void setAlpha(int i1) {
        }

        public void setColorFilter(ColorFilter colorfilter) {
        }

        private a() {
            a = Label.this;
            super();
            b = new Paint(1);
            c = new Paint(1);
            a();
        }

    }


    private static final Xfermode b;
    GestureDetector a;
    private int c;
    private int d;
    private int e;
    private int f;
    private Drawable g;
    private boolean h;
    private int i;
    private int j;
    private int k;
    private int l;
    private int m;
    private int n;
    private FloatingActionButton o;
    private Animation p;
    private Animation q;
    private boolean r;
    private boolean s;

    public Label(Context context) {
        super(context);
        h = true;
        s = true;
        a = new GestureDetector(getContext(), new android.view.GestureDetector.SimpleOnGestureListener() {

            final Label a;

            public boolean onDown(MotionEvent motionevent) {
                a.d();
                if (Label.a(a) != null)
                    Label.a(a).f();
                return super.onDown(motionevent);
            }

            public boolean onSingleTapUp(MotionEvent motionevent) {
                a.e();
                if (Label.a(a) != null)
                    Label.a(a).g();
                return super.onSingleTapUp(motionevent);
            }

             {
                a = Label.this;
                super();
            }
        }
);
    }

    public Label(Context context, AttributeSet attributeset) {
        super(context, attributeset);
        h = true;
        s = true;
        a = new GestureDetector(getContext(), new _cls2());
    }

    public Label(Context context, AttributeSet attributeset, int i1) {
        super(context, attributeset, i1);
        h = true;
        s = true;
        a = new GestureDetector(getContext(), new _cls2());
    }

    private Drawable a(int i1) {
        ShapeDrawable shapedrawable = new ShapeDrawable(new RoundRectShape(new float[] {
            (float)n, (float)n, (float)n, (float)n, (float)n, (float)n, (float)n, (float)n
        }, null, null));
        shapedrawable.getPaint().setColor(i1);
        return shapedrawable;
    }

    static FloatingActionButton a(Label label) {
        return label.o;
    }

    static int b(Label label) {
        return label.k;
    }

    static int c(Label label) {
        return label.c;
    }

    static int d(Label label) {
        return label.d;
    }

    static int e(Label label) {
        return label.e;
    }

    static int f(Label label) {
        return label.f;
    }

    static int g(Label label) {
        return label.i;
    }

    static Xfermode g() {
        return b;
    }

    private int h() {
        if (i == 0)
            i = getMeasuredWidth();
        return getMeasuredWidth() + a();
    }

    static int h(Label label) {
        return label.j;
    }

    private int i() {
        if (j == 0)
            j = getMeasuredHeight();
        return getMeasuredHeight() + b();
    }

    static int i(Label label) {
        return label.n;
    }

    private Drawable j() {
        Object obj = new StateListDrawable();
        Drawable drawable = a(l);
        ((StateListDrawable) (obj)).addState(new int[] {
            0x10100a7
        }, drawable);
        drawable = a(k);
        ((StateListDrawable) (obj)).addState(new int[0], drawable);
        if (com.github.clans.fab.b.b()) {
            int i1 = m;
            obj = new RippleDrawable(new ColorStateList(new int[][] {
                new int[0]
            }, new int[] {
                i1
            }), ((Drawable) (obj)), null);
            setOutlineProvider(new ViewOutlineProvider() {

                final Label a;

                public void getOutline(View view, Outline outline) {
                    outline.setOval(0, 0, view.getWidth(), view.getHeight());
                }

             {
                a = Label.this;
                super();
            }
            }
);
            setClipToOutline(true);
            g = ((Drawable) (obj));
        } else {
            g = ((Drawable) (obj));
        }
        return ((Drawable) (obj));
    }

    private void k() {
        if (p != null) {
            q.cancel();
            startAnimation(p);
        }
    }

    private void l() {
        if (q != null) {
            p.cancel();
            startAnimation(q);
        }
    }

    private void setBackgroundCompat(Drawable drawable) {
        if (com.github.clans.fab.b.a())
            setBackground(drawable);
        else
            setBackgroundDrawable(drawable);
    }

    private void setShadow(FloatingActionButton floatingactionbutton) {
        f = floatingactionbutton.getShadowColor();
        c = floatingactionbutton.getShadowRadius();
        d = floatingactionbutton.getShadowXOffset();
        e = floatingactionbutton.getShadowYOffset();
        h = floatingactionbutton.h();
    }

    int a() {
        int i1;
        if (h)
            i1 = c + Math.abs(d);
        else
            i1 = 0;
        return i1;
    }

    void a(int i1, int j1, int k1) {
        k = i1;
        l = j1;
        m = k1;
    }

    void a(boolean flag) {
        if (flag)
            k();
        setVisibility(0);
    }

    int b() {
        int i1;
        if (h)
            i1 = c + Math.abs(e);
        else
            i1 = 0;
        return i1;
    }

    void b(boolean flag) {
        if (flag)
            l();
        setVisibility(4);
    }

    void c() {
        LayerDrawable layerdrawable;
        if (h) {
            layerdrawable = new LayerDrawable(new Drawable[] {
                new a(), j()
            });
            layerdrawable.setLayerInset(1, c + Math.abs(d), c + Math.abs(e), c + Math.abs(d), c + Math.abs(e));
        } else {
            layerdrawable = new LayerDrawable(new Drawable[] {
                j()
            });
        }
        setBackgroundCompat(layerdrawable);
    }

    void d() {
        if (r)
            g = getBackground();
        if (!(g instanceof StateListDrawable)) goto _L2; else goto _L1
_L1:
        ((StateListDrawable)g).setState(new int[] {
            0x10100a7
        });
_L4:
        return;
_L2:
        if (com.github.clans.fab.b.b() && (g instanceof RippleDrawable)) {
            RippleDrawable rippledrawable = (RippleDrawable)g;
            rippledrawable.setState(new int[] {
                0x101009e, 0x10100a7
            });
            rippledrawable.setHotspot(getMeasuredWidth() / 2, getMeasuredHeight() / 2);
            rippledrawable.setVisible(true, true);
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    void e() {
        if (r)
            g = getBackground();
        if (!(g instanceof StateListDrawable)) goto _L2; else goto _L1
_L1:
        ((StateListDrawable)g).setState(new int[0]);
_L4:
        return;
_L2:
        if (com.github.clans.fab.b.b() && (g instanceof RippleDrawable)) {
            RippleDrawable rippledrawable = (RippleDrawable)g;
            rippledrawable.setState(new int[0]);
            rippledrawable.setHotspot(getMeasuredWidth() / 2, getMeasuredHeight() / 2);
            rippledrawable.setVisible(true, true);
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    boolean f() {
        return s;
    }

    protected void onMeasure(int i1, int j1) {
        super.onMeasure(i1, j1);
        setMeasuredDimension(h(), i());
    }

    public boolean onTouchEvent(MotionEvent motionevent) {
        if (o != null && o.getOnClickListener() != null && o.isEnabled()) goto _L2; else goto _L1
_L1:
        boolean flag = super.onTouchEvent(motionevent);
_L4:
        return flag;
_L2:
        switch (motionevent.getAction()) {
        case 2: // '\002'
        default:
            break;

        case 1: // '\001'
            break; /* Loop/switch isn't completed */

        case 3: // '\003'
            break;
        }
        break MISSING_BLOCK_LABEL_96;
_L5:
        a.onTouchEvent(motionevent);
        flag = super.onTouchEvent(motionevent);
        if (true) goto _L4; else goto _L3
_L3:
        e();
        o.g();
          goto _L5
        e();
        o.g();
          goto _L5
    }

    void setCornerRadius(int i1) {
        n = i1;
    }

    void setFab(FloatingActionButton floatingactionbutton) {
        o = floatingactionbutton;
        setShadow(floatingactionbutton);
    }

    void setHandleVisibilityChanges(boolean flag) {
        s = flag;
    }

    void setHideAnimation(Animation animation) {
        q = animation;
    }

    void setShowAnimation(Animation animation) {
        p = animation;
    }

    void setShowShadow(boolean flag) {
        h = flag;
    }

    void setUsingStyle(boolean flag) {
        r = flag;
    }

    static  {
        b = new PorterDuffXfermode(android.graphics.PorterDuff.Mode.CLEAR);
    }
}
