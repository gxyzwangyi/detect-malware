// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.github.clans.fab;

import android.content.Context;
import android.content.res.*;
import android.graphics.*;
import android.graphics.drawable.*;
import android.graphics.drawable.shapes.OvalShape;
import android.graphics.drawable.shapes.Shape;
import android.os.*;
import android.util.AttributeSet;
import android.view.*;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.ImageButton;
import android.widget.TextView;

// Referenced classes of package com.github.clans.fab:
//            b, Label

public class FloatingActionButton extends ImageButton {
    static class ProgressSavedState extends android.view.View.BaseSavedState {

        public static final android.os.Parcelable.Creator CREATOR = new android.os.Parcelable.Creator() {

            public ProgressSavedState a(Parcel parcel) {
                return new ProgressSavedState(parcel);
            }

            public ProgressSavedState[] a(int i1) {
                return new ProgressSavedState[i1];
            }

            public Object createFromParcel(Parcel parcel) {
                return a(parcel);
            }

            public Object[] newArray(int i1) {
                return a(i1);
            }

        }
;
        float a;
        float b;
        float c;
        int d;
        int e;
        int f;
        int g;
        boolean h;
        boolean i;
        boolean j;
        boolean k;
        boolean l;
        boolean m;
        boolean n;

        public void writeToParcel(Parcel parcel, int i1) {
            boolean flag = true;
            super.writeToParcel(parcel, i1);
            parcel.writeFloat(a);
            parcel.writeFloat(b);
            if (h)
                i1 = 1;
            else
                i1 = 0;
            parcel.writeInt(i1);
            parcel.writeFloat(c);
            parcel.writeInt(d);
            parcel.writeInt(e);
            parcel.writeInt(f);
            parcel.writeInt(g);
            if (i)
                i1 = 1;
            else
                i1 = 0;
            parcel.writeInt(i1);
            if (j)
                i1 = 1;
            else
                i1 = 0;
            parcel.writeInt(i1);
            if (k)
                i1 = 1;
            else
                i1 = 0;
            parcel.writeInt(i1);
            if (l)
                i1 = 1;
            else
                i1 = 0;
            parcel.writeInt(i1);
            if (m)
                i1 = 1;
            else
                i1 = 0;
            parcel.writeInt(i1);
            if (n)
                i1 = ((flag) ? 1 : 0);
            else
                i1 = 0;
            parcel.writeInt(i1);
        }


        private ProgressSavedState(Parcel parcel) {
            boolean flag1 = true;
            super(parcel);
            a = parcel.readFloat();
            b = parcel.readFloat();
            boolean flag;
            if (parcel.readInt() != 0)
                flag = true;
            else
                flag = false;
            h = flag;
            c = parcel.readFloat();
            d = parcel.readInt();
            e = parcel.readInt();
            f = parcel.readInt();
            g = parcel.readInt();
            if (parcel.readInt() != 0)
                flag = true;
            else
                flag = false;
            i = flag;
            if (parcel.readInt() != 0)
                flag = true;
            else
                flag = false;
            j = flag;
            if (parcel.readInt() != 0)
                flag = true;
            else
                flag = false;
            k = flag;
            if (parcel.readInt() != 0)
                flag = true;
            else
                flag = false;
            l = flag;
            if (parcel.readInt() != 0)
                flag = true;
            else
                flag = false;
            m = flag;
            if (parcel.readInt() != 0)
                flag = flag1;
            else
                flag = false;
            n = flag;
        }


        ProgressSavedState(Parcelable parcelable) {
            super(parcelable);
        }
    }

    private class a extends ShapeDrawable {

        final FloatingActionButton a;
        private int b;
        private int c;

        public void draw(Canvas canvas) {
            setBounds(b, c, FloatingActionButton.c(a) - b, FloatingActionButton.d(a) - c);
            super.draw(canvas);
        }

        private a(Shape shape) {
            boolean flag = false;
            a = FloatingActionButton.this;
            super(shape);
            int i1;
            if (h())
                i1 = d + Math.abs(e);
            else
                i1 = 0;
            b = i1;
            i1 = ((flag) ? 1 : 0);
            if (h()) {
                i1 = d;
                i1 = Math.abs(f) + i1;
            }
            c = i1;
            if (FloatingActionButton.a(FloatingActionButton.this)) {
                b = b + FloatingActionButton.b(FloatingActionButton.this);
                c = c + FloatingActionButton.b(FloatingActionButton.this);
            }
        }

    }

    private class b extends Drawable {

        final FloatingActionButton a;
        private Paint b;
        private Paint c;
        private float d;

        private void a() {
            a.setLayerType(1, null);
            b.setStyle(android.graphics.Paint.Style.FILL);
            b.setColor(FloatingActionButton.e(a));
            c.setXfermode(FloatingActionButton.j());
            if (!a.isInEditMode())
                b.setShadowLayer(a.d, a.e, a.f, a.c);
            d = FloatingActionButton.f(a) / 2;
            if (FloatingActionButton.a(a) && FloatingActionButton.g(a))
                d = d + (float)FloatingActionButton.b(a);
        }

        public void draw(Canvas canvas) {
            canvas.drawCircle(FloatingActionButton.h(a), FloatingActionButton.i(a), d, b);
            canvas.drawCircle(FloatingActionButton.h(a), FloatingActionButton.i(a), d, c);
        }

        public int getOpacity() {
            return 0;
        }

        public void setAlpha(int i1) {
        }

        public void setColorFilter(ColorFilter colorfilter) {
        }

        private b() {
            a = FloatingActionButton.this;
            super();
            b = new Paint(1);
            c = new Paint(1);
            a();
        }

    }


    private static final Xfermode h;
    private float A;
    private float B;
    private boolean C;
    private RectF D;
    private Paint E;
    private Paint F;
    private boolean G;
    private long H;
    private float I;
    private long J;
    private double K;
    private boolean L;
    private int M;
    private float N;
    private float O;
    private float P;
    private int Q;
    private boolean R;
    private boolean S;
    private boolean T;
    private int U;
    private boolean V;
    int a;
    boolean b;
    int c;
    int d;
    int e;
    int f;
    GestureDetector g;
    private int i;
    private int j;
    private int k;
    private int l;
    private Drawable m;
    private int n;
    private Animation o;
    private Animation p;
    private String q;
    private android.view.View.OnClickListener r;
    private Drawable s;
    private boolean t;
    private boolean u;
    private boolean v;
    private int w;
    private int x;
    private int y;
    private boolean z;

    public FloatingActionButton(Context context) {
        this(context, null);
    }

    public FloatingActionButton(Context context, AttributeSet attributeset) {
        this(context, attributeset, 0);
    }

    public FloatingActionButton(Context context, AttributeSet attributeset, int i1) {
        super(context, attributeset, i1);
        d = com.github.clans.fab.b.a(getContext(), 4F);
        e = com.github.clans.fab.b.a(getContext(), 1.0F);
        f = com.github.clans.fab.b.a(getContext(), 3F);
        n = com.github.clans.fab.b.a(getContext(), 24F);
        w = com.github.clans.fab.b.a(getContext(), 6F);
        A = -1F;
        B = -1F;
        D = new RectF();
        E = new Paint(1);
        F = new Paint(1);
        I = 195F;
        J = 0L;
        L = true;
        M = 16;
        U = 100;
        g = new GestureDetector(getContext(), new android.view.GestureDetector.SimpleOnGestureListener() {

            final FloatingActionButton a;

            public boolean onDown(MotionEvent motionevent) {
                Label label = (Label)a.getTag(a.d.fab_label);
                if (label != null)
                    label.d();
                a.f();
                return super.onDown(motionevent);
            }

            public boolean onSingleTapUp(MotionEvent motionevent) {
                Label label = (Label)a.getTag(a.d.fab_label);
                if (label != null)
                    label.e();
                a.g();
                return super.onSingleTapUp(motionevent);
            }

             {
                a = FloatingActionButton.this;
                super();
            }
        }
);
        a(context, attributeset, i1);
    }

    public FloatingActionButton(Context context, AttributeSet attributeset, int i1, int j1) {
        super(context, attributeset, i1, j1);
        d = com.github.clans.fab.b.a(getContext(), 4F);
        e = com.github.clans.fab.b.a(getContext(), 1.0F);
        f = com.github.clans.fab.b.a(getContext(), 3F);
        n = com.github.clans.fab.b.a(getContext(), 24F);
        w = com.github.clans.fab.b.a(getContext(), 6F);
        A = -1F;
        B = -1F;
        D = new RectF();
        E = new Paint(1);
        F = new Paint(1);
        I = 195F;
        J = 0L;
        L = true;
        M = 16;
        U = 100;
        g = new GestureDetector(getContext(), new _cls2());
        a(context, attributeset, i1);
    }

    private Drawable a(int i1) {
        a a1 = new a(new OvalShape());
        a1.getPaint().setColor(i1);
        return a1;
    }

    private void a(long l1) {
        if (J >= 200L) {
            K = K + (double)l1;
            float f1;
            float f2;
            if (K > 500D) {
                K = K - 500D;
                J = 0L;
                boolean flag;
                if (!L)
                    flag = true;
                else
                    flag = false;
                L = flag;
            }
            f1 = (float)Math.cos((K / 500D + 1.0D) * 3.1415926535897931D) / 2.0F + 0.5F;
            f2 = 270 - M;
            if (L) {
                N = f1 * f2;
            } else {
                f1 = (1.0F - f1) * f2;
                O = O + (N - f1);
                N = f1;
            }
        } else {
            J = J + l1;
        }
    }

    private void a(Context context, AttributeSet attributeset, int i1) {
        context = context.obtainStyledAttributes(attributeset, a.e.FloatingActionButton, i1, 0);
        i = context.getColor(a.e.FloatingActionButton_fab_colorNormal, 0xffda4336);
        j = context.getColor(a.e.FloatingActionButton_fab_colorPressed, 0xffe75043);
        k = context.getColor(a.e.FloatingActionButton_fab_colorDisabled, 0xffaaaaaa);
        l = context.getColor(a.e.FloatingActionButton_fab_colorRipple, 0x99ffffff);
        b = context.getBoolean(a.e.FloatingActionButton_fab_showShadow, true);
        c = context.getColor(a.e.FloatingActionButton_fab_shadowColor, 0x66000000);
        d = context.getDimensionPixelSize(a.e.FloatingActionButton_fab_shadowRadius, d);
        e = context.getDimensionPixelSize(a.e.FloatingActionButton_fab_shadowXOffset, e);
        f = context.getDimensionPixelSize(a.e.FloatingActionButton_fab_shadowYOffset, f);
        a = context.getInt(a.e.FloatingActionButton_fab_size, 0);
        q = context.getString(a.e.FloatingActionButton_fab_label);
        S = context.getBoolean(a.e.FloatingActionButton_fab_progress_indeterminate, false);
        x = context.getColor(a.e.FloatingActionButton_fab_progress_color, 0xff009688);
        y = context.getColor(a.e.FloatingActionButton_fab_progress_backgroundColor, 0x4d000000);
        U = context.getInt(a.e.FloatingActionButton_fab_progress_max, U);
        V = context.getBoolean(a.e.FloatingActionButton_fab_progress_showBackground, true);
        if (context.hasValue(a.e.FloatingActionButton_fab_progress)) {
            Q = context.getInt(a.e.FloatingActionButton_fab_progress, 0);
            T = true;
        }
        if (context.hasValue(a.e.FloatingActionButton_fab_elevationCompat)) {
            float f1 = context.getDimensionPixelOffset(a.e.FloatingActionButton_fab_elevationCompat, 0);
            if (isInEditMode())
                setElevation(f1);
            else
                setElevationCompat(f1);
        }
        a(((TypedArray) (context)));
        b(context);
        context.recycle();
        if (!isInEditMode()) goto _L2; else goto _L1
_L1:
        if (!S) goto _L4; else goto _L3
_L3:
        setIndeterminate(true);
_L2:
        setClickable(true);
        return;
_L4:
        if (T) {
            p();
            a(Q, false);
        }
        if (true) goto _L2; else goto _L5
_L5:
    }

    private void a(TypedArray typedarray) {
        int i1 = typedarray.getResourceId(a.e.FloatingActionButton_fab_showAnimation, a.a.fab_scale_up);
        o = AnimationUtils.loadAnimation(getContext(), i1);
    }

    static boolean a(FloatingActionButton floatingactionbutton) {
        return floatingactionbutton.v;
    }

    static int b(FloatingActionButton floatingactionbutton) {
        return floatingactionbutton.w;
    }

    private void b(TypedArray typedarray) {
        int i1 = typedarray.getResourceId(a.e.FloatingActionButton_fab_hideAnimation, a.a.fab_scale_down);
        p = AnimationUtils.loadAnimation(getContext(), i1);
    }

    static int c(FloatingActionButton floatingactionbutton) {
        return floatingactionbutton.k();
    }

    static int d(FloatingActionButton floatingactionbutton) {
        return floatingactionbutton.l();
    }

    static int e(FloatingActionButton floatingactionbutton) {
        return floatingactionbutton.i;
    }

    static int f(FloatingActionButton floatingactionbutton) {
        return floatingactionbutton.getCircleSize();
    }

    static boolean g(FloatingActionButton floatingactionbutton) {
        return floatingactionbutton.V;
    }

    private int getCircleSize() {
        Resources resources = getResources();
        int i1;
        if (a == 0)
            i1 = a.b.fab_size_normal;
        else
            i1 = a.b.fab_size_mini;
        return resources.getDimensionPixelSize(i1);
    }

    private int getShadowX() {
        return d + Math.abs(e);
    }

    private int getShadowY() {
        return d + Math.abs(f);
    }

    static float h(FloatingActionButton floatingactionbutton) {
        return floatingactionbutton.m();
    }

    static float i(FloatingActionButton floatingactionbutton) {
        return floatingactionbutton.n();
    }

    static Xfermode j() {
        return h;
    }

    static android.view.View.OnClickListener j(FloatingActionButton floatingactionbutton) {
        return floatingactionbutton.r;
    }

    private int k() {
        int j1 = getCircleSize() + a();
        int i1 = j1;
        if (v)
            i1 = j1 + w * 2;
        return i1;
    }

    private int l() {
        int j1 = getCircleSize() + b();
        int i1 = j1;
        if (v)
            i1 = j1 + w * 2;
        return i1;
    }

    private float m() {
        return (float)(getMeasuredWidth() / 2);
    }

    private float n() {
        return (float)(getMeasuredHeight() / 2);
    }

    private Drawable o() {
        Object obj = new StateListDrawable();
        Drawable drawable = a(k);
        ((StateListDrawable) (obj)).addState(new int[] {
            0xfefeff62
        }, drawable);
        drawable = a(j);
        ((StateListDrawable) (obj)).addState(new int[] {
            0x10100a7
        }, drawable);
        drawable = a(i);
        ((StateListDrawable) (obj)).addState(new int[0], drawable);
        if (com.github.clans.fab.b.b()) {
            int i1 = l;
            obj = new RippleDrawable(new ColorStateList(new int[][] {
                new int[0]
            }, new int[] {
                i1
            }), ((Drawable) (obj)), null);
            setOutlineProvider(new ViewOutlineProvider() {

                final FloatingActionButton a;

                public void getOutline(View view, Outline outline) {
                    outline.setOval(0, 0, view.getWidth(), view.getHeight());
                }

             {
                a = FloatingActionButton.this;
                super();
            }
            }
);
            setClipToOutline(true);
            s = ((Drawable) (obj));
        } else {
            s = ((Drawable) (obj));
        }
        return ((Drawable) (obj));
    }

    private void p() {
        if (!C) {
            if (A == -1F)
                A = getX();
            if (B == -1F)
                B = getY();
            C = true;
        }
    }

    private void q() {
        float f1;
        float f2;
        if (v) {
            if (A > getX())
                f1 = getX() + (float)w;
            else
                f1 = getX() - (float)w;
            if (B > getY())
                f2 = getY() + (float)w;
            else
                f2 = getY() - (float)w;
        } else {
            f1 = A;
            f2 = B;
        }
        setX(f1);
        setY(f2);
    }

    private void r() {
        E.setColor(y);
        E.setStyle(android.graphics.Paint.Style.STROKE);
        E.setStrokeWidth(w);
        F.setColor(x);
        F.setStyle(android.graphics.Paint.Style.STROKE);
        F.setStrokeWidth(w);
    }

    private void s() {
        int j1 = 0;
        int i1;
        if (h())
            i1 = getShadowX();
        else
            i1 = 0;
        if (h())
            j1 = getShadowY();
        D = new RectF(w / 2 + i1, w / 2 + j1, k() - i1 - w / 2, l() - j1 - w / 2);
    }

    private void setBackgroundCompat(Drawable drawable) {
        if (com.github.clans.fab.b.a())
            setBackground(drawable);
        else
            setBackgroundDrawable(drawable);
    }

    int a() {
        int i1;
        if (h())
            i1 = getShadowX() * 2;
        else
            i1 = 0;
        return i1;
    }

    void a(int i1, int j1, int k1) {
        i = i1;
        j = j1;
        l = k1;
    }

    public void a(int i1, boolean flag) {
        this;
        JVM INSTR monitorenter ;
        boolean flag1 = G;
        if (!flag1) goto _L2; else goto _L1
_L1:
        this;
        JVM INSTR monitorexit ;
        return;
_L2:
        Q = i1;
        R = flag;
        if (C)
            break MISSING_BLOCK_LABEL_48;
        T = true;
          goto _L1
        Exception exception;
        exception;
        throw exception;
        v = true;
        z = true;
        s();
        p();
        c();
        if (i1 >= 0) goto _L4; else goto _L3
_L3:
        int j1 = 0;
_L7:
        if ((float)j1 == P) goto _L1; else goto _L5
_L5:
        float f1;
        if (U <= 0)
            break MISSING_BLOCK_LABEL_160;
        f1 = ((float)j1 / (float)U) * 360F;
_L8:
        P = f1;
        H = SystemClock.uptimeMillis();
        if (flag)
            break MISSING_BLOCK_LABEL_133;
        O = P;
        invalidate();
          goto _L1
_L4:
        j1 = i1;
        if (i1 <= U) goto _L7; else goto _L6
_L6:
        j1 = U;
          goto _L7
        f1 = 0.0F;
          goto _L8
    }

    public void a(boolean flag) {
        if (i()) {
            if (flag)
                d();
            super.setVisibility(0);
        }
    }

    int b() {
        int i1;
        if (h())
            i1 = getShadowY() * 2;
        else
            i1 = 0;
        return i1;
    }

    public void b(boolean flag) {
        if (!i()) {
            if (flag)
                e();
            super.setVisibility(4);
        }
    }

    void c() {
        int j1 = 0;
        int i1;
        int k1;
        int l1;
        LayerDrawable layerdrawable;
        if (h())
            layerdrawable = new LayerDrawable(new Drawable[] {
                new b(), o(), getIconDrawable()
            });
        else
            layerdrawable = new LayerDrawable(new Drawable[] {
                o(), getIconDrawable()
            });
        i1 = -1;
        if (getIconDrawable() != null)
            i1 = Math.max(getIconDrawable().getIntrinsicWidth(), getIconDrawable().getIntrinsicHeight());
        k1 = getCircleSize();
        if (i1 <= 0)
            i1 = n;
        l1 = (k1 - i1) / 2;
        if (h())
            i1 = d + Math.abs(e);
        else
            i1 = 0;
        if (h())
            j1 = d + Math.abs(f);
        if (v) {
            k1 = w;
            j1 += w;
            i1 += k1;
        }
        if (h())
            k1 = 2;
        else
            k1 = 1;
        layerdrawable.setLayerInset(k1, i1 + l1, j1 + l1, i1 + l1, j1 + l1);
        setBackgroundCompat(layerdrawable);
    }

    void d() {
        p.cancel();
        startAnimation(o);
    }

    void e() {
        o.cancel();
        startAnimation(p);
    }

    void f() {
        if (!(s instanceof StateListDrawable)) goto _L2; else goto _L1
_L1:
        ((StateListDrawable)s).setState(new int[] {
            0x101009e, 0x10100a7
        });
_L4:
        return;
_L2:
        if (com.github.clans.fab.b.b()) {
            RippleDrawable rippledrawable = (RippleDrawable)s;
            rippledrawable.setState(new int[] {
                0x101009e, 0x10100a7
            });
            rippledrawable.setHotspot(m(), n());
            rippledrawable.setVisible(true, true);
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    void g() {
        if (!(s instanceof StateListDrawable)) goto _L2; else goto _L1
_L1:
        ((StateListDrawable)s).setState(new int[] {
            0x101009e
        });
_L4:
        return;
_L2:
        if (com.github.clans.fab.b.b()) {
            RippleDrawable rippledrawable = (RippleDrawable)s;
            rippledrawable.setState(new int[] {
                0x101009e
            });
            rippledrawable.setHotspot(m(), n());
            rippledrawable.setVisible(true, true);
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public int getButtonSize() {
        return a;
    }

    public int getColorDisabled() {
        return k;
    }

    public int getColorNormal() {
        return i;
    }

    public int getColorPressed() {
        return j;
    }

    public int getColorRipple() {
        return l;
    }

    Animation getHideAnimation() {
        return p;
    }

    protected Drawable getIconDrawable() {
        Object obj;
        if (m != null)
            obj = m;
        else
            obj = new ColorDrawable(0);
        return ((Drawable) (obj));
    }

    public String getLabelText() {
        return q;
    }

    Label getLabelView() {
        return (Label)getTag(a.d.fab_label);
    }

    public int getLabelVisibility() {
        Label label = getLabelView();
        int i1;
        if (label != null)
            i1 = label.getVisibility();
        else
            i1 = -1;
        return i1;
    }

    public int getMax() {
        this;
        JVM INSTR monitorenter ;
        int i1 = U;
        this;
        JVM INSTR monitorexit ;
        return i1;
        Exception exception;
        exception;
        throw exception;
    }

    android.view.View.OnClickListener getOnClickListener() {
        return r;
    }

    public int getProgress() {
        this;
        JVM INSTR monitorenter ;
        boolean flag = G;
        if (!flag) goto _L2; else goto _L1
_L1:
        int i1 = 0;
_L4:
        this;
        JVM INSTR monitorexit ;
        return i1;
_L2:
        i1 = Q;
        if (true) goto _L4; else goto _L3
_L3:
        Exception exception;
        exception;
        throw exception;
    }

    public int getShadowColor() {
        return c;
    }

    public int getShadowRadius() {
        return d;
    }

    public int getShadowXOffset() {
        return e;
    }

    public int getShadowYOffset() {
        return f;
    }

    Animation getShowAnimation() {
        return o;
    }

    public boolean h() {
        boolean flag;
        if (!t && b)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean i() {
        boolean flag;
        if (getVisibility() == 4)
            flag = true;
        else
            flag = false;
        return flag;
    }

    protected void onDraw(Canvas canvas) {
        boolean flag1 = true;
        boolean flag = true;
        super.onDraw(canvas);
        if (v) {
            if (V)
                canvas.drawArc(D, 360F, 360F, false, E);
            if (G) {
                long l1 = SystemClock.uptimeMillis() - H;
                float f1 = ((float)l1 * I) / 1000F;
                a(l1);
                O = O + f1;
                if (O > 360F)
                    O = O - 360F;
                H = SystemClock.uptimeMillis();
                float f3 = O - 90F;
                f1 = (float)M + N;
                if (isInEditMode()) {
                    f3 = 0.0F;
                    f1 = 135F;
                }
                canvas.drawArc(D, f3, f1, false, F);
            } else {
                if (O != P) {
                    float f2 = ((float)(SystemClock.uptimeMillis() - H) / 1000F) * I;
                    if (O > P)
                        O = Math.max(O - f2, P);
                    else
                        O = Math.min(f2 + O, P);
                    H = SystemClock.uptimeMillis();
                    flag = flag1;
                } else {
                    flag = false;
                }
                canvas.drawArc(D, -90F, O, false, F);
            }
            if (flag)
                invalidate();
        }
    }

    protected void onMeasure(int i1, int j1) {
        setMeasuredDimension(k(), l());
    }

    public void onRestoreInstanceState(Parcelable parcelable) {
        if (!(parcelable instanceof ProgressSavedState)) {
            super.onRestoreInstanceState(parcelable);
        } else {
            parcelable = (ProgressSavedState)parcelable;
            super.onRestoreInstanceState(parcelable.getSuperState());
            O = ((ProgressSavedState) (parcelable)).a;
            P = ((ProgressSavedState) (parcelable)).b;
            I = ((ProgressSavedState) (parcelable)).c;
            w = ((ProgressSavedState) (parcelable)).e;
            x = ((ProgressSavedState) (parcelable)).f;
            y = ((ProgressSavedState) (parcelable)).g;
            S = ((ProgressSavedState) (parcelable)).k;
            T = ((ProgressSavedState) (parcelable)).l;
            Q = ((ProgressSavedState) (parcelable)).d;
            R = ((ProgressSavedState) (parcelable)).m;
            V = ((ProgressSavedState) (parcelable)).n;
            H = SystemClock.uptimeMillis();
        }
    }

    public Parcelable onSaveInstanceState() {
        ProgressSavedState progresssavedstate = new ProgressSavedState(super.onSaveInstanceState());
        progresssavedstate.a = O;
        progresssavedstate.b = P;
        progresssavedstate.c = I;
        progresssavedstate.e = w;
        progresssavedstate.f = x;
        progresssavedstate.g = y;
        progresssavedstate.k = G;
        boolean flag;
        if (v && Q > 0 && !G)
            flag = true;
        else
            flag = false;
        progresssavedstate.l = flag;
        progresssavedstate.d = Q;
        progresssavedstate.m = R;
        progresssavedstate.n = V;
        return progresssavedstate;
    }

    protected void onSizeChanged(int i1, int j1, int k1, int l1) {
        p();
        if (!S) goto _L2; else goto _L1
_L1:
        setIndeterminate(true);
        S = false;
_L4:
        super.onSizeChanged(i1, j1, k1, l1);
        s();
        r();
        c();
        return;
_L2:
        if (T) {
            a(Q, R);
            T = false;
        } else
        if (z) {
            q();
            z = false;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public boolean onTouchEvent(MotionEvent motionevent) {
        if (r == null || !isEnabled()) goto _L2; else goto _L1
_L1:
        Label label = (Label)getTag(a.d.fab_label);
        if (label != null) goto _L4; else goto _L3
_L3:
        boolean flag = super.onTouchEvent(motionevent);
_L8:
        return flag;
_L4:
        motionevent.getAction();
        JVM INSTR tableswitch 1 3: default 68
    //                   1 86
    //                   2 68
    //                   3 101;
           goto _L5 _L6 _L5 _L7
_L5:
        break; /* Loop/switch isn't completed */
_L7:
        break MISSING_BLOCK_LABEL_101;
_L9:
        g.onTouchEvent(motionevent);
_L2:
        flag = super.onTouchEvent(motionevent);
          goto _L8
_L6:
        if (label != null)
            label.e();
        g();
          goto _L9
        if (label != null)
            label.e();
        g();
          goto _L9
    }

    public void setButtonSize(int i1) {
        if (i1 != 0 && i1 != 1)
            throw new IllegalArgumentException("Use @FabSize constants only!");
        if (a != i1) {
            a = i1;
            c();
        }
    }

    public void setColorDisabled(int i1) {
        if (i1 != k) {
            k = i1;
            c();
        }
    }

    public void setColorDisabledResId(int i1) {
        setColorDisabled(getResources().getColor(i1));
    }

    public void setColorNormal(int i1) {
        if (i != i1) {
            i = i1;
            c();
        }
    }

    public void setColorNormalResId(int i1) {
        setColorNormal(getResources().getColor(i1));
    }

    public void setColorPressed(int i1) {
        if (i1 != j) {
            j = i1;
            c();
        }
    }

    public void setColorPressedResId(int i1) {
        setColorPressed(getResources().getColor(i1));
    }

    public void setColorRipple(int i1) {
        if (i1 != l) {
            l = i1;
            c();
        }
    }

    public void setColorRippleResId(int i1) {
        setColorRipple(getResources().getColor(i1));
    }

    public void setElevation(float f1) {
        if (com.github.clans.fab.b.b() && f1 > 0.0F) {
            super.setElevation(f1);
            if (!isInEditMode()) {
                t = true;
                b = false;
            }
            c();
        }
    }

    public void setElevationCompat(float f1) {
        c = 0x26000000;
        d = Math.round(f1 / 2.0F);
        e = 0;
        float f2;
        if (a == 0)
            f2 = f1;
        else
            f2 = f1 / 2.0F;
        f = Math.round(f2);
        if (com.github.clans.fab.b.b()) {
            super.setElevation(f1);
            u = true;
            b = false;
            c();
            android.view.ViewGroup.LayoutParams layoutparams = getLayoutParams();
            if (layoutparams != null)
                setLayoutParams(layoutparams);
        } else {
            b = true;
            c();
        }
    }

    public void setEnabled(boolean flag) {
        super.setEnabled(flag);
        Label label = (Label)getTag(a.d.fab_label);
        if (label != null)
            label.setEnabled(flag);
    }

    public void setHideAnimation(Animation animation) {
        p = animation;
    }

    public void setImageDrawable(Drawable drawable) {
        if (m != drawable) {
            m = drawable;
            c();
        }
    }

    public void setImageResource(int i1) {
        Drawable drawable = getResources().getDrawable(i1);
        if (m != drawable) {
            m = drawable;
            c();
        }
    }

    public void setIndeterminate(boolean flag) {
        this;
        JVM INSTR monitorenter ;
        if (flag)
            break MISSING_BLOCK_LABEL_11;
        O = 0.0F;
        v = flag;
        z = true;
        G = flag;
        H = SystemClock.uptimeMillis();
        s();
        c();
        this;
        JVM INSTR monitorexit ;
        return;
        Exception exception;
        exception;
        throw exception;
    }

    public void setLabelText(String s1) {
        q = s1;
        Label label = getLabelView();
        if (label != null)
            label.setText(s1);
    }

    public void setLabelTextColor(int i1) {
        getLabelView().setTextColor(i1);
    }

    public void setLabelTextColor(ColorStateList colorstatelist) {
        getLabelView().setTextColor(colorstatelist);
    }

    public void setLabelVisibility(int i1) {
        Label label = getLabelView();
        if (label != null) {
            label.setVisibility(i1);
            boolean flag;
            if (i1 == 0)
                flag = true;
            else
                flag = false;
            label.setHandleVisibilityChanges(flag);
        }
    }

    public void setLayoutParams(android.view.ViewGroup.LayoutParams layoutparams) {
        if ((layoutparams instanceof android.view.ViewGroup.MarginLayoutParams) && u) {
            android.view.ViewGroup.MarginLayoutParams marginlayoutparams = (android.view.ViewGroup.MarginLayoutParams)layoutparams;
            marginlayoutparams.leftMargin = marginlayoutparams.leftMargin + getShadowX();
            marginlayoutparams = (android.view.ViewGroup.MarginLayoutParams)layoutparams;
            marginlayoutparams.topMargin = marginlayoutparams.topMargin + getShadowY();
            marginlayoutparams = (android.view.ViewGroup.MarginLayoutParams)layoutparams;
            marginlayoutparams.rightMargin = marginlayoutparams.rightMargin + getShadowX();
            marginlayoutparams = (android.view.ViewGroup.MarginLayoutParams)layoutparams;
            marginlayoutparams.bottomMargin = marginlayoutparams.bottomMargin + getShadowY();
        }
        super.setLayoutParams(layoutparams);
    }

    public void setMax(int i1) {
        this;
        JVM INSTR monitorenter ;
        U = i1;
        this;
        JVM INSTR monitorexit ;
        return;
        Exception exception;
        exception;
        throw exception;
    }

    public void setOnClickListener(android.view.View.OnClickListener onclicklistener) {
        super.setOnClickListener(onclicklistener);
        r = onclicklistener;
        onclicklistener = (View)getTag(a.d.fab_label);
        if (onclicklistener != null)
            onclicklistener.setOnClickListener(new android.view.View.OnClickListener() {

                final FloatingActionButton a;

                public void onClick(View view) {
                    if (FloatingActionButton.j(a) != null)
                        FloatingActionButton.j(a).onClick(a);
                }

             {
                a = FloatingActionButton.this;
                super();
            }
            }
);
    }

    public void setShadowColor(int i1) {
        if (c != i1) {
            c = i1;
            c();
        }
    }

    public void setShadowColorResource(int i1) {
        i1 = getResources().getColor(i1);
        if (c != i1) {
            c = i1;
            c();
        }
    }

    public void setShadowRadius(float f1) {
        d = com.github.clans.fab.b.a(getContext(), f1);
        requestLayout();
        c();
    }

    public void setShadowRadius(int i1) {
        i1 = getResources().getDimensionPixelSize(i1);
        if (d != i1) {
            d = i1;
            requestLayout();
            c();
        }
    }

    public void setShadowXOffset(float f1) {
        e = com.github.clans.fab.b.a(getContext(), f1);
        requestLayout();
        c();
    }

    public void setShadowXOffset(int i1) {
        i1 = getResources().getDimensionPixelSize(i1);
        if (e != i1) {
            e = i1;
            requestLayout();
            c();
        }
    }

    public void setShadowYOffset(float f1) {
        f = com.github.clans.fab.b.a(getContext(), f1);
        requestLayout();
        c();
    }

    public void setShadowYOffset(int i1) {
        i1 = getResources().getDimensionPixelSize(i1);
        if (f != i1) {
            f = i1;
            requestLayout();
            c();
        }
    }

    public void setShowAnimation(Animation animation) {
        o = animation;
    }

    public void setShowProgressBackground(boolean flag) {
        this;
        JVM INSTR monitorenter ;
        V = flag;
        this;
        JVM INSTR monitorexit ;
        return;
        Exception exception;
        exception;
        throw exception;
    }

    public void setShowShadow(boolean flag) {
        if (b != flag) {
            b = flag;
            c();
        }
    }

    public void setVisibility(int i1) {
        super.setVisibility(i1);
        Label label = (Label)getTag(a.d.fab_label);
        if (label != null)
            label.setVisibility(i1);
    }

    static  {
        h = new PorterDuffXfermode(android.graphics.PorterDuff.Mode.CLEAR);
    }
}
