// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.barchart.udt.nio;

import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.channels.IllegalBlockingModeException;

// Referenced classes of package com.barchart.udt.nio:
//            k

public class b extends InputStream {

    protected final k a;

    protected b(k k1) {
        if (k1 == null)
            throw new NullPointerException("channel == null");
        if (!k1.isBlocking()) {
            throw new IllegalBlockingModeException();
        } else {
            a = k1;
            return;
        }
    }

    public int available() {
        return 0;
    }

    public void close() {
        a.close();
    }

    public void mark(int i) {
        throw new UnsupportedOperationException("mark not supported");
    }

    public boolean markSupported() {
        return false;
    }

    public int read() {
        byte abyte0[] = new byte[1];
        read(abyte0);
        return abyte0[0];
    }

    public int read(byte abyte0[]) {
        return read(abyte0, 0, abyte0.length);
    }

    public int read(byte abyte0[], int i, int j) {
        if (j > abyte0.length - i) {
            throw new IndexOutOfBoundsException("len > bytes.length - off");
        } else {
            abyte0 = ByteBuffer.wrap(abyte0);
            abyte0.position(i);
            abyte0.limit(i + j);
            return a.read(abyte0);
        }
    }

    public void reset() {
        throw new UnsupportedOperationException("reset not supported");
    }

    public long skip(long l) {
        ByteBuffer bytebuffer = ByteBuffer.allocateDirect(32768);
        long l1 = l;
        do {
            int i;
label0:
            {
                if (l1 > 0L) {
                    bytebuffer.limit((int)Math.min(l1, bytebuffer.capacity()));
                    i = a.read(bytebuffer);
                    if (i > 0)
                        break label0;
                }
                return l - l1;
            }
            l1 -= i;
            bytebuffer.rewind();
        } while (true);
    }
}
