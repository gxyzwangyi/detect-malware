// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.barchart.udt.nio;

import com.barchart.udt.SocketUDT;
import com.barchart.udt.TypeUDT;
import java.nio.channels.*;
import java.nio.channels.spi.AbstractSelector;
import java.nio.channels.spi.SelectorProvider;

// Referenced classes of package com.barchart.udt.nio:
//            f, i, j, k

public class h extends SelectorProvider {

    public static final h a;
    public static final h b;
    private volatile int c;
    private volatile int d;
    private final TypeUDT e;

    protected h(TypeUDT typeudt) {
        c = 256;
        d = 1024;
        e = typeudt;
    }

    public static h a(TypeUDT typeudt) {
        static class _cls1 {

            static final int a[];

            static  {
                a = new int[TypeUDT.values().length];
                NoSuchFieldError nosuchfielderror;
                try {
                    a[TypeUDT.b.ordinal()] = 1;
                }
                catch (NoSuchFieldError nosuchfielderror1) { }
                a[TypeUDT.a.ordinal()] = 2;
_L2:
                return;
                nosuchfielderror;
                if (true) goto _L2; else goto _L1
_L1:
            }
        }

        _cls1.a[typeudt.ordinal()];
        JVM INSTR tableswitch 1 2: default 32
    //                   1 59
    //                   2 65;
           goto _L1 _L2 _L3
_L1:
        throw new IllegalStateException((new StringBuilder()).append("wrong type=").append(typeudt).toString());
_L2:
        typeudt = a;
_L5:
        return typeudt;
_L3:
        typeudt = b;
        if (true) goto _L5; else goto _L4
_L4:
    }

    public final TypeUDT a() {
        return e;
    }

    public int b() {
        return c;
    }

    public f c() {
        return new f(this, new SocketUDT(e));
    }

    public i d() {
        return new i(this, d);
    }

    public j e() {
        return new j(this, new SocketUDT(e));
    }

    public k f() {
        return new k(this, new SocketUDT(e));
    }

    public DatagramChannel openDatagramChannel() {
        throw new UnsupportedOperationException("feature not available");
    }

    public Pipe openPipe() {
        throw new UnsupportedOperationException("feature not available");
    }

    public AbstractSelector openSelector() {
        return d();
    }

    public ServerSocketChannel openServerSocketChannel() {
        return e();
    }

    public SocketChannel openSocketChannel() {
        return f();
    }

    static  {
        a = new h(TypeUDT.b);
        b = new h(TypeUDT.a);
    }
}
