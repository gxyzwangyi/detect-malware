// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.barchart.udt.net;

import com.barchart.udt.*;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.*;
import java.nio.channels.SocketChannel;
import org.slf4j.b;
import org.slf4j.c;

// Referenced classes of package com.barchart.udt.net:
//            a, b

public class d extends Socket {

    protected InputStream a;
    protected OutputStream b;
    protected final SocketUDT c;
    private final b d;

    public d() {
        this(new SocketUDT(TypeUDT.a));
        c.a(true);
    }

    protected d(SocketUDT socketudt) {
        d = org.slf4j.c.a(getClass());
        c = socketudt;
    }

    public void bind(SocketAddress socketaddress) {
        if (socketaddress == null)
            socketaddress = new InetSocketAddress(0);
        c.a((InetSocketAddress)socketaddress);
    }

    public void close() {
        this;
        JVM INSTR monitorenter ;
        c.b();
        this;
        JVM INSTR monitorexit ;
        return;
        Exception exception;
        exception;
        throw exception;
    }

    public void connect(SocketAddress socketaddress) {
        c.b((InetSocketAddress)socketaddress);
    }

    public void connect(SocketAddress socketaddress, int i) {
        throw new UnsupportedOperationException("feature not available");
    }

    public SocketChannel getChannel() {
        throw new UnsupportedOperationException("feature not available");
    }

    public InetAddress getInetAddress() {
        return c.g();
    }

    public InputStream getInputStream() {
        this;
        JVM INSTR monitorenter ;
        InputStream inputstream;
        if (a == null) {
            a a1 = JVM INSTR new #85  <Class a>;
            a1.a(c);
            a = a1;
        }
        inputstream = a;
        this;
        JVM INSTR monitorexit ;
        return inputstream;
        Exception exception;
        exception;
        throw exception;
    }

    public boolean getKeepAlive() {
        return true;
    }

    public InetAddress getLocalAddress() {
        return c.c();
    }

    public int getLocalPort() {
        return c.d();
    }

    public SocketAddress getLocalSocketAddress() {
        InetSocketAddress inetsocketaddress;
        try {
            inetsocketaddress = c.e();
        }
        catch (ExceptionUDT exceptionudt) {
            exceptionudt = null;
        }
        return inetsocketaddress;
    }

    public boolean getOOBInline() {
        return false;
    }

    public OutputStream getOutputStream() {
        this;
        JVM INSTR monitorenter ;
        OutputStream outputstream;
        if (b == null) {
            com.barchart.udt.net.b b1 = JVM INSTR new #110 <Class com.barchart.udt.net.b>;
            b1.com.barchart.udt.net.b(c);
            b = b1;
        }
        outputstream = b;
        this;
        JVM INSTR monitorexit ;
        return outputstream;
        Exception exception;
        exception;
        throw exception;
    }

    public int getPort() {
        return c.h();
    }

    public int getReceiveBufferSize() {
        this;
        JVM INSTR monitorenter ;
        int i = c.f();
        this;
        JVM INSTR monitorexit ;
        return i;
        Exception exception;
        exception;
        throw exception;
    }

    public SocketAddress getRemoteSocketAddress() {
        InetSocketAddress inetsocketaddress;
        try {
            inetsocketaddress = c.i();
        }
        catch (ExceptionUDT exceptionudt) {
            exceptionudt = null;
        }
        return inetsocketaddress;
    }

    public boolean getReuseAddress() {
        return c.j();
    }

    public int getSendBufferSize() {
        this;
        JVM INSTR monitorenter ;
        int i = c.k();
        this;
        JVM INSTR monitorexit ;
        return i;
        Exception exception;
        exception;
        throw exception;
    }

    public int getSoLinger() {
        return c.l();
    }

    public int getSoTimeout() {
        this;
        JVM INSTR monitorenter ;
        int i = c.m();
        this;
        JVM INSTR monitorexit ;
        return i;
        Exception exception;
        exception;
        throw exception;
    }

    public boolean getTcpNoDelay() {
        return false;
    }

    public int getTrafficClass() {
        return 0;
    }

    public boolean isBound() {
        return c.p();
    }

    public boolean isClosed() {
        return c.q();
    }

    public boolean isConnected() {
        return c.r();
    }

    public boolean isInputShutdown() {
        return c.q();
    }

    public boolean isOutputShutdown() {
        return c.q();
    }

    public void sendUrgentData(int i) {
        d.a("Sending urgent data not supported in Barchart UDT...");
    }

    public void setKeepAlive(boolean flag) {
        d.a("Keep alive not supported in Barchart UDT...");
    }

    public void setOOBInline(boolean flag) {
        d.a("OOB inline  not supported in Barchart UDT...");
    }

    public void setPerformancePreferences(int i, int j, int k) {
    }

    public void setReceiveBufferSize(int i) {
        this;
        JVM INSTR monitorenter ;
        c.c(i);
        this;
        JVM INSTR monitorexit ;
        return;
        Exception exception;
        exception;
        throw exception;
    }

    public void setReuseAddress(boolean flag) {
        c.d(flag);
    }

    public void setSendBufferSize(int i) {
        this;
        JVM INSTR monitorenter ;
        c.d(i);
        this;
        JVM INSTR monitorexit ;
        return;
        Exception exception;
        exception;
        throw exception;
    }

    public void setSoLinger(boolean flag, int i) {
        c.a(flag, i);
    }

    public void setSoTimeout(int i) {
        this;
        JVM INSTR monitorenter ;
        c.e(i);
        this;
        JVM INSTR monitorexit ;
        return;
        Exception exception;
        exception;
        throw exception;
    }

    public void setTcpNoDelay(boolean flag) {
        d.a("TCP no delay not supported in Barchart UDT...");
    }

    public void setTrafficClass(int i) {
        d.a("Traffic class not supported in Barchart UDT...");
    }

    public void shutdownInput() {
        c.b();
    }

    public void shutdownOutput() {
        c.b();
    }
}
