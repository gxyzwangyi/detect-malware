// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.barchart.udt.net;

import com.barchart.udt.ErrorUDT;
import com.barchart.udt.SocketUDT;
import java.io.InputStream;
import java.nio.channels.IllegalBlockingModeException;

// Referenced classes of package com.barchart.udt.net:
//            ExceptionReceiveUDT

public class a extends InputStream {

    static final boolean b;
    protected final SocketUDT a;

    public a(SocketUDT socketudt) {
        if (!socketudt.o()) {
            throw new IllegalBlockingModeException();
        } else {
            a = socketudt;
            return;
        }
    }

    public int available() {
        return 0;
    }

    public void close() {
        a.b();
    }

    public void mark(int i) {
        throw new UnsupportedOperationException("mark not supported");
    }

    public boolean markSupported() {
        return false;
    }

    public int read() {
        byte abyte0[] = new byte[1];
        int i = read(abyte0);
        if (!b && i != 1)
            throw new AssertionError();
        else
            return abyte0[0];
    }

    public int read(byte abyte0[]) {
        return read(abyte0, 0, abyte0.length);
    }

    public int read(byte abyte0[], int i, int j) {
        i = a.a(abyte0, i, i + j);
        if (i > 0)
            if (!b && i > j)
                throw new AssertionError();
            else
                return i;
        if (i == 0)
            throw new NetInputStreamUDT._cls1(a.n(), ErrorUDT.N, "UDT receive time out");
        else
            throw new IllegalStateException("should not happen");
    }

    public void reset() {
        throw new UnsupportedOperationException("reset not supported");
    }

    public long skip(long l) {
        long l1 = 0L;
        if (l > 0L) goto _L2; else goto _L1
_L1:
        l = l1;
_L4:
        return l;
_L2:
        int i = (int)Math.min(1024L, l);
        byte abyte0[] = new byte[i];
        long l2 = l;
        do {
            int j;
label0:
            {
                if (l2 > 0L) {
                    j = read(abyte0, 0, (int)Math.min(i, l2));
                    if (j >= 0)
                        break label0;
                }
                l -= l2;
            }
            if (true)
                continue;
            l2 -= j;
        } while (true);
        if (true) goto _L4; else goto _L3
_L3:
    }

    static  {
        boolean flag;
        if (!com/barchart/udt/net/a.desiredAssertionStatus())
            flag = true;
        else
            flag = false;
        b = flag;
    }

    // Unreferenced inner class com/barchart/udt/net/NetInputStreamUDT$1

/* anonymous class */
    class NetInputStreamUDT._cls1 extends ExceptionReceiveUDT {

        final a a;

             {
                a = a.this;
                super(i, errorudt, s);
            }
    }

}
