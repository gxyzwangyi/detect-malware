// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.barchart.udt.net;

import com.barchart.udt.ExceptionUDT;
import com.barchart.udt.SocketUDT;
import java.net.*;
import java.nio.channels.ServerSocketChannel;

// Referenced classes of package com.barchart.udt.net:
//            d

public class c extends ServerSocket {

    protected final SocketUDT a;

    protected c(SocketUDT socketudt) {
        a = socketudt;
    }

    public Socket accept() {
        return new d(a.a());
    }

    public void bind(SocketAddress socketaddress) {
        bind(socketaddress, 256);
    }

    public void bind(SocketAddress socketaddress, int i) {
        if (socketaddress == null)
            socketaddress = new InetSocketAddress(0);
        int j = i;
        if (i <= 0)
            j = 256;
        a.a((InetSocketAddress)socketaddress);
        a.a(j);
    }

    public void close() {
        a.b();
    }

    public ServerSocketChannel getChannel() {
        throw new UnsupportedOperationException("feature not available");
    }

    public InetAddress getInetAddress() {
        return a.c();
    }

    public int getLocalPort() {
        return a.d();
    }

    public SocketAddress getLocalSocketAddress() {
        InetSocketAddress inetsocketaddress;
        try {
            inetsocketaddress = a.e();
        }
        catch (ExceptionUDT exceptionudt) {
            exceptionudt = null;
        }
        return inetsocketaddress;
    }

    public int getReceiveBufferSize() {
        return a.f();
    }

    public boolean getReuseAddress() {
        return a.j();
    }

    public int getSoTimeout() {
        return a.m();
    }

    public boolean isBound() {
        return a.p();
    }

    public boolean isClosed() {
        return a.q();
    }

    public void setPerformancePreferences(int i, int j, int k) {
        throw new UnsupportedOperationException("feature not available");
    }

    public void setReceiveBufferSize(int i) {
        a.c(i);
        a.d(i);
    }

    public void setReuseAddress(boolean flag) {
        a.d(flag);
    }

    public void setSoTimeout(int i) {
        a.e(i);
    }
}
