// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.barchart.udt.b;

import com.barchart.udt.EpollUDT;
import java.net.InetSocketAddress;
import java.nio.*;
import java.util.Collection;
import java.util.Set;
import org.slf4j.b;
import org.slf4j.c;

// Referenced classes of package com.barchart.udt.b:
//            c, b

public class a {

    protected static final b a = c.a(com/barchart/udt/EpollUDT);

    public static final IntBuffer a(int i) {
        return ByteBuffer.allocateDirect(i * 4).order(ByteOrder.nativeOrder()).asIntBuffer();
    }

    public static Set a(Collection collection) {
        return new com.barchart.udt.b.c(collection);
    }

    public static Set a(Set set) {
        return new com.barchart.udt.b.b(set);
    }

    public static void a(InetSocketAddress inetsocketaddress) {
        if (inetsocketaddress == null)
            throw new IllegalArgumentException("socketAddress can't be null");
        if (inetsocketaddress.isUnresolved())
            throw new IllegalArgumentException((new StringBuilder()).append("socketAddress is unresolved : ").append(inetsocketaddress).append(" : check your DNS settings").toString());
        else
            return;
    }

    public static final void a(ByteBuffer bytebuffer) {
        if (bytebuffer == null)
            throw new IllegalArgumentException("buffer == null");
        if (!bytebuffer.isDirect())
            throw new IllegalArgumentException("must use DirectByteBuffer");
        else
            return;
    }

    public static final void a(byte abyte0[]) {
        if (abyte0 == null)
            throw new IllegalArgumentException("array == null");
        else
            return;
    }

}
