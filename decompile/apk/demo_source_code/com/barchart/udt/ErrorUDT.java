// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.barchart.udt;


public final class ErrorUDT extends Enum {

    public static final ErrorUDT A;
    public static final ErrorUDT B;
    public static final ErrorUDT C;
    public static final ErrorUDT D;
    public static final ErrorUDT E;
    public static final ErrorUDT F;
    public static final ErrorUDT G;
    public static final ErrorUDT H;
    public static final ErrorUDT I;
    public static final ErrorUDT J;
    public static final ErrorUDT K;
    public static final ErrorUDT L;
    public static final ErrorUDT M;
    public static final ErrorUDT N;
    static final ErrorUDT O[] = values();
    private static final ErrorUDT R[];
    public static final ErrorUDT a;
    public static final ErrorUDT b;
    public static final ErrorUDT c;
    public static final ErrorUDT d;
    public static final ErrorUDT e;
    public static final ErrorUDT f;
    public static final ErrorUDT g;
    public static final ErrorUDT h;
    public static final ErrorUDT i;
    public static final ErrorUDT j;
    public static final ErrorUDT k;
    public static final ErrorUDT l;
    public static final ErrorUDT m;
    public static final ErrorUDT n;
    public static final ErrorUDT o;
    public static final ErrorUDT p;
    public static final ErrorUDT q;
    public static final ErrorUDT r;
    public static final ErrorUDT s;
    public static final ErrorUDT t;
    public static final ErrorUDT u;
    public static final ErrorUDT v;
    public static final ErrorUDT w;
    public static final ErrorUDT x;
    public static final ErrorUDT y;
    public static final ErrorUDT z;
    private final int P;
    private final String Q;

    private ErrorUDT(String s1, int i1, int j1, String s2) {
        super(s1, i1);
        P = j1;
        Q = s2;
    }

    public static ErrorUDT a(int i1) {
        int j1;
        int k1;
        ErrorUDT aerrorudt[];
        aerrorudt = O;
        k1 = aerrorudt.length;
        j1 = 0;
_L3:
        ErrorUDT errorudt;
        if (j1 >= k1)
            break MISSING_BLOCK_LABEL_37;
        errorudt = aerrorudt[j1];
        if (errorudt.P != i1) goto _L2; else goto _L1
_L1:
        return errorudt;
_L2:
        j1++;
          goto _L3
        errorudt = K;
          goto _L1
    }

    public static String a(int i1, int j1, String s1) {
        return String.format("UDT Error : %d : %s : %s [id: 0x%08x]", new Object[] {
            Integer.valueOf(j1), a(j1).Q, s1, Integer.valueOf(i1)
        });
    }

    public static ErrorUDT valueOf(String s1) {
        return (ErrorUDT)Enum.valueOf(com/barchart/udt/ErrorUDT, s1);
    }

    public static ErrorUDT[] values() {
        return (ErrorUDT[])R.clone();
    }

    public int a() {
        return P;
    }

    static  {
        a = new ErrorUDT("SUCCESS", 0, 0, "success operation");
        b = new ErrorUDT("ECONNSETUP", 1, 1000, "connection setup failure");
        c = new ErrorUDT("NOSERVER", 2, 1001, "server does not exist");
        d = new ErrorUDT("ECONNREJ", 3, 1002, "connection request was rejected by server");
        e = new ErrorUDT("ESOCKFAIL", 4, 1003, "could not create/configure UDP socket");
        f = new ErrorUDT("ESECFAIL", 5, 1004, "connection request was aborted due to security reasons");
        g = new ErrorUDT("ECONNFAIL", 6, 2000, "connection failure");
        h = new ErrorUDT("ECONNLOST", 7, 2001, "connection was broken");
        i = new ErrorUDT("ENOCONN", 8, 2002, "connection does not exist");
        j = new ErrorUDT("ERESOURCE", 9, 3000, "system resource failure");
        k = new ErrorUDT("ETHREAD", 10, 3001, "could not create new thread");
        l = new ErrorUDT("ENOBUF", 11, 3002, "no memory space");
        m = new ErrorUDT("EFILE", 12, 4000, "file access error");
        n = new ErrorUDT("EINVRDOFF", 13, 4001, "invalid read offset");
        o = new ErrorUDT("ERDPERM", 14, 4002, "no read permission");
        p = new ErrorUDT("EINVWROFF", 15, 4003, "invalid write offset");
        q = new ErrorUDT("EWRPERM", 16, 4004, "no write permission");
        r = new ErrorUDT("EINVOP", 17, 5000, "operation not supported");
        s = new ErrorUDT("EBOUNDSOCK", 18, 5001, "cannot execute the operation on a bound socket");
        t = new ErrorUDT("ECONNSOCK", 19, 5002, "cannot execute the operation on a connected socket");
        u = new ErrorUDT("EINVPARAM", 20, 5003, "bad parameters");
        v = new ErrorUDT("EINVSOCK", 21, 5004, "invalid UDT socket");
        w = new ErrorUDT("EUNBOUNDSOCK", 22, 5005, "cannot listen on unbound socket");
        x = new ErrorUDT("ENOLISTEN", 23, 5006, "(accept) socket is not in listening state");
        y = new ErrorUDT("ERDVNOSERV", 24, 5007, "rendezvous connection process does not allow listen and accept call");
        z = new ErrorUDT("ERDVUNBOUND", 25, 5008, "rendezvous connection setup is enabled but bind has not been called before connect");
        A = new ErrorUDT("ESTREAMILL", 26, 5009, "operation not supported in SOCK_STREAM mode");
        B = new ErrorUDT("EDGRAMILL", 27, 5010, "operation not supported in SOCK_DGRAM mode");
        C = new ErrorUDT("EDUPLISTEN", 28, 5011, "another socket is already listening on the same UDP port");
        D = new ErrorUDT("ELARGEMSG", 29, 5012, "message is too large to be hold in the sending buffer");
        E = new ErrorUDT("EINVPOLLID", 30, 5013, "epoll ID is invalid");
        F = new ErrorUDT("EASYNCFAIL", 31, 6000, "non-blocking call failure");
        G = new ErrorUDT("EASYNCSND", 32, 6001, "no buffer available for sending");
        H = new ErrorUDT("EASYNCRCV", 33, 6002, "no data available for read");
        I = new ErrorUDT("ETIMEOUT", 34, 6003, "timeout before operation completes");
        J = new ErrorUDT("EPEERERR", 35, 7000, "error has happened at the peer side");
        K = new ErrorUDT("WRAPPER_UNKNOWN", 36, -1, "unknown error code");
        L = new ErrorUDT("WRAPPER_UNIMPLEMENTED", 37, -2, "this feature is not yet implemented");
        M = new ErrorUDT("WRAPPER_MESSAGE", 38, -3, "wrapper generated error");
        N = new ErrorUDT("USER_DEFINED_MESSAGE", 39, -4, "user defined message");
        R = (new ErrorUDT[] {
            a, b, c, d, e, f, g, h, i, j, 
            k, l, m, n, o, p, q, r, s, t, 
            u, v, w, x, y, z, A, B, C, D, 
            E, F, G, H, I, J, K, L, M, N
        });
    }
}
