// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.barchart.udt;

import org.slf4j.b;
import org.slf4j.c;

// Referenced classes of package com.barchart.udt:
//            SocketUDT, TypeUDT

public class EpollUDT {
    public static final class Opt extends Enum {

        public static final Opt a;
        public static final Opt b;
        public static final Opt c;
        public static final Opt d;
        public static final Opt e;
        public static final Opt f;
        public static final Opt g;
        public static final Opt h;
        public static final Opt i;
        private static final Opt k[] = values();
        private static final Opt l[];
        public final int j;

        public static Opt valueOf(String s) {
            return (Opt)Enum.valueOf(com/barchart/udt/EpollUDT$Opt, s);
        }

        public static Opt[] values() {
            return (Opt[])l.clone();
        }

        public boolean a() {
            boolean flag;
            if ((j & b.j) != 0)
                flag = true;
            else
                flag = false;
            return flag;
        }

        public boolean b() {
            boolean flag;
            if ((j & c.j) != 0)
                flag = true;
            else
                flag = false;
            return flag;
        }

        static  {
            a = new Opt("NONE", 0, 0);
            b = new Opt("READ", 1, 1);
            c = new Opt("WRITE", 2, 4);
            d = new Opt("ERROR", 3, 8);
            e = new Opt("BOTH", 4, c.j | b.j);
            f = new Opt("ERROR_READ", 5, d.j | b.j);
            g = new Opt("ERROR_WRITE", 6, d.j | c.j);
            h = new Opt("ALL", 7, d.j | c.j | b.j);
            i = new Opt("UNKNOWN", 8, -1);
            l = (new Opt[] {
                a, b, c, d, e, f, g, h, i
            });
        }

        private Opt(String s, int i1, int j1) {
            super(s, i1);
            j = j1;
        }
    }


    protected static final b a = org.slf4j.c.a(com/barchart/udt/EpollUDT);
    static final boolean d;
    protected final int b = SocketUDT.epollCreate0();
    protected volatile boolean c;
    private final SocketUDT e;

    public EpollUDT() {
        c = true;
        e = new SocketUDT(com.barchart.udt.TypeUDT.b);
        SocketUDT.epollAdd0(b, e.n(), Opt.e.j);
        a.b("ep {} create", Integer.valueOf(b()));
    }

    public void a() {
        SocketUDT.epollRemove0(b(), e.n());
        e.b();
        c = false;
        SocketUDT.epollRelease0(b());
        a.b("ep {} delete", Integer.valueOf(b()));
    }

    public void a(SocketUDT socketudt) {
        a.b("ep {} rem {}", Integer.valueOf(b()), socketudt);
        SocketUDT.epollRemove0(b(), socketudt.n());
    }

    public void a(SocketUDT socketudt, Opt opt) {
        a.b("ep {} add {} {}", new Object[] {
            Integer.valueOf(b()), socketudt, opt
        });
        SocketUDT.epollAdd0(b(), socketudt.n(), opt.j);
    }

    public int b() {
        return b;
    }

    protected void finalize() {
        a();
        super.finalize();
_L1:
        return;
        Throwable throwable;
        throwable;
        a.d((new StringBuilder()).append("failed to destroy id=").append(b()).toString(), throwable);
          goto _L1
    }

    static  {
        boolean flag;
        if (!com/barchart/udt/EpollUDT.desiredAssertionStatus())
            flag = true;
        else
            flag = false;
        d = flag;
    }
}
