// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.barchart.udt.a;

import java.io.*;
import java.net.*;
import org.slf4j.b;
import org.slf4j.c;

public class d {

    protected static final b a = c.a(com/barchart/udt/a/d);

    public d() {
    }

    protected static long a(URLConnection urlconnection) {
        return urlconnection.getLastModified();
    }

    protected static URLConnection a(File file) {
        return file.toURI().toURL().openConnection();
    }

    protected static void a(String s) {
        System.load((new File(s)).getAbsolutePath());
    }

    protected static void a(String s, String s1) {
        URL url = com/barchart/udt/a/d.getResource(s);
        if (url == null) {
            a.d("classpath resource not found: {}", s);
            throw new IllegalArgumentException("resource not found");
        }
        a.b("sourceURL={} ", url);
        Object obj = url.openConnection();
        if (obj == null) {
            a.d("classpath resource connection not available: {}", s);
            throw new IllegalArgumentException("resource not found");
        }
        File file = (new File(s1)).getAbsoluteFile();
        a.b("targetFile={} ", file);
        File file1 = file.getParentFile().getAbsoluteFile();
        a.b("targetFolder={} ", file1);
        b(file1);
        if (a(((URLConnection) (obj)), a(file))) {
            a.b("already extracted; sourcePath={} targetPath={}", s, s1);
        } else {
            a.b("make new extraction destination for targetPath={}", s1);
            file.delete();
            file.createNewFile();
            long l = a(((URLConnection) (obj)));
            BufferedInputStream bufferedinputstream = new BufferedInputStream(url.openStream());
            obj = new BufferedOutputStream(new FileOutputStream(file));
            byte abyte0[] = new byte[0x10000];
            do {
                int i = bufferedinputstream.read(abyte0);
                if (i == -1)
                    break;
                ((OutputStream) (obj)).write(abyte0, 0, i);
            } while (true);
            ((OutputStream) (obj)).flush();
            bufferedinputstream.close();
            ((OutputStream) (obj)).close();
            file.setLastModified(l);
            a.b("extracted OK; sourcePath={} targetPath={}", s, s1);
        }
    }

    protected static boolean a(URLConnection urlconnection, URLConnection urlconnection1) {
        long l = urlconnection.getLastModified();
        long l2 = urlconnection.getContentLength();
        long l1 = urlconnection1.getLastModified();
        boolean flag;
        if (l2 == (long)urlconnection1.getContentLength() && l == l1)
            flag = true;
        else
            flag = false;
        return flag;
    }

    protected static void b(File file) {
        if (!file.exists()) goto _L2; else goto _L1
_L1:
        if (!file.isDirectory()) goto _L4; else goto _L3
_L3:
        a.b("found folder={}", file);
_L6:
        return;
_L4:
        a.e("not a directory; folder={}", file);
        throw new IllegalArgumentException("extract destination exists, but as a file and not a folder");
_L2:
        if (file.mkdirs()) {
            a.b("mkdirs : folder={}", file);
        } else {
            a.e("mkdirs failure; folder={}", file);
            throw new IllegalStateException("failed to make extract destination folder");
        }
        if (true) goto _L6; else goto _L5
_L5:
    }

}
