// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.barchart.udt.a;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import org.slf4j.b;

public class c {

    protected static final b a;
    protected static final String b;
    protected static final String c;
    protected static final Properties d;

    public c() {
    }

    protected static String a(String s) {
        return (new StringBuilder()).append(b()).append(".").append(s).toString();
    }

    protected static String a(String s, String s1, String s2) {
        return String.format("%s.%s.%s", new Object[] {
            s, s1, s2
        });
    }

    protected static List a() {
        ArrayList arraylist = new ArrayList();
        String s = j(e());
        if (s != null && s.length() != 0) {
            String as[] = s.split("\\s");
            int i1 = as.length;
            int l = 0;
            while (l < i1)  {
                arraylist.add(as[l].trim());
                l++;
            }
        }
        return arraylist;
    }

    protected static String b() {
        return a(i(), k(), j());
    }

    protected static String b(String s, String s1, String s2) {
        return String.format("%s-%s-%s", new Object[] {
            s, s1, s2
        });
    }

    protected static List b(String s) {
        ArrayList arraylist = new ArrayList();
        for (Iterator iterator = a().iterator(); iterator.hasNext(); arraylist.add(f((String)iterator.next())));
        arraylist.add(f(e(s)));
        return arraylist;
    }

    protected static String c() {
        return a("cpp.compiler");
    }

    protected static List c(String s) {
        ArrayList arraylist = new ArrayList();
        for (Iterator iterator = a().iterator(); iterator.hasNext(); arraylist.add(i((String)iterator.next())));
        arraylist.add(g(s));
        return arraylist;
    }

    protected static String d() {
        return a("jni.extension");
    }

    protected static List d(String s) {
        ArrayList arraylist = new ArrayList();
        for (Iterator iterator = a().iterator(); iterator.hasNext(); arraylist.add(i((String)iterator.next())));
        arraylist.add(h(s));
        return arraylist;
    }

    protected static String e() {
        return a("linker.dependency");
    }

    protected static String e(String s) {
        return String.format("%s%s.%s", new Object[] {
            j(f()), s, j(d())
        });
    }

    protected static String f() {
        return a("shared.prefix");
    }

    protected static String f(String s) {
        return String.format("/lib/%s/jni/%s", new Object[] {
            g(), s
        });
    }

    protected static String g() {
        return b(i(), k(), j());
    }

    protected static String g(String s) {
        String s1 = g();
        return String.format("/%s-%s-jni/lib/%s/jni/%s", new Object[] {
            s, s1, s1, e(s)
        });
    }

    protected static String h(String s) {
        return String.format("/%s", new Object[] {
            e(s)
        });
    }

    protected static boolean h() {
        boolean flag;
        if (!"".equals(j(c())))
            flag = true;
        else
            flag = false;
        return flag;
    }

    protected static String i() {
        return b;
    }

    protected static String i(String s) {
        return String.format("/aol/%s/lib/%s", new Object[] {
            g(), s
        });
    }

    protected static String j() {
        return "gpp";
    }

    protected static String j(String s) {
        s = d.getProperty(s);
        if (!(s instanceof String))
            s = "";
        return s;
    }

    protected static String k() {
        String s;
        if (c.contains("Mac OS X"))
            s = "MacOSX";
        else
        if (c.contains("Windows"))
            s = "Windows";
        else
            s = c;
        return s;
    }

    static  {
        a = org.slf4j.c.a(com/barchart/udt/a/c);
        b = System.getProperty("os.arch");
        c = System.getProperty("os.name");
        d = new Properties();
        a.c("ARCH/OS/LINK = {}/{}/{}", new Object[] {
            i(), k(), j()
        });
        a.a("Loading aol.properties.");
        java.io.InputStream inputstream = com/barchart/udt/a/c.getClassLoader().getResourceAsStream("aol.properties");
        d.load(inputstream);
_L1:
        return;
        Throwable throwable;
        throwable;
        a.d("Failed to load aol.properties.", throwable);
          goto _L1
    }
}
