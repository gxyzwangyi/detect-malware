// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.barchart.udt;

import com.barchart.udt.a.a;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import org.slf4j.b;
import org.slf4j.c;

// Referenced classes of package com.barchart.udt:
//            c, b, TypeUDT, OptionUDT, 
//            LingerUDT, StatusUDT

public class SocketUDT {

    public static boolean a = false;
    protected static final b b;
    public static long c = 0L;
    static final boolean d;
    private volatile int e;
    private volatile InetSocketAddress f;
    private volatile boolean g;
    private volatile int h;
    private final com.barchart.udt.b i;
    private volatile InetSocketAddress j;
    private final int k;
    private final int l;
    private final TypeUDT m;

    public SocketUDT(TypeUDT typeudt) {
        com/barchart/udt/SocketUDT;
        JVM INSTR monitorenter ;
        m = typeudt;
        com.barchart.udt.b b1 = JVM INSTR new #121 <Class com.barchart.udt.b>;
        b1.com.barchart.udt.b(this);
        i = b1;
        l = initInstance0(typeudt.c);
        k = 2;
        t();
        com/barchart/udt/SocketUDT;
        JVM INSTR monitorexit ;
        b.b("init : {}", this);
        return;
        typeudt;
        com/barchart/udt/SocketUDT;
        JVM INSTR monitorexit ;
        throw typeudt;
    }

    public static int a(int i1, IntBuffer intbuffer, IntBuffer intbuffer1, IntBuffer intbuffer2, long l1) {
        if (!d && (intbuffer == null || !intbuffer.isDirect()))
            throw new AssertionError();
        if (!d && (intbuffer1 == null || !intbuffer1.isDirect()))
            throw new AssertionError();
        if (!d && (intbuffer2 == null || !intbuffer2.isDirect()))
            throw new AssertionError();
        else
            return epollWait0(i1, intbuffer, intbuffer1, intbuffer2, l1);
    }

    protected static native void epollAdd0(int i1, int j1, int k1);

    protected static native int epollCreate0();

    protected static native void epollRelease0(int i1);

    protected static native void epollRemove0(int i1, int j1);

    protected static native int epollWait0(int i1, IntBuffer intbuffer, IntBuffer intbuffer1, IntBuffer intbuffer2, long l1);

    protected static native int getSignatureJNI0();

    protected static native void initClass0();

    protected static native int receive1(int i1, int j1, byte abyte0[], int k1, int l1);

    protected static native int receive2(int i1, int j1, ByteBuffer bytebuffer, int k1, int l1);

    protected static native int send1(int i1, int j1, int k1, boolean flag, byte abyte0[], int l1, int i2);

    protected static native int send2(int i1, int j1, int k1, boolean flag, ByteBuffer bytebuffer, int l1, int i2);

    public int a(ByteBuffer bytebuffer) {
        com.barchart.udt.b.a.a(bytebuffer);
        int k1 = bytebuffer.position();
        int i1 = bytebuffer.limit();
        int j1 = bytebuffer.remaining();
        i1 = receive2(l, m.c, bytebuffer, k1, i1);
        if (i1 > 0)
            if (i1 <= j1) {
                bytebuffer.position(k1 + i1);
            } else {
                b.d("sizeReceived > remaining");
                i1 = 0;
            }
        return i1;
    }

    public int a(byte abyte0[], int i1, int j1) {
        com.barchart.udt.b.a.a(abyte0);
        return receive1(l, m.c, abyte0, i1, j1);
    }

    public SocketUDT a() {
        return accept0();
    }

    public Object a(OptionUDT optionudt) {
        if (optionudt == null)
            throw new IllegalArgumentException("option == null");
        else
            return getOption0(optionudt.a(), optionudt.b());
    }

    public void a(int i1) {
        if (i1 <= 0) {
            throw new IllegalArgumentException("queueSize <= 0");
        } else {
            e = i1;
            listen0(i1);
            return;
        }
    }

    public void a(OptionUDT optionudt, Object obj) {
        if (optionudt == null || obj == null) {
            throw new IllegalArgumentException("option == null || value == null");
        } else {
            setOption0(optionudt.a(), optionudt.b(), obj);
            return;
        }
    }

    public void a(InetSocketAddress inetsocketaddress) {
        com.barchart.udt.b.a.a(inetsocketaddress);
        bind0(inetsocketaddress);
    }

    public void a(boolean flag) {
        if (flag) {
            a(OptionUDT.f, Boolean.TRUE);
            a(OptionUDT.d, Boolean.TRUE);
        } else {
            a(OptionUDT.f, Boolean.FALSE);
            a(OptionUDT.d, Boolean.FALSE);
        }
    }

    public void a(boolean flag, int i1) {
        if (flag) {
            if (i1 <= 0)
                throw new IllegalArgumentException("linger <= 0");
            a(OptionUDT.p, new LingerUDT(i1));
        } else {
            a(OptionUDT.p, com.barchart.udt.LingerUDT.a);
        }
    }

    protected native SocketUDT accept0();

    public int b(ByteBuffer bytebuffer) {
        com.barchart.udt.b.a.a(bytebuffer);
        int k1 = bytebuffer.position();
        int i1 = bytebuffer.limit();
        int j1 = bytebuffer.remaining();
        i1 = send2(l, m.c, h, g, bytebuffer, k1, i1);
        if (i1 > 0)
            if (i1 <= j1) {
                bytebuffer.position(k1 + i1);
            } else {
                b.d("sizeSent > remaining");
                i1 = 0;
            }
        return i1;
    }

    public int b(byte abyte0[], int i1, int j1) {
        com.barchart.udt.b.a.a(abyte0);
        return send1(l, m.c, h, g, abyte0, i1, j1);
    }

    public void b() {
        com/barchart/udt/SocketUDT;
        JVM INSTR monitorenter ;
        static class _cls1 {

            static final int a[];

            static  {
                a = new int[StatusUDT.values().length];
                NoSuchFieldError nosuchfielderror;
                try {
                    a[com.barchart.udt.StatusUDT.a.ordinal()] = 1;
                }
                catch (NoSuchFieldError nosuchfielderror8) { }
                try {
                    a[com.barchart.udt.StatusUDT.b.ordinal()] = 2;
                }
                catch (NoSuchFieldError nosuchfielderror7) { }
                try {
                    a[com.barchart.udt.StatusUDT.c.ordinal()] = 3;
                }
                catch (NoSuchFieldError nosuchfielderror6) { }
                try {
                    a[StatusUDT.d.ordinal()] = 4;
                }
                catch (NoSuchFieldError nosuchfielderror5) { }
                try {
                    a[StatusUDT.e.ordinal()] = 5;
                }
                catch (NoSuchFieldError nosuchfielderror4) { }
                try {
                    a[StatusUDT.f.ordinal()] = 6;
                }
                catch (NoSuchFieldError nosuchfielderror3) { }
                try {
                    a[StatusUDT.g.ordinal()] = 7;
                }
                catch (NoSuchFieldError nosuchfielderror2) { }
                try {
                    a[StatusUDT.h.ordinal()] = 8;
                }
                catch (NoSuchFieldError nosuchfielderror1) { }
                a[StatusUDT.i.ordinal()] = 9;
_L2:
                return;
                nosuchfielderror;
                if (true) goto _L2; else goto _L1
_L1:
            }
        }

        com.barchart.udt._cls1.a[u().ordinal()];
        JVM INSTR tableswitch 1 9: default 64
    //                   1 84
    //                   2 84
    //                   3 84
    //                   4 84
    //                   5 84
    //                   6 84
    //                   7 109
    //                   8 109
    //                   9 109;
           goto _L1 _L2 _L2 _L2 _L2 _L2 _L2 _L3 _L3 _L3
_L1:
        b.e("Invalid socket/status {}/{}", this, u());
_L4:
        com/barchart/udt/SocketUDT;
        JVM INSTR monitorexit ;
        return;
_L2:
        close0();
        b.b("done : {}", this);
          goto _L4
        Exception exception;
        exception;
        com/barchart/udt/SocketUDT;
        JVM INSTR monitorexit ;
        throw exception;
_L3:
        b.b("dead : {}", this);
          goto _L4
    }

    public void b(int i1) {
        h = i1;
    }

    public void b(InetSocketAddress inetsocketaddress) {
        com.barchart.udt.b.a.a(inetsocketaddress);
        connect0(inetsocketaddress);
    }

    public void b(boolean flag) {
        g = flag;
    }

    protected native void bind0(InetSocketAddress inetsocketaddress);

    public InetAddress c() {
        InetAddress inetaddress = null;
        Object obj = e();
        if (obj != null) goto _L2; else goto _L1
_L1:
        return inetaddress;
_L2:
        obj = ((InetSocketAddress) (obj)).getAddress();
        inetaddress = ((InetAddress) (obj));
        continue; /* Loop/switch isn't completed */
        Exception exception;
        exception;
        b.a("failed to get local address", exception);
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void c(int i1) {
        a(OptionUDT.n, Integer.valueOf(i1));
        a(OptionUDT.t, Integer.valueOf(i1));
    }

    public void c(boolean flag) {
        a(OptionUDT.v, Boolean.valueOf(flag));
    }

    protected native void close0();

    protected native void connect0(InetSocketAddress inetsocketaddress);

    public int d() {
        int i1 = 0;
        InetSocketAddress inetsocketaddress = e();
        if (inetsocketaddress != null) goto _L2; else goto _L1
_L1:
        return i1;
_L2:
        int j1 = inetsocketaddress.getPort();
        i1 = j1;
        continue; /* Loop/switch isn't completed */
        Exception exception;
        exception;
        b.a("failed to get local port", exception);
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void d(int i1) {
        a(OptionUDT.l, Integer.valueOf(i1));
        a(OptionUDT.r, Integer.valueOf(i1));
    }

    public void d(boolean flag) {
        a(OptionUDT.B, Boolean.valueOf(flag));
    }

    public InetSocketAddress e() {
        InetSocketAddress inetsocketaddress;
        if (hasLoadedLocalSocketAddress())
            inetsocketaddress = f;
        else
            inetsocketaddress = null;
        return inetsocketaddress;
    }

    public void e(int i1) {
        if (i1 < 0)
            throw new IllegalArgumentException("timeout < 0");
        int j1 = i1;
        if (i1 == 0)
            j1 = -1;
        a(OptionUDT.x, Integer.valueOf(j1));
        a(OptionUDT.z, Integer.valueOf(j1));
    }

    public boolean equals(Object obj) {
        boolean flag1 = false;
        boolean flag = flag1;
        if (obj instanceof SocketUDT) {
            flag = flag1;
            if (((SocketUDT)obj).l == l)
                flag = true;
        }
        return flag;
    }

    public int f() {
        return Math.min(((Integer)a(OptionUDT.n)).intValue(), ((Integer)a(OptionUDT.t)).intValue());
    }

    protected void finalize() {
        b();
        super.finalize();
_L1:
        return;
        Throwable throwable;
        throwable;
        b.d((new StringBuilder()).append("failed to close id=").append(l).toString(), throwable);
          goto _L1
    }

    public InetAddress g() {
        InetAddress inetaddress = null;
        Object obj = i();
        if (obj != null) goto _L2; else goto _L1
_L1:
        return inetaddress;
_L2:
        obj = ((InetSocketAddress) (obj)).getAddress();
        inetaddress = ((InetAddress) (obj));
        continue; /* Loop/switch isn't completed */
        Exception exception;
        exception;
        b.a("failed to get remote address", exception);
        if (true) goto _L1; else goto _L3
_L3:
    }

    protected native Object getOption0(int i1, Class class1);

    protected native int getStatus0();

    public int h() {
        boolean flag = false;
        InetSocketAddress inetsocketaddress = i();
        int i1;
        if (inetsocketaddress == null)
            i1 = ((flag) ? 1 : 0);
        else
            try {
                i1 = inetsocketaddress.getPort();
            }
            catch (Exception exception) {
                b.a("failed to get remote port", exception);
                i1 = ((flag) ? 1 : 0);
            }
        return i1;
    }

    protected native boolean hasLoadedLocalSocketAddress();

    protected native boolean hasLoadedRemoteSocketAddress();

    public int hashCode() {
        return l;
    }

    public InetSocketAddress i() {
        InetSocketAddress inetsocketaddress;
        if (hasLoadedRemoteSocketAddress())
            inetsocketaddress = j;
        else
            inetsocketaddress = null;
        return inetsocketaddress;
    }

    protected native int initInstance0(int i1);

    public boolean j() {
        return ((Boolean)a(OptionUDT.B)).booleanValue();
    }

    public int k() {
        return Math.min(((Integer)a(OptionUDT.l)).intValue(), ((Integer)a(OptionUDT.r)).intValue());
    }

    public int l() {
        return ((LingerUDT)a(OptionUDT.p)).intValue();
    }

    protected native void listen0(int i1);

    public int m() {
        int i1;
        int j1;
        i1 = ((Integer)a(OptionUDT.x)).intValue();
        j1 = ((Integer)a(OptionUDT.z)).intValue();
        if (i1 == j1) goto _L2; else goto _L1
_L1:
        b.d("sendTimeout != receiveTimeout");
        i1 = Math.max(i1, j1);
_L4:
        return i1;
_L2:
        if (i1 < 0)
            i1 = 0;
        else
        if (i1 <= 0) {
            b.d("UDT reported unexpected zero timeout");
            i1 = -1;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public int n() {
        return l;
    }

    public boolean o() {
        if (!s()) goto _L2; else goto _L1
_L1:
        boolean flag;
        boolean flag1;
        flag = ((Boolean)a(OptionUDT.f)).booleanValue();
        flag1 = ((Boolean)a(OptionUDT.d)).booleanValue();
        if (flag && flag1)
            flag = true;
        else
            flag = false;
_L4:
        return flag;
        Exception exception;
        exception;
        b.d("failed to get option", exception);
_L2:
        flag = false;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public boolean p() {
        com.barchart.udt._cls1.a[u().ordinal()];
        JVM INSTR tableswitch 2 5: default 40
    //                   2 44
    //                   3 44
    //                   4 44
    //                   5 44;
           goto _L1 _L2 _L2 _L2 _L2
_L1:
        boolean flag = false;
_L4:
        return flag;
_L2:
        flag = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public boolean q() {
        boolean flag;
        if (!s())
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean r() {
        com.barchart.udt._cls1.a[u().ordinal()];
        JVM INSTR tableswitch 5 5: default 28
    //                   5 32;
           goto _L1 _L2
_L1:
        boolean flag = false;
_L4:
        return flag;
_L2:
        flag = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public boolean s() {
        com.barchart.udt._cls1.a[u().ordinal()];
        JVM INSTR tableswitch 1 5: default 44
    //                   1 48
    //                   2 48
    //                   3 48
    //                   4 48
    //                   5 48;
           goto _L1 _L2 _L2 _L2 _L2 _L2
_L1:
        boolean flag = false;
_L4:
        return flag;
_L2:
        flag = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected native void setOption0(int i1, Class class1, Object obj);

    public void t() {
        b(true);
        b(-1);
    }

    public String toString() {
        return String.format("[id: 0x%08x] %s %s bind=%s:%s peer=%s:%s", new Object[] {
            Integer.valueOf(l), m, u(), c(), Integer.valueOf(d()), g(), Integer.valueOf(h())
        });
    }

    public StatusUDT u() {
        return com.barchart.udt.StatusUDT.a(getStatus0());
    }

    static  {
        boolean flag;
        if (!com/barchart/udt/SocketUDT.desiredAssertionStatus())
            flag = true;
        else
            flag = false;
        d = flag;
        b = org.slf4j.c.a(com/barchart/udt/SocketUDT);
        try {
            String s1 = com.barchart.udt.c.a();
            b.c("library location : {}", s1);
            String s2 = com.barchart.udt.c.b();
            b.c("loader provider  : {}", s2);
            ((a)Class.forName(s2).newInstance()).a(s1);
        }
        catch (Throwable throwable) {
            b.d("Failed to LOAD native library", throwable);
            throw new RuntimeException("load", throwable);
        }
        try {
            initClass0();
        }
        catch (Throwable throwable1) {
            b.d("Failed to INIT native library", throwable1);
            throw new RuntimeException("init", throwable1);
        }
        if (0x1332ad0 != getSignatureJNI0()) {
            b.d("Java/Native SIGNATURE inconsistent");
            throw new RuntimeException("signature");
        } else {
            a = true;
            b.a("native library load & init OK");
        }
    }
}
