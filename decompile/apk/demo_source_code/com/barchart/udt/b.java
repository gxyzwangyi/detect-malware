// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.barchart.udt;

import java.lang.reflect.Field;
import org.slf4j.c;

// Referenced classes of package com.barchart.udt:
//            SocketUDT

public class b {

    private static final org.slf4j.b f = org.slf4j.c.a(com/barchart/udt/b);
    protected final SocketUDT a;
    protected volatile long b;
    protected volatile long c;
    protected volatile int d;
    protected volatile int e;

    protected b(SocketUDT socketudt) {
        a = socketudt;
    }

    public void a(StringBuilder stringbuilder) {
        stringbuilder.append("\n\t");
        stringbuilder.append(String.format("[id: 0x%08x]", new Object[] {
            Integer.valueOf(a.n())
        }));
        Field afield[] = com/barchart/udt/b.getDeclaredFields();
        int j = afield.length;
        int i = 0;
        while (i < j)  {
            Object obj = afield[i];
            if (a(((Field) (obj))))
                try {
                    ((Field) (obj)).setAccessible(true);
                    String s = ((Field) (obj)).getName();
                    obj = ((Field) (obj)).get(this).toString();
                    stringbuilder.append("\n\t");
                    stringbuilder.append(s);
                    stringbuilder.append(" = ");
                    stringbuilder.append(((String) (obj)));
                }
                catch (Exception exception) {
                    f.d("unexpected", exception);
                }
            i++;
        }
        double d1 = ((double)d * 100D) / (double)b;
        stringbuilder.append("\n\t% localSendLoss = ");
        stringbuilder.append(d1);
        d1 = ((double)e * 100D) / (double)c;
        stringbuilder.append("\n\t% localReceiveLoss = ");
        stringbuilder.append(d1);
    }

    protected boolean a(Field field) {
        field = field.getType();
        boolean flag;
        if (field == Integer.TYPE || field == Long.TYPE || field == Double.TYPE)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public String toString() {
        StringBuilder stringbuilder = new StringBuilder(1024);
        a(stringbuilder);
        return stringbuilder.toString();
    }

}
