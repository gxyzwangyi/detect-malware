// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.tencent.bugly.crashreport.crash.anr;

import android.app.ActivityManager;
import android.content.Context;
import android.os.FileObserver;
import android.os.Process;
import com.tencent.bugly.crashreport.common.info.a;
import com.tencent.bugly.crashreport.common.strategy.StrategyBean;
import com.tencent.bugly.crashreport.crash.CrashDetailBean;
import com.tencent.bugly.crashreport.crash.c;
import com.tencent.bugly.proguard.af;
import com.tencent.bugly.proguard.ag;
import com.tencent.bugly.proguard.ah;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;

// Referenced classes of package com.tencent.bugly.crashreport.crash.anr:
//            a, TraceFileHelper

public final class b {

    private AtomicInteger a;
    private long b;
    private final Context c;
    private final a d;
    private final af e;
    private final com.tencent.bugly.crashreport.common.strategy.a f;
    private final String g;
    private final com.tencent.bugly.crashreport.crash.b h;
    private FileObserver i;
    private boolean j;

    public b(Context context, com.tencent.bugly.crashreport.common.strategy.a a1, a a2, af af1, com.tencent.bugly.crashreport.crash.b b1) {
        a = new AtomicInteger(0);
        b = -1L;
        j = true;
        if (context != null) goto _L2; else goto _L1
_L1:
        Context context1 = context;
_L4:
        c = context1;
        g = context.getDir("bugly", 0).getAbsolutePath();
        d = a2;
        e = af1;
        f = a1;
        h = b1;
        return;
_L2:
        Context context2 = context.getApplicationContext();
        context1 = context2;
        if (context2 == null)
            context1 = context;
        if (true) goto _L4; else goto _L3
_L3:
    }

    private static android.app.ActivityManager.ProcessErrorStateInfo a(Context context, long l) {
        int k;
        ActivityManager activitymanager;
        l = 10000L;
        if (10000L < 0L)
            l = 0L;
        ag.c("to find!", new Object[0]);
        activitymanager = (ActivityManager)context.getSystemService("activity");
        l /= 500L;
        k = 0;
_L9:
        ag.c("waiting!", new Object[0]);
        context = activitymanager.getProcessesInErrorState();
        if (context == null) goto _L2; else goto _L1
_L1:
        Iterator iterator = context.iterator();
_L5:
        if (!iterator.hasNext()) goto _L2; else goto _L3
_L3:
        context = (android.app.ActivityManager.ProcessErrorStateInfo)iterator.next();
        if (((android.app.ActivityManager.ProcessErrorStateInfo) (context)).condition != 2) goto _L5; else goto _L4
_L4:
        ag.c("found!", new Object[0]);
_L7:
        return context;
_L2:
        try {
            Thread.sleep(500L);
        }
        // Misplaced declaration of an exception variable
        catch (Context context) {
            context.printStackTrace();
        }
        if ((long)k < l)
            break; /* Loop/switch isn't completed */
        ag.c("end!", new Object[0]);
        context = null;
        if (true) goto _L7; else goto _L6
_L6:
        k++;
        if (true) goto _L9; else goto _L8
_L8:
    }

    private CrashDetailBean a(com.tencent.bugly.crashreport.crash.anr.a a1) {
        CrashDetailBean crashdetailbean = new CrashDetailBean();
        int k;
        crashdetailbean.B = com.tencent.bugly.crashreport.common.info.b.h();
        crashdetailbean.C = com.tencent.bugly.crashreport.common.info.b.f();
        crashdetailbean.D = com.tencent.bugly.crashreport.common.info.b.j();
        crashdetailbean.E = d.o();
        crashdetailbean.F = d.n();
        crashdetailbean.G = d.p();
        crashdetailbean.w = com.tencent.bugly.proguard.a.a(c, c.d, null);
        crashdetailbean.x = ah.a(true);
        crashdetailbean.b = 3;
        crashdetailbean.e = d.g();
        crashdetailbean.f = d.j;
        crashdetailbean.g = d.v();
        crashdetailbean.m = d.f();
        crashdetailbean.n = "ANR_EXCEPTION";
        crashdetailbean.o = a1.f;
        crashdetailbean.q = a1.g;
        HashMap hashmap = JVM INSTR new #239 <Class HashMap>;
        hashmap.HashMap();
        crashdetailbean.N = hashmap;
        crashdetailbean.N.put("BUGLY_CR_01", a1.e);
        k = crashdetailbean.q.indexOf("\n");
        if (k <= 0) goto _L2; else goto _L1
_L1:
        String s = crashdetailbean.q.substring(0, k);
_L3:
        crashdetailbean.p = s;
        crashdetailbean.r = a1.c;
        crashdetailbean.u = com.tencent.bugly.proguard.a.c(crashdetailbean.q.getBytes());
        crashdetailbean.y = a1.b;
        crashdetailbean.z = d.d;
        crashdetailbean.A = "main(1)";
        crashdetailbean.H = d.x();
        crashdetailbean.h = d.u();
        crashdetailbean.i = d.G();
        crashdetailbean.v = a1.d;
        crashdetailbean.K = d.m;
        crashdetailbean.L = d.a;
        crashdetailbean.M = d.o;
        crashdetailbean.O = d.D();
        crashdetailbean.P = d.E();
        crashdetailbean.Q = d.y();
        crashdetailbean.R = d.C();
_L4:
        return crashdetailbean;
_L2:
        s = "GET_FAIL";
          goto _L3
        a1;
        if (!ag.a(a1))
            a1.printStackTrace();
          goto _L4
    }

    private boolean a(Context context, String s, android.app.ActivityManager.ProcessErrorStateInfo processerrorstateinfo, long l, Map map) {
        f.c();
        if (!f.b()) {
            ag.e("waiting for remote sync", new Object[0]);
            int k = 0;
            do {
                if (f.b())
                    break;
                int j1;
                Object obj;
                try {
                    Thread.sleep(500L);
                }
                catch (InterruptedException interruptedexception) {
                    interruptedexception.printStackTrace();
                }
                j1 = k + 500;
                k = j1;
            } while (j1 < 3000);
        }
        obj = new File(context.getFilesDir(), (new StringBuilder("bugly/bugly_trace_")).append(l).append(".txt").toString());
        context = new com.tencent.bugly.crashreport.crash.anr.a();
        context.c = l;
        context.d = ((File) (obj)).getAbsolutePath();
        context.a = processerrorstateinfo.processName;
        context.f = processerrorstateinfo.shortMsg;
        context.e = processerrorstateinfo.longMsg;
        context.b = map;
        if (map != null) {
            processerrorstateinfo = map.keySet().iterator();
            do {
                if (!processerrorstateinfo.hasNext())
                    break;
                obj = (String)processerrorstateinfo.next();
                if (((String) (obj)).startsWith("main("))
                    context.g = (String)map.get(obj);
            } while (true);
        }
        l = ((com.tencent.bugly.crashreport.crash.anr.a) (context)).c;
        String s2 = ((com.tencent.bugly.crashreport.crash.anr.a) (context)).d;
        String s1 = ((com.tencent.bugly.crashreport.crash.anr.a) (context)).a;
        processerrorstateinfo = ((com.tencent.bugly.crashreport.crash.anr.a) (context)).f;
        map = ((com.tencent.bugly.crashreport.crash.anr.a) (context)).e;
        int i1;
        boolean flag;
        if (((com.tencent.bugly.crashreport.crash.anr.a) (context)).b == null)
            i1 = 0;
        else
            i1 = ((com.tencent.bugly.crashreport.crash.anr.a) (context)).b.size();
        ag.c("anr tm:%d\ntr:%s\nproc:%s\nsMsg:%s\n lMsg:%s\n threads:%d", new Object[] {
            Long.valueOf(l), s2, s1, processerrorstateinfo, map, Integer.valueOf(i1)
        });
        if (!f.b()) {
            ag.e("crash report sync remote fail, will not upload to Bugly , print local for helpful!", new Object[0]);
            com.tencent.bugly.crashreport.crash.b.a("ANR", com.tencent.bugly.proguard.a.b(), ((com.tencent.bugly.crashreport.crash.anr.a) (context)).a, null, ((com.tencent.bugly.crashreport.crash.anr.a) (context)).e, null);
            flag = false;
        } else
        if (!f.c().j) {
            ag.d("ANR Report is closed!", new Object[0]);
            flag = false;
        } else {
            ag.a("found visiable anr , start to upload!", new Object[0]);
            processerrorstateinfo = a(((com.tencent.bugly.crashreport.crash.anr.a) (context)));
            if (processerrorstateinfo == null) {
                ag.e("pack anr fail!", new Object[0]);
                flag = false;
            } else {
                com.tencent.bugly.crashreport.crash.c.a().a(processerrorstateinfo);
                if (((CrashDetailBean) (processerrorstateinfo)).a >= 0L)
                    ag.a("backup anr record success!", new Object[0]);
                else
                    ag.d("backup anr record fail!", new Object[0]);
                if (s != null && (new File(s)).exists()) {
                    a.set(3);
                    if (a(s, ((com.tencent.bugly.crashreport.crash.anr.a) (context)).d, ((com.tencent.bugly.crashreport.crash.anr.a) (context)).a))
                        ag.a("backup trace success", new Object[0]);
                }
                com.tencent.bugly.crashreport.crash.b.a("ANR", com.tencent.bugly.proguard.a.b(), ((com.tencent.bugly.crashreport.crash.anr.a) (context)).a, null, ((com.tencent.bugly.crashreport.crash.anr.a) (context)).e, processerrorstateinfo);
                if (!h.a(processerrorstateinfo))
                    h.a(processerrorstateinfo, 3000L, true);
                h.b(processerrorstateinfo);
                flag = true;
            }
        }
        return flag;
    }

    private static boolean a(String s, String s1, String s2) {
        Object obj = TraceFileHelper.readTargetDumpInfo(s2, s, true);
        if (obj != null && ((TraceFileHelper.a) (obj)).d != null && ((TraceFileHelper.a) (obj)).d.size() > 0) goto _L2; else goto _L1
_L1:
        boolean flag;
        ag.e("not found trace dump for %s", new Object[] {
            s2
        });
        flag = false;
_L4:
        return flag;
_L2:
        s2 = new File(s1);
        try {
            if (!s2.exists()) {
                if (!s2.getParentFile().exists())
                    s2.getParentFile().mkdirs();
                s2.createNewFile();
            }
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            if (!ag.a(s))
                s.printStackTrace();
            ag.e("backup file create error! %s  %s", new Object[] {
                (new StringBuilder()).append(s.getClass().getName()).append(":").append(s.getMessage()).toString(), s1
            });
            flag = false;
            continue; /* Loop/switch isn't completed */
        }
        if (s2.exists() && s2.canWrite())
            break MISSING_BLOCK_LABEL_194;
        ag.e("backup file create fail %s", new Object[] {
            s1
        });
        flag = false;
        continue; /* Loop/switch isn't completed */
        s = null;
        s1 = JVM INSTR new #549 <Class BufferedWriter>;
        FileWriter filewriter = JVM INSTR new #551 <Class FileWriter>;
        filewriter.FileWriter(s2, false);
        s1.BufferedWriter(filewriter);
        String as[] = (String[])((TraceFileHelper.a) (obj)).d.get("main");
        if (as == null)
            break MISSING_BLOCK_LABEL_320;
        if (as.length < 3)
            break MISSING_BLOCK_LABEL_320;
        String s3;
        s2 = as[0];
        s = as[1];
        s3 = as[2];
        StringBuilder stringbuilder = JVM INSTR new #373 <Class StringBuilder>;
        stringbuilder.StringBuilder("\"main\" tid=");
        s1.write(stringbuilder.append(s3).append(" :\n").append(s2).append("\n").append(s).append("\n\n").toString());
        s1.flush();
        break MISSING_BLOCK_LABEL_320;
        s2;
        s = s1;
        s1 = s2;
_L9:
        if (!ag.a(s1))
            s1.printStackTrace();
        s2 = JVM INSTR new #373 <Class StringBuilder>;
        s2.StringBuilder();
        ag.e("dump trace fail %s", new Object[] {
            s2.append(s1.getClass().getName()).append(":").append(s1.getMessage()).toString()
        });
        if (s != null)
            try {
                s.close();
            }
            // Misplaced declaration of an exception variable
            catch (String s) {
                if (!ag.a(s))
                    s.printStackTrace();
            }
        flag = false;
        continue; /* Loop/switch isn't completed */
        obj = ((TraceFileHelper.a) (obj)).d.entrySet().iterator();
        do {
            if (!((Iterator) (obj)).hasNext())
                break;
            java.util.Map.Entry entry = (java.util.Map.Entry)((Iterator) (obj)).next();
            if (!((String)entry.getKey()).equals("main") && entry.getValue() != null && ((String[])entry.getValue()).length >= 3) {
                String s4 = ((String[])entry.getValue())[0];
                s = ((String[])entry.getValue())[1];
                s2 = ((String[])entry.getValue())[2];
                StringBuilder stringbuilder1 = JVM INSTR new #373 <Class StringBuilder>;
                stringbuilder1.StringBuilder("\"");
                s1.write(stringbuilder1.append((String)entry.getKey()).append("\" tid=").append(s2).append(" :\n").append(s4).append("\n").append(s).append("\n\n").toString());
                s1.flush();
            }
        } while (true);
        try {
            s1.close();
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            if (!ag.a(s))
                s.printStackTrace();
        }
        flag = true;
        if (true) goto _L4; else goto _L3
_L3:
        s;
        s1 = null;
_L8:
        if (s1 == null)
            break MISSING_BLOCK_LABEL_649;
        s1.close();
_L6:
        throw s;
        s1;
        if (!ag.a(s1))
            s1.printStackTrace();
        if (true) goto _L6; else goto _L5
_L5:
        s;
        continue; /* Loop/switch isn't completed */
        s2;
        s1 = s;
        s = s2;
        if (true) goto _L8; else goto _L7
_L7:
        s1;
          goto _L9
    }

    private void b(boolean flag) {
        this;
        JVM INSTR monitorenter ;
        if (!flag)
            break MISSING_BLOCK_LABEL_13;
        c();
_L1:
        this;
        JVM INSTR monitorexit ;
        return;
        d();
          goto _L1
        Exception exception;
        exception;
        throw exception;
    }

    private void c() {
        this;
        JVM INSTR monitorenter ;
        if (!e()) goto _L2; else goto _L1
_L1:
        ag.d("start when started!", new Object[0]);
_L3:
        this;
        JVM INSTR monitorexit ;
        return;
_L2:
        FileObserver fileobserver = JVM INSTR new #6   <Class b$1>;
        fileobserver.this. _cls1("/data/anr/", 8);
        i = fileobserver;
        i.startWatching();
        ag.a("start anr monitor!", new Object[0]);
        af af1 = e;
        Runnable runnable = JVM INSTR new #8   <Class b$2>;
        runnable.this. _cls2();
        af1.a(runnable);
          goto _L3
        Object obj;
        obj;
        i = null;
        ag.d("start anr monitor failed!", new Object[0]);
        if (!ag.a(((Throwable) (obj))))
            ((Throwable) (obj)).printStackTrace();
          goto _L3
        obj;
        throw obj;
    }

    private void c(boolean flag) {
        this;
        JVM INSTR monitorenter ;
        if (j != flag) {
            ag.a("user change anr %b", new Object[] {
                Boolean.valueOf(flag)
            });
            j = flag;
        }
        this;
        JVM INSTR monitorexit ;
        return;
        Exception exception;
        exception;
        throw exception;
    }

    private void d() {
        this;
        JVM INSTR monitorenter ;
        if (e()) goto _L2; else goto _L1
_L1:
        ag.d("close when closed!", new Object[0]);
_L3:
        this;
        JVM INSTR monitorexit ;
        return;
_L2:
        i.stopWatching();
        i = null;
        ag.d("close anr monitor!", new Object[0]);
          goto _L3
        Object obj;
        obj;
        ag.d("stop anr monitor failed!", new Object[0]);
        if (!ag.a(((Throwable) (obj))))
            ((Throwable) (obj)).printStackTrace();
          goto _L3
        obj;
        throw obj;
    }

    private boolean e() {
        this;
        JVM INSTR monitorenter ;
        FileObserver fileobserver = i;
        boolean flag;
        if (fileobserver != null)
            flag = true;
        else
            flag = false;
        this;
        JVM INSTR monitorexit ;
        return flag;
        Exception exception;
        exception;
        throw exception;
    }

    private boolean f() {
        this;
        JVM INSTR monitorenter ;
        boolean flag = j;
        this;
        JVM INSTR monitorexit ;
        return flag;
        Exception exception;
        exception;
        throw exception;
    }

    public final void a(StrategyBean strategybean) {
        boolean flag = true;
        this;
        JVM INSTR monitorenter ;
        if (strategybean != null) goto _L2; else goto _L1
_L1:
        this;
        JVM INSTR monitorexit ;
        return;
_L2:
        if (strategybean.j != e())
            ag.d("server anr changed to %b", new Object[] {
                Boolean.valueOf(strategybean.j)
            });
        if (!strategybean.j || !f())
            flag = false;
        if (flag != e()) {
            ag.a("anr changed to %b", new Object[] {
                Boolean.valueOf(flag)
            });
            b(flag);
        }
        if (true) goto _L1; else goto _L3
_L3:
        strategybean;
        throw strategybean;
    }

    public final void a(String s) {
        this;
        JVM INSTR monitorenter ;
        if (a.get() == 0) goto _L2; else goto _L1
_L1:
        ag.c("trace started return ", new Object[0]);
        this;
        JVM INSTR monitorexit ;
_L3:
        return;
_L2:
        a.set(1);
        this;
        JVM INSTR monitorexit ;
        Object obj;
        ag.c("read trace first dump for create time!", new Object[0]);
        obj = TraceFileHelper.readFirstDumpInfo(s, false);
        if (obj == null)
            break MISSING_BLOCK_LABEL_406;
        long l = ((TraceFileHelper.a) (obj)).c;
_L4:
        long l1;
        l1 = l;
        if (l != -1L)
            break MISSING_BLOCK_LABEL_92;
        ag.d("trace dump fail could not get time!", new Object[0]);
        l1 = System.currentTimeMillis();
        if (Math.abs(l1 - b) >= 10000L)
            break MISSING_BLOCK_LABEL_145;
        ag.d("should not process ANR too Fre in %d", new Object[] {
            Integer.valueOf(10000)
        });
        a.set(0);
          goto _L3
        s;
        throw s;
        b = l1;
        a.set(1);
        Map map = com.tencent.bugly.proguard.a.a(c.e, false);
        if (map == null)
            break MISSING_BLOCK_LABEL_183;
        if (map.size() > 0)
            break MISSING_BLOCK_LABEL_233;
        ag.d("can't get all thread skip this anr", new Object[0]);
        a.set(0);
          goto _L3
        s;
        ag.a(s);
        ag.e("get all thread stack fail!", new Object[0]);
        a.set(0);
          goto _L3
        obj = a(c, 10000L);
        if (obj != null)
            break MISSING_BLOCK_LABEL_272;
        ag.c("proc state is unvisiable!", new Object[0]);
        a.set(0);
          goto _L3
        if (((android.app.ActivityManager.ProcessErrorStateInfo) (obj)).pid == Process.myPid())
            break MISSING_BLOCK_LABEL_313;
        ag.c("not mind proc!", new Object[] {
            ((android.app.ActivityManager.ProcessErrorStateInfo) (obj)).processName
        });
        a.set(0);
          goto _L3
        ag.a("found visiable anr , start to process!", new Object[0]);
        a(c, s, ((android.app.ActivityManager.ProcessErrorStateInfo) (obj)), l1, map);
        a.set(0);
          goto _L3
        s;
        if (!ag.a(s))
            s.printStackTrace();
        ag.e("handle anr error %s", new Object[] {
            s.getClass().toString()
        });
        a.set(0);
          goto _L3
        s;
        a.set(0);
        throw s;
        l = -1L;
          goto _L4
    }

    public final void a(boolean flag) {
        c(flag);
        if (com.tencent.bugly.crashreport.common.strategy.a.a().c().j && f())
            flag = true;
        else
            flag = false;
        if (flag != e()) {
            ag.a("anr changed to %b", new Object[] {
                Boolean.valueOf(flag)
            });
            b(flag);
        }
    }

    public final boolean a() {
        boolean flag;
        if (a.get() != 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    protected final void b() {
        long l1;
        long l3;
        File file;
        l1 = com.tencent.bugly.proguard.a.c();
        l3 = c.f;
        file = new File(g);
        if (!file.exists() || !file.isDirectory()) goto _L2; else goto _L1
_L1:
        File afile[] = file.listFiles();
        if (afile != null && afile.length != 0) goto _L3; else goto _L2
_L2:
        return;
_L3:
        int k;
        int l;
        int j1;
        int k1;
        k1 = "bugly_trace_".length();
        j1 = afile.length;
        k = 0;
        l = 0;
_L5:
        int i1;
        File file1;
        String s;
        if (k >= j1)
            break MISSING_BLOCK_LABEL_189;
        file1 = afile[k];
        s = file1.getName();
        i1 = l;
        if (!s.startsWith("bugly_trace_"))
            break MISSING_BLOCK_LABEL_146;
        i1 = s.indexOf(".txt");
        if (i1 <= 0)
            break; /* Loop/switch isn't completed */
        long l2 = Long.parseLong(s.substring(k1, i1));
        if (l2 < l1 - l3)
            break; /* Loop/switch isn't completed */
        i1 = l;
_L6:
        k++;
        l = i1;
        if (true) goto _L5; else goto _L4
        Throwable throwable;
        throwable;
        ag.e("tomb format error delete %s", new Object[] {
            s
        });
_L4:
        i1 = l;
        if (file1.delete())
            i1 = l + 1;
          goto _L6
        ag.c("clean tombs %d", new Object[] {
            Integer.valueOf(l)
        });
        if (true) goto _L2; else goto _L7
_L7:
    }

    // Unreferenced inner class com/tencent/bugly/crashreport/crash/anr/b$1

/* anonymous class */
    final class _cls1 extends FileObserver {

        private b a;

        public final void onEvent(int k, String s) {
            if (s != null) {
                s = (new StringBuilder("/data/anr/")).append(s).toString();
                if (!s.contains("trace"))
                    ag.d("not anr file %s", new Object[] {
                        s
                    });
                else
                    a.a(s);
            }
        }

             {
                a = b.this;
                super(s, 8);
            }
    }


    // Unreferenced inner class com/tencent/bugly/crashreport/crash/anr/b$2

/* anonymous class */
    final class _cls2
        implements Runnable {

        private b a;

        public final void run() {
            a.b();
        }

             {
                a = b.this;
                super();
            }
    }

}
