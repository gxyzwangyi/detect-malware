// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.tencent.bugly.crashreport.crash.jni;

import android.content.Context;
import com.tencent.bugly.b;
import com.tencent.bugly.crashreport.common.info.a;
import com.tencent.bugly.crashreport.common.strategy.StrategyBean;
import com.tencent.bugly.crashreport.crash.c;
import com.tencent.bugly.proguard.af;
import com.tencent.bugly.proguard.ag;
import java.io.File;

// Referenced classes of package com.tencent.bugly.crashreport.crash.jni:
//            a, NativeExceptionHandler, b

public class NativeCrashHandler {

    private static NativeCrashHandler a;
    private static boolean l = false;
    private static boolean m = false;
    private final Context b;
    private final a c;
    private final af d;
    private NativeExceptionHandler e;
    private String f;
    private final boolean g;
    private boolean h;
    private boolean i;
    private boolean j;
    private boolean k;
    private com.tencent.bugly.crashreport.crash.b n;

    private NativeCrashHandler(Context context, a a1, com.tencent.bugly.crashreport.crash.b b1, af af1, boolean flag, String s) {
        boolean flag1;
        h = false;
        i = false;
        j = false;
        k = false;
        int i1;
        Context context1;
        if (context == null) {
            context1 = context;
        } else {
            Context context2 = context.getApplicationContext();
            context1 = context2;
            if (context2 == null)
                context1 = context;
        }
        b = context1;
        if (s == null)
            break MISSING_BLOCK_LABEL_115;
        i1 = s.trim().length();
        if (i1 <= 0)
            break MISSING_BLOCK_LABEL_115;
        flag1 = false;
_L1:
        if (flag1)
            try {
                s = context.getDir("bugly", 0).getAbsolutePath();
            }
            // Misplaced declaration of an exception variable
            catch (String s) {
                context = com.tencent.bugly.crashreport.common.info.a.a(context).c;
                s = (new StringBuilder("/data/data/")).append(context).append("/app_bugly").toString();
            }
        n = b1;
        f = s;
        c = a1;
        d = af1;
        g = flag;
        return;
        flag1 = true;
          goto _L1
    }

    static Context a(NativeCrashHandler nativecrashhandler) {
        return nativecrashhandler.b;
    }

    private void a(boolean flag) {
        this;
        JVM INSTR monitorenter ;
        if (!j) goto _L2; else goto _L1
_L1:
        ag.d("native already registed!", new Object[0]);
_L13:
        this;
        JVM INSTR monitorexit ;
        return;
_L2:
        boolean flag1;
        com.tencent.bugly.crashreport.crash.jni.a a1 = JVM INSTR new #126 <Class com.tencent.bugly.crashreport.crash.jni.a>;
        a1.com.tencent.bugly.crashreport.crash.jni.a(b, c, n, com.tencent.bugly.crashreport.common.strategy.a.a(), f);
        e = a1;
        flag1 = i;
        if (!flag1) goto _L4; else goto _L3
_L3:
        String s2 = regist(f, flag, 1);
        if (s2 == null) goto _L6; else goto _L5
_L5:
        String s;
        String s4;
        String s5;
        ag.a("Native Crash Report enable!", new Object[0]);
        ag.c("Check extra jni for Bugly NDK v%s", new Object[] {
            s2
        });
        s5 = "2.1.1".replace(".", "");
        s4 = "2.3.0".replace(".", "");
        s = s2.replace(".", "");
        if (s.length() != 2) goto _L8; else goto _L7
_L7:
        Object obj;
        obj = JVM INSTR new #100 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        obj = ((StringBuilder) (obj)).append(s).append("0").toString();
_L15:
        byte byte0;
        Throwable throwable;
        try {
            if (Integer.parseInt(((String) (obj))) >= Integer.parseInt(s5))
                l = true;
            if (Integer.parseInt(((String) (obj))) >= Integer.parseInt(s4))
                m = true;
        }
        catch (Throwable throwable1) { }
        if (!m) goto _L10; else goto _L9
_L9:
        ag.a("Info setting jni can be accessed.", new Object[0]);
_L16:
        if (!l) goto _L12; else goto _L11
_L11:
        ag.a("Extra jni can be accessed.", new Object[0]);
_L17:
        c.m = s2;
        j = true;
          goto _L13
        obj;
        ag.c("load bugly so fail", new Object[0]);
_L6:
        i = false;
        h = false;
          goto _L13
        obj;
        throw obj;
_L8:
        obj = s;
        if (s.length() != 1) goto _L15; else goto _L14
_L14:
        obj = JVM INSTR new #100 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        obj = ((StringBuilder) (obj)).append(s).append("00").toString();
          goto _L15
_L10:
        ag.d("Info setting jni can not be accessed.", new Object[0]);
          goto _L16
_L12:
        ag.d("Extra jni can not be accessed.", new Object[0]);
          goto _L17
_L4:
        flag = h;
        if (!flag) goto _L6; else goto _L18
_L18:
        Class class2 = Integer.TYPE;
        obj = Integer.TYPE;
        String s3 = f;
        s = com.tencent.bugly.crashreport.common.info.a.a().q();
        int i1 = com.tencent.bugly.crashreport.common.info.a.a().H();
        s = (String)com.tencent.bugly.proguard.a.a("com.tencent.feedback.eup.jni.NativeExceptionUpload", "registNativeExceptionHandler2", null, new Class[] {
            java/lang/String, java/lang/String, class2, obj
        }, new Object[] {
            s3, s, Integer.valueOf(i1), Integer.valueOf(1)
        });
        obj = s;
        if (s != null) goto _L20; else goto _L19
_L19:
        Class class1 = Integer.TYPE;
        String s1 = f;
        obj = com.tencent.bugly.crashreport.common.info.a.a().q();
        int j1 = com.tencent.bugly.crashreport.common.info.a.a().H();
        obj = (String)com.tencent.bugly.proguard.a.a("com.tencent.feedback.eup.jni.NativeExceptionUpload", "registNativeExceptionHandler", null, new Class[] {
            java/lang/String, java/lang/String, class1
        }, new Object[] {
            s1, obj, Integer.valueOf(j1)
        });
_L20:
        if (obj == null) goto _L6; else goto _L21
_L21:
        j = true;
        com.tencent.bugly.crashreport.common.info.a.a().m = ((String) (obj));
        com.tencent.bugly.proguard.a.a("com.tencent.feedback.eup.jni.NativeExceptionUpload", "enableHandler", null, new Class[] {
            Boolean.TYPE
        }, new Object[] {
            Boolean.valueOf(true)
        });
        if (b.b)
            byte0 = 3;
        else
            byte0 = 5;
        com.tencent.bugly.proguard.a.a("com.tencent.feedback.eup.jni.NativeExceptionUpload", "setLogMode", null, new Class[] {
            Integer.TYPE
        }, new Object[] {
            Integer.valueOf(byte0)
        });
          goto _L13
        throwable;
          goto _L6
    }

    private boolean a(int i1, String s) {
        boolean flag;
        boolean flag1;
        flag1 = false;
        flag = flag1;
        if (!i) goto _L2; else goto _L1
_L1:
        if (m) goto _L4; else goto _L3
_L3:
        flag = flag1;
_L2:
        return flag;
_L4:
        setNativeInfo(i1, s);
        flag = true;
        continue; /* Loop/switch isn't completed */
        s;
        m = false;
        flag = flag1;
        continue; /* Loop/switch isn't completed */
        s;
        flag = flag1;
        if (!ag.a(s)) {
            s.printStackTrace();
            flag = flag1;
        }
        if (true) goto _L2; else goto _L5
_L5:
    }

    private static boolean a(String s, boolean flag) {
        boolean flag1 = true;
        ag.a("[native] trying to load so: %s", new Object[] {
            s
        });
        if (!flag) goto _L2; else goto _L1
_L1:
        System.load(s);
_L3:
        ag.a("[native] load so success: %s", new Object[] {
            s
        });
        flag = flag1;
_L4:
        return flag;
_L2:
        System.loadLibrary(s);
          goto _L3
        Throwable throwable;
        throwable;
        flag = false;
_L5:
        ag.d(throwable.getMessage(), new Object[0]);
        ag.d("[native] Failed to load so, please check.", new Object[] {
            s
        });
          goto _L4
        throwable;
        flag = true;
          goto _L5
    }

    static a b(NativeCrashHandler nativecrashhandler) {
        return nativecrashhandler.c;
    }

    private void b() {
        this;
        JVM INSTR monitorenter ;
        if (j) goto _L2; else goto _L1
_L1:
        ag.d("native already unregisted!", new Object[0]);
_L3:
        this;
        JVM INSTR monitorexit ;
        return;
_L2:
        if (unregist() == null)
            break MISSING_BLOCK_LABEL_140;
        ag.a("Native Crash Report close!", new Object[0]);
        j = false;
          goto _L3
        Object obj;
        obj;
        ag.c("unregist bugly so fail", new Object[0]);
_L4:
        com.tencent.bugly.proguard.a.a("com.tencent.feedback.eup.jni.NativeExceptionUpload", "enableHandler", null, new Class[] {
            Boolean.TYPE
        }, new Object[] {
            Boolean.valueOf(false)
        });
        j = false;
        ag.c("unregist rqd so success", new Object[0]);
          goto _L3
        obj;
        ag.c("unregist rqd so fail", new Object[0]);
        i = false;
        h = false;
          goto _L3
        obj;
        throw obj;
        ag.c("unregist bugly so success", new Object[0]);
          goto _L4
    }

    private void b(boolean flag) {
        this;
        JVM INSTR monitorenter ;
        if (!flag)
            break MISSING_BLOCK_LABEL_13;
        startNativeMonitor();
_L1:
        this;
        JVM INSTR monitorexit ;
        return;
        b();
          goto _L1
        Exception exception;
        exception;
        throw exception;
    }

    static String c(NativeCrashHandler nativecrashhandler) {
        return nativecrashhandler.f;
    }

    private void c(boolean flag) {
        this;
        JVM INSTR monitorenter ;
        if (k != flag) {
            ag.a("user change native %b", new Object[] {
                Boolean.valueOf(flag)
            });
            k = flag;
        }
        this;
        JVM INSTR monitorexit ;
        return;
        Exception exception;
        exception;
        throw exception;
    }

    static NativeExceptionHandler d(NativeCrashHandler nativecrashhandler) {
        return nativecrashhandler.e;
    }

    static com.tencent.bugly.crashreport.crash.b e(NativeCrashHandler nativecrashhandler) {
        return nativecrashhandler.n;
    }

    public static NativeCrashHandler getInstance() {
        com/tencent/bugly/crashreport/crash/jni/NativeCrashHandler;
        JVM INSTR monitorenter ;
        NativeCrashHandler nativecrashhandler = a;
        com/tencent/bugly/crashreport/crash/jni/NativeCrashHandler;
        JVM INSTR monitorexit ;
        return nativecrashhandler;
        Exception exception;
        exception;
        throw exception;
    }

    public static NativeCrashHandler getInstance(Context context, a a1, com.tencent.bugly.crashreport.crash.b b1, com.tencent.bugly.crashreport.common.strategy.a a2, af af1, boolean flag, String s) {
        com/tencent/bugly/crashreport/crash/jni/NativeCrashHandler;
        JVM INSTR monitorenter ;
        if (a == null) {
            a2 = JVM INSTR new #2   <Class NativeCrashHandler>;
            a2.NativeCrashHandler(context, a1, b1, af1, flag, s);
            a = a2;
        }
        context = a;
        com/tencent/bugly/crashreport/crash/jni/NativeCrashHandler;
        JVM INSTR monitorexit ;
        return context;
        context;
        throw context;
    }

    protected final void a() {
        long l2;
        long l3;
        File file;
        l3 = com.tencent.bugly.proguard.a.c();
        l2 = c.f;
        file = new File(f);
        if (!file.exists() || !file.isDirectory()) goto _L2; else goto _L1
_L1:
        File afile[] = file.listFiles();
        if (afile != null && afile.length != 0) goto _L3; else goto _L2
_L2:
        return;
_L3:
        int i1;
        int j1;
        int l1;
        int i2;
        i2 = "tomb_".length();
        l1 = afile.length;
        i1 = 0;
        j1 = 0;
_L5:
        int k1;
        String s;
        File file1;
        if (i1 >= l1)
            break MISSING_BLOCK_LABEL_189;
        file1 = afile[i1];
        s = file1.getName();
        k1 = j1;
        if (!s.startsWith("tomb_"))
            break MISSING_BLOCK_LABEL_146;
        k1 = s.indexOf(".txt");
        if (k1 <= 0)
            break; /* Loop/switch isn't completed */
        long l4 = Long.parseLong(s.substring(i2, k1));
        if (l4 < l3 - l2)
            break; /* Loop/switch isn't completed */
        k1 = j1;
_L6:
        i1++;
        j1 = k1;
        if (true) goto _L5; else goto _L4
        Throwable throwable;
        throwable;
        ag.e("tomb format error delete %s", new Object[] {
            s
        });
_L4:
        k1 = j1;
        if (file1.delete())
            k1 = j1 + 1;
          goto _L6
        ag.c("clean tombs %d", new Object[] {
            Integer.valueOf(j1)
        });
        if (true) goto _L2; else goto _L7
_L7:
    }

    public boolean appendLogToNative(String s, String s1, String s2) {
        boolean flag;
        boolean flag1;
        flag1 = false;
        flag = flag1;
        if (!i) goto _L2; else goto _L1
_L1:
        if (l) goto _L4; else goto _L3
_L3:
        flag = flag1;
_L2:
        return flag;
_L4:
        flag = flag1;
        if (s != null) {
            flag = flag1;
            if (s1 != null) {
                flag = flag1;
                if (s2 != null)
                    try {
                        flag = appendNativeLog(s, s1, s2);
                    }
                    // Misplaced declaration of an exception variable
                    catch (String s) {
                        l = false;
                        flag = flag1;
                    }
                    // Misplaced declaration of an exception variable
                    catch (String s) {
                        flag = flag1;
                        if (!ag.a(s)) {
                            s.printStackTrace();
                            flag = flag1;
                        }
                    }
            }
        }
        if (true) goto _L2; else goto _L5
_L5:
    }

    protected native boolean appendNativeLog(String s, String s1, String s2);

    protected native boolean appendWholeNativeLog(String s);

    public String getDumpFilePath() {
        this;
        JVM INSTR monitorenter ;
        String s = f;
        this;
        JVM INSTR monitorexit ;
        return s;
        Exception exception;
        exception;
        throw exception;
    }

    public NativeExceptionHandler getNativeExceptionHandler() {
        return e;
    }

    protected native String getNativeKeyValueList();

    protected native String getNativeLog();

    public boolean isUserOpened() {
        this;
        JVM INSTR monitorenter ;
        boolean flag = k;
        this;
        JVM INSTR monitorexit ;
        return flag;
        Exception exception;
        exception;
        throw exception;
    }

    public void onStrategyChanged(StrategyBean strategybean) {
        boolean flag = true;
        this;
        JVM INSTR monitorenter ;
        if (strategybean == null)
            break MISSING_BLOCK_LABEL_40;
        if (strategybean.g != j)
            ag.d("server native changed to %b", new Object[] {
                Boolean.valueOf(strategybean.g)
            });
        if (!com.tencent.bugly.crashreport.common.strategy.a.a().c().g || !k)
            flag = false;
        if (flag != j) {
            ag.a("native changed to %b", new Object[] {
                Boolean.valueOf(flag)
            });
            b(flag);
        }
        this;
        JVM INSTR monitorexit ;
        return;
        strategybean;
        throw strategybean;
    }

    public boolean putKeyValueToNative(String s, String s1) {
        boolean flag;
        boolean flag1;
        flag1 = false;
        flag = flag1;
        if (!i) goto _L2; else goto _L1
_L1:
        if (l) goto _L4; else goto _L3
_L3:
        flag = flag1;
_L2:
        return flag;
_L4:
        flag = flag1;
        if (s != null) {
            flag = flag1;
            if (s1 != null)
                try {
                    flag = putNativeKeyValue(s, s1);
                }
                // Misplaced declaration of an exception variable
                catch (String s) {
                    l = false;
                    flag = flag1;
                }
                // Misplaced declaration of an exception variable
                catch (String s) {
                    flag = flag1;
                    if (!ag.a(s)) {
                        s.printStackTrace();
                        flag = flag1;
                    }
                }
        }
        if (true) goto _L2; else goto _L5
_L5:
    }

    protected native boolean putNativeKeyValue(String s, String s1);

    protected native String regist(String s, boolean flag, int i1);

    protected native String removeNativeKeyValue(String s);

    public void setDumpFilePath(String s) {
        this;
        JVM INSTR monitorenter ;
        f = s;
        this;
        JVM INSTR monitorexit ;
        return;
        s;
        throw s;
    }

    public boolean setNativeAppChannel(String s) {
        return a(12, s);
    }

    public boolean setNativeAppPackage(String s) {
        return a(13, s);
    }

    public boolean setNativeAppVersion(String s) {
        return a(10, s);
    }

    protected native void setNativeInfo(int i1, String s);

    public boolean setNativeUserId(String s) {
        return a(11, s);
    }

    public void setUserOpened(boolean flag) {
        boolean flag1 = true;
        this;
        JVM INSTR monitorenter ;
        c(flag);
        if (com.tencent.bugly.crashreport.common.strategy.a.a().c().g && isUserOpened())
            flag = flag1;
        else
            flag = false;
        if (flag != j) {
            ag.a("native changed to %b", new Object[] {
                Boolean.valueOf(flag)
            });
            b(flag);
        }
        this;
        JVM INSTR monitorexit ;
        return;
        Exception exception;
        exception;
        throw exception;
    }

    public void startNativeMonitor() {
        boolean flag1 = true;
        this;
        JVM INSTR monitorenter ;
        if (!i && !h) goto _L2; else goto _L1
_L1:
        a(g);
_L11:
        this;
        JVM INSTR monitorexit ;
        return;
_L2:
        Object obj = c.l;
        if (obj == null) goto _L4; else goto _L3
_L3:
        if (((String) (obj)).trim().length() <= 0) goto _L4; else goto _L5
_L5:
        boolean flag = false;
_L12:
        if (flag)
            break MISSING_BLOCK_LABEL_65;
        obj = c.l;
        c.getClass();
        obj = c.l;
        if (obj == null) goto _L7; else goto _L6
_L6:
        if (((String) (obj)).trim().length() <= 0) goto _L7; else goto _L8
_L8:
        flag = false;
_L13:
        if (!flag) goto _L10; else goto _L9
_L9:
        obj = "Bugly";
_L14:
        String s = c.l;
        if (s == null)
            break MISSING_BLOCK_LABEL_218;
        if (s.trim().length() <= 0)
            break MISSING_BLOCK_LABEL_218;
        flag = false;
_L15:
        if (flag)
            flag1 = false;
        i = a(((String) (obj)), flag1);
        if (i || h) {
            a(g);
            af af1 = d;
            obj = JVM INSTR new #6   <Class NativeCrashHandler$1>;
            ((_cls1) (obj)).this. _cls1();
            af1.a(((Runnable) (obj)));
        }
          goto _L11
        obj;
        throw obj;
_L4:
        flag = true;
          goto _L12
_L7:
        flag = true;
          goto _L13
_L10:
        obj = c.l;
          goto _L14
        flag = true;
          goto _L15
    }

    protected native void testCrash();

    public void testNativeCrash() {
        if (!i)
            ag.d("libBugly.so has not been load! so fail!", new Object[0]);
        else
            testCrash();
    }

    protected native String unregist();


    // Unreferenced inner class com/tencent/bugly/crashreport/crash/jni/NativeCrashHandler$1

/* anonymous class */
    final class _cls1
        implements Runnable {

        private NativeCrashHandler a;

        public final void run() {
            if (!com.tencent.bugly.proguard.a.a(com.tencent.bugly.crashreport.crash.jni.NativeCrashHandler.a(a), "native_record_lock", 10000L)) {
                ag.a("Failed to lock file for handling native crash record.", new Object[0]);
            } else {
                a.setNativeAppVersion(com.tencent.bugly.crashreport.crash.jni.NativeCrashHandler.b(a).j);
                a.setNativeAppChannel(com.tencent.bugly.crashreport.crash.jni.NativeCrashHandler.b(a).k);
                a.setNativeAppPackage(com.tencent.bugly.crashreport.crash.jni.NativeCrashHandler.b(a).c);
                a.setNativeUserId(com.tencent.bugly.crashreport.crash.jni.NativeCrashHandler.b(a).f());
                com.tencent.bugly.crashreport.crash.CrashDetailBean crashdetailbean = com.tencent.bugly.crashreport.crash.jni.b.a(com.tencent.bugly.crashreport.crash.jni.NativeCrashHandler.a(a), com.tencent.bugly.crashreport.crash.jni.NativeCrashHandler.c(a), NativeCrashHandler.d(a));
                if (crashdetailbean != null) {
                    if (!NativeCrashHandler.e(a).a(crashdetailbean))
                        NativeCrashHandler.e(a).a(crashdetailbean, 3000L, false);
                    com.tencent.bugly.crashreport.crash.jni.b.b(com.tencent.bugly.crashreport.crash.jni.NativeCrashHandler.c(a));
                    ag.a("get crash from native record!", new Object[0]);
                }
                a.a();
                com.tencent.bugly.proguard.a.b(com.tencent.bugly.crashreport.crash.jni.NativeCrashHandler.a(a), "native_record_lock");
            }
        }

             {
                a = NativeCrashHandler.this;
                super();
            }
    }

}
