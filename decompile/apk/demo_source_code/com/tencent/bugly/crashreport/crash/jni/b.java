// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.tencent.bugly.crashreport.crash.jni;

import android.content.Context;
import com.tencent.bugly.crashreport.common.info.a;
import com.tencent.bugly.crashreport.crash.CrashDetailBean;
import com.tencent.bugly.proguard.ag;
import com.tencent.bugly.proguard.j;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

// Referenced classes of package com.tencent.bugly.crashreport.crash.jni:
//            NativeExceptionHandler

public class b {

    private StringBuilder a;
    private int b;

    public b(StringBuilder stringbuilder, int i) {
        b = 0;
        a = stringbuilder;
        b = i;
    }

    public static CrashDetailBean a(Context context, String s, NativeExceptionHandler nativeexceptionhandler) {
        Object obj1 = null;
        if (context != null && s != null && nativeexceptionhandler != null) goto _L2; else goto _L1
_L1:
        ag.e("get eup record file args error", new Object[0]);
        s = obj1;
_L4:
        return s;
_L2:
        Object obj;
        obj = new File(s, "rqd_record.eup");
        s = obj1;
        if (!((File) (obj)).exists()) goto _L4; else goto _L3
_L3:
        s = obj1;
        if (!((File) (obj)).canRead()) goto _L4; else goto _L5
_L5:
        FileInputStream fileinputstream;
        fileinputstream = JVM INSTR new #45  <Class FileInputStream>;
        fileinputstream.FileInputStream(((File) (obj)));
        s = fileinputstream;
        obj = a(((InputStream) (fileinputstream)));
        if (obj == null)
            break MISSING_BLOCK_LABEL_97;
        s = fileinputstream;
        if (((String) (obj)).equals("NATIVE_RQD_REPORT"))
            break MISSING_BLOCK_LABEL_136;
        s = fileinputstream;
        ag.e("record read fail! %s", new Object[] {
            obj
        });
        fileinputstream.close();
        s = obj1;
          goto _L4
        context;
        context.printStackTrace();
        s = obj1;
          goto _L4
        s = fileinputstream;
        HashMap hashmap = JVM INSTR new #69  <Class HashMap>;
        s = fileinputstream;
        hashmap.HashMap();
        obj = null;
_L7:
        s = fileinputstream;
        String s1 = a(((InputStream) (fileinputstream)));
        if (s1 == null)
            break; /* Loop/switch isn't completed */
        if (obj == null) {
            obj = s1;
            continue; /* Loop/switch isn't completed */
        }
        s = fileinputstream;
        hashmap.put(obj, s1);
        obj = null;
        if (true) goto _L7; else goto _L6
_L6:
        if (obj == null)
            break MISSING_BLOCK_LABEL_241;
        s = fileinputstream;
        ag.e("record not pair! drop! %s", new Object[] {
            obj
        });
        fileinputstream.close();
        s = obj1;
          goto _L4
        context;
        context.printStackTrace();
        s = obj1;
          goto _L4
        s = fileinputstream;
        context = a(context, ((Map) (hashmap)), nativeexceptionhandler);
        s = context;
        try {
            fileinputstream.close();
        }
        // Misplaced declaration of an exception variable
        catch (Context context) {
            context.printStackTrace();
        }
          goto _L4
        nativeexceptionhandler;
        context = null;
_L11:
        s = context;
        nativeexceptionhandler.printStackTrace();
        s = obj1;
        if (context == null) goto _L4; else goto _L8
_L8:
        context.close();
        s = obj1;
          goto _L4
        context;
        context.printStackTrace();
        s = obj1;
          goto _L4
        context;
        s = null;
_L10:
        if (s != null)
            try {
                s.close();
            }
            // Misplaced declaration of an exception variable
            catch (String s) {
                s.printStackTrace();
            }
        throw context;
        context;
        if (true) goto _L10; else goto _L9
_L9:
        nativeexceptionhandler;
        context = fileinputstream;
          goto _L11
    }

    private static CrashDetailBean a(Context context, Map map, NativeExceptionHandler nativeexceptionhandler) {
        if (map != null) goto _L2; else goto _L1
_L1:
        context = null;
_L7:
        return context;
_L2:
        if (com.tencent.bugly.crashreport.common.info.a.a(context) == null) {
            ag.e("abnormal com info not created", new Object[0]);
            context = null;
            continue; /* Loop/switch isn't completed */
        }
        context = (String)map.get("intStateStr");
        if (context == null || context.trim().length() <= 0) {
            ag.e("no intStateStr", new Object[0]);
            context = null;
            continue; /* Loop/switch isn't completed */
        }
        context = c(context);
        if (context == null) {
            ag.e("parse intSateMap fail", new Object[] {
                Integer.valueOf(map.size())
            });
            context = null;
            continue; /* Loop/switch isn't completed */
        }
        int i;
        int k;
        int l;
        int i1;
        long l1;
        long l2;
        String s2;
        i1 = ((Integer)context.get("ep")).intValue();
        l = ((Integer)context.get("et")).intValue();
        ((Integer)context.get("sino")).intValue();
        k = ((Integer)context.get("sico")).intValue();
        i = ((Integer)context.get("spd")).intValue();
        ((Integer)context.get("sud")).intValue();
        l1 = ((Integer)context.get("ets")).intValue();
        l2 = ((Integer)context.get("etms")).intValue();
        s2 = (String)map.get("soVersion");
        if (s2 != null)
            break MISSING_BLOCK_LABEL_267;
        ag.e("error format at version", new Object[0]);
        context = null;
        continue; /* Loop/switch isn't completed */
        String s = (String)map.get("errorAddr");
        if (s == null)
            s = "unknown2";
        context = (String)map.get("codeMsg");
        if (context == null)
            context = "unknown2";
        String s1 = (String)map.get("tombPath");
        if (s1 == null)
            s1 = "unknown2";
        Object obj = (String)map.get("signalName");
        if (obj == null)
            obj = "unknown2";
        Object obj1;
        map.get("errnoMsg");
        obj1 = (String)map.get("stack");
        if (obj1 == null)
            obj1 = "unknown2";
        Object obj2 = (String)map.get("jstack");
        if (obj2 == null)
            break MISSING_BLOCK_LABEL_433;
        StringBuilder stringbuilder = JVM INSTR new #162 <Class StringBuilder>;
        stringbuilder.StringBuilder();
        obj1 = stringbuilder.append(((String) (obj1))).append("java:\n").append(((String) (obj2))).toString();
        String s3;
        l2 /= 1000L;
        s3 = a(((String) (obj1)));
        obj2 = (String)map.get("sendingProcess");
        obj1 = obj2;
        if (obj2 == null)
            obj1 = "UNKNOWN";
        String s4;
        obj2 = JVM INSTR new #162 <Class StringBuilder>;
        ((StringBuilder) (obj2)).StringBuilder();
        s4 = ((StringBuilder) (obj2)).append(((String) (obj1))).append("(").append(i).append(")").toString();
        obj2 = obj;
        obj1 = context;
        if (k <= 0)
            break MISSING_BLOCK_LABEL_562;
        obj1 = JVM INSTR new #162 <Class StringBuilder>;
        ((StringBuilder) (obj1)).StringBuilder();
        obj2 = ((StringBuilder) (obj1)).append(((String) (obj))).append("(").append(context).append(")").toString();
        obj1 = "KERNEL";
        Object obj3 = (String)map.get("nativeLog");
        obj = null;
        context = ((Context) (obj));
        if (obj3 == null)
            break MISSING_BLOCK_LABEL_604;
        context = ((Context) (obj));
        if (!((String) (obj3)).isEmpty())
            context = com.tencent.bugly.proguard.a.a(null, ((String) (obj3)));
        obj = (String)map.get("processName");
        if (obj != null)
            break MISSING_BLOCK_LABEL_651;
        obj = JVM INSTR new #162 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder("unknown(");
        obj = ((StringBuilder) (obj)).append(i1).append(")").toString();
        Object obj4 = (String)map.get("threadName");
        obj3 = obj4;
        if (obj4 == null)
            obj3 = "unknown";
        String s5;
        obj4 = JVM INSTR new #162 <Class StringBuilder>;
        ((StringBuilder) (obj4)).StringBuilder();
        s5 = ((StringBuilder) (obj4)).append(((String) (obj3))).append("(").append(l).append(")").toString();
        obj3 = null;
        String s6 = (String)map.get("key-value");
        if (s6 == null) goto _L4; else goto _L3
_L3:
        String as[];
        obj4 = JVM INSTR new #69  <Class HashMap>;
        ((HashMap) (obj4)).HashMap();
        as = s6.split("\n");
        k = as.length;
        i = 0;
_L5:
        obj3 = obj4;
        if (i >= k)
            break; /* Loop/switch isn't completed */
        obj3 = as[i].split("=");
        if (obj3.length == 2)
            ((Map) (obj4)).put(obj3[0], obj3[1]);
        i++;
        if (true) goto _L5; else goto _L4
_L4:
        context = nativeexceptionhandler.packageCrashDatas(((String) (obj)), s5, l1 * 1000L + l2, ((String) (obj2)), s, s3, ((String) (obj1)), s4, s1, s2, context, ((Map) (obj3)), false);
        if (context == null)
            continue; /* Loop/switch isn't completed */
        nativeexceptionhandler = (String)map.get("userId");
        if (nativeexceptionhandler == null)
            break MISSING_BLOCK_LABEL_889;
        context.m = nativeexceptionhandler;
        nativeexceptionhandler = (String)map.get("sysLog");
        if (nativeexceptionhandler == null)
            break MISSING_BLOCK_LABEL_910;
        context.w = nativeexceptionhandler;
        map = (String)map.get("appVersion");
        if (map == null)
            break MISSING_BLOCK_LABEL_931;
        context.f = map;
        context.y = null;
        context.k = true;
        continue; /* Loop/switch isn't completed */
        context;
        ag.e("error format", new Object[0]);
        context.printStackTrace();
        context = null;
        if (true) goto _L7; else goto _L6
_L6:
    }

    private static String a(InputStream inputstream) {
        Object obj = null;
        if (inputstream != null) goto _L2; else goto _L1
_L1:
        String s = obj;
_L4:
        return s;
_L2:
        StringBuilder stringbuilder = new StringBuilder();
        do {
            int i = inputstream.read();
            s = obj;
            if (i != -1) {
label0:
                {
                    if (i != 0)
                        break label0;
                    s = stringbuilder.toString();
                }
            }
            if (true)
                continue;
            stringbuilder.append((char)i);
        } while (true);
        if (true) goto _L4; else goto _L3
_L3:
    }

    protected static String a(String s) {
        if (s != null) goto _L2; else goto _L1
_L1:
        String s1 = "";
_L4:
        return s1;
_L2:
        String as[] = s.split("\n");
        s1 = s;
        if (as != null) {
            s1 = s;
            if (as.length != 0) {
                s = new StringBuilder();
                int k = as.length;
                for (int i = 0; i < k; i++) {
                    s1 = as[i];
                    if (!s1.contains("java.lang.Thread.getStackTrace("))
                        s.append(s1).append("\n");
                }

                s1 = s.toString();
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static String a(String s, String s1) {
        if (s == null || s1 == null) {
            s = null;
        } else {
            StringBuilder stringbuilder = new StringBuilder();
            String s2 = c(s, s1);
            if (s2 != null && !s2.isEmpty()) {
                stringbuilder.append("Register infos:\n");
                stringbuilder.append(s2);
            }
            s = d(s, s1);
            if (s != null && !s.isEmpty()) {
                if (stringbuilder.length() > 0)
                    stringbuilder.append("\n");
                stringbuilder.append("System SO infos:\n");
                stringbuilder.append(s);
            }
            s = stringbuilder.toString();
        }
        return s;
    }

    public static void b(String s) {
        File file = new File(s, "rqd_record.eup");
        if (file.exists() && file.canWrite()) {
            file.delete();
            ag.c("delete record file %s", new Object[] {
                file.getAbsoluteFile()
            });
        }
        file = new File(s, "reg_record.txt");
        if (file.exists() && file.canWrite()) {
            file.delete();
            ag.c("delete record file %s", new Object[] {
                file.getAbsoluteFile()
            });
        }
        file = new File(s, "map_record.txt");
        if (file.exists() && file.canWrite()) {
            file.delete();
            ag.c("delete record file %s", new Object[] {
                file.getAbsoluteFile()
            });
        }
        s = new File(s, "backup_record.txt");
        if (s.exists() && s.canWrite()) {
            s.delete();
            ag.c("delete record file %s", new Object[] {
                s.getAbsoluteFile()
            });
        }
    }

    private static String c(String s, String s1) {
        Object obj;
        BufferedReader bufferedreader;
        obj = null;
        bufferedreader = com.tencent.bugly.proguard.a.a(s, "reg_record.txt");
        if (bufferedreader != null) goto _L2; else goto _L1
_L1:
        s = obj;
_L8:
        return s;
_L2:
        String s2;
        s = JVM INSTR new #162 <Class StringBuilder>;
        s.StringBuilder();
        s2 = bufferedreader.readLine();
        if (s2 == null)
            break MISSING_BLOCK_LABEL_55;
        boolean flag = s2.startsWith(s1);
        if (flag)
            break MISSING_BLOCK_LABEL_86;
        s = obj;
        if (bufferedreader == null)
            continue; /* Loop/switch isn't completed */
        try {
            bufferedreader.close();
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            ag.a(s);
            s = obj;
            continue; /* Loop/switch isn't completed */
        }
        s = obj;
        continue; /* Loop/switch isn't completed */
        byte byte0;
        int i;
        int k;
        k = 0;
        byte0 = 18;
        i = 0;
_L5:
        s1 = bufferedreader.readLine();
        if (s1 == null)
            break MISSING_BLOCK_LABEL_215;
        if (i % 4 != 0) goto _L4; else goto _L3
_L3:
        if (i <= 0)
            break MISSING_BLOCK_LABEL_121;
        s.append("\n");
        s.append("  ");
_L6:
        k = s1.length();
        s.append(s1);
        i++;
          goto _L5
_L4:
        if (s1.length() > 16)
            byte0 = 28;
        s.append("                ".substring(0, byte0 - k));
          goto _L6
        s;
        ag.a(s);
        s = obj;
        if (bufferedreader == null)
            continue; /* Loop/switch isn't completed */
        try {
            bufferedreader.close();
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            ag.a(s);
            s = obj;
            continue; /* Loop/switch isn't completed */
        }
        s = obj;
        continue; /* Loop/switch isn't completed */
        s.append("\n");
        s1 = s.toString();
        s = s1;
        if (bufferedreader == null)
            continue; /* Loop/switch isn't completed */
        bufferedreader.close();
        s = s1;
        continue; /* Loop/switch isn't completed */
        s;
        ag.a(s);
        s = s1;
        if (true) goto _L8; else goto _L7
_L7:
        s;
        if (bufferedreader != null)
            try {
                bufferedreader.close();
            }
            // Misplaced declaration of an exception variable
            catch (String s1) {
                ag.a(s1);
            }
        throw s;
    }

    private static Map c(String s) {
        Object obj = null;
        if (s != null) goto _L2; else goto _L1
_L1:
        s = obj;
_L6:
        return s;
_L2:
        int i;
        Object obj1;
        String as[];
        int k;
        String s1;
        String as1[];
        try {
            obj1 = JVM INSTR new #69  <Class HashMap>;
            ((HashMap) (obj1)).HashMap();
            as1 = s.split(",");
            k = as1.length;
        }
        // Misplaced declaration of an exception variable
        catch (Object obj1) {
            ag.e("error format intStateStr %s", new Object[] {
                s
            });
            ((Exception) (obj1)).printStackTrace();
            s = obj;
            continue; /* Loop/switch isn't completed */
        }
        i = 0;
_L4:
        if (i >= k)
            break; /* Loop/switch isn't completed */
        s1 = as1[i];
        as = s1.split(":");
        if (as.length == 2)
            break MISSING_BLOCK_LABEL_115;
        ag.e("error format at %s", new Object[] {
            s1
        });
        s = obj;
        continue; /* Loop/switch isn't completed */
        int l = Integer.parseInt(as[1]);
        ((Map) (obj1)).put(as[0], Integer.valueOf(l));
        i++;
        if (true) goto _L4; else goto _L3
_L3:
        s = ((String) (obj1));
        if (true) goto _L6; else goto _L5
_L5:
    }

    private static String d(String s, String s1) {
        Object obj;
        BufferedReader bufferedreader;
        obj = null;
        bufferedreader = com.tencent.bugly.proguard.a.a(s, "map_record.txt");
        if (bufferedreader != null) goto _L2; else goto _L1
_L1:
        s = obj;
_L6:
        return s;
_L2:
        String s2;
        s = JVM INSTR new #162 <Class StringBuilder>;
        s.StringBuilder();
        s2 = bufferedreader.readLine();
        if (s2 == null)
            break MISSING_BLOCK_LABEL_51;
        boolean flag = s2.startsWith(s1);
        if (flag)
            break MISSING_BLOCK_LABEL_79;
        s = obj;
        if (bufferedreader == null)
            continue; /* Loop/switch isn't completed */
        try {
            bufferedreader.close();
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            ag.a(s);
            s = obj;
            continue; /* Loop/switch isn't completed */
        }
        s = obj;
        continue; /* Loop/switch isn't completed */
_L4:
        s1 = bufferedreader.readLine();
        if (s1 == null)
            break MISSING_BLOCK_LABEL_147;
        s.append("  ");
        s.append(s1);
        s.append("\n");
        if (true) goto _L4; else goto _L3
_L3:
        s;
        ag.a(s);
        s = obj;
        if (bufferedreader == null)
            continue; /* Loop/switch isn't completed */
        try {
            bufferedreader.close();
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            ag.a(s);
            s = obj;
            continue; /* Loop/switch isn't completed */
        }
        s = obj;
        continue; /* Loop/switch isn't completed */
        s1 = s.toString();
        s = s1;
        if (bufferedreader == null)
            continue; /* Loop/switch isn't completed */
        bufferedreader.close();
        s = s1;
        continue; /* Loop/switch isn't completed */
        s;
        ag.a(s);
        s = s1;
        if (true) goto _L6; else goto _L5
_L5:
        s;
        if (bufferedreader != null)
            try {
                bufferedreader.close();
            }
            // Misplaced declaration of an exception variable
            catch (String s1) {
                ag.a(s1);
            }
        throw s;
    }

    private void d(String s) {
        for (int i = 0; i < b; i++)
            a.append('\t');

        if (s != null)
            a.append(s).append(": ");
    }

    public b a(byte byte0, String s) {
        d(s);
        a.append(byte0).append('\n');
        return this;
    }

    public b a(char c1, String s) {
        d(s);
        a.append(c1).append('\n');
        return this;
    }

    public b a(double d1, String s) {
        d(s);
        a.append(d1).append('\n');
        return this;
    }

    public b a(float f, String s) {
        d(s);
        a.append(f).append('\n');
        return this;
    }

    public b a(int i, String s) {
        d(s);
        a.append(i).append('\n');
        return this;
    }

    public b a(long l, String s) {
        d(s);
        a.append(l).append('\n');
        return this;
    }

    public b a(j j1, String s) {
        a('{', s);
        if (j1 == null)
            a.append('\t').append("null");
        else
            j1.a(a, b + 1);
        a('}', null);
        return this;
    }

    public b a(Object obj, String s) {
        if (obj == null)
            a.append("null\n");
        else
        if (obj instanceof Byte)
            a(((Byte)obj).byteValue(), s);
        else
        if (obj instanceof Boolean)
            a(((Boolean)obj).booleanValue(), s);
        else
        if (obj instanceof Short)
            a(((Short)obj).shortValue(), s);
        else
        if (obj instanceof Integer)
            a(((Integer)obj).intValue(), s);
        else
        if (obj instanceof Long)
            a(((Long)obj).longValue(), s);
        else
        if (obj instanceof Float)
            a(((Float)obj).floatValue(), s);
        else
        if (obj instanceof Double)
            a(((Double)obj).doubleValue(), s);
        else
        if (obj instanceof String)
            b((String)obj, s);
        else
        if (obj instanceof Map)
            a((Map)obj, s);
        else
        if (obj instanceof List)
            a(((Collection) ((List)obj)), s);
        else
        if (obj instanceof j)
            a((j)obj, s);
        else
        if (obj instanceof byte[])
            a((byte[])obj, s);
        else
        if (obj instanceof boolean[])
            a((boolean[])obj, s);
        else
        if (obj instanceof short[])
            a((short[])obj, s);
        else
        if (obj instanceof int[])
            a((int[])obj, s);
        else
        if (obj instanceof long[])
            a((long[])obj, s);
        else
        if (obj instanceof float[])
            a((float[])obj, s);
        else
        if (obj instanceof double[])
            a((double[])obj, s);
        else
        if (obj.getClass().isArray())
            a((Object[])obj, s);
        else
            throw new com.tencent.bugly.proguard.b("write object error: unsupport type.");
        return this;
    }

    public b a(Collection collection, String s) {
        if (collection == null) {
            d(s);
            a.append("null\t");
            collection = this;
        } else {
            collection = a(collection.toArray(), s);
        }
        return collection;
    }

    public b a(Map map, String s) {
        d(s);
        if (map == null)
            a.append("null\n");
        else
        if (map.isEmpty()) {
            a.append(map.size()).append(", {}\n");
        } else {
            a.append(map.size()).append(", {\n");
            s = new b(a, b + 1);
            b b1 = new b(a, b + 2);
            for (map = map.entrySet().iterator(); map.hasNext(); s.a(')', null)) {
                java.util.Map.Entry entry = (java.util.Map.Entry)map.next();
                s.a('(', null);
                b1.a(entry.getKey(), null);
                b1.a(entry.getValue(), null);
            }

            a('}', null);
        }
        return this;
    }

    public b a(short word0, String s) {
        d(s);
        a.append(word0).append('\n');
        return this;
    }

    public b a(boolean flag, String s) {
        d(s);
        s = a;
        char c1;
        if (flag)
            c1 = 'T';
        else
            c1 = 'F';
        s.append(c1).append('\n');
        return this;
    }

    public b a(byte abyte0[], String s) {
        d(s);
        if (abyte0 == null)
            a.append("null\n");
        else
        if (abyte0.length == 0) {
            a.append(abyte0.length).append(", []\n");
        } else {
            a.append(abyte0.length).append(", [\n");
            s = new b(a, b + 1);
            int k = abyte0.length;
            for (int i = 0; i < k; i++)
                s.a(abyte0[i], null);

            a(']', null);
        }
        return this;
    }

    public b a(double ad[], String s) {
        d(s);
        if (ad == null)
            a.append("null\n");
        else
        if (ad.length == 0) {
            a.append(ad.length).append(", []\n");
        } else {
            a.append(ad.length).append(", [\n");
            s = new b(a, b + 1);
            int k = ad.length;
            for (int i = 0; i < k; i++)
                s.a(ad[i], null);

            a(']', null);
        }
        return this;
    }

    public b a(float af[], String s) {
        d(s);
        if (af == null)
            a.append("null\n");
        else
        if (af.length == 0) {
            a.append(af.length).append(", []\n");
        } else {
            a.append(af.length).append(", [\n");
            s = new b(a, b + 1);
            int k = af.length;
            for (int i = 0; i < k; i++)
                s.a(af[i], null);

            a(']', null);
        }
        return this;
    }

    public b a(int ai[], String s) {
        d(s);
        if (ai == null)
            a.append("null\n");
        else
        if (ai.length == 0) {
            a.append(ai.length).append(", []\n");
        } else {
            a.append(ai.length).append(", [\n");
            s = new b(a, b + 1);
            int k = ai.length;
            for (int i = 0; i < k; i++)
                s.a(ai[i], null);

            a(']', null);
        }
        return this;
    }

    public b a(long al[], String s) {
        d(s);
        if (al == null)
            a.append("null\n");
        else
        if (al.length == 0) {
            a.append(al.length).append(", []\n");
        } else {
            a.append(al.length).append(", [\n");
            s = new b(a, b + 1);
            int k = al.length;
            for (int i = 0; i < k; i++)
                s.a(al[i], null);

            a(']', null);
        }
        return this;
    }

    public b a(Object aobj[], String s) {
        d(s);
        if (aobj == null)
            a.append("null\n");
        else
        if (aobj.length == 0) {
            a.append(aobj.length).append(", []\n");
        } else {
            a.append(aobj.length).append(", [\n");
            s = new b(a, b + 1);
            int k = aobj.length;
            for (int i = 0; i < k; i++)
                s.a(aobj[i], null);

            a(']', null);
        }
        return this;
    }

    public b a(short aword0[], String s) {
        d(s);
        if (aword0 == null)
            a.append("null\n");
        else
        if (aword0.length == 0) {
            a.append(aword0.length).append(", []\n");
        } else {
            a.append(aword0.length).append(", [\n");
            s = new b(a, b + 1);
            int k = aword0.length;
            for (int i = 0; i < k; i++)
                s.a(aword0[i], null);

            a(']', null);
        }
        return this;
    }

    public b b(String s, String s1) {
        d(s1);
        if (s == null)
            a.append("null\n");
        else
            a.append(s).append('\n');
        return this;
    }
}
