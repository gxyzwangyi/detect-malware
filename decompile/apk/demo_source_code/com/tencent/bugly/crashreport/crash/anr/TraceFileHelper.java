// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.tencent.bugly.crashreport.crash.anr;

import com.tencent.bugly.proguard.ag;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class TraceFileHelper {
    public static final class a {

        public long a;
        public String b;
        public long c;
        public Map d;

        public a() {
        }
    }

    public static interface b {

        public abstract boolean a(long l);

        public abstract boolean a(long l, long l1, String s);

        public abstract boolean a(String s, int i, String s1, String s2);
    }


    public TraceFileHelper() {
    }

    private static String a(BufferedReader bufferedreader) {
        int i;
        StringBuffer stringbuffer;
        stringbuffer = new StringBuffer();
        i = 0;
_L3:
        String s;
        if (i >= 3)
            break MISSING_BLOCK_LABEL_58;
        s = bufferedreader.readLine();
        if (s != null) goto _L2; else goto _L1
_L1:
        bufferedreader = null;
_L4:
        return bufferedreader;
_L2:
        stringbuffer.append((new StringBuilder()).append(s).append("\n").toString());
        i++;
          goto _L3
        bufferedreader = stringbuffer.toString();
          goto _L4
    }

    private static transient Object[] a(BufferedReader bufferedreader, Pattern apattern[]) {
        Object aobj[];
        Object obj;
        obj = null;
        aobj = obj;
        if (bufferedreader == null) goto _L2; else goto _L1
_L1:
        if (apattern != null) goto _L4; else goto _L3
_L3:
        aobj = obj;
_L2:
        return aobj;
_L4:
        String s;
        s = bufferedreader.readLine();
        aobj = obj;
        if (s == null) goto _L2; else goto _L5
_L5:
        int i;
        int j;
        j = apattern.length;
        i = 0;
_L7:
        if (i >= j) goto _L4; else goto _L6
_L6:
label0:
        {
            Pattern pattern = apattern[i];
            if (!pattern.matcher(s).matches())
                break label0;
            aobj = new Object[2];
            aobj[0] = pattern;
            aobj[1] = s;
        }
          goto _L2
        i++;
          goto _L7
    }

    private static String b(BufferedReader bufferedreader) {
        StringBuffer stringbuffer = new StringBuffer();
        do {
            String s = bufferedreader.readLine();
            if (s != null && s.trim().length() > 0)
                stringbuffer.append((new StringBuilder()).append(s).append("\n").toString());
            else
                return stringbuffer.toString();
        } while (true);
    }

    public static a readFirstDumpInfo(String s, boolean flag) {
        Object obj = null;
        if (s == null) {
            ag.e("path:%s", new Object[] {
                s
            });
            s = obj;
        } else {
            a a1 = new a();
            readTraceFile(s, new b(a1, flag) {

                private a a;
                private boolean b;

                public final boolean a(long l) {
                    ag.c("process end %d", new Object[] {
                        Long.valueOf(l)
                    });
                    return false;
                }

                public final boolean a(long l, long l1, String s1) {
                    boolean flag1 = false;
                    ag.c("new process %s", new Object[] {
                        s1
                    });
                    a.a = l;
                    a.b = s1;
                    a.c = l1;
                    if (b)
                        flag1 = true;
                    return flag1;
                }

                public final boolean a(String s1, int i, String s2, String s3) {
                    ag.c("new thread %s", new Object[] {
                        s1
                    });
                    if (a.d == null)
                        a.d = new HashMap();
                    a.d.put(s1, new String[] {
                        s2, s3, (new StringBuilder()).append(i).toString()
                    });
                    return true;
                }

             {
                a = a1;
                b = flag;
                super();
            }
            }
);
            if (a1.a > 0L && a1.c > 0L && a1.b != null) {
                s = a1;
            } else {
                ag.e("first dump error %s", new Object[] {
                    (new StringBuilder()).append(a1.a).append(" ").append(a1.c).append(" ").append(a1.b).toString()
                });
                s = obj;
            }
        }
        return s;
    }

    public static a readTargetDumpInfo(String s, String s1, boolean flag) {
        if (s != null && s1 != null) goto _L2; else goto _L1
_L1:
        s = null;
_L4:
        return s;
_L2:
        a a1 = new a();
        readTraceFile(s1, new b(a1, flag) {

            private a a;
            private boolean b;

            public final boolean a(long l) {
                boolean flag1 = false;
                ag.c("process end %d", new Object[] {
                    Long.valueOf(l)
                });
                if (a.a <= 0L || a.c <= 0L || a.b == null)
                    flag1 = true;
                return flag1;
            }

            public final boolean a(long l, long l1, String s2) {
                boolean flag1;
                flag1 = true;
                ag.c("new process %s", new Object[] {
                    s2
                });
                if (s2.equals(s2)) goto _L2; else goto _L1
_L1:
                return flag1;
_L2:
                a.a = l;
                a.b = s2;
                a.c = l1;
                if (!b)
                    flag1 = false;
                if (true) goto _L1; else goto _L3
_L3:
            }

            public final boolean a(String s2, int i, String s3, String s4) {
                ag.c("new thread %s", new Object[] {
                    s2
                });
                if (a.a > 0L && a.c > 0L && a.b != null) {
                    if (a.d == null)
                        a.d = new HashMap();
                    a.d.put(s2, new String[] {
                        s3, s4, (new StringBuilder()).append(i).toString()
                    });
                }
                return true;
            }

             {
                a = a1;
                b = flag;
                super();
            }
        }
);
        if (a1.a > 0L && a1.c > 0L) {
            s = a1;
            if (a1.b != null)
                continue; /* Loop/switch isn't completed */
        }
        s = null;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static void readTraceFile(String s, b b1) {
        if (s != null && b1 != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        Object obj1 = new File(s);
        if (!((File) (obj1)).exists()) goto _L1; else goto _L3
_L3:
        ((File) (obj1)).lastModified();
        ((File) (obj1)).length();
        s = null;
        Object obj;
        obj = JVM INSTR new #25  <Class BufferedReader>;
        FileReader filereader = JVM INSTR new #124 <Class FileReader>;
        filereader.FileReader(((File) (obj1)));
        ((BufferedReader) (obj)).BufferedReader(filereader);
        Pattern pattern;
        SimpleDateFormat simpledateformat;
        Pattern pattern1;
        pattern = Pattern.compile("-{5}\\spid\\s\\d+\\sat\\s\\d+-\\d+-\\d+\\s\\d{2}:\\d{2}:\\d{2}\\s-{5}");
        s = Pattern.compile("-{5}\\send\\s\\d+\\s-{5}");
        pattern1 = Pattern.compile("Cmd\\sline:\\s(\\S+)");
        obj1 = Pattern.compile("\".+\"\\s(daemon\\s) {0,1}prio=\\d+\\stid=\\d+\\s.*");
        simpledateformat = JVM INSTR new #144 <Class SimpleDateFormat>;
        simpledateformat.SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US);
_L7:
        Object aobj[] = a(((BufferedReader) (obj)), new Pattern[] {
            pattern
        });
        if (aobj == null) goto _L5; else goto _L4
_L4:
        long l;
        long l1;
        aobj = aobj[1].toString().split("\\s");
        l = Long.parseLong(aobj[2]);
        StringBuilder stringbuilder1 = JVM INSTR new #31  <Class StringBuilder>;
        stringbuilder1.StringBuilder();
        l1 = simpledateformat.parse(stringbuilder1.append(aobj[4]).append(" ").append(aobj[5]).toString()).getTime();
        aobj = a(((BufferedReader) (obj)), new Pattern[] {
            pattern1
        });
label0:
        {
            if (aobj != null)
                break label0;
            try {
                ((BufferedReader) (obj)).close();
            }
            // Misplaced declaration of an exception variable
            catch (String s) {
                if (!ag.a(s))
                    s.printStackTrace();
            }
        }
          goto _L1
        boolean flag;
        Matcher matcher = pattern1.matcher(aobj[1].toString());
        matcher.find();
        matcher.group(1);
        flag = b1.a(l, l1, matcher.group(1));
label1:
        {
            if (flag)
                break label1;
            try {
                ((BufferedReader) (obj)).close();
            }
            // Misplaced declaration of an exception variable
            catch (String s) {
                if (!ag.a(s))
                    s.printStackTrace();
            }
        }
          goto _L1
_L10:
        Object obj2 = ((Object) (a(((BufferedReader) (obj)), new Pattern[] {
            obj1, s
        })));
        if (obj2 == null) goto _L7; else goto _L6
_L6:
        if (obj2[0] != obj1) goto _L9; else goto _L8
_L8:
        Object obj3 = obj2[1].toString();
        obj2 = Pattern.compile("\".+\"").matcher(((CharSequence) (obj3)));
        ((Matcher) (obj2)).find();
        obj2 = ((Matcher) (obj2)).group();
        obj2 = ((String) (obj2)).substring(1, ((String) (obj2)).length() - 1);
        ((String) (obj3)).contains("NATIVE");
        obj3 = Pattern.compile("tid=\\d+").matcher(((CharSequence) (obj3)));
        ((Matcher) (obj3)).find();
        obj3 = ((Matcher) (obj3)).group();
        b1.a(((String) (obj2)), Integer.parseInt(((String) (obj3)).substring(((String) (obj3)).indexOf("=") + 1)), a(((BufferedReader) (obj))), b(((BufferedReader) (obj))));
          goto _L10
        b1;
        s = ((String) (obj));
_L16:
        obj = b1.getClass().getName();
        StringBuilder stringbuilder = JVM INSTR new #31  <Class StringBuilder>;
        stringbuilder.StringBuilder();
        ag.d("trace open fail:%s : %s", new Object[] {
            obj, stringbuilder.append(b1.getMessage()).toString()
        });
        if (s != null)
            try {
                s.close();
            }
            // Misplaced declaration of an exception variable
            catch (String s) {
                if (!ag.a(s))
                    s.printStackTrace();
            }
          goto _L1
_L9:
        flag = b1.a(Long.parseLong(obj2[1].toString().split("\\s")[2]));
        if (flag) goto _L7; else goto _L11
_L11:
        try {
            ((BufferedReader) (obj)).close();
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            if (!ag.a(s))
                s.printStackTrace();
        }
          goto _L1
_L5:
        try {
            ((BufferedReader) (obj)).close();
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            if (!ag.a(s))
                s.printStackTrace();
        }
          goto _L1
        s;
        b1 = null;
_L15:
        if (b1 == null)
            break MISSING_BLOCK_LABEL_627;
        b1.close();
_L13:
        throw s;
        b1;
        if (!ag.a(b1))
            b1.printStackTrace();
        if (true) goto _L13; else goto _L12
_L12:
        s;
        b1 = ((b) (obj));
        continue; /* Loop/switch isn't completed */
        b1;
        String s1 = s;
        s = b1;
        b1 = s1;
        if (true) goto _L15; else goto _L14
_L14:
        b1;
          goto _L16
    }
}
