// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.tencent.bugly.crashreport.crash;

import android.content.Context;
import android.os.Process;
import com.tencent.bugly.crashreport.common.info.a;
import com.tencent.bugly.crashreport.common.info.b;
import com.tencent.bugly.crashreport.common.strategy.StrategyBean;
import com.tencent.bugly.proguard.ag;
import com.tencent.bugly.proguard.ah;
import java.util.HashMap;
import java.util.Map;

// Referenced classes of package com.tencent.bugly.crashreport.crash:
//            c, CrashDetailBean, b

public final class e
    implements Thread.UncaughtExceptionHandler {

    private static String h;
    private static final Object i = new Object();
    private Context a;
    private com.tencent.bugly.crashreport.crash.b b;
    private com.tencent.bugly.crashreport.common.strategy.a c;
    private a d;
    private Thread.UncaughtExceptionHandler e;
    private Thread.UncaughtExceptionHandler f;
    private boolean g;
    private int j;

    public e(Context context, com.tencent.bugly.crashreport.crash.b b1, com.tencent.bugly.crashreport.common.strategy.a a1, a a2) {
        g = false;
        a = context;
        b = b1;
        c = a1;
        d = a2;
    }

    private static String a(Throwable throwable, int k) {
        if (throwable != null) goto _L2; else goto _L1
_L1:
        throwable = null;
_L7:
        return throwable;
_L2:
        StringBuilder stringbuilder = new StringBuilder();
        if (throwable.getStackTrace() == null) goto _L4; else goto _L3
_L3:
        int i1;
        StackTraceElement astacktraceelement[];
        astacktraceelement = throwable.getStackTrace();
        i1 = astacktraceelement.length;
        int l = 0;
_L5:
        if (l >= i1)
            break; /* Loop/switch isn't completed */
        throwable = astacktraceelement[l];
        if (k <= 0)
            break MISSING_BLOCK_LABEL_97;
        if (stringbuilder.length() >= k) {
            throwable = JVM INSTR new #49  <Class StringBuilder>;
            throwable.StringBuilder("\n[Stack over limit size :");
            stringbuilder.append(throwable.append(k).append(" , has been cutted !]").toString());
            throwable = stringbuilder.toString();
            continue; /* Loop/switch isn't completed */
        }
        stringbuilder.append(throwable.toString()).append("\n");
        l++;
        if (true) goto _L5; else goto _L4
        throwable;
        ag.e("gen stack error %s", new Object[] {
            throwable.toString()
        });
_L4:
        throwable = stringbuilder.toString();
        if (true) goto _L7; else goto _L6
_L6:
    }

    private void a(Thread.UncaughtExceptionHandler uncaughtexceptionhandler) {
        this;
        JVM INSTR monitorenter ;
        e = uncaughtexceptionhandler;
        this;
        JVM INSTR monitorexit ;
        return;
        uncaughtexceptionhandler;
        throw uncaughtexceptionhandler;
    }

    private static boolean a(Thread thread) {
        Object obj = i;
        obj;
        JVM INSTR monitorenter ;
        if (h != null && thread.getName().equals(h)) goto _L2; else goto _L1
_L1:
        h = thread.getName();
        boolean flag = false;
        obj;
        JVM INSTR monitorexit ;
_L4:
        return flag;
_L2:
        flag = true;
        if (true) goto _L4; else goto _L3
_L3:
        thread;
        throw thread;
    }

    private CrashDetailBean b(Thread thread, Throwable throwable, boolean flag, String s, byte abyte0[]) {
        if (throwable != null) goto _L2; else goto _L1
_L1:
        ag.d("We can do nothing with a null throwable.", new Object[0]);
        thread = null;
_L4:
        return thread;
_L2:
        CrashDetailBean crashdetailbean;
        boolean flag3 = com.tencent.bugly.crashreport.crash.c.a().l();
        int k;
        Object obj;
        String s1;
        String s2;
        Throwable throwable1;
        String s3;
        if (flag3 && flag)
            obj = " This Crash Caused By ANR , PLS To Fix ANR , This Trace May Be Not Useful![Bugly]";
        else
            obj = "";
        if (flag3 && flag)
            ag.e("This Crash Caused By ANR , PLS To Fix ANR , This Trace May Be Not Useful!", new Object[0]);
        crashdetailbean = new CrashDetailBean();
        crashdetailbean.B = com.tencent.bugly.crashreport.common.info.b.h();
        crashdetailbean.C = com.tencent.bugly.crashreport.common.info.b.f();
        crashdetailbean.D = com.tencent.bugly.crashreport.common.info.b.j();
        crashdetailbean.E = d.o();
        crashdetailbean.F = d.n();
        crashdetailbean.G = d.p();
        crashdetailbean.w = com.tencent.bugly.proguard.a.a(a, c.d, null);
        crashdetailbean.x = ah.a(flag);
        if (crashdetailbean.x == null)
            k = 0;
        else
            k = crashdetailbean.x.length;
        ag.a("user log size:%d", new Object[] {
            Integer.valueOf(k)
        });
        if (flag)
            k = 0;
        else
            k = 2;
        crashdetailbean.b = k;
        crashdetailbean.e = d.g();
        crashdetailbean.f = d.j;
        crashdetailbean.g = d.v();
        crashdetailbean.m = d.f();
        s3 = throwable.getClass().getName();
        s2 = b(throwable, 1000);
        s1 = s2;
        if (s2 == null)
            s1 = "";
        k = throwable.getStackTrace().length;
        if (throwable.getCause() != null)
            flag3 = true;
        else
            flag3 = false;
        ag.e("stack frame :%d, has cause %b", new Object[] {
            Integer.valueOf(k), Boolean.valueOf(flag3)
        });
        s2 = "";
        if (throwable.getStackTrace().length > 0)
            s2 = throwable.getStackTrace()[0].toString();
        for (throwable1 = throwable; throwable1 != null && throwable1.getCause() != null; throwable1 = throwable1.getCause());
        if (throwable1 != null && throwable1 != throwable) {
            crashdetailbean.n = throwable1.getClass().getName();
            crashdetailbean.o = b(throwable1, 1000);
            if (crashdetailbean.o == null)
                crashdetailbean.o = "";
            crashdetailbean.p = throwable1.getStackTrace()[0].toString();
            obj = new StringBuilder();
            ((StringBuilder) (obj)).append(s3).append(":").append(s1).append("\n");
            ((StringBuilder) (obj)).append(s2);
            ((StringBuilder) (obj)).append("\n......");
            ((StringBuilder) (obj)).append("\nCaused by:\n");
            ((StringBuilder) (obj)).append(crashdetailbean.n).append(":").append(crashdetailbean.o).append("\n");
            throwable = a(throwable1, c.e);
            ((StringBuilder) (obj)).append(throwable);
            crashdetailbean.q = ((StringBuilder) (obj)).toString();
        } else {
            crashdetailbean.n = s3;
            crashdetailbean.o = (new StringBuilder()).append(s1).append(((String) (obj))).toString();
            if (crashdetailbean.o == null)
                crashdetailbean.o = "";
            crashdetailbean.p = s2;
            throwable = a(throwable, c.e);
            crashdetailbean.q = throwable;
        }
        crashdetailbean.r = System.currentTimeMillis();
        crashdetailbean.u = com.tencent.bugly.proguard.a.c(crashdetailbean.q.getBytes());
        try {
            crashdetailbean.y = com.tencent.bugly.proguard.a.a(c.e, false);
            crashdetailbean.z = d.d;
            obj = JVM INSTR new #49  <Class StringBuilder>;
            ((StringBuilder) (obj)).StringBuilder();
            crashdetailbean.A = ((StringBuilder) (obj)).append(thread.getName()).append("(").append(thread.getId()).append(")").toString();
            crashdetailbean.y.put(crashdetailbean.A, throwable);
            crashdetailbean.H = d.x();
            crashdetailbean.h = d.u();
            crashdetailbean.i = d.G();
            crashdetailbean.L = d.a;
            crashdetailbean.M = d.o;
            crashdetailbean.O = d.D();
            crashdetailbean.P = d.E();
            crashdetailbean.Q = d.y();
            crashdetailbean.R = d.C();
        }
        // Misplaced declaration of an exception variable
        catch (Thread thread) {
            ag.e("handle crash error %s", new Object[] {
                thread.toString()
            });
        }
        if (!flag)
            break; /* Loop/switch isn't completed */
        b.b(crashdetailbean);
_L5:
        thread = crashdetailbean;
        if (true) goto _L4; else goto _L3
_L3:
        boolean flag1;
        boolean flag2;
        if (s != null && s.length() > 0)
            flag1 = true;
        else
            flag1 = false;
        if (abyte0 != null && abyte0.length > 0)
            flag2 = true;
        else
            flag2 = false;
        if (flag1) {
            crashdetailbean.N = new HashMap(1);
            crashdetailbean.N.put("UserData", s);
        }
        if (flag2)
            crashdetailbean.S = abyte0;
          goto _L5
        if (true) goto _L4; else goto _L6
_L6:
    }

    private static String b(Throwable throwable, int k) {
        if (throwable.getMessage() == null)
            throwable = "";
        else
        if (throwable.getMessage().length() <= 1000)
            throwable = throwable.getMessage();
        else
            throwable = (new StringBuilder()).append(throwable.getMessage().substring(0, 1000)).append("\n[Message over limit size:1000").append(", has been cutted!]").toString();
        return throwable;
    }

    private static boolean b(Thread.UncaughtExceptionHandler uncaughtexceptionhandler) {
        boolean flag1 = true;
        if (uncaughtexceptionhandler != null) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        String s = uncaughtexceptionhandler.getClass().getName();
        uncaughtexceptionhandler = Thread.currentThread().getStackTrace();
        int l = uncaughtexceptionhandler.length;
        int k = 0;
        do {
            flag = flag1;
            if (k < l) {
label0:
                {
                    Object obj = uncaughtexceptionhandler[k];
                    String s1 = ((StackTraceElement) (obj)).getClassName();
                    obj = ((StackTraceElement) (obj)).getMethodName();
                    if (!s.equals(s1) || !"uncaughtException".equals(obj))
                        break label0;
                    flag = false;
                }
            }
            if (true)
                continue;
            k++;
        } while (true);
        if (true) goto _L4; else goto _L3
_L3:
    }

    public final void a() {
        this;
        JVM INSTR monitorenter ;
        if (j < 10) goto _L2; else goto _L1
_L1:
        ag.a("java crash handler over %d, no need set.", new Object[] {
            Integer.valueOf(10)
        });
_L4:
        this;
        JVM INSTR monitorexit ;
        return;
_L2:
        Object obj = Thread.getDefaultUncaughtExceptionHandler();
        if (obj == null) goto _L4; else goto _L3
_L3:
        if (getClass().getName().equals(obj.getClass().getName())) goto _L4; else goto _L5
_L5:
        if (!"com.android.internal.os.RuntimeInit$UncaughtHandler".equals(obj.getClass().getName()))
            break MISSING_BLOCK_LABEL_155;
        ag.a("backup system java handler: %s", new Object[] {
            obj.toString()
        });
        f = ((Thread.UncaughtExceptionHandler) (obj));
        e = ((Thread.UncaughtExceptionHandler) (obj));
_L6:
        a(((Thread.UncaughtExceptionHandler) (obj)));
        Thread.setDefaultUncaughtExceptionHandler(this);
        g = true;
        j = j + 1;
        ag.a("registered java monitor: %s", new Object[] {
            toString()
        });
          goto _L4
        obj;
        throw obj;
        ag.a("backup java handler: %s", new Object[] {
            obj.toString()
        });
        e = ((Thread.UncaughtExceptionHandler) (obj));
          goto _L6
    }

    public final void a(StrategyBean strategybean) {
        this;
        JVM INSTR monitorenter ;
        if (strategybean == null)
            break MISSING_BLOCK_LABEL_49;
        if (strategybean.g != g) {
            ag.a("java changed to %b", new Object[] {
                Boolean.valueOf(strategybean.g)
            });
            if (!strategybean.g)
                break MISSING_BLOCK_LABEL_52;
            a();
        }
_L1:
        this;
        JVM INSTR monitorexit ;
        return;
        b();
          goto _L1
        strategybean;
        throw strategybean;
    }

    public final void a(Thread thread, Throwable throwable, boolean flag, String s, byte abyte0[]) {
        if (flag) {
            ag.e("Java Crash Happen cause by %s(%d)", new Object[] {
                thread.getName(), Long.valueOf(thread.getId())
            });
            if (a(thread)) {
                ag.a("this class has handled this exception", new Object[0]);
                if (f != null) {
                    ag.a("call system handler", new Object[0]);
                    f.uncaughtException(thread, throwable);
                } else {
                    ag.e("current process die", new Object[0]);
                    Process.killProcess(Process.myPid());
                    System.exit(1);
                }
            }
        } else {
            ag.e("Java Catch Happen", new Object[0]);
        }
        if (g) goto _L2; else goto _L1
_L1:
        ag.c("Java crash handler is disable. Just return.", new Object[0]);
        if (!flag)
            ag.e("not to shut down return", new Object[0]);
        else
        if (e != null && b(e)) {
            ag.e("sys default last handle start!", new Object[0]);
            e.uncaughtException(thread, throwable);
            ag.e("sys default last handle end!", new Object[0]);
        } else
        if (f != null) {
            ag.e("system handle start!", new Object[0]);
            f.uncaughtException(thread, throwable);
            ag.e("system handle end!", new Object[0]);
        } else {
            ag.e("crashreport last handle start!", new Object[0]);
            ag.e("current process die", new Object[0]);
            Process.killProcess(Process.myPid());
            System.exit(1);
            ag.e("crashreport last handle end!", new Object[0]);
        }
_L8:
        return;
_L2:
        if (c.b()) goto _L4; else goto _L3
_L3:
        ag.e("waiting for remote sync", new Object[0]);
        int k = 0;
_L5:
        boolean flag1 = c.b();
        if (flag1)
            break; /* Loop/switch isn't completed */
        Thread.sleep(500L);
_L6:
        int l;
        l = k + 500;
        k = l;
        if (l < 3000) goto _L5; else goto _L4
_L4:
        if (!c.b())
            ag.d("no remote but still store!", new Object[0]);
        if (c.c().g || !c.b())
            break MISSING_BLOCK_LABEL_653;
        ag.e("crash report was closed by remote , will not upload to Bugly , print local for helpful!", new Object[0]);
        if (flag)
            s = "JAVA_CRASH";
        else
            s = "JAVA_CATCH";
        com.tencent.bugly.crashreport.crash.b.a(s, com.tencent.bugly.proguard.a.b(), d.d, thread, com.tencent.bugly.proguard.a.a(throwable), null);
        InterruptedException interruptedexception;
        if (!flag)
            ag.e("not to shut down return", new Object[0]);
        else
        if (e != null && b(e)) {
            ag.e("sys default last handle start!", new Object[0]);
            e.uncaughtException(thread, throwable);
            ag.e("sys default last handle end!", new Object[0]);
        } else
        if (f != null) {
            ag.e("system handle start!", new Object[0]);
            f.uncaughtException(thread, throwable);
            ag.e("system handle end!", new Object[0]);
        } else {
            ag.e("crashreport last handle start!", new Object[0]);
            ag.e("current process die", new Object[0]);
            Process.killProcess(Process.myPid());
            System.exit(1);
            ag.e("crashreport last handle end!", new Object[0]);
        }
        continue; /* Loop/switch isn't completed */
        interruptedexception;
        interruptedexception.printStackTrace();
          goto _L6
        s;
        if (!ag.a(s))
            s.printStackTrace();
        if (!flag)
            ag.e("not to shut down return", new Object[0]);
        else
        if (e != null && b(e)) {
            ag.e("sys default last handle start!", new Object[0]);
            e.uncaughtException(thread, throwable);
            ag.e("sys default last handle end!", new Object[0]);
        } else
        if (f != null) {
            ag.e("system handle start!", new Object[0]);
            f.uncaughtException(thread, throwable);
            ag.e("system handle end!", new Object[0]);
        } else {
            ag.e("crashreport last handle start!", new Object[0]);
            ag.e("current process die", new Object[0]);
            Process.killProcess(Process.myPid());
            System.exit(1);
            ag.e("crashreport last handle end!", new Object[0]);
        }
        continue; /* Loop/switch isn't completed */
        abyte0 = b(thread, throwable, flag, s, abyte0);
        if (abyte0 != null)
            break MISSING_BLOCK_LABEL_842;
        ag.e("pkg crash datas fail!", new Object[0]);
        if (!flag)
            ag.e("not to shut down return", new Object[0]);
        else
        if (e != null && b(e)) {
            ag.e("sys default last handle start!", new Object[0]);
            e.uncaughtException(thread, throwable);
            ag.e("sys default last handle end!", new Object[0]);
        } else
        if (f != null) {
            ag.e("system handle start!", new Object[0]);
            f.uncaughtException(thread, throwable);
            ag.e("system handle end!", new Object[0]);
        } else {
            ag.e("crashreport last handle start!", new Object[0]);
            ag.e("current process die", new Object[0]);
            Process.killProcess(Process.myPid());
            System.exit(1);
            ag.e("crashreport last handle end!", new Object[0]);
        }
        continue; /* Loop/switch isn't completed */
        if (flag)
            s = "JAVA_CRASH";
        else
            s = "JAVA_CATCH";
        com.tencent.bugly.crashreport.crash.b.a(s, com.tencent.bugly.proguard.a.b(), d.d, thread, com.tencent.bugly.proguard.a.a(throwable), abyte0);
        if (!b.a(abyte0))
            b.a(abyte0, 3000L, flag);
        if (!flag)
            ag.e("not to shut down return", new Object[0]);
        else
        if (e != null && b(e)) {
            ag.e("sys default last handle start!", new Object[0]);
            e.uncaughtException(thread, throwable);
            ag.e("sys default last handle end!", new Object[0]);
        } else
        if (f != null) {
            ag.e("system handle start!", new Object[0]);
            f.uncaughtException(thread, throwable);
            ag.e("system handle end!", new Object[0]);
        } else {
            ag.e("crashreport last handle start!", new Object[0]);
            ag.e("current process die", new Object[0]);
            Process.killProcess(Process.myPid());
            System.exit(1);
            ag.e("crashreport last handle end!", new Object[0]);
        }
        continue; /* Loop/switch isn't completed */
        s;
        if (flag)
            break; /* Loop/switch isn't completed */
        ag.e("not to shut down return", new Object[0]);
        if (true) goto _L8; else goto _L7
_L7:
        if (e != null && b(e)) {
            ag.e("sys default last handle start!", new Object[0]);
            e.uncaughtException(thread, throwable);
            ag.e("sys default last handle end!", new Object[0]);
        } else
        if (f != null) {
            ag.e("system handle start!", new Object[0]);
            f.uncaughtException(thread, throwable);
            ag.e("system handle end!", new Object[0]);
        } else {
            ag.e("crashreport last handle start!", new Object[0]);
            ag.e("current process die", new Object[0]);
            Process.killProcess(Process.myPid());
            System.exit(1);
            ag.e("crashreport last handle end!", new Object[0]);
        }
        throw s;
    }

    public final void b() {
        this;
        JVM INSTR monitorenter ;
        g = false;
        ag.a("close java monitor!", new Object[0]);
        if (Thread.getDefaultUncaughtExceptionHandler().getClass().getName().contains("bugly")) {
            ag.a("Java monitor to unregister: %s", new Object[] {
                toString()
            });
            Thread.setDefaultUncaughtExceptionHandler(e);
            j = j - 1;
        }
        this;
        JVM INSTR monitorexit ;
        return;
        Exception exception;
        exception;
        throw exception;
    }

    public final void uncaughtException(Thread thread, Throwable throwable) {
        a(thread, throwable, true, null, null);
    }

}
