// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.tencent.bugly.proguard;

import android.content.ContentValues;
import android.text.TextUtils;
import com.tencent.bugly.beta.download.DownloadTask;
import com.tencent.bugly.beta.download.b;
import java.util.concurrent.*;

// Referenced classes of package com.tencent.bugly.proguard:
//            ag, l, n

public final class m
    implements b {

    public static final m a = new m();
    public ConcurrentHashMap b;
    private ScheduledExecutorService c;

    public m() {
        b = new ConcurrentHashMap(3);
        c = null;
        ThreadFactory threadfactory = new ThreadFactory() {

            public final Thread newThread(Runnable runnable) {
                runnable = new Thread(runnable);
                runnable.setName("BETA_SDK_DOWNLOAD");
                return runnable;
            }

        }
;
        try {
            c = Executors.newScheduledThreadPool(3, threadfactory);
            if (c.isShutdown()) {
                IllegalArgumentException illegalargumentexception = JVM INSTR new #52  <Class IllegalArgumentException>;
                illegalargumentexception.IllegalArgumentException("ScheduledExecutorService is not available!");
                throw illegalargumentexception;
            }
        }
        catch (Exception exception) {
            ag.a(exception);
        }
    }

    public final DownloadTask a(String s, String s1, String s2, String s3) {
        if (!TextUtils.isEmpty(s)) goto _L2; else goto _L1
_L1:
        ag.e("downloadUrl is null!", new Object[0]);
        s2 = null;
_L4:
        return s2;
_L2:
        if (TextUtils.isEmpty(s1)) {
            ag.e("saveDir is null!", new Object[0]);
            s2 = null;
        } else
        if (b.get(s) != null) {
            s2 = (DownloadTask)b.get(s);
        } else {
            s2 = l.a.a(s);
            n n1;
            if (s2 != null && s2.get("_dUrl") != null && s2.getAsString("_sFile") != null && s2.getAsLong("_sLen") != null && s2.getAsLong("_tLen") != null && s2.getAsString("_MD5") != null) {
                n1 = new n((String)s2.get("_dUrl"), s2.getAsString("_sFile"), s2.getAsLong("_sLen").longValue(), s2.getAsLong("_tLen").longValue(), s2.getAsString("_MD5"));
                if (s2.getAsLong("_DLTIME") != null)
                    n1.h = s2.getAsLong("_DLTIME").longValue();
            } else {
                n1 = null;
            }
            s2 = n1;
            if (n1 == null)
                s2 = new n(s, s1, null, s3);
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public final boolean a(Runnable runnable) {
        boolean flag = false;
        this;
        JVM INSTR monitorenter ;
        if (c != null && !c.isShutdown()) goto _L2; else goto _L1
_L1:
        ag.d("async handler was closed , should not post task!", new Object[0]);
_L3:
        this;
        JVM INSTR monitorexit ;
        return flag;
_L2:
        if (runnable != null)
            break MISSING_BLOCK_LABEL_59;
        ag.d("async task = null", new Object[0]);
          goto _L3
        runnable;
        throw runnable;
        ag.d("task start %s", new Object[] {
            runnable.getClass().getName()
        });
        c.execute(runnable);
        flag = true;
          goto _L3
    }

}
