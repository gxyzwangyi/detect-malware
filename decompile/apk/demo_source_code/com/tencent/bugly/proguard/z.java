// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.tencent.bugly.proguard;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import com.tencent.bugly.crashreport.common.info.a;
import com.tencent.bugly.crashreport.common.info.b;
import java.io.File;
import java.util.Iterator;
import java.util.List;

// Referenced classes of package com.tencent.bugly.proguard:
//            ag

public final class z extends SQLiteOpenHelper {

    private static int a = 13;
    private Context b;
    private List c;

    public z(Context context, List list) {
        StringBuilder stringbuilder = new StringBuilder("bugly_db_");
        com.tencent.bugly.crashreport.common.info.a.a(context).getClass();
        super(context, stringbuilder.toString(), null, a);
        b = context;
        c = list;
    }

    private boolean a(SQLiteDatabase sqlitedatabase) {
        boolean flag1 = true;
        this;
        JVM INSTR monitorenter ;
        String as[] = new String[3];
        as[0] = "t_lr";
        as[1] = "t_ui";
        as[2] = "t_pf";
        int j = as.length;
        int i = 0;
_L2:
        boolean flag;
        String s;
        flag = flag1;
        if (i >= j)
            break; /* Loop/switch isn't completed */
        s = as[i];
        StringBuilder stringbuilder = JVM INSTR new #20  <Class StringBuilder>;
        stringbuilder.StringBuilder("DROP TABLE IF EXISTS ");
        sqlitedatabase.execSQL(stringbuilder.append(s).toString(), new String[0]);
        i++;
        if (true) goto _L2; else goto _L1
        sqlitedatabase;
        if (!com.tencent.bugly.proguard.ag.b(sqlitedatabase))
            sqlitedatabase.printStackTrace();
        flag = false;
_L1:
        this;
        JVM INSTR monitorexit ;
        return flag;
        sqlitedatabase;
        throw sqlitedatabase;
    }

    public final SQLiteDatabase getReadableDatabase() {
        int i = 0;
        this;
        JVM INSTR monitorenter ;
        Object obj = null;
_L1:
        if (obj != null || i >= 5)
            break MISSING_BLOCK_LABEL_84;
        i++;
        SQLiteDatabase sqlitedatabase = super.getReadableDatabase();
        obj = sqlitedatabase;
          goto _L1
        Object obj1;
        obj1;
        ag.d("try db count %d", new Object[] {
            Integer.valueOf(i)
        });
        if (i != 5)
            break MISSING_BLOCK_LABEL_61;
        ag.e("get db fail!", new Object[0]);
        Thread.sleep(200L);
          goto _L1
        obj1;
        ((InterruptedException) (obj1)).printStackTrace();
          goto _L1
        obj;
        throw obj;
        return ((SQLiteDatabase) (obj));
    }

    public final SQLiteDatabase getWritableDatabase() {
        int i = 0;
        this;
        JVM INSTR monitorenter ;
        Object obj = null;
_L1:
        if (obj != null || i >= 5)
            break MISSING_BLOCK_LABEL_83;
        i++;
        SQLiteDatabase sqlitedatabase = super.getWritableDatabase();
        obj = sqlitedatabase;
          goto _L1
        Object obj1;
        obj1;
        ag.d("try db %d", new Object[] {
            Integer.valueOf(i)
        });
        if (i != 5)
            break MISSING_BLOCK_LABEL_61;
        ag.e("get db fail!", new Object[0]);
        Thread.sleep(200L);
          goto _L1
        obj1;
        ((InterruptedException) (obj1)).printStackTrace();
          goto _L1
        obj;
        throw obj;
        if (obj != null)
            break MISSING_BLOCK_LABEL_97;
        ag.d("db error delay error record 1min", new Object[0]);
        this;
        JVM INSTR monitorexit ;
        return ((SQLiteDatabase) (obj));
    }

    public final void onCreate(SQLiteDatabase sqlitedatabase) {
        this;
        JVM INSTR monitorenter ;
        StringBuilder stringbuilder = JVM INSTR new #20  <Class StringBuilder>;
        stringbuilder.StringBuilder();
        stringbuilder.setLength(0);
        stringbuilder.append(" CREATE TABLE IF NOT EXISTS t_ui").append(" ( _id").append(" INTEGER PRIMARY KEY").append(" , _tm").append(" int").append(" , _ut").append(" int").append(" , _tp").append(" int").append(" , _dt").append(" blob").append(" , _pc").append(" text").append(" ) ");
        ag.c(stringbuilder.toString(), new Object[0]);
        sqlitedatabase.execSQL(stringbuilder.toString(), new String[0]);
        stringbuilder.setLength(0);
        stringbuilder.append(" CREATE TABLE IF NOT EXISTS t_lr").append(" ( _id").append(" INTEGER PRIMARY KEY").append(" , _tp").append(" int").append(" , _tm").append(" int").append(" , _pc").append(" text").append(" , _th").append(" text").append(" , _dt").append(" blob").append(" ) ");
        ag.c(stringbuilder.toString(), new Object[0]);
        sqlitedatabase.execSQL(stringbuilder.toString(), new String[0]);
        stringbuilder.setLength(0);
        stringbuilder.append(" CREATE TABLE IF NOT EXISTS t_pf").append(" ( _id").append(" integer").append(" , _tp").append(" text").append(" , _tm").append(" int").append(" , _dt").append(" blob").append(",primary key(_id").append(",_tp").append(" )) ");
        ag.c(stringbuilder.toString(), new Object[0]);
        sqlitedatabase.execSQL(stringbuilder.toString(), new String[0]);
        stringbuilder.setLength(0);
        stringbuilder.append(" CREATE TABLE IF NOT EXISTS t_cr").append(" ( _id").append(" INTEGER PRIMARY KEY").append(" , _tm").append(" int").append(" , _s1").append(" text").append(" , _up").append(" int").append(" , _me").append(" int").append(" , _uc").append(" int").append(" , _dt").append(" blob").append(" ) ");
        ag.c(stringbuilder.toString(), new Object[0]);
        sqlitedatabase.execSQL(stringbuilder.toString(), new String[0]);
        stringbuilder.setLength(0);
        stringbuilder.append(" CREATE TABLE IF NOT EXISTS dl_1002").append(" (_id").append(" integer primary key autoincrement, _dUrl").append(" varchar(100), _sFile").append(" varchar(100), _sLen").append(" INTEGER, _tLen").append(" INTEGER, _MD5").append(" varchar(100), _DLTIME").append(" INTEGER)");
        ag.c(stringbuilder.toString(), new Object[0]);
        sqlitedatabase.execSQL(stringbuilder.toString(), new String[0]);
        stringbuilder.setLength(0);
        stringbuilder.append("CREATE TABLE IF NOT EXISTS ge_1002").append(" (_id").append(" integer primary key autoincrement, _time").append(" INTEGER, _datas").append(" blob)");
        ag.c(stringbuilder.toString(), new Object[0]);
        sqlitedatabase.execSQL(stringbuilder.toString(), new String[0]);
        stringbuilder.setLength(0);
        stringbuilder.append(" CREATE TABLE IF NOT EXISTS st_1002").append(" ( _id").append(" integer").append(" , _tp").append(" text").append(" , _tm").append(" int").append(" , _dt").append(" blob").append(",primary key(_id").append(",_tp").append(" )) ");
        ag.c(stringbuilder.toString(), new Object[0]);
        sqlitedatabase.execSQL(stringbuilder.toString(), new String[0]);
_L4:
        Object obj = c;
        if (obj != null) goto _L2; else goto _L1
_L1:
        this;
        JVM INSTR monitorexit ;
        return;
        Throwable throwable;
        throwable;
        if (com.tencent.bugly.proguard.ag.b(throwable)) goto _L4; else goto _L3
_L3:
        throwable.printStackTrace();
          goto _L4
        sqlitedatabase;
        throw sqlitedatabase;
_L2:
        throwable = c.iterator();
_L6:
        if (!throwable.hasNext()) goto _L1; else goto _L5
_L5:
        com.tencent.bugly.a a1 = (com.tencent.bugly.a)throwable.next();
        a1.onDbCreate(sqlitedatabase);
          goto _L6
        Throwable throwable1;
        throwable1;
        if (com.tencent.bugly.proguard.ag.b(throwable1)) goto _L6; else goto _L7
_L7:
        throwable1.printStackTrace();
        if (true) goto _L6; else goto _L8
_L8:
          goto _L1
    }

    public final void onDowngrade(SQLiteDatabase sqlitedatabase, int i, int j) {
        this;
        JVM INSTR monitorenter ;
        if (com.tencent.bugly.crashreport.common.info.b.c() < 11) goto _L2; else goto _L1
_L1:
        Iterator iterator;
        ag.d("drowngrade %d to %d drop tables!}", new Object[] {
            Integer.valueOf(i), Integer.valueOf(j)
        });
        if (c == null)
            break MISSING_BLOCK_LABEL_108;
        iterator = c.iterator();
_L3:
        com.tencent.bugly.a a1;
        if (!iterator.hasNext())
            break MISSING_BLOCK_LABEL_108;
        a1 = (com.tencent.bugly.a)iterator.next();
        a1.onDbDowngrade(sqlitedatabase, i, j);
          goto _L3
        Throwable throwable;
        throwable;
        if (com.tencent.bugly.proguard.ag.b(throwable)) goto _L3; else goto _L4
_L4:
        throwable.printStackTrace();
          goto _L3
        sqlitedatabase;
        throw sqlitedatabase;
        if (!a(sqlitedatabase)) goto _L6; else goto _L5
_L5:
        onCreate(sqlitedatabase);
_L2:
        this;
        JVM INSTR monitorexit ;
        return;
_L6:
        ag.d("drop fail delete db", new Object[0]);
        sqlitedatabase = b.getDatabasePath("bugly_db");
        if (sqlitedatabase == null) goto _L2; else goto _L7
_L7:
        if (!sqlitedatabase.canWrite()) goto _L2; else goto _L8
_L8:
        sqlitedatabase.delete();
          goto _L2
    }

    public final void onUpgrade(SQLiteDatabase sqlitedatabase, int i, int j) {
        this;
        JVM INSTR monitorenter ;
        Iterator iterator;
        ag.d("upgrade %d to %d , drop tables!", new Object[] {
            Integer.valueOf(i), Integer.valueOf(j)
        });
        if (c == null)
            break MISSING_BLOCK_LABEL_101;
        iterator = c.iterator();
_L1:
        com.tencent.bugly.a a1;
        if (!iterator.hasNext())
            break MISSING_BLOCK_LABEL_101;
        a1 = (com.tencent.bugly.a)iterator.next();
        a1.onDbUpgrade(sqlitedatabase, i, j);
          goto _L1
        Throwable throwable;
        throwable;
        if (com.tencent.bugly.proguard.ag.b(throwable)) goto _L1; else goto _L2
_L2:
        throwable.printStackTrace();
          goto _L1
        sqlitedatabase;
        throw sqlitedatabase;
        if (!a(sqlitedatabase)) goto _L4; else goto _L3
_L3:
        onCreate(sqlitedatabase);
_L6:
        this;
        JVM INSTR monitorexit ;
        return;
_L4:
        ag.d("drop fail delete db", new Object[0]);
        sqlitedatabase = b.getDatabasePath("bugly_db");
        if (sqlitedatabase == null) goto _L6; else goto _L5
_L5:
        if (!sqlitedatabase.canWrite()) goto _L6; else goto _L7
_L7:
        sqlitedatabase.delete();
          goto _L6
    }

}
