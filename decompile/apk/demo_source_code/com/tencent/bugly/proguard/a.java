// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.tencent.bugly.proguard;

import android.app.ActivityManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.PaintFlagsDrawFilter;
import android.graphics.PorterDuffXfermode;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Process;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import com.tencent.bugly.beta.global.d;
import com.tencent.bugly.crashreport.biz.UserInfoBean;
import com.tencent.bugly.crashreport.common.info.AppInfo;
import com.tencent.bugly.crashreport.common.info.PlugInBean;
import com.tencent.bugly.crashreport.common.info.b;
import com.tencent.bugly.crashreport.common.strategy.StrategyBean;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.security.KeyFactory;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.X509EncodedKeySpec;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

// Referenced classes of package com.tencent.bugly.proguard:
//            h, ag, l, aw, 
//            ad, d, ax, ba, 
//            bb, j, i, ak, 
//            al, ap, ao, aq, 
//            k

public class a {

    protected HashMap a;
    protected String b;
    h c;
    private HashMap d;

    a() {
        a = new HashMap();
        new HashMap();
        d = new HashMap();
        b = "GBK";
        c = new h();
    }

    public static int a(Context context) {
        NetworkInfo networkinfo = ((ConnectivityManager)context.getSystemService("connectivity")).getActiveNetworkInfo();
        if (networkinfo != null) goto _L2; else goto _L1
_L1:
        int i1 = 0;
_L4:
        return i1;
_L2:
        if (networkinfo.getType() != 1)
            break; /* Loop/switch isn't completed */
        i1 = 1;
        if (true) goto _L4; else goto _L3
_L3:
        if (networkinfo.getType() != 0) goto _L6; else goto _L5
_L5:
        context = (TelephonyManager)context.getSystemService("phone");
        if (context == null) goto _L6; else goto _L7
_L7:
        i1 = context.getNetworkType();
        switch (i1) {
        default:
            i1 = 0;
            break;

        case 1: // '\001'
        case 2: // '\002'
        case 4: // '\004'
        case 7: // '\007'
        case 11: // '\013'
            i1 = 2;
            break;

        case 3: // '\003'
        case 5: // '\005'
        case 6: // '\006'
        case 8: // '\b'
        case 9: // '\t'
        case 10: // '\n'
        case 12: // '\f'
        case 14: // '\016'
        case 15: // '\017'
            i1 = 3;
            break;

        case 13: // '\r'
            i1 = 4;
            break;
        }
        continue; /* Loop/switch isn't completed */
        context;
        if (!ag.a(context))
            context.printStackTrace();
_L6:
        i1 = 0;
        if (true) goto _L4; else goto _L8
_L8:
    }

    public static transient Bitmap a(Context context, int i1, Object aobj[]) {
        if (aobj != null && aobj.length > 0 && (i1 == 0 || i1 == 1)) goto _L2; else goto _L1
_L1:
        context = null;
_L3:
        return context;
_L2:
        if (i1 != 0)
            break MISSING_BLOCK_LABEL_84;
        if (!TextUtils.isEmpty((String)aobj[0]))
            break MISSING_BLOCK_LABEL_43;
        context = null;
          goto _L3
        Object obj;
        obj = JVM INSTR new #83  <Class File>;
        ((File) (obj)).File((String)aobj[0]);
        if (((File) (obj)).exists() && ((File) (obj)).length() <= 0x100000L)
            break MISSING_BLOCK_LABEL_449;
        context = null;
          goto _L3
        if (i1 != 1) goto _L5; else goto _L4
_L4:
        int j1 = ((Integer)aobj[0]).intValue();
        aobj = null;
_L25:
        int j2 = d.D.A.widthPixels;
        obj = null;
        if (j2 <= 0) goto _L7; else goto _L6
_L6:
        obj = JVM INSTR new #119 <Class android.graphics.BitmapFactory$Options>;
        ((android.graphics.BitmapFactory.Options) (obj)).android.graphics.BitmapFactory.Options();
        obj.inJustDecodeBounds = true;
        if (i1 != 0) goto _L9; else goto _L8
_L8:
        BitmapFactory.decodeFile(((File) (aobj)).getPath(), ((android.graphics.BitmapFactory.Options) (obj)));
_L20:
        double d1;
        double d2;
        int i2;
        int k2;
        k2 = (int)(((float)((android.graphics.BitmapFactory.Options) (obj)).outHeight / (float)((android.graphics.BitmapFactory.Options) (obj)).outWidth) * (float)j2);
        i2 = Math.min(j2, k2);
        d1 = ((android.graphics.BitmapFactory.Options) (obj)).outWidth;
        d2 = ((android.graphics.BitmapFactory.Options) (obj)).outHeight;
        if (j2 * k2 != -1) goto _L11; else goto _L10
_L10:
        int k1 = 1;
_L21:
        if (i2 != -1) goto _L13; else goto _L12
_L12:
        int l1 = 128;
_L22:
        double d3;
        double d4;
        if (j2 * k2 == -1 && i2 == -1)
            l1 = 1;
        else
        if (i2 == -1)
            l1 = k1;
        if (l1 > 8) goto _L15; else goto _L14
_L14:
        k1 = 1;
_L18:
        i2 = k1;
        if (k1 >= l1) goto _L17; else goto _L16
_L16:
        k1 <<= 1;
          goto _L18
_L9:
        if (i1 != 1) goto _L20; else goto _L19
_L19:
        BitmapFactory.decodeResource(context.getResources(), j1, ((android.graphics.BitmapFactory.Options) (obj)));
          goto _L20
        context;
        context.printStackTrace();
_L24:
        context = null;
          goto _L3
_L11:
        d4 = (d1 * d2) / (double)j2;
        d3 = k2;
        k1 = (int)Math.ceil(Math.sqrt(d4 * d3));
          goto _L21
_L13:
        l1 = (int)Math.min(Math.floor(d1 / (double)i2), Math.floor(d2 / (double)i2));
          goto _L22
_L15:
        i2 = (l1 + 7) / 8 << 3;
_L17:
        obj.inSampleSize = i2;
        obj.inJustDecodeBounds = false;
        obj.inInputShareable = true;
        obj.inPurgeable = true;
_L7:
        if (i1 != 0)
            continue; /* Loop/switch isn't completed */
        context = BitmapFactory.decodeFile(((File) (aobj)).getPath(), ((android.graphics.BitmapFactory.Options) (obj)));
          goto _L3
        if (i1 != 1) goto _L24; else goto _L23
_L23:
        context = BitmapFactory.decodeResource(context.getResources(), j1, ((android.graphics.BitmapFactory.Options) (obj)));
          goto _L3
_L5:
        j1 = 0;
        aobj = null;
          goto _L25
        j1 = 0;
        aobj = ((Object []) (obj));
          goto _L25
    }

    public static Bitmap a(Drawable drawable) {
        if (!(drawable instanceof BitmapDrawable)) goto _L2; else goto _L1
_L1:
        Object obj = (BitmapDrawable)drawable;
        if (((BitmapDrawable) (obj)).getBitmap() == null) goto _L2; else goto _L3
_L3:
        obj = ((BitmapDrawable) (obj)).getBitmap();
_L5:
        return ((Bitmap) (obj));
_L2:
        Canvas canvas;
        if (drawable.getIntrinsicWidth() <= 0 || drawable.getIntrinsicHeight() <= 0)
            obj = Bitmap.createBitmap(1, 1, android.graphics.Bitmap.Config.ARGB_8888);
        else
            obj = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(), android.graphics.Bitmap.Config.ARGB_8888);
        canvas = new Canvas(((Bitmap) (obj)));
        drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
        drawable.draw(canvas);
        if (true) goto _L5; else goto _L4
_L4:
    }

    public static BitmapDrawable a(Bitmap bitmap, int i1, int j1, float f) {
        int k1 = (int)((float)(d.D.A.widthPixels * d.D.A.heightPixels) * 0.8F);
        if (bitmap == null || i1 * j1 > k1) {
            bitmap = null;
        } else {
            Bitmap bitmap1 = Bitmap.createBitmap(i1, j1, android.graphics.Bitmap.Config.ARGB_8888);
            Canvas canvas = new Canvas(bitmap1);
            Paint paint = new Paint();
            Rect rect = new Rect(0, 0, i1, j1);
            RectF rectf = new RectF(rect);
            canvas.setDrawFilter(new PaintFlagsDrawFilter(0, 3));
            canvas.drawARGB(0, 0, 0, 0);
            paint.setColor(0xff000000);
            canvas.drawRoundRect(rectf, f, f, paint);
            canvas.drawRect(0.0F, f, i1, j1, paint);
            paint.setXfermode(new PorterDuffXfermode(android.graphics.PorterDuff.Mode.SRC_IN));
            canvas.drawBitmap(bitmap, new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight()), rect, paint);
            bitmap = new BitmapDrawable(bitmap1);
        }
        return bitmap;
    }

    public static Parcelable a(String s, android.os.Parcelable.Creator creator) {
        com/tencent/bugly/proguard/a;
        JVM INSTR monitorenter ;
        Map map = l.a.c();
        if (map != null) goto _L2; else goto _L1
_L1:
        s = null;
_L4:
        com/tencent/bugly/proguard/a;
        JVM INSTR monitorexit ;
        return s;
_L2:
        s = (byte[])map.get(s);
        if (s == null)
            break MISSING_BLOCK_LABEL_41;
        if (s.length > 0)
            break MISSING_BLOCK_LABEL_46;
        s = null;
        continue; /* Loop/switch isn't completed */
        s = (Parcelable)a(((byte []) (s)), creator);
        if (true) goto _L4; else goto _L3
_L3:
        s;
        throw s;
    }

    public static aw a(Context context, int i1, byte abyte0[]) {
        Object obj1;
        StrategyBean strategybean;
        com.tencent.bugly.crashreport.common.info.a a1;
        obj1 = null;
        a1 = com.tencent.bugly.crashreport.common.info.a.a();
        strategybean = com.tencent.bugly.crashreport.common.strategy.a.a().c();
        if (a1 != null && strategybean != null) goto _L2; else goto _L1
_L1:
        ag.e("illigle access to create req pkg!", new Object[0]);
        context = obj1;
_L5:
        return context;
_L2:
        aw aw1;
        aw1 = JVM INSTR new #334 <Class aw>;
        aw1.aw();
        a1;
        JVM INSTR monitorenter ;
        aw1.a = 1;
        aw1.b = a1.e();
        aw1.c = a1.c;
        aw1.d = a1.j;
        aw1.e = a1.k;
        a1.getClass();
        aw1.f = "2.3.1";
        aw1.g = i1;
        if (abyte0 != null)
            break MISSING_BLOCK_LABEL_789;
        Object obj = "".getBytes();
_L3:
        aw1.h = ((byte []) (obj));
        aw1.i = a1.g;
        aw1.j = a1.h;
        obj = JVM INSTR new #19  <Class HashMap>;
        ((HashMap) (obj)).HashMap();
        aw1.k = ((Map) (obj));
        aw1.l = a1.d();
        aw1.m = strategybean.p;
        aw1.o = a1.g();
        aw1.p = com.tencent.bugly.crashreport.common.info.b.e(context);
        aw1.q = System.currentTimeMillis();
        context = JVM INSTR new #421 <Class StringBuilder>;
        context.StringBuilder();
        aw1.r = context.append(a1.j()).toString();
        aw1.s = a1.i();
        context = JVM INSTR new #421 <Class StringBuilder>;
        context.StringBuilder();
        aw1.t = context.append(a1.l()).toString();
        aw1.u = a1.k();
        context = JVM INSTR new #421 <Class StringBuilder>;
        context.StringBuilder();
        aw1.v = context.append(a1.m()).toString();
        aw1.w = aw1.p;
        a1.getClass();
        aw1.n = "com.tencent.bugly";
        context = aw1.k;
        obj = JVM INSTR new #421 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        context.put("A26", ((StringBuilder) (obj)).append(a1.x()).toString());
        context = aw1.k;
        obj = JVM INSTR new #421 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        context.put("F11", ((StringBuilder) (obj)).append(a1.z).toString());
        context = aw1.k;
        obj = JVM INSTR new #421 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        context.put("F12", ((StringBuilder) (obj)).append(a1.y).toString());
        context = aw1.k;
        obj = JVM INSTR new #421 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        context.put("G1", ((StringBuilder) (obj)).append(a1.t()).toString());
        context = aw1.k;
        obj = JVM INSTR new #421 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        context.put("G2", ((StringBuilder) (obj)).append(a1.I()).toString());
        obj = aw1.k;
        context = JVM INSTR new #421 <Class StringBuilder>;
        context.StringBuilder();
        ((Map) (obj)).put("G3", context.append(a1.J()).toString());
        obj = aw1.k;
        context = JVM INSTR new #421 <Class StringBuilder>;
        context.StringBuilder();
        ((Map) (obj)).put("G4", context.append(a1.K()).toString());
        context = aw1.k;
        obj = JVM INSTR new #421 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        context.put("G5", ((StringBuilder) (obj)).append(a1.L()).toString());
        context = aw1.k;
        obj = JVM INSTR new #421 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        context.put("G6", ((StringBuilder) (obj)).append(a1.M()).toString());
        context = aw1.k;
        obj = JVM INSTR new #421 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        context.put("G7", ((StringBuilder) (obj)).append(Long.toString(a1.N())).toString());
        a1;
        JVM INSTR monitorexit ;
        try {
            context = ad.a();
        }
        // Misplaced declaration of an exception variable
        catch (byte abyte0[]) {
            context = obj1;
            if (!com.tencent.bugly.proguard.ag.b(abyte0)) {
                abyte0.printStackTrace();
                context = obj1;
            }
            continue; /* Loop/switch isn't completed */
        }
        if (context == null)
            break MISSING_BLOCK_LABEL_800;
        if (((ad) (context)).a || abyte0 == null)
            break MISSING_BLOCK_LABEL_800;
        aw1.h = a(aw1.h, 2, 1, strategybean.u);
        if (aw1.h != null)
            break MISSING_BLOCK_LABEL_800;
        ag.e("reqPkg sbuffer error!", new Object[0]);
        context = obj1;
        continue; /* Loop/switch isn't completed */
        obj = abyte0;
          goto _L3
        context;
        a1;
        JVM INSTR monitorexit ;
        throw context;
        context = aw1;
        if (true) goto _L5; else goto _L4
_L4:
    }

    public static ax a(byte abyte0[], boolean flag) {
        if (abyte0 == null) goto _L2; else goto _L1
_L1:
        com.tencent.bugly.proguard.d d1 = JVM INSTR new #540 <Class com.tencent.bugly.proguard.d>;
        d1.com.tencent.bugly.proguard.d();
        d1.d();
        d1.a("utf-8");
        d1.a(abyte0);
        abyte0 = JVM INSTR new #552 <Class ax>;
        abyte0.ax();
        abyte0 = ((byte []) (d1.b("detail", abyte0)));
        if (!com/tencent/bugly/proguard/ax.isInstance(abyte0)) goto _L4; else goto _L3
_L3:
        ax ax1 = (ax)com/tencent/bugly/proguard/ax.cast(abyte0);
_L7:
        abyte0 = ax1;
        if (flag)
            break MISSING_BLOCK_LABEL_157;
        abyte0 = ax1;
        if (ax1 == null)
            break MISSING_BLOCK_LABEL_157;
        abyte0 = ax1;
        if (ax1.c == null)
            break MISSING_BLOCK_LABEL_157;
        abyte0 = ax1;
        if (ax1.c.length <= 0)
            break MISSING_BLOCK_LABEL_157;
        ag.c("resp buf %d", new Object[] {
            Integer.valueOf(ax1.c.length)
        });
        ax1.c = b(ax1.c, 2, 1, StrategyBean.d);
        abyte0 = ax1;
        if (ax1.c != null)
            break MISSING_BLOCK_LABEL_157;
        ag.e("resp sbuffer error!", new Object[0]);
        abyte0 = null;
_L5:
        return abyte0;
        abyte0;
        if (!com.tencent.bugly.proguard.ag.b(abyte0))
            abyte0.printStackTrace();
_L2:
        abyte0 = null;
        if (true) goto _L5; else goto _L4
_L4:
        ax1 = null;
        if (true) goto _L7; else goto _L6
_L6:
    }

    public static ba a(UserInfoBean userinfobean) {
        if (userinfobean != null) goto _L2; else goto _L1
_L1:
        userinfobean = null;
_L13:
        return userinfobean;
_L2:
        ba ba1;
        ba1 = new ba();
        ba1.a = userinfobean.e;
        ba1.e = userinfobean.j;
        ba1.d = userinfobean.c;
        ba1.c = userinfobean.d;
        ba1.g = com.tencent.bugly.crashreport.common.info.a.a().h();
        boolean flag;
        Iterator iterator;
        java.util.Map.Entry entry;
        if (userinfobean.o == 1)
            flag = true;
        else
            flag = false;
        ba1.h = flag;
        userinfobean.b;
        JVM INSTR tableswitch 1 4: default 108
    //                   1 325
    //                   2 341
    //                   3 333
    //                   4 349;
           goto _L3 _L4 _L5 _L6 _L7
_L3:
        if (userinfobean.b < 10 || userinfobean.b >= 20) goto _L9; else goto _L8
_L8:
        ba1.b = (byte)userinfobean.b;
_L11:
        ba1.f = new HashMap();
        if (userinfobean.p >= 0)
            ba1.f.put("C01", (new StringBuilder()).append(userinfobean.p).toString());
        if (userinfobean.q >= 0)
            ba1.f.put("C02", (new StringBuilder()).append(userinfobean.q).toString());
        if (userinfobean.r != null && userinfobean.r.size() > 0)
            for (iterator = userinfobean.r.entrySet().iterator(); iterator.hasNext(); ba1.f.put((new StringBuilder("C03_")).append((String)entry.getKey()).toString(), entry.getValue()))
                entry = (java.util.Map.Entry)iterator.next();

        break; /* Loop/switch isn't completed */
_L4:
        ba1.b = 1;
        continue; /* Loop/switch isn't completed */
_L6:
        ba1.b = 2;
        continue; /* Loop/switch isn't completed */
_L5:
        ba1.b = 4;
        continue; /* Loop/switch isn't completed */
_L7:
        ba1.b = 3;
        if (true) goto _L11; else goto _L10
_L9:
        ag.e("unknown uinfo type %d ", new Object[] {
            Integer.valueOf(userinfobean.b)
        });
        userinfobean = null;
        continue; /* Loop/switch isn't completed */
_L10:
        if (userinfobean.s != null && userinfobean.s.size() > 0) {
            java.util.Map.Entry entry1;
            for (Iterator iterator1 = userinfobean.s.entrySet().iterator(); iterator1.hasNext(); ba1.f.put((new StringBuilder("C04_")).append((String)entry1.getKey()).toString(), entry1.getValue()))
                entry1 = (java.util.Map.Entry)iterator1.next();

        }
        Map map = ba1.f;
        StringBuilder stringbuilder = new StringBuilder();
        boolean flag1;
        if (!userinfobean.l)
            flag1 = true;
        else
            flag1 = false;
        map.put("A36", stringbuilder.append(flag1).toString());
        ba1.f.put("F02", (new StringBuilder()).append(userinfobean.g).toString());
        ba1.f.put("F03", (new StringBuilder()).append(userinfobean.h).toString());
        ba1.f.put("F04", (new StringBuilder()).append(userinfobean.j).toString());
        ba1.f.put("F05", (new StringBuilder()).append(userinfobean.i).toString());
        ba1.f.put("F06", (new StringBuilder()).append(userinfobean.m).toString());
        ba1.f.put("F10", (new StringBuilder()).append(userinfobean.k).toString());
        ag.c("summary type %d vm:%d", new Object[] {
            Byte.valueOf(ba1.b), Integer.valueOf(ba1.f.size())
        });
        userinfobean = ba1;
        if (true) goto _L13; else goto _L12
_L12:
    }

    public static bb a(List list, int i1) {
        com.tencent.bugly.crashreport.common.info.a a1;
        if (list == null || list.size() == 0) {
            list = null;
        } else {
label0:
            {
                a1 = com.tencent.bugly.crashreport.common.info.a.a();
                if (a1 != null)
                    break label0;
                list = null;
            }
        }
_L4:
        return list;
        bb bb1;
        a1.s();
        bb1 = new bb();
        bb1.b = a1.d;
        bb1.c = a1.g();
        ArrayList arraylist = new ArrayList();
        list = list.iterator();
        do {
            if (!list.hasNext())
                break;
            ba ba1 = a((UserInfoBean)list.next());
            if (ba1 != null)
                arraylist.add(ba1);
        } while (true);
        bb1.d = arraylist;
        bb1.e = new HashMap();
        bb1.e.put("A7", (new StringBuilder()).append(a1.f).toString());
        bb1.e.put("A6", (new StringBuilder()).append(a1.r()).toString());
        bb1.e.put("A5", (new StringBuilder()).append(a1.q()).toString());
        bb1.e.put("A2", (new StringBuilder()).append(a1.o()).toString());
        bb1.e.put("A1", (new StringBuilder()).append(a1.o()).toString());
        bb1.e.put("A24", (new StringBuilder()).append(a1.h).toString());
        bb1.e.put("A17", (new StringBuilder()).append(a1.p()).toString());
        bb1.e.put("A15", (new StringBuilder()).append(a1.v()).toString());
        bb1.e.put("A13", (new StringBuilder()).append(a1.w()).toString());
        bb1.e.put("F08", (new StringBuilder()).append(a1.v).toString());
        bb1.e.put("F09", (new StringBuilder()).append(a1.w).toString());
        list = a1.C();
        if (list != null && list.size() > 0) {
            java.util.Map.Entry entry;
            for (list = list.entrySet().iterator(); list.hasNext(); bb1.e.put((new StringBuilder("C04_")).append((String)entry.getKey()).toString(), entry.getValue()))
                entry = (java.util.Map.Entry)list.next();

        }
        i1;
        JVM INSTR tableswitch 1 2: default 592
    //                   1 615
    //                   2 625;
           goto _L1 _L2 _L3
_L1:
        ag.e("unknown up type %d ", new Object[] {
            Integer.valueOf(i1)
        });
        list = null;
          goto _L4
_L2:
        bb1.a = 1;
_L5:
        list = bb1;
          goto _L4
_L3:
        bb1.a = 2;
          goto _L5
    }

    public static j a(byte abyte0[], Class class1) {
        if (abyte0 != null && abyte0.length > 0) goto _L2; else goto _L1
_L1:
        abyte0 = null;
_L4:
        return abyte0;
_L2:
        class1 = (j)class1.newInstance();
        h h1 = JVM INSTR new #30  <Class h>;
        h1.h(abyte0);
        h1.a("utf-8");
        class1.a(h1);
        abyte0 = class1;
        continue; /* Loop/switch isn't completed */
        abyte0;
        if (!com.tencent.bugly.proguard.ag.b(abyte0))
            abyte0.printStackTrace();
        abyte0 = null;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static BufferedReader a(String s, String s1) {
        Object obj = null;
        if (s != null) goto _L2; else goto _L1
_L1:
        s = obj;
_L4:
        return s;
_L2:
        File file;
        file = JVM INSTR new #83  <Class File>;
        file.File(s, s1);
        s = obj;
        if (file.exists()) {
            s = obj;
            try {
                if (file.canRead())
                    s = b(file);
            }
            // Misplaced declaration of an exception variable
            catch (String s) {
                ag.a(s);
                s = obj;
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static Object a(String s, String s1, Object obj, Class aclass[], Object aobj[]) {
        obj = null;
        try {
            s = Class.forName(s).getDeclaredMethod(s1, aclass);
            s.setAccessible(true);
            s = ((String) (s.invoke(null, aobj)));
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            s = ((String) (obj));
        }
        return s;
    }

    public static Object a(byte abyte0[], android.os.Parcelable.Creator creator) {
        Parcel parcel;
        parcel = Parcel.obtain();
        parcel.unmarshall(abyte0, 0, abyte0.length);
        parcel.setDataPosition(0);
        creator = ((android.os.Parcelable.Creator) (creator.createFromParcel(parcel)));
        abyte0 = creator;
        if (parcel != null) {
            parcel.recycle();
            abyte0 = creator;
        }
_L2:
        return abyte0;
        abyte0;
        abyte0.printStackTrace();
        if (parcel != null)
            parcel.recycle();
        abyte0 = null;
        if (true) goto _L2; else goto _L1
_L1:
        abyte0;
        if (parcel != null)
            parcel.recycle();
        throw abyte0;
    }

    public static String a(Context context, int i1, String s) {
        if (AppInfo.a(context, "android.permission.READ_LOGS")) goto _L2; else goto _L1
_L1:
        com.tencent.bugly.proguard.ag.d("no read_log permission!", new Object[0]);
        s = null;
_L9:
        return s;
_L2:
        Object obj;
        StringBuilder stringbuilder;
        StringBuilder stringbuilder1;
        if (s == null) {
            context = new String[4];
            context[0] = "logcat";
            context[1] = "-d";
            context[2] = "-v";
            context[3] = "threadtime";
        } else {
            context = new String[6];
            context[0] = "logcat";
            context[1] = "-d";
            context[2] = "-v";
            context[3] = "threadtime";
            context[4] = "-s";
            context[5] = s;
        }
        s = null;
        stringbuilder = null;
        stringbuilder1 = new StringBuilder();
        context = Runtime.getRuntime().exec(context);
        s = JVM INSTR new #879 <Class BufferedReader>;
        obj = JVM INSTR new #881 <Class InputStreamReader>;
        ((InputStreamReader) (obj)).InputStreamReader(context.getInputStream());
        s.BufferedReader(((java.io.Reader) (obj)));
_L6:
        obj = s.readLine();
        if (obj == null) goto _L4; else goto _L3
_L3:
        stringbuilder1.append(((String) (obj))).append("\n");
        if (i1 <= 0) goto _L6; else goto _L5
_L5:
        if (stringbuilder1.length() <= i1) goto _L6; else goto _L7
_L7:
        stringbuilder1.delete(0, stringbuilder1.length() - i1);
          goto _L6
        obj;
_L13:
        s = context;
        if (ag.a(((Throwable) (obj))))
            break MISSING_BLOCK_LABEL_169;
        s = context;
        ((Throwable) (obj)).printStackTrace();
        s = context;
        stringbuilder = JVM INSTR new #421 <Class StringBuilder>;
        s = context;
        stringbuilder.StringBuilder("\n[error:");
        s = context;
        obj = stringbuilder1.append(stringbuilder.append(((Throwable) (obj)).toString()).append("]").toString()).toString();
        s = ((String) (obj));
        if (context == null) goto _L9; else goto _L8
_L8:
        try {
            context.getOutputStream().close();
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            s.printStackTrace();
        }
        try {
            context.getInputStream().close();
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            s.printStackTrace();
        }
        context.getErrorStream().close();
        s = ((String) (obj));
          goto _L9
        context;
        context.printStackTrace();
        s = ((String) (obj));
          goto _L9
_L4:
        obj = stringbuilder1.toString();
        s = ((String) (obj));
        if (context == null) goto _L9; else goto _L10
_L10:
        try {
            context.getOutputStream().close();
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            s.printStackTrace();
        }
        try {
            context.getInputStream().close();
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            s.printStackTrace();
        }
        context.getErrorStream().close();
        s = ((String) (obj));
          goto _L9
        context;
        context.printStackTrace();
        s = ((String) (obj));
          goto _L9
        context;
_L12:
        if (s != null) {
            try {
                s.getOutputStream().close();
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) {
                ((IOException) (obj)).printStackTrace();
            }
            try {
                s.getInputStream().close();
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) {
                ((IOException) (obj)).printStackTrace();
            }
            try {
                s.getErrorStream().close();
            }
            // Misplaced declaration of an exception variable
            catch (String s) {
                s.printStackTrace();
            }
        }
        throw context;
        obj;
        s = context;
        context = ((Context) (obj));
        if (true) goto _L12; else goto _L11
_L11:
        obj;
        context = stringbuilder;
          goto _L13
    }

    public static String a(Context context, String s) {
        if (s == null || s.trim().equals("")) {
            context = "";
        } else {
            context = a(context, new String[] {
                "/system/bin/sh", "-c", (new StringBuilder("getprop ")).append(s).toString()
            });
            if (context != null && context.size() > 0)
                context = (String)context.get(0);
            else
                context = "fail";
        }
        return context;
    }

    public static String a(Throwable throwable) {
        if (throwable == null)
            throwable = "";
        else
            try {
                StringWriter stringwriter = JVM INSTR new #951 <Class StringWriter>;
                stringwriter.StringWriter();
                PrintWriter printwriter = JVM INSTR new #954 <Class PrintWriter>;
                printwriter.PrintWriter(stringwriter);
                throwable.printStackTrace(printwriter);
                throwable = stringwriter.getBuffer().toString();
            }
            // Misplaced declaration of an exception variable
            catch (Throwable throwable) {
                if (!ag.a(throwable))
                    throwable.printStackTrace();
                throwable = "fail";
            }
        return throwable;
    }

    public static String a(ArrayList arraylist) {
        StringBuffer stringbuffer = new StringBuffer();
        int i1 = 0;
        while (i1 < arraylist.size())  {
            String s2 = (String)arraylist.get(i1);
            String s;
            if (s2.equals("java.lang.Integer") || s2.equals("int"))
                s = "int32";
            else
            if (s2.equals("java.lang.Boolean") || s2.equals("boolean"))
                s = "bool";
            else
            if (s2.equals("java.lang.Byte") || s2.equals("byte"))
                s = "char";
            else
            if (s2.equals("java.lang.Double") || s2.equals("double"))
                s = "double";
            else
            if (s2.equals("java.lang.Float") || s2.equals("float"))
                s = "float";
            else
            if (s2.equals("java.lang.Long") || s2.equals("long"))
                s = "int64";
            else
            if (s2.equals("java.lang.Short") || s2.equals("short")) {
                s = "short";
            } else {
                if (s2.equals("java.lang.Character"))
                    throw new IllegalArgumentException("can not support java.lang.Character");
                if (s2.equals("java.lang.String"))
                    s = "string";
                else
                if (s2.equals("java.util.List")) {
                    s = "list";
                } else {
                    s = s2;
                    if (s2.equals("java.util.Map"))
                        s = "map";
                }
            }
            arraylist.set(i1, s);
            i1++;
        }
        Collections.reverse(arraylist);
        i1 = 0;
        while (i1 < arraylist.size())  {
            String s1 = (String)arraylist.get(i1);
            if (s1.equals("list")) {
                arraylist.set(i1 - 1, (new StringBuilder("<")).append((String)arraylist.get(i1 - 1)).toString());
                arraylist.set(0, (new StringBuilder()).append((String)arraylist.get(0)).append(">").toString());
            } else
            if (s1.equals("map")) {
                arraylist.set(i1 - 1, (new StringBuilder("<")).append((String)arraylist.get(i1 - 1)).append(",").toString());
                arraylist.set(0, (new StringBuilder()).append((String)arraylist.get(0)).append(">").toString());
            } else
            if (s1.equals("Array")) {
                arraylist.set(i1 - 1, (new StringBuilder("<")).append((String)arraylist.get(i1 - 1)).toString());
                arraylist.set(0, (new StringBuilder()).append((String)arraylist.get(0)).append(">").toString());
            }
            i1++;
        }
        Collections.reverse(arraylist);
        for (arraylist = arraylist.iterator(); arraylist.hasNext(); stringbuffer.append((String)arraylist.next()));
        return stringbuffer.toString();
    }

    public static String a(Date date) {
        if (date == null)
            date = null;
        else
            try {
                SimpleDateFormat simpledateformat = JVM INSTR new #1052 <Class SimpleDateFormat>;
                simpledateformat.SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US);
                date = simpledateformat.format(date);
            }
            // Misplaced declaration of an exception variable
            catch (Date date) {
                date = (new Date()).toString();
            }
        return date;
    }

    public static Thread a(Runnable runnable, String s) {
        Thread thread;
        thread = JVM INSTR new #1073 <Class Thread>;
        thread.Thread(runnable);
        thread.setName(s);
        thread.start();
        runnable = thread;
_L2:
        return runnable;
        runnable;
        ag.e("[Util] Failed to start a thread to execute task with message: %s", new Object[] {
            runnable.getMessage()
        });
        runnable = null;
        if (true) goto _L2; else goto _L1
_L1:
    }

    public static ArrayList a(Context context, String as[]) {
        Context context1;
        Object obj1;
        context1 = null;
        obj1 = new ArrayList();
        if (!com.tencent.bugly.crashreport.common.info.a.a(context).F()) goto _L2; else goto _L1
_L1:
        context = new ArrayList();
        context.add(new String("unknown(low memory)"));
_L6:
        return context;
_L2:
        context = Runtime.getRuntime().exec(as);
        as = JVM INSTR new #879 <Class BufferedReader>;
        InputStreamReader inputstreamreader = JVM INSTR new #881 <Class InputStreamReader>;
        inputstreamreader.InputStreamReader(context.getInputStream());
        as.BufferedReader(inputstreamreader);
_L5:
        Object obj = as.readLine();
        if (obj == null) goto _L4; else goto _L3
_L3:
        ((ArrayList) (obj1)).add(obj);
          goto _L5
        obj1;
        context = null;
_L9:
        context1 = context;
        obj = as;
        if (ag.a(((Throwable) (obj1))))
            break MISSING_BLOCK_LABEL_119;
        context1 = context;
        obj = as;
        ((Throwable) (obj1)).printStackTrace();
        String s;
        if (as != null)
            try {
                as.close();
            }
            // Misplaced declaration of an exception variable
            catch (String as[]) {
                as.printStackTrace();
            }
        if (context != null)
            try {
                context.close();
            }
            // Misplaced declaration of an exception variable
            catch (Context context) {
                context.printStackTrace();
            }
        context = null;
          goto _L6
_L4:
        obj = JVM INSTR new #881 <Class InputStreamReader>;
        ((InputStreamReader) (obj)).InputStreamReader(context.getErrorStream());
        context = new BufferedReader(((java.io.Reader) (obj)));
_L8:
        context1 = context;
        obj = as;
        s = context.readLine();
        if (s == null)
            break; /* Loop/switch isn't completed */
        context1 = context;
        obj = as;
        ((ArrayList) (obj1)).add(s);
        if (true) goto _L8; else goto _L7
        obj1;
          goto _L9
_L7:
        try {
            as.close();
        }
        // Misplaced declaration of an exception variable
        catch (String as[]) {
            as.printStackTrace();
        }
        context.close();
        context = ((Context) (obj1));
          goto _L6
        context;
        context.printStackTrace();
        context = ((Context) (obj1));
          goto _L6
        context;
        as = null;
_L11:
        if (as != null)
            try {
                as.close();
            }
            // Misplaced declaration of an exception variable
            catch (String as[]) {
                as.printStackTrace();
            }
        if (context1 != null)
            try {
                context1.close();
            }
            // Misplaced declaration of an exception variable
            catch (String as[]) {
                as.printStackTrace();
            }
        throw context;
        context;
        continue; /* Loop/switch isn't completed */
        context;
        as = ((String []) (obj));
        if (true) goto _L11; else goto _L10
_L10:
        obj1;
        context = null;
        as = null;
          goto _L9
    }

    public static Map a(int i1, boolean flag) {
        HashMap hashmap;
        Map map;
        hashmap = new HashMap(12);
        map = Thread.getAllStackTraces();
        if (map != null) goto _L2; else goto _L1
_L1:
        hashmap = null;
_L4:
        return hashmap;
_L2:
        StringBuilder stringbuilder;
        Iterator iterator;
        Thread.currentThread().getId();
        stringbuilder = new StringBuilder();
        iterator = map.entrySet().iterator();
_L6:
        if (!iterator.hasNext()) goto _L4; else goto _L3
_L3:
        java.util.Map.Entry entry;
        entry = (java.util.Map.Entry)iterator.next();
        stringbuilder.setLength(0);
        if (entry.getValue() == null || ((StackTraceElement[])entry.getValue()).length == 0) goto _L6; else goto _L5
_L5:
        int j1;
        int k1;
        StackTraceElement astacktraceelement[];
        astacktraceelement = (StackTraceElement[])entry.getValue();
        k1 = astacktraceelement.length;
        j1 = 0;
_L7:
        StackTraceElement stacktraceelement;
label0:
        {
            if (j1 < k1) {
                stacktraceelement = astacktraceelement[j1];
                if (i1 <= 0 || stringbuilder.length() < i1)
                    break label0;
                stringbuilder.append((new StringBuilder("\n[Stack over limit size :")).append(i1).append(" , has been cutted !]").toString());
            }
            hashmap.put((new StringBuilder()).append(((Thread)entry.getKey()).getName()).append("(").append(((Thread)entry.getKey()).getId()).append(")").toString(), stringbuilder.toString());
        }
          goto _L6
          goto _L4
        stringbuilder.append(stacktraceelement.toString()).append("\n");
        j1++;
          goto _L7
    }

    public static Map a(Parcel parcel) {
        Object obj = null;
        parcel = parcel.readBundle();
        if (parcel == null) {
            parcel = obj;
        } else {
            ArrayList arraylist1 = new ArrayList();
            ArrayList arraylist = new ArrayList();
            int l1 = ((Integer)parcel.get("pluginNum")).intValue();
            for (int i1 = 0; i1 < l1; i1++)
                arraylist1.add(parcel.getString((new StringBuilder("pluginKey")).append(i1).toString()));

            for (int j1 = 0; j1 < l1; j1++) {
                String s1 = parcel.getString((new StringBuilder("pluginVal")).append(j1).append("plugInId").toString());
                String s = parcel.getString((new StringBuilder("pluginVal")).append(j1).append("plugInUUID").toString());
                arraylist.add(new PlugInBean(s1, parcel.getString((new StringBuilder("pluginVal")).append(j1).append("plugInVersion").toString()), s));
            }

            if (arraylist1.size() == arraylist.size()) {
                parcel = new HashMap(arraylist1.size());
                int k1 = 0;
                while (k1 < arraylist1.size())  {
                    parcel.put(arraylist1.get(k1), com/tencent/bugly/crashreport/common/info/PlugInBean.cast(arraylist.get(k1)));
                    k1++;
                }
            } else {
                ag.e("map plugin parcel error!", new Object[0]);
                parcel = null;
            }
        }
        return parcel;
    }

    public static void a(Parcel parcel, Map map) {
        boolean flag = false;
        if (map == null || map.size() <= 0) {
            parcel.writeBundle(null);
        } else {
            int i1 = map.size();
            ArrayList arraylist1 = new ArrayList(i1);
            ArrayList arraylist = new ArrayList(i1);
            for (Iterator iterator = map.entrySet().iterator(); iterator.hasNext(); arraylist.add(map.getValue())) {
                map = (java.util.Map.Entry)iterator.next();
                arraylist1.add(map.getKey());
            }

            map = new Bundle();
            map.putInt("pluginNum", arraylist1.size());
            i1 = 0;
            int j1;
            do {
                j1 = ((flag) ? 1 : 0);
                if (i1 >= arraylist1.size())
                    break;
                map.putString((new StringBuilder("pluginKey")).append(i1).toString(), (String)arraylist1.get(i1));
                i1++;
            } while (true);
            for (; j1 < arraylist1.size(); j1++) {
                map.putString((new StringBuilder("pluginVal")).append(j1).append("plugInId").toString(), ((PlugInBean)arraylist.get(j1)).a);
                map.putString((new StringBuilder("pluginVal")).append(j1).append("plugInUUID").toString(), ((PlugInBean)arraylist.get(j1)).c);
                map.putString((new StringBuilder("pluginVal")).append(j1).append("plugInVersion").toString(), ((PlugInBean)arraylist.get(j1)).b);
            }

            parcel.writeBundle(map);
        }
    }

    public static void a(File file) {
        if (file != null && file.exists() && file.isDirectory()) goto _L2; else goto _L1
_L1:
        File afile[];
        return;
_L2:
        if ((afile = file.listFiles()) != null && afile.length > 0) {
            int j1 = afile.length;
            int i1 = 0;
            while (i1 < j1)  {
                file = afile[i1];
                if (!file.delete())
                    ag.e("cannot delete file:%s", new Object[] {
                        file.getAbsolutePath()
                    });
                i1++;
            }
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    private void a(ArrayList arraylist, Object obj) {
        if (obj.getClass().isArray()) {
            if (!obj.getClass().getComponentType().toString().equals("byte"))
                throw new IllegalArgumentException("only byte[] is supported");
            if (Array.getLength(obj) > 0) {
                arraylist.add("java.util.List");
                a(arraylist, Array.get(obj, 0));
            } else {
                arraylist.add("Array");
                arraylist.add("?");
            }
        } else {
            if (obj instanceof Array)
                throw new IllegalArgumentException("can not support Array, please use List");
            if (obj instanceof List) {
                arraylist.add("java.util.List");
                obj = (List)obj;
                if (((List) (obj)).size() > 0)
                    a(arraylist, ((List) (obj)).get(0));
                else
                    arraylist.add("?");
            } else
            if (obj instanceof Map) {
                arraylist.add("java.util.Map");
                Object obj1 = (Map)obj;
                if (((Map) (obj1)).size() > 0) {
                    obj = ((Map) (obj1)).keySet().iterator().next();
                    obj1 = ((Map) (obj1)).get(obj);
                    arraylist.add(obj.getClass().getName());
                    a(arraylist, obj1);
                } else {
                    arraylist.add("?");
                    arraylist.add("?");
                }
            } else {
                arraylist.add(obj.getClass().getName());
            }
        }
    }

    public static boolean a(Context context, File file, String s) {
        if (file == null) goto _L2; else goto _L1
_L1:
        if (!file.exists() || !file.getName().endsWith(".apk")) goto _L2; else goto _L3
_L3:
        String s1 = b(file, "MD5");
        if (TextUtils.isEmpty(s) || TextUtils.equals(s.toUpperCase(), s1)) goto _L5; else goto _L4
_L4:
        ag.a("md5 error [file md5: %s] [target md5: %s]", new Object[] {
            s1, s
        });
        boolean flag = false;
_L8:
        return flag;
_L5:
        s = JVM INSTR new #421 <Class StringBuilder>;
        s.StringBuilder("chmod 777 ");
        s = s.append(file.getAbsolutePath()).toString();
        Runtime.getRuntime().exec(s);
        s = JVM INSTR new #1260 <Class Intent>;
        s.Intent("android.intent.action.VIEW");
        if (android.os.Build.VERSION.SDK_INT < 24)
            break MISSING_BLOCK_LABEL_384;
        s.addFlags(1);
        if (Class.forName("android.support.v4.content.FileProvider") != null)
            break MISSING_BLOCK_LABEL_157;
        ag.e("can't find class android.support.v4.content.FileProvider", new Object[0]);
        flag = false;
        continue; /* Loop/switch isn't completed */
        Object obj;
        obj = JVM INSTR new #421 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        obj = ((StringBuilder) (obj)).append(com.tencent.bugly.crashreport.common.info.a.a(context).c).append(".fileProvider").toString();
        obj = (Uri)a("android.support.v4.content.FileProvider", "getUriForFile", null, new Class[] {
            android/content/Context, java/lang/String, java/io/File
        }, new Object[] {
            context, obj, file
        });
        if (obj != null)
            break MISSING_BLOCK_LABEL_292;
        context = JVM INSTR new #421 <Class StringBuilder>;
        context.StringBuilder("file location is ");
        ag.e(context.append(file.toString()).toString(), new Object[0]);
        ag.e("install failed, contentUri is null!", new Object[0]);
        flag = false;
        continue; /* Loop/switch isn't completed */
        file = JVM INSTR new #421 <Class StringBuilder>;
        file.StringBuilder("contentUri is ");
        ag.c(file.append(obj).toString(), new Object[0]);
        s.setDataAndType(((Uri) (obj)), "application/vnd.android.package-archive");
_L6:
        s.addFlags(0x10000000);
        context.startActivity(s);
        if (d.D.z != null)
            d.D.z.edit().putString("installApkMd5", s1).commit();
        flag = true;
        continue; /* Loop/switch isn't completed */
        s.setDataAndType(Uri.fromFile(file), "application/vnd.android.package-archive");
          goto _L6
        context;
        if (!com.tencent.bugly.proguard.ag.b(context))
            context.printStackTrace();
_L2:
        flag = false;
        if (true) goto _L8; else goto _L7
_L7:
    }

    public static boolean a(Context context, String s, long l1) {
        boolean flag;
        flag = false;
        ag.c("[Util] try to lock file:%s (pid=%d | tid=%d)", new Object[] {
            s, Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
        });
        File file;
        Object obj = JVM INSTR new #421 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        obj = ((StringBuilder) (obj)).append(context.getFilesDir()).append(File.separator).append(s).toString();
        file = JVM INSTR new #83  <Class File>;
        file.File(((String) (obj)));
        if (!file.exists()) goto _L2; else goto _L1
_L1:
        if (System.currentTimeMillis() - file.lastModified() >= l1) goto _L4; else goto _L3
_L3:
        return flag;
_L4:
        ag.c("[Util] lock file(%s) is expired, unlock it", new Object[] {
            s
        });
        b(context, s);
_L2:
        if (!file.createNewFile()) goto _L6; else goto _L5
_L5:
        ag.c("[Util] successfully locked file:%s (pid=%d | tid=%d)", new Object[] {
            s, Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
        });
        flag = true;
        continue; /* Loop/switch isn't completed */
_L6:
        try {
            ag.c("[Util] Failed to locked file:%s (pid=%d | tid=%d)", new Object[] {
                s, Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
            });
        }
        // Misplaced declaration of an exception variable
        catch (Context context) {
            ag.a(context);
        }
        if (true) goto _L3; else goto _L7
_L7:
    }

    public static boolean a(File file, File file1, int i1) {
        boolean flag;
        boolean flag1;
        Object obj1;
        obj1 = null;
        flag1 = false;
        ag.c("rqdp{  ZF start}", new Object[0]);
        if (file == null || file1 == null || file.equals(file1)) {
            com.tencent.bugly.proguard.ag.d("rqdp{  err ZF 1R!}", new Object[0]);
            flag = flag1;
        } else {
label0:
            {
                if (file.exists() && file.canRead())
                    break label0;
                com.tencent.bugly.proguard.ag.d("rqdp{  !sFile.exists() || !sFile.canRead(),pls check ,return!}", new Object[0]);
                flag = flag1;
            }
        }
_L2:
        return flag;
        Object obj;
        FileOutputStream fileoutputstream;
        Throwable throwable;
        try {
            if (file1.getParentFile() != null && !file1.getParentFile().exists())
                file1.getParentFile().mkdirs();
            if (!file1.exists())
                file1.createNewFile();
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            if (!ag.a(((Throwable) (obj))))
                ((Throwable) (obj)).printStackTrace();
        }
        flag = flag1;
        if (!file1.exists()) goto _L2; else goto _L1
_L1:
        flag = flag1;
        if (!file1.canRead()) goto _L2; else goto _L3
_L3:
        obj = JVM INSTR new #1373 <Class FileInputStream>;
        ((FileInputStream) (obj)).FileInputStream(file);
        obj1 = JVM INSTR new #1377 <Class ZipOutputStream>;
        fileoutputstream = JVM INSTR new #1379 <Class FileOutputStream>;
        fileoutputstream.FileOutputStream(file1);
        ((ZipOutputStream) (obj1)).ZipOutputStream(fileoutputstream);
        ((ZipOutputStream) (obj1)).setMethod(8);
        file1 = JVM INSTR new #1388 <Class ZipEntry>;
        file1.ZipEntry(file.getName());
        ((ZipOutputStream) (obj1)).putNextEntry(file1);
        file = new byte[5000];
_L6:
        i1 = ((FileInputStream) (obj)).read(file);
        if (i1 <= 0) goto _L5; else goto _L4
_L4:
        ((ZipOutputStream) (obj1)).write(file, 0, i1);
          goto _L6
        throwable;
        file1 = ((File) (obj));
        file = ((File) (obj1));
        obj = throwable;
_L9:
        if (!ag.a(((Throwable) (obj))))
            ((Throwable) (obj)).printStackTrace();
        if (file1 != null)
            try {
                file1.close();
            }
            // Misplaced declaration of an exception variable
            catch (File file1) {
                file1.printStackTrace();
            }
        if (file != null)
            try {
                file.close();
            }
            // Misplaced declaration of an exception variable
            catch (File file) {
                file.printStackTrace();
            }
        ag.c("rqdp{  ZF end}", new Object[0]);
        flag = flag1;
          goto _L2
_L5:
        ((ZipOutputStream) (obj1)).flush();
        ((ZipOutputStream) (obj1)).closeEntry();
        try {
            ((FileInputStream) (obj)).close();
        }
        // Misplaced declaration of an exception variable
        catch (File file) {
            file.printStackTrace();
        }
        try {
            ((ZipOutputStream) (obj1)).close();
        }
        // Misplaced declaration of an exception variable
        catch (File file) {
            file.printStackTrace();
        }
        ag.c("rqdp{  ZF end}", new Object[0]);
        flag = true;
          goto _L2
        file1;
        file = null;
        obj = null;
_L8:
        if (obj != null)
            try {
                ((FileInputStream) (obj)).close();
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) {
                ((IOException) (obj)).printStackTrace();
            }
        if (file != null)
            try {
                file.close();
            }
            // Misplaced declaration of an exception variable
            catch (File file) {
                file.printStackTrace();
            }
        ag.c("rqdp{  ZF end}", new Object[0]);
        throw file1;
        file1;
        file = null;
        continue; /* Loop/switch isn't completed */
        file1;
        file = ((File) (obj1));
        continue; /* Loop/switch isn't completed */
        obj1;
        obj = file1;
        file1 = ((File) (obj1));
        if (true) goto _L8; else goto _L7
_L7:
        obj;
        file = null;
        file1 = ((File) (obj1));
          goto _L9
        file;
        Object obj2 = null;
        file1 = ((File) (obj));
        obj = file;
        file = obj2;
          goto _L9
    }

    public static boolean a(String s, Parcelable parcelable) {
        boolean flag1 = false;
        com/tencent/bugly/proguard/a;
        JVM INSTR monitorenter ;
        if (parcelable != null) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
_L4:
        com/tencent/bugly/proguard/a;
        JVM INSTR monitorexit ;
        return flag;
_L2:
        Parcel parcel = Parcel.obtain();
        parcelable.writeToParcel(parcel, 0);
        parcelable = parcel.marshall();
        parcel.recycle();
        flag = flag1;
        if (parcelable == null)
            continue; /* Loop/switch isn't completed */
        boolean flag2 = l.a.a(1002, s, parcelable);
        flag = flag1;
        if (flag2)
            flag = true;
        if (true) goto _L4; else goto _L3
_L3:
        s;
        throw s;
    }

    public static byte[] a(int i1) {
        com/tencent/bugly/proguard/a;
        JVM INSTR monitorenter ;
        DataInputStream datainputstream;
        byte abyte0[];
        abyte0 = new byte[16];
        datainputstream = JVM INSTR new #1425 <Class DataInputStream>;
        FileInputStream fileinputstream = JVM INSTR new #1373 <Class FileInputStream>;
        File file = JVM INSTR new #83  <Class File>;
        file.File("/dev/urandom");
        fileinputstream.FileInputStream(file);
        datainputstream.DataInputStream(fileinputstream);
        Object obj = datainputstream;
        datainputstream.readFully(abyte0);
        datainputstream.close();
        obj = abyte0;
_L1:
        com/tencent/bugly/proguard/a;
        JVM INSTR monitorexit ;
        return ((byte []) (obj));
        Exception exception1;
        exception1;
        datainputstream = null;
_L3:
        obj = datainputstream;
        ag.e("Failed to read from /dev/urandom : %s", new Object[] {
            exception1
        });
        if (datainputstream == null)
            break MISSING_BLOCK_LABEL_86;
        datainputstream.close();
        obj = KeyGenerator.getInstance("AES");
        SecureRandom securerandom = JVM INSTR new #1444 <Class SecureRandom>;
        securerandom.SecureRandom();
        ((KeyGenerator) (obj)).init(128, securerandom);
        obj = ((KeyGenerator) (obj)).generateKey().getEncoded();
          goto _L1
        Exception exception;
        exception;
        obj = null;
_L2:
        if (obj == null)
            break MISSING_BLOCK_LABEL_133;
        ((DataInputStream) (obj)).close();
        throw exception;
        Object obj1;
        obj1;
        if (!com.tencent.bugly.proguard.ag.b(((Throwable) (obj1))))
            ((Exception) (obj1)).printStackTrace();
        obj1 = null;
          goto _L1
        obj1;
        throw obj1;
        exception;
          goto _L2
        exception1;
          goto _L3
    }

    public static byte[] a(int i1, byte abyte0[], byte abyte1[]) {
        try {
            SecretKeySpec secretkeyspec = JVM INSTR new #1461 <Class SecretKeySpec>;
            secretkeyspec.SecretKeySpec(abyte1, "AES");
            Cipher cipher = Cipher.getInstance("AES/GCM/NoPadding");
            IvParameterSpec ivparameterspec = JVM INSTR new #1473 <Class IvParameterSpec>;
            ivparameterspec.IvParameterSpec(abyte1);
            cipher.init(i1, secretkeyspec, ivparameterspec);
            abyte0 = cipher.doFinal(abyte0);
        }
        // Misplaced declaration of an exception variable
        catch (byte abyte0[]) {
            if (!com.tencent.bugly.proguard.ag.b(abyte0))
                abyte0.printStackTrace();
            abyte0 = null;
        }
        return abyte0;
    }

    public static byte[] a(long l1) {
        byte abyte0[];
        try {
            StringBuilder stringbuilder = JVM INSTR new #421 <Class StringBuilder>;
            stringbuilder.StringBuilder();
            abyte0 = stringbuilder.append(l1).toString().getBytes("utf-8");
        }
        catch (UnsupportedEncodingException unsupportedencodingexception) {
            unsupportedencodingexception.printStackTrace();
            unsupportedencodingexception = null;
        }
        return abyte0;
    }

    public static byte[] a(aw aw1) {
        try {
            com.tencent.bugly.proguard.d d1 = JVM INSTR new #540 <Class com.tencent.bugly.proguard.d>;
            d1.com.tencent.bugly.proguard.d();
            d1.d();
            d1.a("utf-8");
            d1.b(1);
            d1.d("RqdServer");
            d1.e("sync");
            d1.a("detail", aw1);
            aw1 = d1.a();
        }
        // Misplaced declaration of an exception variable
        catch (aw aw1) {
            if (!com.tencent.bugly.proguard.ag.b(aw1))
                aw1.printStackTrace();
            aw1 = null;
        }
        return aw1;
    }

    public static byte[] a(j j1) {
        try {
            i i1 = JVM INSTR new #1507 <Class i>;
            i1.i();
            i1.a("utf-8");
            j1.a(i1);
            j1 = i1.b();
        }
        // Misplaced declaration of an exception variable
        catch (j j1) {
            if (!com.tencent.bugly.proguard.ag.b(j1))
                j1.printStackTrace();
            j1 = null;
        }
        return j1;
    }

    public static byte[] a(File file, String s) {
        Object obj;
        Object obj2;
        obj2 = null;
        ag.c("rqdp{  ZF start}", new Object[0]);
        obj = "buglyCacheLog.txt";
        if (file == null) goto _L2; else goto _L1
_L1:
        if (!file.exists() || !file.canRead()) goto _L2; else goto _L3
_L3:
        obj = JVM INSTR new #1373 <Class FileInputStream>;
        ((FileInputStream) (obj)).FileInputStream(file);
        int i1;
        String s1;
        File file1;
        ByteArrayInputStream bytearrayinputstream;
        ByteArrayOutputStream bytearrayoutputstream;
        ZipEntry zipentry;
        try {
            s1 = file.getName();
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            file = ((File) (obj));
            Object obj1 = null;
            obj = s;
            s = obj1;
            continue; /* Loop/switch isn't completed */
        }
        file = ((File) (obj));
        obj = s1;
_L12:
        s = s.getBytes("UTF-8");
        bytearrayinputstream = JVM INSTR new #1521 <Class ByteArrayInputStream>;
        bytearrayinputstream.ByteArrayInputStream(s);
        bytearrayoutputstream = JVM INSTR new #1524 <Class ByteArrayOutputStream>;
        bytearrayoutputstream.ByteArrayOutputStream();
        s = JVM INSTR new #1377 <Class ZipOutputStream>;
        s.ZipOutputStream(bytearrayoutputstream);
        s1 = s;
        file1 = file;
        s.setMethod(8);
        s1 = s;
        file1 = file;
        zipentry = JVM INSTR new #1388 <Class ZipEntry>;
        s1 = s;
        file1 = file;
        zipentry.ZipEntry(((String) (obj)));
        s1 = s;
        file1 = file;
        s.putNextEntry(zipentry);
        s1 = s;
        file1 = file;
        obj = new byte[1024];
        if (file == null) goto _L5; else goto _L4
_L4:
        s1 = s;
        file1 = file;
        i1 = file.read(((byte []) (obj)));
        if (i1 <= 0)
            break; /* Loop/switch isn't completed */
        s1 = s;
        file1 = file;
        s.write(((byte []) (obj)), 0, i1);
        if (true) goto _L4; else goto _L5
        obj;
_L10:
        s1 = s;
        file1 = file;
        if (ag.a(((Throwable) (obj))))
            break MISSING_BLOCK_LABEL_214;
        s1 = s;
        file1 = file;
        ((Throwable) (obj)).printStackTrace();
        if (file != null)
            try {
                file.close();
            }
            // Misplaced declaration of an exception variable
            catch (File file) {
                file.printStackTrace();
            }
        if (s != null)
            try {
                s.close();
            }
            // Misplaced declaration of an exception variable
            catch (File file) {
                file.printStackTrace();
            }
        ag.c("rqdp{  ZF end}", new Object[0]);
        obj = obj2;
        return ((byte []) (obj));
_L5:
        s1 = s;
        file1 = file;
        i1 = bytearrayinputstream.read(((byte []) (obj)));
        if (i1 <= 0) goto _L7; else goto _L6
_L6:
        s1 = s;
        file1 = file;
        s.write(((byte []) (obj)), 0, i1);
          goto _L5
        s;
        file = file1;
        obj = s1;
_L9:
        if (file != null)
            try {
                file.close();
            }
            // Misplaced declaration of an exception variable
            catch (File file) {
                file.printStackTrace();
            }
        if (obj != null)
            try {
                ((ZipOutputStream) (obj)).close();
            }
            // Misplaced declaration of an exception variable
            catch (File file) {
                file.printStackTrace();
            }
        ag.c("rqdp{  ZF end}", new Object[0]);
        throw s;
_L7:
        s1 = s;
        file1 = file;
        s.closeEntry();
        s1 = s;
        file1 = file;
        s.flush();
        s1 = s;
        file1 = file;
        s.finish();
        s1 = s;
        file1 = file;
        obj = bytearrayoutputstream.toByteArray();
        if (file != null)
            try {
                file.close();
            }
            // Misplaced declaration of an exception variable
            catch (File file) {
                file.printStackTrace();
            }
        try {
            s.close();
        }
        // Misplaced declaration of an exception variable
        catch (File file) {
            file.printStackTrace();
        }
        ag.c("rqdp{  ZF end}", new Object[0]);
        break MISSING_BLOCK_LABEL_244;
        s;
        obj = null;
        file = null;
        continue; /* Loop/switch isn't completed */
        s;
        file = ((File) (obj));
        obj = null;
        continue; /* Loop/switch isn't completed */
        s;
        obj = null;
        if (true) goto _L9; else goto _L8
_L8:
        obj;
        s = null;
        file = null;
        continue; /* Loop/switch isn't completed */
        obj;
        s = null;
        if (true) goto _L10; else goto _L2
_L2:
        file = null;
        if (true) goto _L12; else goto _L11
_L11:
    }

    public static byte[] a(byte abyte0[], int i1) {
        Object obj = abyte0;
        if (abyte0 == null) goto _L2; else goto _L1
_L1:
        if (i1 != -1) goto _L4; else goto _L3
_L3:
        obj = abyte0;
_L2:
        return ((byte []) (obj));
_L4:
        int j1 = abyte0.length;
        if (i1 == 2)
            obj = "Gzip";
        else
            obj = "zip";
        ag.c("[Util] Zip %d bytes data with type %s", new Object[] {
            Integer.valueOf(j1), obj
        });
        obj = ak.a(i1);
        if (obj == null)
            obj = null;
        else
            try {
                obj = ((al) (obj)).a(abyte0);
            }
            // Misplaced declaration of an exception variable
            catch (byte abyte0[]) {
                if (!ag.a(abyte0))
                    abyte0.printStackTrace();
                obj = null;
            }
        if (true) goto _L2; else goto _L5
_L5:
    }

    public static byte[] a(byte abyte0[], int i1, int j1, String s) {
        Object obj = null;
        if (abyte0 != null) goto _L2; else goto _L1
_L1:
        abyte0 = obj;
_L4:
        return abyte0;
_L2:
        try {
            abyte0 = a(a(abyte0, 2), 1, s);
        }
        // Misplaced declaration of an exception variable
        catch (String s) {
            abyte0 = obj;
            if (!ag.a(s)) {
                s.printStackTrace();
                abyte0 = obj;
            }
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static byte[] a(byte abyte0[], int i1, String s) {
        Object obj = abyte0;
        if (abyte0 == null) goto _L2; else goto _L1
_L1:
        if (i1 != -1) goto _L4; else goto _L3
_L3:
        obj = abyte0;
_L2:
        return ((byte []) (obj));
_L4:
        ag.c("rqdp{  enD:} %d %d", new Object[] {
            Integer.valueOf(abyte0.length), Integer.valueOf(i1)
        });
        if (i1 != 1) goto _L6; else goto _L5
_L5:
        obj = JVM INSTR new #1557 <Class ap>;
        ((ap) (obj)).ap();
_L7:
        if (obj == null)
            obj = null;
        else
            try {
                ((aq) (obj)).a(s);
                obj = ((aq) (obj)).b(abyte0);
            }
            // Misplaced declaration of an exception variable
            catch (byte abyte0[]) {
                if (!ag.a(abyte0))
                    abyte0.printStackTrace();
                obj = null;
            }
        if (true) goto _L2; else goto _L6
_L6:
        if (i1 != 3)
            break MISSING_BLOCK_LABEL_96;
        obj = new ao();
          goto _L7
        obj = null;
          goto _L7
    }

    public static BufferedReader b(File file) {
        if (file != null && file.exists() && file.canRead()) goto _L2; else goto _L1
_L1:
        file = null;
_L4:
        return file;
_L2:
        BufferedReader bufferedreader;
        bufferedreader = JVM INSTR new #879 <Class BufferedReader>;
        InputStreamReader inputstreamreader = JVM INSTR new #881 <Class InputStreamReader>;
        FileInputStream fileinputstream = JVM INSTR new #1373 <Class FileInputStream>;
        fileinputstream.FileInputStream(file);
        inputstreamreader.InputStreamReader(fileinputstream, "utf-8");
        bufferedreader.BufferedReader(inputstreamreader);
        file = bufferedreader;
        continue; /* Loop/switch isn't completed */
        file;
        ag.a(file);
        file = null;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static String b() {
        Object obj;
        try {
            obj = JVM INSTR new #1052 <Class SimpleDateFormat>;
            ((SimpleDateFormat) (obj)).SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US);
            Date date = JVM INSTR new #1068 <Class Date>;
            date.Date();
            obj = ((SimpleDateFormat) (obj)).format(date);
        }
        catch (Exception exception) {
            exception = (new Date()).toString();
        }
        return ((String) (obj));
    }

    public static String b(File file, String s) {
        Object obj;
        Object obj1;
        obj1 = null;
        obj = obj1;
        if (file == null) goto _L2; else goto _L1
_L1:
        obj = obj1;
        if (!file.exists()) goto _L2; else goto _L3
_L3:
        if (file.canRead()) goto _L5; else goto _L4
_L4:
        obj = obj1;
_L2:
        return ((String) (obj));
_L5:
        FileInputStream fileinputstream;
        fileinputstream = JVM INSTR new #1373 <Class FileInputStream>;
        fileinputstream.FileInputStream(file);
        file = fileinputstream;
        s = MessageDigest.getInstance(s);
        file = fileinputstream;
        obj = new byte[0x19000];
_L7:
        file = fileinputstream;
        int i1 = fileinputstream.read(((byte []) (obj)));
        if (i1 == -1)
            break; /* Loop/switch isn't completed */
        file = fileinputstream;
        s.update(((byte []) (obj)), 0, i1);
        if (true) goto _L7; else goto _L6
        s;
_L13:
        file = fileinputstream;
        if (ag.a(s))
            break MISSING_BLOCK_LABEL_104;
        file = fileinputstream;
        s.printStackTrace();
        obj = obj1;
        if (fileinputstream == null) goto _L2; else goto _L8
_L8:
        fileinputstream.close();
        obj = obj1;
          goto _L2
        file;
        file.printStackTrace();
        obj = obj1;
          goto _L2
_L6:
        file = fileinputstream;
        obj = b(s.digest());
        try {
            fileinputstream.close();
        }
        // Misplaced declaration of an exception variable
        catch (File file) {
            file.printStackTrace();
        }
          goto _L2
        s;
        fileinputstream = null;
_L12:
        file = fileinputstream;
        if (ag.a(s))
            break MISSING_BLOCK_LABEL_179;
        file = fileinputstream;
        s.printStackTrace();
        obj = obj1;
        if (fileinputstream == null) goto _L2; else goto _L9
_L9:
        fileinputstream.close();
        obj = obj1;
          goto _L2
        file;
        file.printStackTrace();
        obj = obj1;
          goto _L2
        s;
        file = null;
_L11:
        if (file != null)
            try {
                file.close();
            }
            // Misplaced declaration of an exception variable
            catch (File file) {
                file.printStackTrace();
            }
        throw s;
        s;
        if (true) goto _L11; else goto _L10
_L10:
        s;
          goto _L12
        s;
        fileinputstream = null;
          goto _L13
    }

    public static String b(byte abyte0[]) {
        if (abyte0 == null) {
            abyte0 = "";
        } else {
            StringBuffer stringbuffer = new StringBuffer();
            for (int i1 = 0; i1 < abyte0.length; i1++) {
                String s = Integer.toHexString(abyte0[i1] & 0xff);
                if (s.length() == 1)
                    stringbuffer.append("0");
                stringbuffer.append(s);
            }

            abyte0 = stringbuffer.toString().toUpperCase();
        }
        return abyte0;
    }

    public static Map b(Parcel parcel) {
        Object obj = null;
        int i1 = 0;
        parcel = parcel.readBundle();
        if (parcel == null) {
            parcel = obj;
        } else {
            ArrayList arraylist = parcel.getStringArrayList("keys");
            ArrayList arraylist1 = parcel.getStringArrayList("values");
            if (arraylist != null && arraylist1 != null && arraylist.size() == arraylist1.size()) {
                parcel = new HashMap(arraylist.size());
                while (i1 < arraylist.size())  {
                    parcel.put(arraylist.get(i1), arraylist1.get(i1));
                    i1++;
                }
            } else {
                ag.e("map parcel error!", new Object[0]);
                parcel = null;
            }
        }
        return parcel;
    }

    public static void b(Parcel parcel, Map map) {
        if (map == null || map.size() <= 0) {
            parcel.writeBundle(null);
        } else {
            int i1 = map.size();
            ArrayList arraylist = new ArrayList(i1);
            ArrayList arraylist1 = new ArrayList(i1);
            java.util.Map.Entry entry;
            for (map = map.entrySet().iterator(); map.hasNext(); arraylist1.add(entry.getValue())) {
                entry = (java.util.Map.Entry)map.next();
                arraylist.add(entry.getKey());
            }

            map = new Bundle();
            map.putStringArrayList("keys", arraylist);
            map.putStringArrayList("values", arraylist1);
            parcel.writeBundle(map);
        }
    }

    public static boolean b(Context context) {
        if (android.os.Build.VERSION.SDK_INT < 14) goto _L2; else goto _L1
_L1:
        boolean flag = com.tencent.bugly.crashreport.common.info.a.a().o;
_L3:
        return flag;
_L2:
        String s;
        s = context.getPackageName();
        context = (ActivityManager)context.getSystemService("activity");
        if (context == null)
            break MISSING_BLOCK_LABEL_103;
        context = context.getRunningTasks(1);
        if (context == null)
            break MISSING_BLOCK_LABEL_86;
        if (context.isEmpty())
            break MISSING_BLOCK_LABEL_86;
        flag = ((android.app.ActivityManager.RunningTaskInfo)context.get(0)).topActivity.getPackageName().equals(s);
        if (!flag)
            break MISSING_BLOCK_LABEL_86;
        flag = true;
          goto _L3
        flag = false;
          goto _L3
        context;
        ag.e("\u65E0\u6CD5\u83B7\u53D6GET_TASK\u6743\u9650\uFF0C\u5C06\u5728\u901A\u77E5\u680F\u63D0\u9192\u5347\u7EA7\uFF0C\u5982\u9700\u5F39\u7A97\u63D0\u9192\uFF0C\u8BF7\u5728AndroidManifest.xml\u4E2D\u6DFB\u52A0GET_TASKS\u6743\u9650\uFF1A\n<uses-permission android:name=\"android.permission.GET_TASKS\" />\n", new Object[0]);
_L4:
        flag = true;
          goto _L3
        context;
        if (!com.tencent.bugly.proguard.ag.b(context))
            context.printStackTrace();
          goto _L4
    }

    public static boolean b(Context context, String s) {
        boolean flag1;
        flag1 = true;
        ag.c("[Util] try to unlock file:%s (pid=%d | tid=%d)", new Object[] {
            s, Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
        });
        Object obj = JVM INSTR new #421 <Class StringBuilder>;
        ((StringBuilder) (obj)).StringBuilder();
        obj = ((StringBuilder) (obj)).append(context.getFilesDir()).append(File.separator).append(s).toString();
        context = JVM INSTR new #83  <Class File>;
        context.File(((String) (obj)));
        boolean flag = flag1;
        if (!context.exists()) goto _L2; else goto _L1
_L1:
        if (!context.delete()) goto _L4; else goto _L3
_L3:
        ag.c("[Util] successfully unlocked file:%s (pid=%d | tid=%d)", new Object[] {
            s, Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
        });
        flag = flag1;
_L2:
        return flag;
_L4:
        flag = false;
        continue; /* Loop/switch isn't completed */
        context;
        ag.a(context);
        flag = false;
        if (true) goto _L2; else goto _L5
_L5:
    }

    public static boolean b(String s) {
        com/tencent/bugly/proguard/a;
        JVM INSTR monitorenter ;
        boolean flag = l.a.c(s);
        com/tencent/bugly/proguard/a;
        JVM INSTR monitorexit ;
        return flag;
        s;
        throw s;
    }

    public static byte[] b(int i1, byte abyte0[], byte abyte1[]) {
        try {
            Object obj = KeyFactory.getInstance("RSA");
            X509EncodedKeySpec x509encodedkeyspec = JVM INSTR new #1654 <Class X509EncodedKeySpec>;
            x509encodedkeyspec.X509EncodedKeySpec(abyte1);
            abyte1 = ((KeyFactory) (obj)).generatePublic(x509encodedkeyspec);
            obj = Cipher.getInstance("RSA/ECB/PKCS1Padding");
            ((Cipher) (obj)).init(1, abyte1);
            abyte0 = ((Cipher) (obj)).doFinal(abyte0);
        }
        // Misplaced declaration of an exception variable
        catch (byte abyte0[]) {
            if (!com.tencent.bugly.proguard.ag.b(abyte0))
                abyte0.printStackTrace();
            abyte0 = null;
        }
        return abyte0;
    }

    public static byte[] b(byte abyte0[], int i1) {
        Object obj = abyte0;
        if (abyte0 == null) goto _L2; else goto _L1
_L1:
        if (i1 != -1) goto _L4; else goto _L3
_L3:
        obj = abyte0;
_L2:
        return ((byte []) (obj));
_L4:
        int j1 = abyte0.length;
        if (i1 == 2)
            obj = "Gzip";
        else
            obj = "zip";
        ag.c("[Util] Unzip %d bytes data with type %s", new Object[] {
            Integer.valueOf(j1), obj
        });
        obj = ak.a(i1);
        if (obj == null)
            obj = null;
        else
            try {
                obj = ((al) (obj)).b(abyte0);
            }
            // Misplaced declaration of an exception variable
            catch (byte abyte0[]) {
                if (!ag.a(abyte0))
                    abyte0.printStackTrace();
                obj = null;
            }
        if (true) goto _L2; else goto _L5
_L5:
    }

    public static byte[] b(byte abyte0[], int i1, int j1, String s) {
        try {
            abyte0 = b(b(abyte0, 1, s), 2);
        }
        // Misplaced declaration of an exception variable
        catch (byte abyte0[]) {
            if (!ag.a(abyte0))
                abyte0.printStackTrace();
            abyte0 = null;
        }
        return abyte0;
    }

    public static byte[] b(byte abyte0[], int i1, String s) {
        Object obj = abyte0;
        if (abyte0 == null) goto _L2; else goto _L1
_L1:
        if (i1 != -1) goto _L4; else goto _L3
_L3:
        obj = abyte0;
_L2:
        return ((byte []) (obj));
_L4:
        if (i1 != 1) goto _L6; else goto _L5
_L5:
        obj = JVM INSTR new #1557 <Class ap>;
        ((ap) (obj)).ap();
_L7:
        if (obj == null)
            obj = null;
        else
            try {
                ((aq) (obj)).a(s);
                obj = ((aq) (obj)).a(abyte0);
            }
            // Misplaced declaration of an exception variable
            catch (byte abyte0[]) {
                if (!ag.a(abyte0))
                    abyte0.printStackTrace();
                com.tencent.bugly.proguard.ag.d("encrytype %d %s", new Object[] {
                    Integer.valueOf(i1), s
                });
                obj = null;
            }
        if (true) goto _L2; else goto _L6
_L6:
        if (i1 != 3)
            break MISSING_BLOCK_LABEL_92;
        obj = new ao();
          goto _L7
        obj = null;
          goto _L7
    }

    public static long c() {
        int i1;
        long l1;
        l1 = (System.currentTimeMillis() + (long)TimeZone.getDefault().getRawOffset()) / 0x5265c00L;
        i1 = TimeZone.getDefault().getRawOffset();
        l1 = l1 * 0x5265c00L - (long)i1;
_L2:
        return l1;
        Throwable throwable;
        throwable;
        if (!ag.a(throwable))
            throwable.printStackTrace();
        l1 = -1L;
        if (true) goto _L2; else goto _L1
_L1:
    }

    public static String c(byte abyte0[]) {
        if (abyte0 == null || abyte0.length == 0)
            abyte0 = "NULL";
        else
            try {
                MessageDigest messagedigest = MessageDigest.getInstance("SHA-1");
                messagedigest.update(abyte0);
                abyte0 = b(messagedigest.digest());
            }
            // Misplaced declaration of an exception variable
            catch (byte abyte0[]) {
                if (!ag.a(abyte0))
                    abyte0.printStackTrace();
                abyte0 = null;
            }
        return abyte0;
    }

    public static boolean c(String s) {
        boolean flag1 = false;
        boolean flag;
        if (s != null && s.trim().length() > 0)
            flag = false;
        else
            flag = true;
        if (!flag)
            if (s.length() > 255)
                ag.a("URL's length is larger than 255.", new Object[0]);
            else
            if (!s.toLowerCase().startsWith("http"))
                ag.a("URL is not start with \"http\".", new Object[0]);
            else
            if (!s.toLowerCase().contains("qq.com"))
                ag.a("URL does not contain \"qq.com\".", new Object[0]);
            else
                flag1 = true;
        return flag1;
    }

    public static long d(byte abyte0[]) {
        long l2 = -1L;
        long l1;
        if (abyte0 == null)
            l1 = l2;
        else
            try {
                String s = JVM INSTR new #75  <Class String>;
                s.String(abyte0, "utf-8");
                l1 = Long.parseLong(s);
            }
            // Misplaced declaration of an exception variable
            catch (byte abyte0[]) {
                abyte0.printStackTrace();
                l1 = l2;
            }
        return l1;
    }

    public void a(String s) {
        b = s;
    }

    public void a(String s, Object obj) {
        if (s == null)
            throw new IllegalArgumentException("put key can not is null");
        if (obj == null)
            throw new IllegalArgumentException("put value can not is null");
        if (obj instanceof Set) {
            throw new IllegalArgumentException("can not support Set");
        } else {
            Object obj1 = new i();
            ((i) (obj1)).a(b);
            ((i) (obj1)).a(obj, 0);
            byte abyte0[] = k.a(((i) (obj1)).a());
            obj1 = new HashMap(1);
            ArrayList arraylist = new ArrayList(1);
            a(arraylist, obj);
            ((HashMap) (obj1)).put(a(arraylist), abyte0);
            d.remove(s);
            a.put(s, obj1);
            return;
        }
    }

    public void a(byte abyte0[]) {
        c.a(abyte0);
        c.a(b);
        HashMap hashmap = new HashMap(1);
        abyte0 = new HashMap(1);
        abyte0.put("", new byte[0]);
        hashmap.put("", abyte0);
        a = c.a(hashmap, 0, false);
    }

    public byte[] a() {
        i i1 = new i(0);
        i1.a(b);
        i1.a(a, 0);
        return k.a(i1.a());
    }
}
