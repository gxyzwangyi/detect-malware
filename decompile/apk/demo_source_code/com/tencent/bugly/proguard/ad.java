// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.tencent.bugly.proguard;

import android.content.Context;
import android.os.Process;
import android.util.Base64;
import java.util.*;
import java.util.concurrent.LinkedBlockingQueue;

// Referenced classes of package com.tencent.bugly.proguard:
//            y, ag, a, af, 
//            aa, ae, aw, ax, 
//            ac

public final class ad {
    final class a
        implements Runnable {

        private final Context a;
        private final Runnable b;
        private final long c;
        private ad d;

        public final void run() {
            if (com.tencent.bugly.proguard.a.a(a, "security_info", 30000L)) goto _L2; else goto _L1
_L1:
            ag.c("[UploadManager] Sleep %d try to lock security file again (pid=%d | tid=%d)", new Object[] {
                Integer.valueOf(5000), Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
            });
            try {
                Thread.sleep(5000L);
            }
            catch (InterruptedException interruptedexception) {
                interruptedexception.printStackTrace();
            }
            if (com.tencent.bugly.proguard.a.a(this, "BUGLY_ASYNC_UPLOAD") == null) {
                ag.d("[UploadManager] Failed to start a thread to execute task of initializing security context, try to post it into thread pool.", new Object[0]);
                af af1 = af.a();
                if (af1 != null)
                    af1.a(this);
                else
                    ag.e("[UploadManager] Asynchronous thread pool is unavailable now, try next time.", new Object[0]);
            }
_L4:
            return;
_L2:
            if (!ad.c(d)) {
                ag.d("[UploadManager] Failed to load security info from database", new Object[0]);
                d.b(false);
            }
            if (ad.d(d) != null) {
                if (d.b()) {
                    ag.c("[UploadManager] Sucessfully got session ID, try to execute upload tasks now (pid=%d | tid=%d)", new Object[] {
                        Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
                    });
                    if (b != null)
                        ad.a(d, b, c);
                    ad.a(d, 0);
                    com.tencent.bugly.proguard.a.b(a, "security_info");
                    synchronized (ad.e(d)) {
                        ad.a(d, false);
                    }
                    continue; /* Loop/switch isn't completed */
                }
                ag.a("[UploadManager] Session ID is expired, drop it.", new Object[0]);
                d.b(true);
            }
            byte abyte0[] = com.tencent.bugly.proguard.a.a(128);
            if (abyte0 != null && abyte0.length << 3 == 128) {
                ad.a(d, abyte0);
                ag.c("[UploadManager] Execute one upload task for requesting session ID (pid=%d | tid=%d)", new Object[] {
                    Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
                });
                if (b != null)
                    ad.a(d, b, c);
                else
                    ad.a(d, 1);
            } else {
                ag.d("[UploadManager] Failed to create AES key (pid=%d | tid=%d)", new Object[] {
                    Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
                });
                d.b(false);
                com.tencent.bugly.proguard.a.b(a, "security_info");
                synchronized (ad.e(d)) {
                    ad.a(d, false);
                }
            }
            if (true) goto _L4; else goto _L3
_L3:
        }

        public a(Context context) {
            d = ad.this;
            super();
            a = context;
            b = null;
            c = 0L;
        }

        public a(Context context, Runnable runnable, long l1) {
            d = ad.this;
            super();
            a = context;
            b = runnable;
            c = l1;
        }
    }


    private static ad b = null;
    public boolean a;
    private final y c = y.a();
    private final Context d;
    private Map e;
    private LinkedBlockingQueue f;
    private LinkedBlockingQueue g;
    private final Object h = new Object();
    private String i;
    private byte j[];
    private long k;
    private byte l[];
    private long m;
    private String n;
    private long o;
    private final Object p = new Object();
    private boolean q;
    private final Object r = new Object();
    private int s;

    private ad(Context context) {
        e = new HashMap();
        f = new LinkedBlockingQueue();
        g = new LinkedBlockingQueue();
        i = null;
        j = null;
        k = 0L;
        l = null;
        m = 0L;
        n = null;
        o = 0L;
        q = false;
        a = true;
        s = 0;
        d = context;
        try {
            Class.forName("android.util.Base64");
        }
        // Misplaced declaration of an exception variable
        catch (Context context) {
            ag.a("[UploadManager] Error: Can not find Base64 class, will not use stronger security way to upload", new Object[0]);
            a = false;
        }
        if (a) {
            context = new StringBuilder();
            context.append("MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDP9x32s5pPtZBXzJBz2GWM/sbTvVO2+RvW0PH01IdaBxc/").append("fB6fbHZocC9T3nl1+J5eAFjIRVuV8vHDky7Qo82Mnh0PVvcZIEQvMMVKU8dsMQopxgsOs2gkSHJwgWdinKNS8CmWobo6pFwPUW11lMv714jAUZRq2GBOqiO2vQI6iwIDAQAB");
            i = context.toString();
        }
    }

    public static ad a() {
        com/tencent/bugly/proguard/ad;
        JVM INSTR monitorenter ;
        ad ad1 = b;
        com/tencent/bugly/proguard/ad;
        JVM INSTR monitorexit ;
        return ad1;
        Exception exception;
        exception;
        throw exception;
    }

    public static ad a(Context context) {
        com/tencent/bugly/proguard/ad;
        JVM INSTR monitorenter ;
        if (b == null) {
            ad ad1 = JVM INSTR new #2   <Class ad>;
            ad1.ad(context);
            b = ad1;
        }
        context = b;
        com/tencent/bugly/proguard/ad;
        JVM INSTR monitorexit ;
        return context;
        context;
        throw context;
    }

    static Object a(ad ad1) {
        return ad1.h;
    }

    static void a(ad ad1, int i1) {
        ad1.b(i1);
    }

    static void a(ad ad1, Runnable runnable, long l1) {
        ad1.a(runnable, l1);
    }

    private void a(Runnable runnable, long l1) {
        if (runnable == null) {
            ag.d("[UploadManager] Upload task should not be null", new Object[0]);
        } else {
            ag.c("[UploadManager] Execute synchronized upload task (pid=%d | tid=%d)", new Object[] {
                Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
            });
            Thread thread = com.tencent.bugly.proguard.a.a(runnable, "BUGLY_SYNC_UPLOAD");
            if (thread == null) {
                ag.e("[UploadManager] Failed to start a thread to execute synchronized upload task, add it to queue.", new Object[0]);
                a(runnable, true);
            } else {
                try {
                    thread.join(l1);
                }
                catch (Throwable throwable) {
                    ag.e("[UploadManager] Failed to join upload synchronized task with message: %s. Add it to queue.", new Object[] {
                        throwable.getMessage()
                    });
                    a(runnable, true);
                    b(0);
                }
            }
        }
    }

    private void a(Runnable runnable, boolean flag, boolean flag1, long l1) {
        if (runnable == null)
            ag.d("[UploadManager] Upload task should not be null", new Object[0]);
        ag.c("[UploadManager] Add upload task (pid=%d | tid=%d)", new Object[] {
            Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
        });
        if (n == null) goto _L2; else goto _L1
_L1:
        if (!b()) goto _L4; else goto _L3
_L3:
        ag.c("[UploadManager] Sucessfully got session ID, try to execute upload task now (pid=%d | tid=%d)", new Object[] {
            Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
        });
        if (flag1) {
            a(runnable, l1);
        } else {
            a(runnable, flag);
            b(0);
        }
_L6:
        return;
_L4:
        ag.a("[UploadManager] Session ID is expired, drop it (pid=%d | tid=%d)", new Object[] {
            Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
        });
        b(false);
_L2:
        synchronized (r) {
            if (!q)
                break MISSING_BLOCK_LABEL_179;
            a(runnable, flag);
        }
        continue; /* Loop/switch isn't completed */
        runnable;
        throw runnable;
        q = true;
        obj;
        JVM INSTR monitorexit ;
        ag.c("[UploadManager] Initialize security context now (pid=%d | tid=%d)", new Object[] {
            Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
        });
        if (flag1) {
            a(((Runnable) (new a(d, runnable, l1))), 0L);
        } else {
            a(runnable, flag);
            a a1 = new a(d);
            ag.a("[UploadManager] Create and start a new thread to execute a task of initializing security context: %s", new Object[] {
                "BUGLY_ASYNC_UPLOAD"
            });
            if (com.tencent.bugly.proguard.a.a(a1, "BUGLY_ASYNC_UPLOAD") == null) {
                ag.d("[UploadManager] Failed to start a thread to execute task of initializing security context, try to post it into thread pool.", new Object[0]);
                runnable = af.a();
                if (runnable != null) {
                    runnable.a(a1);
                } else {
                    ag.e("[UploadManager] Asynchronous thread pool is unavailable now, try next time.", new Object[0]);
                    synchronized (r) {
                        q = false;
                    }
                }
            }
        }
        if (true) goto _L6; else goto _L5
_L5:
    }

    static boolean a(ad ad1, boolean flag) {
        ad1.q = false;
        return false;
    }

    private boolean a(Runnable runnable, boolean flag) {
        boolean flag1 = false;
        if (runnable != null) goto _L2; else goto _L1
_L1:
        ag.a("[UploadManager] Upload task should not be null", new Object[0]);
        flag = flag1;
_L5:
        return flag;
_L2:
        ag.c("[UploadManager] Add upload task to queue (pid=%d | tid=%d)", new Object[] {
            Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
        });
        Object obj = h;
        obj;
        JVM INSTR monitorenter ;
        if (!flag)
            break MISSING_BLOCK_LABEL_77;
        f.put(runnable);
_L3:
        obj;
        JVM INSTR monitorexit ;
        flag = true;
        continue; /* Loop/switch isn't completed */
        g.put(runnable);
          goto _L3
        runnable;
        obj;
        JVM INSTR monitorexit ;
        throw runnable;
        runnable;
        ag.e("[UploadManager] Failed to add upload task to queue: %s", new Object[] {
            runnable.getMessage()
        });
        flag = flag1;
        if (true) goto _L5; else goto _L4
_L4:
    }

    static byte[] a(ad ad1, byte abyte0[]) {
        ad1.l = abyte0;
        return abyte0;
    }

    static int b(ad ad1) {
        int i1 = ad1.s - 1;
        ad1.s = i1;
        return i1;
    }

    private void b(int i1) {
        if (i1 >= 0) goto _L2; else goto _L1
_L1:
        ag.a("[UploadManager] Number of task to execute should >= 0", new Object[0]);
_L3:
        return;
_L2:
        LinkedBlockingQueue linkedblockingqueue;
        LinkedBlockingQueue linkedblockingqueue1;
        obj = af.a();
        linkedblockingqueue = new LinkedBlockingQueue();
        linkedblockingqueue1 = new LinkedBlockingQueue();
        Object obj1 = h;
        obj1;
        JVM INSTR monitorenter ;
        int j1;
        int k1;
        ag.c("[UploadManager] Try to poll all upload task need and put them into temp queue (pid=%d | tid=%d)", new Object[] {
            Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
        });
        j1 = f.size();
        k1 = g.size();
        if (j1 != 0 || k1 != 0)
            break MISSING_BLOCK_LABEL_123;
        ag.c("[UploadManager] There is no upload task in queue.", new Object[0]);
        obj1;
        JVM INSTR monitorexit ;
          goto _L3
        obj;
        throw obj;
        if (i1 == 0)
            break MISSING_BLOCK_LABEL_577;
        Runnable runnable;
        if (i1 < j1) {
            k1 = 0;
            j1 = i1;
            i1 = k1;
        } else {
            if (i1 >= j1 + k1)
                break MISSING_BLOCK_LABEL_577;
            i1 -= j1;
        }
_L14:
        if (obj == null)
            break MISSING_BLOCK_LABEL_151;
        if (((af) (obj)).c())
            break MISSING_BLOCK_LABEL_153;
        i1 = 0;
        k1 = 0;
_L5:
        if (k1 >= j1)
            break; /* Loop/switch isn't completed */
        runnable = (Runnable)f.peek();
        if (runnable == null)
            break; /* Loop/switch isn't completed */
        linkedblockingqueue.put(runnable);
        f.poll();
_L6:
        k1++;
        if (true) goto _L5; else goto _L4
        Throwable throwable;
        throwable;
        ag.e("[UploadManager] Failed to add upload task to temp urgent queue: %s", new Object[] {
            throwable.getMessage()
        });
          goto _L6
_L4:
        k1 = 0;
_L8:
        if (k1 >= i1)
            break; /* Loop/switch isn't completed */
        Runnable runnable1 = (Runnable)g.peek();
        if (runnable1 == null)
            break; /* Loop/switch isn't completed */
        linkedblockingqueue1.put(runnable1);
        g.poll();
_L9:
        k1++;
        if (true) goto _L8; else goto _L7
        runnable1;
        ag.e("[UploadManager] Failed to add upload task to temp urgent queue: %s", new Object[] {
            runnable1.getMessage()
        });
          goto _L9
_L7:
        obj1;
        JVM INSTR monitorexit ;
        if (j1 > 0)
            ag.c("[UploadManager] Execute urgent upload tasks of queue which has %d tasks (pid=%d | tid=%d)", new Object[] {
                Integer.valueOf(j1), Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
            });
        k1 = 0;
_L11:
        if (k1 >= j1)
            break MISSING_BLOCK_LABEL_509;
        runnable1 = (Runnable)linkedblockingqueue.poll();
        if (runnable1 == null)
            break MISSING_BLOCK_LABEL_509;
        obj2 = h;
        obj2;
        JVM INSTR monitorenter ;
        if (s < 2 || obj == null)
            break; /* Loop/switch isn't completed */
        ((af) (obj)).a(runnable1);
        obj2;
        JVM INSTR monitorexit ;
_L13:
        k1++;
        if (true) goto _L11; else goto _L10
_L10:
        ag.a("[UploadManager] Create and start a new thread to execute a upload task: %s", new Object[] {
            "BUGLY_ASYNC_UPLOAD"
        });
        if (com.tencent.bugly.proguard.a.a(new Runnable(runnable1) {

        private Runnable a;
        private ad b;

        public final void run() {
            a.run();
            synchronized (ad.a(b)) {
                ad.b(b);
            }
        }

             {
                b = ad.this;
                a = runnable;
                super();
            }
    }
, "BUGLY_ASYNC_UPLOAD") != null) {
            synchronized (h) {
                s = s + 1;
            }
        } else {
            ag.d("[UploadManager] Failed to start a thread to execute asynchronous upload task, will try again next time.", new Object[0]);
            a(runnable1, true);
        }
        if (true) goto _L13; else goto _L12
_L12:
          goto _L11
        obj;
        throw obj;
        if (i1 > 0)
            ag.c("[UploadManager] Execute upload tasks of queue which has %d tasks (pid=%d | tid=%d)", new Object[] {
                Integer.valueOf(i1), Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
            });
        if (obj != null)
            ((af) (obj)).a(new Runnable(i1, linkedblockingqueue1) {

                private int a;
                private LinkedBlockingQueue b;

                public final void run() {
                    int l1 = 0;
                    do {
                        if (l1 >= a)
                            break;
                        Runnable runnable2 = (Runnable)b.poll();
                        if (runnable2 == null)
                            break;
                        runnable2.run();
                        l1++;
                    } while (true);
                }

             {
                a = i1;
                b = linkedblockingqueue;
                super();
            }
            }
);
          goto _L3
        i1 = k1;
          goto _L14
    }

    private static boolean c() {
        boolean flag1;
        flag1 = false;
        ag.c("[UploadManager] Drop security info of database (pid=%d | tid=%d)", new Object[] {
            Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
        });
        y y1 = y.a();
        if (y1 != null) goto _L2; else goto _L1
_L1:
        ag.d("[UploadManager] Failed to get Database", new Object[0]);
        boolean flag = flag1;
_L4:
        return flag;
_L2:
        try {
            flag = y1.a(555, "security_info", null, true);
        }
        catch (Throwable throwable) {
            ag.a(throwable);
            flag = flag1;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    static boolean c(ad ad1) {
        return ad1.e();
    }

    static String d(ad ad1) {
        return ad1.n;
    }

    private boolean d() {
        ag.c("[UploadManager] Record security info to database (pid=%d | tid=%d)", new Object[] {
            Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
        });
        y y1 = y.a();
        if (y1 != null) goto _L2; else goto _L1
_L1:
        ag.d("[UploadManager] Failed to get database", new Object[0]);
        boolean flag = false;
_L9:
        return flag;
_L2:
        StringBuilder stringbuilder;
        stringbuilder = JVM INSTR new #110 <Class StringBuilder>;
        stringbuilder.StringBuilder();
        if (l == null) goto _L4; else goto _L3
_L3:
        stringbuilder.append(Base64.encodeToString(l, 0));
        stringbuilder.append("#");
        if (m == 0L) goto _L6; else goto _L5
_L5:
        stringbuilder.append(Long.toString(m));
_L10:
        stringbuilder.append("#");
        if (n == null) goto _L8; else goto _L7
_L7:
        stringbuilder.append(n);
_L11:
        stringbuilder.append("#");
        if (o == 0L)
            break MISSING_BLOCK_LABEL_240;
        stringbuilder.append(Long.toString(o));
_L12:
        y1.a(555, "security_info", stringbuilder.toString().getBytes(), null, true);
        flag = true;
          goto _L9
_L4:
        ag.c("[UploadManager] AES key is null, will not record", new Object[0]);
        flag = false;
          goto _L9
_L6:
        stringbuilder.append("null");
          goto _L10
        Throwable throwable;
        throwable;
        ag.a(throwable);
        c();
        flag = false;
          goto _L9
_L8:
        stringbuilder.append("null");
          goto _L11
        stringbuilder.append("null");
          goto _L12
    }

    static Object e(ad ad1) {
        return ad1.r;
    }

    private boolean e() {
        ag.c("[UploadManager] Load security info from database (pid=%d | tid=%d)", new Object[] {
            Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
        });
        Object obj = y.a();
        if (obj != null) goto _L2; else goto _L1
_L1:
        ag.d("[UploadManager] Failed to get database", new Object[0]);
        boolean flag2 = false;
_L9:
        return flag2;
_L2:
        obj = ((y) (obj)).a(555, null, true);
        if (obj == null) goto _L4; else goto _L3
_L3:
        if (!((Map) (obj)).containsKey("security_info")) goto _L4; else goto _L5
_L5:
        Object obj1;
        obj1 = JVM INSTR new #312 <Class String>;
        ((String) (obj1)).String((byte[])((Map) (obj)).get("security_info"));
        obj = ((String) (obj1)).split("#");
        if (obj.length != 4) goto _L7; else goto _L6
_L6:
        if (obj[0].isEmpty())
            break MISSING_BLOCK_LABEL_389;
        flag2 = obj[0].equals("null");
        if (flag2)
            break MISSING_BLOCK_LABEL_389;
        l = Base64.decode(obj[0], 0);
        boolean flag = false;
_L10:
        boolean flag1;
        flag1 = flag;
        if (flag)
            break MISSING_BLOCK_LABEL_211;
        flag1 = flag;
        if (obj[1].isEmpty())
            break MISSING_BLOCK_LABEL_211;
        flag2 = obj[1].equals("null");
        flag1 = flag;
        if (flag2)
            break MISSING_BLOCK_LABEL_211;
        m = Long.parseLong(obj[1]);
        flag1 = flag;
_L11:
        if (flag1)
            break MISSING_BLOCK_LABEL_246;
        if (!obj[2].isEmpty() && !obj[2].equals("null"))
            n = obj[2];
        flag = flag1;
        if (flag1)
            break MISSING_BLOCK_LABEL_294;
        flag = flag1;
        if (obj[3].isEmpty())
            break MISSING_BLOCK_LABEL_294;
        flag2 = obj[3].equals("null");
        flag = flag1;
        if (flag2)
            break MISSING_BLOCK_LABEL_294;
        o = Long.parseLong(obj[3]);
        flag = flag1;
_L12:
        if (!flag) goto _L4; else goto _L8
_L8:
        c();
_L4:
        flag2 = true;
          goto _L9
        obj1;
        ag.a(((Throwable) (obj1)));
        flag = true;
          goto _L10
        obj1;
        ag.a(((Throwable) (obj1)));
        flag1 = true;
          goto _L11
        obj;
        ag.a(((Throwable) (obj)));
        flag = true;
          goto _L12
_L7:
        ag.a("SecurityInfo = %s, Strings.length = %d", new Object[] {
            obj1, Integer.valueOf(obj.length)
        });
        flag = true;
          goto _L12
        Throwable throwable;
        throwable;
        ag.a(throwable);
        flag2 = false;
          goto _L9
        flag = false;
          goto _L10
    }

    public final long a(int i1) {
        this;
        JVM INSTR monitorenter ;
        if (i1 < 0) goto _L2; else goto _L1
_L1:
        Long long1 = (Long)e.get(Integer.valueOf(i1));
        if (long1 != null) goto _L4; else goto _L3
_L3:
        long l1 = -2L;
_L6:
        this;
        JVM INSTR monitorexit ;
        return l1;
_L4:
        l1 = long1.longValue();
        continue; /* Loop/switch isn't completed */
_L2:
        ag.e("unknown up %d", new Object[] {
            Integer.valueOf(i1)
        });
        l1 = -2L;
        if (true) goto _L6; else goto _L5
_L5:
        Exception exception;
        exception;
        throw exception;
    }

    public final long a(boolean flag) {
        byte byte0;
        long l1;
        long l2;
        long l3 = 0L;
        long l4 = com.tencent.bugly.proguard.a.c();
        List list;
        Object obj;
        if (flag)
            byte0 = 5;
        else
            byte0 = 3;
        list = c.a(byte0);
        if (list == null || list.size() <= 0) goto _L2; else goto _L1
_L1:
        l2 = l3;
        obj = (aa)list.get(0);
        l1 = l3;
        l2 = l3;
        if (((aa) (obj)).e < l4)
            break MISSING_BLOCK_LABEL_100;
        l2 = l3;
        l1 = com.tencent.bugly.proguard.a.d(((aa) (obj)).g);
        l2 = l1;
        try {
            list.remove(obj);
        }
        catch (Throwable throwable) {
            ag.e("error local type %d", new Object[] {
                Integer.valueOf(byte0)
            });
            l1 = l2;
        }
        l2 = l1;
        if (list.size() > 0) {
            obj = c;
            y.a(list);
            l2 = l1;
        }
_L4:
        ag.c("consume getted %d", new Object[] {
            Long.valueOf(l2)
        });
        return l2;
_L2:
        l2 = 0L;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public final void a(int i1, int j1, byte abyte0[], String s1, String s2, ac ac, int k1, 
            int l1, boolean flag, Map map) {
        ae ae1 = JVM INSTR new #409 <Class ae>;
        ae1.ae(d, i1, j1, abyte0, s1, s2, ac, a, k1, l1, false, map);
        a(((Runnable) (ae1)), flag, false, 0L);
_L1:
        return;
        abyte0;
        if (!ag.a(abyte0))
            abyte0.printStackTrace();
          goto _L1
    }

    public final void a(int i1, int j1, byte abyte0[], String s1, String s2, ac ac, boolean flag, 
            Map map) {
        a(1002, j1, abyte0, s1, s2, ac, 0, 0, false, map);
    }

    public final void a(int i1, long l1) {
        this;
        JVM INSTR monitorenter ;
        if (i1 < 0)
            break MISSING_BLOCK_LABEL_52;
        e.put(Integer.valueOf(i1), Long.valueOf(l1));
        ag.c("up %d %d", new Object[] {
            Integer.valueOf(i1), Long.valueOf(l1)
        });
_L1:
        this;
        JVM INSTR monitorexit ;
        return;
        ag.e("unknown up %d", new Object[] {
            Integer.valueOf(i1)
        });
          goto _L1
        Exception exception;
        exception;
        throw exception;
    }

    public final void a(int i1, aw aw1, String s1, String s2, ac ac, long l1, 
            boolean flag) {
        int j1;
        j1 = aw1.g;
        aw1 = com.tencent.bugly.proguard.a.a(aw1);
        ae ae1 = JVM INSTR new #409 <Class ae>;
        ae1.ae(d, i1, j1, aw1, s1, s2, ac, a, flag);
        a(((Runnable) (ae1)), true, true, l1);
_L1:
        return;
        aw1;
        if (!ag.a(aw1))
            aw1.printStackTrace();
          goto _L1
    }

    public final void a(int i1, aw aw1, String s1, String s2, ac ac, boolean flag) {
        a(i1, aw1.g, com.tencent.bugly.proguard.a.a(aw1), s1, s2, ac, 0, 0, flag, null);
    }

    public final void a(int i1, ax ax1) {
        boolean flag;
        boolean flag1;
        boolean flag2;
        flag1 = true;
        flag2 = true;
        flag = true;
        if (a) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (i1 != 2) goto _L4; else goto _L3
_L3:
        ag.c("[UploadManager] Session ID is invalid, will clear security context (pid=%d | tid=%d)", new Object[] {
            Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
        });
        b(true);
_L13:
        synchronized (r) {
            if (q) {
                q = false;
                com.tencent.bugly.proguard.a.b(d, "security_info");
            }
        }
          goto _L1
_L4:
        synchronized (r) {
            if (q)
                break MISSING_BLOCK_LABEL_128;
        }
          goto _L1
        ax1;
        throw ax1;
        obj1;
        JVM INSTR monitorexit ;
        int j1;
        if (ax1 == null)
            break MISSING_BLOCK_LABEL_541;
        ag.c("[UploadManager] Record security context (pid=%d | tid=%d)", new Object[] {
            Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
        });
        j1 = ((flag2) ? 1 : 0);
        Map map = ax1.g;
        i1 = ((flag1) ? 1 : 0);
        if (map == null) goto _L6; else goto _L5
_L5:
        i1 = ((flag1) ? 1 : 0);
        j1 = ((flag2) ? 1 : 0);
        if (!map.containsKey("S1")) goto _L6; else goto _L7
_L7:
        i1 = ((flag1) ? 1 : 0);
        j1 = ((flag2) ? 1 : 0);
        if (!map.containsKey("S2")) goto _L6; else goto _L8
_L8:
        j1 = ((flag2) ? 1 : 0);
        k = ax1.e - System.currentTimeMillis();
        j1 = ((flag2) ? 1 : 0);
        ag.c("[UploadManager] Time lag of server is: %d", new Object[] {
            Long.valueOf(k)
        });
        j1 = ((flag2) ? 1 : 0);
        n = (String)map.get("S1");
        j1 = ((flag2) ? 1 : 0);
        ag.c("[UploadManager] Session ID from server is: %s", new Object[] {
            n
        });
        j1 = ((flag2) ? 1 : 0);
        i1 = n.length();
        if (i1 <= 0) goto _L10; else goto _L9
_L9:
        j1 = ((flag2) ? 1 : 0);
        o = Long.parseLong((String)map.get("S2"));
        j1 = ((flag2) ? 1 : 0);
        long l1 = o;
        j1 = ((flag2) ? 1 : 0);
        ax1 = JVM INSTR new #474 <Class Date>;
        j1 = ((flag2) ? 1 : 0);
        ax1.Date(o);
        j1 = ((flag2) ? 1 : 0);
        ag.c("[UploadManager] Session expired time from server is: %d(%s)", new Object[] {
            Long.valueOf(l1), ax1.toString()
        });
        j1 = ((flag2) ? 1 : 0);
        if (o >= 1000L)
            break MISSING_BLOCK_LABEL_431;
        j1 = ((flag2) ? 1 : 0);
        ag.d("[UploadManager] Session expired time from server is less than 1 second, will set to default value", new Object[0]);
        j1 = ((flag2) ? 1 : 0);
        o = 0xf731400L;
_L14:
        j1 = ((flag2) ? 1 : 0);
        if (!d()) goto _L12; else goto _L11
_L11:
        i1 = 0;
_L15:
        j1 = i1;
        try {
            b(0);
        }
        // Misplaced declaration of an exception variable
        catch (ax ax1) {
            ag.a(ax1);
            i1 = j1;
        }
_L6:
        if (i1 != 0)
            b(false);
          goto _L13
        ax1;
        j1 = ((flag2) ? 1 : 0);
        ag.d("[UploadManager] Session expired time is invalid, will set to default value", new Object[0]);
        j1 = ((flag2) ? 1 : 0);
        o = 0xf731400L;
          goto _L14
_L12:
        j1 = ((flag2) ? 1 : 0);
        ag.c("[UploadManager] Failed to record database", new Object[0]);
        i1 = ((flag) ? 1 : 0);
          goto _L15
_L10:
        j1 = ((flag2) ? 1 : 0);
        ag.c("[UploadManager] Session ID from server is invalid, try next time", new Object[0]);
        i1 = ((flag1) ? 1 : 0);
          goto _L6
        ag.c("[UploadManager] Fail to init security context and clear local info (pid=%d | tid=%d)", new Object[] {
            Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
        });
        b(false);
          goto _L13
    }

    protected final void a(long l1, boolean flag) {
        this;
        JVM INSTR monitorenter ;
        int i1;
        aa aa1;
        y y1;
        if (flag)
            i1 = 5;
        else
            i1 = 3;
        aa1 = JVM INSTR new #386 <Class aa>;
        aa1.aa();
        aa1.b = i1;
        aa1.e = com.tencent.bugly.proguard.a.c();
        aa1.c = "";
        aa1.d = "";
        aa1.g = com.tencent.bugly.proguard.a.a(l1);
        y1 = c;
        y.b(i1);
        c.a(aa1);
        ag.c("consume update %d", new Object[] {
            Long.valueOf(l1)
        });
        this;
        JVM INSTR monitorexit ;
        return;
        Exception exception;
        exception;
        throw exception;
    }

    public final boolean a(Map map) {
        boolean flag = false;
        if (map != null) goto _L2; else goto _L1
_L1:
        return flag;
_L2:
        ag.c("[UploadManager] Integrate security to HTTP headers (pid=%d | tid=%d)", new Object[] {
            Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
        });
        if (n != null) {
            map.put("secureSessionId", n);
            flag = true;
            continue; /* Loop/switch isn't completed */
        }
        if (l == null || l.length << 3 != 128) {
            ag.d("[UploadManager] AES key is invalid", new Object[0]);
            continue; /* Loop/switch isn't completed */
        }
        if (j == null) {
            j = Base64.decode(i, 0);
            if (j == null) {
                ag.d("[UploadManager] Failed to decode RSA public key", new Object[0]);
                continue; /* Loop/switch isn't completed */
            }
        }
        byte abyte0[] = com.tencent.bugly.proguard.a.b(1, l, j);
        if (abyte0 == null) {
            ag.d("[UploadManager] Failed to encrypt AES key", new Object[0]);
        } else {
            String s1 = Base64.encodeToString(abyte0, 0);
            if (s1 == null) {
                ag.d("[UploadManager] Failed to encode AES key", new Object[0]);
            } else {
                map.put("raKey", s1);
                flag = true;
            }
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    public final byte[] a(byte abyte0[]) {
        if (l == null || l.length << 3 != 128) {
            ag.d("[UploadManager] AES key is invalid (pid=%d | tid=%d)", new Object[] {
                Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
            });
            abyte0 = null;
        } else {
            abyte0 = com.tencent.bugly.proguard.a.a(1, abyte0, l);
        }
        return abyte0;
    }

    protected final void b(boolean flag) {
        synchronized (p) {
            ag.c("[UploadManager] Clear security context (pid=%d | tid=%d)", new Object[] {
                Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
            });
            l = null;
            n = null;
            o = 0L;
        }
        if (flag)
            c();
    }

    protected final boolean b() {
        boolean flag1 = false;
        boolean flag = flag1;
        if (n != null)
            if (o == 0L) {
                flag = flag1;
            } else {
                long l1 = System.currentTimeMillis() + k;
                if (o < l1) {
                    ag.c("[UploadManager] Session ID expired time from server is: %d(%s), but now is: %d(%s)", new Object[] {
                        Long.valueOf(o), (new Date(o)).toString(), Long.valueOf(l1), (new Date(l1)).toString()
                    });
                    flag = flag1;
                } else {
                    flag = true;
                }
            }
        return flag;
    }

    public final byte[] b(byte abyte0[]) {
        if (l == null || l.length << 3 != 128) {
            ag.d("[UploadManager] AES key is invalid (pid=%d | tid=%d)", new Object[] {
                Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
            });
            abyte0 = null;
        } else {
            abyte0 = com.tencent.bugly.proguard.a.a(2, abyte0, l);
        }
        return abyte0;
    }

}
