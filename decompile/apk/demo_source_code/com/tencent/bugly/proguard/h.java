// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.tencent.bugly.proguard;

import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.util.*;

// Referenced classes of package com.tencent.bugly.proguard:
//            g, j

public final class h {
    public static final class a {

        public byte a;
        public int b;

        public a() {
        }
    }


    private ByteBuffer a;
    private String b;

    public h() {
        b = "GBK";
    }

    public h(byte abyte0[]) {
        b = "GBK";
        a = ByteBuffer.wrap(abyte0);
    }

    public h(byte abyte0[], int k) {
        b = "GBK";
        a = ByteBuffer.wrap(abyte0);
        a.position(4);
    }

    private double a(double d1, int k, boolean flag) {
        if (!a(k)) goto _L2; else goto _L1
_L1:
        a a1;
        a1 = new a();
        a(a1, a);
        a1.a;
        JVM INSTR lookupswitch 3: default 68
    //                   4: 82
    //                   5: 94
    //                   12: 78;
           goto _L3 _L4 _L5 _L6
_L3:
        throw new g("type mismatch.");
_L6:
        d1 = 0.0D;
_L7:
        return d1;
_L4:
        d1 = a.getFloat();
        continue; /* Loop/switch isn't completed */
_L5:
        d1 = a.getDouble();
        if (true) goto _L7; else goto _L2
_L2:
        if (flag)
            throw new g("require field not exist.");
        if (true) goto _L7; else goto _L8
_L8:
    }

    private float a(float f1, int k, boolean flag) {
        if (!a(k)) goto _L2; else goto _L1
_L1:
        a a1;
        a1 = new a();
        a(a1, a);
        a1.a;
        JVM INSTR lookupswitch 2: default 60
    //                   4: 74
    //                   12: 70;
           goto _L3 _L4 _L5
_L3:
        throw new g("type mismatch.");
_L5:
        f1 = 0.0F;
_L7:
        return f1;
_L4:
        f1 = a.getFloat();
        if (true)
            continue; /* Loop/switch isn't completed */
_L2:
        if (flag)
            throw new g("require field not exist.");
        if (true) goto _L7; else goto _L6
_L6:
    }

    private static int a(a a1, ByteBuffer bytebuffer) {
        byte byte0 = bytebuffer.get();
        a1.a = (byte)(byte0 & 0xf);
        a1.b = (byte0 & 0xf0) >> 4;
        if (a1.b == 15) {
            a1.b = bytebuffer.get();
            byte0 = 2;
        } else {
            byte0 = 1;
        }
        return byte0;
    }

    private Map a(Map map, Map map1, int k, boolean flag) {
        if (map1 != null && !map1.isEmpty()) goto _L2; else goto _L1
_L1:
        map1 = new HashMap();
_L4:
        return map1;
_L2:
        map1 = (java.util.Map.Entry)map1.entrySet().iterator().next();
        Object obj = map1.getKey();
        Object obj1 = map1.getValue();
        if (a(k)) {
            map1 = new a();
            a(((a) (map1)), a);
            int l;
            switch (((a) (map1)).a) {
            default:
                throw new g("type mismatch.");

            case 8: // '\b'
                l = a(0, 0, true);
                break;
            }
            if (l < 0)
                throw new g((new StringBuilder("size invalid: ")).append(l).toString());
            k = 0;
            do {
                map1 = map;
                if (k >= l)
                    continue; /* Loop/switch isn't completed */
                map.put(a(obj, 0, true), a(obj1, 1, true));
                k++;
            } while (true);
        }
        map1 = map;
        if (flag)
            throw new g("require field not exist.");
        if (true) goto _L4; else goto _L3
_L3:
    }

    private void a() {
        a a1 = new a();
        do {
            a(a1, a);
            a(a1.a);
        } while (a1.a != 11);
    }

    private void a(byte byte0) {
        byte byte1;
        int l;
        l = 0;
        byte1 = 0;
        byte0;
        JVM INSTR tableswitch 0 13: default 76
    //                   0 86
    //                   1 104
    //                   2 124
    //                   3 144
    //                   4 165
    //                   5 185
    //                   6 206
    //                   7 246
    //                   8 274
    //                   9 325
    //                   10 466
    //                   11 103
    //                   12 103
    //                   13 374;
           goto _L1 _L2 _L3 _L4 _L5 _L6 _L7 _L8 _L9 _L10 _L11 _L12 _L13 _L13 _L14
_L13:
        break; /* Loop/switch isn't completed */
_L1:
        throw new g("invalid type.");
_L2:
        a.position(a.position() + 1);
_L16:
        return;
_L3:
        a.position(2 + a.position());
        continue; /* Loop/switch isn't completed */
_L4:
        a.position(a.position() + 4);
        continue; /* Loop/switch isn't completed */
_L5:
        a.position(a.position() + 8);
        continue; /* Loop/switch isn't completed */
_L6:
        a.position(a.position() + 4);
        continue; /* Loop/switch isn't completed */
_L7:
        a.position(a.position() + 8);
        continue; /* Loop/switch isn't completed */
_L8:
        byte1 = a.get();
        byte0 = byte1;
        if (byte1 < 0)
            byte0 = byte1 + 256;
        a.position(byte0 + a.position());
        continue; /* Loop/switch isn't completed */
_L9:
        byte0 = a.getInt();
        a.position(byte0 + a.position());
        continue; /* Loop/switch isn't completed */
_L10:
        l = a(0, 0, true);
        byte0 = byte1;
        while (byte0 < l << 1)  {
            a a1 = new a();
            a(a1, a);
            a(a1.a);
            byte0++;
        }
        continue; /* Loop/switch isn't completed */
_L11:
        int k = a(0, 0, true);
        byte0 = l;
        while (byte0 < k)  {
            a a2 = new a();
            a(a2, a);
            a(a2.a);
            byte0++;
        }
        continue; /* Loop/switch isn't completed */
_L14:
        a a3 = new a();
        a(a3, a);
        if (a3.a != 0)
            throw new g((new StringBuilder("skipField with invalid type, type value: ")).append(byte0).append(", ").append(a3.a).toString());
        byte0 = a(0, 0, true);
        a.position(byte0 + a.position());
        continue; /* Loop/switch isn't completed */
_L12:
        a();
        if (true) goto _L16; else goto _L15
_L15:
    }

    private boolean a(int k) {
        boolean flag1 = false;
        a a1;
        a1 = JVM INSTR new #6   <Class h$a>;
        a1.a();
_L3:
        int l = a(a1, a.duplicate());
        if (k > a1.b && a1.a != 11) goto _L2; else goto _L1
_L1:
        boolean flag = flag1;
        if (k == a1.b)
            flag = true;
_L4:
        return flag;
_L2:
        a.position(l + a.position());
        a(a1.a);
          goto _L3
        Object obj;
        obj;
        flag = flag1;
          goto _L4
        obj;
        flag = flag1;
          goto _L4
    }

    private Object[] a(Object aobj[], int k, boolean flag) {
        if (aobj == null || aobj.length == 0)
            throw new g("unable to get type of key and value.");
        else
            return b(aobj[0], k, flag);
    }

    private Object[] b(Object obj, int k, boolean flag) {
        Object aobj[];
        if (a(k)) {
            a a1 = new a();
            a(a1, a);
            int l;
            switch (a1.a) {
            default:
                throw new g("type mismatch.");

            case 9: // '\t'
                l = a(0, 0, true);
                break;
            }
            if (l < 0)
                throw new g((new StringBuilder("size invalid: ")).append(l).toString());
            Object aobj1[] = (Object[])Array.newInstance(obj.getClass(), l);
            k = 0;
            do {
                aobj = aobj1;
                if (k >= l)
                    break;
                aobj1[k] = a(obj, 0, true);
                k++;
            } while (true);
        } else {
            if (flag)
                throw new g("require field not exist.");
            aobj = null;
        }
        return aobj;
    }

    private boolean[] d(int k, boolean flag) {
        boolean aflag[] = null;
        if (a(k)) {
            aflag = new a();
            a(aflag, a);
            int l;
            switch (((a) (aflag)).a) {
            default:
                throw new g("type mismatch.");

            case 9: // '\t'
                l = a(0, 0, true);
                break;
            }
            if (l < 0)
                throw new g((new StringBuilder("size invalid: ")).append(l).toString());
            aflag = new boolean[l];
            k = 0;
            while (k < l)  {
                if (a((byte)0, 0, true) != 0)
                    flag = true;
                else
                    flag = false;
                aflag[k] = flag;
                k++;
            }
        } else
        if (flag)
            throw new g("require field not exist.");
        return aflag;
    }

    private short[] e(int k, boolean flag) {
        short aword0[] = null;
        if (a(k)) {
            aword0 = new a();
            a(aword0, a);
            int l;
            switch (((a) (aword0)).a) {
            default:
                throw new g("type mismatch.");

            case 9: // '\t'
                l = a(0, 0, true);
                break;
            }
            if (l < 0)
                throw new g((new StringBuilder("size invalid: ")).append(l).toString());
            short aword1[] = new short[l];
            k = 0;
            do {
                aword0 = aword1;
                if (k >= l)
                    break;
                aword1[k] = a(aword1[0], 0, true);
                k++;
            } while (true);
        } else
        if (flag)
            throw new g("require field not exist.");
        return aword0;
    }

    private int[] f(int k, boolean flag) {
        int ai[] = null;
        if (a(k)) {
            ai = new a();
            a(ai, a);
            int l;
            switch (((a) (ai)).a) {
            default:
                throw new g("type mismatch.");

            case 9: // '\t'
                l = a(0, 0, true);
                break;
            }
            if (l < 0)
                throw new g((new StringBuilder("size invalid: ")).append(l).toString());
            int ai1[] = new int[l];
            k = 0;
            do {
                ai = ai1;
                if (k >= l)
                    break;
                ai1[k] = a(ai1[0], 0, true);
                k++;
            } while (true);
        } else
        if (flag)
            throw new g("require field not exist.");
        return ai;
    }

    private long[] g(int k, boolean flag) {
        long al[] = null;
        if (a(k)) {
            al = new a();
            a(al, a);
            int l;
            switch (((a) (al)).a) {
            default:
                throw new g("type mismatch.");

            case 9: // '\t'
                l = a(0, 0, true);
                break;
            }
            if (l < 0)
                throw new g((new StringBuilder("size invalid: ")).append(l).toString());
            long al1[] = new long[l];
            k = 0;
            do {
                al = al1;
                if (k >= l)
                    break;
                al1[k] = a(al1[0], 0, true);
                k++;
            } while (true);
        } else
        if (flag)
            throw new g("require field not exist.");
        return al;
    }

    private float[] h(int k, boolean flag) {
        float af[] = null;
        if (a(k)) {
            af = new a();
            a(af, a);
            int l;
            switch (((a) (af)).a) {
            default:
                throw new g("type mismatch.");

            case 9: // '\t'
                l = a(0, 0, true);
                break;
            }
            if (l < 0)
                throw new g((new StringBuilder("size invalid: ")).append(l).toString());
            float af1[] = new float[l];
            k = 0;
            do {
                af = af1;
                if (k >= l)
                    break;
                af1[k] = a(af1[0], 0, true);
                k++;
            } while (true);
        } else
        if (flag)
            throw new g("require field not exist.");
        return af;
    }

    private double[] i(int k, boolean flag) {
        double ad[] = null;
        if (a(k)) {
            ad = new a();
            a(ad, a);
            int l;
            switch (((a) (ad)).a) {
            default:
                throw new g("type mismatch.");

            case 9: // '\t'
                l = a(0, 0, true);
                break;
            }
            if (l < 0)
                throw new g((new StringBuilder("size invalid: ")).append(l).toString());
            double ad1[] = new double[l];
            k = 0;
            do {
                ad = ad1;
                if (k >= l)
                    break;
                ad1[k] = a(ad1[0], 0, true);
                k++;
            } while (true);
        } else
        if (flag)
            throw new g("require field not exist.");
        return ad;
    }

    public final byte a(byte byte0, int k, boolean flag) {
        if (!a(k)) goto _L2; else goto _L1
_L1:
        a a1;
        a1 = new a();
        a(a1, a);
        a1.a;
        JVM INSTR lookupswitch 2: default 60
    //                   0: 74
    //                   12: 70;
           goto _L3 _L4 _L5
_L3:
        throw new g("type mismatch.");
_L5:
        byte0 = 0;
_L7:
        return byte0;
_L4:
        byte0 = a.get();
        if (true)
            continue; /* Loop/switch isn't completed */
_L2:
        if (flag)
            throw new g("require field not exist.");
        if (true) goto _L7; else goto _L6
_L6:
    }

    public final int a(int k, int l, boolean flag) {
        if (!a(l)) goto _L2; else goto _L1
_L1:
        a a1;
        a1 = new a();
        a(a1, a);
        a1.a;
        JVM INSTR lookupswitch 4: default 76
    //                   0: 90
    //                   1: 101
    //                   2: 112
    //                   12: 86;
           goto _L3 _L4 _L5 _L6 _L7
_L3:
        throw new g("type mismatch.");
_L7:
        k = 0;
_L8:
        return k;
_L4:
        k = a.get();
        continue; /* Loop/switch isn't completed */
_L5:
        k = a.getShort();
        continue; /* Loop/switch isn't completed */
_L6:
        k = a.getInt();
        if (true) goto _L8; else goto _L2
_L2:
        if (flag)
            throw new g("require field not exist.");
        if (true) goto _L8; else goto _L9
_L9:
    }

    public final int a(String s) {
        b = s;
        return 0;
    }

    public final long a(long l, int k, boolean flag) {
        if (!a(k)) goto _L2; else goto _L1
_L1:
        a a1;
        a1 = new a();
        a(a1, a);
        a1.a;
        JVM INSTR lookupswitch 5: default 84
    //                   0: 98
    //                   1: 110
    //                   2: 122
    //                   3: 134
    //                   12: 94;
           goto _L3 _L4 _L5 _L6 _L7 _L8
_L3:
        throw new g("type mismatch.");
_L8:
        l = 0L;
_L9:
        return l;
_L4:
        l = a.get();
        continue; /* Loop/switch isn't completed */
_L5:
        l = a.getShort();
        continue; /* Loop/switch isn't completed */
_L6:
        l = a.getInt();
        continue; /* Loop/switch isn't completed */
_L7:
        l = a.getLong();
        if (true) goto _L9; else goto _L2
_L2:
        if (flag)
            throw new g("require field not exist.");
        if (true) goto _L9; else goto _L10
_L10:
    }

    public final j a(j j1, int k, boolean flag) {
        a a1 = null;
        if (a(k)) {
            try {
                j1 = (j)j1.getClass().newInstance();
            }
            // Misplaced declaration of an exception variable
            catch (j j1) {
                throw new g(j1.getMessage());
            }
            a1 = new a();
            a(a1, a);
            if (a1.a != 10)
                throw new g("type mismatch.");
            j1.a(this);
            a();
        } else {
            j1 = a1;
            if (flag)
                throw new g("require field not exist.");
        }
        return j1;
    }

    public final Object a(Object obj, int k, boolean flag) {
        boolean flag1 = false;
        boolean flag2 = false;
        if (obj instanceof Byte)
            obj = Byte.valueOf(a((byte)0, k, flag));
        else
        if (obj instanceof Boolean) {
            if (a((byte)0, k, flag) != 0)
                flag2 = true;
            obj = Boolean.valueOf(flag2);
        } else
        if (obj instanceof Short)
            obj = Short.valueOf(a((short)0, k, flag));
        else
        if (obj instanceof Integer)
            obj = Integer.valueOf(a(0, k, flag));
        else
        if (obj instanceof Long)
            obj = Long.valueOf(a(0L, k, flag));
        else
        if (obj instanceof Float)
            obj = Float.valueOf(a(0.0F, k, flag));
        else
        if (obj instanceof Double)
            obj = Double.valueOf(a(0.0D, k, flag));
        else
        if (obj instanceof String)
            obj = String.valueOf(b(k, flag));
        else
        if (obj instanceof Map) {
            obj = (Map)obj;
            obj = (HashMap)a(((Map) (new HashMap())), ((Map) (obj)), k, flag);
        } else
        if (obj instanceof List) {
            obj = (List)obj;
            if (obj == null || ((List) (obj)).isEmpty()) {
                obj = new ArrayList();
            } else {
                Object aobj[] = b(((List) (obj)).get(0), k, flag);
                if (aobj == null) {
                    obj = null;
                } else {
                    obj = new ArrayList();
                    k = ((flag1) ? 1 : 0);
                    while (k < aobj.length)  {
                        ((ArrayList) (obj)).add(aobj[k]);
                        k++;
                    }
                }
            }
        } else
        if (obj instanceof j)
            obj = a((j)obj, k, flag);
        else
        if (obj.getClass().isArray()) {
            if ((obj instanceof byte[]) || (obj instanceof Byte[]))
                obj = c(k, flag);
            else
            if (obj instanceof boolean[])
                obj = d(k, flag);
            else
            if (obj instanceof short[])
                obj = e(k, flag);
            else
            if (obj instanceof int[])
                obj = f(k, flag);
            else
            if (obj instanceof long[])
                obj = g(k, flag);
            else
            if (obj instanceof float[])
                obj = h(k, flag);
            else
            if (obj instanceof double[])
                obj = i(k, flag);
            else
                obj = ((Object) (a((Object[])obj, k, flag)));
        } else {
            throw new g("read object error: unsupport type.");
        }
        return obj;
    }

    public final HashMap a(Map map, int k, boolean flag) {
        return (HashMap)a(((Map) (new HashMap())), map, k, flag);
    }

    public final short a(short word0, int k, boolean flag) {
        if (!a(k)) goto _L2; else goto _L1
_L1:
        a a1;
        a1 = new a();
        a(a1, a);
        a1.a;
        JVM INSTR lookupswitch 3: default 68
    //                   0: 82
    //                   1: 94
    //                   12: 78;
           goto _L3 _L4 _L5 _L6
_L3:
        throw new g("type mismatch.");
_L6:
        word0 = 0;
_L7:
        return word0;
_L4:
        word0 = a.get();
        continue; /* Loop/switch isn't completed */
_L5:
        word0 = a.getShort();
        if (true) goto _L7; else goto _L2
_L2:
        if (flag)
            throw new g("require field not exist.");
        if (true) goto _L7; else goto _L8
_L8:
    }

    public final void a(byte abyte0[]) {
        if (a != null)
            a.clear();
        a = ByteBuffer.wrap(abyte0);
    }

    public final boolean a(int k, boolean flag) {
        boolean flag1 = false;
        if (a((byte)0, k, flag) != 0)
            flag1 = true;
        return flag1;
    }

    public final String b(int k, boolean flag) {
        Object obj = null;
        if (!a(k)) goto _L2; else goto _L1
_L1:
        obj = new a();
        a(((a) (obj)), a);
        ((a) (obj)).a;
        JVM INSTR tableswitch 6 7: default 56
    //                   6 66
    //                   7 136;
           goto _L3 _L4 _L5
_L3:
        throw new g("type mismatch.");
_L4:
        byte byte0 = a.get();
        k = byte0;
        if (byte0 < 0)
            k = byte0 + 256;
        byte abyte0[] = new byte[k];
        a.get(abyte0);
        try {
            obj = JVM INSTR new #261 <Class String>;
            ((String) (obj)).String(abyte0, b);
        }
        // Misplaced declaration of an exception variable
        catch (Object obj) {
            obj = new String(abyte0);
        }
_L7:
        return ((String) (obj));
_L5:
        k = a.getInt();
        if (k > 0x6400000 || k < 0)
            throw new g((new StringBuilder("String too long: ")).append(k).toString());
        byte abyte1[] = new byte[k];
        a.get(abyte1);
        try {
            obj = JVM INSTR new #261 <Class String>;
            ((String) (obj)).String(abyte1, b);
        }
        catch (UnsupportedEncodingException unsupportedencodingexception) {
            unsupportedencodingexception = new String(abyte1);
        }
        if (true)
            continue; /* Loop/switch isn't completed */
_L2:
        if (flag)
            throw new g("require field not exist.");
        if (true) goto _L7; else goto _L6
_L6:
    }

    public final byte[] c(int k, boolean flag) {
        byte abyte0[] = null;
        if (!a(k)) goto _L2; else goto _L1
_L1:
        a a1;
        a1 = new a();
        a(a1, a);
        a1.a;
        JVM INSTR lookupswitch 2: default 60
    //                   9: 241
    //                   13: 70;
           goto _L3 _L4 _L5
_L3:
        throw new g("type mismatch.");
_L5:
        abyte0 = new a();
        a(abyte0, a);
        if (((a) (abyte0)).a != 0)
            throw new g((new StringBuilder("type mismatch, tag: ")).append(k).append(", type: ").append(a1.a).append(", ").append(((a) (abyte0)).a).toString());
        int l = a(0, 0, true);
        if (l < 0)
            throw new g((new StringBuilder("invalid size, tag: ")).append(k).append(", type: ").append(a1.a).append(", ").append(((a) (abyte0)).a).append(", size: ").append(l).toString());
        abyte0 = new byte[l];
        a.get(abyte0);
_L7:
        return abyte0;
_L4:
        int i1 = a(0, 0, true);
        if (i1 < 0)
            throw new g((new StringBuilder("size invalid: ")).append(i1).toString());
        byte abyte1[] = new byte[i1];
        k = 0;
        do {
            abyte0 = abyte1;
            if (k >= i1)
                continue; /* Loop/switch isn't completed */
            abyte1[k] = a(abyte1[0], 0, true);
            k++;
        } while (true);
_L2:
        if (flag)
            throw new g("require field not exist.");
        if (true) goto _L7; else goto _L6
_L6:
    }
}
