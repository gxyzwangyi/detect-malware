// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.tencent.bugly.proguard;

import android.content.Context;
import android.os.Process;
import com.tencent.bugly.crashreport.common.info.a;
import com.tencent.bugly.crashreport.common.info.b;
import com.tencent.bugly.crashreport.common.strategy.StrategyBean;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

// Referenced classes of package com.tencent.bugly.proguard:
//            ab, ad, ag, ac, 
//            ax, y, az, a

public final class ae
    implements Runnable {

    private int a;
    private int b;
    private final Context c;
    private final int d;
    private final byte e[];
    private final a f;
    private final com.tencent.bugly.crashreport.common.strategy.a g;
    private final ab h;
    private final ad i;
    private final int j;
    private final ac k;
    private final ac l;
    private String m;
    private final String n;
    private final Map o;
    private int p;
    private long q;
    private long r;
    private boolean s;
    private boolean t;

    public ae(Context context, int i1, int j1, byte abyte0[], String s1, String s2, ac ac1, 
            boolean flag, int k1, int l1, boolean flag1, Map map) {
        a = 2;
        b = 30000;
        m = null;
        p = 0;
        q = 0L;
        r = 0L;
        s = true;
        t = false;
        c = context;
        f = com.tencent.bugly.crashreport.common.info.a.a(context);
        e = abyte0;
        g = com.tencent.bugly.crashreport.common.strategy.a.a();
        h = com.tencent.bugly.proguard.ab.a(context);
        i = com.tencent.bugly.proguard.ad.a();
        j = i1;
        m = s1;
        n = s2;
        k = ac1;
        context = i;
        l = null;
        s = flag;
        d = j1;
        if (k1 > 0)
            a = k1;
        if (l1 > 0)
            b = l1;
        t = flag1;
        o = map;
    }

    public ae(Context context, int i1, int j1, byte abyte0[], String s1, String s2, ac ac1, 
            boolean flag, boolean flag1) {
        this(context, i1, j1, abyte0, s1, s2, ac1, flag, 2, 30000, flag1, null);
    }

    private static String a(String s1) {
        boolean flag = false;
        if (s1 == null || s1.trim().length() <= 0)
            flag = true;
        if (!flag) goto _L2; else goto _L1
_L1:
        return s1;
_L2:
        String s2 = String.format("%s?aid=%s", new Object[] {
            s1, UUID.randomUUID().toString()
        });
        s1 = s2;
        continue; /* Loop/switch isn't completed */
        Throwable throwable;
        throwable;
        com.tencent.bugly.proguard.ag.a(throwable);
        if (true) goto _L1; else goto _L3
_L3:
    }

    private void a(ax ax1, boolean flag, int i1, String s1, int j1) {
        d;
        JVM INSTR lookupswitch 4: default 48
    //                   630: 199
    //                   640: 206
    //                   830: 199
    //                   840: 206;
           goto _L1 _L2 _L3 _L2 _L3
_L3:
        break MISSING_BLOCK_LABEL_206;
_L1:
        String s2 = String.valueOf(d);
_L4:
        if (flag) {
            com.tencent.bugly.proguard.ag.a("[upload] Success: %s", new Object[] {
                s2
            });
        } else {
            ag.e("[upload] Failed to upload(%d) %s: %s", new Object[] {
                Integer.valueOf(i1), s2, s1
            });
            if (s)
                i.a(j1, null);
        }
        if (q + r > 0L) {
            long l1 = i.a(t);
            long l2 = q;
            long l3 = r;
            i.a(l1 + l2 + l3, t);
        }
        if (k != null)
            k.a(d, ax1, q, r, flag, s1);
        if (l != null)
            l.a(d, ax1, q, r, flag, s1);
        return;
_L2:
        s2 = "crash";
          goto _L4
        s2 = "userinfo";
          goto _L4
    }

    private static boolean a(ax ax1, a a1, com.tencent.bugly.crashreport.common.strategy.a a2) {
        if (ax1 != null) goto _L2; else goto _L1
_L1:
        boolean flag1;
        ag.d("resp == null!", new Object[0]);
        flag1 = false;
_L9:
        return flag1;
_L2:
        if (ax1.a != 0) {
            ag.e("resp result error %d", new Object[] {
                Byte.valueOf(ax1.a)
            });
            flag1 = false;
            continue; /* Loop/switch isn't completed */
        }
        String s1 = ax1.d;
        if (s1 == null) goto _L4; else goto _L3
_L3:
        if (s1.trim().length() <= 0) goto _L4; else goto _L5
_L5:
        boolean flag = false;
_L6:
        if (flag)
            break MISSING_BLOCK_LABEL_128;
        if (!com.tencent.bugly.crashreport.common.info.a.a().h().equals(ax1.d)) {
            com.tencent.bugly.proguard.y.a().a(com.tencent.bugly.crashreport.common.strategy.a.a, "key_ip", ax1.d.getBytes("UTF-8"), null, true);
            a1.d(ax1.d);
        }
        s1 = ax1.f;
        if (s1 == null)
            break MISSING_BLOCK_LABEL_259;
        if (s1.trim().length() <= 0)
            break MISSING_BLOCK_LABEL_259;
        flag = false;
_L7:
        if (!flag)
            try {
                if (!com.tencent.bugly.crashreport.common.info.a.a().i().equals(ax1.f)) {
                    com.tencent.bugly.proguard.y.a().a(com.tencent.bugly.crashreport.common.strategy.a.a, "key_imei", ax1.f.getBytes("UTF-8"), null, true);
                    a1.e(ax1.f);
                }
            }
            catch (Throwable throwable) {
                com.tencent.bugly.proguard.ag.a(throwable);
            }
        a1.i = ax1.e;
        if (ax1.b != 510)
            break MISSING_BLOCK_LABEL_392;
        if (ax1.c == null) {
            ag.e("remote data is miss! %d", new Object[] {
                Integer.valueOf(ax1.b)
            });
            flag1 = false;
            continue; /* Loop/switch isn't completed */
        }
        break MISSING_BLOCK_LABEL_275;
_L4:
        flag = true;
          goto _L6
        flag = true;
          goto _L7
        a1 = (az)com.tencent.bugly.proguard.a.a(ax1.c, com/tencent/bugly/proguard/az);
        if (a1 == null) {
            ag.e("remote data is error! %d", new Object[] {
                Integer.valueOf(ax1.b)
            });
            flag1 = false;
            continue; /* Loop/switch isn't completed */
        }
        boolean flag3 = ((az) (a1)).a;
        boolean flag2 = ((az) (a1)).c;
        flag1 = ((az) (a1)).b;
        int i1;
        if (((az) (a1)).g == null)
            i1 = -1;
        else
            i1 = ((az) (a1)).g.size();
        ag.c("en:%b qu:%b uin:%b vm:%d", new Object[] {
            Boolean.valueOf(flag3), Boolean.valueOf(flag2), Boolean.valueOf(flag1), Integer.valueOf(i1)
        });
        a2.a(a1);
        flag1 = true;
        if (true) goto _L9; else goto _L8
_L8:
    }

    public final void a(long l1) {
        p = p + 1;
        q = q + l1;
    }

    public final void b(long l1) {
        r = r + l1;
    }

    public final void run() {
        Object obj;
        obj = e;
        p = 0;
        q = 0L;
        r = 0L;
        i.a(j, System.currentTimeMillis());
        if (k != null) {
            ac ac1 = k;
            int i1 = d;
        }
        if (l != null) {
            ac ac2 = l;
            int j1 = d;
        }
        if (com.tencent.bugly.crashreport.common.info.b.e(c) != null) goto _L2; else goto _L1
_L1:
        a(null, false, 0, "network is not available", 0);
_L3:
        return;
_L2:
        if (obj == null)
            break MISSING_BLOCK_LABEL_104;
        if (obj.length != 0)
            break MISSING_BLOCK_LABEL_136;
        a(null, false, 0, "request package is empty!", 0);
          goto _L3
label0:
        {
            long l2 = i.a(t);
            if ((long)obj.length + l2 < 0x200000L)
                break label0;
            ag.e("[upload] Upload too much data, try next time: %d/%d", new Object[] {
                Long.valueOf(l2), Long.valueOf(0x200000L)
            });
            obj = JVM INSTR new #317 <Class StringBuilder>;
            ((StringBuilder) (obj)).StringBuilder("over net consume: ");
            a(null, false, 0, ((StringBuilder) (obj)).append(2048L).append("K").toString(), 0);
        }
          goto _L3
label1:
        {
            ag.c("[upload] Run upload task with cmd: %d", new Object[] {
                Integer.valueOf(d)
            });
            if (c != null && f != null && g != null && h != null)
                break label1;
            a(null, false, 0, "illegal access error", 0);
        }
          goto _L3
        Object obj1 = g.c();
label2:
        {
            if (obj1 != null)
                break label2;
            try {
                a(null, false, 0, "illegal local strategy", 0);
            }
            // Misplaced declaration of an exception variable
            catch (Object obj) {
                if (!com.tencent.bugly.proguard.ag.a(((Throwable) (obj))))
                    ((Throwable) (obj)).printStackTrace();
            }
        }
          goto _L3
        int l1 = 0;
        HashMap hashmap;
        hashmap = JVM INSTR new #344 <Class HashMap>;
        hashmap.HashMap();
        hashmap.put("prodId", f.e());
        hashmap.put("bundleId", f.c);
        hashmap.put("appVer", f.j);
        if (o != null)
            hashmap.putAll(o);
        byte abyte1[] = ((byte []) (obj));
label3:
        {
            if (!s)
                break MISSING_BLOCK_LABEL_579;
            hashmap.put("cmd", Integer.toString(d));
            hashmap.put("platformId", Byte.toString((byte)1));
            f.getClass();
            hashmap.put("sdkVer", "2.3.1");
            hashmap.put("strategylastUpdateTime", Long.toString(((StrategyBean) (obj1)).p));
            if (i.a(hashmap))
                break label3;
            a(null, false, 0, "failed to add security info to HTTP headers", 0);
        }
          goto _L3
        byte abyte0[] = com.tencent.bugly.proguard.a.a(((byte []) (obj)), 2);
        if (abyte0 != null)
            break MISSING_BLOCK_LABEL_545;
        a(null, false, 0, "failed to zip request body", 0);
          goto _L3
        abyte0 = i.a(abyte0);
        abyte1 = abyte0;
        if (abyte0 != null)
            break MISSING_BLOCK_LABEL_579;
        a(null, false, 0, "failed to encrypt request body", 0);
          goto _L3
        abyte0 = m;
        int k1;
        int i2;
        i2 = -1;
        k1 = 0;
_L8:
        int j2 = k1 + 1;
        if (k1 >= a) goto _L5; else goto _L4
_L4:
        obj1 = abyte0;
        if (j2 <= 1) goto _L7; else goto _L6
_L6:
        ag.d("[upload] Failed to upload last time, wait and try(%d) again.", new Object[] {
            Integer.valueOf(j2)
        });
        k1 = b;
        long l3 = k1;
        Thread.sleep(l3);
_L9:
        obj1 = abyte0;
        if (j2 == a) {
            ag.d("[upload] Use the back-up url at the last time: %s", new Object[] {
                n
            });
            obj1 = n;
        }
_L7:
        ag.c("[upload] Send %d bytes", new Object[] {
            Integer.valueOf(abyte1.length)
        });
        if (!s)
            break MISSING_BLOCK_LABEL_1803;
        abyte0 = a(((String) (obj1)));
_L16:
        ag.c("[upload] Upload to %s with cmd %d (pid=%d | tid=%d).", new Object[] {
            abyte0, Integer.valueOf(d), Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
        });
        obj1 = h.a(abyte0, abyte1, this, hashmap);
        if (obj1 != null)
            break MISSING_BLOCK_LABEL_823;
        ag.e("[upload] Failed to upload(%d): %s", new Object[] {
            Integer.valueOf(1), "Failed to upload for no response!"
        });
        l1 = 1;
        k1 = j2;
          goto _L8
        obj1;
        ((InterruptedException) (obj1)).printStackTrace();
          goto _L9
        Map map = h.a;
        k1 = i2;
        if (!s)
            break MISSING_BLOCK_LABEL_1463;
        if (map == null) goto _L11; else goto _L10
_L10:
        if (map.size() != 0) goto _L12; else goto _L11
_L11:
        ag.d("[upload] Headers is empty.", new Object[0]);
        k1 = 0;
_L14:
        if (k1 != 0)
            break MISSING_BLOCK_LABEL_1165;
        ag.c("[upload] Headers from server is not valid, just try again (pid=%d | tid=%d).", new Object[] {
            Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
        });
        ag.e("[upload] Failed to upload(%d): %s", new Object[] {
            Integer.valueOf(1), "[upload] Failed to upload for no status header."
        });
        if (map == null)
            break; /* Loop/switch isn't completed */
        java.util.Map.Entry entry;
        for (obj1 = map.entrySet().iterator(); ((Iterator) (obj1)).hasNext(); ag.c(String.format("[key]: %s, [value]: %s", new Object[] {
    entry.getKey(), entry.getValue()
}), new Object[0]))
            entry = (java.util.Map.Entry)((Iterator) (obj1)).next();

        break; /* Loop/switch isn't completed */
_L12:
        if (map.containsKey("status"))
            break MISSING_BLOCK_LABEL_1043;
        ag.d("[upload] Headers does not contain %s", new Object[] {
            "status"
        });
        k1 = 0;
        continue; /* Loop/switch isn't completed */
        if (map.containsKey("Bugly-Version"))
            break MISSING_BLOCK_LABEL_1078;
        ag.d("[upload] Headers does not contain %s", new Object[] {
            "Bugly-Version"
        });
        k1 = 0;
        continue; /* Loop/switch isn't completed */
        String s1;
        s1 = (String)map.get("Bugly-Version");
        if (s1.contains("bugly"))
            break MISSING_BLOCK_LABEL_1125;
        ag.d("[upload] Bugly version is not valid: %s", new Object[] {
            s1
        });
        k1 = 0;
        continue; /* Loop/switch isn't completed */
        ag.c("[upload] Bugly version from headers is: %s", new Object[] {
            s1
        });
        k1 = 1;
        if (true) goto _L14; else goto _L13
_L13:
        ag.c("[upload] Failed to upload for no status header.", new Object[0]);
        l1 = 1;
        k1 = j2;
          goto _L8
        l1 = Integer.parseInt((String)map.get("status"));
        i2 = l1;
        ag.c("[upload] Status from server is %d (pid=%d | tid=%d).", new Object[] {
            Integer.valueOf(l1), Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
        });
        k1 = l1;
        if (l1 == 0)
            break MISSING_BLOCK_LABEL_1463;
        if (l1 != 2)
            break MISSING_BLOCK_LABEL_1430;
        if (q + r > 0L) {
            long l4 = i.a(t);
            long l5 = q;
            long l6 = r;
            i.a(l4 + l5 + l6, t);
        }
        i.a(l1, null);
        com.tencent.bugly.proguard.ag.a("[upload] Session ID is invalid, will try again immediately (pid=%d | tid=%d).", new Object[] {
            Integer.valueOf(Process.myPid()), Integer.valueOf(Process.myTid())
        });
        i.a(j, d, e, m, n, k, a, b, true, o);
          goto _L3
        obj1;
        obj1 = JVM INSTR new #317 <Class StringBuilder>;
        ((StringBuilder) (obj1)).StringBuilder("[upload] Failed to upload for format of status header is invalid: ");
        ag.e("[upload] Failed to upload(%d): %s", new Object[] {
            Integer.valueOf(1), ((StringBuilder) (obj1)).append(Integer.toString(i2)).toString()
        });
        l1 = 1;
        k1 = j2;
          goto _L8
        abyte0 = JVM INSTR new #317 <Class StringBuilder>;
        abyte0.StringBuilder("status of server is ");
        a(null, false, 1, abyte0.append(l1).toString(), l1);
          goto _L3
        ag.c("[upload] Received %d bytes", new Object[] {
            Integer.valueOf(obj1.length)
        });
        if (!s)
            break MISSING_BLOCK_LABEL_1641;
        if (obj1.length != 0)
            break MISSING_BLOCK_LABEL_1580;
        for (obj1 = map.entrySet().iterator(); ((Iterator) (obj1)).hasNext(); ag.c("[upload] HTTP headers from server: key = %s, value = %s", new Object[] {
    abyte0.getKey(), abyte0.getValue()
}))
            abyte0 = (java.util.Map.Entry)((Iterator) (obj1)).next();

        a(null, false, 1, "response data from server is empty", 0);
          goto _L3
        abyte0 = i.b(((byte []) (obj1)));
        if (abyte0 != null)
            break MISSING_BLOCK_LABEL_1610;
        a(null, false, 1, "failed to decrypt response from server", 0);
          goto _L3
        obj1 = com.tencent.bugly.proguard.a.b(abyte0, 2);
        abyte0 = ((byte []) (obj1));
        if (obj1 != null)
            break MISSING_BLOCK_LABEL_1645;
        a(null, false, 1, "failed unzip(Gzip) response from server", 0);
          goto _L3
        abyte0 = ((byte []) (obj1));
        abyte0 = com.tencent.bugly.proguard.a.a(abyte0, s);
        if (abyte0 != null)
            break MISSING_BLOCK_LABEL_1675;
        a(null, false, 1, "failed to decode response package", 0);
          goto _L3
        if (s)
            i.a(k1, abyte0);
        l1 = ((ax) (abyte0)).b;
        if (((ax) (abyte0)).c != null)
            break MISSING_BLOCK_LABEL_1764;
        k1 = 0;
_L15:
        ag.c("[upload] Response cmd is: %d, length of sBuffer is: %d", new Object[] {
            Integer.valueOf(l1), Integer.valueOf(k1)
        });
        if (a(abyte0, f, g))
            break MISSING_BLOCK_LABEL_1774;
        a(abyte0, false, 2, "failed to process response package", 0);
          goto _L3
        k1 = ((ax) (abyte0)).c.length;
          goto _L15
        a(abyte0, true, 2, "successfully uploaded", 0);
          goto _L3
_L5:
        a(null, false, l1, "failed after many attempts", 0);
          goto _L3
        abyte0 = ((byte []) (obj1));
          goto _L16
    }
}
