// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.tencent.bugly.proguard;

import com.tencent.bugly.crashreport.crash.jni.b;
import java.util.ArrayList;

// Referenced classes of package com.tencent.bugly.proguard:
//            j, q, h, i, 
//            k

public final class r extends j
    implements Cloneable {

    private static ArrayList b;
    private static boolean c;
    private ArrayList a;

    public r() {
        a = null;
    }

    public r(ArrayList arraylist) {
        a = null;
        a = arraylist;
    }

    public final void a(h h1) {
        if (b == null) {
            b = new ArrayList();
            q q1 = new q();
            b.add(q1);
        }
        a = (ArrayList)h1.a(b, 0, true);
    }

    public final void a(i l) {
        l.a(a, 0);
    }

    public final void a(StringBuilder stringbuilder, int l) {
        (new b(stringbuilder, l)).a(a, "events");
    }

    public final Object clone() {
        Object obj = null;
        Object obj1 = super.clone();
        obj = obj1;
_L2:
        return obj;
        CloneNotSupportedException clonenotsupportedexception;
        clonenotsupportedexception;
        if (!c)
            throw new AssertionError();
        if (true) goto _L2; else goto _L1
_L1:
    }

    public final boolean equals(Object obj) {
        boolean flag;
        if (obj == null) {
            flag = false;
        } else {
            obj = (r)obj;
            flag = k.a(a, ((r) (obj)).a);
        }
        return flag;
    }

    public final int hashCode() {
        try {
            Exception exception = JVM INSTR new #86  <Class Exception>;
            exception.Exception("Need define key first!");
            throw exception;
        }
        catch (Exception exception1) {
            exception1.printStackTrace();
        }
        return 0;
    }

    static  {
        boolean flag;
        if (!com/tencent/bugly/proguard/r.desiredAssertionStatus())
            flag = true;
        else
            flag = false;
        c = flag;
    }
}
