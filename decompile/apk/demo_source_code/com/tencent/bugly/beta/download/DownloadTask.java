// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.tencent.bugly.beta.download;

import java.io.File;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

// Referenced classes of package com.tencent.bugly.beta.download:
//            DownloadListener

public abstract class DownloadTask {

    public static final int COMPLETE = 1;
    public static final int DELETED = 4;
    public static final int DOWNLOADING = 2;
    public static final int FAILED = 5;
    public static final int INIT = 0;
    public static final int PAUSED = 3;
    protected String a;
    protected String b;
    protected List c;
    protected long d;
    protected long e;
    protected boolean f;
    protected int g;
    private String h;
    private String i;

    protected DownloadTask(String s, String s1, String s2, String s3) {
        c = new CopyOnWriteArrayList();
        f = true;
        i = "";
        g = 0;
        h = s;
        a = s1;
        b = s2;
        i = s3;
    }

    public void addListener(DownloadListener downloadlistener) {
        if (downloadlistener != null && !c.contains(downloadlistener))
            c.add(downloadlistener);
    }

    public abstract void delete(boolean flag);

    public abstract void download();

    public abstract long getCostTime();

    public String getDownloadUrl() {
        return h;
    }

    public String getMD5() {
        return i;
    }

    public abstract File getSaveFile();

    public long getSavedLength() {
        return d;
    }

    public abstract int getStatus();

    public long getTotalLength() {
        return e;
    }

    public boolean isNeededNotify() {
        return f;
    }

    public boolean removeListener(DownloadListener downloadlistener) {
        boolean flag;
        if (downloadlistener != null && c.remove(downloadlistener))
            flag = true;
        else
            flag = false;
        return flag;
    }

    public void setNeededNotify(boolean flag) {
        f = flag;
    }

    public void setSavedLength(long l) {
        d = l;
    }

    public void setTotalLength(long l) {
        e = l;
    }

    public abstract void stop();
}
