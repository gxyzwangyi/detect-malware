// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.tencent.bugly.beta.global;

import android.os.Handler;
import android.os.Looper;
import android.text.TextUtils;
import com.tencent.bugly.beta.download.DownloadTask;
import com.tencent.bugly.beta.download.b;
import com.tencent.bugly.proguard.a;
import com.tencent.bugly.proguard.ag;
import com.tencent.bugly.proguard.l;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

// Referenced classes of package com.tencent.bugly.beta.global:
//            ResBean, d, c

public final class e {

    public static final e a = new e();
    private List b;
    private Map c;
    private Handler d;

    public e() {
        b = new ArrayList();
        c = Collections.synchronizedMap(new HashMap());
        d = new Handler(Looper.getMainLooper());
    }

    public static void a() {
        ArrayList arraylist = new ArrayList();
        String as[] = com.tencent.bugly.beta.global.ResBean.b;
        int j = as.length;
        for (int i = 0; i < j; i++) {
            String s = as[i];
            String s1 = com.tencent.bugly.beta.global.ResBean.a.a(s);
            if (s.startsWith("IMG_") && !TextUtils.isEmpty(s1))
                arraylist.add(s1);
        }

        File afile[] = d.D.q.listFiles();
        if (afile != null && afile.length > 0) {
            int i1 = afile.length;
            int k = 0;
            while (k < i1)  {
                File file = afile[k];
                Iterator iterator = arraylist.iterator();
                boolean flag = true;
                do {
                    if (!iterator.hasNext())
                        break;
                    String s2 = (String)iterator.next();
                    if (file.getAbsolutePath().equals(s2))
                        flag = false;
                } while (true);
                if (flag) {
                    l.a.b(file.getAbsolutePath());
                    if (!file.delete())
                        ag.e("cannot deleteCache file:%s", new Object[] {
                            file.getAbsolutePath()
                        });
                }
                k++;
            }
        }
    }

    public final void a(b b1, Map map) {
        if (b1 != null) goto _L2; else goto _L1
_L1:
        return;
_L2:
        if (map != null && !map.isEmpty()) goto _L4; else goto _L3
_L3:
        c.clear();
        com.tencent.bugly.beta.global.ResBean.a = new ResBean();
        com.tencent.bugly.proguard.a.a("rb.bch", com.tencent.bugly.beta.global.ResBean.a);
          goto _L5
_L4:
        int i;
        int j;
        com.tencent.bugly.beta.download.a a1;
        String as[];
        for (Iterator iterator = c.values().iterator(); iterator.hasNext(); ((DownloadTask)iterator.next()).delete(true));
        c.clear();
        a1 = new com.tencent.bugly.beta.download.a(1, new Object[] {
            this, c
        });
        as = com.tencent.bugly.beta.global.ResBean.b;
        j = as.length;
        i = 0;
_L9:
        DownloadTask downloadtask;
        String s;
        String s1;
        if (i < j) {
label0:
            {
                s = as[i];
                if (map.containsKey(s))
                    break label0;
                c.clear();
                com.tencent.bugly.beta.global.ResBean.a = new ResBean();
                com.tencent.bugly.proguard.a.a("rb.bch", com.tencent.bugly.beta.global.ResBean.a);
            }
        } else {
            com.tencent.bugly.proguard.a.a("rb.bch", com.tencent.bugly.beta.global.ResBean.a);
            if (!c.isEmpty()) {
                b1 = c.values().iterator();
                while (b1.hasNext()) 
                    ((DownloadTask)b1.next()).download();
            }
        }
_L5:
        if (true) goto _L1; else goto _L6
_L6:
        s1 = (String)map.get(s);
        if (s.startsWith("IMG_") && !TextUtils.isEmpty(s1)) goto _L8; else goto _L7
_L7:
        com.tencent.bugly.beta.global.ResBean.a.a(s, s1);
_L10:
        i++;
          goto _L9
_L8:
        com.tencent.bugly.beta.global.ResBean.a.a(s, "");
        Iterator iterator1 = c.values().iterator();
        do {
            if (!iterator1.hasNext())
                break MISSING_BLOCK_LABEL_424;
            downloadtask = (DownloadTask)iterator1.next();
        } while (!downloadtask.getDownloadUrl().equals(s1));
_L11:
        if (downloadtask == null)
            downloadtask = b1.a(s1, d.D.q.getAbsolutePath(), null, null);
        if (downloadtask != null) {
            downloadtask.addListener(a1);
            downloadtask.setNeededNotify(false);
            c.put(s, downloadtask);
        }
          goto _L10
        downloadtask = null;
          goto _L11
    }

    public final void a(Runnable runnable) {
        this;
        JVM INSTR monitorenter ;
        if (c.size() != 0)
            break MISSING_BLOCK_LABEL_23;
        runnable.run();
_L1:
        this;
        JVM INSTR monitorexit ;
        return;
        b.add(runnable);
          goto _L1
        runnable;
        throw runnable;
    }

    public final void a(Runnable runnable, int i) {
        this;
        JVM INSTR monitorenter ;
        if (c.size() != 0)
            break MISSING_BLOCK_LABEL_23;
        runnable.run();
_L1:
        this;
        JVM INSTR monitorexit ;
        return;
        c c1 = JVM INSTR new #221 <Class c>;
        c1.c(6, new Object[] {
            Boolean.valueOf(false), runnable
        });
        d.postDelayed(c1, 3000L);
        a(((Runnable) (c1)));
          goto _L1
        runnable;
        throw runnable;
    }

    public final void b() {
        this;
        JVM INSTR monitorenter ;
        for (Iterator iterator = b.iterator(); iterator.hasNext(); ((Runnable)iterator.next()).run());
        break MISSING_BLOCK_LABEL_43;
        Exception exception;
        exception;
        throw exception;
        for (Iterator iterator1 = c.values().iterator(); iterator1.hasNext(); ((DownloadTask)iterator1.next()).delete(false));
        b.clear();
        c.clear();
        this;
        JVM INSTR monitorexit ;
    }

}
