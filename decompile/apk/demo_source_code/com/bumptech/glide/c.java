// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.bumptech.glide;

import android.content.Context;
import android.graphics.drawable.Drawable;
import android.widget.ImageView;
import com.bumptech.glide.f.a;
import com.bumptech.glide.g.h;
import com.bumptech.glide.load.b;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.load.f;
import com.bumptech.glide.load.resource.d;
import com.bumptech.glide.manager.g;
import com.bumptech.glide.manager.m;
import com.bumptech.glide.request.GenericRequest;
import com.bumptech.glide.request.a.e;
import com.bumptech.glide.request.b.j;

// Referenced classes of package com.bumptech.glide:
//            Priority, e

public class c
    implements Cloneable {

    private boolean A;
    private Drawable B;
    private int C;
    protected final Class a;
    protected final Context b;
    protected final com.bumptech.glide.e c;
    protected final Class d;
    protected final m e;
    protected final g f;
    private com.bumptech.glide.e.a g;
    private Object h;
    private b i;
    private boolean j;
    private int k;
    private int l;
    private com.bumptech.glide.request.c m;
    private Float n;
    private c o;
    private Float p;
    private Drawable q;
    private Drawable r;
    private Priority s;
    private boolean t;
    private com.bumptech.glide.request.a.d u;
    private int v;
    private int w;
    private DiskCacheStrategy x;
    private f y;
    private boolean z;

    c(Context context, Class class1, com.bumptech.glide.e.f f1, Class class2, com.bumptech.glide.e e1, m m1, g g1) {
        Object obj = null;
        super();
        i = com.bumptech.glide.f.a.a();
        p = Float.valueOf(1.0F);
        s = null;
        t = true;
        u = com.bumptech.glide.request.a.e.a();
        v = -1;
        w = -1;
        x = DiskCacheStrategy.d;
        y = com.bumptech.glide.load.resource.d.b();
        b = context;
        a = class1;
        d = class2;
        c = e1;
        e = m1;
        f = g1;
        class2 = obj;
        if (f1 != null)
            class2 = new com.bumptech.glide.e.a(f1);
        g = class2;
        if (context == null)
            throw new NullPointerException("Context can't be null");
        if (class1 != null && f1 == null)
            throw new NullPointerException("LoadProvider must not be null");
        else
            return;
    }

    private Priority a() {
        Priority priority;
        if (s == com.bumptech.glide.Priority.d)
            priority = Priority.c;
        else
        if (s == Priority.c)
            priority = com.bumptech.glide.Priority.b;
        else
            priority = com.bumptech.glide.Priority.a;
        return priority;
    }

    private com.bumptech.glide.request.a a(j j1, float f1, Priority priority, com.bumptech.glide.request.b b1) {
        return GenericRequest.a(g, h, i, b, priority, j1, f1, q, k, r, l, B, C, m, b1, c.b(), y, d, t, u, w, v, x);
    }

    private com.bumptech.glide.request.a a(j j1, com.bumptech.glide.request.e e1) {
        if (o != null) {
            if (A)
                throw new IllegalStateException("You cannot use a request as both the main request and a thumbnail, consider using clone() on the request(s) passed to thumbnail()");
            if (o.u.equals(com.bumptech.glide.request.a.e.a()))
                o.u = u;
            if (o.s == null)
                o.s = a();
            if (com.bumptech.glide.g.h.a(w, v) && !com.bumptech.glide.g.h.a(o.w, o.v))
                o.b(w, v);
            e1 = new com.bumptech.glide.request.e(e1);
            com.bumptech.glide.request.a a1 = a(j1, p.floatValue(), s, ((com.bumptech.glide.request.b) (e1)));
            A = true;
            j1 = o.a(j1, e1);
            A = false;
            e1.a(a1, j1);
            j1 = e1;
        } else
        if (n != null) {
            e1 = new com.bumptech.glide.request.e(e1);
            e1.a(a(j1, p.floatValue(), s, ((com.bumptech.glide.request.b) (e1))), a(j1, n.floatValue(), a(), ((com.bumptech.glide.request.b) (e1))));
            j1 = e1;
        } else {
            j1 = a(j1, p.floatValue(), s, ((com.bumptech.glide.request.b) (e1)));
        }
        return j1;
    }

    private com.bumptech.glide.request.a b(j j1) {
        if (s == null)
            s = Priority.c;
        return a(j1, null);
    }

    c a(com.bumptech.glide.request.a.d d1) {
        if (d1 == null) {
            throw new NullPointerException("Animation factory must not be null!");
        } else {
            u = d1;
            return this;
        }
    }

    public j a(ImageView imageview) {
        com.bumptech.glide.g.h.a();
        if (imageview == null)
            throw new IllegalArgumentException("You must pass in a non null View");
        if (z || imageview.getScaleType() == null) goto _L2; else goto _L1
_L1:
        static class _cls1 {

            static final int a[];

            static  {
                a = new int[android.widget.ImageView.ScaleType.values().length];
                NoSuchFieldError nosuchfielderror;
                try {
                    a[android.widget.ImageView.ScaleType.CENTER_CROP.ordinal()] = 1;
                }
                catch (NoSuchFieldError nosuchfielderror3) { }
                try {
                    a[android.widget.ImageView.ScaleType.FIT_CENTER.ordinal()] = 2;
                }
                catch (NoSuchFieldError nosuchfielderror2) { }
                try {
                    a[android.widget.ImageView.ScaleType.FIT_START.ordinal()] = 3;
                }
                catch (NoSuchFieldError nosuchfielderror1) { }
                a[android.widget.ImageView.ScaleType.FIT_END.ordinal()] = 4;
_L2:
                return;
                nosuchfielderror;
                if (true) goto _L2; else goto _L1
_L1:
            }
        }

        com.bumptech.glide._cls1.a[imageview.getScaleType().ordinal()];
        JVM INSTR tableswitch 1 4: default 72
    //                   1 89
    //                   2 96
    //                   3 96
    //                   4 96;
           goto _L2 _L3 _L4 _L4 _L4
_L2:
        return a(c.a(imageview, d));
_L3:
        f();
        continue; /* Loop/switch isn't completed */
_L4:
        e();
        if (true) goto _L2; else goto _L5
_L5:
    }

    public j a(j j1) {
        com.bumptech.glide.g.h.a();
        if (j1 == null)
            throw new IllegalArgumentException("You must pass in a non null Target");
        if (!j)
            throw new IllegalArgumentException("You must first set a model (try #load())");
        com.bumptech.glide.request.a a1 = j1.c();
        if (a1 != null) {
            a1.d();
            e.b(a1);
            a1.a();
        }
        a1 = b(j1);
        j1.a(a1);
        f.a(j1);
        e.a(a1);
        return j1;
    }

    public c b(int i1, int j1) {
        if (!com.bumptech.glide.g.h.a(i1, j1)) {
            throw new IllegalArgumentException("Width and height must be Target#SIZE_ORIGINAL or > 0");
        } else {
            w = i1;
            v = j1;
            return this;
        }
    }

    public c b(com.bumptech.glide.load.a a1) {
        if (g != null)
            g.a(a1);
        return this;
    }

    public c b(b b1) {
        if (b1 == null) {
            throw new NullPointerException("Signature must not be null");
        } else {
            i = b1;
            return this;
        }
    }

    public c b(com.bumptech.glide.load.d d1) {
        if (g != null)
            g.a(d1);
        return this;
    }

    public c b(DiskCacheStrategy diskcachestrategy) {
        x = diskcachestrategy;
        return this;
    }

    public c b(Object obj) {
        h = obj;
        j = true;
        return this;
    }

    public c b(boolean flag) {
        if (!flag)
            flag = true;
        else
            flag = false;
        t = flag;
        return this;
    }

    public transient c b(f af[]) {
        z = true;
        if (af.length == 1)
            y = af[0];
        else
            y = new com.bumptech.glide.load.c(af);
        return this;
    }

    public Object clone() {
        return g();
    }

    void e() {
    }

    void f() {
    }

    public c g() {
        com.bumptech.glide.e.a a1;
        c c1;
        c1 = (c)super.clone();
        if (g == null)
            break MISSING_BLOCK_LABEL_30;
        a1 = g.g();
_L1:
        c1.g = a1;
        return c1;
        a1 = null;
          goto _L1
        CloneNotSupportedException clonenotsupportedexception;
        clonenotsupportedexception;
        throw new RuntimeException(clonenotsupportedexception);
    }
}
