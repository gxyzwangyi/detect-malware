// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.bumptech.glide.request;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.drawable.Drawable;
import android.util.Log;
import com.bumptech.glide.Priority;
import com.bumptech.glide.e.f;
import com.bumptech.glide.load.b.l;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.load.engine.b;
import com.bumptech.glide.load.engine.i;
import com.bumptech.glide.request.a.d;
import com.bumptech.glide.request.b.h;
import com.bumptech.glide.request.b.j;
import java.util.Queue;

// Referenced classes of package com.bumptech.glide.request:
//            a, d, c, b

public final class GenericRequest
    implements a, h, com.bumptech.glide.request.d {
    private static final class Status extends Enum {

        public static final Status a;
        public static final Status b;
        public static final Status c;
        public static final Status d;
        public static final Status e;
        public static final Status f;
        public static final Status g;
        public static final Status h;
        private static final Status i[];

        public static Status valueOf(String s1) {
            return (Status)Enum.valueOf(com/bumptech/glide/request/GenericRequest$Status, s1);
        }

        public static Status[] values() {
            return (Status[])i.clone();
        }

        static  {
            a = new Status("PENDING", 0);
            b = new Status("RUNNING", 1);
            c = new Status("WAITING_FOR_SIZE", 2);
            d = new Status("COMPLETE", 3);
            e = new Status("FAILED", 4);
            f = new Status("CANCELLED", 5);
            g = new Status("CLEARED", 6);
            h = new Status("PAUSED", 7);
            i = (new Status[] {
                a, b, c, d, e, f, g, h
            });
        }

        private Status(String s1, int i1) {
            super(s1, i1);
        }
    }


    private static final Queue a = com.bumptech.glide.g.h.a(0);
    private i A;
    private com.bumptech.glide.load.engine.b.c B;
    private long C;
    private Status D;
    private final String b = String.valueOf(hashCode());
    private com.bumptech.glide.load.b c;
    private Drawable d;
    private int e;
    private int f;
    private int g;
    private Context h;
    private com.bumptech.glide.load.f i;
    private f j;
    private com.bumptech.glide.request.b k;
    private Object l;
    private Class m;
    private boolean n;
    private Priority o;
    private j p;
    private c q;
    private float r;
    private b s;
    private d t;
    private int u;
    private int v;
    private DiskCacheStrategy w;
    private Drawable x;
    private Drawable y;
    private boolean z;

    private GenericRequest() {
    }

    public static GenericRequest a(f f1, Object obj, com.bumptech.glide.load.b b1, Context context, Priority priority, j j1, float f2, Drawable drawable, 
            int i1, Drawable drawable1, int k1, Drawable drawable2, int l1, c c1, com.bumptech.glide.request.b b2, 
            b b3, com.bumptech.glide.load.f f3, Class class1, boolean flag, d d1, int i2, int j2, 
            DiskCacheStrategy diskcachestrategy) {
        GenericRequest genericrequest1 = (GenericRequest)a.poll();
        GenericRequest genericrequest = genericrequest1;
        if (genericrequest1 == null)
            genericrequest = new GenericRequest();
        genericrequest.b(f1, obj, b1, context, priority, j1, f2, drawable, i1, drawable1, k1, drawable2, l1, c1, b2, b3, f3, class1, flag, d1, i2, j2, diskcachestrategy);
        return genericrequest;
    }

    private void a(i i1, Object obj) {
        boolean flag = p();
        D = com.bumptech.glide.request.Status.d;
        A = i1;
        if (q == null || !q.a(obj, l, p, z, flag)) {
            com.bumptech.glide.request.a.c c1 = t.a(z, flag);
            p.a(obj, c1);
        }
        q();
        if (Log.isLoggable("GenericRequest", 2))
            a((new StringBuilder()).append("Resource ready in ").append(com.bumptech.glide.g.d.a(C)).append(" size: ").append((double)i1.c() * 9.5367431640625E-07D).append(" fromCache: ").append(z).toString());
    }

    private void a(String s1) {
        Log.v("GenericRequest", (new StringBuilder()).append(s1).append(" this: ").append(b).toString());
    }

    private static void a(String s1, Object obj, String s2) {
        if (obj == null) {
            s1 = new StringBuilder(s1);
            s1.append(" must not be null");
            if (s2 != null) {
                s1.append(", ");
                s1.append(s2);
            }
            throw new NullPointerException(s1.toString());
        } else {
            return;
        }
    }

    private void b(f f1, Object obj, com.bumptech.glide.load.b b1, Context context, Priority priority, j j1, float f2, 
            Drawable drawable, int i1, Drawable drawable1, int k1, Drawable drawable2, int l1, c c1, 
            com.bumptech.glide.request.b b2, b b3, com.bumptech.glide.load.f f3, Class class1, boolean flag, d d1, int i2, 
            int j2, DiskCacheStrategy diskcachestrategy) {
        j = f1;
        l = obj;
        c = b1;
        d = drawable2;
        e = l1;
        h = context.getApplicationContext();
        o = priority;
        p = j1;
        r = f2;
        x = drawable;
        f = i1;
        y = drawable1;
        g = k1;
        q = c1;
        k = b2;
        s = b3;
        i = f3;
        m = class1;
        n = flag;
        t = d1;
        u = i2;
        v = j2;
        w = diskcachestrategy;
        D = Status.a;
        if (obj != null) {
            a("ModelLoader", f1.e(), "try .using(ModelLoader)");
            a("Transcoder", f1.f(), "try .as*(Class).transcode(ResourceTranscoder)");
            a("Transformation", f3, "try .transform(UnitTransformation.get())");
            if (diskcachestrategy.a())
                a("SourceEncoder", f1.c(), "try .sourceEncoder(Encoder) or .diskCacheStrategy(NONE/RESULT)");
            else
                a("SourceDecoder", f1.b(), "try .decoder/.imageDecoder/.videoDecoder(ResourceDecoder) or .diskCacheStrategy(ALL/SOURCE)");
            if (diskcachestrategy.a() || diskcachestrategy.b())
                a("CacheDecoder", f1.a(), "try .cacheDecoder(ResouceDecoder) or .diskCacheStrategy(NONE)");
            if (diskcachestrategy.b())
                a("Encoder", f1.d(), "try .encode(ResourceEncoder) or .diskCacheStrategy(NONE/SOURCE)");
        }
    }

    private void b(i i1) {
        s.a(i1);
        A = null;
    }

    private void b(Exception exception) {
        if (o()) {
            Drawable drawable;
            Drawable drawable1;
            if (l == null)
                drawable1 = k();
            else
                drawable1 = null;
            drawable = drawable1;
            if (drawable1 == null)
                drawable = l();
            drawable1 = drawable;
            if (drawable == null)
                drawable1 = m();
            p.a(exception, drawable1);
        }
    }

    private Drawable k() {
        if (d == null && e > 0)
            d = h.getResources().getDrawable(e);
        return d;
    }

    private Drawable l() {
        if (y == null && g > 0)
            y = h.getResources().getDrawable(g);
        return y;
    }

    private Drawable m() {
        if (x == null && f > 0)
            x = h.getResources().getDrawable(f);
        return x;
    }

    private boolean n() {
        boolean flag;
        if (k == null || k.a(this))
            flag = true;
        else
            flag = false;
        return flag;
    }

    private boolean o() {
        boolean flag;
        if (k == null || k.b(this))
            flag = true;
        else
            flag = false;
        return flag;
    }

    private boolean p() {
        boolean flag;
        if (k == null || !k.c())
            flag = true;
        else
            flag = false;
        return flag;
    }

    private void q() {
        if (k != null)
            k.c(this);
    }

    public void a() {
        j = null;
        l = null;
        h = null;
        p = null;
        x = null;
        y = null;
        d = null;
        q = null;
        k = null;
        i = null;
        t = null;
        z = false;
        B = null;
        a.offer(this);
    }

    public void a(int i1, int j1) {
        if (Log.isLoggable("GenericRequest", 2))
            a((new StringBuilder()).append("Got onSizeReady in ").append(com.bumptech.glide.g.d.a(C)).toString());
        if (D == Status.c) goto _L2; else goto _L1
_L1:
        return;
_L2:
        D = com.bumptech.glide.request.Status.b;
        i1 = Math.round(r * (float)i1);
        j1 = Math.round(r * (float)j1);
        com.bumptech.glide.load.a.c c1 = j.e().a(l, i1, j1);
        if (c1 == null) {
            a(new Exception((new StringBuilder()).append("Failed to load model: '").append(l).append("'").toString()));
        } else {
            com.bumptech.glide.load.resource.e.c c2 = j.f();
            if (Log.isLoggable("GenericRequest", 2))
                a((new StringBuilder()).append("finished setup for calling load in ").append(com.bumptech.glide.g.d.a(C)).toString());
            z = true;
            B = s.a(c, i1, j1, c1, j, i, c2, o, n, w, this);
            boolean flag;
            if (A != null)
                flag = true;
            else
                flag = false;
            z = flag;
            if (Log.isLoggable("GenericRequest", 2))
                a((new StringBuilder()).append("finished onSizeReady in ").append(com.bumptech.glide.g.d.a(C)).toString());
        }
        if (true) goto _L1; else goto _L3
_L3:
    }

    public void a(i i1) {
        if (i1 == null) {
            a(new Exception((new StringBuilder()).append("Expected to receive a Resource<R> with an object of ").append(m).append(" inside, but instead got null.").toString()));
        } else {
            Object obj1 = i1.b();
            if (obj1 == null || !m.isAssignableFrom(obj1.getClass())) {
                b(i1);
                StringBuilder stringbuilder = (new StringBuilder()).append("Expected to receive an object of ").append(m).append(" but instead got ");
                Object obj;
                if (obj1 != null)
                    obj = obj1.getClass();
                else
                    obj = "";
                obj = stringbuilder.append(obj).append("{").append(obj1).append("}").append(" inside Resource{").append(i1).append("}.");
                if (obj1 != null)
                    i1 = "";
                else
                    i1 = " To indicate failure return a null Resource object, rather than a Resource object containing null data.";
                a(new Exception(((StringBuilder) (obj)).append(i1).toString()));
            } else
            if (!n()) {
                b(i1);
                D = com.bumptech.glide.request.Status.d;
            } else {
                a(i1, obj1);
            }
        }
    }

    public void a(Exception exception) {
        if (Log.isLoggable("GenericRequest", 3))
            Log.d("GenericRequest", "load failed", exception);
        D = Status.e;
        if (q == null || !q.a(exception, l, p, p()))
            b(exception);
    }

    public void b() {
        C = com.bumptech.glide.g.d.a();
        if (l != null) goto _L2; else goto _L1
_L1:
        a(((Exception) (null)));
_L4:
        return;
_L2:
        D = Status.c;
        if (com.bumptech.glide.g.h.a(u, v))
            a(u, v);
        else
            p.a(this);
        if (!g() && !j() && o())
            p.c(m());
        if (Log.isLoggable("GenericRequest", 2))
            a((new StringBuilder()).append("finished run method in ").append(com.bumptech.glide.g.d.a(C)).toString());
        if (true) goto _L4; else goto _L3
_L3:
    }

    void c() {
        D = com.bumptech.glide.request.Status.f;
        if (B != null) {
            B.a();
            B = null;
        }
    }

    public void d() {
        com.bumptech.glide.g.h.a();
        if (D != Status.g) {
            c();
            if (A != null)
                b(A);
            if (o())
                p.b(m());
            D = Status.g;
        }
    }

    public void e() {
        d();
        D = com.bumptech.glide.request.Status.h;
    }

    public boolean f() {
        boolean flag;
        if (D == com.bumptech.glide.request.Status.b || D == Status.c)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean g() {
        boolean flag;
        if (D == com.bumptech.glide.request.Status.d)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean h() {
        return g();
    }

    public boolean i() {
        boolean flag;
        if (D == com.bumptech.glide.request.Status.f || D == Status.g)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public boolean j() {
        boolean flag;
        if (D == Status.e)
            flag = true;
        else
            flag = false;
        return flag;
    }

}
