// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.bumptech.glide.request.b;

import android.content.Context;
import android.graphics.Point;
import android.util.Log;
import android.view.*;
import com.bumptech.glide.request.a;
import java.lang.ref.WeakReference;
import java.util.*;

// Referenced classes of package com.bumptech.glide.request.b:
//            a, h

public abstract class k extends com.bumptech.glide.request.b.a {
    private static class a {

        private final View a;
        private final List b = new ArrayList();
        private a c;
        private Point d;

        private int a(int i, boolean flag) {
            if (i == -2) {
                Point point = d();
                if (flag)
                    i = point.y;
                else
                    i = point.x;
            }
            return i;
        }

        private void a() {
            if (!b.isEmpty()) goto _L2; else goto _L1
_L1:
            return;
_L2:
            int j = c();
            int i = b();
            if (a(j) && a(i)) {
                a(j, i);
                ViewTreeObserver viewtreeobserver = a.getViewTreeObserver();
                if (viewtreeobserver.isAlive())
                    viewtreeobserver.removeOnPreDrawListener(c);
                c = null;
            }
            if (true) goto _L1; else goto _L3
_L3:
        }

        private void a(int i, int j) {
            for (Iterator iterator = b.iterator(); iterator.hasNext(); ((h)iterator.next()).a(i, j));
            b.clear();
        }

        static void a(a a1) {
            a1.a();
        }

        private boolean a(int i) {
            boolean flag;
            if (i > 0 || i == -2)
                flag = true;
            else
                flag = false;
            return flag;
        }

        private int b() {
            android.view.ViewGroup.LayoutParams layoutparams = a.getLayoutParams();
            int i;
            if (a(a.getHeight()))
                i = a.getHeight();
            else
            if (layoutparams != null)
                i = a(layoutparams.height, true);
            else
                i = 0;
            return i;
        }

        private int c() {
            int i;
            android.view.ViewGroup.LayoutParams layoutparams;
            i = 0;
            layoutparams = a.getLayoutParams();
            if (!a(a.getWidth())) goto _L2; else goto _L1
_L1:
            i = a.getWidth();
_L4:
            return i;
_L2:
            if (layoutparams != null)
                i = a(layoutparams.width, false);
            if (true) goto _L4; else goto _L3
_L3:
        }

        private Point d() {
            Object obj;
            if (d != null) {
                obj = d;
            } else {
                obj = ((WindowManager)a.getContext().getSystemService("window")).getDefaultDisplay();
                if (android.os.Build.VERSION.SDK_INT >= 13) {
                    d = new Point();
                    ((Display) (obj)).getSize(d);
                } else {
                    d = new Point(((Display) (obj)).getWidth(), ((Display) (obj)).getHeight());
                }
                obj = d;
            }
            return ((Point) (obj));
        }

        public void a(h h1) {
            int i;
            int j;
            i = c();
            j = b();
            if (!a(i) || !a(j)) goto _L2; else goto _L1
_L1:
            h1.a(i, j);
_L4:
            return;
_L2:
            if (!b.contains(h1))
                b.add(h1);
            if (c == null) {
                h1 = a.getViewTreeObserver();
                c = new a(this);
                h1.addOnPreDrawListener(c);
            }
            if (true) goto _L4; else goto _L3
_L3:
        }

        public a(View view) {
            a = view;
        }
    }

    private static class a.a
        implements android.view.ViewTreeObserver.OnPreDrawListener {

        private final WeakReference a;

        public boolean onPreDraw() {
            if (Log.isLoggable("ViewTarget", 2))
                Log.v("ViewTarget", (new StringBuilder()).append("OnGlobalLayoutListener called listener=").append(this).toString());
            a a1 = (a)a.get();
            if (a1 != null)
                com.bumptech.glide.request.b.a.a(a1);
            return true;
        }

        public a.a(a a1) {
            a = new WeakReference(a1);
        }
    }


    private static boolean b = false;
    private static Integer c = null;
    protected final View a;
    private final a d;

    public k(View view) {
        if (view == null) {
            throw new NullPointerException("View must not be null!");
        } else {
            a = view;
            d = new a(view);
            return;
        }
    }

    private void a(Object obj) {
        if (c == null) {
            b = true;
            a.setTag(obj);
        } else {
            a.setTag(c.intValue(), obj);
        }
    }

    private Object g() {
        Object obj;
        if (c == null)
            obj = a.getTag();
        else
            obj = a.getTag(c.intValue());
        return obj;
    }

    public View a() {
        return a;
    }

    public void a(com.bumptech.glide.request.a a1) {
        a(a1);
    }

    public void a(h h) {
        d.a(h);
    }

    public com.bumptech.glide.request.a c() {
        Object obj = g();
        if (obj == null) goto _L2; else goto _L1
_L1:
        if (!(obj instanceof com.bumptech.glide.request.a)) goto _L4; else goto _L3
_L3:
        obj = (com.bumptech.glide.request.a)obj;
_L6:
        return ((com.bumptech.glide.request.a) (obj));
_L4:
        throw new IllegalArgumentException("You must not call setTag() on a view Glide is targeting");
_L2:
        obj = null;
        if (true) goto _L6; else goto _L5
_L5:
    }

    public String toString() {
        return (new StringBuilder()).append("Target for: ").append(a).toString();
    }

}
