// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.bumptech.glide.load.resource.bitmap;

import android.util.Log;
import java.io.*;

public class RecyclableBufferedInputStream extends FilterInputStream {
    public static class InvalidMarkException extends RuntimeException {

        public InvalidMarkException(String s) {
            super(s);
        }
    }


    private volatile byte a[];
    private int b;
    private int c;
    private int d;
    private int e;

    public RecyclableBufferedInputStream(InputStream inputstream, byte abyte0[]) {
        super(inputstream);
        d = -1;
        if (abyte0 == null || abyte0.length == 0) {
            throw new IllegalArgumentException("buffer is null or empty");
        } else {
            a = abyte0;
            return;
        }
    }

    private int a(InputStream inputstream, byte abyte0[]) {
        if (d != -1 && e - d < c) goto _L2; else goto _L1
_L1:
        int i;
        int j = inputstream.read(abyte0);
        i = j;
        if (j > 0) {
            d = -1;
            e = 0;
            b = j;
            i = j;
        }
_L5:
        return i;
_L2:
        if (d != 0 || c <= abyte0.length || b != abyte0.length) goto _L4; else goto _L3
_L3:
        byte abyte1[];
        int k = abyte0.length * 2;
        i = k;
        if (k > c)
            i = c;
        if (Log.isLoggable("BufferedIs", 3))
            Log.d("BufferedIs", (new StringBuilder()).append("allocate buffer of length: ").append(i).toString());
        abyte1 = new byte[i];
        System.arraycopy(abyte0, 0, abyte1, 0, abyte0.length);
        a = abyte1;
_L6:
        e = e - d;
        d = 0;
        b = 0;
        int l = inputstream.read(abyte1, e, abyte1.length - e);
        if (l <= 0)
            i = e;
        else
            i = e + l;
        b = i;
        i = l;
        if (true) goto _L5; else goto _L4
_L4:
        abyte1 = abyte0;
        if (d > 0) {
            System.arraycopy(abyte0, d, abyte0, 0, abyte0.length - d);
            abyte1 = abyte0;
        }
          goto _L6
    }

    private static IOException b() {
        throw new IOException("BufferedInputStream is closed");
    }

    public void a() {
        this;
        JVM INSTR monitorenter ;
        c = a.length;
        this;
        JVM INSTR monitorexit ;
        return;
        Exception exception;
        exception;
        throw exception;
    }

    public int available() {
        this;
        JVM INSTR monitorenter ;
        Object obj = in;
        if (a != null && obj != null)
            break MISSING_BLOCK_LABEL_31;
        throw b();
        obj;
        this;
        JVM INSTR monitorexit ;
        throw obj;
        int i;
        int j;
        int k;
        j = b;
        k = e;
        i = ((InputStream) (obj)).available();
        this;
        JVM INSTR monitorexit ;
        return i + (j - k);
    }

    public void close() {
        a = null;
        InputStream inputstream = in;
        in = null;
        if (inputstream != null)
            inputstream.close();
    }

    public void mark(int i) {
        this;
        JVM INSTR monitorenter ;
        c = Math.max(c, i);
        d = e;
        this;
        JVM INSTR monitorexit ;
        return;
        Exception exception;
        exception;
        throw exception;
    }

    public boolean markSupported() {
        return true;
    }

    public int read() {
        int i = -1;
        this;
        JVM INSTR monitorenter ;
        Object obj;
        byte abyte1[];
        abyte1 = a;
        obj = in;
        if (abyte1 != null && obj != null)
            break MISSING_BLOCK_LABEL_33;
        throw b();
        obj;
        this;
        JVM INSTR monitorexit ;
        throw obj;
        if (e < b) goto _L2; else goto _L1
_L1:
        int j = a(((InputStream) (obj)), abyte1);
        if (j != -1) goto _L2; else goto _L3
_L3:
        this;
        JVM INSTR monitorexit ;
        return i;
_L2:
        byte abyte0[] = abyte1;
        if (abyte1 == a)
            break MISSING_BLOCK_LABEL_91;
        abyte1 = a;
        abyte0 = abyte1;
        if (abyte1 != null)
            break MISSING_BLOCK_LABEL_91;
        throw b();
        if (b - e <= 0)
            continue; /* Loop/switch isn't completed */
        i = e;
        e = i + 1;
        i = abyte0[i];
        i &= 0xff;
        if (true) goto _L3; else goto _L4
_L4:
    }

    public int read(byte abyte0[], int i, int j) {
        byte byte0 = -1;
        this;
        JVM INSTR monitorenter ;
        byte abyte2[] = a;
        if (abyte2 != null)
            break MISSING_BLOCK_LABEL_25;
        throw b();
        abyte0;
        this;
        JVM INSTR monitorexit ;
        throw abyte0;
        if (j != 0) goto _L2; else goto _L1
_L1:
        i = 0;
_L10:
        this;
        JVM INSTR monitorexit ;
        return i;
_L2:
        InputStream inputstream = in;
        if (inputstream != null)
            break MISSING_BLOCK_LABEL_50;
        throw b();
        if (e >= b) goto _L4; else goto _L3
_L3:
        if (b - e < j) goto _L6; else goto _L5
_L5:
        int k = j;
_L11:
        System.arraycopy(abyte2, e, abyte0, i, k);
        e = e + k;
        if (k == j) goto _L8; else goto _L7
_L7:
        if (inputstream.available() != 0) goto _L9; else goto _L8
_L8:
        i = k;
          goto _L10
_L6:
        k = b - e;
          goto _L11
_L9:
        i += k;
        k = j - k;
_L16:
        if (d != -1 || k < abyte2.length) goto _L13; else goto _L12
_L12:
        int i1 = inputstream.read(abyte0, i, k);
        int l;
        byte abyte1[];
        l = i1;
        abyte1 = abyte2;
        if (i1 != -1) goto _L15; else goto _L14
_L14:
        i = byte0;
        if (k != j)
            i = j - k;
          goto _L10
_L4:
        k = j;
          goto _L16
_L13:
        if (a(inputstream, abyte2) != -1)
            break MISSING_BLOCK_LABEL_239;
        i = byte0;
        if (k != j)
            i = j - k;
          goto _L10
        abyte1 = abyte2;
        if (abyte2 == a)
            break MISSING_BLOCK_LABEL_271;
        abyte2 = a;
        abyte1 = abyte2;
        if (abyte2 != null)
            break MISSING_BLOCK_LABEL_271;
        throw b();
        if (b - e < k) goto _L18; else goto _L17
_L17:
        l = k;
_L21:
        System.arraycopy(abyte1, e, abyte0, i, l);
        e = e + l;
_L15:
        k -= l;
        if (k != 0) goto _L20; else goto _L19
_L19:
        i = j;
          goto _L10
_L18:
        l = b - e;
          goto _L21
_L20:
        i1 = inputstream.available();
label0:
        {
            if (i1 != 0)
                break label0;
            i = j - k;
        }
        if (true) goto _L10; else goto _L22
_L22:
        i += l;
        abyte2 = abyte1;
          goto _L16
    }

    public void reset() {
        this;
        JVM INSTR monitorenter ;
        if (a == null) {
            IOException ioexception = JVM INSTR new #85  <Class IOException>;
            ioexception.IOException("Stream is closed");
            throw ioexception;
        }
        break MISSING_BLOCK_LABEL_26;
        Exception exception;
        exception;
        this;
        JVM INSTR monitorexit ;
        throw exception;
        if (-1 == d) {
            InvalidMarkException invalidmarkexception = JVM INSTR new #6   <Class RecyclableBufferedInputStream$InvalidMarkException>;
            invalidmarkexception.InvalidMarkException("Mark has been invalidated");
            throw invalidmarkexception;
        }
        e = d;
        this;
        JVM INSTR monitorexit ;
    }

    public long skip(long l) {
        this;
        JVM INSTR monitorenter ;
        Object obj;
        byte abyte0[];
        abyte0 = a;
        obj = in;
        if (abyte0 != null)
            break MISSING_BLOCK_LABEL_30;
        throw b();
        obj;
        this;
        JVM INSTR monitorexit ;
        throw obj;
        if (l >= 1L) goto _L2; else goto _L1
_L1:
        l = 0L;
_L4:
        this;
        JVM INSTR monitorexit ;
        return l;
_L2:
        if (obj != null)
            break MISSING_BLOCK_LABEL_51;
        throw b();
        if ((long)(b - e) >= l) {
            e = (int)((long)e + l);
            continue; /* Loop/switch isn't completed */
        }
        long l1;
        l1 = b - e;
        e = b;
        if (d == -1 || l > (long)c)
            break MISSING_BLOCK_LABEL_194;
        if (a(((InputStream) (obj)), abyte0) == -1) {
            l = l1;
            continue; /* Loop/switch isn't completed */
        }
        if ((long)(b - e) >= l - l1) {
            e = (int)((l - l1) + (long)e);
            continue; /* Loop/switch isn't completed */
        }
        l = (l1 + (long)b) - (long)e;
        e = b;
        continue; /* Loop/switch isn't completed */
        l = ((InputStream) (obj)).skip(l - l1);
        l = l1 + l;
        if (true) goto _L4; else goto _L3
_L3:
    }
}
