// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.bumptech.glide.load.resource.d;

import com.bumptech.glide.g.a;
import com.bumptech.glide.load.b.g;
import com.bumptech.glide.load.d;
import com.bumptech.glide.load.engine.i;
import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;
import com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream;
import com.bumptech.glide.load.resource.c.b;
import java.io.InputStream;

// Referenced classes of package com.bumptech.glide.load.resource.d:
//            a, b

public class c
    implements d {
    static class a {

        public InputStream a(InputStream inputstream, byte abyte0[]) {
            return new RecyclableBufferedInputStream(inputstream, abyte0);
        }

        a() {
        }
    }

    static class b {

        public com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.ImageType a(InputStream inputstream) {
            return (new ImageHeaderParser(inputstream)).b();
        }

        b() {
        }
    }


    private static final b a = new b();
    private static final a b = new a();
    private final d c;
    private final d d;
    private final com.bumptech.glide.load.engine.a.c e;
    private final b f;
    private final a g;
    private String h;

    public c(d d1, d d2, com.bumptech.glide.load.engine.a.c c1) {
        this(d1, d2, c1, a, b);
    }

    c(d d1, d d2, com.bumptech.glide.load.engine.a.c c1, b b1, a a1) {
        c = d1;
        d = d2;
        e = c1;
        f = b1;
        g = a1;
    }

    private com.bumptech.glide.load.resource.d.a a(g g1, int j, int k, byte abyte0[]) {
        if (g1.a() != null)
            g1 = b(g1, j, k, abyte0);
        else
            g1 = b(g1, j, k);
        return g1;
    }

    private com.bumptech.glide.load.resource.d.a a(InputStream inputstream, int j, int k) {
        i l = d.a(inputstream, j, k);
        if (l != null) {
            inputstream = (com.bumptech.glide.load.resource.c.b)l.b();
            if (inputstream.e() > 1)
                inputstream = new com.bumptech.glide.load.resource.d.a(null, l);
            else
                inputstream = new com.bumptech.glide.load.resource.d.a(new com.bumptech.glide.load.resource.bitmap.c(inputstream.b(), e), null);
        } else {
            inputstream = null;
        }
        return inputstream;
    }

    private com.bumptech.glide.load.resource.d.a b(g g1, int j, int k) {
        g1 = c.a(g1, j, k);
        if (g1 != null)
            g1 = new com.bumptech.glide.load.resource.d.a(g1, null);
        else
            g1 = null;
        return g1;
    }

    private com.bumptech.glide.load.resource.d.a b(g g1, int j, int k, byte abyte0[]) {
        InputStream inputstream = g.a(g1.a(), abyte0);
        inputstream.mark(2048);
        Object obj = f.a(inputstream);
        inputstream.reset();
        abyte0 = null;
        if (obj == com.bumptech.glide.load.resource.bitmap.ImageHeaderParser.ImageType.GIF)
            abyte0 = a(inputstream, j, k);
        obj = abyte0;
        if (abyte0 == null)
            obj = b(new g(inputstream, g1.b()), j, k);
        return ((com.bumptech.glide.load.resource.d.a) (obj));
    }

    public i a(g g1, int j, int k) {
        byte abyte0[];
        com.bumptech.glide.g.a a1;
        a1 = com.bumptech.glide.g.a.a();
        abyte0 = a1.b();
        g1 = a(g1, j, k, abyte0);
        a1.a(abyte0);
        if (g1 != null)
            g1 = new com.bumptech.glide.load.resource.d.b(g1);
        else
            g1 = null;
        return g1;
        g1;
        a1.a(abyte0);
        throw g1;
    }

    public volatile i a(Object obj, int j, int k) {
        return a((g)obj, j, k);
    }

    public String a() {
        if (h == null)
            h = (new StringBuilder()).append(d.a()).append(c.a()).toString();
        return h;
    }

}
