// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.bumptech.glide.load.resource.bitmap;

import android.graphics.*;
import android.util.Log;
import com.bumptech.glide.load.engine.a.c;

public final class p {

    public static int a(int i) {
        i;
        JVM INSTR tableswitch 3 8: default 40
    //                   3 50
    //                   4 50
    //                   5 44
    //                   6 44
    //                   7 57
    //                   8 57;
           goto _L1 _L2 _L2 _L3 _L3 _L4 _L4
_L1:
        i = 0;
_L6:
        return i;
_L3:
        i = 90;
        continue; /* Loop/switch isn't completed */
_L2:
        i = 180;
        continue; /* Loop/switch isn't completed */
_L4:
        i = 270;
        if (true) goto _L6; else goto _L5
_L5:
    }

    private static android.graphics.Bitmap.Config a(Bitmap bitmap) {
        if (bitmap.getConfig() != null)
            bitmap = bitmap.getConfig();
        else
            bitmap = android.graphics.Bitmap.Config.ARGB_8888;
        return bitmap;
    }

    public static Bitmap a(Bitmap bitmap, Bitmap bitmap1, int i, int j) {
        float f1 = 0.0F;
        if (bitmap1 != null) goto _L2; else goto _L1
_L1:
        Object obj = null;
_L4:
        return ((Bitmap) (obj));
_L2:
        if (bitmap1.getWidth() == i) {
            obj = bitmap1;
            if (bitmap1.getHeight() == j)
                continue; /* Loop/switch isn't completed */
        }
        obj = new Matrix();
        float f;
        float f2;
        if (bitmap1.getWidth() * j > bitmap1.getHeight() * i) {
            f2 = (float)j / (float)bitmap1.getHeight();
            f = ((float)i - (float)bitmap1.getWidth() * f2) * 0.5F;
        } else {
            f2 = (float)i / (float)bitmap1.getWidth();
            f1 = j;
            float f3 = bitmap1.getHeight();
            f = 0.0F;
            f1 = (f1 - f3 * f2) * 0.5F;
        }
        ((Matrix) (obj)).setScale(f2, f2);
        ((Matrix) (obj)).postTranslate((int)(f + 0.5F), (int)(f1 + 0.5F));
        if (bitmap == null)
            bitmap = Bitmap.createBitmap(i, j, a(bitmap1));
        a(bitmap1, bitmap);
        (new Canvas(bitmap)).drawBitmap(bitmap1, ((Matrix) (obj)), new Paint(6));
        obj = bitmap;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public static Bitmap a(Bitmap bitmap, c c1, int i) {
        Matrix matrix = new Matrix();
        a(i, matrix);
        if (!matrix.isIdentity()) {
            RectF rectf = new RectF(0.0F, 0.0F, bitmap.getWidth(), bitmap.getHeight());
            matrix.mapRect(rectf);
            i = Math.round(rectf.width());
            int j = Math.round(rectf.height());
            android.graphics.Bitmap.Config config = a(bitmap);
            Bitmap bitmap1 = c1.a(i, j, config);
            c1 = bitmap1;
            if (bitmap1 == null)
                c1 = Bitmap.createBitmap(i, j, config);
            matrix.postTranslate(-rectf.left, -rectf.top);
            (new Canvas(c1)).drawBitmap(bitmap, matrix, new Paint(6));
            bitmap = c1;
        }
        return bitmap;
    }

    public static Bitmap a(Bitmap bitmap, c c1, int i, int j) {
        if (bitmap.getWidth() != i || bitmap.getHeight() != j) goto _L2; else goto _L1
_L1:
        c1 = bitmap;
        if (Log.isLoggable("TransformationUtils", 2)) {
            Log.v("TransformationUtils", "requested target size matches input, returning input");
            c1 = bitmap;
        }
_L4:
        return c1;
_L2:
        float f = Math.min((float)i / (float)bitmap.getWidth(), (float)j / (float)bitmap.getHeight());
        int l = (int)((float)bitmap.getWidth() * f);
        int k = (int)((float)bitmap.getHeight() * f);
        if (bitmap.getWidth() == l && bitmap.getHeight() == k) {
            c1 = bitmap;
            if (Log.isLoggable("TransformationUtils", 2)) {
                Log.v("TransformationUtils", "adjusted target size matches input, returning input");
                c1 = bitmap;
            }
        } else {
            Object obj1 = a(bitmap);
            Object obj = c1.a(l, k, ((android.graphics.Bitmap.Config) (obj1)));
            c1 = ((c) (obj));
            if (obj == null)
                c1 = Bitmap.createBitmap(l, k, ((android.graphics.Bitmap.Config) (obj1)));
            a(bitmap, ((Bitmap) (c1)));
            if (Log.isLoggable("TransformationUtils", 2)) {
                Log.v("TransformationUtils", (new StringBuilder()).append("request: ").append(i).append("x").append(j).toString());
                Log.v("TransformationUtils", (new StringBuilder()).append("toFit:   ").append(bitmap.getWidth()).append("x").append(bitmap.getHeight()).toString());
                Log.v("TransformationUtils", (new StringBuilder()).append("toReuse: ").append(c1.getWidth()).append("x").append(c1.getHeight()).toString());
                Log.v("TransformationUtils", (new StringBuilder()).append("minPct:   ").append(f).toString());
            }
            obj = new Canvas(c1);
            obj1 = new Matrix();
            ((Matrix) (obj1)).setScale(f, f);
            ((Canvas) (obj)).drawBitmap(bitmap, ((Matrix) (obj1)), new Paint(6));
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    static void a(int i, Matrix matrix) {
        i;
        JVM INSTR tableswitch 2 8: default 44
    //                   2 45
    //                   3 55
    //                   4 64
    //                   5 81
    //                   6 98
    //                   7 107
    //                   8 124;
           goto _L1 _L2 _L3 _L4 _L5 _L6 _L7 _L8
_L1:
        return;
_L2:
        matrix.setScale(-1F, 1.0F);
        continue; /* Loop/switch isn't completed */
_L3:
        matrix.setRotate(180F);
        continue; /* Loop/switch isn't completed */
_L4:
        matrix.setRotate(180F);
        matrix.postScale(-1F, 1.0F);
        continue; /* Loop/switch isn't completed */
_L5:
        matrix.setRotate(90F);
        matrix.postScale(-1F, 1.0F);
        continue; /* Loop/switch isn't completed */
_L6:
        matrix.setRotate(90F);
        continue; /* Loop/switch isn't completed */
_L7:
        matrix.setRotate(-90F);
        matrix.postScale(-1F, 1.0F);
        continue; /* Loop/switch isn't completed */
_L8:
        matrix.setRotate(-90F);
        if (true) goto _L1; else goto _L9
_L9:
    }

    public static void a(Bitmap bitmap, Bitmap bitmap1) {
        if (android.os.Build.VERSION.SDK_INT >= 12 && bitmap1 != null)
            bitmap1.setHasAlpha(bitmap.hasAlpha());
    }
}
