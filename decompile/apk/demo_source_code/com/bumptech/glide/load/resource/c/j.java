// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.bumptech.glide.load.resource.c;

import android.graphics.Bitmap;
import android.util.Log;
import com.bumptech.glide.b.a;
import com.bumptech.glide.b.d;
import com.bumptech.glide.load.e;
import com.bumptech.glide.load.engine.a.c;
import com.bumptech.glide.load.engine.i;
import com.bumptech.glide.load.f;
import java.io.IOException;
import java.io.OutputStream;

// Referenced classes of package com.bumptech.glide.load.resource.c:
//            a, b

public class j
    implements e {
    static class a {

        public com.bumptech.glide.b.a a(com.bumptech.glide.b.a.a a1) {
            return new com.bumptech.glide.b.a(a1);
        }

        public d a() {
            return new d();
        }

        public i a(Bitmap bitmap, c c1) {
            return new com.bumptech.glide.load.resource.bitmap.c(bitmap, c1);
        }

        public com.bumptech.glide.c.a b() {
            return new com.bumptech.glide.c.a();
        }

        a() {
        }
    }


    private static final a a = new a();
    private final com.bumptech.glide.b.a.a b;
    private final c c;
    private final a d;

    public j(c c1) {
        this(c1, a);
    }

    j(c c1, a a1) {
        c = c1;
        b = new com.bumptech.glide.load.resource.c.a(c1);
        d = a1;
    }

    private com.bumptech.glide.b.a a(byte abyte0[]) {
        Object obj = d.a();
        ((d) (obj)).a(abyte0);
        obj = ((d) (obj)).b();
        com.bumptech.glide.b.a a1 = d.a(b);
        a1.a(((com.bumptech.glide.b.c) (obj)), abyte0);
        a1.a();
        return a1;
    }

    private i a(Bitmap bitmap, f f1, b b1) {
        bitmap = d.a(bitmap, c);
        f1 = f1.a(bitmap, b1.getIntrinsicWidth(), b1.getIntrinsicHeight());
        if (!bitmap.equals(f1))
            bitmap.d();
        return f1;
    }

    private boolean a(byte abyte0[], OutputStream outputstream) {
        boolean flag = true;
        try {
            outputstream.write(abyte0);
        }
        // Misplaced declaration of an exception variable
        catch (byte abyte0[]) {
            if (Log.isLoggable("GifEncoder", 3))
                Log.d("GifEncoder", "Failed to write data to output stream in GifResourceEncoder", abyte0);
            flag = false;
        }
        return flag;
    }

    public String a() {
        return "";
    }

    public boolean a(i k, OutputStream outputstream) {
        long l1;
        boolean flag1;
        b b1;
        flag1 = false;
        l1 = com.bumptech.glide.g.d.a();
        b1 = (b)k.b();
        k = b1.c();
        if (!(k instanceof com.bumptech.glide.load.resource.d)) goto _L2; else goto _L1
_L1:
        boolean flag = a(b1.d(), outputstream);
_L6:
        return flag;
_L2:
        int l;
        com.bumptech.glide.b.a a1;
        com.bumptech.glide.c.a a2;
        a1 = a(b1.d());
        a2 = d.b();
        flag = flag1;
        if (!a2.a(outputstream))
            continue; /* Loop/switch isn't completed */
        l = 0;
_L4:
        if (l >= a1.c())
            break; /* Loop/switch isn't completed */
        outputstream = a(a1.f(), ((f) (k)), b1);
        flag = a2.a((Bitmap)outputstream.b());
        if (!flag) {
            outputstream.d();
            flag = flag1;
            continue; /* Loop/switch isn't completed */
        }
        a2.a(a1.a(a1.d()));
        a1.a();
        outputstream.d();
        l++;
        if (true) goto _L4; else goto _L3
        k;
        outputstream.d();
        throw k;
_L3:
        boolean flag2 = a2.a();
        flag = flag2;
        if (Log.isLoggable("GifEncoder", 2)) {
            Log.v("GifEncoder", (new StringBuilder()).append("Encoded gif with ").append(a1.c()).append(" frames and ").append(b1.d().length).append(" bytes in ").append(com.bumptech.glide.g.d.a(l1)).append(" ms").toString());
            flag = flag2;
        }
        if (true) goto _L6; else goto _L5
_L5:
    }

    public volatile boolean a(Object obj, OutputStream outputstream) {
        return a((i)obj, outputstream);
    }

}
