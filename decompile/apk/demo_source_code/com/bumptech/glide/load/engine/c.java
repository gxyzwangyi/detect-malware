// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.bumptech.glide.load.engine;

import android.os.*;
import com.bumptech.glide.g.h;
import com.bumptech.glide.load.b;
import com.bumptech.glide.request.d;
import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;

// Referenced classes of package com.bumptech.glide.load.engine:
//            i, g, d, EngineRunnable

class c
    implements EngineRunnable.a {
    static class a {

        public g a(i i1, boolean flag) {
            return new g(i1, flag);
        }

        a() {
        }
    }

    private static class b
        implements android.os.Handler.Callback {

        public boolean handleMessage(Message message) {
            boolean flag;
            if (1 == message.what || 2 == message.what) {
                c c1 = (c)message.obj;
                if (1 == message.what)
                    c.a(c1);
                else
                    com.bumptech.glide.load.engine.c.b(c1);
                flag = true;
            } else {
                flag = false;
            }
            return flag;
        }

        private b() {
        }

    }


    private static final a a = new a();
    private static final Handler b = new Handler(Looper.getMainLooper(), new b());
    private final List c;
    private final a d;
    private final com.bumptech.glide.load.engine.d e;
    private final com.bumptech.glide.load.b f;
    private final ExecutorService g;
    private final ExecutorService h;
    private final boolean i;
    private boolean j;
    private i k;
    private boolean l;
    private Exception m;
    private boolean n;
    private Set o;
    private EngineRunnable p;
    private g q;
    private volatile Future r;

    public c(com.bumptech.glide.load.b b1, ExecutorService executorservice, ExecutorService executorservice1, boolean flag, com.bumptech.glide.load.engine.d d1) {
        this(b1, executorservice, executorservice1, flag, d1, a);
    }

    public c(com.bumptech.glide.load.b b1, ExecutorService executorservice, ExecutorService executorservice1, boolean flag, com.bumptech.glide.load.engine.d d1, a a1) {
        c = new ArrayList();
        f = b1;
        g = executorservice;
        h = executorservice1;
        i = flag;
        e = d1;
        d = a1;
    }

    static void a(c c1) {
        c1.b();
    }

    private void b() {
        if (j) {
            k.d();
        } else {
            if (c.isEmpty())
                throw new IllegalStateException("Received a resource without any callbacks to notify");
            q = d.a(k, i);
            l = true;
            q.e();
            e.a(f, q);
            Iterator iterator = c.iterator();
            do {
                if (!iterator.hasNext())
                    break;
                d d1 = (d)iterator.next();
                if (!d(d1)) {
                    q.e();
                    d1.a(q);
                }
            } while (true);
            q.f();
        }
    }

    static void b(c c1) {
        c1.c();
    }

    private void c() {
        if (!j) {
            if (c.isEmpty())
                throw new IllegalStateException("Received an exception without any callbacks to notify");
            n = true;
            e.a(f, null);
            Iterator iterator = c.iterator();
            while (iterator.hasNext())  {
                d d1 = (d)iterator.next();
                if (!d(d1))
                    d1.a(m);
            }
        }
    }

    private void c(d d1) {
        if (o == null)
            o = new HashSet();
        o.add(d1);
    }

    private boolean d(d d1) {
        boolean flag;
        if (o != null && o.contains(d1))
            flag = true;
        else
            flag = false;
        return flag;
    }

    void a() {
        if (!n && !l && !j) {
            p.a();
            Future future = r;
            if (future != null)
                future.cancel(true);
            j = true;
            e.a(this, f);
        }
    }

    public void a(EngineRunnable enginerunnable) {
        p = enginerunnable;
        r = g.submit(enginerunnable);
    }

    public void a(i i1) {
        k = i1;
        b.obtainMessage(1, this).sendToTarget();
    }

    public void a(d d1) {
        com.bumptech.glide.g.h.a();
        if (l)
            d1.a(q);
        else
        if (n)
            d1.a(m);
        else
            c.add(d1);
    }

    public void a(Exception exception) {
        m = exception;
        b.obtainMessage(2, this).sendToTarget();
    }

    public void b(EngineRunnable enginerunnable) {
        r = h.submit(enginerunnable);
    }

    public void b(d d1) {
        com.bumptech.glide.g.h.a();
        if (!l && !n) goto _L2; else goto _L1
_L1:
        c(d1);
_L4:
        return;
_L2:
        c.remove(d1);
        if (c.isEmpty())
            a();
        if (true) goto _L4; else goto _L3
_L3:
    }

}
