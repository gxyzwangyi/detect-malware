// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.bumptech.glide.load.engine.executor;

import android.os.Process;
import android.util.Log;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicInteger;

// Referenced classes of package com.bumptech.glide.load.engine.executor:
//            a

public class FifoPriorityThreadPoolExecutor extends ThreadPoolExecutor {
    public static class UncaughtThrowableStrategy extends Enum {

        public static final UncaughtThrowableStrategy a;
        public static final UncaughtThrowableStrategy b;
        public static final UncaughtThrowableStrategy c;
        private static final UncaughtThrowableStrategy d[];

        public static UncaughtThrowableStrategy valueOf(String s) {
            return (UncaughtThrowableStrategy)Enum.valueOf(com/bumptech/glide/load/engine/executor/FifoPriorityThreadPoolExecutor$UncaughtThrowableStrategy, s);
        }

        public static UncaughtThrowableStrategy[] values() {
            return (UncaughtThrowableStrategy[])d.clone();
        }

        protected void a(Throwable throwable) {
        }

        static  {
            a = new UncaughtThrowableStrategy("IGNORE", 0);
            b = new UncaughtThrowableStrategy("LOG", 1) {

                protected void a(Throwable throwable) {
                    if (Log.isLoggable("PriorityExecutor", 6))
                        Log.e("PriorityExecutor", "Request threw uncaught throwable", throwable);
                }

            }
;
            c = new UncaughtThrowableStrategy("THROW", 2) {

                protected void a(Throwable throwable) {
                    super.a(throwable);
                    throw new RuntimeException(throwable);
                }

            }
;
            d = (new UncaughtThrowableStrategy[] {
                a, b, c
            });
        }

        private UncaughtThrowableStrategy(String s, int i) {
            super(s, i);
        }

    }

    public static class a
        implements ThreadFactory {

        int a;

        public Thread newThread(Runnable runnable) {
            runnable = new Thread(this, runnable, (new StringBuilder()).append("fifo-pool-thread-").append(a).toString()) {

                final a a;

                public void run() {
                    Process.setThreadPriority(10);
                    super.run();
                }

             {
                a = a1;
                super(runnable, s);
            }
            }
;
            a = a + 1;
            return runnable;
        }

        public a() {
            a = 0;
        }
    }

    static class b extends FutureTask
        implements Comparable {

        private final int a;
        private final int b;

        public int a(b b1) {
            int j = a - b1.a;
            int i = j;
            if (j == 0)
                i = b - b1.b;
            return i;
        }

        public int compareTo(Object obj) {
            return a((b)obj);
        }

        public boolean equals(Object obj) {
            boolean flag1 = false;
            boolean flag = flag1;
            if (obj instanceof b) {
                obj = (b)obj;
                flag = flag1;
                if (b == ((b) (obj)).b) {
                    flag = flag1;
                    if (a == ((b) (obj)).a)
                        flag = true;
                }
            }
            return flag;
        }

        public int hashCode() {
            return a * 31 + b;
        }

        public b(Runnable runnable, Object obj, int i) {
            super(runnable, obj);
            if (!(runnable instanceof com.bumptech.glide.load.engine.executor.a)) {
                throw new IllegalArgumentException("FifoPriorityThreadPoolExecutor must be given Runnables that implement Prioritized");
            } else {
                a = ((com.bumptech.glide.load.engine.executor.a)runnable).b();
                b = i;
                return;
            }
        }
    }


    private final AtomicInteger a;
    private final UncaughtThrowableStrategy b;

    public FifoPriorityThreadPoolExecutor(int i) {
        this(i, UncaughtThrowableStrategy.b);
    }

    public FifoPriorityThreadPoolExecutor(int i, int j, long l, TimeUnit timeunit, ThreadFactory threadfactory, UncaughtThrowableStrategy uncaughtthrowablestrategy) {
        super(i, j, l, timeunit, new PriorityBlockingQueue(), threadfactory);
        a = new AtomicInteger();
        b = uncaughtthrowablestrategy;
    }

    public FifoPriorityThreadPoolExecutor(int i, UncaughtThrowableStrategy uncaughtthrowablestrategy) {
        this(i, i, 0L, TimeUnit.MILLISECONDS, ((ThreadFactory) (new a())), uncaughtthrowablestrategy);
    }

    protected void afterExecute(Runnable runnable, Throwable throwable) {
        super.afterExecute(runnable, throwable);
        if (throwable != null || !(runnable instanceof Future))
            break MISSING_BLOCK_LABEL_47;
        runnable = (Future)runnable;
        if (!runnable.isDone() || runnable.isCancelled())
            break MISSING_BLOCK_LABEL_47;
        runnable.get();
_L1:
        return;
        runnable;
        b.a(runnable);
          goto _L1
        runnable;
        b.a(runnable);
          goto _L1
    }

    protected RunnableFuture newTaskFor(Runnable runnable, Object obj) {
        return new b(runnable, obj, a.getAndIncrement());
    }
}
