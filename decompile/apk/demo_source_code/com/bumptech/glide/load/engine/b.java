// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.bumptech.glide.load.engine;

import android.os.Looper;
import android.os.MessageQueue;
import android.util.Log;
import com.bumptech.glide.Priority;
import com.bumptech.glide.g.d;
import com.bumptech.glide.load.a.c;
import com.bumptech.glide.load.engine.b.h;
import com.bumptech.glide.load.f;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.WeakReference;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;

// Referenced classes of package com.bumptech.glide.load.engine:
//            d, f, j, g, 
//            c, EngineRunnable, a, DiskCacheStrategy, 
//            i

public class com.bumptech.glide.load.engine.b
    implements com.bumptech.glide.load.engine.b.h.a, com.bumptech.glide.load.engine.d, g.a {
    static class a {

        private final ExecutorService a;
        private final ExecutorService b;
        private final com.bumptech.glide.load.engine.d c;

        public com.bumptech.glide.load.engine.c a(com.bumptech.glide.load.b b1, boolean flag) {
            return new com.bumptech.glide.load.engine.c(b1, a, b, flag, c);
        }

        public a(ExecutorService executorservice, ExecutorService executorservice1, com.bumptech.glide.load.engine.d d1) {
            a = executorservice;
            b = executorservice1;
            c = d1;
        }
    }

    private static class b
        implements a.a {

        private final com.bumptech.glide.load.engine.b.a.a a;
        private volatile com.bumptech.glide.load.engine.b.a b;

        public com.bumptech.glide.load.engine.b.a a() {
            if (b != null) goto _L2; else goto _L1
_L1:
            this;
            JVM INSTR monitorenter ;
            if (b == null)
                b = a.a();
            if (b == null) {
                com.bumptech.glide.load.engine.b.b b1 = JVM INSTR new #29  <Class com.bumptech.glide.load.engine.b.b>;
                b1.com.bumptech.glide.load.engine.b.b();
                b = b1;
            }
            this;
            JVM INSTR monitorexit ;
_L2:
            return b;
            Exception exception;
            exception;
            this;
            JVM INSTR monitorexit ;
            throw exception;
        }

        public b(com.bumptech.glide.load.engine.b.a.a a1) {
            a = a1;
        }
    }

    public static class c {

        private final com.bumptech.glide.load.engine.c a;
        private final com.bumptech.glide.request.d b;

        public void a() {
            a.b(b);
        }

        public c(com.bumptech.glide.request.d d1, com.bumptech.glide.load.engine.c c1) {
            b = d1;
            a = c1;
        }
    }

    private static class d
        implements android.os.MessageQueue.IdleHandler {

        private final Map a;
        private final ReferenceQueue b;

        public boolean queueIdle() {
            e e1 = (e)b.poll();
            if (e1 != null)
                a.remove(e.a(e1));
            return true;
        }

        public d(Map map, ReferenceQueue referencequeue) {
            a = map;
            b = referencequeue;
        }
    }

    private static class e extends WeakReference {

        private final com.bumptech.glide.load.b a;

        static com.bumptech.glide.load.b a(e e1) {
            return e1.a;
        }

        public e(com.bumptech.glide.load.b b1, g g1, ReferenceQueue referencequeue) {
            super(g1, referencequeue);
            a = b1;
        }
    }


    private final Map a;
    private final com.bumptech.glide.load.engine.f b;
    private final h c;
    private final a d;
    private final Map e;
    private final j f;
    private final b g;
    private ReferenceQueue h;

    public com.bumptech.glide.load.engine.b(h h1, com.bumptech.glide.load.engine.b.a.a a1, ExecutorService executorservice, ExecutorService executorservice1) {
        this(h1, a1, executorservice, executorservice1, null, null, null, null, null);
    }

    com.bumptech.glide.load.engine.b(h h1, com.bumptech.glide.load.engine.b.a.a a1, ExecutorService executorservice, ExecutorService executorservice1, Map map, com.bumptech.glide.load.engine.f f1, Map map1, 
            a a2, j j1) {
        c = h1;
        g = new b(a1);
        a1 = map1;
        if (map1 == null)
            a1 = new HashMap();
        e = a1;
        a1 = f1;
        if (f1 == null)
            a1 = new com.bumptech.glide.load.engine.f();
        b = a1;
        a1 = map;
        if (map == null)
            a1 = new HashMap();
        a = a1;
        a1 = a2;
        if (a2 == null)
            a1 = new a(executorservice, executorservice1, this);
        d = a1;
        a1 = j1;
        if (j1 == null)
            a1 = new j();
        f = a1;
        h1.a(this);
    }

    private g a(com.bumptech.glide.load.b b1) {
        b1 = c.a(b1);
        if (b1 == null)
            b1 = null;
        else
        if (b1 instanceof g)
            b1 = (g)b1;
        else
            b1 = new g(b1, true);
        return b1;
    }

    private g a(com.bumptech.glide.load.b b1, boolean flag) {
        Object obj = null;
        if (!flag) {
            b1 = obj;
        } else {
            Object obj1 = (WeakReference)e.get(b1);
            if (obj1 != null) {
                obj1 = (g)((WeakReference) (obj1)).get();
                if (obj1 != null) {
                    ((g) (obj1)).e();
                    b1 = ((com.bumptech.glide.load.b) (obj1));
                } else {
                    e.remove(b1);
                    b1 = ((com.bumptech.glide.load.b) (obj1));
                }
            } else {
                b1 = null;
            }
        }
        return b1;
    }

    private ReferenceQueue a() {
        if (h == null) {
            h = new ReferenceQueue();
            Looper.myQueue().addIdleHandler(new d(e, h));
        }
        return h;
    }

    private static void a(String s, long l, com.bumptech.glide.load.b b1) {
        Log.v("Engine", (new StringBuilder()).append(s).append(" in ").append(com.bumptech.glide.g.d.a(l)).append("ms, key: ").append(b1).toString());
    }

    private g b(com.bumptech.glide.load.b b1, boolean flag) {
        if (flag) goto _L2; else goto _L1
_L1:
        g g1 = null;
_L4:
        return g1;
_L2:
        g g2 = a(b1);
        g1 = g2;
        if (g2 != null) {
            g2.e();
            e.put(b1, new e(b1, g2, a()));
            g1 = g2;
        }
        if (true) goto _L4; else goto _L3
_L3:
    }

    public c a(com.bumptech.glide.load.b b1, int i, int k, com.bumptech.glide.load.a.c c1, com.bumptech.glide.e.b b2, f f1, com.bumptech.glide.load.resource.e.c c2, 
            Priority priority, boolean flag, DiskCacheStrategy diskcachestrategy, com.bumptech.glide.request.d d1) {
        com.bumptech.glide.g.h.a();
        long l = com.bumptech.glide.g.d.a();
        Object obj = c1.b();
        b1 = b.a(((String) (obj)), b1, i, k, b2.a(), b2.b(), f1, b2.d(), c2, b2.c());
        obj = b(b1, flag);
        if (obj != null) {
            d1.a(((i) (obj)));
            if (Log.isLoggable("Engine", 2))
                a("Loaded resource from cache", l, b1);
            b1 = null;
        } else {
            g g1 = a(b1, flag);
            if (g1 != null) {
                d1.a(g1);
                if (Log.isLoggable("Engine", 2))
                    a("Loaded resource from active resources", l, b1);
                b1 = null;
            } else {
                com.bumptech.glide.load.engine.c c3 = (com.bumptech.glide.load.engine.c)a.get(b1);
                if (c3 != null) {
                    c3.a(d1);
                    if (Log.isLoggable("Engine", 2))
                        a("Added to existing load", l, b1);
                    b1 = new c(d1, c3);
                } else {
                    com.bumptech.glide.load.engine.c c4 = d.a(b1, flag);
                    c1 = new EngineRunnable(c4, new com.bumptech.glide.load.engine.a(b1, i, k, c1, b2, f1, c2, g, diskcachestrategy, priority), priority);
                    a.put(b1, c4);
                    c4.a(d1);
                    c4.a(c1);
                    if (Log.isLoggable("Engine", 2))
                        a("Started new load", l, b1);
                    b1 = new c(d1, c4);
                }
            }
        }
        return b1;
    }

    public void a(com.bumptech.glide.load.b b1, g g1) {
        com.bumptech.glide.g.h.a();
        if (g1 != null) {
            g1.a(b1, this);
            if (g1.a())
                e.put(b1, new e(b1, g1, a()));
        }
        a.remove(b1);
    }

    public void a(com.bumptech.glide.load.engine.c c1, com.bumptech.glide.load.b b1) {
        com.bumptech.glide.g.h.a();
        if (c1.equals((com.bumptech.glide.load.engine.c)a.get(b1)))
            a.remove(b1);
    }

    public void a(i i) {
        com.bumptech.glide.g.h.a();
        if (i instanceof g) {
            ((g)i).f();
            return;
        } else {
            throw new IllegalArgumentException("Cannot release anything but an EngineResource");
        }
    }

    public void b(com.bumptech.glide.load.b b1, g g1) {
        com.bumptech.glide.g.h.a();
        e.remove(b1);
        if (g1.a())
            c.b(b1, g1);
        else
            f.a(g1);
    }

    public void b(i i) {
        com.bumptech.glide.g.h.a();
        f.a(i);
    }
}
