// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.bumptech.glide.load.engine;

import com.bumptech.glide.load.a;
import com.bumptech.glide.load.b;
import com.bumptech.glide.load.d;
import com.bumptech.glide.load.f;
import com.bumptech.glide.load.resource.e.c;
import java.nio.ByteBuffer;
import java.security.MessageDigest;

// Referenced classes of package com.bumptech.glide.load.engine:
//            h

class e
    implements b {

    private final String a;
    private final int b;
    private final int c;
    private final d d;
    private final d e;
    private final f f;
    private final com.bumptech.glide.load.e g;
    private final c h;
    private final a i;
    private final b j;
    private String k;
    private int l;
    private b m;

    public e(String s, b b1, int i1, int j1, d d1, d d2, f f1, 
            com.bumptech.glide.load.e e1, c c1, a a1) {
        a = s;
        j = b1;
        b = i1;
        c = j1;
        d = d1;
        e = d2;
        f = f1;
        g = e1;
        h = c1;
        i = a1;
    }

    public b a() {
        if (m == null)
            m = new h(a, j);
        return m;
    }

    public void a(MessageDigest messagedigest) {
        byte abyte0[] = ByteBuffer.allocate(8).putInt(b).putInt(c).array();
        j.a(messagedigest);
        messagedigest.update(a.getBytes("UTF-8"));
        messagedigest.update(abyte0);
        String s;
        if (d != null)
            s = d.a();
        else
            s = "";
        messagedigest.update(s.getBytes("UTF-8"));
        if (e != null)
            s = e.a();
        else
            s = "";
        messagedigest.update(s.getBytes("UTF-8"));
        if (f != null)
            s = f.a();
        else
            s = "";
        messagedigest.update(s.getBytes("UTF-8"));
        if (g != null)
            s = g.a();
        else
            s = "";
        messagedigest.update(s.getBytes("UTF-8"));
        if (i != null)
            s = i.a();
        else
            s = "";
        messagedigest.update(s.getBytes("UTF-8"));
    }

    public boolean equals(Object obj) {
        boolean flag3 = false;
        if (this != obj) goto _L2; else goto _L1
_L1:
        boolean flag2 = true;
_L4:
        return flag2;
_L2:
        flag2 = flag3;
        if (obj == null)
            continue; /* Loop/switch isn't completed */
        flag2 = flag3;
        if (getClass() != obj.getClass())
            continue; /* Loop/switch isn't completed */
        obj = (e)obj;
        flag2 = flag3;
        if (!a.equals(((e) (obj)).a))
            continue; /* Loop/switch isn't completed */
        flag2 = flag3;
        if (!j.equals(((e) (obj)).j))
            continue; /* Loop/switch isn't completed */
        flag2 = flag3;
        if (c != ((e) (obj)).c)
            continue; /* Loop/switch isn't completed */
        flag2 = flag3;
        if (b != ((e) (obj)).b)
            continue; /* Loop/switch isn't completed */
        boolean flag;
        boolean flag1;
        if (f == null)
            flag = true;
        else
            flag = false;
        if (((e) (obj)).f == null)
            flag1 = true;
        else
            flag1 = false;
        flag2 = flag3;
        if (flag ^ flag1)
            continue; /* Loop/switch isn't completed */
        if (f != null) {
            flag2 = flag3;
            if (!f.a().equals(((e) (obj)).f.a()))
                continue; /* Loop/switch isn't completed */
        }
        if (e == null)
            flag = true;
        else
            flag = false;
        if (((e) (obj)).e == null)
            flag1 = true;
        else
            flag1 = false;
        flag2 = flag3;
        if (flag ^ flag1)
            continue; /* Loop/switch isn't completed */
        if (e != null) {
            flag2 = flag3;
            if (!e.a().equals(((e) (obj)).e.a()))
                continue; /* Loop/switch isn't completed */
        }
        if (d == null)
            flag = true;
        else
            flag = false;
        if (((e) (obj)).d == null)
            flag1 = true;
        else
            flag1 = false;
        flag2 = flag3;
        if (flag ^ flag1)
            continue; /* Loop/switch isn't completed */
        if (d != null) {
            flag2 = flag3;
            if (!d.a().equals(((e) (obj)).d.a()))
                continue; /* Loop/switch isn't completed */
        }
        if (g == null)
            flag = true;
        else
            flag = false;
        if (((e) (obj)).g == null)
            flag1 = true;
        else
            flag1 = false;
        flag2 = flag3;
        if (flag ^ flag1)
            continue; /* Loop/switch isn't completed */
        if (g != null) {
            flag2 = flag3;
            if (!g.a().equals(((e) (obj)).g.a()))
                continue; /* Loop/switch isn't completed */
        }
        if (h == null)
            flag = true;
        else
            flag = false;
        if (((e) (obj)).h == null)
            flag1 = true;
        else
            flag1 = false;
        flag2 = flag3;
        if (flag ^ flag1)
            continue; /* Loop/switch isn't completed */
        if (h != null) {
            flag2 = flag3;
            if (!h.a().equals(((e) (obj)).h.a()))
                continue; /* Loop/switch isn't completed */
        }
        if (i == null)
            flag = true;
        else
            flag = false;
        if (((e) (obj)).i == null)
            flag1 = true;
        else
            flag1 = false;
        flag2 = flag3;
        if (flag ^ flag1)
            continue; /* Loop/switch isn't completed */
        if (i != null) {
            flag2 = flag3;
            if (!i.a().equals(((e) (obj)).i.a()))
                continue; /* Loop/switch isn't completed */
        }
        flag2 = true;
        if (true) goto _L4; else goto _L3
_L3:
    }

    public int hashCode() {
        boolean flag = false;
        if (l == 0) {
            l = a.hashCode();
            l = l * 31 + j.hashCode();
            l = l * 31 + b;
            l = l * 31 + c;
            int j1 = l;
            int i1;
            if (d != null)
                i1 = d.a().hashCode();
            else
                i1 = 0;
            l = i1 + j1 * 31;
            j1 = l;
            if (e != null)
                i1 = e.a().hashCode();
            else
                i1 = 0;
            l = i1 + j1 * 31;
            j1 = l;
            if (f != null)
                i1 = f.a().hashCode();
            else
                i1 = 0;
            l = i1 + j1 * 31;
            j1 = l;
            if (g != null)
                i1 = g.a().hashCode();
            else
                i1 = 0;
            l = i1 + j1 * 31;
            j1 = l;
            if (h != null)
                i1 = h.a().hashCode();
            else
                i1 = 0;
            l = i1 + j1 * 31;
            j1 = l;
            i1 = ((flag) ? 1 : 0);
            if (i != null)
                i1 = i.a().hashCode();
            l = j1 * 31 + i1;
        }
        return l;
    }

    public String toString() {
        if (k == null) {
            StringBuilder stringbuilder = (new StringBuilder()).append("EngineKey{").append(a).append('+').append(j).append("+[").append(b).append('x').append(c).append("]+").append('\'');
            String s;
            if (d != null)
                s = d.a();
            else
                s = "";
            stringbuilder = stringbuilder.append(s).append('\'').append('+').append('\'');
            if (e != null)
                s = e.a();
            else
                s = "";
            stringbuilder = stringbuilder.append(s).append('\'').append('+').append('\'');
            if (f != null)
                s = f.a();
            else
                s = "";
            stringbuilder = stringbuilder.append(s).append('\'').append('+').append('\'');
            if (g != null)
                s = g.a();
            else
                s = "";
            stringbuilder = stringbuilder.append(s).append('\'').append('+').append('\'');
            if (h != null)
                s = h.a();
            else
                s = "";
            stringbuilder = stringbuilder.append(s).append('\'').append('+').append('\'');
            if (i != null)
                s = i.a();
            else
                s = "";
            k = stringbuilder.append(s).append('\'').append('}').toString();
        }
        return k;
    }
}
