// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) fieldsfirst nonlb space 

package com.bumptech.glide.load.engine;

import android.util.Log;
import com.bumptech.glide.Priority;
import com.bumptech.glide.load.engine.executor.a;
import com.bumptech.glide.request.d;

// Referenced classes of package com.bumptech.glide.load.engine:
//            a, i

class EngineRunnable
    implements com.bumptech.glide.load.engine.executor.a, Runnable {
    private static final class Stage extends Enum {

        public static final Stage a;
        public static final Stage b;
        private static final Stage c[];

        public static Stage valueOf(String s) {
            return (Stage)Enum.valueOf(com/bumptech/glide/load/engine/EngineRunnable$Stage, s);
        }

        public static Stage[] values() {
            return (Stage[])c.clone();
        }

        static  {
            a = new Stage("CACHE", 0);
            b = new Stage("SOURCE", 1);
            c = (new Stage[] {
                a, b
            });
        }

        private Stage(String s, int j) {
            super(s, j);
        }
    }

    static interface a
        extends d {

        public abstract void b(EngineRunnable enginerunnable);
    }


    private final Priority a;
    private final a b;
    private final com.bumptech.glide.load.engine.a c;
    private Stage d;
    private volatile boolean e;

    public EngineRunnable(a a1, com.bumptech.glide.load.engine.a a2, Priority priority) {
        b = a1;
        c = a2;
        d = com.bumptech.glide.load.engine.Stage.a;
        a = priority;
    }

    private void a(i j) {
        b.a(j);
    }

    private void a(Exception exception) {
        if (c()) {
            d = Stage.b;
            b.b(this);
        } else {
            b.a(exception);
        }
    }

    private boolean c() {
        boolean flag;
        if (d == com.bumptech.glide.load.engine.Stage.a)
            flag = true;
        else
            flag = false;
        return flag;
    }

    private i d() {
        i j;
        if (c())
            j = e();
        else
            j = f();
        return j;
    }

    private i e() {
        i j;
        i k;
        try {
            j = c.a();
        }
        catch (Exception exception) {
            if (Log.isLoggable("EngineRunnable", 3))
                Log.d("EngineRunnable", (new StringBuilder()).append("Exception decoding result from cache: ").append(exception).toString());
            exception = null;
        }
        k = j;
        if (j == null)
            k = c.b();
        return k;
    }

    private i f() {
        return c.c();
    }

    public void a() {
        e = true;
        c.d();
    }

    public int b() {
        return a.ordinal();
    }

    public void run() {
        Exception exception = null;
        if (!e) goto _L2; else goto _L1
_L1:
        return;
_L2:
        i j;
        try {
            j = d();
        }
        // Misplaced declaration of an exception variable
        catch (Exception exception) {
            if (Log.isLoggable("EngineRunnable", 2))
                Log.v("EngineRunnable", "Exception decoding", exception);
            j = null;
        }
        if (e) {
            if (j != null)
                j.d();
        } else
        if (j == null)
            a(exception);
        else
            a(j);
        if (true) goto _L1; else goto _L3
_L3:
    }
}
