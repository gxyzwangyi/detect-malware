.class public Lio/netty/handler/codec/compression/JdkZlibDecoder;
.super Lio/netty/handler/codec/compression/c;


# annotations
.annotation system Ldalvik/annotation/MemberClasses;
    value = {
        Lio/netty/handler/codec/compression/JdkZlibDecoder$1;,
        Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;
    }
.end annotation


# instance fields
.field private d:Ljava/util/zip/Inflater;

.field private final e:[B

.field private final g:Ljava/util/zip/CRC32;

.field private h:Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;

.field private i:I

.field private j:I

.field private volatile k:Z

.field private l:Z


# direct methods
.method public constructor <init>()V
    .locals 2

    sget-object v0, Lio/netty/handler/codec/compression/ZlibWrapper;->a:Lio/netty/handler/codec/compression/ZlibWrapper;

    const/4 v1, 0x0

    invoke-direct {p0, v0, v1}, Lio/netty/handler/codec/compression/JdkZlibDecoder;-><init>(Lio/netty/handler/codec/compression/ZlibWrapper;[B)V

    return-void
.end method

.method public constructor <init>(Lio/netty/handler/codec/compression/ZlibWrapper;)V
    .locals 1

    const/4 v0, 0x0

    invoke-direct {p0, p1, v0}, Lio/netty/handler/codec/compression/JdkZlibDecoder;-><init>(Lio/netty/handler/codec/compression/ZlibWrapper;[B)V

    return-void
.end method

.method private constructor <init>(Lio/netty/handler/codec/compression/ZlibWrapper;[B)V
    .locals 4

    const/4 v1, -0x1

    const/4 v3, 0x0

    const/4 v2, 0x1

    invoke-direct {p0}, Lio/netty/handler/codec/compression/c;-><init>()V

    sget-object v0, Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;->a:Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;

    iput-object v0, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->h:Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;

    iput v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->i:I

    iput v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->j:I

    if-nez p1, :cond_0

    new-instance v0, Ljava/lang/NullPointerException;

    const-string v1, "wrapper"

    invoke-direct {v0, v1}, Ljava/lang/NullPointerException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_0
    sget-object v0, Lio/netty/handler/codec/compression/JdkZlibDecoder$1;->a:[I

    invoke-virtual {p1}, Lio/netty/handler/codec/compression/ZlibWrapper;->ordinal()I

    move-result v1

    aget v0, v0, v1

    packed-switch v0, :pswitch_data_0

    new-instance v0, Ljava/lang/IllegalArgumentException;

    new-instance v1, Ljava/lang/StringBuilder;

    invoke-direct {v1}, Ljava/lang/StringBuilder;-><init>()V

    const-string v2, "Only GZIP or ZLIB is supported, but you used "

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v1

    invoke-direct {v0, v1}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v0

    :pswitch_0
    new-instance v0, Ljava/util/zip/Inflater;

    invoke-direct {v0, v2}, Ljava/util/zip/Inflater;-><init>(Z)V

    iput-object v0, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->d:Ljava/util/zip/Inflater;

    new-instance v0, Ljava/util/zip/CRC32;

    invoke-direct {v0}, Ljava/util/zip/CRC32;-><init>()V

    iput-object v0, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    :goto_0
    iput-object p2, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->e:[B

    return-void

    :pswitch_1
    new-instance v0, Ljava/util/zip/Inflater;

    invoke-direct {v0, v2}, Ljava/util/zip/Inflater;-><init>(Z)V

    iput-object v0, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->d:Ljava/util/zip/Inflater;

    iput-object v3, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    goto :goto_0

    :pswitch_2
    new-instance v0, Ljava/util/zip/Inflater;

    invoke-direct {v0}, Ljava/util/zip/Inflater;-><init>()V

    iput-object v0, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->d:Ljava/util/zip/Inflater;

    iput-object v3, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    goto :goto_0

    :pswitch_3
    iput-boolean v2, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->l:Z

    iput-object v3, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    goto :goto_0

    :pswitch_data_0
    .packed-switch 0x1
        :pswitch_0
        :pswitch_1
        :pswitch_2
        :pswitch_3
    .end packed-switch
.end method

.method private a(Lio/netty/buffer/h;)Z
    .locals 4

    const/4 v0, 0x0

    sget-object v1, Lio/netty/handler/codec/compression/JdkZlibDecoder$1;->b:[I

    iget-object v2, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->h:Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;

    invoke-virtual {v2}, Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;->ordinal()I

    move-result v2

    aget v1, v1, v2

    packed-switch v1, :pswitch_data_0

    new-instance v0, Ljava/lang/IllegalStateException;

    invoke-direct {v0}, Ljava/lang/IllegalStateException;-><init>()V

    throw v0

    :pswitch_0
    invoke-virtual {p1}, Lio/netty/buffer/h;->f()I

    move-result v1

    const/16 v2, 0xa

    if-ge v1, v2, :cond_1

    :cond_0
    :goto_0
    return v0

    :cond_1
    invoke-virtual {p1}, Lio/netty/buffer/h;->n()B

    move-result v1

    invoke-virtual {p1}, Lio/netty/buffer/h;->n()B

    move-result v2

    const/16 v3, 0x1f

    if-eq v1, v3, :cond_2

    new-instance v0, Lio/netty/handler/codec/compression/DecompressionException;

    const-string v1, "Input is not in the GZIP format"

    invoke-direct {v0, v1}, Lio/netty/handler/codec/compression/DecompressionException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_2
    iget-object v3, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    invoke-virtual {v3, v1}, Ljava/util/zip/CRC32;->update(I)V

    iget-object v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    invoke-virtual {v1, v2}, Ljava/util/zip/CRC32;->update(I)V

    invoke-virtual {p1}, Lio/netty/buffer/h;->o()S

    move-result v1

    const/16 v2, 0x8

    if-eq v1, v2, :cond_3

    new-instance v0, Lio/netty/handler/codec/compression/DecompressionException;

    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string v3, "Unsupported compression method "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, v1}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v1

    const-string v2, " in the GZIP header"

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v1

    invoke-direct {v0, v1}, Lio/netty/handler/codec/compression/DecompressionException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_3
    iget-object v2, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    invoke-virtual {v2, v1}, Ljava/util/zip/CRC32;->update(I)V

    invoke-virtual {p1}, Lio/netty/buffer/h;->o()S

    move-result v1

    iput v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->i:I

    iget-object v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    iget v2, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->i:I

    invoke-virtual {v1, v2}, Ljava/util/zip/CRC32;->update(I)V

    iget v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->i:I

    and-int/lit16 v1, v1, 0xe0

    if-eqz v1, :cond_4

    new-instance v0, Lio/netty/handler/codec/compression/DecompressionException;

    const-string v1, "Reserved flags are set in the GZIP header"

    invoke-direct {v0, v1}, Lio/netty/handler/codec/compression/DecompressionException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_4
    iget-object v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    invoke-virtual {p1}, Lio/netty/buffer/h;->n()B

    move-result v2

    invoke-virtual {v1, v2}, Ljava/util/zip/CRC32;->update(I)V

    iget-object v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    invoke-virtual {p1}, Lio/netty/buffer/h;->n()B

    move-result v2

    invoke-virtual {v1, v2}, Ljava/util/zip/CRC32;->update(I)V

    iget-object v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    invoke-virtual {p1}, Lio/netty/buffer/h;->n()B

    move-result v2

    invoke-virtual {v1, v2}, Ljava/util/zip/CRC32;->update(I)V

    iget-object v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    invoke-virtual {p1}, Lio/netty/buffer/h;->n()B

    move-result v2

    invoke-virtual {v1, v2}, Ljava/util/zip/CRC32;->update(I)V

    iget-object v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    invoke-virtual {p1}, Lio/netty/buffer/h;->o()S

    move-result v2

    invoke-virtual {v1, v2}, Ljava/util/zip/CRC32;->update(I)V

    iget-object v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    invoke-virtual {p1}, Lio/netty/buffer/h;->o()S

    move-result v2

    invoke-virtual {v1, v2}, Ljava/util/zip/CRC32;->update(I)V

    sget-object v1, Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;->c:Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;

    iput-object v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->h:Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;

    :pswitch_1
    iget v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->i:I

    and-int/lit8 v1, v1, 0x4

    if-eqz v1, :cond_5

    invoke-virtual {p1}, Lio/netty/buffer/h;->f()I

    move-result v1

    const/4 v2, 0x2

    if-lt v1, v2, :cond_0

    invoke-virtual {p1}, Lio/netty/buffer/h;->o()S

    move-result v1

    invoke-virtual {p1}, Lio/netty/buffer/h;->o()S

    move-result v2

    iget-object v3, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    invoke-virtual {v3, v1}, Ljava/util/zip/CRC32;->update(I)V

    iget-object v3, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    invoke-virtual {v3, v2}, Ljava/util/zip/CRC32;->update(I)V

    iget v3, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->j:I

    shl-int/lit8 v1, v1, 0x8

    or-int/2addr v1, v2

    or-int/2addr v1, v3

    iput v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->j:I

    :cond_5
    sget-object v1, Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;->d:Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;

    iput-object v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->h:Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;

    :pswitch_2
    iget v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->j:I

    const/4 v2, -0x1

    if-eq v1, v2, :cond_6

    invoke-virtual {p1}, Lio/netty/buffer/h;->f()I

    move-result v1

    iget v2, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->j:I

    if-lt v1, v2, :cond_0

    iget v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->j:I

    new-array v1, v1, [B

    invoke-virtual {p1, v1}, Lio/netty/buffer/h;->a([B)Lio/netty/buffer/h;

    iget-object v2, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    invoke-virtual {v2, v1}, Ljava/util/zip/CRC32;->update([B)V

    :cond_6
    sget-object v1, Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;->e:Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;

    iput-object v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->h:Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;

    :pswitch_3
    iget v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->i:I

    and-int/lit8 v1, v1, 0x8

    if-eqz v1, :cond_8

    invoke-virtual {p1}, Lio/netty/buffer/h;->e()Z

    move-result v1

    if-eqz v1, :cond_0

    :cond_7
    invoke-virtual {p1}, Lio/netty/buffer/h;->o()S

    move-result v1

    iget-object v2, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    invoke-virtual {v2, v1}, Ljava/util/zip/CRC32;->update(I)V

    if-nez v1, :cond_c

    :cond_8
    :goto_1
    sget-object v1, Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;->f:Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;

    iput-object v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->h:Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;

    :pswitch_4
    iget v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->i:I

    and-int/lit8 v1, v1, 0x10

    if-eqz v1, :cond_a

    invoke-virtual {p1}, Lio/netty/buffer/h;->e()Z

    move-result v1

    if-eqz v1, :cond_0

    :cond_9
    invoke-virtual {p1}, Lio/netty/buffer/h;->o()S

    move-result v1

    iget-object v2, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    invoke-virtual {v2, v1}, Ljava/util/zip/CRC32;->update(I)V

    if-nez v1, :cond_d

    :cond_a
    :goto_2
    sget-object v1, Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;->g:Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;

    iput-object v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->h:Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;

    :pswitch_5
    iget v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->i:I

    and-int/lit8 v1, v1, 0x2

    if-eqz v1, :cond_b

    invoke-virtual {p1}, Lio/netty/buffer/h;->f()I

    move-result v1

    const/4 v2, 0x4

    if-lt v1, v2, :cond_0

    invoke-direct {p0, p1}, Lio/netty/handler/codec/compression/JdkZlibDecoder;->c(Lio/netty/buffer/h;)V

    :cond_b
    iget-object v0, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    invoke-virtual {v0}, Ljava/util/zip/CRC32;->reset()V

    sget-object v0, Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;->b:Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;

    iput-object v0, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->h:Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;

    :pswitch_6
    const/4 v0, 0x1

    goto/16 :goto_0

    :cond_c
    invoke-virtual {p1}, Lio/netty/buffer/h;->e()Z

    move-result v1

    if-nez v1, :cond_7

    goto :goto_1

    :cond_d
    invoke-virtual {p1}, Lio/netty/buffer/h;->e()Z

    move-result v1

    if-nez v1, :cond_9

    goto :goto_2

    :pswitch_data_0
    .packed-switch 0x2
        :pswitch_0
        :pswitch_1
        :pswitch_2
        :pswitch_3
        :pswitch_4
        :pswitch_5
        :pswitch_6
    .end packed-switch
.end method

.method private static a(S)Z
    .locals 2

    and-int/lit16 v0, p0, 0x7800

    const/16 v1, 0x7800

    if-ne v0, v1, :cond_0

    rem-int/lit8 v0, p0, 0x1f

    if-nez v0, :cond_0

    const/4 v0, 0x1

    :goto_0
    return v0

    :cond_0
    const/4 v0, 0x0

    goto :goto_0
.end method

.method private b(Lio/netty/buffer/h;)Z
    .locals 5

    const/4 v0, 0x0

    invoke-virtual {p1}, Lio/netty/buffer/h;->f()I

    move-result v1

    const/16 v2, 0x8

    if-ge v1, v2, :cond_0

    :goto_0
    return v0

    :cond_0
    invoke-direct {p0, p1}, Lio/netty/handler/codec/compression/JdkZlibDecoder;->c(Lio/netty/buffer/h;)V

    move v1, v0

    :goto_1
    const/4 v2, 0x4

    if-ge v0, v2, :cond_1

    invoke-virtual {p1}, Lio/netty/buffer/h;->o()S

    move-result v2

    mul-int/lit8 v3, v0, 0x8

    shl-int/2addr v2, v3

    or-int/2addr v1, v2

    add-int/lit8 v0, v0, 0x1

    goto :goto_1

    :cond_1
    iget-object v0, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->d:Ljava/util/zip/Inflater;

    invoke-virtual {v0}, Ljava/util/zip/Inflater;->getTotalOut()I

    move-result v0

    if-eq v1, v0, :cond_2

    new-instance v2, Lio/netty/handler/codec/compression/DecompressionException;

    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string v4, "Number of bytes mismatch. Expected: "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, v1}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v1

    const-string v3, ", Got: "

    invoke-virtual {v1, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1, v0}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v0

    invoke-virtual {v0}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v0

    invoke-direct {v2, v0}, Lio/netty/handler/codec/compression/DecompressionException;-><init>(Ljava/lang/String;)V

    throw v2

    :cond_2
    const/4 v0, 0x1

    goto :goto_0
.end method

.method private c(Lio/netty/buffer/h;)V
    .locals 7

    const-wide/16 v2, 0x0

    const/4 v0, 0x0

    :goto_0
    const/4 v1, 0x4

    if-ge v0, v1, :cond_0

    invoke-virtual {p1}, Lio/netty/buffer/h;->o()S

    move-result v1

    int-to-long v4, v1

    mul-int/lit8 v1, v0, 0x8

    shl-long/2addr v4, v1

    or-long/2addr v2, v4

    add-int/lit8 v0, v0, 0x1

    goto :goto_0

    :cond_0
    iget-object v0, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    invoke-virtual {v0}, Ljava/util/zip/CRC32;->getValue()J

    move-result-wide v0

    cmp-long v4, v2, v0

    if-eqz v4, :cond_1

    new-instance v4, Lio/netty/handler/codec/compression/DecompressionException;

    new-instance v5, Ljava/lang/StringBuilder;

    invoke-direct {v5}, Ljava/lang/StringBuilder;-><init>()V

    const-string v6, "CRC value missmatch. Expected: "

    invoke-virtual {v5, v6}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v5

    invoke-virtual {v5, v2, v3}, Ljava/lang/StringBuilder;->append(J)Ljava/lang/StringBuilder;

    move-result-object v2

    const-string v3, ", Got: "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, v0, v1}, Ljava/lang/StringBuilder;->append(J)Ljava/lang/StringBuilder;

    move-result-object v0

    invoke-virtual {v0}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v0

    invoke-direct {v4, v0}, Lio/netty/handler/codec/compression/DecompressionException;-><init>(Ljava/lang/String;)V

    throw v4

    :cond_1
    return-void
.end method


# virtual methods
.method protected b(Lio/netty/channel/k;Lio/netty/buffer/h;Ljava/util/List;)V
    .locals 10
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "(",
            "Lio/netty/channel/k;",
            "Lio/netty/buffer/h;",
            "Ljava/util/List",
            "<",
            "Ljava/lang/Object;",
            ">;)V"
        }
    .end annotation

    const/4 v2, 0x0

    const/4 v1, 0x1

    iget-boolean v0, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->k:Z

    if-eqz v0, :cond_1

    invoke-virtual {p2}, Lio/netty/buffer/h;->f()I

    move-result v0

    invoke-virtual {p2, v0}, Lio/netty/buffer/h;->s(I)Lio/netty/buffer/h;

    :cond_0
    :goto_0
    return-void

    :cond_1
    invoke-virtual {p2}, Lio/netty/buffer/h;->f()I

    move-result v3

    if-eqz v3, :cond_0

    iget-boolean v0, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->l:Z

    if-eqz v0, :cond_2

    const/4 v0, 0x2

    if-lt v3, v0, :cond_0

    invoke-virtual {p2}, Lio/netty/buffer/h;->b()I

    move-result v0

    invoke-virtual {p2, v0}, Lio/netty/buffer/h;->i(I)S

    move-result v0

    invoke-static {v0}, Lio/netty/handler/codec/compression/JdkZlibDecoder;->a(S)Z

    move-result v0

    if-nez v0, :cond_5

    move v0, v1

    :goto_1
    new-instance v4, Ljava/util/zip/Inflater;

    invoke-direct {v4, v0}, Ljava/util/zip/Inflater;-><init>(Z)V

    iput-object v4, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->d:Ljava/util/zip/Inflater;

    iput-boolean v2, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->l:Z

    :cond_2
    iget-object v0, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    if-eqz v0, :cond_10

    sget-object v0, Lio/netty/handler/codec/compression/JdkZlibDecoder$1;->b:[I

    iget-object v3, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->h:Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;

    invoke-virtual {v3}, Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;->ordinal()I

    move-result v3

    aget v0, v0, v3

    packed-switch v0, :pswitch_data_0

    iget-object v0, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->h:Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;

    sget-object v3, Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;->b:Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;

    if-eq v0, v3, :cond_3

    invoke-direct {p0, p2}, Lio/netty/handler/codec/compression/JdkZlibDecoder;->a(Lio/netty/buffer/h;)Z

    move-result v0

    if-eqz v0, :cond_0

    :cond_3
    invoke-virtual {p2}, Lio/netty/buffer/h;->f()I

    move-result v0

    :goto_2
    invoke-virtual {p2}, Lio/netty/buffer/h;->M()Z

    move-result v3

    if-eqz v3, :cond_6

    iget-object v3, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->d:Ljava/util/zip/Inflater;

    invoke-virtual {p2}, Lio/netty/buffer/h;->N()[B

    move-result-object v4

    invoke-virtual {p2}, Lio/netty/buffer/h;->O()I

    move-result v5

    invoke-virtual {p2}, Lio/netty/buffer/h;->b()I

    move-result v6

    add-int/2addr v5, v6

    invoke-virtual {v3, v4, v5, v0}, Ljava/util/zip/Inflater;->setInput([BII)V

    :goto_3
    iget-object v3, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->d:Ljava/util/zip/Inflater;

    invoke-virtual {v3}, Ljava/util/zip/Inflater;->getRemaining()I

    move-result v3

    shl-int/lit8 v5, v3, 0x1

    invoke-interface {p1}, Lio/netty/channel/k;->c()Lio/netty/buffer/i;

    move-result-object v3

    invoke-interface {v3, v5}, Lio/netty/buffer/i;->c(I)Lio/netty/buffer/h;

    move-result-object v3

    :try_start_0
    invoke-virtual {v3}, Lio/netty/buffer/h;->N()[B

    move-result-object v4

    :cond_4
    :goto_4
    iget-object v6, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->d:Ljava/util/zip/Inflater;

    invoke-virtual {v6}, Ljava/util/zip/Inflater;->needsInput()Z

    move-result v6

    if-nez v6, :cond_9

    invoke-virtual {v3}, Lio/netty/buffer/h;->c()I

    move-result v6

    invoke-virtual {v3}, Lio/netty/buffer/h;->O()I

    move-result v7

    add-int/2addr v7, v6

    invoke-virtual {v3}, Lio/netty/buffer/h;->g()I

    move-result v8

    if-nez v8, :cond_7

    invoke-interface {p3, v3}, Ljava/util/List;->add(Ljava/lang/Object;)Z

    invoke-interface {p1}, Lio/netty/channel/k;->c()Lio/netty/buffer/i;

    move-result-object v4

    invoke-interface {v4, v5}, Lio/netty/buffer/i;->c(I)Lio/netty/buffer/h;

    move-result-object v3

    invoke-virtual {v3}, Lio/netty/buffer/h;->N()[B
    :try_end_0
    .catch Ljava/util/zip/DataFormatException; {:try_start_0 .. :try_end_0} :catch_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_1

    move-result-object v4

    goto :goto_4

    :cond_5
    move v0, v2

    goto :goto_1

    :pswitch_0
    invoke-direct {p0, p2}, Lio/netty/handler/codec/compression/JdkZlibDecoder;->b(Lio/netty/buffer/h;)Z

    move-result v0

    if-eqz v0, :cond_0

    iput-boolean v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->k:Z

    goto/16 :goto_0

    :cond_6
    new-array v3, v0, [B

    invoke-virtual {p2}, Lio/netty/buffer/h;->b()I

    move-result v4

    invoke-virtual {p2, v4, v3}, Lio/netty/buffer/h;->a(I[B)Lio/netty/buffer/h;

    iget-object v4, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->d:Ljava/util/zip/Inflater;

    invoke-virtual {v4, v3}, Ljava/util/zip/Inflater;->setInput([B)V

    goto :goto_3

    :cond_7
    :try_start_1
    iget-object v9, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->d:Ljava/util/zip/Inflater;

    invoke-virtual {v9, v4, v7, v8}, Ljava/util/zip/Inflater;->inflate([BII)I

    move-result v8

    if-lez v8, :cond_b

    add-int/2addr v6, v8

    invoke-virtual {v3, v6}, Lio/netty/buffer/h;->c(I)Lio/netty/buffer/h;

    iget-object v6, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    if-eqz v6, :cond_8

    iget-object v6, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    invoke-virtual {v6, v4, v7, v8}, Ljava/util/zip/CRC32;->update([BII)V

    :cond_8
    :goto_5
    iget-object v6, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->d:Ljava/util/zip/Inflater;

    invoke-virtual {v6}, Ljava/util/zip/Inflater;->finished()Z

    move-result v6

    if-eqz v6, :cond_4

    iget-object v4, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->g:Ljava/util/zip/CRC32;

    if-nez v4, :cond_d

    const/4 v1, 0x1

    iput-boolean v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->k:Z

    :cond_9
    :goto_6
    iget-object v1, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->d:Ljava/util/zip/Inflater;

    invoke-virtual {v1}, Ljava/util/zip/Inflater;->getRemaining()I

    move-result v1

    sub-int/2addr v0, v1

    invoke-virtual {p2, v0}, Lio/netty/buffer/h;->s(I)Lio/netty/buffer/h;

    if-eqz v2, :cond_a

    sget-object v0, Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;->h:Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;

    iput-object v0, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->h:Lio/netty/handler/codec/compression/JdkZlibDecoder$GzipState;

    invoke-direct {p0, p2}, Lio/netty/handler/codec/compression/JdkZlibDecoder;->b(Lio/netty/buffer/h;)Z

    move-result v0

    if-eqz v0, :cond_a

    const/4 v0, 0x1

    iput-boolean v0, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->k:Z
    :try_end_1
    .catch Ljava/util/zip/DataFormatException; {:try_start_1 .. :try_end_1} :catch_0
    .catchall {:try_start_1 .. :try_end_1} :catchall_1

    :cond_a
    invoke-virtual {v3}, Lio/netty/buffer/h;->e()Z

    move-result v0

    if-eqz v0, :cond_e

    invoke-interface {p3, v3}, Ljava/util/List;->add(Ljava/lang/Object;)Z

    goto/16 :goto_0

    :cond_b
    :try_start_2
    iget-object v6, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->d:Ljava/util/zip/Inflater;

    invoke-virtual {v6}, Ljava/util/zip/Inflater;->needsDictionary()Z

    move-result v6

    if-eqz v6, :cond_8

    iget-object v6, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->e:[B

    if-nez v6, :cond_c

    new-instance v0, Lio/netty/handler/codec/compression/DecompressionException;

    const-string v1, "decompression failure, unable to set dictionary as non was specified"

    invoke-direct {v0, v1}, Lio/netty/handler/codec/compression/DecompressionException;-><init>(Ljava/lang/String;)V

    throw v0
    :try_end_2
    .catch Ljava/util/zip/DataFormatException; {:try_start_2 .. :try_end_2} :catch_0
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    :catch_0
    move-exception v0

    move-object v1, v3

    :try_start_3
    new-instance v2, Lio/netty/handler/codec/compression/DecompressionException;

    const-string v3, "decompression failure"

    invoke-direct {v2, v3, v0}, Lio/netty/handler/codec/compression/DecompressionException;-><init>(Ljava/lang/String;Ljava/lang/Throwable;)V

    throw v2
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_0

    :catchall_0
    move-exception v0

    move-object v3, v1

    :goto_7
    invoke-virtual {v3}, Lio/netty/buffer/h;->e()Z

    move-result v1

    if-eqz v1, :cond_f

    invoke-interface {p3, v3}, Ljava/util/List;->add(Ljava/lang/Object;)Z

    :goto_8
    throw v0

    :cond_c
    :try_start_4
    iget-object v6, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->d:Ljava/util/zip/Inflater;

    iget-object v7, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->e:[B

    invoke-virtual {v6, v7}, Ljava/util/zip/Inflater;->setDictionary([B)V
    :try_end_4
    .catch Ljava/util/zip/DataFormatException; {:try_start_4 .. :try_end_4} :catch_0
    .catchall {:try_start_4 .. :try_end_4} :catchall_1

    goto :goto_5

    :catchall_1
    move-exception v0

    goto :goto_7

    :cond_d
    move v2, v1

    goto :goto_6

    :cond_e
    invoke-virtual {v3}, Lio/netty/buffer/h;->B()Z

    goto/16 :goto_0

    :cond_f
    invoke-virtual {v3}, Lio/netty/buffer/h;->B()Z

    goto :goto_8

    :cond_10
    move v0, v3

    goto/16 :goto_2

    :pswitch_data_0
    .packed-switch 0x1
        :pswitch_0
    .end packed-switch
.end method

.method protected k(Lio/netty/channel/k;)V
    .locals 1

    invoke-super {p0, p1}, Lio/netty/handler/codec/compression/c;->k(Lio/netty/channel/k;)V

    iget-object v0, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->d:Ljava/util/zip/Inflater;

    if-eqz v0, :cond_0

    iget-object v0, p0, Lio/netty/handler/codec/compression/JdkZlibDecoder;->d:Ljava/util/zip/Inflater;

    invoke-virtual {v0}, Ljava/util/zip/Inflater;->end()V

    :cond_0
    return-void
.end method
