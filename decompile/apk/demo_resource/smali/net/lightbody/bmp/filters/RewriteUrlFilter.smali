.class public Lnet/lightbody/bmp/filters/RewriteUrlFilter;
.super Lnet/lightbody/bmp/filters/HttpsAwareFiltersAdapter;


# static fields
.field private static final log:Lorg/slf4j/b;


# instance fields
.field private final rewriteRules:Ljava/util/Collection;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/Collection",
            "<",
            "Lnet/lightbody/bmp/proxy/RewriteRule;",
            ">;"
        }
    .end annotation
.end field


# direct methods
.method static constructor <clinit>()V
    .locals 1

    const-class v0, Lnet/lightbody/bmp/filters/RewriteUrlFilter;

    invoke-static {v0}, Lorg/slf4j/c;->a(Ljava/lang/Class;)Lorg/slf4j/b;

    move-result-object v0

    sput-object v0, Lnet/lightbody/bmp/filters/RewriteUrlFilter;->log:Lorg/slf4j/b;

    return-void
.end method

.method public constructor <init>(Lio/netty/handler/codec/http/z;Lio/netty/channel/k;Ljava/util/Collection;)V
    .locals 1
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "(",
            "Lio/netty/handler/codec/http/z;",
            "Lio/netty/channel/k;",
            "Ljava/util/Collection",
            "<",
            "Lnet/lightbody/bmp/proxy/RewriteRule;",
            ">;)V"
        }
    .end annotation

    invoke-direct {p0, p1, p2}, Lnet/lightbody/bmp/filters/HttpsAwareFiltersAdapter;-><init>(Lio/netty/handler/codec/http/z;Lio/netty/channel/k;)V

    if-eqz p3, :cond_0

    iput-object p3, p0, Lnet/lightbody/bmp/filters/RewriteUrlFilter;->rewriteRules:Ljava/util/Collection;

    :goto_0
    return-void

    :cond_0
    invoke-static {}, Ljava/util/Collections;->emptyList()Ljava/util/List;

    move-result-object v0

    iput-object v0, p0, Lnet/lightbody/bmp/filters/RewriteUrlFilter;->rewriteRules:Ljava/util/Collection;

    goto :goto_0
.end method


# virtual methods
.method public clientToProxyRequest(Lio/netty/handler/codec/http/w;)Lio/netty/handler/codec/http/ac;
    .locals 12

    const/4 v11, 0x3

    const/4 v10, 0x2

    const/4 v6, 0x0

    const/4 v5, 0x1

    const/4 v2, 0x0

    instance-of v0, p1, Lio/netty/handler/codec/http/z;

    if-eqz v0, :cond_0

    check-cast p1, Lio/netty/handler/codec/http/z;

    invoke-static {p1}, Lorg/littleshoot/proxy/impl/j;->c(Lio/netty/handler/codec/http/w;)Z

    move-result v0

    if-eqz v0, :cond_1

    :cond_0
    :goto_0
    return-object v6

    :cond_1
    invoke-virtual {p0, p1}, Lnet/lightbody/bmp/filters/RewriteUrlFilter;->getFullUrl(Lio/netty/handler/codec/http/z;)Ljava/lang/String;

    move-result-object v4

    iget-object v0, p0, Lnet/lightbody/bmp/filters/RewriteUrlFilter;->rewriteRules:Ljava/util/Collection;

    invoke-interface {v0}, Ljava/util/Collection;->iterator()Ljava/util/Iterator;

    move-result-object v7

    move v1, v2

    move-object v3, v4

    :goto_1
    invoke-interface {v7}, Ljava/util/Iterator;->hasNext()Z

    move-result v0

    if-eqz v0, :cond_2

    invoke-interface {v7}, Ljava/util/Iterator;->next()Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lnet/lightbody/bmp/proxy/RewriteRule;

    invoke-virtual {v0}, Lnet/lightbody/bmp/proxy/RewriteRule;->getPattern()Ljava/util/regex/Pattern;

    move-result-object v8

    invoke-virtual {v8, v3}, Ljava/util/regex/Pattern;->matcher(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;

    move-result-object v8

    invoke-virtual {v8}, Ljava/util/regex/Matcher;->matches()Z

    move-result v9

    if-eqz v9, :cond_5

    invoke-virtual {v0}, Lnet/lightbody/bmp/proxy/RewriteRule;->getReplace()Ljava/lang/String;

    move-result-object v0

    invoke-virtual {v8, v0}, Ljava/util/regex/Matcher;->replaceAll(Ljava/lang/String;)Ljava/lang/String;

    move-result-object v1

    move v0, v5

    :goto_2
    move-object v3, v1

    move v1, v0

    goto :goto_1

    :cond_2
    if-eqz v1, :cond_0

    invoke-interface {p1}, Lio/netty/handler/codec/http/z;->m()Ljava/lang/String;

    move-result-object v0

    invoke-static {v0}, Lnet/lightbody/bmp/util/HttpUtil;->startsWithHttpOrHttps(Ljava/lang/String;)Z

    move-result v0

    if-eqz v0, :cond_3

    invoke-interface {p1, v3}, Lio/netty/handler/codec/http/z;->b(Ljava/lang/String;)Lio/netty/handler/codec/http/z;

    :goto_3
    :try_start_0
    invoke-static {v4}, Lnet/lightbody/bmp/util/HttpUtil;->getHostAndPortFromUri(Ljava/lang/String;)Ljava/lang/String;
    :try_end_0
    .catch Ljava/net/URISyntaxException; {:try_start_0 .. :try_end_0} :catch_1

    move-result-object v0

    :goto_4
    :try_start_1
    invoke-static {v3}, Lnet/lightbody/bmp/util/HttpUtil;->getHostAndPortFromUri(Ljava/lang/String;)Ljava/lang/String;
    :try_end_1
    .catch Ljava/net/URISyntaxException; {:try_start_1 .. :try_end_1} :catch_2

    move-result-object v1

    :goto_5
    if-eqz v1, :cond_0

    invoke-virtual {v1, v0}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v2

    if-nez v2, :cond_0

    invoke-virtual {p0}, Lnet/lightbody/bmp/filters/RewriteUrlFilter;->isHttps()Z

    move-result v2

    if-eqz v2, :cond_4

    sget-object v2, Lnet/lightbody/bmp/filters/RewriteUrlFilter;->log:Lorg/slf4j/b;

    const-string v3, "Cannot rewrite the host or port of an HTTPS connection.\n\tHost and port from original request: {}\n\tRewritten host and port: {}"

    invoke-interface {v2, v3, v0, v1}, Lorg/slf4j/b;->d(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V

    goto :goto_0

    :cond_3
    :try_start_2
    invoke-static {v3}, Lnet/lightbody/bmp/util/BrowserMobHttpUtil;->getRawPathAndParamsFromUri(Ljava/lang/String;)Ljava/lang/String;

    move-result-object v0

    invoke-interface {p1, v0}, Lio/netty/handler/codec/http/z;->b(Ljava/lang/String;)Lio/netty/handler/codec/http/z;
    :try_end_2
    .catch Ljava/net/URISyntaxException; {:try_start_2 .. :try_end_2} :catch_0

    goto :goto_3

    :catch_0
    move-exception v0

    sget-object v1, Lnet/lightbody/bmp/filters/RewriteUrlFilter;->log:Lorg/slf4j/b;

    const-string v7, "Unable to determine path from rewritten URL. Request URL will be set to the full rewritten URL instead of the resource\'s path.\n\tOriginal URL: {}\n\tRewritten URL: {}"

    new-array v8, v11, [Ljava/lang/Object;

    aput-object v4, v8, v2

    aput-object v3, v8, v5

    aput-object v0, v8, v10

    invoke-interface {v1, v7, v8}, Lorg/slf4j/b;->d(Ljava/lang/String;[Ljava/lang/Object;)V

    invoke-interface {p1, v3}, Lio/netty/handler/codec/http/z;->b(Ljava/lang/String;)Lio/netty/handler/codec/http/z;

    goto :goto_3

    :catch_1
    move-exception v0

    sget-object v1, Lnet/lightbody/bmp/filters/RewriteUrlFilter;->log:Lorg/slf4j/b;

    const-string v7, "Unable to determine host and port from original URL. Host header will be set to rewritten URL\'s host and port.\n\tOriginal URL: {}\n\tRewritten URL: {}"

    new-array v8, v11, [Ljava/lang/Object;

    aput-object v4, v8, v2

    aput-object v3, v8, v5

    aput-object v0, v8, v10

    invoke-interface {v1, v7, v8}, Lorg/slf4j/b;->d(Ljava/lang/String;[Ljava/lang/Object;)V

    move-object v0, v6

    goto :goto_4

    :catch_2
    move-exception v1

    sget-object v7, Lnet/lightbody/bmp/filters/RewriteUrlFilter;->log:Lorg/slf4j/b;

    const-string v8, "Unable to determine host and port from rewritten URL. Host header will not be updated.\n\tOriginal URL: {}\n\tRewritten URL: {}"

    new-array v9, v11, [Ljava/lang/Object;

    aput-object v4, v9, v2

    aput-object v3, v9, v5

    aput-object v1, v9, v10

    invoke-interface {v7, v8, v9}, Lorg/slf4j/b;->d(Ljava/lang/String;[Ljava/lang/Object;)V

    move-object v1, v6

    goto :goto_5

    :cond_4
    invoke-interface {p1}, Lio/netty/handler/codec/http/z;->j()Lio/netty/handler/codec/http/s;

    move-result-object v0

    const-string v2, "Host"

    invoke-virtual {v0, v2}, Lio/netty/handler/codec/http/s;->d(Ljava/lang/String;)Z

    move-result v0

    if-eqz v0, :cond_0

    invoke-static {p1, v1}, Lio/netty/handler/codec/http/s;->b(Lio/netty/handler/codec/http/t;Ljava/lang/String;)V

    goto/16 :goto_0

    :cond_5
    move v0, v1

    move-object v1, v3

    goto/16 :goto_2
.end method
