.class public Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;
.super Lorg/littleshoot/proxy/j;


# static fields
.field private static final log:Lorg/slf4j/b;


# instance fields
.field private volatile contentEncoding:Ljava/lang/String;

.field private final decompressEncodedContent:Z

.field private volatile decompressionSuccessful:Z

.field private volatile fullResponseContents:[B

.field private volatile httpResponse:Lio/netty/handler/codec/http/ac;

.field private final rawResponseContents:Ljava/io/ByteArrayOutputStream;

.field private volatile responseCompressed:Z

.field private volatile trailingHeaders:Lio/netty/handler/codec/http/s;


# direct methods
.method static constructor <clinit>()V
    .locals 1

    const-class v0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;

    invoke-static {v0}, Lorg/slf4j/c;->a(Ljava/lang/Class;)Lorg/slf4j/b;

    move-result-object v0

    sput-object v0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->log:Lorg/slf4j/b;

    return-void
.end method

.method public constructor <init>(Lio/netty/handler/codec/http/z;Lio/netty/channel/k;Z)V
    .locals 1

    invoke-direct {p0, p1, p2}, Lorg/littleshoot/proxy/j;-><init>(Lio/netty/handler/codec/http/z;Lio/netty/channel/k;)V

    new-instance v0, Ljava/io/ByteArrayOutputStream;

    invoke-direct {v0}, Ljava/io/ByteArrayOutputStream;-><init>()V

    iput-object v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->rawResponseContents:Ljava/io/ByteArrayOutputStream;

    iput-boolean p3, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->decompressEncodedContent:Z

    return-void
.end method

.method public constructor <init>(Lio/netty/handler/codec/http/z;Z)V
    .locals 1

    invoke-direct {p0, p1}, Lorg/littleshoot/proxy/j;-><init>(Lio/netty/handler/codec/http/z;)V

    new-instance v0, Ljava/io/ByteArrayOutputStream;

    invoke-direct {v0}, Ljava/io/ByteArrayOutputStream;-><init>()V

    iput-object v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->rawResponseContents:Ljava/io/ByteArrayOutputStream;

    iput-boolean p2, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->decompressEncodedContent:Z

    return-void
.end method


# virtual methods
.method protected captureContentEncoding(Lio/netty/handler/codec/http/ac;)V
    .locals 1

    const-string v0, "Content-Encoding"

    invoke-static {p1, v0}, Lio/netty/handler/codec/http/s;->a(Lio/netty/handler/codec/http/t;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v0

    iput-object v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->contentEncoding:Ljava/lang/String;

    return-void
.end method

.method protected captureFullResponseContents()V
    .locals 1

    invoke-virtual {p0}, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->getRawResponseContents()[B

    move-result-object v0

    iput-object v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->fullResponseContents:[B

    iget-object v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->contentEncoding:Ljava/lang/String;

    if-eqz v0, :cond_1

    const/4 v0, 0x1

    iput-boolean v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->responseCompressed:Z

    iget-boolean v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->decompressEncodedContent:Z

    if-eqz v0, :cond_0

    invoke-virtual {p0}, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->decompressContents()V

    :cond_0
    :goto_0
    return-void

    :cond_1
    const/4 v0, 0x0

    iput-boolean v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->responseCompressed:Z

    goto :goto_0
.end method

.method protected captureTrailingHeaders(Lio/netty/handler/codec/http/ah;)V
    .locals 2

    invoke-interface {p1}, Lio/netty/handler/codec/http/ah;->b()Lio/netty/handler/codec/http/s;

    move-result-object v0

    iput-object v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->trailingHeaders:Lio/netty/handler/codec/http/s;

    iget-object v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->trailingHeaders:Lio/netty/handler/codec/http/s;

    if-eqz v0, :cond_0

    iget-object v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->trailingHeaders:Lio/netty/handler/codec/http/s;

    const-string v1, "Content-Encoding"

    invoke-virtual {v0, v1}, Lio/netty/handler/codec/http/s;->b(Ljava/lang/String;)Ljava/lang/String;

    move-result-object v0

    if-eqz v0, :cond_0

    iput-object v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->contentEncoding:Ljava/lang/String;

    :cond_0
    return-void
.end method

.method protected decompressContents()V
    .locals 4

    iget-object v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->contentEncoding:Ljava/lang/String;

    const-string v1, "gzip"

    invoke-virtual {v0, v1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_0

    :try_start_0
    invoke-virtual {p0}, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->getRawResponseContents()[B

    move-result-object v0

    invoke-static {v0}, Lnet/lightbody/bmp/util/BrowserMobHttpUtil;->decompressContents([B)[B

    move-result-object v0

    iput-object v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->fullResponseContents:[B

    const/4 v0, 0x1

    iput-boolean v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->decompressionSuccessful:Z
    :try_end_0
    .catch Ljava/lang/RuntimeException; {:try_start_0 .. :try_end_0} :catch_0

    :goto_0
    return-void

    :catch_0
    move-exception v0

    sget-object v1, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->log:Lorg/slf4j/b;

    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string v3, "Failed to decompress response with encoding type "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    iget-object v3, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->contentEncoding:Ljava/lang/String;

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    const-string v3, " when decoding request from "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    iget-object v3, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->originalRequest:Lio/netty/handler/codec/http/z;

    invoke-interface {v3}, Lio/netty/handler/codec/http/z;->m()Ljava/lang/String;

    move-result-object v3

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-interface {v1, v2, v0}, Lorg/slf4j/b;->c(Ljava/lang/String;Ljava/lang/Throwable;)V

    goto :goto_0

    :cond_0
    sget-object v0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->log:Lorg/slf4j/b;

    const-string v1, "Cannot decode unsupported content encoding type {}"

    iget-object v2, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->contentEncoding:Ljava/lang/String;

    invoke-interface {v0, v1, v2}, Lorg/slf4j/b;->d(Ljava/lang/String;Ljava/lang/Object;)V

    goto :goto_0
.end method

.method public getContentEncoding()Ljava/lang/String;
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->contentEncoding:Ljava/lang/String;

    return-object v0
.end method

.method public getFullResponseContents()[B
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->fullResponseContents:[B

    return-object v0
.end method

.method public getHttpResponse()Lio/netty/handler/codec/http/ac;
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->httpResponse:Lio/netty/handler/codec/http/ac;

    return-object v0
.end method

.method public getRawResponseContents()[B
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->rawResponseContents:Ljava/io/ByteArrayOutputStream;

    invoke-virtual {v0}, Ljava/io/ByteArrayOutputStream;->toByteArray()[B

    move-result-object v0

    return-object v0
.end method

.method public getTrailingHeaders()Lio/netty/handler/codec/http/s;
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->trailingHeaders:Lio/netty/handler/codec/http/s;

    return-object v0
.end method

.method public isDecompressionSuccessful()Z
    .locals 1

    iget-boolean v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->decompressEncodedContent:Z

    if-nez v0, :cond_0

    const/4 v0, 0x0

    :goto_0
    return v0

    :cond_0
    iget-boolean v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->decompressionSuccessful:Z

    goto :goto_0
.end method

.method public isResponseCompressed()Z
    .locals 1

    iget-boolean v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->responseCompressed:Z

    return v0
.end method

.method public serverToProxyResponse(Lio/netty/handler/codec/http/w;)Lio/netty/handler/codec/http/w;
    .locals 2

    instance-of v0, p1, Lio/netty/handler/codec/http/ac;

    if-eqz v0, :cond_0

    move-object v0, p1

    check-cast v0, Lio/netty/handler/codec/http/ac;

    iput-object v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->httpResponse:Lio/netty/handler/codec/http/ac;

    iget-object v0, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->httpResponse:Lio/netty/handler/codec/http/ac;

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->captureContentEncoding(Lio/netty/handler/codec/http/ac;)V

    :cond_0
    instance-of v0, p1, Lio/netty/handler/codec/http/n;

    if-eqz v0, :cond_1

    move-object v0, p1

    check-cast v0, Lio/netty/handler/codec/http/n;

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->storeResponseContent(Lio/netty/handler/codec/http/n;)V

    instance-of v1, v0, Lio/netty/handler/codec/http/ah;

    if-eqz v1, :cond_1

    check-cast v0, Lio/netty/handler/codec/http/ah;

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->captureTrailingHeaders(Lio/netty/handler/codec/http/ah;)V

    invoke-virtual {p0}, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->captureFullResponseContents()V

    :cond_1
    invoke-super {p0, p1}, Lorg/littleshoot/proxy/j;->serverToProxyResponse(Lio/netty/handler/codec/http/w;)Lio/netty/handler/codec/http/w;

    move-result-object v0

    return-object v0
.end method

.method protected storeResponseContent(Lio/netty/handler/codec/http/n;)V
    .locals 2

    invoke-interface {p1}, Lio/netty/handler/codec/http/n;->a()Lio/netty/buffer/h;

    move-result-object v0

    invoke-static {v0}, Lnet/lightbody/bmp/util/BrowserMobHttpUtil;->extractReadableBytes(Lio/netty/buffer/h;)[B

    move-result-object v0

    :try_start_0
    iget-object v1, p0, Lnet/lightbody/bmp/filters/ServerResponseCaptureFilter;->rawResponseContents:Ljava/io/ByteArrayOutputStream;

    invoke-virtual {v1, v0}, Ljava/io/ByteArrayOutputStream;->write([B)V
    :try_end_0
    .catch Ljava/io/IOException; {:try_start_0 .. :try_end_0} :catch_0

    :goto_0
    return-void

    :catch_0
    move-exception v0

    goto :goto_0
.end method
