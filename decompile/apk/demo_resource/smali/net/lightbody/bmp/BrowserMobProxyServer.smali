.class public Lnet/lightbody/bmp/BrowserMobProxyServer;
.super Ljava/lang/Object;

# interfaces
.implements Lnet/lightbody/bmp/BrowserMobProxy;


# static fields
.field private static final EC_KEYSTORE_RESOURCE:Ljava/lang/String; = "/sslSupport/ca-keystore-ec.p12"

.field private static final HAR_CREATOR_VERSION:Lnet/lightbody/bmp/core/har/HarNameVersion;

.field private static final KEYSTORE_PASSWORD:Ljava/lang/String; = "password"

.field private static final KEYSTORE_PRIVATE_KEY_ALIAS:Ljava/lang/String; = "key"

.field private static final KEYSTORE_TYPE:Ljava/lang/String; = "PKCS12"

.field private static final RSA_KEYSTORE_RESOURCE:Ljava/lang/String; = "/sslSupport/ca-keystore-rsa.p12"

.field public static final VIA_HEADER_ALIAS:Ljava/lang/String; = "browsermobproxy"

.field private static final log:Lorg/slf4j/b;


# instance fields
.field private final activityMonitor:Lnet/lightbody/bmp/proxy/ActivityMonitor;

.field private volatile additionalHeaders:Ljava/util/concurrent/ConcurrentMap;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/concurrent/ConcurrentMap",
            "<",
            "Ljava/lang/String;",
            "Ljava/lang/String;",
            ">;"
        }
    .end annotation
.end field

.field private final basicAuthCredentials:Ljava/util/concurrent/ConcurrentMap;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/concurrent/ConcurrentMap",
            "<",
            "Ljava/lang/String;",
            "Ljava/lang/String;",
            ">;"
        }
    .end annotation
.end field

.field private volatile blacklistEntries:Ljava/util/Collection;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/Collection",
            "<",
            "Lnet/lightbody/bmp/proxy/BlacklistEntry;",
            ">;"
        }
    .end annotation
.end field

.field private volatile chainedProxyCredentials:Ljava/lang/String;

.field private volatile chainedProxyManager:Lorg/littleshoot/proxy/d;

.field private volatile connectTimeoutMs:I

.field private volatile currentHarPage:Lnet/lightbody/bmp/core/har/HarPage;

.field private final delegatingResolver:Lnet/lightbody/bmp/proxy/dns/DelegatingHostResolver;

.field private final filterFactories:Ljava/util/List;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/List",
            "<",
            "Lorg/littleshoot/proxy/k;",
            ">;"
        }
    .end annotation
.end field

.field private volatile har:Lnet/lightbody/bmp/core/har/Har;

.field private final harCaptureFilterEnabled:Ljava/util/concurrent/atomic/AtomicBoolean;

.field private volatile harCaptureTypes:Ljava/util/EnumSet;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/EnumSet",
            "<",
            "Lnet/lightbody/bmp/proxy/CaptureType;",
            ">;"
        }
    .end annotation
.end field

.field private final harPageCount:Ljava/util/concurrent/atomic/AtomicInteger;

.field private volatile idleConnectionTimeoutSec:I

.field private volatile latencyMs:I

.field private volatile mitmDisabled:Z

.field private volatile mitmManager:Lorg/littleshoot/proxy/o;

.field private volatile proxyServer:Lorg/littleshoot/proxy/m;

.field private volatile readBandwidthLimitBps:J

.field private volatile rewriteRules:Ljava/util/concurrent/CopyOnWriteArrayList;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/concurrent/CopyOnWriteArrayList",
            "<",
            "Lnet/lightbody/bmp/proxy/RewriteRule;",
            ">;"
        }
    .end annotation
.end field

.field private volatile serverBindAddress:Ljava/net/InetAddress;

.field private final started:Ljava/util/concurrent/atomic/AtomicBoolean;

.field private final stopped:Ljava/util/concurrent/atomic/AtomicBoolean;

.field private volatile threadPoolConfiguration:Lorg/littleshoot/proxy/impl/l;

.field private volatile trustSource:Lnet/lightbody/bmp/mitm/TrustSource;

.field private volatile upstreamProxyAddress:Ljava/net/InetSocketAddress;

.field private volatile useEcc:Z

.field private final whitelist:Ljava/util/concurrent/atomic/AtomicReference;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/concurrent/atomic/AtomicReference",
            "<",
            "Lnet/lightbody/bmp/proxy/Whitelist;",
            ">;"
        }
    .end annotation
.end field

.field private volatile writeBandwidthLimitBps:J


# direct methods
.method static constructor <clinit>()V
    .locals 3

    const-class v0, Lnet/lightbody/bmp/BrowserMobProxyServer;

    invoke-static {v0}, Lorg/slf4j/c;->a(Ljava/lang/Class;)Lorg/slf4j/b;

    move-result-object v0

    sput-object v0, Lnet/lightbody/bmp/BrowserMobProxyServer;->log:Lorg/slf4j/b;

    new-instance v0, Lnet/lightbody/bmp/core/har/HarNameVersion;

    const-string v1, "BrowserMob Proxy"

    invoke-static {}, Lnet/lightbody/bmp/util/BrowserMobProxyUtil;->getVersionString()Ljava/lang/String;

    move-result-object v2

    invoke-direct {v0, v1, v2}, Lnet/lightbody/bmp/core/har/HarNameVersion;-><init>(Ljava/lang/String;Ljava/lang/String;)V

    sput-object v0, Lnet/lightbody/bmp/BrowserMobProxyServer;->HAR_CREATOR_VERSION:Lnet/lightbody/bmp/core/har/HarNameVersion;

    return-void
.end method

.method public constructor <init>()V
    .locals 4

    const/4 v3, 0x1

    const/4 v2, 0x0

    invoke-direct {p0}, Ljava/lang/Object;-><init>()V

    new-instance v0, Ljava/util/concurrent/atomic/AtomicBoolean;

    invoke-direct {v0, v2}, Ljava/util/concurrent/atomic/AtomicBoolean;-><init>(Z)V

    iput-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->started:Ljava/util/concurrent/atomic/AtomicBoolean;

    new-instance v0, Ljava/util/concurrent/atomic/AtomicBoolean;

    invoke-direct {v0, v2}, Ljava/util/concurrent/atomic/AtomicBoolean;-><init>(Z)V

    iput-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->stopped:Ljava/util/concurrent/atomic/AtomicBoolean;

    new-instance v0, Ljava/util/concurrent/atomic/AtomicInteger;

    invoke-direct {v0, v2}, Ljava/util/concurrent/atomic/AtomicInteger;-><init>(I)V

    iput-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->harPageCount:Ljava/util/concurrent/atomic/AtomicInteger;

    iput-boolean v2, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->mitmDisabled:Z

    new-instance v0, Ljava/util/concurrent/CopyOnWriteArrayList;

    invoke-direct {v0}, Ljava/util/concurrent/CopyOnWriteArrayList;-><init>()V

    iput-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->filterFactories:Ljava/util/List;

    new-instance v0, Ljava/util/concurrent/CopyOnWriteArrayList;

    invoke-direct {v0}, Ljava/util/concurrent/CopyOnWriteArrayList;-><init>()V

    iput-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->blacklistEntries:Ljava/util/Collection;

    new-instance v0, Ljava/util/concurrent/CopyOnWriteArrayList;

    invoke-direct {v0}, Ljava/util/concurrent/CopyOnWriteArrayList;-><init>()V

    iput-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->rewriteRules:Ljava/util/concurrent/CopyOnWriteArrayList;

    const-class v0, Lnet/lightbody/bmp/proxy/CaptureType;

    invoke-static {v0}, Ljava/util/EnumSet;->noneOf(Ljava/lang/Class;)Ljava/util/EnumSet;

    move-result-object v0

    iput-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->harCaptureTypes:Ljava/util/EnumSet;

    new-instance v0, Ljava/util/concurrent/atomic/AtomicReference;

    sget-object v1, Lnet/lightbody/bmp/proxy/Whitelist;->WHITELIST_DISABLED:Lnet/lightbody/bmp/proxy/Whitelist;

    invoke-direct {v0, v1}, Ljava/util/concurrent/atomic/AtomicReference;-><init>(Ljava/lang/Object;)V

    iput-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->whitelist:Ljava/util/concurrent/atomic/AtomicReference;

    new-instance v0, Lcom/google/common/collect/MapMaker;

    invoke-direct {v0}, Lcom/google/common/collect/MapMaker;-><init>()V

    invoke-virtual {v0, v3}, Lcom/google/common/collect/MapMaker;->a(I)Lcom/google/common/collect/MapMaker;

    move-result-object v0

    invoke-virtual {v0}, Lcom/google/common/collect/MapMaker;->j()Ljava/util/concurrent/ConcurrentMap;

    move-result-object v0

    iput-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->additionalHeaders:Ljava/util/concurrent/ConcurrentMap;

    new-instance v0, Ljava/util/concurrent/atomic/AtomicBoolean;

    invoke-direct {v0, v2}, Ljava/util/concurrent/atomic/AtomicBoolean;-><init>(Z)V

    iput-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->harCaptureFilterEnabled:Ljava/util/concurrent/atomic/AtomicBoolean;

    invoke-static {}, Lnet/lightbody/bmp/mitm/TrustSource;->defaultTrustSource()Lnet/lightbody/bmp/mitm/TrustSource;

    move-result-object v0

    iput-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->trustSource:Lnet/lightbody/bmp/mitm/TrustSource;

    iput-boolean v2, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->useEcc:Z

    new-instance v0, Lnet/lightbody/bmp/proxy/dns/DelegatingHostResolver;

    invoke-static {}, Lnet/lightbody/bmp/client/ClientUtil;->createNativeCacheManipulatingResolver()Lnet/lightbody/bmp/proxy/dns/AdvancedHostResolver;

    move-result-object v1

    invoke-direct {v0, v1}, Lnet/lightbody/bmp/proxy/dns/DelegatingHostResolver;-><init>(Lnet/lightbody/bmp/proxy/dns/AdvancedHostResolver;)V

    iput-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->delegatingResolver:Lnet/lightbody/bmp/proxy/dns/DelegatingHostResolver;

    new-instance v0, Lnet/lightbody/bmp/proxy/ActivityMonitor;

    invoke-direct {v0}, Lnet/lightbody/bmp/proxy/ActivityMonitor;-><init>()V

    iput-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->activityMonitor:Lnet/lightbody/bmp/proxy/ActivityMonitor;

    new-instance v0, Lcom/google/common/collect/MapMaker;

    invoke-direct {v0}, Lcom/google/common/collect/MapMaker;-><init>()V

    invoke-virtual {v0, v3}, Lcom/google/common/collect/MapMaker;->a(I)Lcom/google/common/collect/MapMaker;

    move-result-object v0

    invoke-virtual {v0}, Lcom/google/common/collect/MapMaker;->j()Ljava/util/concurrent/ConcurrentMap;

    move-result-object v0

    iput-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->basicAuthCredentials:Ljava/util/concurrent/ConcurrentMap;

    return-void
.end method

.method static synthetic access$000(Lnet/lightbody/bmp/BrowserMobProxyServer;)I
    .locals 1

    invoke-direct {p0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->getMaximumRequestBufferSize()I

    move-result v0

    return v0
.end method

.method static synthetic access$100(Lnet/lightbody/bmp/BrowserMobProxyServer;)I
    .locals 1

    invoke-direct {p0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->getMaximumResponseBufferSize()I

    move-result v0

    return v0
.end method

.method static synthetic access$200(Lnet/lightbody/bmp/BrowserMobProxyServer;)Ljava/net/InetSocketAddress;
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->upstreamProxyAddress:Ljava/net/InetSocketAddress;

    return-object v0
.end method

.method static synthetic access$300(Lnet/lightbody/bmp/BrowserMobProxyServer;)Ljava/lang/String;
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->chainedProxyCredentials:Ljava/lang/String;

    return-object v0
.end method

.method static synthetic access$400(Lnet/lightbody/bmp/BrowserMobProxyServer;)Lnet/lightbody/bmp/proxy/ActivityMonitor;
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->activityMonitor:Lnet/lightbody/bmp/proxy/ActivityMonitor;

    return-object v0
.end method

.method static synthetic access$500(Lnet/lightbody/bmp/BrowserMobProxyServer;)Ljava/util/concurrent/atomic/AtomicReference;
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->whitelist:Ljava/util/concurrent/atomic/AtomicReference;

    return-object v0
.end method

.method static synthetic access$600(Lnet/lightbody/bmp/BrowserMobProxyServer;)Ljava/util/concurrent/ConcurrentMap;
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->basicAuthCredentials:Ljava/util/concurrent/ConcurrentMap;

    return-object v0
.end method

.method static synthetic access$700(Lnet/lightbody/bmp/BrowserMobProxyServer;)Ljava/util/concurrent/CopyOnWriteArrayList;
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->rewriteRules:Ljava/util/concurrent/CopyOnWriteArrayList;

    return-object v0
.end method

.method static synthetic access$800(Lnet/lightbody/bmp/BrowserMobProxyServer;)Ljava/util/concurrent/ConcurrentMap;
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->additionalHeaders:Ljava/util/concurrent/ConcurrentMap;

    return-object v0
.end method

.method static synthetic access$900(Lnet/lightbody/bmp/BrowserMobProxyServer;)I
    .locals 1

    iget v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->latencyMs:I

    return v0
.end method

.method private getMaximumRequestBufferSize()I
    .locals 3

    const/4 v0, 0x0

    iget-object v1, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->filterFactories:Ljava/util/List;

    invoke-interface {v1}, Ljava/util/List;->iterator()Ljava/util/Iterator;

    move-result-object v2

    move v1, v0

    :goto_0
    invoke-interface {v2}, Ljava/util/Iterator;->hasNext()Z

    move-result v0

    if-eqz v0, :cond_0

    invoke-interface {v2}, Ljava/util/Iterator;->next()Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lorg/littleshoot/proxy/k;

    invoke-interface {v0}, Lorg/littleshoot/proxy/k;->getMaximumRequestBufferSizeInBytes()I

    move-result v0

    if-le v0, v1, :cond_1

    :goto_1
    move v1, v0

    goto :goto_0

    :cond_0
    return v1

    :cond_1
    move v0, v1

    goto :goto_1
.end method

.method private getMaximumResponseBufferSize()I
    .locals 3

    const/4 v0, 0x0

    iget-object v1, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->filterFactories:Ljava/util/List;

    invoke-interface {v1}, Ljava/util/List;->iterator()Ljava/util/Iterator;

    move-result-object v2

    move v1, v0

    :goto_0
    invoke-interface {v2}, Ljava/util/Iterator;->hasNext()Z

    move-result v0

    if-eqz v0, :cond_0

    invoke-interface {v2}, Ljava/util/Iterator;->next()Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lorg/littleshoot/proxy/k;

    invoke-interface {v0}, Lorg/littleshoot/proxy/k;->getMaximumResponseBufferSizeInBytes()I

    move-result v0

    if-le v0, v1, :cond_1

    :goto_1
    move v1, v0

    goto :goto_0

    :cond_0
    return v1

    :cond_1
    move v0, v1

    goto :goto_1
.end method


# virtual methods
.method public abort()V
    .locals 1

    const/4 v0, 0x0

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->stop(Z)V

    return-void
.end method

.method protected addBrowserMobFilters()V
    .locals 1

    new-instance v0, Lnet/lightbody/bmp/BrowserMobProxyServer$3;

    invoke-direct {v0, p0}, Lnet/lightbody/bmp/BrowserMobProxyServer$3;-><init>(Lnet/lightbody/bmp/BrowserMobProxyServer;)V

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->addHttpFilterFactory(Lorg/littleshoot/proxy/k;)V

    new-instance v0, Lnet/lightbody/bmp/BrowserMobProxyServer$4;

    invoke-direct {v0, p0}, Lnet/lightbody/bmp/BrowserMobProxyServer$4;-><init>(Lnet/lightbody/bmp/BrowserMobProxyServer;)V

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->addHttpFilterFactory(Lorg/littleshoot/proxy/k;)V

    new-instance v0, Lnet/lightbody/bmp/BrowserMobProxyServer$5;

    invoke-direct {v0, p0}, Lnet/lightbody/bmp/BrowserMobProxyServer$5;-><init>(Lnet/lightbody/bmp/BrowserMobProxyServer;)V

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->addHttpFilterFactory(Lorg/littleshoot/proxy/k;)V

    new-instance v0, Lnet/lightbody/bmp/BrowserMobProxyServer$6;

    invoke-direct {v0, p0}, Lnet/lightbody/bmp/BrowserMobProxyServer$6;-><init>(Lnet/lightbody/bmp/BrowserMobProxyServer;)V

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->addHttpFilterFactory(Lorg/littleshoot/proxy/k;)V

    new-instance v0, Lnet/lightbody/bmp/BrowserMobProxyServer$7;

    invoke-direct {v0, p0}, Lnet/lightbody/bmp/BrowserMobProxyServer$7;-><init>(Lnet/lightbody/bmp/BrowserMobProxyServer;)V

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->addHttpFilterFactory(Lorg/littleshoot/proxy/k;)V

    new-instance v0, Lnet/lightbody/bmp/BrowserMobProxyServer$8;

    invoke-direct {v0, p0}, Lnet/lightbody/bmp/BrowserMobProxyServer$8;-><init>(Lnet/lightbody/bmp/BrowserMobProxyServer;)V

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->addHttpFilterFactory(Lorg/littleshoot/proxy/k;)V

    new-instance v0, Lnet/lightbody/bmp/BrowserMobProxyServer$9;

    invoke-direct {v0, p0}, Lnet/lightbody/bmp/BrowserMobProxyServer$9;-><init>(Lnet/lightbody/bmp/BrowserMobProxyServer;)V

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->addHttpFilterFactory(Lorg/littleshoot/proxy/k;)V

    new-instance v0, Lnet/lightbody/bmp/BrowserMobProxyServer$10;

    invoke-direct {v0, p0}, Lnet/lightbody/bmp/BrowserMobProxyServer$10;-><init>(Lnet/lightbody/bmp/BrowserMobProxyServer;)V

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->addHttpFilterFactory(Lorg/littleshoot/proxy/k;)V

    new-instance v0, Lnet/lightbody/bmp/BrowserMobProxyServer$11;

    invoke-direct {v0, p0}, Lnet/lightbody/bmp/BrowserMobProxyServer$11;-><init>(Lnet/lightbody/bmp/BrowserMobProxyServer;)V

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->addHttpFilterFactory(Lorg/littleshoot/proxy/k;)V

    new-instance v0, Lnet/lightbody/bmp/BrowserMobProxyServer$12;

    invoke-direct {v0, p0}, Lnet/lightbody/bmp/BrowserMobProxyServer$12;-><init>(Lnet/lightbody/bmp/BrowserMobProxyServer;)V

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->addHttpFilterFactory(Lorg/littleshoot/proxy/k;)V

    new-instance v0, Lnet/lightbody/bmp/BrowserMobProxyServer$13;

    invoke-direct {v0, p0}, Lnet/lightbody/bmp/BrowserMobProxyServer$13;-><init>(Lnet/lightbody/bmp/BrowserMobProxyServer;)V

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->addHttpFilterFactory(Lorg/littleshoot/proxy/k;)V

    return-void
.end method

.method public addFirstHttpFilterFactory(Lorg/littleshoot/proxy/k;)V
    .locals 2

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->filterFactories:Ljava/util/List;

    const/4 v1, 0x0

    invoke-interface {v0, v1, p1}, Ljava/util/List;->add(ILjava/lang/Object;)V

    return-void
.end method

.method protected addHarCaptureFilter()V
    .locals 3

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->harCaptureFilterEnabled:Ljava/util/concurrent/atomic/AtomicBoolean;

    const/4 v1, 0x0

    const/4 v2, 0x1

    invoke-virtual {v0, v1, v2}, Ljava/util/concurrent/atomic/AtomicBoolean;->compareAndSet(ZZ)Z

    move-result v0

    if-eqz v0, :cond_0

    new-instance v0, Lnet/lightbody/bmp/BrowserMobProxyServer$14;

    invoke-direct {v0, p0}, Lnet/lightbody/bmp/BrowserMobProxyServer$14;-><init>(Lnet/lightbody/bmp/BrowserMobProxyServer;)V

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->addHttpFilterFactory(Lorg/littleshoot/proxy/k;)V

    new-instance v0, Lnet/lightbody/bmp/BrowserMobProxyServer$15;

    invoke-direct {v0, p0}, Lnet/lightbody/bmp/BrowserMobProxyServer$15;-><init>(Lnet/lightbody/bmp/BrowserMobProxyServer;)V

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->addHttpFilterFactory(Lorg/littleshoot/proxy/k;)V

    :cond_0
    return-void
.end method

.method public addHeader(Ljava/lang/String;Ljava/lang/String;)V
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->additionalHeaders:Ljava/util/concurrent/ConcurrentMap;

    invoke-interface {v0, p1, p2}, Ljava/util/concurrent/ConcurrentMap;->put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;

    return-void
.end method

.method public addHeaders(Ljava/util/Map;)V
    .locals 2
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "(",
            "Ljava/util/Map",
            "<",
            "Ljava/lang/String;",
            "Ljava/lang/String;",
            ">;)V"
        }
    .end annotation

    new-instance v0, Lcom/google/common/collect/MapMaker;

    invoke-direct {v0}, Lcom/google/common/collect/MapMaker;-><init>()V

    const/4 v1, 0x1

    invoke-virtual {v0, v1}, Lcom/google/common/collect/MapMaker;->a(I)Lcom/google/common/collect/MapMaker;

    move-result-object v0

    invoke-virtual {v0}, Lcom/google/common/collect/MapMaker;->j()Ljava/util/concurrent/ConcurrentMap;

    move-result-object v0

    invoke-interface {v0, p1}, Ljava/util/concurrent/ConcurrentMap;->putAll(Ljava/util/Map;)V

    iput-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->additionalHeaders:Ljava/util/concurrent/ConcurrentMap;

    return-void
.end method

.method public addHttpFilterFactory(Lorg/littleshoot/proxy/k;)V
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->filterFactories:Ljava/util/List;

    invoke-interface {v0, p1}, Ljava/util/List;->add(Ljava/lang/Object;)Z

    return-void
.end method

.method public addLastHttpFilterFactory(Lorg/littleshoot/proxy/k;)V
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->filterFactories:Ljava/util/List;

    invoke-interface {v0, p1}, Ljava/util/List;->add(Ljava/lang/Object;)Z

    return-void
.end method

.method public addRequestFilter(Lnet/lightbody/bmp/filters/RequestFilter;)V
    .locals 1

    new-instance v0, Lnet/lightbody/bmp/filters/RequestFilterAdapter$FilterSource;

    invoke-direct {v0, p1}, Lnet/lightbody/bmp/filters/RequestFilterAdapter$FilterSource;-><init>(Lnet/lightbody/bmp/filters/RequestFilter;)V

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->addFirstHttpFilterFactory(Lorg/littleshoot/proxy/k;)V

    return-void
.end method

.method public addResponseFilter(Lnet/lightbody/bmp/filters/ResponseFilter;)V
    .locals 1

    new-instance v0, Lnet/lightbody/bmp/filters/ResponseFilterAdapter$FilterSource;

    invoke-direct {v0, p1}, Lnet/lightbody/bmp/filters/ResponseFilterAdapter$FilterSource;-><init>(Lnet/lightbody/bmp/filters/ResponseFilter;)V

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->addLastHttpFilterFactory(Lorg/littleshoot/proxy/k;)V

    return-void
.end method

.method public addWhitelistPattern(Ljava/lang/String;)V
    .locals 5

    const/4 v0, 0x0

    :goto_0
    if-nez v0, :cond_2

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->whitelist:Ljava/util/concurrent/atomic/AtomicReference;

    invoke-virtual {v0}, Ljava/util/concurrent/atomic/AtomicReference;->get()Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lnet/lightbody/bmp/proxy/Whitelist;

    invoke-virtual {v0}, Lnet/lightbody/bmp/proxy/Whitelist;->isEnabled()Z

    move-result v1

    if-nez v1, :cond_0

    new-instance v0, Ljava/lang/IllegalStateException;

    const-string v1, "Whitelist is disabled. Cannot add patterns to a disabled whitelist."

    invoke-direct {v0, v1}, Ljava/lang/IllegalStateException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_0
    invoke-virtual {v0}, Lnet/lightbody/bmp/proxy/Whitelist;->getStatusCode()I

    move-result v2

    new-instance v3, Ljava/util/ArrayList;

    invoke-virtual {v0}, Lnet/lightbody/bmp/proxy/Whitelist;->getPatterns()Ljava/util/Collection;

    move-result-object v1

    invoke-interface {v1}, Ljava/util/Collection;->size()I

    move-result v1

    add-int/lit8 v1, v1, 0x1

    invoke-direct {v3, v1}, Ljava/util/ArrayList;-><init>(I)V

    invoke-virtual {v0}, Lnet/lightbody/bmp/proxy/Whitelist;->getPatterns()Ljava/util/Collection;

    move-result-object v1

    invoke-interface {v1}, Ljava/util/Collection;->iterator()Ljava/util/Iterator;

    move-result-object v4

    :goto_1
    invoke-interface {v4}, Ljava/util/Iterator;->hasNext()Z

    move-result v1

    if-eqz v1, :cond_1

    invoke-interface {v4}, Ljava/util/Iterator;->next()Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Ljava/util/regex/Pattern;

    invoke-virtual {v1}, Ljava/util/regex/Pattern;->pattern()Ljava/lang/String;

    move-result-object v1

    invoke-interface {v3, v1}, Ljava/util/List;->add(Ljava/lang/Object;)Z

    goto :goto_1

    :cond_1
    invoke-interface {v3, p1}, Ljava/util/List;->add(Ljava/lang/Object;)Z

    new-instance v1, Lnet/lightbody/bmp/proxy/Whitelist;

    invoke-direct {v1, v3, v2}, Lnet/lightbody/bmp/proxy/Whitelist;-><init>(Ljava/util/Collection;I)V

    iget-object v2, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->whitelist:Ljava/util/concurrent/atomic/AtomicReference;

    invoke-virtual {v2, v0, v1}, Ljava/util/concurrent/atomic/AtomicReference;->compareAndSet(Ljava/lang/Object;Ljava/lang/Object;)Z

    move-result v0

    goto :goto_0

    :cond_2
    return-void
.end method

.method public autoAuthorization(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lnet/lightbody/bmp/proxy/auth/AuthType;)V
    .locals 3

    sget-object v0, Lnet/lightbody/bmp/BrowserMobProxyServer$16;->$SwitchMap$net$lightbody$bmp$proxy$auth$AuthType:[I

    invoke-virtual {p4}, Lnet/lightbody/bmp/proxy/auth/AuthType;->ordinal()I

    move-result v1

    aget v0, v0, v1

    packed-switch v0, :pswitch_data_0

    new-instance v0, Ljava/lang/UnsupportedOperationException;

    new-instance v1, Ljava/lang/StringBuilder;

    invoke-direct {v1}, Ljava/lang/StringBuilder;-><init>()V

    const-string v2, "AuthType "

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1, p4}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v1

    const-string v2, " is not supported for HTTP Authorization"

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v1

    invoke-direct {v0, v1}, Ljava/lang/UnsupportedOperationException;-><init>(Ljava/lang/String;)V

    throw v0

    :pswitch_0
    invoke-static {p2, p3}, Lnet/lightbody/bmp/util/BrowserMobHttpUtil;->base64EncodeBasicCredentials(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v0

    iget-object v1, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->basicAuthCredentials:Ljava/util/concurrent/ConcurrentMap;

    invoke-interface {v1, p1, v0}, Ljava/util/concurrent/ConcurrentMap;->put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;

    return-void

    :pswitch_data_0
    .packed-switch 0x1
        :pswitch_0
    .end packed-switch
.end method

.method public blacklistRequests(Ljava/lang/String;I)V
    .locals 2

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->blacklistEntries:Ljava/util/Collection;

    new-instance v1, Lnet/lightbody/bmp/proxy/BlacklistEntry;

    invoke-direct {v1, p1, p2}, Lnet/lightbody/bmp/proxy/BlacklistEntry;-><init>(Ljava/lang/String;I)V

    invoke-interface {v0, v1}, Ljava/util/Collection;->add(Ljava/lang/Object;)Z

    return-void
.end method

.method public blacklistRequests(Ljava/lang/String;ILjava/lang/String;)V
    .locals 2

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->blacklistEntries:Ljava/util/Collection;

    new-instance v1, Lnet/lightbody/bmp/proxy/BlacklistEntry;

    invoke-direct {v1, p1, p2, p3}, Lnet/lightbody/bmp/proxy/BlacklistEntry;-><init>(Ljava/lang/String;ILjava/lang/String;)V

    invoke-interface {v0, v1}, Ljava/util/Collection;->add(Ljava/lang/Object;)Z

    return-void
.end method

.method public chainedProxyAuthorization(Ljava/lang/String;Ljava/lang/String;Lnet/lightbody/bmp/proxy/auth/AuthType;)V
    .locals 3

    sget-object v0, Lnet/lightbody/bmp/BrowserMobProxyServer$16;->$SwitchMap$net$lightbody$bmp$proxy$auth$AuthType:[I

    invoke-virtual {p3}, Lnet/lightbody/bmp/proxy/auth/AuthType;->ordinal()I

    move-result v1

    aget v0, v0, v1

    packed-switch v0, :pswitch_data_0

    new-instance v0, Ljava/lang/UnsupportedOperationException;

    new-instance v1, Ljava/lang/StringBuilder;

    invoke-direct {v1}, Ljava/lang/StringBuilder;-><init>()V

    const-string v2, "AuthType "

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1, p3}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v1

    const-string v2, " is not supported for Proxy Authorization"

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v1

    invoke-direct {v0, v1}, Ljava/lang/UnsupportedOperationException;-><init>(Ljava/lang/String;)V

    throw v0

    :pswitch_0
    invoke-static {p1, p2}, Lnet/lightbody/bmp/util/BrowserMobHttpUtil;->base64EncodeBasicCredentials(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v0

    iput-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->chainedProxyCredentials:Ljava/lang/String;

    return-void

    nop

    :pswitch_data_0
    .packed-switch 0x1
        :pswitch_0
    .end packed-switch
.end method

.method public clearBlacklist()V
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->blacklistEntries:Ljava/util/Collection;

    invoke-interface {v0}, Ljava/util/Collection;->clear()V

    return-void
.end method

.method public clearRewriteRules()V
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->rewriteRules:Ljava/util/concurrent/CopyOnWriteArrayList;

    invoke-virtual {v0}, Ljava/util/concurrent/CopyOnWriteArrayList;->clear()V

    return-void
.end method

.method public deletePage(Lnet/lightbody/bmp/core/har/HarPage;)Ljava/lang/Boolean;
    .locals 2

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->har:Lnet/lightbody/bmp/core/har/Har;

    if-nez v0, :cond_0

    new-instance v0, Ljava/lang/IllegalStateException;

    const-string v1, "No HAR exists for this proxy. Use newHar() to create a new HAR before calling newPage()."

    invoke-direct {v0, v1}, Ljava/lang/IllegalStateException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_0
    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->har:Lnet/lightbody/bmp/core/har/Har;

    invoke-virtual {v0}, Lnet/lightbody/bmp/core/har/Har;->getLog()Lnet/lightbody/bmp/core/har/HarLog;

    move-result-object v0

    invoke-virtual {v0, p1}, Lnet/lightbody/bmp/core/har/HarLog;->deletePage(Lnet/lightbody/bmp/core/har/HarPage;)Ljava/lang/Boolean;

    move-result-object v0

    return-object v0
.end method

.method public disableHarCaptureTypes(Ljava/util/Set;)V
    .locals 1
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "(",
            "Ljava/util/Set",
            "<",
            "Lnet/lightbody/bmp/proxy/CaptureType;",
            ">;)V"
        }
    .end annotation

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->harCaptureTypes:Ljava/util/EnumSet;

    invoke-virtual {v0, p1}, Ljava/util/EnumSet;->removeAll(Ljava/util/Collection;)Z

    return-void
.end method

.method public varargs disableHarCaptureTypes([Lnet/lightbody/bmp/proxy/CaptureType;)V
    .locals 1

    if-nez p1, :cond_0

    const-class v0, Lnet/lightbody/bmp/proxy/CaptureType;

    invoke-static {v0}, Ljava/util/EnumSet;->noneOf(Ljava/lang/Class;)Ljava/util/EnumSet;

    move-result-object v0

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->disableHarCaptureTypes(Ljava/util/Set;)V

    :goto_0
    return-void

    :cond_0
    invoke-static {p1}, Ljava/util/Arrays;->asList([Ljava/lang/Object;)Ljava/util/List;

    move-result-object v0

    invoke-static {v0}, Ljava/util/EnumSet;->copyOf(Ljava/util/Collection;)Ljava/util/EnumSet;

    move-result-object v0

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->disableHarCaptureTypes(Ljava/util/Set;)V

    goto :goto_0
.end method

.method public disableWhitelist()V
    .locals 2

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->whitelist:Ljava/util/concurrent/atomic/AtomicReference;

    sget-object v1, Lnet/lightbody/bmp/proxy/Whitelist;->WHITELIST_DISABLED:Lnet/lightbody/bmp/proxy/Whitelist;

    invoke-virtual {v0, v1}, Ljava/util/concurrent/atomic/AtomicReference;->set(Ljava/lang/Object;)V

    return-void
.end method

.method public enableEmptyWhitelist(I)V
    .locals 2

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->whitelist:Ljava/util/concurrent/atomic/AtomicReference;

    new-instance v1, Lnet/lightbody/bmp/proxy/Whitelist;

    invoke-direct {v1, p1}, Lnet/lightbody/bmp/proxy/Whitelist;-><init>(I)V

    invoke-virtual {v0, v1}, Ljava/util/concurrent/atomic/AtomicReference;->set(Ljava/lang/Object;)V

    return-void
.end method

.method public enableHarCaptureTypes(Ljava/util/Set;)V
    .locals 1
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "(",
            "Ljava/util/Set",
            "<",
            "Lnet/lightbody/bmp/proxy/CaptureType;",
            ">;)V"
        }
    .end annotation

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->harCaptureTypes:Ljava/util/EnumSet;

    invoke-virtual {v0, p1}, Ljava/util/EnumSet;->addAll(Ljava/util/Collection;)Z

    return-void
.end method

.method public varargs enableHarCaptureTypes([Lnet/lightbody/bmp/proxy/CaptureType;)V
    .locals 1

    if-nez p1, :cond_0

    const-class v0, Lnet/lightbody/bmp/proxy/CaptureType;

    invoke-static {v0}, Ljava/util/EnumSet;->noneOf(Ljava/lang/Class;)Ljava/util/EnumSet;

    move-result-object v0

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->enableHarCaptureTypes(Ljava/util/Set;)V

    :goto_0
    return-void

    :cond_0
    invoke-static {p1}, Ljava/util/Arrays;->asList([Ljava/lang/Object;)Ljava/util/List;

    move-result-object v0

    invoke-static {v0}, Ljava/util/EnumSet;->copyOf(Ljava/util/Collection;)Ljava/util/EnumSet;

    move-result-object v0

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->enableHarCaptureTypes(Ljava/util/Set;)V

    goto :goto_0
.end method

.method public endHar()Lnet/lightbody/bmp/core/har/Har;
    .locals 2

    invoke-virtual {p0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->getHar()Lnet/lightbody/bmp/core/har/Har;

    move-result-object v0

    invoke-virtual {p0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->endPage()V

    const/4 v1, 0x0

    iput-object v1, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->har:Lnet/lightbody/bmp/core/har/Har;

    return-object v0
.end method

.method public endPage()V
    .locals 6

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->har:Lnet/lightbody/bmp/core/har/Har;

    if-nez v0, :cond_0

    new-instance v0, Ljava/lang/IllegalStateException;

    const-string v1, "No HAR exists for this proxy. Use newHar() to create a new HAR."

    invoke-direct {v0, v1}, Ljava/lang/IllegalStateException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_0
    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->currentHarPage:Lnet/lightbody/bmp/core/har/HarPage;

    const/4 v1, 0x0

    iput-object v1, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->currentHarPage:Lnet/lightbody/bmp/core/har/HarPage;

    if-nez v0, :cond_1

    :goto_0
    return-void

    :cond_1
    invoke-virtual {v0}, Lnet/lightbody/bmp/core/har/HarPage;->getPageTimings()Lnet/lightbody/bmp/core/har/HarPageTimings;

    move-result-object v1

    new-instance v2, Ljava/util/Date;

    invoke-direct {v2}, Ljava/util/Date;-><init>()V

    invoke-virtual {v2}, Ljava/util/Date;->getTime()J

    move-result-wide v2

    invoke-virtual {v0}, Lnet/lightbody/bmp/core/har/HarPage;->getStartedDateTime()Ljava/util/Date;

    move-result-object v0

    invoke-virtual {v0}, Ljava/util/Date;->getTime()J

    move-result-wide v4

    sub-long/2addr v2, v4

    invoke-static {v2, v3}, Ljava/lang/Long;->valueOf(J)Ljava/lang/Long;

    move-result-object v0

    invoke-virtual {v1, v0}, Lnet/lightbody/bmp/core/har/HarPageTimings;->setOnLoad(Ljava/lang/Long;)V

    goto :goto_0
.end method

.method public getAllHeaders()Ljava/util/Map;
    .locals 1
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "()",
            "Ljava/util/Map",
            "<",
            "Ljava/lang/String;",
            "Ljava/lang/String;",
            ">;"
        }
    .end annotation

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->additionalHeaders:Ljava/util/concurrent/ConcurrentMap;

    invoke-static {v0}, Lcom/google/common/collect/ImmutableMap;->a(Ljava/util/Map;)Lcom/google/common/collect/ImmutableMap;

    move-result-object v0

    return-object v0
.end method

.method public getBlacklist()Ljava/util/Collection;
    .locals 1
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "()",
            "Ljava/util/Collection",
            "<",
            "Lnet/lightbody/bmp/proxy/BlacklistEntry;",
            ">;"
        }
    .end annotation

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->blacklistEntries:Ljava/util/Collection;

    invoke-static {v0}, Ljava/util/Collections;->unmodifiableCollection(Ljava/util/Collection;)Ljava/util/Collection;

    move-result-object v0

    return-object v0
.end method

.method public getChainedProxy()Ljava/net/InetSocketAddress;
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->upstreamProxyAddress:Ljava/net/InetSocketAddress;

    return-object v0
.end method

.method public getClientBindAddress()Ljava/net/InetAddress;
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->started:Ljava/util/concurrent/atomic/AtomicBoolean;

    invoke-virtual {v0}, Ljava/util/concurrent/atomic/AtomicBoolean;->get()Z

    move-result v0

    if-eqz v0, :cond_0

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->proxyServer:Lorg/littleshoot/proxy/m;

    invoke-interface {v0}, Lorg/littleshoot/proxy/m;->c()Ljava/net/InetSocketAddress;

    move-result-object v0

    invoke-virtual {v0}, Ljava/net/InetSocketAddress;->getAddress()Ljava/net/InetAddress;

    move-result-object v0

    :goto_0
    return-object v0

    :cond_0
    const/4 v0, 0x0

    goto :goto_0
.end method

.method public getCurrentHarPage()Lnet/lightbody/bmp/core/har/HarPage;
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->currentHarPage:Lnet/lightbody/bmp/core/har/HarPage;

    return-object v0
.end method

.method public getFilterFactories()Ljava/util/List;
    .locals 1
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "()",
            "Ljava/util/List",
            "<",
            "Lorg/littleshoot/proxy/k;",
            ">;"
        }
    .end annotation

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->filterFactories:Ljava/util/List;

    return-object v0
.end method

.method public getHar()Lnet/lightbody/bmp/core/har/Har;
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->har:Lnet/lightbody/bmp/core/har/Har;

    return-object v0
.end method

.method public getHar(Ljava/lang/String;)Lnet/lightbody/bmp/core/har/Har;
    .locals 2

    new-instance v0, Lnet/lightbody/bmp/core/har/PageRefFilteredHar;

    invoke-virtual {p0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->getHar()Lnet/lightbody/bmp/core/har/Har;

    move-result-object v1

    invoke-direct {v0, v1, p1}, Lnet/lightbody/bmp/core/har/PageRefFilteredHar;-><init>(Lnet/lightbody/bmp/core/har/Har;Ljava/lang/String;)V

    return-object v0
.end method

.method public getHar(Ljava/util/Set;)Lnet/lightbody/bmp/core/har/Har;
    .locals 2
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "(",
            "Ljava/util/Set",
            "<",
            "Ljava/lang/String;",
            ">;)",
            "Lnet/lightbody/bmp/core/har/Har;"
        }
    .end annotation

    new-instance v0, Lnet/lightbody/bmp/core/har/PageRefFilteredHar;

    invoke-virtual {p0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->getHar()Lnet/lightbody/bmp/core/har/Har;

    move-result-object v1

    invoke-direct {v0, v1, p1}, Lnet/lightbody/bmp/core/har/PageRefFilteredHar;-><init>(Lnet/lightbody/bmp/core/har/Har;Ljava/util/Set;)V

    return-object v0
.end method

.method public getHarCaptureTypes()Ljava/util/EnumSet;
    .locals 1
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "()",
            "Ljava/util/EnumSet",
            "<",
            "Lnet/lightbody/bmp/proxy/CaptureType;",
            ">;"
        }
    .end annotation

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->harCaptureTypes:Ljava/util/EnumSet;

    invoke-static {v0}, Ljava/util/EnumSet;->copyOf(Ljava/util/EnumSet;)Ljava/util/EnumSet;

    move-result-object v0

    return-object v0
.end method

.method public getHostNameResolver()Lnet/lightbody/bmp/proxy/dns/AdvancedHostResolver;
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->delegatingResolver:Lnet/lightbody/bmp/proxy/dns/DelegatingHostResolver;

    invoke-virtual {v0}, Lnet/lightbody/bmp/proxy/dns/DelegatingHostResolver;->getResolver()Lnet/lightbody/bmp/proxy/dns/AdvancedHostResolver;

    move-result-object v0

    return-object v0
.end method

.method public getPort()I
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->started:Ljava/util/concurrent/atomic/AtomicBoolean;

    invoke-virtual {v0}, Ljava/util/concurrent/atomic/AtomicBoolean;->get()Z

    move-result v0

    if-eqz v0, :cond_0

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->proxyServer:Lorg/littleshoot/proxy/m;

    invoke-interface {v0}, Lorg/littleshoot/proxy/m;->c()Ljava/net/InetSocketAddress;

    move-result-object v0

    invoke-virtual {v0}, Ljava/net/InetSocketAddress;->getPort()I

    move-result v0

    :goto_0
    return v0

    :cond_0
    const/4 v0, 0x0

    goto :goto_0
.end method

.method public getReadBandwidthLimit()J
    .locals 2

    iget-wide v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->readBandwidthLimitBps:J

    return-wide v0
.end method

.method public getRewriteRules()Ljava/util/Map;
    .locals 4
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "()",
            "Ljava/util/Map",
            "<",
            "Ljava/lang/String;",
            "Ljava/lang/String;",
            ">;"
        }
    .end annotation

    invoke-static {}, Lcom/google/common/collect/ImmutableMap;->f()Lcom/google/common/collect/ImmutableMap$a;

    move-result-object v1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->rewriteRules:Ljava/util/concurrent/CopyOnWriteArrayList;

    invoke-virtual {v0}, Ljava/util/concurrent/CopyOnWriteArrayList;->iterator()Ljava/util/Iterator;

    move-result-object v2

    :goto_0
    invoke-interface {v2}, Ljava/util/Iterator;->hasNext()Z

    move-result v0

    if-eqz v0, :cond_0

    invoke-interface {v2}, Ljava/util/Iterator;->next()Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lnet/lightbody/bmp/proxy/RewriteRule;

    invoke-virtual {v0}, Lnet/lightbody/bmp/proxy/RewriteRule;->getPattern()Ljava/util/regex/Pattern;

    move-result-object v3

    invoke-virtual {v3}, Ljava/util/regex/Pattern;->pattern()Ljava/lang/String;

    move-result-object v3

    invoke-virtual {v0}, Lnet/lightbody/bmp/proxy/RewriteRule;->getReplace()Ljava/lang/String;

    move-result-object v0

    invoke-virtual {v1, v3, v0}, Lcom/google/common/collect/ImmutableMap$a;->a(Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableMap$a;

    goto :goto_0

    :cond_0
    invoke-virtual {v1}, Lcom/google/common/collect/ImmutableMap$a;->a()Lcom/google/common/collect/ImmutableMap;

    move-result-object v0

    return-object v0
.end method

.method public getServerBindAddress()Ljava/net/InetAddress;
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->serverBindAddress:Ljava/net/InetAddress;

    return-object v0
.end method

.method public getWhitelistStatusCode()I
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->whitelist:Ljava/util/concurrent/atomic/AtomicReference;

    invoke-virtual {v0}, Ljava/util/concurrent/atomic/AtomicReference;->get()Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lnet/lightbody/bmp/proxy/Whitelist;

    invoke-virtual {v0}, Lnet/lightbody/bmp/proxy/Whitelist;->getStatusCode()I

    move-result v0

    return v0
.end method

.method public getWhitelistUrls()Ljava/util/Collection;
    .locals 3
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "()",
            "Ljava/util/Collection",
            "<",
            "Ljava/lang/String;",
            ">;"
        }
    .end annotation

    invoke-static {}, Lcom/google/common/collect/ImmutableList;->i()Lcom/google/common/collect/ImmutableList$a;

    move-result-object v1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->whitelist:Ljava/util/concurrent/atomic/AtomicReference;

    invoke-virtual {v0}, Ljava/util/concurrent/atomic/AtomicReference;->get()Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lnet/lightbody/bmp/proxy/Whitelist;

    invoke-virtual {v0}, Lnet/lightbody/bmp/proxy/Whitelist;->getPatterns()Ljava/util/Collection;

    move-result-object v0

    invoke-interface {v0}, Ljava/util/Collection;->iterator()Ljava/util/Iterator;

    move-result-object v2

    :goto_0
    invoke-interface {v2}, Ljava/util/Iterator;->hasNext()Z

    move-result v0

    if-eqz v0, :cond_0

    invoke-interface {v2}, Ljava/util/Iterator;->next()Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Ljava/util/regex/Pattern;

    invoke-virtual {v0}, Ljava/util/regex/Pattern;->pattern()Ljava/lang/String;

    move-result-object v0

    invoke-virtual {v1, v0}, Lcom/google/common/collect/ImmutableList$a;->c(Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList$a;

    goto :goto_0

    :cond_0
    invoke-virtual {v1}, Lcom/google/common/collect/ImmutableList$a;->a()Lcom/google/common/collect/ImmutableList;

    move-result-object v0

    return-object v0
.end method

.method public getWriteBandwidthLimit()J
    .locals 2

    iget-wide v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->writeBandwidthLimitBps:J

    return-wide v0
.end method

.method public isMitmDisabled()Z
    .locals 1

    iget-boolean v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->mitmDisabled:Z

    return v0
.end method

.method public isStarted()Z
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->started:Ljava/util/concurrent/atomic/AtomicBoolean;

    invoke-virtual {v0}, Ljava/util/concurrent/atomic/AtomicBoolean;->get()Z

    move-result v0

    return v0
.end method

.method public isStopped()Z
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->stopped:Ljava/util/concurrent/atomic/AtomicBoolean;

    invoke-virtual {v0}, Ljava/util/concurrent/atomic/AtomicBoolean;->get()Z

    move-result v0

    return v0
.end method

.method public isWhitelistEnabled()Z
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->whitelist:Ljava/util/concurrent/atomic/AtomicReference;

    invoke-virtual {v0}, Ljava/util/concurrent/atomic/AtomicReference;->get()Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lnet/lightbody/bmp/proxy/Whitelist;

    invoke-virtual {v0}, Lnet/lightbody/bmp/proxy/Whitelist;->isEnabled()Z

    move-result v0

    return v0
.end method

.method public newHar()Lnet/lightbody/bmp/core/har/Har;
    .locals 1

    const/4 v0, 0x0

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->newHar(Ljava/lang/String;)Lnet/lightbody/bmp/core/har/Har;

    move-result-object v0

    return-object v0
.end method

.method public newHar(Ljava/lang/String;)Lnet/lightbody/bmp/core/har/Har;
    .locals 1

    const/4 v0, 0x0

    invoke-virtual {p0, p1, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->newHar(Ljava/lang/String;Ljava/lang/String;)Lnet/lightbody/bmp/core/har/Har;

    move-result-object v0

    return-object v0
.end method

.method public newHar(Ljava/lang/String;Ljava/lang/String;)Lnet/lightbody/bmp/core/har/Har;
    .locals 4

    invoke-virtual {p0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->getHar()Lnet/lightbody/bmp/core/har/Har;

    move-result-object v0

    invoke-virtual {p0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->addHarCaptureFilter()V

    iget-object v1, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->harPageCount:Ljava/util/concurrent/atomic/AtomicInteger;

    const/4 v2, 0x0

    invoke-virtual {v1, v2}, Ljava/util/concurrent/atomic/AtomicInteger;->set(I)V

    new-instance v1, Lnet/lightbody/bmp/core/har/Har;

    new-instance v2, Lnet/lightbody/bmp/core/har/HarLog;

    sget-object v3, Lnet/lightbody/bmp/BrowserMobProxyServer;->HAR_CREATOR_VERSION:Lnet/lightbody/bmp/core/har/HarNameVersion;

    invoke-direct {v2, v3, p0}, Lnet/lightbody/bmp/core/har/HarLog;-><init>(Lnet/lightbody/bmp/core/har/HarNameVersion;Lnet/lightbody/bmp/BrowserMobProxyServer;)V

    invoke-direct {v1, v2}, Lnet/lightbody/bmp/core/har/Har;-><init>(Lnet/lightbody/bmp/core/har/HarLog;)V

    iput-object v1, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->har:Lnet/lightbody/bmp/core/har/Har;

    invoke-virtual {p0, p1, p2}, Lnet/lightbody/bmp/BrowserMobProxyServer;->newPage(Ljava/lang/String;Ljava/lang/String;)Lnet/lightbody/bmp/core/har/Har;

    return-object v0
.end method

.method public newPage()Lnet/lightbody/bmp/core/har/Har;
    .locals 1

    const/4 v0, 0x0

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->newPage(Ljava/lang/String;)Lnet/lightbody/bmp/core/har/Har;

    move-result-object v0

    return-object v0
.end method

.method public newPage(Ljava/lang/String;)Lnet/lightbody/bmp/core/har/Har;
    .locals 1

    const/4 v0, 0x0

    invoke-virtual {p0, p1, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->newPage(Ljava/lang/String;Ljava/lang/String;)Lnet/lightbody/bmp/core/har/Har;

    move-result-object v0

    return-object v0
.end method

.method public declared-synchronized newPage(Ljava/lang/String;Ljava/lang/String;)Lnet/lightbody/bmp/core/har/Har;
    .locals 3

    monitor-enter p0

    :try_start_0
    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->har:Lnet/lightbody/bmp/core/har/Har;

    if-nez v0, :cond_0

    new-instance v0, Ljava/lang/IllegalStateException;

    const-string v1, "No HAR exists for this proxy. Use newHar() to create a new HAR before calling newPage()."

    invoke-direct {v0, v1}, Ljava/lang/IllegalStateException;-><init>(Ljava/lang/String;)V

    throw v0
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    :catchall_0
    move-exception v0

    monitor-exit p0

    throw v0

    :cond_0
    const/4 v0, 0x0

    :try_start_1
    iget-object v1, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->currentHarPage:Lnet/lightbody/bmp/core/har/HarPage;

    if-eqz v1, :cond_3

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->currentHarPage:Lnet/lightbody/bmp/core/har/HarPage;

    invoke-virtual {v0}, Lnet/lightbody/bmp/core/har/HarPage;->getId()Ljava/lang/String;

    move-result-object v0

    invoke-virtual {p0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->endPage()V

    iget-object v1, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->har:Lnet/lightbody/bmp/core/har/Har;

    invoke-static {v1, v0}, Lnet/lightbody/bmp/util/BrowserMobProxyUtil;->copyHarThroughPageRef(Lnet/lightbody/bmp/core/har/Har;Ljava/lang/String;)Lnet/lightbody/bmp/core/har/Har;

    move-result-object v0

    move-object v1, v0

    :goto_0
    if-nez p1, :cond_2

    new-instance v0, Ljava/lang/StringBuilder;

    invoke-direct {v0}, Ljava/lang/StringBuilder;-><init>()V

    const-string v2, "Page "

    invoke-virtual {v0, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v0

    iget-object v2, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->harPageCount:Ljava/util/concurrent/atomic/AtomicInteger;

    invoke-virtual {v2}, Ljava/util/concurrent/atomic/AtomicInteger;->getAndIncrement()I

    move-result v2

    invoke-virtual {v0, v2}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v0

    invoke-virtual {v0}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v0

    :goto_1
    if-nez p2, :cond_1

    move-object p2, v0

    :cond_1
    new-instance v2, Lnet/lightbody/bmp/core/har/HarPage;

    invoke-direct {v2, v0, p2}, Lnet/lightbody/bmp/core/har/HarPage;-><init>(Ljava/lang/String;Ljava/lang/String;)V

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->har:Lnet/lightbody/bmp/core/har/Har;

    invoke-virtual {v0}, Lnet/lightbody/bmp/core/har/Har;->getLog()Lnet/lightbody/bmp/core/har/HarLog;

    move-result-object v0

    invoke-virtual {v0, v2}, Lnet/lightbody/bmp/core/har/HarLog;->addPage(Lnet/lightbody/bmp/core/har/HarPage;)V

    iput-object v2, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->currentHarPage:Lnet/lightbody/bmp/core/har/HarPage;
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit p0

    return-object v1

    :cond_2
    move-object v0, p1

    goto :goto_1

    :cond_3
    move-object v1, v0

    goto :goto_0
.end method

.method public removeAllHeaders()V
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->additionalHeaders:Ljava/util/concurrent/ConcurrentMap;

    invoke-interface {v0}, Ljava/util/concurrent/ConcurrentMap;->clear()V

    return-void
.end method

.method public removeHeader(Ljava/lang/String;)V
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->additionalHeaders:Ljava/util/concurrent/ConcurrentMap;

    invoke-interface {v0, p1}, Ljava/util/concurrent/ConcurrentMap;->remove(Ljava/lang/Object;)Ljava/lang/Object;

    return-void
.end method

.method public removeRewriteRule(Ljava/lang/String;)V
    .locals 3

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->rewriteRules:Ljava/util/concurrent/CopyOnWriteArrayList;

    invoke-virtual {v0}, Ljava/util/concurrent/CopyOnWriteArrayList;->iterator()Ljava/util/Iterator;

    move-result-object v1

    :cond_0
    :goto_0
    invoke-interface {v1}, Ljava/util/Iterator;->hasNext()Z

    move-result v0

    if-eqz v0, :cond_1

    invoke-interface {v1}, Ljava/util/Iterator;->next()Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lnet/lightbody/bmp/proxy/RewriteRule;

    invoke-virtual {v0}, Lnet/lightbody/bmp/proxy/RewriteRule;->getPattern()Ljava/util/regex/Pattern;

    move-result-object v2

    invoke-virtual {v2}, Ljava/util/regex/Pattern;->pattern()Ljava/lang/String;

    move-result-object v2

    invoke-virtual {v2, p1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v2

    if-eqz v2, :cond_0

    iget-object v2, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->rewriteRules:Ljava/util/concurrent/CopyOnWriteArrayList;

    invoke-virtual {v2, v0}, Ljava/util/concurrent/CopyOnWriteArrayList;->remove(Ljava/lang/Object;)Z

    goto :goto_0

    :cond_1
    return-void
.end method

.method public rewriteUrl(Ljava/lang/String;Ljava/lang/String;)V
    .locals 2

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->rewriteRules:Ljava/util/concurrent/CopyOnWriteArrayList;

    new-instance v1, Lnet/lightbody/bmp/proxy/RewriteRule;

    invoke-direct {v1, p1, p2}, Lnet/lightbody/bmp/proxy/RewriteRule;-><init>(Ljava/lang/String;Ljava/lang/String;)V

    invoke-virtual {v0, v1}, Ljava/util/concurrent/CopyOnWriteArrayList;->add(Ljava/lang/Object;)Z

    return-void
.end method

.method public rewriteUrls(Ljava/util/Map;)V
    .locals 5
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "(",
            "Ljava/util/Map",
            "<",
            "Ljava/lang/String;",
            "Ljava/lang/String;",
            ">;)V"
        }
    .end annotation

    new-instance v2, Ljava/util/ArrayList;

    invoke-interface {p1}, Ljava/util/Map;->size()I

    move-result v0

    invoke-direct {v2, v0}, Ljava/util/ArrayList;-><init>(I)V

    invoke-interface {p1}, Ljava/util/Map;->entrySet()Ljava/util/Set;

    move-result-object v0

    invoke-interface {v0}, Ljava/util/Set;->iterator()Ljava/util/Iterator;

    move-result-object v3

    :goto_0
    invoke-interface {v3}, Ljava/util/Iterator;->hasNext()Z

    move-result v0

    if-eqz v0, :cond_0

    invoke-interface {v3}, Ljava/util/Iterator;->next()Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Ljava/util/Map$Entry;

    new-instance v4, Lnet/lightbody/bmp/proxy/RewriteRule;

    invoke-interface {v0}, Ljava/util/Map$Entry;->getKey()Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Ljava/lang/String;

    invoke-interface {v0}, Ljava/util/Map$Entry;->getValue()Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Ljava/lang/String;

    invoke-direct {v4, v1, v0}, Lnet/lightbody/bmp/proxy/RewriteRule;-><init>(Ljava/lang/String;Ljava/lang/String;)V

    invoke-interface {v2, v4}, Ljava/util/List;->add(Ljava/lang/Object;)Z

    goto :goto_0

    :cond_0
    new-instance v0, Ljava/util/concurrent/CopyOnWriteArrayList;

    invoke-direct {v0, v2}, Ljava/util/concurrent/CopyOnWriteArrayList;-><init>(Ljava/util/Collection;)V

    iput-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->rewriteRules:Ljava/util/concurrent/CopyOnWriteArrayList;

    return-void
.end method

.method public setBlacklist(Ljava/util/Collection;)V
    .locals 1
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "(",
            "Ljava/util/Collection",
            "<",
            "Lnet/lightbody/bmp/proxy/BlacklistEntry;",
            ">;)V"
        }
    .end annotation

    new-instance v0, Ljava/util/concurrent/CopyOnWriteArrayList;

    invoke-direct {v0, p1}, Ljava/util/concurrent/CopyOnWriteArrayList;-><init>(Ljava/util/Collection;)V

    iput-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->blacklistEntries:Ljava/util/Collection;

    return-void
.end method

.method public setChainedProxy(Ljava/net/InetSocketAddress;)V
    .locals 0

    iput-object p1, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->upstreamProxyAddress:Ljava/net/InetSocketAddress;

    return-void
.end method

.method public setChainedProxyManager(Lorg/littleshoot/proxy/d;)V
    .locals 2

    invoke-virtual {p0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->isStarted()Z

    move-result v0

    if-eqz v0, :cond_0

    new-instance v0, Ljava/lang/IllegalStateException;

    const-string v1, "Cannot configure chained proxy manager after proxy has started."

    invoke-direct {v0, v1}, Ljava/lang/IllegalStateException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_0
    iput-object p1, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->chainedProxyManager:Lorg/littleshoot/proxy/d;

    return-void
.end method

.method public setConnectTimeout(ILjava/util/concurrent/TimeUnit;)V
    .locals 4

    sget-object v0, Ljava/util/concurrent/TimeUnit;->MILLISECONDS:Ljava/util/concurrent/TimeUnit;

    int-to-long v2, p1

    invoke-virtual {v0, v2, v3, p2}, Ljava/util/concurrent/TimeUnit;->convert(JLjava/util/concurrent/TimeUnit;)J

    move-result-wide v0

    long-to-int v0, v0

    iput v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->connectTimeoutMs:I

    invoke-virtual {p0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->isStarted()Z

    move-result v0

    if-eqz v0, :cond_0

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->proxyServer:Lorg/littleshoot/proxy/m;

    sget-object v1, Ljava/util/concurrent/TimeUnit;->MILLISECONDS:Ljava/util/concurrent/TimeUnit;

    int-to-long v2, p1

    invoke-virtual {v1, v2, v3, p2}, Ljava/util/concurrent/TimeUnit;->convert(JLjava/util/concurrent/TimeUnit;)J

    move-result-wide v2

    long-to-int v1, v2

    invoke-interface {v0, v1}, Lorg/littleshoot/proxy/m;->b(I)V

    :cond_0
    return-void
.end method

.method public setHarCaptureTypes(Ljava/util/Set;)V
    .locals 1
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "(",
            "Ljava/util/Set",
            "<",
            "Lnet/lightbody/bmp/proxy/CaptureType;",
            ">;)V"
        }
    .end annotation

    if-eqz p1, :cond_0

    invoke-interface {p1}, Ljava/util/Set;->isEmpty()Z

    move-result v0

    if-eqz v0, :cond_1

    :cond_0
    const-class v0, Lnet/lightbody/bmp/proxy/CaptureType;

    invoke-static {v0}, Ljava/util/EnumSet;->noneOf(Ljava/lang/Class;)Ljava/util/EnumSet;

    move-result-object v0

    iput-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->harCaptureTypes:Ljava/util/EnumSet;

    :goto_0
    return-void

    :cond_1
    invoke-static {p1}, Ljava/util/EnumSet;->copyOf(Ljava/util/Collection;)Ljava/util/EnumSet;

    move-result-object v0

    iput-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->harCaptureTypes:Ljava/util/EnumSet;

    goto :goto_0
.end method

.method public varargs setHarCaptureTypes([Lnet/lightbody/bmp/proxy/CaptureType;)V
    .locals 1

    if-nez p1, :cond_0

    const-class v0, Lnet/lightbody/bmp/proxy/CaptureType;

    invoke-static {v0}, Ljava/util/EnumSet;->noneOf(Ljava/lang/Class;)Ljava/util/EnumSet;

    move-result-object v0

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->setHarCaptureTypes(Ljava/util/Set;)V

    :goto_0
    return-void

    :cond_0
    invoke-static {p1}, Ljava/util/Arrays;->asList([Ljava/lang/Object;)Ljava/util/List;

    move-result-object v0

    invoke-static {v0}, Ljava/util/EnumSet;->copyOf(Ljava/util/Collection;)Ljava/util/EnumSet;

    move-result-object v0

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->setHarCaptureTypes(Ljava/util/Set;)V

    goto :goto_0
.end method

.method public setHostNameResolver(Lnet/lightbody/bmp/proxy/dns/AdvancedHostResolver;)V
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->delegatingResolver:Lnet/lightbody/bmp/proxy/dns/DelegatingHostResolver;

    invoke-virtual {v0, p1}, Lnet/lightbody/bmp/proxy/dns/DelegatingHostResolver;->setResolver(Lnet/lightbody/bmp/proxy/dns/AdvancedHostResolver;)V

    return-void
.end method

.method public setIdleConnectionTimeout(ILjava/util/concurrent/TimeUnit;)V
    .locals 4

    sget-object v0, Ljava/util/concurrent/TimeUnit;->SECONDS:Ljava/util/concurrent/TimeUnit;

    int-to-long v2, p1

    invoke-virtual {v0, v2, v3, p2}, Ljava/util/concurrent/TimeUnit;->convert(JLjava/util/concurrent/TimeUnit;)J

    move-result-wide v0

    const-wide/16 v2, 0x0

    cmp-long v2, v0, v2

    if-nez v2, :cond_1

    if-lez p1, :cond_1

    const/4 v0, 0x1

    iput v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->idleConnectionTimeoutSec:I

    :goto_0
    invoke-virtual {p0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->isStarted()Z

    move-result v0

    if-eqz v0, :cond_0

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->proxyServer:Lorg/littleshoot/proxy/m;

    iget v1, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->idleConnectionTimeoutSec:I

    invoke-interface {v0, v1}, Lorg/littleshoot/proxy/m;->a(I)V

    :cond_0
    return-void

    :cond_1
    long-to-int v0, v0

    iput v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->idleConnectionTimeoutSec:I

    goto :goto_0
.end method

.method public setLatency(JLjava/util/concurrent/TimeUnit;)V
    .locals 3

    sget-object v0, Ljava/util/concurrent/TimeUnit;->MILLISECONDS:Ljava/util/concurrent/TimeUnit;

    invoke-virtual {v0, p1, p2, p3}, Ljava/util/concurrent/TimeUnit;->convert(JLjava/util/concurrent/TimeUnit;)J

    move-result-wide v0

    long-to-int v0, v0

    iput v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->latencyMs:I

    return-void
.end method

.method public setMitmDisabled(Z)V
    .locals 2

    invoke-virtual {p0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->isStarted()Z

    move-result v0

    if-eqz v0, :cond_0

    new-instance v0, Ljava/lang/IllegalStateException;

    const-string v1, "Cannot disable MITM after the proxy has been started"

    invoke-direct {v0, v1}, Ljava/lang/IllegalStateException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_0
    iput-boolean p1, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->mitmDisabled:Z

    return-void
.end method

.method public setMitmManager(Lorg/littleshoot/proxy/o;)V
    .locals 0

    iput-object p1, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->mitmManager:Lorg/littleshoot/proxy/o;

    return-void
.end method

.method public setReadBandwidthLimit(J)V
    .locals 7

    iput-wide p1, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->readBandwidthLimitBps:J

    invoke-virtual {p0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->isStarted()Z

    move-result v0

    if-eqz v0, :cond_0

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->proxyServer:Lorg/littleshoot/proxy/m;

    iget-wide v2, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->readBandwidthLimitBps:J

    iget-wide v4, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->writeBandwidthLimitBps:J

    invoke-interface {v0, v2, v3, v4, v5}, Lorg/littleshoot/proxy/m;->a(JJ)V

    :cond_0
    return-void
.end method

.method public setRequestTimeout(ILjava/util/concurrent/TimeUnit;)V
    .locals 6

    iget v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->idleConnectionTimeoutSec:I

    if-eqz v0, :cond_0

    iget v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->idleConnectionTimeoutSec:I

    int-to-long v0, v0

    sget-object v2, Ljava/util/concurrent/TimeUnit;->SECONDS:Ljava/util/concurrent/TimeUnit;

    int-to-long v4, p1

    invoke-virtual {v2, v4, v5, p2}, Ljava/util/concurrent/TimeUnit;->convert(JLjava/util/concurrent/TimeUnit;)J

    move-result-wide v2

    cmp-long v0, v0, v2

    if-lez v0, :cond_1

    :cond_0
    invoke-virtual {p0, p1, p2}, Lnet/lightbody/bmp/BrowserMobProxyServer;->setIdleConnectionTimeout(ILjava/util/concurrent/TimeUnit;)V

    :cond_1
    return-void
.end method

.method public setThreadPoolConfiguration(Lorg/littleshoot/proxy/impl/l;)V
    .locals 2

    invoke-virtual {p0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->isStarted()Z

    move-result v0

    if-eqz v0, :cond_0

    new-instance v0, Ljava/lang/IllegalStateException;

    const-string v1, "Cannot configure thread pool after proxy has started."

    invoke-direct {v0, v1}, Ljava/lang/IllegalStateException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_0
    iput-object p1, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->threadPoolConfiguration:Lorg/littleshoot/proxy/impl/l;

    return-void
.end method

.method public setTrustAllServers(Z)V
    .locals 2

    invoke-virtual {p0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->isStarted()Z

    move-result v0

    if-eqz v0, :cond_0

    new-instance v0, Ljava/lang/IllegalStateException;

    const-string v1, "Cannot disable upstream server verification after the proxy has been started"

    invoke-direct {v0, v1}, Ljava/lang/IllegalStateException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_0
    if-eqz p1, :cond_2

    const/4 v0, 0x0

    iput-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->trustSource:Lnet/lightbody/bmp/mitm/TrustSource;

    :cond_1
    :goto_0
    return-void

    :cond_2
    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->trustSource:Lnet/lightbody/bmp/mitm/TrustSource;

    if-nez v0, :cond_1

    invoke-static {}, Lnet/lightbody/bmp/mitm/TrustSource;->defaultTrustSource()Lnet/lightbody/bmp/mitm/TrustSource;

    move-result-object v0

    iput-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->trustSource:Lnet/lightbody/bmp/mitm/TrustSource;

    goto :goto_0
.end method

.method public setTrustSource(Lnet/lightbody/bmp/mitm/TrustSource;)V
    .locals 2

    invoke-virtual {p0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->isStarted()Z

    move-result v0

    if-eqz v0, :cond_0

    new-instance v0, Ljava/lang/IllegalStateException;

    const-string v1, "Cannot change TrustSource after proxy has been started"

    invoke-direct {v0, v1}, Ljava/lang/IllegalStateException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_0
    iput-object p1, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->trustSource:Lnet/lightbody/bmp/mitm/TrustSource;

    return-void
.end method

.method public setUseEcc(Z)V
    .locals 0

    iput-boolean p1, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->useEcc:Z

    return-void
.end method

.method public setWriteBandwidthLimit(J)V
    .locals 7

    iput-wide p1, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->writeBandwidthLimitBps:J

    invoke-virtual {p0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->isStarted()Z

    move-result v0

    if-eqz v0, :cond_0

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->proxyServer:Lorg/littleshoot/proxy/m;

    iget-wide v2, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->readBandwidthLimitBps:J

    iget-wide v4, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->writeBandwidthLimitBps:J

    invoke-interface {v0, v2, v3, v4, v5}, Lorg/littleshoot/proxy/m;->a(JJ)V

    :cond_0
    return-void
.end method

.method public start()V
    .locals 1

    const/4 v0, 0x0

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->start(I)V

    return-void
.end method

.method public start(I)V
    .locals 1

    const/4 v0, 0x0

    invoke-virtual {p0, p1, v0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->start(ILjava/net/InetAddress;Ljava/net/InetAddress;)V

    return-void
.end method

.method public start(ILjava/net/InetAddress;)V
    .locals 1

    const/4 v0, 0x0

    invoke-virtual {p0, p1, p2, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->start(ILjava/net/InetAddress;Ljava/net/InetAddress;)V

    return-void
.end method

.method public start(ILjava/net/InetAddress;Ljava/net/InetAddress;)V
    .locals 10

    const-wide/16 v8, 0x0

    const/4 v3, 0x0

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->started:Ljava/util/concurrent/atomic/AtomicBoolean;

    const/4 v1, 0x1

    invoke-virtual {v0, v3, v1}, Ljava/util/concurrent/atomic/AtomicBoolean;->compareAndSet(ZZ)Z

    move-result v0

    if-nez v0, :cond_0

    new-instance v0, Ljava/lang/IllegalStateException;

    const-string v1, "Proxy server is already started. Not restarting."

    invoke-direct {v0, v1}, Ljava/lang/IllegalStateException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_0
    if-nez p2, :cond_8

    new-instance v0, Ljava/net/InetSocketAddress;

    invoke-direct {v0, p1}, Ljava/net/InetSocketAddress;-><init>(I)V

    :goto_0
    iput-object p3, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->serverBindAddress:Ljava/net/InetAddress;

    invoke-virtual {p0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->addBrowserMobFilters()V

    invoke-static {}, Lorg/littleshoot/proxy/impl/e;->d()Lorg/littleshoot/proxy/n;

    move-result-object v1

    new-instance v2, Lnet/lightbody/bmp/BrowserMobProxyServer$1;

    invoke-direct {v2, p0}, Lnet/lightbody/bmp/BrowserMobProxyServer$1;-><init>(Lnet/lightbody/bmp/BrowserMobProxyServer;)V

    invoke-interface {v1, v2}, Lorg/littleshoot/proxy/n;->a(Lorg/littleshoot/proxy/k;)Lorg/littleshoot/proxy/n;

    move-result-object v1

    iget-object v2, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->delegatingResolver:Lnet/lightbody/bmp/proxy/dns/DelegatingHostResolver;

    invoke-interface {v1, v2}, Lorg/littleshoot/proxy/n;->a(Lorg/littleshoot/proxy/h;)Lorg/littleshoot/proxy/n;

    move-result-object v1

    invoke-interface {v1, v0}, Lorg/littleshoot/proxy/n;->a(Ljava/net/InetSocketAddress;)Lorg/littleshoot/proxy/n;

    move-result-object v0

    iget v1, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->connectTimeoutMs:I

    invoke-interface {v0, v1}, Lorg/littleshoot/proxy/n;->b(I)Lorg/littleshoot/proxy/n;

    move-result-object v0

    iget v1, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->idleConnectionTimeoutSec:I

    invoke-interface {v0, v1}, Lorg/littleshoot/proxy/n;->a(I)Lorg/littleshoot/proxy/n;

    move-result-object v0

    const-string v1, "browsermobproxy"

    invoke-interface {v0, v1}, Lorg/littleshoot/proxy/n;->a(Ljava/lang/String;)Lorg/littleshoot/proxy/n;

    move-result-object v1

    if-eqz p3, :cond_1

    new-instance v0, Ljava/net/InetSocketAddress;

    invoke-direct {v0, p3, v3}, Ljava/net/InetSocketAddress;-><init>(Ljava/net/InetAddress;I)V

    invoke-interface {v1, v0}, Lorg/littleshoot/proxy/n;->b(Ljava/net/InetSocketAddress;)Lorg/littleshoot/proxy/n;

    :cond_1
    iget-boolean v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->mitmDisabled:Z

    if-nez v0, :cond_3

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->mitmManager:Lorg/littleshoot/proxy/o;

    if-nez v0, :cond_2

    invoke-static {}, Lnet/lightbody/bmp/mitm/manager/ImpersonatingMitmManager;->builder()Lnet/lightbody/bmp/mitm/manager/ImpersonatingMitmManager$Builder;

    move-result-object v2

    new-instance v3, Lnet/lightbody/bmp/mitm/KeyStoreFileCertificateSource;

    const-string v4, "PKCS12"

    iget-boolean v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->useEcc:Z

    if-eqz v0, :cond_9

    const-string v0, "/sslSupport/ca-keystore-ec.p12"

    :goto_1
    const-string v5, "key"

    const-string v6, "password"

    invoke-direct {v3, v4, v0, v5, v6}, Lnet/lightbody/bmp/mitm/KeyStoreFileCertificateSource;-><init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V

    invoke-virtual {v2, v3}, Lnet/lightbody/bmp/mitm/manager/ImpersonatingMitmManager$Builder;->rootCertificateSource(Lnet/lightbody/bmp/mitm/CertificateAndKeySource;)Lnet/lightbody/bmp/mitm/manager/ImpersonatingMitmManager$Builder;

    move-result-object v2

    iget-boolean v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->useEcc:Z

    if-eqz v0, :cond_a

    new-instance v0, Lnet/lightbody/bmp/mitm/keys/ECKeyGenerator;

    invoke-direct {v0}, Lnet/lightbody/bmp/mitm/keys/ECKeyGenerator;-><init>()V

    :goto_2
    invoke-virtual {v2, v0}, Lnet/lightbody/bmp/mitm/manager/ImpersonatingMitmManager$Builder;->serverKeyGenerator(Lnet/lightbody/bmp/mitm/keys/KeyGenerator;)Lnet/lightbody/bmp/mitm/manager/ImpersonatingMitmManager$Builder;

    move-result-object v0

    iget-object v2, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->trustSource:Lnet/lightbody/bmp/mitm/TrustSource;

    invoke-virtual {v0, v2}, Lnet/lightbody/bmp/mitm/manager/ImpersonatingMitmManager$Builder;->trustSource(Lnet/lightbody/bmp/mitm/TrustSource;)Lnet/lightbody/bmp/mitm/manager/ImpersonatingMitmManager$Builder;

    move-result-object v0

    invoke-virtual {v0}, Lnet/lightbody/bmp/mitm/manager/ImpersonatingMitmManager$Builder;->build()Lnet/lightbody/bmp/mitm/manager/ImpersonatingMitmManager;

    move-result-object v0

    iput-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->mitmManager:Lorg/littleshoot/proxy/o;

    :cond_2
    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->mitmManager:Lorg/littleshoot/proxy/o;

    invoke-interface {v1, v0}, Lorg/littleshoot/proxy/n;->a(Lorg/littleshoot/proxy/o;)Lorg/littleshoot/proxy/n;

    :cond_3
    iget-wide v2, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->readBandwidthLimitBps:J

    cmp-long v0, v2, v8

    if-gtz v0, :cond_4

    iget-wide v2, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->writeBandwidthLimitBps:J

    cmp-long v0, v2, v8

    if-lez v0, :cond_5

    :cond_4
    iget-wide v2, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->readBandwidthLimitBps:J

    iget-wide v4, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->writeBandwidthLimitBps:J

    invoke-interface {v1, v2, v3, v4, v5}, Lorg/littleshoot/proxy/n;->a(JJ)Lorg/littleshoot/proxy/n;

    :cond_5
    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->chainedProxyManager:Lorg/littleshoot/proxy/d;

    if-eqz v0, :cond_b

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->chainedProxyManager:Lorg/littleshoot/proxy/d;

    invoke-interface {v1, v0}, Lorg/littleshoot/proxy/n;->a(Lorg/littleshoot/proxy/d;)Lorg/littleshoot/proxy/n;

    :cond_6
    :goto_3
    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->threadPoolConfiguration:Lorg/littleshoot/proxy/impl/l;

    if-eqz v0, :cond_7

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->threadPoolConfiguration:Lorg/littleshoot/proxy/impl/l;

    invoke-interface {v1, v0}, Lorg/littleshoot/proxy/n;->a(Lorg/littleshoot/proxy/impl/l;)Lorg/littleshoot/proxy/n;

    :cond_7
    invoke-interface {v1}, Lorg/littleshoot/proxy/n;->a()Lorg/littleshoot/proxy/m;

    move-result-object v0

    iput-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->proxyServer:Lorg/littleshoot/proxy/m;

    return-void

    :cond_8
    new-instance v0, Ljava/net/InetSocketAddress;

    invoke-direct {v0, p2, p1}, Ljava/net/InetSocketAddress;-><init>(Ljava/net/InetAddress;I)V

    goto/16 :goto_0

    :cond_9
    const-string v0, "/sslSupport/ca-keystore-rsa.p12"

    goto :goto_1

    :cond_a
    new-instance v0, Lnet/lightbody/bmp/mitm/keys/RSAKeyGenerator;

    invoke-direct {v0}, Lnet/lightbody/bmp/mitm/keys/RSAKeyGenerator;-><init>()V

    goto :goto_2

    :cond_b
    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->upstreamProxyAddress:Ljava/net/InetSocketAddress;

    if-eqz v0, :cond_6

    new-instance v0, Lnet/lightbody/bmp/BrowserMobProxyServer$2;

    invoke-direct {v0, p0}, Lnet/lightbody/bmp/BrowserMobProxyServer$2;-><init>(Lnet/lightbody/bmp/BrowserMobProxyServer;)V

    invoke-interface {v1, v0}, Lorg/littleshoot/proxy/n;->a(Lorg/littleshoot/proxy/d;)Lorg/littleshoot/proxy/n;

    goto :goto_3
.end method

.method public stop()V
    .locals 1

    const/4 v0, 0x1

    invoke-virtual {p0, v0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->stop(Z)V

    return-void
.end method

.method protected stop(Z)V
    .locals 3

    invoke-virtual {p0}, Lnet/lightbody/bmp/BrowserMobProxyServer;->isStarted()Z

    move-result v0

    if-eqz v0, :cond_3

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->stopped:Ljava/util/concurrent/atomic/AtomicBoolean;

    const/4 v1, 0x0

    const/4 v2, 0x1

    invoke-virtual {v0, v1, v2}, Ljava/util/concurrent/atomic/AtomicBoolean;->compareAndSet(ZZ)Z

    move-result v0

    if-eqz v0, :cond_2

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->proxyServer:Lorg/littleshoot/proxy/m;

    if-eqz v0, :cond_1

    if-eqz p1, :cond_0

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->proxyServer:Lorg/littleshoot/proxy/m;

    invoke-interface {v0}, Lorg/littleshoot/proxy/m;->a()V

    :goto_0
    return-void

    :cond_0
    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->proxyServer:Lorg/littleshoot/proxy/m;

    invoke-interface {v0}, Lorg/littleshoot/proxy/m;->b()V

    goto :goto_0

    :cond_1
    sget-object v0, Lnet/lightbody/bmp/BrowserMobProxyServer;->log:Lorg/slf4j/b;

    const-string v1, "Attempted to stop proxy server, but proxy was never successfully started."

    invoke-interface {v0, v1}, Lorg/slf4j/b;->c(Ljava/lang/String;)V

    goto :goto_0

    :cond_2
    new-instance v0, Ljava/lang/IllegalStateException;

    const-string v1, "Proxy server is already stopped. Cannot re-stop."

    invoke-direct {v0, v1}, Ljava/lang/IllegalStateException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_3
    new-instance v0, Ljava/lang/IllegalStateException;

    const-string v1, "Proxy server has not been started"

    invoke-direct {v0, v1}, Ljava/lang/IllegalStateException;-><init>(Ljava/lang/String;)V

    throw v0
.end method

.method public stopAutoAuthorization(Ljava/lang/String;)V
    .locals 1

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->basicAuthCredentials:Ljava/util/concurrent/ConcurrentMap;

    invoke-interface {v0, p1}, Ljava/util/concurrent/ConcurrentMap;->remove(Ljava/lang/Object;)Ljava/lang/Object;

    return-void
.end method

.method public waitForQuiescence(JJLjava/util/concurrent/TimeUnit;)Z
    .locals 7

    iget-object v1, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->activityMonitor:Lnet/lightbody/bmp/proxy/ActivityMonitor;

    move-wide v2, p1

    move-wide v4, p3

    move-object v6, p5

    invoke-virtual/range {v1 .. v6}, Lnet/lightbody/bmp/proxy/ActivityMonitor;->waitForQuiescence(JJLjava/util/concurrent/TimeUnit;)Z

    move-result v0

    return v0
.end method

.method public whitelistRequests(Ljava/util/Collection;I)V
    .locals 2
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "(",
            "Ljava/util/Collection",
            "<",
            "Ljava/lang/String;",
            ">;I)V"
        }
    .end annotation

    iget-object v0, p0, Lnet/lightbody/bmp/BrowserMobProxyServer;->whitelist:Ljava/util/concurrent/atomic/AtomicReference;

    new-instance v1, Lnet/lightbody/bmp/proxy/Whitelist;

    invoke-direct {v1, p1, p2}, Lnet/lightbody/bmp/proxy/Whitelist;-><init>(Ljava/util/Collection;I)V

    invoke-virtual {v0, v1}, Ljava/util/concurrent/atomic/AtomicReference;->set(Ljava/lang/Object;)V

    return-void
.end method

.method public whitelistRequests([Ljava/lang/String;I)V
    .locals 1

    if-eqz p1, :cond_0

    array-length v0, p1

    if-nez v0, :cond_1

    :cond_0
    invoke-virtual {p0, p2}, Lnet/lightbody/bmp/BrowserMobProxyServer;->enableEmptyWhitelist(I)V

    :goto_0
    return-void

    :cond_1
    invoke-static {p1}, Ljava/util/Arrays;->asList([Ljava/lang/Object;)Ljava/util/List;

    move-result-object v0

    invoke-virtual {p0, v0, p2}, Lnet/lightbody/bmp/BrowserMobProxyServer;->whitelistRequests(Ljava/util/Collection;I)V

    goto :goto_0
.end method
