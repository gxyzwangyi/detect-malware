.class public Lcn/darkal/networkdiagnosis/MyVpnService;
.super Landroid/net/VpnService;


# instance fields
.field private a:Landroid/os/Handler;


# direct methods
.method public constructor <init>()V
    .locals 1

    invoke-direct {p0}, Landroid/net/VpnService;-><init>()V

    new-instance v0, Landroid/os/Handler;

    invoke-direct {v0}, Landroid/os/Handler;-><init>()V

    iput-object v0, p0, Lcn/darkal/networkdiagnosis/MyVpnService;->a:Landroid/os/Handler;

    return-void
.end method

.method private a()V
    .locals 11

    const/4 v1, 0x1

    const/4 v2, 0x0

    const-string v0, "~~~"

    const-string v3, "VpnService: try to setup VPN."

    invoke-static {v0, v3}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    new-instance v0, Landroid/net/VpnService$Builder;

    invoke-direct {v0, p0}, Landroid/net/VpnService$Builder;-><init>(Landroid/net/VpnService;)V

    const-string v3, "firewall"

    invoke-virtual {v0, v3}, Landroid/net/VpnService$Builder;->setSession(Ljava/lang/String;)Landroid/net/VpnService$Builder;

    const-string v3, "10.0.8.1"

    const/16 v4, 0x20

    invoke-virtual {v0, v3, v4}, Landroid/net/VpnService$Builder;->addAddress(Ljava/lang/String;I)Landroid/net/VpnService$Builder;

    const-string v3, "0.0.0.0"

    invoke-virtual {v0, v3, v2}, Landroid/net/VpnService$Builder;->addRoute(Ljava/lang/String;I)Landroid/net/VpnService$Builder;

    :try_start_0
    invoke-virtual {v0}, Landroid/net/VpnService$Builder;->establish()Landroid/os/ParcelFileDescriptor;

    move-result-object v0

    if-eqz v0, :cond_4

    const-string v3, "~~~"

    const-string v4, "VpnService: call ProxyWorker.start()"

    invoke-static {v3, v4}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    new-instance v4, Ljava/io/FileInputStream;

    invoke-virtual {v0}, Landroid/os/ParcelFileDescriptor;->getFileDescriptor()Ljava/io/FileDescriptor;

    move-result-object v3

    invoke-direct {v4, v3}, Ljava/io/FileInputStream;-><init>(Ljava/io/FileDescriptor;)V

    new-instance v5, Ljava/io/FileOutputStream;

    invoke-virtual {v0}, Landroid/os/ParcelFileDescriptor;->getFileDescriptor()Ljava/io/FileDescriptor;

    move-result-object v0

    invoke-direct {v5, v0}, Ljava/io/FileOutputStream;-><init>(Ljava/io/FileDescriptor;)V

    const/16 v0, 0x7fff

    invoke-static {v0}, Ljava/nio/ByteBuffer;->allocate(I)Ljava/nio/ByteBuffer;

    move-result-object v6

    move v3, v2

    :goto_0
    invoke-virtual {v6}, Ljava/nio/ByteBuffer;->array()[B

    move-result-object v0

    invoke-virtual {v4, v0}, Ljava/io/FileInputStream;->read([B)I

    move-result v7

    if-lez v7, :cond_9

    invoke-virtual {v6, v7}, Ljava/nio/ByteBuffer;->limit(I)Ljava/nio/Buffer;

    invoke-virtual {v6}, Ljava/nio/ByteBuffer;->clear()Ljava/nio/Buffer;

    if-ge v3, v1, :cond_8

    move v0, v2

    move v3, v1

    :goto_1
    if-lez v7, :cond_7

    const/4 v0, 0x0

    invoke-virtual {v6, v0}, Ljava/nio/ByteBuffer;->get(I)B

    move-result v0

    if-eqz v0, :cond_0

    invoke-virtual {v6}, Ljava/nio/ByteBuffer;->array()[B

    move-result-object v0

    const/4 v8, 0x0

    invoke-virtual {v5, v0, v8, v7}, Ljava/io/FileOutputStream;->write([BII)V

    :cond_0
    invoke-virtual {v6}, Ljava/nio/ByteBuffer;->clear()Ljava/nio/Buffer;

    if-lez v3, :cond_6

    move v3, v2

    move v0, v2

    :goto_2
    if-eqz v3, :cond_5

    const-wide/16 v8, 0x64

    invoke-static {v8, v9}, Ljava/lang/Thread;->sleep(J)V

    if-lez v0, :cond_1

    const/16 v3, 0x64

    :goto_3
    add-int/2addr v0, v3

    const/16 v3, -0x3a98

    if-ge v0, v3, :cond_3

    const/4 v0, 0x0

    invoke-virtual {v6, v0}, Ljava/nio/ByteBuffer;->put(B)Ljava/nio/ByteBuffer;

    move-result-object v0

    const/4 v3, 0x1

    invoke-virtual {v0, v3}, Ljava/nio/ByteBuffer;->limit(I)Ljava/nio/Buffer;

    move v0, v2

    :goto_4
    const/4 v3, 0x3

    if-ge v0, v3, :cond_2

    const/4 v3, 0x0

    invoke-virtual {v6, v3}, Ljava/nio/ByteBuffer;->position(I)Ljava/nio/Buffer;

    add-int/lit8 v0, v0, 0x1

    goto :goto_4

    :cond_1
    const/16 v3, -0x64

    goto :goto_3

    :cond_2
    invoke-virtual {v6}, Ljava/nio/ByteBuffer;->clear()Ljava/nio/Buffer;

    move v0, v1

    :cond_3
    const/16 v3, 0x4e20

    if-le v0, v3, :cond_5

    new-instance v0, Ljava/lang/IllegalStateException;

    const-string v1, "Timed out"

    invoke-direct {v0, v1}, Ljava/lang/IllegalStateException;-><init>(Ljava/lang/String;)V

    throw v0
    :try_end_0
    .catch Ljava/lang/IllegalStateException; {:try_start_0 .. :try_end_0} :catch_0
    .catch Ljava/lang/Exception; {:try_start_0 .. :try_end_0} :catch_1

    :catch_0
    move-exception v0

    const-string v1, "~~~"

    const-string v2, "VpnService: builder.establish() failed."

    invoke-static {v1, v2}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    iget-object v1, p0, Lcn/darkal/networkdiagnosis/MyVpnService;->a:Landroid/os/Handler;

    if-eqz v1, :cond_4

    iget-object v1, p0, Lcn/darkal/networkdiagnosis/MyVpnService;->a:Landroid/os/Handler;

    new-instance v2, Lcn/darkal/networkdiagnosis/MyVpnService$1;

    invoke-direct {v2, p0, v0}, Lcn/darkal/networkdiagnosis/MyVpnService$1;-><init>(Lcn/darkal/networkdiagnosis/MyVpnService;Ljava/lang/IllegalStateException;)V

    invoke-virtual {v1, v2}, Landroid/os/Handler;->post(Ljava/lang/Runnable;)Z

    :cond_4
    :goto_5
    return-void

    :cond_5
    move v3, v0

    goto :goto_0

    :catch_1
    move-exception v0

    invoke-virtual {v0}, Ljava/lang/Exception;->printStackTrace()V

    goto :goto_5

    :cond_6
    move v0, v3

    move v3, v2

    goto :goto_2

    :cond_7
    move v10, v0

    move v0, v3

    move v3, v10

    goto :goto_2

    :cond_8
    move v0, v2

    goto :goto_1

    :cond_9
    move v0, v1

    goto :goto_1
.end method

.method static synthetic a(Lcn/darkal/networkdiagnosis/MyVpnService;)V
    .locals 0

    invoke-direct {p0}, Lcn/darkal/networkdiagnosis/MyVpnService;->a()V

    return-void
.end method

.method private b()V
    .locals 2

    const-string v0, "~~~"

    const-string v1, "VpnService: call ProxyWorker.stop()"

    invoke-static {v0, v1}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    return-void
.end method


# virtual methods
.method public onDestroy()V
    .locals 0

    invoke-super {p0}, Landroid/net/VpnService;->onDestroy()V

    return-void
.end method

.method public onRevoke()V
    .locals 0

    invoke-direct {p0}, Lcn/darkal/networkdiagnosis/MyVpnService;->b()V

    invoke-super {p0}, Landroid/net/VpnService;->onRevoke()V

    return-void
.end method

.method public onStartCommand(Landroid/content/Intent;II)I
    .locals 2

    new-instance v0, Ljava/lang/Thread;

    new-instance v1, Lcn/darkal/networkdiagnosis/MyVpnService$2;

    invoke-direct {v1, p0}, Lcn/darkal/networkdiagnosis/MyVpnService$2;-><init>(Lcn/darkal/networkdiagnosis/MyVpnService;)V

    invoke-direct {v0, v1}, Ljava/lang/Thread;-><init>(Ljava/lang/Runnable;)V

    invoke-virtual {v0}, Ljava/lang/Thread;->start()V

    invoke-super {p0, p1, p2, p3}, Landroid/net/VpnService;->onStartCommand(Landroid/content/Intent;II)I

    move-result v0

    return v0
.end method
