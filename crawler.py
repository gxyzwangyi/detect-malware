#!/usr/bin/python3

import hashlib
import urllib.request
import binascii
import urllib.error
import os
import sqlalchemy.exc
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import sqlalchemy.orm.exc
from db import APKdata, Downloaded, Base, engine, session, Session, Errors
import os.path
import lxml.html
import urllib.request
import sys
import socket
import logging
import argparse
import time
import http.client

parser = argparse.ArgumentParser(description = 'Enter Log Number')
parser.add_argument("log", type = str)
args = parser.parse_args().log

cachesize = 65536
logger = logging.getLogger()
logger.setLevel(0)
FORMAT = '%(clientip)s %(asctime)-15s %(message)s'
logging.basicConfig(format = FORMAT, datefmt = '%y-%m-%d %H:%M:%S', filename = '/home/coconut/crawler/stdout{}'.format(args), filemode = 'w')
d = {'clientip':os.getpid()}

def log(kind, msg):
    logger.debug(kind+': %s', msg, extra = d)
    
def deletena(i):
    for u in session.query(Downloaded):
        if u.sha1 == i.url and u.version == 'NA':
            session.delete(u)
            session.commit()
            break
            
def adddata(i):
    data = session.query(APKdata).filter(APKdata.url == i.url).first()
    if not data:
        data = APKdata(i.url, 0, time.time())
        session.add(data)
    else:
        data.priority = 0
        data.time = time.time()
    try:
        session.commit()
    except sqlalchemy.exc.IntegrityError:
        session.rollback()
        pass

def adderror(i, kind):
    error = session.query(Errors).filter(Errors.url == i.url).first()
    if error is None:
        apk = Errors(i.url, 1)
        session.add(apk)
    else:
        error.amount += 1
    session.commit()
    log("Error", "adding {} error".format(kind))
    deletena(i)
    adddata(i)
        
def geturl(i):
    try:
        return urllib.request.urlopen(i.url, timeout=300)
    except urllib.error.HTTPError:
        adderror(i, 'url')

def download(downloadurl,i):
    try:
        response = urllib.request.urlopen(downloadurl, timeout=300)
    except (urllib.error.URLError, ConnectionResetError, socket.timeout):
        adderror(i, 'download')
        return None
    filename = "/home/coconut/{}.apk".format(os.getpid())
    with open(filename, 'wb') as file:
        try:
            data = response.read(cachesize)
        except (socket.timeout, ConnectionResetError):
            adderror(i, 'download')
            return None
        while data:
            file.write(data)
            try:
                data = response.read(cachesize)
            except (socket.timeout, ConnectionResetError):
                adderror(i, 'download')
                return None
    return filename

    
while True:
    if os.path.exists('/home/coconut/end'):
        log("Info", "ending...")
        break
    i = session.query(APKdata).order_by(APKdata.priority.desc()).order_by(APKdata.time).first()
    if not i:
        break
    session.delete(i)
    session.commit()
    apk = Downloaded(i.url, 'new', i.url, 'NA', 'NA')
    session.add(apk)
    try:
        session.commit()
        log("Info", "retrieved data object")
    except (sqlalchemy.orm.exc.ObjectDeletedError, sqlalchemy.exc.IntegrityError):
        session.rollback()
        continue
    log("Info", "getting url: {}".format(i.url))
        
    try:
        c = geturl(i)
        b = lxml.html.parse(c)
    except (socket.timeout, TypeError):
        adderror(i, 'url')
        continue
    
    for element in b.iter():
        if element.tag == 'a':
            g = element.attrib
            if len(g) == 17:
                downloadurl = g['data_url']
                name = g['data_name']
                version = g['data_versionname']
        if element.tag == 'span':
            g = element.attrib 
            if len(g) == 14:
                aa = 'http://shouji.baidu.com/software/item?docid='
                aaa = g['data-tj']
                if aaa[16] == '_':
                    url = (aa+aaa[9:16])
                elif aaa[15] == '_':
                    url = (aa+aaa[9:15])
                else:
                    break
                priority = 1
                for u in session.query(Downloaded).filter(Downloaded.url == url):
                    priority = 0
                    break
                app_user = APKdata(url, priority, time.time())
                try:
                    session.merge(app_user)
                except sqlalchemy.orm.exc.ObjectDeletedError:
                    pass
                try:
                    session.commit()
                except sqlalchemy.exc.IntegrityError:
                    session.rollback()
                    continue
                log("Info", "added related app")

    if i.priority == 0:
        log("Info", "already downloaded")
        data = APKdata(i.url, 0, time.time())
        session.add(data)
        try:
            session.commit()
        except sqlalchemy.exc.IntegrityError:
            session.rollback()
            pass
        try:
            deletena(i)
        except http.client.IncompleteRead:
            adderror(i, 'download')
            session.rollback()
        continue

    log("Info", "downloading url: {}".format(downloadurl))
    try:
        filename = download(downloadurl,i)
    except http.client.IncompleteRead:
        adderror(i, 'download')
        continue
    if not filename:
        continue
        
    #find sha1
    log("Info", "finished download")
    with open(filename, 'rb') as f:
        gg = f.read(cachesize)
        hh = hashlib.sha1()
        while gg:
            hh.update(gg)
            gg = f.read(cachesize)
    bb = binascii.hexlify(hh.digest()).decode()
    name1 = bb[0]+bb[1]
    destination = os.path.join('/home/coconut/crawler/apps', name1)
    newfilename = os.path.join(destination, bb+'.apk')
    if os.path.exists('/home/coconut/end'):
        break
    if not os.path.exists(destination):
        os.mkdir(destination)
    deletena(i)
    apk = Downloaded(bb, name, i.url, downloadurl, version)
    session.add(apk)
    try:
        session.commit()
        log("Info", "committing session {}".format(name))
    except sqlalchemy.exc.IntegrityError:
        session.rollback()
        log("Error", "already downloaded")
        adddata(i)
        continue
    os.rename(filename, newfilename)
    log("Info", "moved file to folder: {}".format(name1))
    adddata(i)

log("Info", "end.")
