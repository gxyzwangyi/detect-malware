#coding:utf-8

import hashlib
import binascii
# import urllib.error
import os
# import sqlalchemy.exc
# from sqlalchemy import create_engine
# from sqlalchemy.ext.declarative import declarative_base
# from sqlalchemy.orm import sessionmaker
# import sqlalchemy.orm.exc
# from db import APKdata, Downloaded, Base, engine, session, Session, Errors
import os.path
import lxml.html
import urllib.request
import sys
import socket
import logging
import argparse
import time
import MySQLdb
import sqlite3
# import http.client
import requests
from bs4 import BeautifulSoup
from optparse import OptionParser
# from wget import wget
import threading
import signal
import queue
work_queue_lock = threading.Lock()

#(name,description,introduce,version,download_number,apk_url,serial_number,category,category_num,package_name,keywords,size,download_icon,download_url)





class Downloader(threading.Thread):
    def __init__(self, db,work_queue):
        threading.Thread.__init__(self)
        self.db = db
        self.work_queue = work_queue
        self.exit_event = threading.Event()
        self.current_file_size = 0
        self.file_size = 0
    def exit(self):
        print("%s: asked to exit." % self.getName())
        self.exit_event.set()
        self.join()
        return self.report()
    def report(self):
        if self.file_size == 0:
            return 0
        return float(self.current_file_size) / self.file_size

    def get_apk_content(self,url):
        r=requests.get(url,allow_redirects=False)
        soup= BeautifulSoup(r.content,"html.parser",from_encoding='GB18030')
        if soup.title.string=="":
            return 0,0
        else:
            try:
                name = soup.select(".content-right")[0].h1.text
                description=soup.select("meta")[2].get("content")[0:(lambda x:x.index('，'))(soup.select("meta")[2].get("content"))].replace("'","")
                introduce=soup.select(".introduction")[0].select('.brief-long')[0].text.replace("'","")
                version= soup.select(".content-right")[0].select(".detail")[0].select(".version")[0].text[4::]
                download_number=soup.select(".content-right")[0].select(".detail")[0].select(".download-num")[0].text[6::]
                apk_url=soup.find_all(rel="canonical")[0].get("href")
                serial_number=apk_url[(lambda x:x.index('e/'))(apk_url)+2:-5]
                category=soup.select(".app-nav")[0].select(".nav")[0].find_all('a')[-1].text
                category_num=soup.select(".app-nav")[0].select(".nav")[0].find_all('a')[-1].get("href")
                package_name=soup.select(".one-setup-btn")[0].get("data_package")
                keywords=soup.select("meta")[1].get("content").replace("'","")
                size=soup.select(".one-setup-btn")[0].get("data_size")
                download_icon=soup.select(".one-setup-btn")[0].get("data_icon")
                download_url=soup.select(".area-download")[0].a["href"]
                downloaded=0
                error=""
            except Exception as ex:
                desc=str(ex)
                return 0
            apk_list=[name,description,introduce,version,download_number,apk_url,serial_number,category,category_num,package_name,keywords,size,download_icon,download_url,downloaded,error]   
            return apk_list 
            
    def run(self):
        while not self.exit_event.isSet():
            work_queue_lock.acquire()
            if not self.work_queue.empty():
                self.url = self.work_queue.get()
                work_queue_lock.release()
                try:
                    self.insert_db()
                except urllib.request.HTTPError:
                    pass
            else:
                work_queue_lock.release()
        print("%s: received exit event." % self.getName())

    def insert_db(self):    
        insertTable="apps"
        apk_content_list=self.get_apk_content(self.url)
        if apk_content_list!=0:
            self.db.inserttable(insertTable,apk_content_list)

                                    
class DB:     
     #连接数据库 mysql
    def connectDB(self):
        conn = sqlite3.connect('test1.db')
        return conn

      #创建表，SQL语言。CREATE TABLE IF NOT EXISTS 表示：表createTableName不存在时就创建
    def creatTable(self,createTableName):
        createTableSql="CREATE TABLE IF NOT EXISTS "+ createTableName+"(name VARCHAR(40),description VARCHAR(200),introduce  VARCHAR(2000),version VARCHAR(40),download_number VARCHAR(10),  apk_url VARCHAR(100), serial_number VARCHAR(40), category VARCHAR(40), category_num VARCHAR(40),package_name VARCHAR(20),keywords VARCHAR(100),size VARCHAR(20), download_icon  VARCHAR(100), download_url VARCHAR(100),downloaded VARCHAR(5),error VARCHAR(40))" 
        DB_create=self.connectDB()
        # cursor_create=DB_create.cursor()
        # cursor_create.execute(createTableSql)
        DB_create.execute(createTableSql)
        DB_create.close()
        print ('creat table '+createTableName+' successfully' )
        return createTableName 

    #数据插入表中
    def inserttable(self,insertTable,insertlist):
        # print("insert")
        # print(insertlist)
        [insertname,insertdescription,insertintroduce,insertversion,insertdownload_number,insertapk_url,insertserial_number,insertcategory,insertcategory_num,insertpackage_name,insertkeywords,insertsize,insertdownload_icon,insertdownload_url,insertdownloaded,inserterror]=insertlist
        insertContentSql="INSERT INTO "+insertTable+" (name,description,introduce,version,download_number,apk_url,serial_number,category,category_num,package_name,keywords,size,download_icon,download_url,downloaded,error) VALUES ('%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s')"
        DB_insert=self.connectDB()
        # cursor_insert=DB_insert.cursor()     
        str1=insertContentSql % (insertname,insertdescription,insertintroduce,insertversion,insertdownload_number,insertapk_url,insertserial_number,insertcategory,insertcategory_num,insertpackage_name,insertkeywords,insertsize,insertdownload_icon,insertdownload_url,insertdownloaded,inserterror)
        # print(str1)

        DB_insert.execute(str1)
        DB_insert.commit()
        DB_insert.close()
        # print ('insert contents to  '+insertTable+' successfully'  )


class Monitor(threading.Thread):
    def __init__(self, threads):
        threading.Thread.__init__(self)
        self.threads = threads
        self.exit_event = threading.Event()
    def exit(self):
        self.exit_event.set()
        self.join()
    def run(self):
        while not self.exit_event.isSet():
            for t in self.threads:
                if t.report() == 0:
                    pass
                else:
                    print("%3.0f%%" % (t.report()*100)),
            print("")
            time.sleep(1)

class Watcher:
    def __init__(self):
        self.child = os.fork()
        if self.child == 0:
            return
        else:
            self.watch()
    def watch(self):
        try:
            os.wait()
        except KeyboardInterrupt:
            print("KeyBoardInterrupt")
            self.kill()
        sys.exit()
    def kill(self):
        try:
            os.kill(self.child, signal.SIGKILL)
        except OSError: 
            pass



def generate_url(start,end,work_queue):
    for number in range(start,end):    
        url="http://shouji.baidu.com/software/"+str(number)+".html"
        work_queue.put(url)
    return work_queue




def main():
    the_db=DB()
    table=the_db.creatTable("apps")
    NUM_THREAD=2
    
    Watcher()
    threads = []
    work_queue = queue.Queue()

    for i in range(NUM_THREAD):
        t = Downloader(the_db,work_queue)
        t.daemon = True
        t.start()
        threads.append(t)
    monitor_thread = Monitor(threads)
    monitor_thread.daemon = True
    monitor_thread.start()

    print(work_queue.empty())
    generate_url(95026,95050,work_queue)
    exit_flag = 0
    while exit_flag < 2:
        print(exit_flag)
        print(work_queue.qsize())
        if work_queue.empty():
            exit_flag += 1
        else:
            exit_flag = 0
        while not work_queue.empty():
            time.sleep(10)
    for t in threads:
        t.exit()
    monitor_thread.exit()

if __name__ == '__main__':
    main()











# def get(url,filename):
#     headers = {
#         'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.111 Safari/537.36',
#         'Referer': url,
#         'Cookie': 'foo=1;'
#     }
#     w = wget()
#     w.download(url, filename)


# def download(downloadurl,i):
#     try:
#         response = urllib.request.urlopen(downloadurl, timeout=300)
#     except (urllib.error.URLError, ConnectionResetError, socket.timeout):
#         adderror(i, 'download')
#         return None

    
    
#     filename = "/home/coconut/{}.apk".format(os.getpid())
#     with open(filename, 'wb') as file:
#         try:
#             data = response.read(cachesize)
#         except (socket.timeout, ConnectionResetError):
#             adderror(i, 'download')
#             return None
#         while data:
#             file.write(data)
#             try:
#                 data = response.read(cachesize)
#             except (socket.timeout, ConnectionResetError):
#                 adderror(i, 'download')
#                 return None
#     return filename





